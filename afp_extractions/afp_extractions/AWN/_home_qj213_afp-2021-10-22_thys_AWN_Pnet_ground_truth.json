{"file_name": "/home/qj213/afp-2021-10-22/thys/AWN/Pnet.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AWN", "problem_names": ["lemma pnet_maintains_dom:\n  assumes \"(s, a, s') \\<in> trans (pnet np p)\"\n    shows \"net_ips s = net_ips s'\"", "lemma pnet_net_ips_net_tree_ips [elim]:\n  assumes \"s \\<in> reachable (pnet np p) I\"\n    shows \"net_ips s = net_tree_ips p\"", "lemma pnet_init_net_ips_net_tree_ips:\n  assumes \"s \\<in> init (pnet np p)\"\n    shows \"net_ips s = net_tree_ips p\"", "lemma pnet_init_in_net_ips_in_net_tree_ips [elim]:\n  assumes \"s \\<in> init (pnet np p)\"\n      and \"i \\<in> net_ips s\"\n    shows \"i \\<in> net_tree_ips p\"", "lemma pnet_init_in_net_tree_ips_in_net_ips [elim]:\n  assumes \"s \\<in> init (pnet np p)\"\n      and \"i \\<in> net_tree_ips p\"\n    shows \"i \\<in> net_ips s\"", "lemma pnet_init_not_in_net_tree_ips_not_in_net_ips [elim]:\n  assumes \"s \\<in> init (pnet np p)\"\n      and \"i \\<notin> net_tree_ips p\"\n    shows \"i \\<notin> net_ips s\"", "lemma net_node_reachable_is_node:\n  assumes \"st \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) I\"\n    shows \"\\<exists>ns R. st = NodeS ii ns R\"", "lemma partial_net_preserves_subnets:\n  assumes \"(SubnetS s t, a, st') \\<in> pnet_sos (trans (pnet np p1)) (trans (pnet np p2))\"\n    shows \"\\<exists>s' t'. st' = SubnetS s' t'\"", "lemma net_par_reachable_is_subnet:\n  assumes \"st \\<in> reachable (pnet np (p1 \\<parallel> p2)) I\"\n    shows \"\\<exists>s t. st = SubnetS s t\"", "lemma reachable_par_subnet_induct [consumes, case_names init step]:\n  assumes \"SubnetS s t \\<in> reachable (pnet np (p1 \\<parallel> p2)) I\"\n      and init: \"\\<And>s t. SubnetS s t \\<in> init (pnet np (p1 \\<parallel> p2)) \\<Longrightarrow> P s t\"\n      and step: \"\\<And>s t s' t' a. \\<lbrakk>\n                    SubnetS s t \\<in> reachable (pnet np (p1 \\<parallel> p2)) I;\n                    P s t; (SubnetS s t, a, SubnetS s' t') \\<in> (trans (pnet np (p1 \\<parallel> p2))); I a \\<rbrakk>\n                    \\<Longrightarrow> P s' t'\"\n    shows \"P s t\"", "lemma subnet_reachable:\n  assumes \"SubnetS s1 s2 \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\"\n    shows \"s1 \\<in> reachable (pnet np p1) TT\"\n          \"s2 \\<in> reachable (pnet np p2) TT\"", "lemma delivered_to_node [elim]:\n  assumes \"s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\"\n      and \"(s, i:deliver(d), s') \\<in> trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\"\n    shows \"i = ii\"", "lemma delivered_to_net_ips:\n  assumes \"s \\<in> reachable (pnet np p) TT\"\n      and \"(s, i:deliver(d), s') \\<in> trans (pnet np p)\"\n    shows \"i \\<in> net_ips s\"", "lemma wf_net_tree_net_ips_disjoint [elim]:\n  assumes \"wf_net_tree (p1 \\<parallel> p2)\"\n      and \"s1 \\<in> reachable (pnet np p1) S\"\n      and \"s2 \\<in> reachable (pnet np p2) S\"\n    shows \"net_ips s1 \\<inter> net_ips s2 = {}\"", "lemma init_mapstate_Some_aodv_init [elim]:\n  assumes \"s \\<in> init (pnet np p)\"\n      and \"netmap s i = Some v\"\n    shows \"v \\<in> init (np i)\"", "lemma reachable_connect_netmap [elim]:\n  assumes \"s \\<in> reachable (pnet np n) TT\"\n      and \"(s, connect(i, i'), s') \\<in> trans (pnet np n)\"\n    shows \"netmap s' = netmap s\"", "lemma reachable_disconnect_netmap [elim]:\n  assumes \"s \\<in> reachable (pnet np n) TT\"\n      and \"(s, disconnect(i, i'), s') \\<in> trans (pnet np n)\"\n    shows \"netmap s' = netmap s\"", "lemma pnet_tau_single_node [elim]:\n  assumes \"wf_net_tree p\"\n      and \"s \\<in> reachable (pnet np p) TT\"\n      and \"(s, \\<tau>, s') \\<in> trans (pnet np p)\"\n  shows \"\\<exists>i\\<in>net_ips s. ((\\<forall>j. j\\<noteq>i \\<longrightarrow> netmap s' j = netmap s j)\n                         \\<and> net_ip_action np \\<tau> i p s s')\"", "lemma pnet_deliver_single_node [elim]:\n  assumes \"wf_net_tree p\"\n      and \"s \\<in> reachable (pnet np p) TT\"\n      and \"(s, i:deliver(d), s') \\<in> trans (pnet np p)\"\n  shows \"(\\<forall>j. j\\<noteq>i \\<longrightarrow> netmap s' j = netmap s j) \\<and> net_ip_action np (i:deliver(d)) i p s s'\"\n    (is \"?P p s s'\")"], "translations": [["", "lemma pnet_maintains_dom:\n  assumes \"(s, a, s') \\<in> trans (pnet np p)\"\n    shows \"net_ips s = net_ips s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. net_ips s = net_ips s'", "using assms"], ["proof (prove)\nusing this:\n  (s, a, s') \\<in> automaton.trans (pnet np p)\n\ngoal (1 subgoal):\n 1. net_ips s = net_ips s'", "proof (induction p arbitrary: s a s')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R s a s'.\n       (s, a, s')\n       \\<in> automaton.trans\n              (pnet np \\<langle>i; R\\<rangle>) \\<Longrightarrow>\n       net_ips s = net_ips s'\n 2. \\<And>p1 p2 s a s'.\n       \\<lbrakk>\\<And>s a s'.\n                   (s, a, s')\n                   \\<in> automaton.trans (pnet np p1) \\<Longrightarrow>\n                   net_ips s = net_ips s';\n        \\<And>s a s'.\n           (s, a, s') \\<in> automaton.trans (pnet np p2) \\<Longrightarrow>\n           net_ips s = net_ips s';\n        (s, a, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_ips s'", "fix i R \\<sigma> s a s'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R s a s'.\n       (s, a, s')\n       \\<in> automaton.trans\n              (pnet np \\<langle>i; R\\<rangle>) \\<Longrightarrow>\n       net_ips s = net_ips s'\n 2. \\<And>p1 p2 s a s'.\n       \\<lbrakk>\\<And>s a s'.\n                   (s, a, s')\n                   \\<in> automaton.trans (pnet np p1) \\<Longrightarrow>\n                   net_ips s = net_ips s';\n        \\<And>s a s'.\n           (s, a, s') \\<in> automaton.trans (pnet np p2) \\<Longrightarrow>\n           net_ips s = net_ips s';\n        (s, a, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_ips s'", "assume \"(s, a, s') \\<in> trans (pnet np \\<langle>i; R\\<rangle>)\""], ["proof (state)\nthis:\n  (s, a, s') \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>)\n\ngoal (2 subgoals):\n 1. \\<And>i R s a s'.\n       (s, a, s')\n       \\<in> automaton.trans\n              (pnet np \\<langle>i; R\\<rangle>) \\<Longrightarrow>\n       net_ips s = net_ips s'\n 2. \\<And>p1 p2 s a s'.\n       \\<lbrakk>\\<And>s a s'.\n                   (s, a, s')\n                   \\<in> automaton.trans (pnet np p1) \\<Longrightarrow>\n                   net_ips s = net_ips s';\n        \\<And>s a s'.\n           (s, a, s') \\<in> automaton.trans (pnet np p2) \\<Longrightarrow>\n           net_ips s = net_ips s';\n        (s, a, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_ips s'", "hence \"(s, a, s') \\<in> node_sos (trans (np i))\""], ["proof (prove)\nusing this:\n  (s, a, s') \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>)\n\ngoal (1 subgoal):\n 1. (s, a, s') \\<in> node_sos (automaton.trans (np i))", ".."], ["proof (state)\nthis:\n  (s, a, s') \\<in> node_sos (automaton.trans (np i))\n\ngoal (2 subgoals):\n 1. \\<And>i R s a s'.\n       (s, a, s')\n       \\<in> automaton.trans\n              (pnet np \\<langle>i; R\\<rangle>) \\<Longrightarrow>\n       net_ips s = net_ips s'\n 2. \\<And>p1 p2 s a s'.\n       \\<lbrakk>\\<And>s a s'.\n                   (s, a, s')\n                   \\<in> automaton.trans (pnet np p1) \\<Longrightarrow>\n                   net_ips s = net_ips s';\n        \\<And>s a s'.\n           (s, a, s') \\<in> automaton.trans (pnet np p2) \\<Longrightarrow>\n           net_ips s = net_ips s';\n        (s, a, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_ips s'", "thus \"net_ips s = net_ips s'\""], ["proof (prove)\nusing this:\n  (s, a, s') \\<in> node_sos (automaton.trans (np i))\n\ngoal (1 subgoal):\n 1. net_ips s = net_ips s'", "by (rule node_sos.cases) simp_all"], ["proof (state)\nthis:\n  net_ips s = net_ips s'\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s a s'.\n       \\<lbrakk>\\<And>s a s'.\n                   (s, a, s')\n                   \\<in> automaton.trans (pnet np p1) \\<Longrightarrow>\n                   net_ips s = net_ips s';\n        \\<And>s a s'.\n           (s, a, s') \\<in> automaton.trans (pnet np p2) \\<Longrightarrow>\n           net_ips s = net_ips s';\n        (s, a, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_ips s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s a s'.\n       \\<lbrakk>\\<And>s a s'.\n                   (s, a, s')\n                   \\<in> automaton.trans (pnet np p1) \\<Longrightarrow>\n                   net_ips s = net_ips s';\n        \\<And>s a s'.\n           (s, a, s') \\<in> automaton.trans (pnet np p2) \\<Longrightarrow>\n           net_ips s = net_ips s';\n        (s, a, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_ips s'", "fix p1 p2 s a s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s a s'.\n       \\<lbrakk>\\<And>s a s'.\n                   (s, a, s')\n                   \\<in> automaton.trans (pnet np p1) \\<Longrightarrow>\n                   net_ips s = net_ips s';\n        \\<And>s a s'.\n           (s, a, s') \\<in> automaton.trans (pnet np p2) \\<Longrightarrow>\n           net_ips s = net_ips s';\n        (s, a, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_ips s'", "assume \"\\<And>s a s'. (s, a, s') \\<in> trans (pnet np p1) \\<Longrightarrow> net_ips s = net_ips s'\"\n       and \"\\<And>s a s'. (s, a, s') \\<in> trans (pnet np p2) \\<Longrightarrow> net_ips s = net_ips s'\"\n       and \"(s, a, s') \\<in> trans (pnet np (p1 \\<parallel> p2))\""], ["proof (state)\nthis:\n  (?s, ?a, ?s') \\<in> automaton.trans (pnet np p1) \\<Longrightarrow>\n  net_ips ?s = net_ips ?s'\n  (?s, ?a, ?s') \\<in> automaton.trans (pnet np p2) \\<Longrightarrow>\n  net_ips ?s = net_ips ?s'\n  (s, a, s') \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s a s'.\n       \\<lbrakk>\\<And>s a s'.\n                   (s, a, s')\n                   \\<in> automaton.trans (pnet np p1) \\<Longrightarrow>\n                   net_ips s = net_ips s';\n        \\<And>s a s'.\n           (s, a, s') \\<in> automaton.trans (pnet np p2) \\<Longrightarrow>\n           net_ips s = net_ips s';\n        (s, a, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_ips s'", "thus \"net_ips s = net_ips s'\""], ["proof (prove)\nusing this:\n  (?s, ?a, ?s') \\<in> automaton.trans (pnet np p1) \\<Longrightarrow>\n  net_ips ?s = net_ips ?s'\n  (?s, ?a, ?s') \\<in> automaton.trans (pnet np p2) \\<Longrightarrow>\n  net_ips ?s = net_ips ?s'\n  (s, a, s') \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. net_ips s = net_ips s'", "by simp (erule pnet_sos.cases, simp_all)"], ["proof (state)\nthis:\n  net_ips s = net_ips s'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pnet_net_ips_net_tree_ips [elim]:\n  assumes \"s \\<in> reachable (pnet np p) I\"\n    shows \"net_ips s = net_tree_ips p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. net_ips s = net_tree_ips p", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np p) I\n\ngoal (1 subgoal):\n 1. net_ips s = net_tree_ips p", "proof induction"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (pnet np p) \\<Longrightarrow> net_ips s = net_tree_ips p\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (pnet np p) I; net_ips s = net_tree_ips p;\n        (s, a, s') \\<in> automaton.trans (pnet np p); I a\\<rbrakk>\n       \\<Longrightarrow> net_ips s' = net_tree_ips p", "fix s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (pnet np p) \\<Longrightarrow> net_ips s = net_tree_ips p\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (pnet np p) I; net_ips s = net_tree_ips p;\n        (s, a, s') \\<in> automaton.trans (pnet np p); I a\\<rbrakk>\n       \\<Longrightarrow> net_ips s' = net_tree_ips p", "assume \"s \\<in> init (pnet np p)\""], ["proof (state)\nthis:\n  s \\<in> init (pnet np p)\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (pnet np p) \\<Longrightarrow> net_ips s = net_tree_ips p\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (pnet np p) I; net_ips s = net_tree_ips p;\n        (s, a, s') \\<in> automaton.trans (pnet np p); I a\\<rbrakk>\n       \\<Longrightarrow> net_ips s' = net_tree_ips p", "thus \"net_ips s = net_tree_ips p\""], ["proof (prove)\nusing this:\n  s \\<in> init (pnet np p)\n\ngoal (1 subgoal):\n 1. net_ips s = net_tree_ips p", "proof (induction p arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R s.\n       s \\<in> init (pnet np \\<langle>i; R\\<rangle>) \\<Longrightarrow>\n       net_ips s = net_tree_ips \\<langle>i; R\\<rangle>\n 2. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> init (pnet np p1) \\<Longrightarrow>\n                   net_ips s = net_tree_ips p1;\n        \\<And>s.\n           s \\<in> init (pnet np p2) \\<Longrightarrow>\n           net_ips s = net_tree_ips p2;\n        s \\<in> init (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_tree_ips (p1 \\<parallel> p2)", "fix i R s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R s.\n       s \\<in> init (pnet np \\<langle>i; R\\<rangle>) \\<Longrightarrow>\n       net_ips s = net_tree_ips \\<langle>i; R\\<rangle>\n 2. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> init (pnet np p1) \\<Longrightarrow>\n                   net_ips s = net_tree_ips p1;\n        \\<And>s.\n           s \\<in> init (pnet np p2) \\<Longrightarrow>\n           net_ips s = net_tree_ips p2;\n        s \\<in> init (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_tree_ips (p1 \\<parallel> p2)", "assume \"s \\<in> init (pnet np \\<langle>i; R\\<rangle>)\""], ["proof (state)\nthis:\n  s \\<in> init (pnet np \\<langle>i; R\\<rangle>)\n\ngoal (2 subgoals):\n 1. \\<And>i R s.\n       s \\<in> init (pnet np \\<langle>i; R\\<rangle>) \\<Longrightarrow>\n       net_ips s = net_tree_ips \\<langle>i; R\\<rangle>\n 2. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> init (pnet np p1) \\<Longrightarrow>\n                   net_ips s = net_tree_ips p1;\n        \\<And>s.\n           s \\<in> init (pnet np p2) \\<Longrightarrow>\n           net_ips s = net_tree_ips p2;\n        s \\<in> init (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_tree_ips (p1 \\<parallel> p2)", "then"], ["proof (chain)\npicking this:\n  s \\<in> init (pnet np \\<langle>i; R\\<rangle>)", "obtain ns where \"s = NodeS i ns R\""], ["proof (prove)\nusing this:\n  s \\<in> init (pnet np \\<langle>i; R\\<rangle>)\n\ngoal (1 subgoal):\n 1. (\\<And>ns. s = NodeS i ns R \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  s = NodeS i ns R\n\ngoal (2 subgoals):\n 1. \\<And>i R s.\n       s \\<in> init (pnet np \\<langle>i; R\\<rangle>) \\<Longrightarrow>\n       net_ips s = net_tree_ips \\<langle>i; R\\<rangle>\n 2. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> init (pnet np p1) \\<Longrightarrow>\n                   net_ips s = net_tree_ips p1;\n        \\<And>s.\n           s \\<in> init (pnet np p2) \\<Longrightarrow>\n           net_ips s = net_tree_ips p2;\n        s \\<in> init (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_tree_ips (p1 \\<parallel> p2)", "thus \"net_ips s = net_tree_ips \\<langle>i; R\\<rangle>\""], ["proof (prove)\nusing this:\n  s = NodeS i ns R\n\ngoal (1 subgoal):\n 1. net_ips s = net_tree_ips \\<langle>i; R\\<rangle>", "by simp"], ["proof (state)\nthis:\n  net_ips s = net_tree_ips \\<langle>i; R\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> init (pnet np p1) \\<Longrightarrow>\n                   net_ips s = net_tree_ips p1;\n        \\<And>s.\n           s \\<in> init (pnet np p2) \\<Longrightarrow>\n           net_ips s = net_tree_ips p2;\n        s \\<in> init (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_tree_ips (p1 \\<parallel> p2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> init (pnet np p1) \\<Longrightarrow>\n                   net_ips s = net_tree_ips p1;\n        \\<And>s.\n           s \\<in> init (pnet np p2) \\<Longrightarrow>\n           net_ips s = net_tree_ips p2;\n        s \\<in> init (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_tree_ips (p1 \\<parallel> p2)", "fix p1 p2 s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> init (pnet np p1) \\<Longrightarrow>\n                   net_ips s = net_tree_ips p1;\n        \\<And>s.\n           s \\<in> init (pnet np p2) \\<Longrightarrow>\n           net_ips s = net_tree_ips p2;\n        s \\<in> init (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_tree_ips (p1 \\<parallel> p2)", "assume IH1: \"\\<And>s. s \\<in> init (pnet np p1) \\<Longrightarrow> net_ips s = net_tree_ips p1\"\n         and IH2: \"\\<And>s. s \\<in> init (pnet np p2) \\<Longrightarrow> net_ips s = net_tree_ips p2\"\n         and \"s \\<in> init (pnet np (p1 \\<parallel> p2))\""], ["proof (state)\nthis:\n  ?s \\<in> init (pnet np p1) \\<Longrightarrow> net_ips ?s = net_tree_ips p1\n  ?s \\<in> init (pnet np p2) \\<Longrightarrow> net_ips ?s = net_tree_ips p2\n  s \\<in> init (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> init (pnet np p1) \\<Longrightarrow>\n                   net_ips s = net_tree_ips p1;\n        \\<And>s.\n           s \\<in> init (pnet np p2) \\<Longrightarrow>\n           net_ips s = net_tree_ips p2;\n        s \\<in> init (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_tree_ips (p1 \\<parallel> p2)", "from this(3)"], ["proof (chain)\npicking this:\n  s \\<in> init (pnet np (p1 \\<parallel> p2))", "obtain s1 s2 where \"s1 \\<in> init (pnet np p1)\"\n                                  and \"s2 \\<in> init (pnet np p2)\"\n                                  and \"s = SubnetS s1 s2\""], ["proof (prove)\nusing this:\n  s \\<in> init (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. (\\<And>s1 s2.\n        \\<lbrakk>s1 \\<in> init (pnet np p1); s2 \\<in> init (pnet np p2);\n         s = SubnetS s1 s2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s1 \\<in> init (pnet np p1)\n  s2 \\<in> init (pnet np p2)\n  s = SubnetS s1 s2\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> init (pnet np p1) \\<Longrightarrow>\n                   net_ips s = net_tree_ips p1;\n        \\<And>s.\n           s \\<in> init (pnet np p2) \\<Longrightarrow>\n           net_ips s = net_tree_ips p2;\n        s \\<in> init (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_tree_ips (p1 \\<parallel> p2)", "from this(1-2)"], ["proof (chain)\npicking this:\n  s1 \\<in> init (pnet np p1)\n  s2 \\<in> init (pnet np p2)", "have \"net_ips s1 = net_tree_ips p1\"\n                      and \"net_ips s2 = net_tree_ips p2\""], ["proof (prove)\nusing this:\n  s1 \\<in> init (pnet np p1)\n  s2 \\<in> init (pnet np p2)\n\ngoal (1 subgoal):\n 1. net_ips s1 = net_tree_ips p1 &&& net_ips s2 = net_tree_ips p2", "using IH1 IH2"], ["proof (prove)\nusing this:\n  s1 \\<in> init (pnet np p1)\n  s2 \\<in> init (pnet np p2)\n  ?s \\<in> init (pnet np p1) \\<Longrightarrow> net_ips ?s = net_tree_ips p1\n  ?s \\<in> init (pnet np p2) \\<Longrightarrow> net_ips ?s = net_tree_ips p2\n\ngoal (1 subgoal):\n 1. net_ips s1 = net_tree_ips p1 &&& net_ips s2 = net_tree_ips p2", "by auto"], ["proof (state)\nthis:\n  net_ips s1 = net_tree_ips p1\n  net_ips s2 = net_tree_ips p2\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   s \\<in> init (pnet np p1) \\<Longrightarrow>\n                   net_ips s = net_tree_ips p1;\n        \\<And>s.\n           s \\<in> init (pnet np p2) \\<Longrightarrow>\n           net_ips s = net_tree_ips p2;\n        s \\<in> init (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> net_ips s = net_tree_ips (p1 \\<parallel> p2)", "with \\<open>s = SubnetS s1 s2\\<close>"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  net_ips s1 = net_tree_ips p1\n  net_ips s2 = net_tree_ips p2", "show \"net_ips s = net_tree_ips (p1 \\<parallel> p2)\""], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  net_ips s1 = net_tree_ips p1\n  net_ips s2 = net_tree_ips p2\n\ngoal (1 subgoal):\n 1. net_ips s = net_tree_ips (p1 \\<parallel> p2)", "by auto"], ["proof (state)\nthis:\n  net_ips s = net_tree_ips (p1 \\<parallel> p2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  net_ips s = net_tree_ips p\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (pnet np p) I; net_ips s = net_tree_ips p;\n        (s, a, s') \\<in> automaton.trans (pnet np p); I a\\<rbrakk>\n       \\<Longrightarrow> net_ips s' = net_tree_ips p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (pnet np p) I; net_ips s = net_tree_ips p;\n        (s, a, s') \\<in> automaton.trans (pnet np p); I a\\<rbrakk>\n       \\<Longrightarrow> net_ips s' = net_tree_ips p", "fix s a s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (pnet np p) I; net_ips s = net_tree_ips p;\n        (s, a, s') \\<in> automaton.trans (pnet np p); I a\\<rbrakk>\n       \\<Longrightarrow> net_ips s' = net_tree_ips p", "assume \"(s, a, s') \\<in> trans (pnet np p)\"\n       and \"net_ips s = net_tree_ips p\""], ["proof (state)\nthis:\n  (s, a, s') \\<in> automaton.trans (pnet np p)\n  net_ips s = net_tree_ips p\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (pnet np p) I; net_ips s = net_tree_ips p;\n        (s, a, s') \\<in> automaton.trans (pnet np p); I a\\<rbrakk>\n       \\<Longrightarrow> net_ips s' = net_tree_ips p", "from this(1)"], ["proof (chain)\npicking this:\n  (s, a, s') \\<in> automaton.trans (pnet np p)", "have \"net_ips s = net_ips s'\""], ["proof (prove)\nusing this:\n  (s, a, s') \\<in> automaton.trans (pnet np p)\n\ngoal (1 subgoal):\n 1. net_ips s = net_ips s'", "by (rule pnet_maintains_dom)"], ["proof (state)\nthis:\n  net_ips s = net_ips s'\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (pnet np p) I; net_ips s = net_tree_ips p;\n        (s, a, s') \\<in> automaton.trans (pnet np p); I a\\<rbrakk>\n       \\<Longrightarrow> net_ips s' = net_tree_ips p", "with \\<open>net_ips s = net_tree_ips p\\<close>"], ["proof (chain)\npicking this:\n  net_ips s = net_tree_ips p\n  net_ips s = net_ips s'", "show \"net_ips s' = net_tree_ips p\""], ["proof (prove)\nusing this:\n  net_ips s = net_tree_ips p\n  net_ips s = net_ips s'\n\ngoal (1 subgoal):\n 1. net_ips s' = net_tree_ips p", "by simp"], ["proof (state)\nthis:\n  net_ips s' = net_tree_ips p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pnet_init_net_ips_net_tree_ips:\n  assumes \"s \\<in> init (pnet np p)\"\n    shows \"net_ips s = net_tree_ips p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. net_ips s = net_tree_ips p", "using assms(1)"], ["proof (prove)\nusing this:\n  s \\<in> init (pnet np p)\n\ngoal (1 subgoal):\n 1. net_ips s = net_tree_ips p", "by (rule reachable_init [THEN pnet_net_ips_net_tree_ips])"], ["", "lemma pnet_init_in_net_ips_in_net_tree_ips [elim]:\n  assumes \"s \\<in> init (pnet np p)\"\n      and \"i \\<in> net_ips s\"\n    shows \"i \\<in> net_tree_ips p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips p", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> init (pnet np p)\n  i \\<in> net_ips s\n\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips p", "by (clarsimp dest!: pnet_init_net_ips_net_tree_ips)"], ["", "lemma pnet_init_in_net_tree_ips_in_net_ips [elim]:\n  assumes \"s \\<in> init (pnet np p)\"\n      and \"i \\<in> net_tree_ips p\"\n    shows \"i \\<in> net_ips s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> net_ips s", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> init (pnet np p)\n  i \\<in> net_tree_ips p\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s", "by (clarsimp dest!: pnet_init_net_ips_net_tree_ips)"], ["", "lemma pnet_init_not_in_net_tree_ips_not_in_net_ips [elim]:\n  assumes \"s \\<in> init (pnet np p)\"\n      and \"i \\<notin> net_tree_ips p\"\n    shows \"i \\<notin> net_ips s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<notin> net_ips s", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<in> net_ips s \\<Longrightarrow> False", "assume \"i \\<in> net_ips s\""], ["proof (state)\nthis:\n  i \\<in> net_ips s\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s \\<Longrightarrow> False", "with assms(1)"], ["proof (chain)\npicking this:\n  s \\<in> init (pnet np p)\n  i \\<in> net_ips s", "have \"i \\<in> net_tree_ips p\""], ["proof (prove)\nusing this:\n  s \\<in> init (pnet np p)\n  i \\<in> net_ips s\n\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips p", ".."], ["proof (state)\nthis:\n  i \\<in> net_tree_ips p\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s \\<Longrightarrow> False", "with assms(2)"], ["proof (chain)\npicking this:\n  i \\<notin> net_tree_ips p\n  i \\<in> net_tree_ips p", "show False"], ["proof (prove)\nusing this:\n  i \\<notin> net_tree_ips p\n  i \\<in> net_tree_ips p\n\ngoal (1 subgoal):\n 1. False", ".."], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma net_node_reachable_is_node:\n  assumes \"st \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) I\"\n    shows \"\\<exists>ns R. st = NodeS ii ns R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ns R. st = NodeS ii ns R", "using assms"], ["proof (prove)\nusing this:\n  st \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) I\n\ngoal (1 subgoal):\n 1. \\<exists>ns R. st = NodeS ii ns R", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init\n                (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) \\<Longrightarrow>\n       \\<exists>ns R. s = NodeS ii ns R\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n                         I;\n        \\<exists>ns R. s = NodeS ii ns R;\n        (s, a, s')\n        \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>);\n        I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns R. s' = NodeS ii ns R", "fix s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init\n                (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) \\<Longrightarrow>\n       \\<exists>ns R. s = NodeS ii ns R\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n                         I;\n        \\<exists>ns R. s = NodeS ii ns R;\n        (s, a, s')\n        \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>);\n        I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns R. s' = NodeS ii ns R", "assume \"s \\<in> init (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\""], ["proof (state)\nthis:\n  s \\<in> init (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init\n                (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) \\<Longrightarrow>\n       \\<exists>ns R. s = NodeS ii ns R\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n                         I;\n        \\<exists>ns R. s = NodeS ii ns R;\n        (s, a, s')\n        \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>);\n        I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns R. s' = NodeS ii ns R", "thus \"\\<exists>ns R. s = NodeS ii ns R\""], ["proof (prove)\nusing this:\n  s \\<in> init (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (1 subgoal):\n 1. \\<exists>ns R. s = NodeS ii ns R", "by (rule pnet_node_init') simp"], ["proof (state)\nthis:\n  \\<exists>ns R. s = NodeS ii ns R\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n                         I;\n        \\<exists>ns R. s = NodeS ii ns R;\n        (s, a, s')\n        \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>);\n        I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns R. s' = NodeS ii ns R", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n                         I;\n        \\<exists>ns R. s = NodeS ii ns R;\n        (s, a, s')\n        \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>);\n        I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns R. s' = NodeS ii ns R", "fix s a s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n                         I;\n        \\<exists>ns R. s = NodeS ii ns R;\n        (s, a, s')\n        \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>);\n        I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns R. s' = NodeS ii ns R", "assume \"s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) I\"\n       and \"\\<exists>ns R. s = NodeS ii ns R\"\n       and \"(s, a, s') \\<in> trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\"\n       and \"I a\""], ["proof (state)\nthis:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) I\n  \\<exists>ns R. s = NodeS ii ns R\n  (s, a, s') \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n  I a\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n                         I;\n        \\<exists>ns R. s = NodeS ii ns R;\n        (s, a, s')\n        \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>);\n        I a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns R. s' = NodeS ii ns R", "thus \"\\<exists>ns R. s' = NodeS ii ns R\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) I\n  \\<exists>ns R. s = NodeS ii ns R\n  (s, a, s') \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n  I a\n\ngoal (1 subgoal):\n 1. \\<exists>ns R. s' = NodeS ii ns R", "by (auto simp add: trans_node_comp dest!: node_sos_dest)"], ["proof (state)\nthis:\n  \\<exists>ns R. s' = NodeS ii ns R\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma partial_net_preserves_subnets:\n  assumes \"(SubnetS s t, a, st') \\<in> pnet_sos (trans (pnet np p1)) (trans (pnet np p2))\"\n    shows \"\\<exists>s' t'. st' = SubnetS s' t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' t'. st' = SubnetS s' t'", "using assms"], ["proof (prove)\nusing this:\n  (SubnetS s t, a, st')\n  \\<in> pnet_sos (automaton.trans (pnet np p1))\n         (automaton.trans (pnet np p2))\n\ngoal (1 subgoal):\n 1. \\<exists>s' t'. st' = SubnetS s' t'", "by cases simp_all"], ["", "lemma net_par_reachable_is_subnet:\n  assumes \"st \\<in> reachable (pnet np (p1 \\<parallel> p2)) I\"\n    shows \"\\<exists>s t. st = SubnetS s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s t. st = SubnetS s t", "using assms"], ["proof (prove)\nusing this:\n  st \\<in> reachable (pnet np (p1 \\<parallel> p2)) I\n\ngoal (1 subgoal):\n 1. \\<exists>s t. st = SubnetS s t", "by induct (auto dest!: partial_net_preserves_subnets)"], ["", "lemma reachable_par_subnet_induct [consumes, case_names init step]:\n  assumes \"SubnetS s t \\<in> reachable (pnet np (p1 \\<parallel> p2)) I\"\n      and init: \"\\<And>s t. SubnetS s t \\<in> init (pnet np (p1 \\<parallel> p2)) \\<Longrightarrow> P s t\"\n      and step: \"\\<And>s t s' t' a. \\<lbrakk>\n                    SubnetS s t \\<in> reachable (pnet np (p1 \\<parallel> p2)) I;\n                    P s t; (SubnetS s t, a, SubnetS s' t') \\<in> (trans (pnet np (p1 \\<parallel> p2))); I a \\<rbrakk>\n                    \\<Longrightarrow> P s' t'\"\n    shows \"P s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P s t", "using assms(1)"], ["proof (prove)\nusing this:\n  SubnetS s t \\<in> reachable (pnet np (p1 \\<parallel> p2)) I\n\ngoal (1 subgoal):\n 1. P s t", "proof (induction \"SubnetS s t\" arbitrary: s t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s t.\n       SubnetS s t\n       \\<in> init (pnet np (p1 \\<parallel> p2)) \\<Longrightarrow>\n       P s t\n 2. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (pnet np (p1 \\<parallel> p2)) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "fix s t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s t.\n       SubnetS s t\n       \\<in> init (pnet np (p1 \\<parallel> p2)) \\<Longrightarrow>\n       P s t\n 2. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (pnet np (p1 \\<parallel> p2)) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "assume \"SubnetS s t \\<in> init (pnet np (p1 \\<parallel> p2))\""], ["proof (state)\nthis:\n  SubnetS s t \\<in> init (pnet np (p1 \\<parallel> p2))\n\ngoal (2 subgoals):\n 1. \\<And>s t.\n       SubnetS s t\n       \\<in> init (pnet np (p1 \\<parallel> p2)) \\<Longrightarrow>\n       P s t\n 2. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (pnet np (p1 \\<parallel> p2)) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "with init"], ["proof (chain)\npicking this:\n  SubnetS ?s ?t \\<in> init (pnet np (p1 \\<parallel> p2)) \\<Longrightarrow>\n  P ?s ?t\n  SubnetS s t \\<in> init (pnet np (p1 \\<parallel> p2))", "show \"P s t\""], ["proof (prove)\nusing this:\n  SubnetS ?s ?t \\<in> init (pnet np (p1 \\<parallel> p2)) \\<Longrightarrow>\n  P ?s ?t\n  SubnetS s t \\<in> init (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. P s t", "."], ["proof (state)\nthis:\n  P s t\n\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (pnet np (p1 \\<parallel> p2)) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (pnet np (p1 \\<parallel> p2)) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "fix st a s' t'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (pnet np (p1 \\<parallel> p2)) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "assume \"st \\<in> reachable (pnet np (p1 \\<parallel> p2)) I\"\n       and tr: \"(st, a, SubnetS s' t') \\<in> trans (pnet np (p1 \\<parallel> p2))\"\n       and \"I a\"\n       and IH: \"\\<And>s t. st = SubnetS s t \\<Longrightarrow> P s t\""], ["proof (state)\nthis:\n  st \\<in> reachable (pnet np (p1 \\<parallel> p2)) I\n  (st, a, SubnetS s' t') \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n  I a\n  st = SubnetS ?s ?t \\<Longrightarrow> P ?s ?t\n\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (pnet np (p1 \\<parallel> p2)) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "from this(1)"], ["proof (chain)\npicking this:\n  st \\<in> reachable (pnet np (p1 \\<parallel> p2)) I", "obtain s t where \"st = SubnetS s t\"\n                              and str: \"SubnetS s t \\<in> reachable (pnet np (p1 \\<parallel> p2)) I\""], ["proof (prove)\nusing this:\n  st \\<in> reachable (pnet np (p1 \\<parallel> p2)) I\n\ngoal (1 subgoal):\n 1. (\\<And>s t.\n        \\<lbrakk>st = SubnetS s t;\n         SubnetS s t\n         \\<in> reachable (pnet np (p1 \\<parallel> p2)) I\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis net_par_reachable_is_subnet)"], ["proof (state)\nthis:\n  st = SubnetS s t\n  SubnetS s t \\<in> reachable (pnet np (p1 \\<parallel> p2)) I\n\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (pnet np (p1 \\<parallel> p2)) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "note this(2)"], ["proof (state)\nthis:\n  SubnetS s t \\<in> reachable (pnet np (p1 \\<parallel> p2)) I\n\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (pnet np (p1 \\<parallel> p2)) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "moreover"], ["proof (state)\nthis:\n  SubnetS s t \\<in> reachable (pnet np (p1 \\<parallel> p2)) I\n\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (pnet np (p1 \\<parallel> p2)) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "from IH and \\<open>st = SubnetS s t\\<close>"], ["proof (chain)\npicking this:\n  st = SubnetS ?s ?t \\<Longrightarrow> P ?s ?t\n  st = SubnetS s t", "have \"P s t\""], ["proof (prove)\nusing this:\n  st = SubnetS ?s ?t \\<Longrightarrow> P ?s ?t\n  st = SubnetS s t\n\ngoal (1 subgoal):\n 1. P s t", "."], ["proof (state)\nthis:\n  P s t\n\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (pnet np (p1 \\<parallel> p2)) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "moreover"], ["proof (state)\nthis:\n  P s t\n\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (pnet np (p1 \\<parallel> p2)) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "from \\<open>st = SubnetS s t\\<close> and tr"], ["proof (chain)\npicking this:\n  st = SubnetS s t\n  (st, a, SubnetS s' t') \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))", "have \"(SubnetS s t, a, SubnetS s' t') \\<in> trans (pnet np (p1 \\<parallel> p2))\""], ["proof (prove)\nusing this:\n  st = SubnetS s t\n  (st, a, SubnetS s' t') \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. (SubnetS s t, a, SubnetS s' t')\n    \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))", "by simp"], ["proof (state)\nthis:\n  (SubnetS s t, a, SubnetS s' t')\n  \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. \\<And>s a sa t.\n       \\<lbrakk>s \\<in> reachable (pnet np (p1 \\<parallel> p2)) I;\n        \\<And>sa t. s = SubnetS sa t \\<Longrightarrow> P sa t;\n        (s, a, SubnetS sa t)\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        I a\\<rbrakk>\n       \\<Longrightarrow> P sa t", "ultimately"], ["proof (chain)\npicking this:\n  SubnetS s t \\<in> reachable (pnet np (p1 \\<parallel> p2)) I\n  P s t\n  (SubnetS s t, a, SubnetS s' t')\n  \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))", "show \"P s' t'\""], ["proof (prove)\nusing this:\n  SubnetS s t \\<in> reachable (pnet np (p1 \\<parallel> p2)) I\n  P s t\n  (SubnetS s t, a, SubnetS s' t')\n  \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. P s' t'", "using \\<open>I a\\<close>"], ["proof (prove)\nusing this:\n  SubnetS s t \\<in> reachable (pnet np (p1 \\<parallel> p2)) I\n  P s t\n  (SubnetS s t, a, SubnetS s' t')\n  \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n  I a\n\ngoal (1 subgoal):\n 1. P s' t'", "by (rule step)"], ["proof (state)\nthis:\n  P s' t'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subnet_reachable:\n  assumes \"SubnetS s1 s2 \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\"\n    shows \"s1 \\<in> reachable (pnet np p1) TT\"\n          \"s2 \\<in> reachable (pnet np p2) TT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s1 \\<in> reachable (pnet np p1) TT &&&\n    s2 \\<in> reachable (pnet np p2) TT", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. s1 \\<in> reachable (pnet np p1) TT\n 2. s2 \\<in> reachable (pnet np p2) TT", "from assms"], ["proof (chain)\npicking this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT", "have \"s1 \\<in> reachable (pnet np p1) TT\n                  \\<and> s2 \\<in> reachable (pnet np p2) TT\""], ["proof (prove)\nusing this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n\ngoal (1 subgoal):\n 1. s1 \\<in> reachable (pnet np p1) TT \\<and>\n    s2 \\<in> reachable (pnet np p2) TT", "proof (induction rule: reachable_par_subnet_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s t.\n       SubnetS s t\n       \\<in> init (pnet np (p1 \\<parallel> p2)) \\<Longrightarrow>\n       s \\<in> reachable (pnet np p1) TT \\<and>\n       t \\<in> reachable (pnet np p2) TT\n 2. \\<And>s t s' t' a.\n       \\<lbrakk>SubnetS s t\n                \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        s \\<in> reachable (pnet np p1) TT \\<and>\n        t \\<in> reachable (pnet np p2) TT;\n        (SubnetS s t, a, SubnetS s' t')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        TT a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> reachable (pnet np p1) TT \\<and>\n                         t' \\<in> reachable (pnet np p2) TT", "fix s1 s2"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s t.\n       SubnetS s t\n       \\<in> init (pnet np (p1 \\<parallel> p2)) \\<Longrightarrow>\n       s \\<in> reachable (pnet np p1) TT \\<and>\n       t \\<in> reachable (pnet np p2) TT\n 2. \\<And>s t s' t' a.\n       \\<lbrakk>SubnetS s t\n                \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        s \\<in> reachable (pnet np p1) TT \\<and>\n        t \\<in> reachable (pnet np p2) TT;\n        (SubnetS s t, a, SubnetS s' t')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        TT a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> reachable (pnet np p1) TT \\<and>\n                         t' \\<in> reachable (pnet np p2) TT", "assume \"SubnetS s1 s2 \\<in> init (pnet np (p1 \\<parallel> p2))\""], ["proof (state)\nthis:\n  SubnetS s1 s2 \\<in> init (pnet np (p1 \\<parallel> p2))\n\ngoal (2 subgoals):\n 1. \\<And>s t.\n       SubnetS s t\n       \\<in> init (pnet np (p1 \\<parallel> p2)) \\<Longrightarrow>\n       s \\<in> reachable (pnet np p1) TT \\<and>\n       t \\<in> reachable (pnet np p2) TT\n 2. \\<And>s t s' t' a.\n       \\<lbrakk>SubnetS s t\n                \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        s \\<in> reachable (pnet np p1) TT \\<and>\n        t \\<in> reachable (pnet np p2) TT;\n        (SubnetS s t, a, SubnetS s' t')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        TT a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> reachable (pnet np p1) TT \\<and>\n                         t' \\<in> reachable (pnet np p2) TT", "thus \"s1 \\<in> reachable (pnet np p1) TT\n          \\<and> s2 \\<in> reachable (pnet np p2) TT\""], ["proof (prove)\nusing this:\n  SubnetS s1 s2 \\<in> init (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. s1 \\<in> reachable (pnet np p1) TT \\<and>\n    s2 \\<in> reachable (pnet np p2) TT", "by (auto dest: reachable_init)"], ["proof (state)\nthis:\n  s1 \\<in> reachable (pnet np p1) TT \\<and>\n  s2 \\<in> reachable (pnet np p2) TT\n\ngoal (1 subgoal):\n 1. \\<And>s t s' t' a.\n       \\<lbrakk>SubnetS s t\n                \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        s \\<in> reachable (pnet np p1) TT \\<and>\n        t \\<in> reachable (pnet np p2) TT;\n        (SubnetS s t, a, SubnetS s' t')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        TT a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> reachable (pnet np p1) TT \\<and>\n                         t' \\<in> reachable (pnet np p2) TT", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s t s' t' a.\n       \\<lbrakk>SubnetS s t\n                \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        s \\<in> reachable (pnet np p1) TT \\<and>\n        t \\<in> reachable (pnet np p2) TT;\n        (SubnetS s t, a, SubnetS s' t')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        TT a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> reachable (pnet np p1) TT \\<and>\n                         t' \\<in> reachable (pnet np p2) TT", "case (step s1 s2 s1' s2' a)"], ["proof (state)\nthis:\n  SubnetS s1 s2 \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n  (SubnetS s1 s2, a, SubnetS s1' s2')\n  \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n  TT a\n  s1 \\<in> reachable (pnet np p1) TT \\<and>\n  s2 \\<in> reachable (pnet np p2) TT\n\ngoal (1 subgoal):\n 1. \\<And>s t s' t' a.\n       \\<lbrakk>SubnetS s t\n                \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        s \\<in> reachable (pnet np p1) TT \\<and>\n        t \\<in> reachable (pnet np p2) TT;\n        (SubnetS s t, a, SubnetS s' t')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        TT a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> reachable (pnet np p1) TT \\<and>\n                         t' \\<in> reachable (pnet np p2) TT", "hence \"SubnetS s1 s2 \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\"\n        and sr1: \"s1 \\<in> reachable (pnet np p1) TT\"\n        and sr2: \"s2 \\<in> reachable (pnet np p2) TT\"\n        and \"(SubnetS s1 s2, a, SubnetS s1' s2') \\<in> trans (pnet np (p1 \\<parallel> p2))\""], ["proof (prove)\nusing this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n  (SubnetS s1 s2, a, SubnetS s1' s2')\n  \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n  TT a\n  s1 \\<in> reachable (pnet np p1) TT \\<and>\n  s2 \\<in> reachable (pnet np p2) TT\n\ngoal (1 subgoal):\n 1. (SubnetS s1 s2 \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT &&&\n     s1 \\<in> reachable (pnet np p1) TT) &&&\n    s2 \\<in> reachable (pnet np p2) TT &&&\n    (SubnetS s1 s2, a, SubnetS s1' s2')\n    \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))", "by auto"], ["proof (state)\nthis:\n  SubnetS s1 s2 \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n  s1 \\<in> reachable (pnet np p1) TT\n  s2 \\<in> reachable (pnet np p2) TT\n  (SubnetS s1 s2, a, SubnetS s1' s2')\n  \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. \\<And>s t s' t' a.\n       \\<lbrakk>SubnetS s t\n                \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        s \\<in> reachable (pnet np p1) TT \\<and>\n        t \\<in> reachable (pnet np p2) TT;\n        (SubnetS s t, a, SubnetS s' t')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        TT a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> reachable (pnet np p1) TT \\<and>\n                         t' \\<in> reachable (pnet np p2) TT", "from this(4)"], ["proof (chain)\npicking this:\n  (SubnetS s1 s2, a, SubnetS s1' s2')\n  \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))", "have \"(SubnetS s1 s2, a, SubnetS s1' s2') \\<in> pnet_sos (trans (pnet np p1)) (trans (pnet np p2))\""], ["proof (prove)\nusing this:\n  (SubnetS s1 s2, a, SubnetS s1' s2')\n  \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. (SubnetS s1 s2, a, SubnetS s1' s2')\n    \\<in> pnet_sos (automaton.trans (pnet np p1))\n           (automaton.trans (pnet np p2))", "by simp"], ["proof (state)\nthis:\n  (SubnetS s1 s2, a, SubnetS s1' s2')\n  \\<in> pnet_sos (automaton.trans (pnet np p1))\n         (automaton.trans (pnet np p2))\n\ngoal (1 subgoal):\n 1. \\<And>s t s' t' a.\n       \\<lbrakk>SubnetS s t\n                \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        s \\<in> reachable (pnet np p1) TT \\<and>\n        t \\<in> reachable (pnet np p2) TT;\n        (SubnetS s t, a, SubnetS s' t')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2));\n        TT a\\<rbrakk>\n       \\<Longrightarrow> s' \\<in> reachable (pnet np p1) TT \\<and>\n                         t' \\<in> reachable (pnet np p2) TT", "thus \"s1' \\<in> reachable (pnet np p1) TT\n         \\<and> s2' \\<in> reachable (pnet np p2) TT\""], ["proof (prove)\nusing this:\n  (SubnetS s1 s2, a, SubnetS s1' s2')\n  \\<in> pnet_sos (automaton.trans (pnet np p1))\n         (automaton.trans (pnet np p2))\n\ngoal (1 subgoal):\n 1. s1' \\<in> reachable (pnet np p1) TT \\<and>\n    s2' \\<in> reachable (pnet np p2) TT", "by cases (insert sr1 sr2, auto elim: reachable_step)"], ["proof (state)\nthis:\n  s1' \\<in> reachable (pnet np p1) TT \\<and>\n  s2' \\<in> reachable (pnet np p2) TT\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s1 \\<in> reachable (pnet np p1) TT \\<and>\n  s2 \\<in> reachable (pnet np p2) TT\n\ngoal (2 subgoals):\n 1. s1 \\<in> reachable (pnet np p1) TT\n 2. s2 \\<in> reachable (pnet np p2) TT", "thus \"s1 \\<in> reachable (pnet np p1) TT\"\n         \"s2 \\<in> reachable (pnet np p2) TT\""], ["proof (prove)\nusing this:\n  s1 \\<in> reachable (pnet np p1) TT \\<and>\n  s2 \\<in> reachable (pnet np p2) TT\n\ngoal (1 subgoal):\n 1. s1 \\<in> reachable (pnet np p1) TT &&&\n    s2 \\<in> reachable (pnet np p2) TT", "by auto"], ["proof (state)\nthis:\n  s1 \\<in> reachable (pnet np p1) TT\n  s2 \\<in> reachable (pnet np p2) TT\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma delivered_to_node [elim]:\n  assumes \"s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\"\n      and \"(s, i:deliver(d), s') \\<in> trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\"\n    shows \"i = ii\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = ii", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i = ii", "from assms(1)"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT", "obtain P R where \"s = NodeS ii P R\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n\ngoal (1 subgoal):\n 1. (\\<And>P R. s = NodeS ii P R \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis net_node_reachable_is_node)"], ["proof (state)\nthis:\n  s = NodeS ii P R\n\ngoal (1 subgoal):\n 1. i = ii", "with assms(2)"], ["proof (chain)\npicking this:\n  (s, i:deliver(d), s')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n  s = NodeS ii P R", "show \"i = ii\""], ["proof (prove)\nusing this:\n  (s, i:deliver(d), s')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n  s = NodeS ii P R\n\ngoal (1 subgoal):\n 1. i = ii", "by (clarsimp simp add: trans_node_comp elim!: node_deliverTE')"], ["proof (state)\nthis:\n  i = ii\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma delivered_to_net_ips:\n  assumes \"s \\<in> reachable (pnet np p) TT\"\n      and \"(s, i:deliver(d), s') \\<in> trans (pnet np p)\"\n    shows \"i \\<in> net_ips s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> net_ips s", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np p) TT\n  (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p)\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s", "proof (induction p arbitrary: s s')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> i \\<in> net_ips s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> i \\<in> net_ips s;\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "fix ii R\\<^sub>i s s'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> i \\<in> net_ips s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> i \\<in> net_ips s;\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "assume sr: \"s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\"\n       and \"(s, i:deliver(d), s') \\<in> trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\""], ["proof (state)\nthis:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  (s, i:deliver(d), s')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> i \\<in> net_ips s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> i \\<in> net_ips s;\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "from this(2)"], ["proof (chain)\npicking this:\n  (s, i:deliver(d), s')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)", "have tr: \"(s, i:deliver(d), s') \\<in> node_sos (trans (np ii))\""], ["proof (prove)\nusing this:\n  (s, i:deliver(d), s')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (1 subgoal):\n 1. (s, i:deliver(d), s') \\<in> node_sos (automaton.trans (np ii))", "by simp"], ["proof (state)\nthis:\n  (s, i:deliver(d), s') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> i \\<in> net_ips s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> i \\<in> net_ips s;\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "from sr"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT", "obtain P R where [simp]: \"s = NodeS ii P R\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n\ngoal (1 subgoal):\n 1. (\\<And>P R. s = NodeS ii P R \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis net_node_reachable_is_node)"], ["proof (state)\nthis:\n  s = NodeS ii P R\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> i \\<in> net_ips s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> i \\<in> net_ips s;\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "moreover"], ["proof (state)\nthis:\n  s = NodeS ii P R\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> i \\<in> net_ips s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> i \\<in> net_ips s;\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "from tr"], ["proof (chain)\npicking this:\n  (s, i:deliver(d), s') \\<in> node_sos (automaton.trans (np ii))", "obtain P' R' where [simp]: \"s' = NodeS ii P' R'\""], ["proof (prove)\nusing this:\n  (s, i:deliver(d), s') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (1 subgoal):\n 1. (\\<And>P' R'.\n        s' = NodeS ii P' R' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp (metis node_sos_dest)"], ["proof (state)\nthis:\n  s' = NodeS ii P' R'\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> i \\<in> net_ips s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> i \\<in> net_ips s;\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "ultimately"], ["proof (chain)\npicking this:\n  s = NodeS ii P R\n  s' = NodeS ii P' R'", "have \"i = ii\""], ["proof (prove)\nusing this:\n  s = NodeS ii P R\n  s' = NodeS ii P' R'\n\ngoal (1 subgoal):\n 1. i = ii", "using tr"], ["proof (prove)\nusing this:\n  s = NodeS ii P R\n  s' = NodeS ii P' R'\n  (s, i:deliver(d), s') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (1 subgoal):\n 1. i = ii", "by auto"], ["proof (state)\nthis:\n  i = ii\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> i \\<in> net_ips s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> i \\<in> net_ips s;\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "thus \"i \\<in> net_ips s\""], ["proof (prove)\nusing this:\n  i = ii\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s", "by simp"], ["proof (state)\nthis:\n  i \\<in> net_ips s\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> i \\<in> net_ips s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> i \\<in> net_ips s;\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> i \\<in> net_ips s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> i \\<in> net_ips s;\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "fix p1 p2 s s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> i \\<in> net_ips s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> i \\<in> net_ips s;\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "assume IH1: \"\\<And>s s'. \\<lbrakk> s \\<in> reachable (pnet np p1) TT;\n                          (s, i:deliver(d), s') \\<in> trans (pnet np p1) \\<rbrakk> \\<Longrightarrow> i \\<in> net_ips s\"\n       and IH2: \"\\<And>s s'. \\<lbrakk> s \\<in> reachable (pnet np p2) TT;\n                          (s, i:deliver(d), s') \\<in> trans (pnet np p2) \\<rbrakk> \\<Longrightarrow> i \\<in> net_ips s\"\n       and sr: \"s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\"\n       and tr: \"(s, i:deliver(d), s') \\<in> trans (pnet np (p1 \\<parallel> p2))\""], ["proof (state)\nthis:\n  \\<lbrakk>?s \\<in> reachable (pnet np p1) TT;\n   (?s, i:deliver(d), ?s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n  \\<Longrightarrow> i \\<in> net_ips ?s\n  \\<lbrakk>?s \\<in> reachable (pnet np p2) TT;\n   (?s, i:deliver(d), ?s') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n  \\<Longrightarrow> i \\<in> net_ips ?s\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n  (s, i:deliver(d), s') \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> i \\<in> net_ips s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> i \\<in> net_ips s;\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "from tr"], ["proof (chain)\npicking this:\n  (s, i:deliver(d), s') \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))", "have \"(s, i:deliver(d), s') \\<in> pnet_sos (trans (pnet np p1)) (trans (pnet np p2))\""], ["proof (prove)\nusing this:\n  (s, i:deliver(d), s') \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. (s, i:deliver(d), s')\n    \\<in> pnet_sos (automaton.trans (pnet np p1))\n           (automaton.trans (pnet np p2))", "by simp"], ["proof (state)\nthis:\n  (s, i:deliver(d), s')\n  \\<in> pnet_sos (automaton.trans (pnet np p1))\n         (automaton.trans (pnet np p2))\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> i \\<in> net_ips s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> i \\<in> net_ips s;\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "thus \"i \\<in> net_ips s\""], ["proof (prove)\nusing this:\n  (s, i:deliver(d), s')\n  \\<in> pnet_sos (automaton.trans (pnet np p1))\n         (automaton.trans (pnet np p2))\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s", "proof (rule partial_deliverTE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "fix s1 s1' s2"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "assume \"s = SubnetS s1 s2\"\n         and \"s' = SubnetS s1' s2\"\n         and tr: \"(s1, i:deliver(d), s1') \\<in> trans (pnet np p1)\""], ["proof (state)\nthis:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2\n  (s1, i:deliver(d), s1') \\<in> automaton.trans (pnet np p1)\n\ngoal (2 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "from sr"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT", "have \"s1 \\<in> reachable (pnet np p1) TT\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n\ngoal (1 subgoal):\n 1. s1 \\<in> reachable (pnet np p1) TT", "by (auto simp only: \\<open>s = SubnetS s1 s2\\<close> elim: subnet_reachable)"], ["proof (state)\nthis:\n  s1 \\<in> reachable (pnet np p1) TT\n\ngoal (2 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "hence \"i \\<in> net_ips s1\""], ["proof (prove)\nusing this:\n  s1 \\<in> reachable (pnet np p1) TT\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s1", "using tr"], ["proof (prove)\nusing this:\n  s1 \\<in> reachable (pnet np p1) TT\n  (s1, i:deliver(d), s1') \\<in> automaton.trans (pnet np p1)\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s1", "by (rule IH1)"], ["proof (state)\nthis:\n  i \\<in> net_ips s1\n\ngoal (2 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "thus \"i \\<in> net_ips s\""], ["proof (prove)\nusing this:\n  i \\<in> net_ips s1\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s", "by (simp add: \\<open>s = SubnetS s1 s2\\<close>)"], ["proof (state)\nthis:\n  i \\<in> net_ips s\n\ngoal (1 subgoal):\n 1. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "fix s2 s2' s1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "assume \"s = SubnetS s1 s2\"\n         and \"s' = SubnetS s1 s2'\"\n         and tr: \"(s2, i:deliver(d), s2') \\<in> trans (pnet np p2)\""], ["proof (state)\nthis:\n  s = SubnetS s1 s2\n  s' = SubnetS s1 s2'\n  (s2, i:deliver(d), s2') \\<in> automaton.trans (pnet np p2)\n\ngoal (1 subgoal):\n 1. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "from sr"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT", "have \"s2 \\<in> reachable (pnet np p2) TT\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n\ngoal (1 subgoal):\n 1. s2 \\<in> reachable (pnet np p2) TT", "by (auto simp only: \\<open>s = SubnetS s1 s2\\<close> elim: subnet_reachable)"], ["proof (state)\nthis:\n  s2 \\<in> reachable (pnet np p2) TT\n\ngoal (1 subgoal):\n 1. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "hence \"i \\<in> net_ips s2\""], ["proof (prove)\nusing this:\n  s2 \\<in> reachable (pnet np p2) TT\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2", "using tr"], ["proof (prove)\nusing this:\n  s2 \\<in> reachable (pnet np p2) TT\n  (s2, i:deliver(d), s2') \\<in> automaton.trans (pnet np p2)\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2", "by (rule IH2)"], ["proof (state)\nthis:\n  i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> i \\<in> net_ips s", "thus \"i \\<in> net_ips s\""], ["proof (prove)\nusing this:\n  i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s", "by (simp add: \\<open>s = SubnetS s1 s2\\<close>)"], ["proof (state)\nthis:\n  i \\<in> net_ips s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i \\<in> net_ips s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_net_tree_net_ips_disjoint [elim]:\n  assumes \"wf_net_tree (p1 \\<parallel> p2)\"\n      and \"s1 \\<in> reachable (pnet np p1) S\"\n      and \"s2 \\<in> reachable (pnet np p2) S\"\n    shows \"net_ips s1 \\<inter> net_ips s2 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. net_ips s1 \\<inter> net_ips s2 = {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. net_ips s1 \\<inter> net_ips s2 = {}", "from \\<open>wf_net_tree (p1 \\<parallel> p2)\\<close>"], ["proof (chain)\npicking this:\n  wf_net_tree (p1 \\<parallel> p2)", "have \"net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\""], ["proof (prove)\nusing this:\n  wf_net_tree (p1 \\<parallel> p2)\n\ngoal (1 subgoal):\n 1. net_tree_ips p1 \\<inter> net_tree_ips p2 = {}", "by auto"], ["proof (state)\nthis:\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n\ngoal (1 subgoal):\n 1. net_ips s1 \\<inter> net_ips s2 = {}", "moreover"], ["proof (state)\nthis:\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n\ngoal (1 subgoal):\n 1. net_ips s1 \\<inter> net_ips s2 = {}", "from assms(2)"], ["proof (chain)\npicking this:\n  s1 \\<in> reachable (pnet np p1) S", "have \"net_ips s1 = net_tree_ips p1\""], ["proof (prove)\nusing this:\n  s1 \\<in> reachable (pnet np p1) S\n\ngoal (1 subgoal):\n 1. net_ips s1 = net_tree_ips p1", ".."], ["proof (state)\nthis:\n  net_ips s1 = net_tree_ips p1\n\ngoal (1 subgoal):\n 1. net_ips s1 \\<inter> net_ips s2 = {}", "moreover"], ["proof (state)\nthis:\n  net_ips s1 = net_tree_ips p1\n\ngoal (1 subgoal):\n 1. net_ips s1 \\<inter> net_ips s2 = {}", "from assms(3)"], ["proof (chain)\npicking this:\n  s2 \\<in> reachable (pnet np p2) S", "have \"net_ips s2 = net_tree_ips p2\""], ["proof (prove)\nusing this:\n  s2 \\<in> reachable (pnet np p2) S\n\ngoal (1 subgoal):\n 1. net_ips s2 = net_tree_ips p2", ".."], ["proof (state)\nthis:\n  net_ips s2 = net_tree_ips p2\n\ngoal (1 subgoal):\n 1. net_ips s1 \\<inter> net_ips s2 = {}", "ultimately"], ["proof (chain)\npicking this:\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n  net_ips s1 = net_tree_ips p1\n  net_ips s2 = net_tree_ips p2", "show ?thesis"], ["proof (prove)\nusing this:\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n  net_ips s1 = net_tree_ips p1\n  net_ips s2 = net_tree_ips p2\n\ngoal (1 subgoal):\n 1. net_ips s1 \\<inter> net_ips s2 = {}", "by simp"], ["proof (state)\nthis:\n  net_ips s1 \\<inter> net_ips s2 = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma init_mapstate_Some_aodv_init [elim]:\n  assumes \"s \\<in> init (pnet np p)\"\n      and \"netmap s i = Some v\"\n    shows \"v \\<in> init (np i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> init (np i)", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> init (pnet np p)\n  netmap s i = Some v\n\ngoal (1 subgoal):\n 1. v \\<in> init (np i)", "proof (induction p arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s.\n       \\<lbrakk>s \\<in> init (pnet np \\<langle>ia; R\\<rangle>);\n        netmap s i = Some v\\<rbrakk>\n       \\<Longrightarrow> v \\<in> init (np i)\n 2. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (pnet np p1);\n                    netmap s i = Some v\\<rbrakk>\n                   \\<Longrightarrow> v \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (pnet np p2); netmap s i = Some v\\<rbrakk>\n           \\<Longrightarrow> v \\<in> init (np i);\n        s \\<in> init (pnet np (p1 \\<parallel> p2));\n        netmap s i = Some v\\<rbrakk>\n       \\<Longrightarrow> v \\<in> init (np i)", "fix ii R s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s.\n       \\<lbrakk>s \\<in> init (pnet np \\<langle>ia; R\\<rangle>);\n        netmap s i = Some v\\<rbrakk>\n       \\<Longrightarrow> v \\<in> init (np i)\n 2. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (pnet np p1);\n                    netmap s i = Some v\\<rbrakk>\n                   \\<Longrightarrow> v \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (pnet np p2); netmap s i = Some v\\<rbrakk>\n           \\<Longrightarrow> v \\<in> init (np i);\n        s \\<in> init (pnet np (p1 \\<parallel> p2));\n        netmap s i = Some v\\<rbrakk>\n       \\<Longrightarrow> v \\<in> init (np i)", "assume \"s \\<in> init (pnet np \\<langle>ii; R\\<rangle>)\"\n       and \"netmap s i = Some v\""], ["proof (state)\nthis:\n  s \\<in> init (pnet np \\<langle>ii; R\\<rangle>)\n  netmap s i = Some v\n\ngoal (2 subgoals):\n 1. \\<And>ia R s.\n       \\<lbrakk>s \\<in> init (pnet np \\<langle>ia; R\\<rangle>);\n        netmap s i = Some v\\<rbrakk>\n       \\<Longrightarrow> v \\<in> init (np i)\n 2. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (pnet np p1);\n                    netmap s i = Some v\\<rbrakk>\n                   \\<Longrightarrow> v \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (pnet np p2); netmap s i = Some v\\<rbrakk>\n           \\<Longrightarrow> v \\<in> init (np i);\n        s \\<in> init (pnet np (p1 \\<parallel> p2));\n        netmap s i = Some v\\<rbrakk>\n       \\<Longrightarrow> v \\<in> init (np i)", "from this(1)"], ["proof (chain)\npicking this:\n  s \\<in> init (pnet np \\<langle>ii; R\\<rangle>)", "obtain ns where s: \"s = NodeS ii ns R\"\n      and ns: \"ns \\<in> init (np ii)\""], ["proof (prove)\nusing this:\n  s \\<in> init (pnet np \\<langle>ii; R\\<rangle>)\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>s = NodeS ii ns R; ns \\<in> init (np ii)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  s = NodeS ii ns R\n  ns \\<in> init (np ii)\n\ngoal (2 subgoals):\n 1. \\<And>ia R s.\n       \\<lbrakk>s \\<in> init (pnet np \\<langle>ia; R\\<rangle>);\n        netmap s i = Some v\\<rbrakk>\n       \\<Longrightarrow> v \\<in> init (np i)\n 2. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (pnet np p1);\n                    netmap s i = Some v\\<rbrakk>\n                   \\<Longrightarrow> v \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (pnet np p2); netmap s i = Some v\\<rbrakk>\n           \\<Longrightarrow> v \\<in> init (np i);\n        s \\<in> init (pnet np (p1 \\<parallel> p2));\n        netmap s i = Some v\\<rbrakk>\n       \\<Longrightarrow> v \\<in> init (np i)", "from s and \\<open>netmap s i = Some v\\<close>"], ["proof (chain)\npicking this:\n  s = NodeS ii ns R\n  netmap s i = Some v", "have \"i = ii\""], ["proof (prove)\nusing this:\n  s = NodeS ii ns R\n  netmap s i = Some v\n\ngoal (1 subgoal):\n 1. i = ii", "by simp (metis domI domIff)"], ["proof (state)\nthis:\n  i = ii\n\ngoal (2 subgoals):\n 1. \\<And>ia R s.\n       \\<lbrakk>s \\<in> init (pnet np \\<langle>ia; R\\<rangle>);\n        netmap s i = Some v\\<rbrakk>\n       \\<Longrightarrow> v \\<in> init (np i)\n 2. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (pnet np p1);\n                    netmap s i = Some v\\<rbrakk>\n                   \\<Longrightarrow> v \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (pnet np p2); netmap s i = Some v\\<rbrakk>\n           \\<Longrightarrow> v \\<in> init (np i);\n        s \\<in> init (pnet np (p1 \\<parallel> p2));\n        netmap s i = Some v\\<rbrakk>\n       \\<Longrightarrow> v \\<in> init (np i)", "with s ns"], ["proof (chain)\npicking this:\n  s = NodeS ii ns R\n  ns \\<in> init (np ii)\n  i = ii", "show \"v \\<in> init (np i)\""], ["proof (prove)\nusing this:\n  s = NodeS ii ns R\n  ns \\<in> init (np ii)\n  i = ii\n\ngoal (1 subgoal):\n 1. v \\<in> init (np i)", "using \\<open>netmap s i = Some v\\<close>"], ["proof (prove)\nusing this:\n  s = NodeS ii ns R\n  ns \\<in> init (np ii)\n  i = ii\n  netmap s i = Some v\n\ngoal (1 subgoal):\n 1. v \\<in> init (np i)", "by simp"], ["proof (state)\nthis:\n  v \\<in> init (np i)\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (pnet np p1);\n                    netmap s i = Some v\\<rbrakk>\n                   \\<Longrightarrow> v \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (pnet np p2); netmap s i = Some v\\<rbrakk>\n           \\<Longrightarrow> v \\<in> init (np i);\n        s \\<in> init (pnet np (p1 \\<parallel> p2));\n        netmap s i = Some v\\<rbrakk>\n       \\<Longrightarrow> v \\<in> init (np i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (pnet np p1);\n                    netmap s i = Some v\\<rbrakk>\n                   \\<Longrightarrow> v \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (pnet np p2); netmap s i = Some v\\<rbrakk>\n           \\<Longrightarrow> v \\<in> init (np i);\n        s \\<in> init (pnet np (p1 \\<parallel> p2));\n        netmap s i = Some v\\<rbrakk>\n       \\<Longrightarrow> v \\<in> init (np i)", "fix p1 p2 s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (pnet np p1);\n                    netmap s i = Some v\\<rbrakk>\n                   \\<Longrightarrow> v \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (pnet np p2); netmap s i = Some v\\<rbrakk>\n           \\<Longrightarrow> v \\<in> init (np i);\n        s \\<in> init (pnet np (p1 \\<parallel> p2));\n        netmap s i = Some v\\<rbrakk>\n       \\<Longrightarrow> v \\<in> init (np i)", "assume IH1: \"\\<And>s. s \\<in> init (pnet np p1) \\<Longrightarrow> netmap s i = Some v \\<Longrightarrow> v \\<in> init (np i)\"\n       and IH2: \"\\<And>s. s \\<in> init (pnet np p2) \\<Longrightarrow> netmap s i = Some v \\<Longrightarrow> v \\<in> init (np i)\"\n       and \"s \\<in> init (pnet np (p1 \\<parallel> p2))\"\n       and \"netmap s i = Some v\""], ["proof (state)\nthis:\n  \\<lbrakk>?s \\<in> init (pnet np p1); netmap ?s i = Some v\\<rbrakk>\n  \\<Longrightarrow> v \\<in> init (np i)\n  \\<lbrakk>?s \\<in> init (pnet np p2); netmap ?s i = Some v\\<rbrakk>\n  \\<Longrightarrow> v \\<in> init (np i)\n  s \\<in> init (pnet np (p1 \\<parallel> p2))\n  netmap s i = Some v\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (pnet np p1);\n                    netmap s i = Some v\\<rbrakk>\n                   \\<Longrightarrow> v \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (pnet np p2); netmap s i = Some v\\<rbrakk>\n           \\<Longrightarrow> v \\<in> init (np i);\n        s \\<in> init (pnet np (p1 \\<parallel> p2));\n        netmap s i = Some v\\<rbrakk>\n       \\<Longrightarrow> v \\<in> init (np i)", "from this(3)"], ["proof (chain)\npicking this:\n  s \\<in> init (pnet np (p1 \\<parallel> p2))", "obtain s1 s2 where \"s = SubnetS s1 s2\"\n                                and \"s1 \\<in> init (pnet np p1)\"\n                                and \"s2 \\<in> init (pnet np p2)\""], ["proof (prove)\nusing this:\n  s \\<in> init (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. (\\<And>s1 s2.\n        \\<lbrakk>s = SubnetS s1 s2; s1 \\<in> init (pnet np p1);\n         s2 \\<in> init (pnet np p2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s = SubnetS s1 s2\n  s1 \\<in> init (pnet np p1)\n  s2 \\<in> init (pnet np p2)\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (pnet np p1);\n                    netmap s i = Some v\\<rbrakk>\n                   \\<Longrightarrow> v \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (pnet np p2); netmap s i = Some v\\<rbrakk>\n           \\<Longrightarrow> v \\<in> init (np i);\n        s \\<in> init (pnet np (p1 \\<parallel> p2));\n        netmap s i = Some v\\<rbrakk>\n       \\<Longrightarrow> v \\<in> init (np i)", "from this(1) and \\<open>netmap s i = Some v\\<close>"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  netmap s i = Some v", "have \"netmap s1 i = Some v \\<or> netmap s2 i = Some v\""], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  netmap s i = Some v\n\ngoal (1 subgoal):\n 1. netmap s1 i = Some v \\<or> netmap s2 i = Some v", "by auto"], ["proof (state)\nthis:\n  netmap s1 i = Some v \\<or> netmap s2 i = Some v\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>s \\<in> init (pnet np p1);\n                    netmap s i = Some v\\<rbrakk>\n                   \\<Longrightarrow> v \\<in> init (np i);\n        \\<And>s.\n           \\<lbrakk>s \\<in> init (pnet np p2); netmap s i = Some v\\<rbrakk>\n           \\<Longrightarrow> v \\<in> init (np i);\n        s \\<in> init (pnet np (p1 \\<parallel> p2));\n        netmap s i = Some v\\<rbrakk>\n       \\<Longrightarrow> v \\<in> init (np i)", "thus \"v \\<in> init (np i)\""], ["proof (prove)\nusing this:\n  netmap s1 i = Some v \\<or> netmap s2 i = Some v\n\ngoal (1 subgoal):\n 1. v \\<in> init (np i)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. netmap s1 i = Some v \\<Longrightarrow> v \\<in> init (np i)\n 2. netmap s2 i = Some v \\<Longrightarrow> v \\<in> init (np i)", "assume \"netmap s1 i = Some v\""], ["proof (state)\nthis:\n  netmap s1 i = Some v\n\ngoal (2 subgoals):\n 1. netmap s1 i = Some v \\<Longrightarrow> v \\<in> init (np i)\n 2. netmap s2 i = Some v \\<Longrightarrow> v \\<in> init (np i)", "with \\<open>s1 \\<in> init (pnet np p1)\\<close>"], ["proof (chain)\npicking this:\n  s1 \\<in> init (pnet np p1)\n  netmap s1 i = Some v", "show ?thesis"], ["proof (prove)\nusing this:\n  s1 \\<in> init (pnet np p1)\n  netmap s1 i = Some v\n\ngoal (1 subgoal):\n 1. v \\<in> init (np i)", "by (rule IH1)"], ["proof (state)\nthis:\n  v \\<in> init (np i)\n\ngoal (1 subgoal):\n 1. netmap s2 i = Some v \\<Longrightarrow> v \\<in> init (np i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. netmap s2 i = Some v \\<Longrightarrow> v \\<in> init (np i)", "assume \"netmap s2 i = Some v\""], ["proof (state)\nthis:\n  netmap s2 i = Some v\n\ngoal (1 subgoal):\n 1. netmap s2 i = Some v \\<Longrightarrow> v \\<in> init (np i)", "with \\<open>s2 \\<in> init (pnet np p2)\\<close>"], ["proof (chain)\npicking this:\n  s2 \\<in> init (pnet np p2)\n  netmap s2 i = Some v", "show ?thesis"], ["proof (prove)\nusing this:\n  s2 \\<in> init (pnet np p2)\n  netmap s2 i = Some v\n\ngoal (1 subgoal):\n 1. v \\<in> init (np i)", "by (rule IH2)"], ["proof (state)\nthis:\n  v \\<in> init (np i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<in> init (np i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reachable_connect_netmap [elim]:\n  assumes \"s \\<in> reachable (pnet np n) TT\"\n      and \"(s, connect(i, i'), s') \\<in> trans (pnet np n)\"\n    shows \"netmap s' = netmap s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netmap s' = netmap s", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np n) TT\n  (s, connect(i, i'), s') \\<in> automaton.trans (pnet np n)\n\ngoal (1 subgoal):\n 1. netmap s' = netmap s", "proof (induction n arbitrary: s s')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, connect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "fix ii R\\<^sub>i s s'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, connect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "assume sr: \"s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\"\n       and \"(s, connect(i, i'), s') \\<in> trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\""], ["proof (state)\nthis:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  (s, connect(i, i'), s')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, connect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "from this(2)"], ["proof (chain)\npicking this:\n  (s, connect(i, i'), s')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)", "have tr: \"(s, connect(i, i'), s') \\<in> node_sos (trans (np ii))\""], ["proof (prove)\nusing this:\n  (s, connect(i, i'), s')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (1 subgoal):\n 1. (s, connect(i, i'), s') \\<in> node_sos (automaton.trans (np ii))", ".."], ["proof (state)\nthis:\n  (s, connect(i, i'), s') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, connect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "from sr"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT", "obtain p R where \"s = NodeS ii p R\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n\ngoal (1 subgoal):\n 1. (\\<And>p R. s = NodeS ii p R \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis net_node_reachable_is_node)"], ["proof (state)\nthis:\n  s = NodeS ii p R\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, connect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "with tr"], ["proof (chain)\npicking this:\n  (s, connect(i, i'), s') \\<in> node_sos (automaton.trans (np ii))\n  s = NodeS ii p R", "show \"netmap s' = netmap s\""], ["proof (prove)\nusing this:\n  (s, connect(i, i'), s') \\<in> node_sos (automaton.trans (np ii))\n  s = NodeS ii p R\n\ngoal (1 subgoal):\n 1. netmap s' = netmap s", "by (auto elim!: node_sos.cases)"], ["proof (state)\nthis:\n  netmap s' = netmap s\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, connect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, connect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "fix p1 p2 s s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, connect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "assume IH1: \"\\<And>s s'. \\<lbrakk> s \\<in> reachable (pnet np p1) TT;\n                          (s, connect(i, i'), s') \\<in> trans (pnet np p1) \\<rbrakk> \\<Longrightarrow> netmap s' = netmap s\"\n       and IH2: \"\\<And>s s'. \\<lbrakk> s \\<in> reachable (pnet np p2) TT;\n                          (s, connect(i, i'), s') \\<in> trans (pnet np p2) \\<rbrakk> \\<Longrightarrow> netmap s' = netmap s\"\n       and sr: \"s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\"\n       and tr: \"(s, connect(i, i'), s') \\<in> trans (pnet np (p1 \\<parallel> p2))\""], ["proof (state)\nthis:\n  \\<lbrakk>?s \\<in> reachable (pnet np p1) TT;\n   (?s, connect(i, i'), ?s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n  \\<Longrightarrow> netmap ?s' = netmap ?s\n  \\<lbrakk>?s \\<in> reachable (pnet np p2) TT;\n   (?s, connect(i, i'), ?s') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n  \\<Longrightarrow> netmap ?s' = netmap ?s\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n  (s, connect(i, i'), s')\n  \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, connect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "from tr"], ["proof (chain)\npicking this:\n  (s, connect(i, i'), s')\n  \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))", "have \"(s, connect(i, i'), s') \\<in> pnet_sos (trans (pnet np p1)) (trans (pnet np p2))\""], ["proof (prove)\nusing this:\n  (s, connect(i, i'), s')\n  \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. (s, connect(i, i'), s')\n    \\<in> pnet_sos (automaton.trans (pnet np p1))\n           (automaton.trans (pnet np p2))", "by simp"], ["proof (state)\nthis:\n  (s, connect(i, i'), s')\n  \\<in> pnet_sos (automaton.trans (pnet np p1))\n         (automaton.trans (pnet np p2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, connect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "thus \"netmap s' = netmap s\""], ["proof (prove)\nusing this:\n  (s, connect(i, i'), s')\n  \\<in> pnet_sos (automaton.trans (pnet np p1))\n         (automaton.trans (pnet np p2))\n\ngoal (1 subgoal):\n 1. netmap s' = netmap s", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; connect(i, i') = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; connect(i, i') = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 3. \\<And>s s' t t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "fix s1 s1' s2 s2'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; connect(i, i') = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; connect(i, i') = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 3. \\<And>s s' t t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "assume \"s = SubnetS s1 s2\"\n         and \"s' = SubnetS s1' s2'\"\n         and tr1: \"(s1, connect(i, i'), s1') \\<in> trans (pnet np p1)\"\n         and tr2: \"(s2, connect(i, i'), s2') \\<in> trans (pnet np p2)\""], ["proof (state)\nthis:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  (s1, connect(i, i'), s1') \\<in> automaton.trans (pnet np p1)\n  (s2, connect(i, i'), s2') \\<in> automaton.trans (pnet np p2)\n\ngoal (3 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; connect(i, i') = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; connect(i, i') = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 3. \\<And>s s' t t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "from this(1) and sr"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT", "have \"SubnetS s1 s2 \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\""], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n\ngoal (1 subgoal):\n 1. SubnetS s1 s2 \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT", "by simp"], ["proof (state)\nthis:\n  SubnetS s1 s2 \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n\ngoal (3 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; connect(i, i') = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; connect(i, i') = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 3. \\<And>s s' t t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "hence sr1: \"s1 \\<in> reachable (pnet np p1) TT\"\n      and sr2: \"s2 \\<in> reachable (pnet np p2) TT\""], ["proof (prove)\nusing this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n\ngoal (1 subgoal):\n 1. s1 \\<in> reachable (pnet np p1) TT &&&\n    s2 \\<in> reachable (pnet np p2) TT", "by (auto intro: subnet_reachable)"], ["proof (state)\nthis:\n  s1 \\<in> reachable (pnet np p1) TT\n  s2 \\<in> reachable (pnet np p2) TT\n\ngoal (3 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; connect(i, i') = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; connect(i, i') = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 3. \\<And>s s' t t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "from sr1 tr1"], ["proof (chain)\npicking this:\n  s1 \\<in> reachable (pnet np p1) TT\n  (s1, connect(i, i'), s1') \\<in> automaton.trans (pnet np p1)", "have \"netmap s1' = netmap s1\""], ["proof (prove)\nusing this:\n  s1 \\<in> reachable (pnet np p1) TT\n  (s1, connect(i, i'), s1') \\<in> automaton.trans (pnet np p1)\n\ngoal (1 subgoal):\n 1. netmap s1' = netmap s1", "by (rule IH1)"], ["proof (state)\nthis:\n  netmap s1' = netmap s1\n\ngoal (3 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; connect(i, i') = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; connect(i, i') = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 3. \\<And>s s' t t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "moreover"], ["proof (state)\nthis:\n  netmap s1' = netmap s1\n\ngoal (3 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; connect(i, i') = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; connect(i, i') = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 3. \\<And>s s' t t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "from sr2 tr2"], ["proof (chain)\npicking this:\n  s2 \\<in> reachable (pnet np p2) TT\n  (s2, connect(i, i'), s2') \\<in> automaton.trans (pnet np p2)", "have \"netmap s2' = netmap s2\""], ["proof (prove)\nusing this:\n  s2 \\<in> reachable (pnet np p2) TT\n  (s2, connect(i, i'), s2') \\<in> automaton.trans (pnet np p2)\n\ngoal (1 subgoal):\n 1. netmap s2' = netmap s2", "by (rule IH2)"], ["proof (state)\nthis:\n  netmap s2' = netmap s2\n\ngoal (3 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; connect(i, i') = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; connect(i, i') = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 3. \\<And>s s' t t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "ultimately"], ["proof (chain)\npicking this:\n  netmap s1' = netmap s1\n  netmap s2' = netmap s2", "show \"netmap s' = netmap s\""], ["proof (prove)\nusing this:\n  netmap s1' = netmap s1\n  netmap s2' = netmap s2\n\ngoal (1 subgoal):\n 1. netmap s' = netmap s", "using \\<open>s = SubnetS s1 s2\\<close> and \\<open>s' = SubnetS s1' s2'\\<close>"], ["proof (prove)\nusing this:\n  netmap s1' = netmap s1\n  netmap s2' = netmap s2\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n\ngoal (1 subgoal):\n 1. netmap s' = netmap s", "by simp"], ["proof (state)\nthis:\n  netmap s' = netmap s\n\ngoal (2 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; connect(i, i') = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; connect(i, i') = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "qed simp_all"], ["proof (state)\nthis:\n  netmap s' = netmap s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reachable_disconnect_netmap [elim]:\n  assumes \"s \\<in> reachable (pnet np n) TT\"\n      and \"(s, disconnect(i, i'), s') \\<in> trans (pnet np n)\"\n    shows \"netmap s' = netmap s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netmap s' = netmap s", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np n) TT\n  (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np n)\n\ngoal (1 subgoal):\n 1. netmap s' = netmap s", "proof (induction n arbitrary: s s')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, disconnect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "fix ii R\\<^sub>i s s'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, disconnect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "assume sr: \"s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\"\n       and \"(s, disconnect(i, i'), s') \\<in> trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\""], ["proof (state)\nthis:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  (s, disconnect(i, i'), s')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, disconnect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "from this(2)"], ["proof (chain)\npicking this:\n  (s, disconnect(i, i'), s')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)", "have tr: \"(s, disconnect(i, i'), s') \\<in> node_sos (trans (np ii))\""], ["proof (prove)\nusing this:\n  (s, disconnect(i, i'), s')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (1 subgoal):\n 1. (s, disconnect(i, i'), s') \\<in> node_sos (automaton.trans (np ii))", ".."], ["proof (state)\nthis:\n  (s, disconnect(i, i'), s') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, disconnect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "from sr"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT", "obtain p R where \"s = NodeS ii p R\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n\ngoal (1 subgoal):\n 1. (\\<And>p R. s = NodeS ii p R \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis net_node_reachable_is_node)"], ["proof (state)\nthis:\n  s = NodeS ii p R\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, disconnect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "with tr"], ["proof (chain)\npicking this:\n  (s, disconnect(i, i'), s') \\<in> node_sos (automaton.trans (np ii))\n  s = NodeS ii p R", "show \"netmap s' = netmap s\""], ["proof (prove)\nusing this:\n  (s, disconnect(i, i'), s') \\<in> node_sos (automaton.trans (np ii))\n  s = NodeS ii p R\n\ngoal (1 subgoal):\n 1. netmap s' = netmap s", "by (auto elim!: node_sos.cases)"], ["proof (state)\nthis:\n  netmap s' = netmap s\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, disconnect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, disconnect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "fix p1 p2 s s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, disconnect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "assume IH1: \"\\<And>s s'. \\<lbrakk> s \\<in> reachable (pnet np p1) TT;\n                          (s, disconnect(i, i'), s') \\<in> trans (pnet np p1) \\<rbrakk> \\<Longrightarrow> netmap s' = netmap s\"\n       and IH2: \"\\<And>s s'. \\<lbrakk> s \\<in> reachable (pnet np p2) TT;\n                          (s, disconnect(i, i'), s') \\<in> trans (pnet np p2) \\<rbrakk> \\<Longrightarrow> netmap s' = netmap s\"\n       and sr: \"s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\"\n       and tr: \"(s, disconnect(i, i'), s') \\<in> trans (pnet np (p1 \\<parallel> p2))\""], ["proof (state)\nthis:\n  \\<lbrakk>?s \\<in> reachable (pnet np p1) TT;\n   (?s, disconnect(i, i'), ?s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n  \\<Longrightarrow> netmap ?s' = netmap ?s\n  \\<lbrakk>?s \\<in> reachable (pnet np p2) TT;\n   (?s, disconnect(i, i'), ?s') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n  \\<Longrightarrow> netmap ?s' = netmap ?s\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n  (s, disconnect(i, i'), s')\n  \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, disconnect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "from tr"], ["proof (chain)\npicking this:\n  (s, disconnect(i, i'), s')\n  \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))", "have \"(s, disconnect(i, i'), s') \\<in> pnet_sos (trans (pnet np p1)) (trans (pnet np p2))\""], ["proof (prove)\nusing this:\n  (s, disconnect(i, i'), s')\n  \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. (s, disconnect(i, i'), s')\n    \\<in> pnet_sos (automaton.trans (pnet np p1))\n           (automaton.trans (pnet np p2))", "by simp"], ["proof (state)\nthis:\n  (s, disconnect(i, i'), s')\n  \\<in> pnet_sos (automaton.trans (pnet np p1))\n         (automaton.trans (pnet np p2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>s \\<in> reachable (pnet np n1) TT;\n                    (s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n1)\\<rbrakk>\n                   \\<Longrightarrow> netmap s' = netmap s;\n        \\<And>s s'.\n           \\<lbrakk>s \\<in> reachable (pnet np n2) TT;\n            (s, disconnect(i, i'), s')\n            \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n           \\<Longrightarrow> netmap s' = netmap s;\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "thus \"netmap s' = netmap s\""], ["proof (prove)\nusing this:\n  (s, disconnect(i, i'), s')\n  \\<in> pnet_sos (automaton.trans (pnet np p1))\n         (automaton.trans (pnet np p2))\n\ngoal (1 subgoal):\n 1. netmap s' = netmap s", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; disconnect(i, i') = \\<tau>;\n        s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; disconnect(i, i') = \\<tau>;\n        s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 3. \\<And>s s' t t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "fix s1 s1' s2 s2'"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; disconnect(i, i') = \\<tau>;\n        s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; disconnect(i, i') = \\<tau>;\n        s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 3. \\<And>s s' t t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "assume \"s = SubnetS s1 s2\"\n         and \"s' = SubnetS s1' s2'\"\n         and tr1: \"(s1, disconnect(i, i'), s1') \\<in> trans (pnet np p1)\"\n         and tr2: \"(s2, disconnect(i, i'), s2') \\<in> trans (pnet np p2)\""], ["proof (state)\nthis:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  (s1, disconnect(i, i'), s1') \\<in> automaton.trans (pnet np p1)\n  (s2, disconnect(i, i'), s2') \\<in> automaton.trans (pnet np p2)\n\ngoal (3 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; disconnect(i, i') = \\<tau>;\n        s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; disconnect(i, i') = \\<tau>;\n        s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 3. \\<And>s s' t t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "from this(1) and sr"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT", "have \"SubnetS s1 s2 \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\""], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n\ngoal (1 subgoal):\n 1. SubnetS s1 s2 \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT", "by simp"], ["proof (state)\nthis:\n  SubnetS s1 s2 \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n\ngoal (3 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; disconnect(i, i') = \\<tau>;\n        s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; disconnect(i, i') = \\<tau>;\n        s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 3. \\<And>s s' t t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "hence sr1: \"s1 \\<in> reachable (pnet np p1) TT\"\n      and sr2: \"s2 \\<in> reachable (pnet np p2) TT\""], ["proof (prove)\nusing this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n\ngoal (1 subgoal):\n 1. s1 \\<in> reachable (pnet np p1) TT &&&\n    s2 \\<in> reachable (pnet np p2) TT", "by (auto intro: subnet_reachable)"], ["proof (state)\nthis:\n  s1 \\<in> reachable (pnet np p1) TT\n  s2 \\<in> reachable (pnet np p2) TT\n\ngoal (3 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; disconnect(i, i') = \\<tau>;\n        s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; disconnect(i, i') = \\<tau>;\n        s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 3. \\<And>s s' t t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "from sr1 tr1"], ["proof (chain)\npicking this:\n  s1 \\<in> reachable (pnet np p1) TT\n  (s1, disconnect(i, i'), s1') \\<in> automaton.trans (pnet np p1)", "have \"netmap s1' = netmap s1\""], ["proof (prove)\nusing this:\n  s1 \\<in> reachable (pnet np p1) TT\n  (s1, disconnect(i, i'), s1') \\<in> automaton.trans (pnet np p1)\n\ngoal (1 subgoal):\n 1. netmap s1' = netmap s1", "by (rule IH1)"], ["proof (state)\nthis:\n  netmap s1' = netmap s1\n\ngoal (3 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; disconnect(i, i') = \\<tau>;\n        s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; disconnect(i, i') = \\<tau>;\n        s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 3. \\<And>s s' t t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "moreover"], ["proof (state)\nthis:\n  netmap s1' = netmap s1\n\ngoal (3 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; disconnect(i, i') = \\<tau>;\n        s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; disconnect(i, i') = \\<tau>;\n        s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 3. \\<And>s s' t t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "from sr2 tr2"], ["proof (chain)\npicking this:\n  s2 \\<in> reachable (pnet np p2) TT\n  (s2, disconnect(i, i'), s2') \\<in> automaton.trans (pnet np p2)", "have \"netmap s2' = netmap s2\""], ["proof (prove)\nusing this:\n  s2 \\<in> reachable (pnet np p2) TT\n  (s2, disconnect(i, i'), s2') \\<in> automaton.trans (pnet np p2)\n\ngoal (1 subgoal):\n 1. netmap s2' = netmap s2", "by (rule IH2)"], ["proof (state)\nthis:\n  netmap s2' = netmap s2\n\ngoal (3 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; disconnect(i, i') = \\<tau>;\n        s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; disconnect(i, i') = \\<tau>;\n        s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 3. \\<And>s s' t t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "ultimately"], ["proof (chain)\npicking this:\n  netmap s1' = netmap s1\n  netmap s2' = netmap s2", "show \"netmap s' = netmap s\""], ["proof (prove)\nusing this:\n  netmap s1' = netmap s1\n  netmap s2' = netmap s2\n\ngoal (1 subgoal):\n 1. netmap s' = netmap s", "using \\<open>s = SubnetS s1 s2\\<close> and \\<open>s' = SubnetS s1' s2'\\<close>"], ["proof (prove)\nusing this:\n  netmap s1' = netmap s1\n  netmap s2' = netmap s2\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n\ngoal (1 subgoal):\n 1. netmap s' = netmap s", "by simp"], ["proof (state)\nthis:\n  netmap s' = netmap s\n\ngoal (2 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; disconnect(i, i') = \\<tau>;\n        s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; disconnect(i, i') = \\<tau>;\n        s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> netmap s' = netmap s", "qed simp_all"], ["proof (state)\nthis:\n  netmap s' = netmap s\n\ngoal:\nNo subgoals!", "qed"], ["", "fun net_ip_action :: \"(ip \\<Rightarrow> ('s, 'm seq_action) automaton)\n                       \\<Rightarrow> 'm node_action \\<Rightarrow> ip \\<Rightarrow> net_tree \\<Rightarrow> 's net_state \\<Rightarrow> 's net_state \\<Rightarrow> bool\"\nwhere\n    \"net_ip_action np a i (p1 \\<parallel> p2) (SubnetS s1 s2) (SubnetS s1' s2') =\n         ((i \\<in> net_ips s1 \\<longrightarrow> ((s1, a, s1') \\<in> trans (pnet np p1)\n                                \\<and> s2' = s2 \\<and> net_ip_action np a i p1 s1 s1'))\n          \\<and> (i \\<in> net_ips s2 \\<longrightarrow> ((s2, a, s2') \\<in> trans (pnet np p2))\n                                   \\<and> s1' = s1 \\<and> net_ip_action np a i p2 s2 s2'))\"\n  | \"net_ip_action np a i p s s' = True\""], ["", "lemma pnet_tau_single_node [elim]:\n  assumes \"wf_net_tree p\"\n      and \"s \\<in> reachable (pnet np p) TT\"\n      and \"(s, \\<tau>, s') \\<in> trans (pnet np p)\"\n  shows \"\\<exists>i\\<in>net_ips s. ((\\<forall>j. j\\<noteq>i \\<longrightarrow> netmap s' j = netmap s j)\n                         \\<and> net_ip_action np \\<tau> i p s s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>net_ips s.\n       (\\<forall>j.\n           j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n       net_ip_action np \\<tau> i p s s'", "using assms"], ["proof (prove)\nusing this:\n  wf_net_tree p\n  s \\<in> reachable (pnet np p) TT\n  (s, \\<tau>, s') \\<in> automaton.trans (pnet np p)\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>net_ips s.\n       (\\<forall>j.\n           j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n       net_ip_action np \\<tau> i p s s'", "proof (induction p arbitrary: s s')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R s s'.\n       \\<lbrakk>wf_net_tree \\<langle>i; R\\<rangle>;\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        (s, \\<tau>, s')\n        \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ia\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> ia \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> ia\n                             \\<langle>i; R\\<rangle> s s'\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, \\<tau>, s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n  (\\<forall>j.\n      j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n  net_ip_action np \\<tau> i p1 s s';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, \\<tau>, s') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                                (\\<forall>j.\n                                    j \\<noteq> i \\<longrightarrow>\n                                    netmap s' j = netmap s j) \\<and>\n                                net_ip_action np \\<tau> i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, \\<tau>, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "fix ii R\\<^sub>i s s'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R s s'.\n       \\<lbrakk>wf_net_tree \\<langle>i; R\\<rangle>;\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        (s, \\<tau>, s')\n        \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ia\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> ia \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> ia\n                             \\<langle>i; R\\<rangle> s s'\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, \\<tau>, s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n  (\\<forall>j.\n      j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n  net_ip_action np \\<tau> i p1 s s';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, \\<tau>, s') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                                (\\<forall>j.\n                                    j \\<noteq> i \\<longrightarrow>\n                                    netmap s' j = netmap s j) \\<and>\n                                net_ip_action np \\<tau> i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, \\<tau>, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "assume \"s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\"\n       and \"(s, \\<tau>, s') \\<in> trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\""], ["proof (state)\nthis:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  (s, \\<tau>, s')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (2 subgoals):\n 1. \\<And>i R s s'.\n       \\<lbrakk>wf_net_tree \\<langle>i; R\\<rangle>;\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        (s, \\<tau>, s')\n        \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ia\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> ia \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> ia\n                             \\<langle>i; R\\<rangle> s s'\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, \\<tau>, s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n  (\\<forall>j.\n      j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n  net_ip_action np \\<tau> i p1 s s';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, \\<tau>, s') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                                (\\<forall>j.\n                                    j \\<noteq> i \\<longrightarrow>\n                                    netmap s' j = netmap s j) \\<and>\n                                net_ip_action np \\<tau> i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, \\<tau>, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "from this"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  (s, \\<tau>, s')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)", "obtain p R p' R' where \"s = NodeS ii p R\" and \"s' = NodeS ii p' R'\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  (s, \\<tau>, s')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (1 subgoal):\n 1. (\\<And>p R p' R'.\n        \\<lbrakk>s = NodeS ii p R; s' = NodeS ii p' R'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (hide_lams, no_types) TT_True net_node_reachable_is_node\n                                      reachable_step)"], ["proof (state)\nthis:\n  s = NodeS ii p R\n  s' = NodeS ii p' R'\n\ngoal (2 subgoals):\n 1. \\<And>i R s s'.\n       \\<lbrakk>wf_net_tree \\<langle>i; R\\<rangle>;\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        (s, \\<tau>, s')\n        \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ia\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> ia \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> ia\n                             \\<langle>i; R\\<rangle> s s'\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, \\<tau>, s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n  (\\<forall>j.\n      j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n  net_ip_action np \\<tau> i p1 s s';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, \\<tau>, s') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                                (\\<forall>j.\n                                    j \\<noteq> i \\<longrightarrow>\n                                    netmap s' j = netmap s j) \\<and>\n                                net_ip_action np \\<tau> i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, \\<tau>, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "hence \"net_ips s = {ii}\"\n      and \"net_ips s' = {ii}\""], ["proof (prove)\nusing this:\n  s = NodeS ii p R\n  s' = NodeS ii p' R'\n\ngoal (1 subgoal):\n 1. net_ips s = {ii} &&& net_ips s' = {ii}", "by simp_all"], ["proof (state)\nthis:\n  net_ips s = {ii}\n  net_ips s' = {ii}\n\ngoal (2 subgoals):\n 1. \\<And>i R s s'.\n       \\<lbrakk>wf_net_tree \\<langle>i; R\\<rangle>;\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        (s, \\<tau>, s')\n        \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ia\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> ia \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> ia\n                             \\<langle>i; R\\<rangle> s s'\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, \\<tau>, s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n  (\\<forall>j.\n      j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n  net_ip_action np \\<tau> i p1 s s';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, \\<tau>, s') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                                (\\<forall>j.\n                                    j \\<noteq> i \\<longrightarrow>\n                                    netmap s' j = netmap s j) \\<and>\n                                net_ip_action np \\<tau> i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, \\<tau>, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "hence \"\\<exists>i\\<in>dom (netmap s). \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j\""], ["proof (prove)\nusing this:\n  net_ips s = {ii}\n  net_ips s' = {ii}\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>dom (netmap s).\n       \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j", "by (simp add: net_ips_is_dom_netmap)"], ["proof (state)\nthis:\n  \\<exists>i\\<in>dom (netmap s).\n     \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j\n\ngoal (2 subgoals):\n 1. \\<And>i R s s'.\n       \\<lbrakk>wf_net_tree \\<langle>i; R\\<rangle>;\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        (s, \\<tau>, s')\n        \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ia\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> ia \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> ia\n                             \\<langle>i; R\\<rangle> s s'\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, \\<tau>, s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n  (\\<forall>j.\n      j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n  net_ip_action np \\<tau> i p1 s s';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, \\<tau>, s') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                                (\\<forall>j.\n                                    j \\<noteq> i \\<longrightarrow>\n                                    netmap s' j = netmap s j) \\<and>\n                                net_ip_action np \\<tau> i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, \\<tau>, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "thus \"\\<exists>i\\<in>net_ips s. (\\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j)\n                         \\<and> net_ip_action np \\<tau> i (\\<langle>ii; R\\<^sub>i\\<rangle>) s s'\""], ["proof (prove)\nusing this:\n  \\<exists>i\\<in>dom (netmap s).\n     \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>net_ips s.\n       (\\<forall>j.\n           j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n       net_ip_action np \\<tau> i \\<langle>ii; R\\<^sub>i\\<rangle> s s'", "by (simp add: net_ips_is_dom_netmap)"], ["proof (state)\nthis:\n  \\<exists>i\\<in>net_ips s.\n     (\\<forall>j.\n         j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n     net_ip_action np \\<tau> i \\<langle>ii; R\\<^sub>i\\<rangle> s s'\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, \\<tau>, s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n  (\\<forall>j.\n      j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n  net_ip_action np \\<tau> i p1 s s';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, \\<tau>, s') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                                (\\<forall>j.\n                                    j \\<noteq> i \\<longrightarrow>\n                                    netmap s' j = netmap s j) \\<and>\n                                net_ip_action np \\<tau> i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, \\<tau>, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, \\<tau>, s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n  (\\<forall>j.\n      j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n  net_ip_action np \\<tau> i p1 s s';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, \\<tau>, s') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                                (\\<forall>j.\n                                    j \\<noteq> i \\<longrightarrow>\n                                    netmap s' j = netmap s j) \\<and>\n                                net_ip_action np \\<tau> i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, \\<tau>, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "fix p1 p2 s s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, \\<tau>, s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n  (\\<forall>j.\n      j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n  net_ip_action np \\<tau> i p1 s s';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, \\<tau>, s') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                                (\\<forall>j.\n                                    j \\<noteq> i \\<longrightarrow>\n                                    netmap s' j = netmap s j) \\<and>\n                                net_ip_action np \\<tau> i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, \\<tau>, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "assume IH1: \"\\<And>s s'. \\<lbrakk> wf_net_tree p1;\n                          s \\<in> reachable (pnet np p1) TT;\n                          (s, \\<tau>, s') \\<in> trans (pnet np p1) \\<rbrakk>\n                         \\<Longrightarrow> \\<exists>i\\<in>net_ips s. (\\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j)\n                                            \\<and> net_ip_action np \\<tau> i p1 s s'\"\n       and IH2: \"\\<And>s s'. \\<lbrakk> wf_net_tree p2;\n                          s \\<in> reachable (pnet np p2) TT;\n                          (s, \\<tau>, s') \\<in> trans (pnet np p2) \\<rbrakk>\n                         \\<Longrightarrow> \\<exists>i\\<in>net_ips s. (\\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j)\n                                            \\<and> net_ip_action np \\<tau> i p2 s s'\"\n       and sr: \"s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\"\n       and \"wf_net_tree (p1 \\<parallel> p2)\"\n       and tr: \"(s, \\<tau>, s') \\<in> trans (pnet np (p1 \\<parallel> p2))\""], ["proof (state)\nthis:\n  \\<lbrakk>wf_net_tree p1; ?s \\<in> reachable (pnet np p1) TT;\n   (?s, \\<tau>, ?s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i\\<in>net_ips ?s.\n                       (\\<forall>j.\n                           j \\<noteq> i \\<longrightarrow>\n                           netmap ?s' j = netmap ?s j) \\<and>\n                       net_ip_action np \\<tau> i p1 ?s ?s'\n  \\<lbrakk>wf_net_tree p2; ?s \\<in> reachable (pnet np p2) TT;\n   (?s, \\<tau>, ?s') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i\\<in>net_ips ?s.\n                       (\\<forall>j.\n                           j \\<noteq> i \\<longrightarrow>\n                           netmap ?s' j = netmap ?s j) \\<and>\n                       net_ip_action np \\<tau> i p2 ?s ?s'\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n  wf_net_tree (p1 \\<parallel> p2)\n  (s, \\<tau>, s') \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, \\<tau>, s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n  (\\<forall>j.\n      j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n  net_ip_action np \\<tau> i p1 s s';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, \\<tau>, s') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                                (\\<forall>j.\n                                    j \\<noteq> i \\<longrightarrow>\n                                    netmap s' j = netmap s j) \\<and>\n                                net_ip_action np \\<tau> i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, \\<tau>, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "from \\<open>wf_net_tree (p1 \\<parallel> p2)\\<close>"], ["proof (chain)\npicking this:\n  wf_net_tree (p1 \\<parallel> p2)", "have \"net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\"\n                                  and \"wf_net_tree p1\" \n                                  and \"wf_net_tree p2\""], ["proof (prove)\nusing this:\n  wf_net_tree (p1 \\<parallel> p2)\n\ngoal (1 subgoal):\n 1. net_tree_ips p1 \\<inter> net_tree_ips p2 = {} &&&\n    wf_net_tree p1 &&& wf_net_tree p2", "by auto"], ["proof (state)\nthis:\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n  wf_net_tree p1\n  wf_net_tree p2\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, \\<tau>, s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n  (\\<forall>j.\n      j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n  net_ip_action np \\<tau> i p1 s s';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, \\<tau>, s') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                                (\\<forall>j.\n                                    j \\<noteq> i \\<longrightarrow>\n                                    netmap s' j = netmap s j) \\<and>\n                                net_ip_action np \\<tau> i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, \\<tau>, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "from tr"], ["proof (chain)\npicking this:\n  (s, \\<tau>, s') \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))", "have \"(s, \\<tau>, s') \\<in> pnet_sos (trans (pnet np p1)) (trans (pnet np p2))\""], ["proof (prove)\nusing this:\n  (s, \\<tau>, s') \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. (s, \\<tau>, s')\n    \\<in> pnet_sos (automaton.trans (pnet np p1))\n           (automaton.trans (pnet np p2))", "by simp"], ["proof (state)\nthis:\n  (s, \\<tau>, s')\n  \\<in> pnet_sos (automaton.trans (pnet np p1))\n         (automaton.trans (pnet np p2))\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, \\<tau>, s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n  (\\<forall>j.\n      j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n  net_ip_action np \\<tau> i p1 s s';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, \\<tau>, s') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                                (\\<forall>j.\n                                    j \\<noteq> i \\<longrightarrow>\n                                    netmap s' j = netmap s j) \\<and>\n                                net_ip_action np \\<tau> i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, \\<tau>, s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "thus \"\\<exists>i\\<in>net_ips s. (\\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j)\n                        \\<and> net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'\""], ["proof (prove)\nusing this:\n  (s, \\<tau>, s')\n  \\<in> pnet_sos (automaton.trans (pnet np p1))\n         (automaton.trans (pnet np p2))\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>net_ips s.\n       (\\<forall>j.\n           j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n       net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'", "proof cases"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 9. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "fix s1 s1' s2"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 9. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "assume subs:  \"s = SubnetS s1 s2\"\n         and subs': \"s' = SubnetS s1' s2\"\n         and tr1: \"(s1, \\<tau>, s1') \\<in> trans (pnet np p1)\""], ["proof (state)\nthis:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2\n  (s1, \\<tau>, s1') \\<in> automaton.trans (pnet np p1)\n\ngoal (9 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 9. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "from sr"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT", "have sr1: \"s1 \\<in> reachable (pnet np p1) TT\"\n               and \"s2 \\<in> reachable (pnet np p2) TT\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n\ngoal (1 subgoal):\n 1. s1 \\<in> reachable (pnet np p1) TT &&&\n    s2 \\<in> reachable (pnet np p2) TT", "by (simp_all only: subs) (erule subnet_reachable)+"], ["proof (state)\nthis:\n  s1 \\<in> reachable (pnet np p1) TT\n  s2 \\<in> reachable (pnet np p2) TT\n\ngoal (9 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 9. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "with \\<open>net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\\<close>"], ["proof (chain)\npicking this:\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n  s1 \\<in> reachable (pnet np p1) TT\n  s2 \\<in> reachable (pnet np p2) TT", "have \"dom(netmap s1) \\<inter> dom(netmap s2) = {}\""], ["proof (prove)\nusing this:\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n  s1 \\<in> reachable (pnet np p1) TT\n  s2 \\<in> reachable (pnet np p2) TT\n\ngoal (1 subgoal):\n 1. dom (netmap s1) \\<inter> dom (netmap s2) = {}", "by (metis net_ips_is_dom_netmap pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  dom (netmap s1) \\<inter> dom (netmap s2) = {}\n\ngoal (9 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 9. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "from \\<open>wf_net_tree p1\\<close> sr1 tr1"], ["proof (chain)\npicking this:\n  wf_net_tree p1\n  s1 \\<in> reachable (pnet np p1) TT\n  (s1, \\<tau>, s1') \\<in> automaton.trans (pnet np p1)", "obtain i where \"i\\<in>dom(netmap s1)\"\n                                               and *: \"\\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s1' j = netmap s1 j\"\n                                               and \"net_ip_action np \\<tau> i p1 s1 s1'\""], ["proof (prove)\nusing this:\n  wf_net_tree p1\n  s1 \\<in> reachable (pnet np p1) TT\n  (s1, \\<tau>, s1') \\<in> automaton.trans (pnet np p1)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i \\<in> dom (netmap s1);\n         \\<forall>j.\n            j \\<noteq> i \\<longrightarrow> netmap s1' j = netmap s1 j;\n         net_ip_action np \\<tau> i p1 s1 s1'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: net_ips_is_dom_netmap dest!: IH1)"], ["proof (state)\nthis:\n  i \\<in> dom (netmap s1)\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s1' j = netmap s1 j\n  net_ip_action np \\<tau> i p1 s1 s1'\n\ngoal (9 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 9. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "from this(1) and \\<open>dom(netmap s1) \\<inter> dom(netmap s2) = {}\\<close>"], ["proof (chain)\npicking this:\n  i \\<in> dom (netmap s1)\n  dom (netmap s1) \\<inter> dom (netmap s2) = {}", "have \"i\\<notin>dom(netmap s2)\""], ["proof (prove)\nusing this:\n  i \\<in> dom (netmap s1)\n  dom (netmap s1) \\<inter> dom (netmap s2) = {}\n\ngoal (1 subgoal):\n 1. i \\<notin> dom (netmap s2)", "by auto"], ["proof (state)\nthis:\n  i \\<notin> dom (netmap s2)\n\ngoal (9 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 9. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "with subs subs' tr1 \\<open>net_ip_action np \\<tau> i p1 s1 s1'\\<close>"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2\n  (s1, \\<tau>, s1') \\<in> automaton.trans (pnet np p1)\n  net_ip_action np \\<tau> i p1 s1 s1'\n  i \\<notin> dom (netmap s2)", "have \"net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'\""], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2\n  (s1, \\<tau>, s1') \\<in> automaton.trans (pnet np p1)\n  net_ip_action np \\<tau> i p1 s1 s1'\n  i \\<notin> dom (netmap s2)\n\ngoal (1 subgoal):\n 1. net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'", "by (simp add: net_ips_is_dom_netmap)"], ["proof (state)\nthis:\n  net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'\n\ngoal (9 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 9. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "moreover"], ["proof (state)\nthis:\n  net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'\n\ngoal (9 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 9. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "have \"\\<forall>j. j \\<noteq> i \\<longrightarrow> (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<noteq> i \\<longrightarrow>\n       (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<noteq> i \\<Longrightarrow>\n       (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<noteq> i \\<Longrightarrow>\n       (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j", "assume \"j \\<noteq> i\""], ["proof (state)\nthis:\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<noteq> i \\<Longrightarrow>\n       (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j", "with *"], ["proof (chain)\npicking this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s1' j = netmap s1 j\n  j \\<noteq> i", "have \"netmap s1' j = netmap s1 j\""], ["proof (prove)\nusing this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s1' j = netmap s1 j\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. netmap s1' j = netmap s1 j", "by simp"], ["proof (state)\nthis:\n  netmap s1' j = netmap s1 j\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<noteq> i \\<Longrightarrow>\n       (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j", "thus \"(netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j\""], ["proof (prove)\nusing this:\n  netmap s1' j = netmap s1 j\n\ngoal (1 subgoal):\n 1. (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j", "by (metis (hide_lams, mono_tags) map_add_dom_app_simps(1) map_add_dom_app_simps(3))"], ["proof (state)\nthis:\n  (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j\n\ngoal (9 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 9. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "ultimately"], ["proof (chain)\npicking this:\n  net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j", "show ?thesis"], ["proof (prove)\nusing this:\n  net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>net_ips s.\n       (\\<forall>j.\n           j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n       net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'", "using \\<open>i\\<in>dom(netmap s1)\\<close> subs subs'"], ["proof (prove)\nusing this:\n  net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j\n  i \\<in> dom (netmap s1)\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>net_ips s.\n       (\\<forall>j.\n           j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n       net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'", "by (auto simp add: net_ips_is_dom_netmap)"], ["proof (state)\nthis:\n  \\<exists>i\\<in>net_ips s.\n     (\\<forall>j.\n         j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n     net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'\n\ngoal (8 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "fix s2 s2' s1"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "assume subs: \"s = SubnetS s1 s2\"\n         and subs': \"s' = SubnetS s1 s2'\"\n         and tr2: \"(s2, \\<tau>, s2') \\<in> trans (pnet np p2)\""], ["proof (state)\nthis:\n  s = SubnetS s1 s2\n  s' = SubnetS s1 s2'\n  (s2, \\<tau>, s2') \\<in> automaton.trans (pnet np p2)\n\ngoal (8 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "from sr"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT", "have \"s1 \\<in> reachable (pnet np p1) TT\"\n               and sr2: \"s2 \\<in> reachable (pnet np p2) TT\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n\ngoal (1 subgoal):\n 1. s1 \\<in> reachable (pnet np p1) TT &&&\n    s2 \\<in> reachable (pnet np p2) TT", "by (simp_all only: subs) (erule subnet_reachable)+"], ["proof (state)\nthis:\n  s1 \\<in> reachable (pnet np p1) TT\n  s2 \\<in> reachable (pnet np p2) TT\n\ngoal (8 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "with \\<open>net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\\<close>"], ["proof (chain)\npicking this:\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n  s1 \\<in> reachable (pnet np p1) TT\n  s2 \\<in> reachable (pnet np p2) TT", "have \"dom(netmap s1) \\<inter> dom(netmap s2) = {}\""], ["proof (prove)\nusing this:\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n  s1 \\<in> reachable (pnet np p1) TT\n  s2 \\<in> reachable (pnet np p2) TT\n\ngoal (1 subgoal):\n 1. dom (netmap s1) \\<inter> dom (netmap s2) = {}", "by (metis net_ips_is_dom_netmap pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  dom (netmap s1) \\<inter> dom (netmap s2) = {}\n\ngoal (8 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "from \\<open>wf_net_tree p2\\<close> sr2 tr2"], ["proof (chain)\npicking this:\n  wf_net_tree p2\n  s2 \\<in> reachable (pnet np p2) TT\n  (s2, \\<tau>, s2') \\<in> automaton.trans (pnet np p2)", "obtain i where \"i\\<in>dom(netmap s2)\"\n                                               and *: \"\\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s2' j = netmap s2 j\"\n                                               and \"net_ip_action np \\<tau> i p2 s2 s2'\""], ["proof (prove)\nusing this:\n  wf_net_tree p2\n  s2 \\<in> reachable (pnet np p2) TT\n  (s2, \\<tau>, s2') \\<in> automaton.trans (pnet np p2)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i \\<in> dom (netmap s2);\n         \\<forall>j.\n            j \\<noteq> i \\<longrightarrow> netmap s2' j = netmap s2 j;\n         net_ip_action np \\<tau> i p2 s2 s2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: net_ips_is_dom_netmap dest!: IH2)"], ["proof (state)\nthis:\n  i \\<in> dom (netmap s2)\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s2' j = netmap s2 j\n  net_ip_action np \\<tau> i p2 s2 s2'\n\ngoal (8 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "from this(1) and \\<open>dom(netmap s1) \\<inter> dom(netmap s2) = {}\\<close>"], ["proof (chain)\npicking this:\n  i \\<in> dom (netmap s2)\n  dom (netmap s1) \\<inter> dom (netmap s2) = {}", "have \"i\\<notin>dom(netmap s1)\""], ["proof (prove)\nusing this:\n  i \\<in> dom (netmap s2)\n  dom (netmap s1) \\<inter> dom (netmap s2) = {}\n\ngoal (1 subgoal):\n 1. i \\<notin> dom (netmap s1)", "by auto"], ["proof (state)\nthis:\n  i \\<notin> dom (netmap s1)\n\ngoal (8 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "with subs subs' tr2 \\<open>net_ip_action np \\<tau> i p2 s2 s2'\\<close>"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1 s2'\n  (s2, \\<tau>, s2') \\<in> automaton.trans (pnet np p2)\n  net_ip_action np \\<tau> i p2 s2 s2'\n  i \\<notin> dom (netmap s1)", "have \"net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'\""], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1 s2'\n  (s2, \\<tau>, s2') \\<in> automaton.trans (pnet np p2)\n  net_ip_action np \\<tau> i p2 s2 s2'\n  i \\<notin> dom (netmap s1)\n\ngoal (1 subgoal):\n 1. net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'", "by (simp add: net_ips_is_dom_netmap)"], ["proof (state)\nthis:\n  net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'\n\ngoal (8 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "moreover"], ["proof (state)\nthis:\n  net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'\n\ngoal (8 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "have \"\\<forall>j. j \\<noteq> i \\<longrightarrow> (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<noteq> i \\<longrightarrow>\n       (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<noteq> i \\<Longrightarrow>\n       (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<noteq> i \\<Longrightarrow>\n       (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j", "assume \"j \\<noteq> i\""], ["proof (state)\nthis:\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<noteq> i \\<Longrightarrow>\n       (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j", "with *"], ["proof (chain)\npicking this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s2' j = netmap s2 j\n  j \\<noteq> i", "have \"netmap s2' j = netmap s2 j\""], ["proof (prove)\nusing this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s2' j = netmap s2 j\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. netmap s2' j = netmap s2 j", "by simp"], ["proof (state)\nthis:\n  netmap s2' j = netmap s2 j\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<noteq> i \\<Longrightarrow>\n       (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j", "thus \"(netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j\""], ["proof (prove)\nusing this:\n  netmap s2' j = netmap s2 j\n\ngoal (1 subgoal):\n 1. (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j", "by (metis (hide_lams, mono_tags) domD map_add_Some_iff map_add_dom_app_simps(3))"], ["proof (state)\nthis:\n  (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j\n\ngoal (8 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 8. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "ultimately"], ["proof (chain)\npicking this:\n  net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j", "show ?thesis"], ["proof (prove)\nusing this:\n  net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>net_ips s.\n       (\\<forall>j.\n           j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n       net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'", "using \\<open>i\\<in>dom(netmap s2)\\<close> subs subs'"], ["proof (prove)\nusing this:\n  net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j\n  i \\<in> dom (netmap s2)\n  s = SubnetS s1 s2\n  s' = SubnetS s1 s2'\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<in>net_ips s.\n       (\\<forall>j.\n           j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n       net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'", "by (clarsimp simp add: net_ips_is_dom_netmap)\n           (metis domI dom_map_add map_add_find_right)"], ["proof (state)\nthis:\n  \\<exists>i\\<in>net_ips s.\n     (\\<forall>j.\n         j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n     net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'\n\ngoal (7 subgoals):\n 1. \\<And>s R m s' t H K t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H\\<not>K:arrive(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 2. \\<And>s H K m s' t R t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = R:*cast(m); s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, R:*cast(m), t') \\<in> automaton.trans (pnet np p2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 3. \\<And>s H K m s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t;\n        \\<tau> = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np p1);\n        (t, H'\\<not>K':arrive(m), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 4. \\<And>s i d s' t.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 5. \\<And>t i d t' s.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = i:deliver(d); s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 6. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = connect(i, i');\n        s' = SubnetS s' t';\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, connect(i, i'), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'\n 7. \\<And>s i i' s' t t'.\n       \\<lbrakk>s = SubnetS s t; \\<tau> = disconnect(i, i');\n        s' = SubnetS s' t';\n        (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np p1);\n        (t, disconnect(i, i'), t')\n        \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<in>net_ips s.\n                            (\\<forall>j.\n                                j \\<noteq> i \\<longrightarrow>\n                                netmap s' j = netmap s j) \\<and>\n                            net_ip_action np \\<tau> i (p1 \\<parallel> p2) s\n                             s'", "qed simp_all"], ["proof (state)\nthis:\n  \\<exists>i\\<in>net_ips s.\n     (\\<forall>j.\n         j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n     net_ip_action np \\<tau> i (p1 \\<parallel> p2) s s'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pnet_deliver_single_node [elim]:\n  assumes \"wf_net_tree p\"\n      and \"s \\<in> reachable (pnet np p) TT\"\n      and \"(s, i:deliver(d), s') \\<in> trans (pnet np p)\"\n  shows \"(\\<forall>j. j\\<noteq>i \\<longrightarrow> netmap s' j = netmap s j) \\<and> net_ip_action np (i:deliver(d)) i p s s'\"\n    (is \"?P p s s'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>j.\n        j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n    net_ip_action np (i:deliver(d)) i p s s'", "using assms"], ["proof (prove)\nusing this:\n  wf_net_tree p\n  s \\<in> reachable (pnet np p) TT\n  (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p)\n\ngoal (1 subgoal):\n 1. (\\<forall>j.\n        j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n    net_ip_action np (i:deliver(d)) i p s s'", "proof (induction p arbitrary: s s')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>wf_net_tree \\<langle>ia; R\\<rangle>;\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          \\<langle>ia; R\\<rangle> s s'\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>j.\n   j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n                                     net_ip_action np (i:deliver(d)) i p1 s\ns';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> (\\<forall>j.\n                                 j \\<noteq> i \\<longrightarrow>\n                                 netmap s' j = netmap s j) \\<and>\n                             net_ip_action np (i:deliver(d)) i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "fix ii R\\<^sub>i s s'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>wf_net_tree \\<langle>ia; R\\<rangle>;\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          \\<langle>ia; R\\<rangle> s s'\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>j.\n   j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n                                     net_ip_action np (i:deliver(d)) i p1 s\ns';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> (\\<forall>j.\n                                 j \\<noteq> i \\<longrightarrow>\n                                 netmap s' j = netmap s j) \\<and>\n                             net_ip_action np (i:deliver(d)) i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "assume sr: \"s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\"\n       and tr: \"(s, i:deliver(d), s') \\<in> trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\""], ["proof (state)\nthis:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  (s, i:deliver(d), s')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>wf_net_tree \\<langle>ia; R\\<rangle>;\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          \\<langle>ia; R\\<rangle> s s'\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>j.\n   j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n                                     net_ip_action np (i:deliver(d)) i p1 s\ns';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> (\\<forall>j.\n                                 j \\<noteq> i \\<longrightarrow>\n                                 netmap s' j = netmap s j) \\<and>\n                             net_ip_action np (i:deliver(d)) i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "from this"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  (s, i:deliver(d), s')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)", "obtain p R p' R' where \"s = NodeS ii p R\" and \"s' = NodeS ii p' R'\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  (s, i:deliver(d), s')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (1 subgoal):\n 1. (\\<And>p R p' R'.\n        \\<lbrakk>s = NodeS ii p R; s' = NodeS ii p' R'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (hide_lams, no_types) TT_True net_node_reachable_is_node\n                                      reachable_step)"], ["proof (state)\nthis:\n  s = NodeS ii p R\n  s' = NodeS ii p' R'\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>wf_net_tree \\<langle>ia; R\\<rangle>;\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          \\<langle>ia; R\\<rangle> s s'\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>j.\n   j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n                                     net_ip_action np (i:deliver(d)) i p1 s\ns';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> (\\<forall>j.\n                                 j \\<noteq> i \\<longrightarrow>\n                                 netmap s' j = netmap s j) \\<and>\n                             net_ip_action np (i:deliver(d)) i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "hence \"net_ips s = {ii}\"\n      and \"net_ips s' = {ii}\""], ["proof (prove)\nusing this:\n  s = NodeS ii p R\n  s' = NodeS ii p' R'\n\ngoal (1 subgoal):\n 1. net_ips s = {ii} &&& net_ips s' = {ii}", "by simp_all"], ["proof (state)\nthis:\n  net_ips s = {ii}\n  net_ips s' = {ii}\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>wf_net_tree \\<langle>ia; R\\<rangle>;\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          \\<langle>ia; R\\<rangle> s s'\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>j.\n   j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n                                     net_ip_action np (i:deliver(d)) i p1 s\ns';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> (\\<forall>j.\n                                 j \\<noteq> i \\<longrightarrow>\n                                 netmap s' j = netmap s j) \\<and>\n                             net_ip_action np (i:deliver(d)) i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "hence \"\\<forall>j. j \\<noteq> ii \\<longrightarrow> netmap s' j = netmap s j\""], ["proof (prove)\nusing this:\n  net_ips s = {ii}\n  net_ips s' = {ii}\n\ngoal (1 subgoal):\n 1. \\<forall>j. j \\<noteq> ii \\<longrightarrow> netmap s' j = netmap s j", "by simp"], ["proof (state)\nthis:\n  \\<forall>j. j \\<noteq> ii \\<longrightarrow> netmap s' j = netmap s j\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>wf_net_tree \\<langle>ia; R\\<rangle>;\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          \\<langle>ia; R\\<rangle> s s'\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>j.\n   j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n                                     net_ip_action np (i:deliver(d)) i p1 s\ns';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> (\\<forall>j.\n                                 j \\<noteq> i \\<longrightarrow>\n                                 netmap s' j = netmap s j) \\<and>\n                             net_ip_action np (i:deliver(d)) i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "moreover"], ["proof (state)\nthis:\n  \\<forall>j. j \\<noteq> ii \\<longrightarrow> netmap s' j = netmap s j\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>wf_net_tree \\<langle>ia; R\\<rangle>;\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          \\<langle>ia; R\\<rangle> s s'\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>j.\n   j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n                                     net_ip_action np (i:deliver(d)) i p1 s\ns';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> (\\<forall>j.\n                                 j \\<noteq> i \\<longrightarrow>\n                                 netmap s' j = netmap s j) \\<and>\n                             net_ip_action np (i:deliver(d)) i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "from sr tr"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  (s, i:deliver(d), s')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)", "have \"i = ii\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  (s, i:deliver(d), s')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (1 subgoal):\n 1. i = ii", "by (rule delivered_to_node)"], ["proof (state)\nthis:\n  i = ii\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s'.\n       \\<lbrakk>wf_net_tree \\<langle>ia; R\\<rangle>;\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          \\<langle>ia; R\\<rangle> s s'\n 2. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>j.\n   j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n                                     net_ip_action np (i:deliver(d)) i p1 s\ns';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> (\\<forall>j.\n                                 j \\<noteq> i \\<longrightarrow>\n                                 netmap s' j = netmap s j) \\<and>\n                             net_ip_action np (i:deliver(d)) i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>j. j \\<noteq> ii \\<longrightarrow> netmap s' j = netmap s j\n  i = ii", "show \"(\\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j)\n                     \\<and> net_ip_action np (i:deliver(d)) i (\\<langle>ii; R\\<^sub>i\\<rangle>) s s'\""], ["proof (prove)\nusing this:\n  \\<forall>j. j \\<noteq> ii \\<longrightarrow> netmap s' j = netmap s j\n  i = ii\n\ngoal (1 subgoal):\n 1. (\\<forall>j.\n        j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n    net_ip_action np (i:deliver(d)) i \\<langle>ii; R\\<^sub>i\\<rangle> s s'", "by simp"], ["proof (state)\nthis:\n  (\\<forall>j.\n      j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n  net_ip_action np (i:deliver(d)) i \\<langle>ii; R\\<^sub>i\\<rangle> s s'\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>j.\n   j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n                                     net_ip_action np (i:deliver(d)) i p1 s\ns';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> (\\<forall>j.\n                                 j \\<noteq> i \\<longrightarrow>\n                                 netmap s' j = netmap s j) \\<and>\n                             net_ip_action np (i:deliver(d)) i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>j.\n   j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n                                     net_ip_action np (i:deliver(d)) i p1 s\ns';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> (\\<forall>j.\n                                 j \\<noteq> i \\<longrightarrow>\n                                 netmap s' j = netmap s j) \\<and>\n                             net_ip_action np (i:deliver(d)) i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "fix p1 p2 s s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>j.\n   j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n                                     net_ip_action np (i:deliver(d)) i p1 s\ns';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> (\\<forall>j.\n                                 j \\<noteq> i \\<longrightarrow>\n                                 netmap s' j = netmap s j) \\<and>\n                             net_ip_action np (i:deliver(d)) i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "assume IH1: \"\\<And>s s'. \\<lbrakk> wf_net_tree p1;\n                          s \\<in> reachable (pnet np p1) TT;\n                          (s, i:deliver(d), s') \\<in> trans (pnet np p1) \\<rbrakk>\n                         \\<Longrightarrow> (\\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j)\n                             \\<and> net_ip_action np (i:deliver(d)) i p1 s s'\"\n       and IH2: \"\\<And>s s'. \\<lbrakk> wf_net_tree p2;\n                          s \\<in> reachable (pnet np p2) TT;\n                          (s, i:deliver(d), s') \\<in> trans (pnet np p2) \\<rbrakk>\n                         \\<Longrightarrow> (\\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j)\n                             \\<and> net_ip_action np (i:deliver(d)) i p2 s s'\"\n       and sr: \"s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\"\n       and \"wf_net_tree (p1 \\<parallel> p2)\"\n       and tr: \"(s, i:deliver(d), s') \\<in> trans (pnet np (p1 \\<parallel> p2))\""], ["proof (state)\nthis:\n  \\<lbrakk>wf_net_tree p1; ?s \\<in> reachable (pnet np p1) TT;\n   (?s, i:deliver(d), ?s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>j.\n                        j \\<noteq> i \\<longrightarrow>\n                        netmap ?s' j = netmap ?s j) \\<and>\n                    net_ip_action np (i:deliver(d)) i p1 ?s ?s'\n  \\<lbrakk>wf_net_tree p2; ?s \\<in> reachable (pnet np p2) TT;\n   (?s, i:deliver(d), ?s') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>j.\n                        j \\<noteq> i \\<longrightarrow>\n                        netmap ?s' j = netmap ?s j) \\<and>\n                    net_ip_action np (i:deliver(d)) i p2 ?s ?s'\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n  wf_net_tree (p1 \\<parallel> p2)\n  (s, i:deliver(d), s') \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>j.\n   j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n                                     net_ip_action np (i:deliver(d)) i p1 s\ns';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> (\\<forall>j.\n                                 j \\<noteq> i \\<longrightarrow>\n                                 netmap s' j = netmap s j) \\<and>\n                             net_ip_action np (i:deliver(d)) i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "from \\<open>wf_net_tree (p1 \\<parallel> p2)\\<close>"], ["proof (chain)\npicking this:\n  wf_net_tree (p1 \\<parallel> p2)", "have \"net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\"\n                                  and \"wf_net_tree p1\" \n                                  and \"wf_net_tree p2\""], ["proof (prove)\nusing this:\n  wf_net_tree (p1 \\<parallel> p2)\n\ngoal (1 subgoal):\n 1. net_tree_ips p1 \\<inter> net_tree_ips p2 = {} &&&\n    wf_net_tree p1 &&& wf_net_tree p2", "by auto"], ["proof (state)\nthis:\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n  wf_net_tree p1\n  wf_net_tree p2\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>j.\n   j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n                                     net_ip_action np (i:deliver(d)) i p1 s\ns';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> (\\<forall>j.\n                                 j \\<noteq> i \\<longrightarrow>\n                                 netmap s' j = netmap s j) \\<and>\n                             net_ip_action np (i:deliver(d)) i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "from tr"], ["proof (chain)\npicking this:\n  (s, i:deliver(d), s') \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))", "have \"(s, i:deliver(d), s') \\<in> pnet_sos (trans (pnet np p1)) (trans (pnet np p2))\""], ["proof (prove)\nusing this:\n  (s, i:deliver(d), s') \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\n\ngoal (1 subgoal):\n 1. (s, i:deliver(d), s')\n    \\<in> pnet_sos (automaton.trans (pnet np p1))\n           (automaton.trans (pnet np p2))", "by simp"], ["proof (state)\nthis:\n  (s, i:deliver(d), s')\n  \\<in> pnet_sos (automaton.trans (pnet np p1))\n         (automaton.trans (pnet np p2))\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2 s s'.\n       \\<lbrakk>\\<And>s s'.\n                   \\<lbrakk>wf_net_tree p1;\n                    s \\<in> reachable (pnet np p1) TT;\n                    (s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n                   \\<Longrightarrow> (\\<forall>j.\n   j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n                                     net_ip_action np (i:deliver(d)) i p1 s\ns';\n        \\<And>s s'.\n           \\<lbrakk>wf_net_tree p2; s \\<in> reachable (pnet np p2) TT;\n            (s, i:deliver(d), s')\n            \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n           \\<Longrightarrow> (\\<forall>j.\n                                 j \\<noteq> i \\<longrightarrow>\n                                 netmap s' j = netmap s j) \\<and>\n                             net_ip_action np (i:deliver(d)) i p2 s s';\n        wf_net_tree (p1 \\<parallel> p2);\n        s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT;\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (p1 \\<parallel> p2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "thus \"(\\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j)\n          \\<and> net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'\""], ["proof (prove)\nusing this:\n  (s, i:deliver(d), s')\n  \\<in> pnet_sos (automaton.trans (pnet np p1))\n         (automaton.trans (pnet np p2))\n\ngoal (1 subgoal):\n 1. (\\<forall>j.\n        j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n    net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'", "proof cases"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 4. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "fix s1 s1' s2"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 4. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "assume subs:  \"s = SubnetS s1 s2\"\n         and subs': \"s' = SubnetS s1' s2\"\n         and tr1: \"(s1, i:deliver(d), s1') \\<in> trans (pnet np p1)\""], ["proof (state)\nthis:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2\n  (s1, i:deliver(d), s1') \\<in> automaton.trans (pnet np p1)\n\ngoal (4 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 4. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "from sr"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT", "have sr1: \"s1 \\<in> reachable (pnet np p1) TT\"\n               and \"s2 \\<in> reachable (pnet np p2) TT\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n\ngoal (1 subgoal):\n 1. s1 \\<in> reachable (pnet np p1) TT &&&\n    s2 \\<in> reachable (pnet np p2) TT", "by (simp_all only: subs) (erule subnet_reachable)+"], ["proof (state)\nthis:\n  s1 \\<in> reachable (pnet np p1) TT\n  s2 \\<in> reachable (pnet np p2) TT\n\ngoal (4 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 4. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "with \\<open>net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\\<close>"], ["proof (chain)\npicking this:\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n  s1 \\<in> reachable (pnet np p1) TT\n  s2 \\<in> reachable (pnet np p2) TT", "have \"dom(netmap s1) \\<inter> dom(netmap s2) = {}\""], ["proof (prove)\nusing this:\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n  s1 \\<in> reachable (pnet np p1) TT\n  s2 \\<in> reachable (pnet np p2) TT\n\ngoal (1 subgoal):\n 1. dom (netmap s1) \\<inter> dom (netmap s2) = {}", "by (metis net_ips_is_dom_netmap pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  dom (netmap s1) \\<inter> dom (netmap s2) = {}\n\ngoal (4 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 4. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "moreover"], ["proof (state)\nthis:\n  dom (netmap s1) \\<inter> dom (netmap s2) = {}\n\ngoal (4 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 4. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "from sr1 tr1"], ["proof (chain)\npicking this:\n  s1 \\<in> reachable (pnet np p1) TT\n  (s1, i:deliver(d), s1') \\<in> automaton.trans (pnet np p1)", "have \"i \\<in> net_ips s1\""], ["proof (prove)\nusing this:\n  s1 \\<in> reachable (pnet np p1) TT\n  (s1, i:deliver(d), s1') \\<in> automaton.trans (pnet np p1)\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s1", "by (rule delivered_to_net_ips)"], ["proof (state)\nthis:\n  i \\<in> net_ips s1\n\ngoal (4 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 4. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "ultimately"], ["proof (chain)\npicking this:\n  dom (netmap s1) \\<inter> dom (netmap s2) = {}\n  i \\<in> net_ips s1", "have \"i\\<notin>dom(netmap s2)\""], ["proof (prove)\nusing this:\n  dom (netmap s1) \\<inter> dom (netmap s2) = {}\n  i \\<in> net_ips s1\n\ngoal (1 subgoal):\n 1. i \\<notin> dom (netmap s2)", "by (auto simp add: net_ips_is_dom_netmap)"], ["proof (state)\nthis:\n  i \\<notin> dom (netmap s2)\n\ngoal (4 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 4. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "from \\<open>wf_net_tree p1\\<close> sr1 tr1"], ["proof (chain)\npicking this:\n  wf_net_tree p1\n  s1 \\<in> reachable (pnet np p1) TT\n  (s1, i:deliver(d), s1') \\<in> automaton.trans (pnet np p1)", "have *: \"\\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s1' j = netmap s1 j\"\n                                     and \"net_ip_action np (i:deliver(d)) i p1 s1 s1'\""], ["proof (prove)\nusing this:\n  wf_net_tree p1\n  s1 \\<in> reachable (pnet np p1) TT\n  (s1, i:deliver(d), s1') \\<in> automaton.trans (pnet np p1)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<noteq> i \\<longrightarrow> netmap s1' j = netmap s1 j &&&\n    net_ip_action np (i:deliver(d)) i p1 s1 s1'", "by (auto dest!: IH1)"], ["proof (state)\nthis:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s1' j = netmap s1 j\n  net_ip_action np (i:deliver(d)) i p1 s1 s1'\n\ngoal (4 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 4. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "from subs subs' tr1 this(2) \\<open>i\\<notin>dom(netmap s2)\\<close>"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2\n  (s1, i:deliver(d), s1') \\<in> automaton.trans (pnet np p1)\n  net_ip_action np (i:deliver(d)) i p1 s1 s1'\n  i \\<notin> dom (netmap s2)", "have \"net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'\""], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2\n  (s1, i:deliver(d), s1') \\<in> automaton.trans (pnet np p1)\n  net_ip_action np (i:deliver(d)) i p1 s1 s1'\n  i \\<notin> dom (netmap s2)\n\ngoal (1 subgoal):\n 1. net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'", "by (simp add: net_ips_is_dom_netmap)"], ["proof (state)\nthis:\n  net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'\n\ngoal (4 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 4. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "moreover"], ["proof (state)\nthis:\n  net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'\n\ngoal (4 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 4. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "have \"\\<forall>j. j \\<noteq> i \\<longrightarrow> (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<noteq> i \\<longrightarrow>\n       (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<noteq> i \\<Longrightarrow>\n       (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<noteq> i \\<Longrightarrow>\n       (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j", "assume \"j \\<noteq> i\""], ["proof (state)\nthis:\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<noteq> i \\<Longrightarrow>\n       (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j", "with *"], ["proof (chain)\npicking this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s1' j = netmap s1 j\n  j \\<noteq> i", "have \"netmap s1' j = netmap s1 j\""], ["proof (prove)\nusing this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s1' j = netmap s1 j\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. netmap s1' j = netmap s1 j", "by simp"], ["proof (state)\nthis:\n  netmap s1' j = netmap s1 j\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<noteq> i \\<Longrightarrow>\n       (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j", "thus \"(netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j\""], ["proof (prove)\nusing this:\n  netmap s1' j = netmap s1 j\n\ngoal (1 subgoal):\n 1. (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j", "by (metis (hide_lams, mono_tags) map_add_dom_app_simps(1) map_add_dom_app_simps(3))"], ["proof (state)\nthis:\n  (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j\n\ngoal (4 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t;\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 4. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "ultimately"], ["proof (chain)\npicking this:\n  net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j", "show ?thesis"], ["proof (prove)\nusing this:\n  net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j\n\ngoal (1 subgoal):\n 1. (\\<forall>j.\n        j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n    net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'", "using \\<open>i\\<in>net_ips s1\\<close> subs subs'"], ["proof (prove)\nusing this:\n  net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     (netmap s1' ++ netmap s2) j = (netmap s1 ++ netmap s2) j\n  i \\<in> net_ips s1\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2\n\ngoal (1 subgoal):\n 1. (\\<forall>j.\n        j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n    net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'", "by auto"], ["proof (state)\nthis:\n  (\\<forall>j.\n      j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n  net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'\n\ngoal (3 subgoals):\n 1. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "fix s2 s2' s1"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "assume subs: \"s = SubnetS s1 s2\"\n         and subs': \"s' = SubnetS s1 s2'\"\n         and tr2: \"(s2, i:deliver(d), s2') \\<in> trans (pnet np p2)\""], ["proof (state)\nthis:\n  s = SubnetS s1 s2\n  s' = SubnetS s1 s2'\n  (s2, i:deliver(d), s2') \\<in> automaton.trans (pnet np p2)\n\ngoal (3 subgoals):\n 1. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "from sr"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT", "have \"s1 \\<in> reachable (pnet np p1) TT\"\n               and sr2: \"s2 \\<in> reachable (pnet np p2) TT\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np (p1 \\<parallel> p2)) TT\n\ngoal (1 subgoal):\n 1. s1 \\<in> reachable (pnet np p1) TT &&&\n    s2 \\<in> reachable (pnet np p2) TT", "by (simp_all only: subs) (erule subnet_reachable)+"], ["proof (state)\nthis:\n  s1 \\<in> reachable (pnet np p1) TT\n  s2 \\<in> reachable (pnet np p2) TT\n\ngoal (3 subgoals):\n 1. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "with \\<open>net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\\<close>"], ["proof (chain)\npicking this:\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n  s1 \\<in> reachable (pnet np p1) TT\n  s2 \\<in> reachable (pnet np p2) TT", "have \"dom(netmap s1) \\<inter> dom(netmap s2) = {}\""], ["proof (prove)\nusing this:\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n  s1 \\<in> reachable (pnet np p1) TT\n  s2 \\<in> reachable (pnet np p2) TT\n\ngoal (1 subgoal):\n 1. dom (netmap s1) \\<inter> dom (netmap s2) = {}", "by (metis net_ips_is_dom_netmap pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  dom (netmap s1) \\<inter> dom (netmap s2) = {}\n\ngoal (3 subgoals):\n 1. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "moreover"], ["proof (state)\nthis:\n  dom (netmap s1) \\<inter> dom (netmap s2) = {}\n\ngoal (3 subgoals):\n 1. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "from sr2 tr2"], ["proof (chain)\npicking this:\n  s2 \\<in> reachable (pnet np p2) TT\n  (s2, i:deliver(d), s2') \\<in> automaton.trans (pnet np p2)", "have \"i \\<in> net_ips s2\""], ["proof (prove)\nusing this:\n  s2 \\<in> reachable (pnet np p2) TT\n  (s2, i:deliver(d), s2') \\<in> automaton.trans (pnet np p2)\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2", "by (rule delivered_to_net_ips)"], ["proof (state)\nthis:\n  i \\<in> net_ips s2\n\ngoal (3 subgoals):\n 1. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "ultimately"], ["proof (chain)\npicking this:\n  dom (netmap s1) \\<inter> dom (netmap s2) = {}\n  i \\<in> net_ips s2", "have \"i\\<notin>dom(netmap s1)\""], ["proof (prove)\nusing this:\n  dom (netmap s1) \\<inter> dom (netmap s2) = {}\n  i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. i \\<notin> dom (netmap s1)", "by (auto simp add: net_ips_is_dom_netmap)"], ["proof (state)\nthis:\n  i \\<notin> dom (netmap s1)\n\ngoal (3 subgoals):\n 1. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "from \\<open>wf_net_tree p2\\<close> sr2 tr2"], ["proof (chain)\npicking this:\n  wf_net_tree p2\n  s2 \\<in> reachable (pnet np p2) TT\n  (s2, i:deliver(d), s2') \\<in> automaton.trans (pnet np p2)", "have *: \"\\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s2' j = netmap s2 j\"\n                                     and \"net_ip_action np (i:deliver(d)) i p2 s2 s2'\""], ["proof (prove)\nusing this:\n  wf_net_tree p2\n  s2 \\<in> reachable (pnet np p2) TT\n  (s2, i:deliver(d), s2') \\<in> automaton.trans (pnet np p2)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<noteq> i \\<longrightarrow> netmap s2' j = netmap s2 j &&&\n    net_ip_action np (i:deliver(d)) i p2 s2 s2'", "by (auto dest!: IH2)"], ["proof (state)\nthis:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s2' j = netmap s2 j\n  net_ip_action np (i:deliver(d)) i p2 s2 s2'\n\ngoal (3 subgoals):\n 1. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "from subs subs' tr2 this(2) \\<open>i\\<notin>dom(netmap s1)\\<close>"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1 s2'\n  (s2, i:deliver(d), s2') \\<in> automaton.trans (pnet np p2)\n  net_ip_action np (i:deliver(d)) i p2 s2 s2'\n  i \\<notin> dom (netmap s1)", "have \"net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'\""], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1 s2'\n  (s2, i:deliver(d), s2') \\<in> automaton.trans (pnet np p2)\n  net_ip_action np (i:deliver(d)) i p2 s2 s2'\n  i \\<notin> dom (netmap s1)\n\ngoal (1 subgoal):\n 1. net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'", "by (simp add: net_ips_is_dom_netmap)"], ["proof (state)\nthis:\n  net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'\n\ngoal (3 subgoals):\n 1. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "moreover"], ["proof (state)\nthis:\n  net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'\n\ngoal (3 subgoals):\n 1. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "have \"\\<forall>j. j \\<noteq> i \\<longrightarrow> (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<noteq> i \\<longrightarrow>\n       (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<noteq> i \\<Longrightarrow>\n       (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<noteq> i \\<Longrightarrow>\n       (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j", "assume \"j \\<noteq> i\""], ["proof (state)\nthis:\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<noteq> i \\<Longrightarrow>\n       (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j", "with *"], ["proof (chain)\npicking this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s2' j = netmap s2 j\n  j \\<noteq> i", "have \"netmap s2' j = netmap s2 j\""], ["proof (prove)\nusing this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s2' j = netmap s2 j\n  j \\<noteq> i\n\ngoal (1 subgoal):\n 1. netmap s2' j = netmap s2 j", "by simp"], ["proof (state)\nthis:\n  netmap s2' j = netmap s2 j\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<noteq> i \\<Longrightarrow>\n       (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j", "thus \"(netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j\""], ["proof (prove)\nusing this:\n  netmap s2' j = netmap s2 j\n\ngoal (1 subgoal):\n 1. (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j", "by (metis (hide_lams, mono_tags) domD map_add_Some_iff map_add_dom_app_simps(3))"], ["proof (state)\nthis:\n  (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j\n\ngoal (3 subgoals):\n 1. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s t';\n        (t, i:deliver(d), t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 3. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "ultimately"], ["proof (chain)\npicking this:\n  net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j", "show ?thesis"], ["proof (prove)\nusing this:\n  net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j\n\ngoal (1 subgoal):\n 1. (\\<forall>j.\n        j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n    net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'", "using \\<open>i\\<in>net_ips s2\\<close> subs subs'"], ["proof (prove)\nusing this:\n  net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     (netmap s1 ++ netmap s2') j = (netmap s1 ++ netmap s2) j\n  i \\<in> net_ips s2\n  s = SubnetS s1 s2\n  s' = SubnetS s1 s2'\n\ngoal (1 subgoal):\n 1. (\\<forall>j.\n        j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n    net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'", "by auto"], ["proof (state)\nthis:\n  (\\<forall>j.\n      j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n  net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'\n\ngoal (2 subgoals):\n 1. \\<And>s s' t.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s' t;\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np p1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'\n 2. \\<And>t t' s.\n       \\<lbrakk>s = SubnetS s t; i:deliver(d) = \\<tau>; s' = SubnetS s t';\n        (t, \\<tau>, t') \\<in> automaton.trans (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>j.\n                             j \\<noteq> i \\<longrightarrow>\n                             netmap s' j = netmap s j) \\<and>\n                         net_ip_action np (i:deliver(d)) i\n                          (p1 \\<parallel> p2) s s'", "qed simp_all"], ["proof (state)\nthis:\n  (\\<forall>j.\n      j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j) \\<and>\n  net_ip_action np (i:deliver(d)) i (p1 \\<parallel> p2) s s'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}