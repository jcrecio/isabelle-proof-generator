{"file_name": "/home/qj213/afp-2021-10-22/thys/AWN/OPnet_Lifting.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AWN", "problem_names": ["lemma oreachable_par_subnet_induct [consumes, case_names init other local]:\n  assumes \"(\\<sigma>, SubnetS s t) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\"\n      and init: \"\\<And>\\<sigma> s t. (\\<sigma>, SubnetS s t) \\<in> init (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow> P \\<sigma> s t\"\n      and other: \"\\<And>\\<sigma> s t \\<sigma>'. \\<lbrakk> (\\<sigma>, SubnetS s t) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n                                U \\<sigma> \\<sigma>'; P \\<sigma> s t \\<rbrakk> \\<Longrightarrow> P \\<sigma>' s t\"\n      and local: \"\\<And>\\<sigma> s t \\<sigma>' s' t' a. \\<lbrakk> (\\<sigma>, SubnetS s t) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n                    ((\\<sigma>, SubnetS s t), a, (\\<sigma>', SubnetS s' t')) \\<in> trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n                    S \\<sigma> \\<sigma>' a; P \\<sigma> s t \\<rbrakk> \\<Longrightarrow> P \\<sigma>' s' t'\"\n    shows \"P \\<sigma> s t\"", "lemma other_net_tree_ips_par_left:\n  assumes \"other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma> \\<sigma>'\"\n      and \"\\<And>\\<xi>. U \\<xi> \\<xi>\"\n    shows \"other U (net_tree_ips p\\<^sub>1) \\<sigma> \\<sigma>'\"", "lemma other_net_tree_ips_par_right:\n  assumes \"other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma> \\<sigma>'\"\n      and \"\\<And>\\<xi>. U \\<xi> \\<xi>\"\n    shows \"other U (net_tree_ips p\\<^sub>2) \\<sigma> \\<sigma>'\"", "lemma ostep_arrive_invariantD [elim]:\n  assumes \"p \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, U \\<rightarrow>) P\"\n      and \"(\\<sigma>, s) \\<in> oreachable p (otherwith S IPS (oarrivemsg I)) U\"\n      and \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans p\"\n      and \"oarrivemsg I \\<sigma> a\"\n    shows \"P ((\\<sigma>, s), a, (\\<sigma>', s'))\"", "lemma opnet_sync_action_subnet_oreachable:\n  assumes \"(\\<sigma>, SubnetS s t) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                                         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\"\n          (is \"_ \\<in> oreachable _ (?S (p\\<^sub>1 \\<parallel> p\\<^sub>2)) (?U (p\\<^sub>1 \\<parallel> p\\<^sub>2))\")\n\n      and \"\\<And>\\<xi>. U \\<xi> \\<xi>\"\n\n      and act1: \"opnet onp p\\<^sub>1 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U (net_tree_ips p\\<^sub>1) \\<rightarrow>)\n                   globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). castmsg (I \\<sigma>) a\n                                          \\<and> (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                                                 ((\\<forall>i\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> i) (\\<sigma>' i))\n                                               \\<and> (\\<forall>i. i\\<notin>net_tree_ips p\\<^sub>1 \\<longrightarrow> \\<sigma>' i = \\<sigma> i))))\"\n\n      and act2: \"opnet onp p\\<^sub>2 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U (net_tree_ips p\\<^sub>2) \\<rightarrow>)\n                   globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). castmsg (I \\<sigma>) a\n                                          \\<and> (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                                                 ((\\<forall>i\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> i) (\\<sigma>' i))\n                                               \\<and> (\\<forall>i. i\\<notin>net_tree_ips p\\<^sub>2 \\<longrightarrow> \\<sigma>' i = \\<sigma> i))))\"\n\n    shows \"(\\<sigma>, s) \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) (other U (net_tree_ips p\\<^sub>1))\n           \\<and> (\\<sigma>, t) \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) (other U (net_tree_ips p\\<^sub>2))\n           \\<and> net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\"", "lemma subnet_oreachable_true_true:\n  assumes \"(\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\"\n    shows \"(\\<sigma>, s\\<^sub>1) \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\"\n          \"(\\<sigma>, s\\<^sub>2) \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\"\n          (is \"_ \\<in> ?oreachable p\\<^sub>2\")", "lemma lift_opnet_sync_action:\n  assumes \"\\<And>\\<xi>. U \\<xi> \\<xi>\"\n      and act1: \"\\<And>i R. \\<langle>i : onp i : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U {i} \\<rightarrow>)\n                      globala (\\<lambda>(\\<sigma>, a, _). castmsg (I \\<sigma>) a)\"\n      and act2: \"\\<And>i R. \\<langle>i : onp i : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U {i} \\<rightarrow>)\n                      globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). (a \\<noteq> \\<tau> \\<and> (\\<forall>d. a \\<noteq> i:deliver(d)) \\<longrightarrow> S (\\<sigma> i) (\\<sigma>' i)))\"\n      and act3: \"\\<And>i R. \\<langle>i : onp i : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U {i} \\<rightarrow>)\n                      globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). (a = \\<tau> \\<or> (\\<exists>d. a = i:deliver(d)) \\<longrightarrow> U (\\<sigma> i) (\\<sigma>' i)))\"\n  shows \"opnet onp p \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U (net_tree_ips p) \\<rightarrow>)\n                       globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). castmsg (I \\<sigma>) a\n                                              \\<and> (a \\<noteq> \\<tau> \\<and> (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                                                     (\\<forall>i\\<in>net_tree_ips p. S (\\<sigma> i) (\\<sigma>' i)))\n                                              \\<and> (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                                                     ((\\<forall>i\\<in>net_tree_ips p. U (\\<sigma> i) (\\<sigma>' i))\n                                                   \\<and> (\\<forall>i. i\\<notin>net_tree_ips p \\<longrightarrow> \\<sigma>' i = \\<sigma> i))))\"\n    (is \"opnet onp p \\<Turnstile>\\<^sub>A (?I, ?U p \\<rightarrow>) ?inv (net_tree_ips p)\")", "theorem subnet_oreachable:\n  assumes \"(\\<sigma>, SubnetS s t) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                                (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) (oarrivemsg I))\n                                (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\"\n          (is \"_ \\<in> oreachable _ (?S (p\\<^sub>1 \\<parallel> p\\<^sub>2)) (?U (p\\<^sub>1 \\<parallel> p\\<^sub>2))\")\n\n      and \"\\<And>\\<xi>. S \\<xi> \\<xi>\"\n      and \"\\<And>\\<xi>. U \\<xi> \\<xi>\"\n\n      and node1: \"\\<And>i R. \\<langle>i : onp i : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U {i} \\<rightarrow>)\n                      globala (\\<lambda>(\\<sigma>, a, _). castmsg (I \\<sigma>) a)\"\n      and node2: \"\\<And>i R. \\<langle>i : onp i : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U {i} \\<rightarrow>)\n                      globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). (a \\<noteq> \\<tau> \\<and> (\\<forall>d. a \\<noteq> i:deliver(d)) \\<longrightarrow> S (\\<sigma> i) (\\<sigma>' i)))\"\n      and node3: \"\\<And>i R. \\<langle>i : onp i : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U {i} \\<rightarrow>)\n                      globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). (a = \\<tau> \\<or> (\\<exists>d. a = i:deliver(d)) \\<longrightarrow> U (\\<sigma> i) (\\<sigma>' i)))\"\n\n    shows \"(\\<sigma>, s) \\<in> oreachable (opnet onp p\\<^sub>1)\n                               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n                               (other U (net_tree_ips p\\<^sub>1))\n           \\<and> (\\<sigma>, t) \\<in> oreachable (opnet onp p\\<^sub>2)\n                                  (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n                                  (other U (net_tree_ips p\\<^sub>2))\n           \\<and> net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\"", "lemmas subnet_oreachable1 [dest] = subnet_oreachable [THEN conjunct1, rotated 1]", "lemmas subnet_oreachable2 [dest] = subnet_oreachable [THEN conjunct2, THEN conjunct1, rotated 1]", "lemmas subnet_oreachable_disjoint [dest] = subnet_oreachable\n                                                    [THEN conjunct2, THEN conjunct2, rotated 1]"], "translations": [["", "lemma oreachable_par_subnet_induct [consumes, case_names init other local]:\n  assumes \"(\\<sigma>, SubnetS s t) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\"\n      and init: \"\\<And>\\<sigma> s t. (\\<sigma>, SubnetS s t) \\<in> init (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow> P \\<sigma> s t\"\n      and other: \"\\<And>\\<sigma> s t \\<sigma>'. \\<lbrakk> (\\<sigma>, SubnetS s t) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n                                U \\<sigma> \\<sigma>'; P \\<sigma> s t \\<rbrakk> \\<Longrightarrow> P \\<sigma>' s t\"\n      and local: \"\\<And>\\<sigma> s t \\<sigma>' s' t' a. \\<lbrakk> (\\<sigma>, SubnetS s t) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n                    ((\\<sigma>, SubnetS s t), a, (\\<sigma>', SubnetS s' t')) \\<in> trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n                    S \\<sigma> \\<sigma>' a; P \\<sigma> s t \\<rbrakk> \\<Longrightarrow> P \\<sigma>' s' t'\"\n    shows \"P \\<sigma> s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sigma> s t", "using assms(1)"], ["proof (prove)\nusing this:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\n\ngoal (1 subgoal):\n 1. P \\<sigma> s t", "proof (induction \"(\\<sigma>, SubnetS s t)\" arbitrary: s t \\<sigma>)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s t \\<sigma>.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       P \\<sigma> s t\n 2. \\<And>s a sa t \\<sigma>.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        (s, a, \\<sigma>, SubnetS sa t)\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        S (fst s) (fst (\\<sigma>, SubnetS sa t)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> sa t\n 3. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "fix s t \\<sigma>"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s t \\<sigma>.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       P \\<sigma> s t\n 2. \\<And>s a sa t \\<sigma>.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        (s, a, \\<sigma>, SubnetS sa t)\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        S (fst s) (fst (\\<sigma>, SubnetS sa t)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> sa t\n 3. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "assume \"(\\<sigma>, SubnetS s t) \\<in> init (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\""], ["proof (state)\nthis:\n  (\\<sigma>, SubnetS s t)\n  \\<in> init (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n\ngoal (3 subgoals):\n 1. \\<And>s t \\<sigma>.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       P \\<sigma> s t\n 2. \\<And>s a sa t \\<sigma>.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        (s, a, \\<sigma>, SubnetS sa t)\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        S (fst s) (fst (\\<sigma>, SubnetS sa t)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> sa t\n 3. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "with init"], ["proof (chain)\npicking this:\n  (?\\<sigma>, SubnetS ?s ?t)\n  \\<in> init (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n  P ?\\<sigma> ?s ?t\n  (\\<sigma>, SubnetS s t)\n  \\<in> init (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))", "show \"P \\<sigma> s t\""], ["proof (prove)\nusing this:\n  (?\\<sigma>, SubnetS ?s ?t)\n  \\<in> init (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n  P ?\\<sigma> ?s ?t\n  (\\<sigma>, SubnetS s t)\n  \\<in> init (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. P \\<sigma> s t", "."], ["proof (state)\nthis:\n  P \\<sigma> s t\n\ngoal (2 subgoals):\n 1. \\<And>s a sa t \\<sigma>.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        (s, a, \\<sigma>, SubnetS sa t)\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        S (fst s) (fst (\\<sigma>, SubnetS sa t)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> sa t\n 2. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s a sa t \\<sigma>.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        (s, a, \\<sigma>, SubnetS sa t)\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        S (fst s) (fst (\\<sigma>, SubnetS sa t)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> sa t\n 2. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "fix st a s' t' \\<sigma>'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s a sa t \\<sigma>.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        (s, a, \\<sigma>, SubnetS sa t)\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        S (fst s) (fst (\\<sigma>, SubnetS sa t)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> sa t\n 2. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "assume \"st \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\"\n       and tr: \"(st, a, (\\<sigma>', SubnetS s' t')) \\<in> trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\"\n       and \"S (fst st) (fst (\\<sigma>', SubnetS s' t')) a\"\n       and IH: \"\\<And>s t \\<sigma>. st = (\\<sigma>, SubnetS s t) \\<Longrightarrow> P \\<sigma> s t\""], ["proof (state)\nthis:\n  st \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\n  (st, a, \\<sigma>', SubnetS s' t')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n  S (fst st) (fst (\\<sigma>', SubnetS s' t')) a\n  st = (?\\<sigma>, SubnetS ?s ?t) \\<Longrightarrow> P ?\\<sigma> ?s ?t\n\ngoal (2 subgoals):\n 1. \\<And>s a sa t \\<sigma>.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        (s, a, \\<sigma>, SubnetS sa t)\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        S (fst s) (fst (\\<sigma>, SubnetS sa t)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> sa t\n 2. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "from this(1)"], ["proof (chain)\npicking this:\n  st \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U", "obtain s t \\<sigma> where \"st = (\\<sigma>, SubnetS s t)\"\n                                and \"(\\<sigma>, SubnetS s t) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\""], ["proof (prove)\nusing this:\n  st \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> s t.\n        \\<lbrakk>st = (\\<sigma>, SubnetS s t);\n         (\\<sigma>, SubnetS s t)\n         \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S\n                U\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis net_par_oreachable_is_subnet prod.collapse)"], ["proof (state)\nthis:\n  st = (\\<sigma>, SubnetS s t)\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\n\ngoal (2 subgoals):\n 1. \\<And>s a sa t \\<sigma>.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        (s, a, \\<sigma>, SubnetS sa t)\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        S (fst s) (fst (\\<sigma>, SubnetS sa t)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> sa t\n 2. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "note this(2)"], ["proof (state)\nthis:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\n\ngoal (2 subgoals):\n 1. \\<And>s a sa t \\<sigma>.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        (s, a, \\<sigma>, SubnetS sa t)\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        S (fst s) (fst (\\<sigma>, SubnetS sa t)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> sa t\n 2. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\n\ngoal (2 subgoals):\n 1. \\<And>s a sa t \\<sigma>.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        (s, a, \\<sigma>, SubnetS sa t)\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        S (fst s) (fst (\\<sigma>, SubnetS sa t)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> sa t\n 2. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "from tr and \\<open>st = (\\<sigma>, SubnetS s t)\\<close>"], ["proof (chain)\npicking this:\n  (st, a, \\<sigma>', SubnetS s' t')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n  st = (\\<sigma>, SubnetS s t)", "have \"((\\<sigma>, SubnetS s t), a, (\\<sigma>', SubnetS s' t')) \\<in> trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\""], ["proof (prove)\nusing this:\n  (st, a, \\<sigma>', SubnetS s' t')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n  st = (\\<sigma>, SubnetS s t)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n    \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n\ngoal (2 subgoals):\n 1. \\<And>s a sa t \\<sigma>.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        (s, a, \\<sigma>, SubnetS sa t)\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        S (fst s) (fst (\\<sigma>, SubnetS sa t)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> sa t\n 2. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "moreover"], ["proof (state)\nthis:\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n\ngoal (2 subgoals):\n 1. \\<And>s a sa t \\<sigma>.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        (s, a, \\<sigma>, SubnetS sa t)\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        S (fst s) (fst (\\<sigma>, SubnetS sa t)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> sa t\n 2. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "from \\<open>S (fst st) (fst (\\<sigma>', SubnetS s' t')) a\\<close> and \\<open>st = (\\<sigma>, SubnetS s t)\\<close>"], ["proof (chain)\npicking this:\n  S (fst st) (fst (\\<sigma>', SubnetS s' t')) a\n  st = (\\<sigma>, SubnetS s t)", "have \"S \\<sigma> \\<sigma>' a\""], ["proof (prove)\nusing this:\n  S (fst st) (fst (\\<sigma>', SubnetS s' t')) a\n  st = (\\<sigma>, SubnetS s t)\n\ngoal (1 subgoal):\n 1. S \\<sigma> \\<sigma>' a", "by simp"], ["proof (state)\nthis:\n  S \\<sigma> \\<sigma>' a\n\ngoal (2 subgoals):\n 1. \\<And>s a sa t \\<sigma>.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        (s, a, \\<sigma>, SubnetS sa t)\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        S (fst s) (fst (\\<sigma>, SubnetS sa t)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> sa t\n 2. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "moreover"], ["proof (state)\nthis:\n  S \\<sigma> \\<sigma>' a\n\ngoal (2 subgoals):\n 1. \\<And>s a sa t \\<sigma>.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        (s, a, \\<sigma>, SubnetS sa t)\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        S (fst s) (fst (\\<sigma>, SubnetS sa t)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> sa t\n 2. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "from IH and \\<open>st = (\\<sigma>, SubnetS s t)\\<close>"], ["proof (chain)\npicking this:\n  st = (?\\<sigma>, SubnetS ?s ?t) \\<Longrightarrow> P ?\\<sigma> ?s ?t\n  st = (\\<sigma>, SubnetS s t)", "have \"P \\<sigma> s t\""], ["proof (prove)\nusing this:\n  st = (?\\<sigma>, SubnetS ?s ?t) \\<Longrightarrow> P ?\\<sigma> ?s ?t\n  st = (\\<sigma>, SubnetS s t)\n\ngoal (1 subgoal):\n 1. P \\<sigma> s t", "."], ["proof (state)\nthis:\n  P \\<sigma> s t\n\ngoal (2 subgoals):\n 1. \\<And>s a sa t \\<sigma>.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        (s, a, \\<sigma>, SubnetS sa t)\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        S (fst s) (fst (\\<sigma>, SubnetS sa t)) a\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma> sa t\n 2. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n  S \\<sigma> \\<sigma>' a\n  P \\<sigma> s t", "show \"P \\<sigma>' s' t'\""], ["proof (prove)\nusing this:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n  S \\<sigma> \\<sigma>' a\n  P \\<sigma> s t\n\ngoal (1 subgoal):\n 1. P \\<sigma>' s' t'", "by (rule local)"], ["proof (state)\nthis:\n  P \\<sigma>' s' t'\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "fix st \\<sigma>' s t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "assume \"st \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\"\n       and \"U (fst st) \\<sigma>'\"\n       and \"snd st = SubnetS s t\"\n       and IH: \"\\<And>s t \\<sigma>. st = (\\<sigma>, SubnetS s t) \\<Longrightarrow> P \\<sigma> s t\""], ["proof (state)\nthis:\n  st \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\n  U (fst st) \\<sigma>'\n  snd st = SubnetS s t\n  st = (?\\<sigma>, SubnetS ?s ?t) \\<Longrightarrow> P ?\\<sigma> ?s ?t\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "from this(1,3)"], ["proof (chain)\npicking this:\n  st \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\n  snd st = SubnetS s t", "obtain \\<sigma> where \"st = (\\<sigma>, SubnetS s t)\"\n                              and \"(\\<sigma>, SubnetS s t) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\""], ["proof (prove)\nusing this:\n  st \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\n  snd st = SubnetS s t\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>.\n        \\<lbrakk>st = (\\<sigma>, SubnetS s t);\n         (\\<sigma>, SubnetS s t)\n         \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S\n                U\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis prod.collapse)"], ["proof (state)\nthis:\n  st = (\\<sigma>, SubnetS s t)\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "note this(2)"], ["proof (state)\nthis:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "from \\<open>U (fst st) \\<sigma>'\\<close> and \\<open>st = (\\<sigma>, SubnetS s t)\\<close>"], ["proof (chain)\npicking this:\n  U (fst st) \\<sigma>'\n  st = (\\<sigma>, SubnetS s t)", "have \"U \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  U (fst st) \\<sigma>'\n  st = (\\<sigma>, SubnetS s t)\n\ngoal (1 subgoal):\n 1. U \\<sigma> \\<sigma>'", "by simp"], ["proof (state)\nthis:\n  U \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "moreover"], ["proof (state)\nthis:\n  U \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "from IH and \\<open>st = (\\<sigma>, SubnetS s t)\\<close>"], ["proof (chain)\npicking this:\n  st = (?\\<sigma>, SubnetS ?s ?t) \\<Longrightarrow> P ?\\<sigma> ?s ?t\n  st = (\\<sigma>, SubnetS s t)", "have \"P \\<sigma> s t\""], ["proof (prove)\nusing this:\n  st = (?\\<sigma>, SubnetS ?s ?t) \\<Longrightarrow> P ?\\<sigma> ?s ?t\n  st = (\\<sigma>, SubnetS s t)\n\ngoal (1 subgoal):\n 1. P \\<sigma> s t", "."], ["proof (state)\nthis:\n  P \\<sigma> s t\n\ngoal (1 subgoal):\n 1. \\<And>s \\<sigma>' sa t.\n       \\<lbrakk>s \\<in> oreachable\n                         (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U;\n        \\<And>sa t \\<sigma>.\n           s = (\\<sigma>, SubnetS sa t) \\<Longrightarrow> P \\<sigma> sa t;\n        U (fst s) \\<sigma>'; snd s = SubnetS sa t\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>' sa t", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\n  U \\<sigma> \\<sigma>'\n  P \\<sigma> s t", "show \"P \\<sigma>' s t\""], ["proof (prove)\nusing this:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) S U\n  U \\<sigma> \\<sigma>'\n  P \\<sigma> s t\n\ngoal (1 subgoal):\n 1. P \\<sigma>' s t", "by (rule other)"], ["proof (state)\nthis:\n  P \\<sigma>' s t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma other_net_tree_ips_par_left:\n  assumes \"other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma> \\<sigma>'\"\n      and \"\\<And>\\<xi>. U \\<xi> \\<xi>\"\n    shows \"other U (net_tree_ips p\\<^sub>1) \\<sigma> \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. other U (net_tree_ips p\\<^sub>1) \\<sigma> \\<sigma>'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. other U (net_tree_ips p\\<^sub>1) \\<sigma> \\<sigma>'", "from assms(1)"], ["proof (chain)\npicking this:\n  other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n   \\<sigma>'", "obtain ineq: \"\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2). \\<sigma>' i = \\<sigma> i\"\n                     and outU: \"\\<forall>j. j\\<notin>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow> U (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n   \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                 \\<sigma>' i = \\<sigma> i;\n      \\<forall>j.\n         j \\<notin> net_tree_ips\n                     (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n         U (\\<sigma> j) (\\<sigma>' j)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n     \\<sigma>' i = \\<sigma> i\n  \\<forall>j.\n     j \\<notin> net_tree_ips\n                 (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n     U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. other U (net_tree_ips p\\<^sub>1) \\<sigma> \\<sigma>'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. other U (net_tree_ips p\\<^sub>1) \\<sigma> \\<sigma>'", "proof (rule otherI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i \\<in> net_tree_ips p\\<^sub>1 \\<Longrightarrow>\n       \\<sigma>' i = \\<sigma> i\n 2. \\<And>j.\n       j \\<notin> net_tree_ips p\\<^sub>1 \\<Longrightarrow>\n       U (\\<sigma> j) (\\<sigma>' j)", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i \\<in> net_tree_ips p\\<^sub>1 \\<Longrightarrow>\n       \\<sigma>' i = \\<sigma> i\n 2. \\<And>j.\n       j \\<notin> net_tree_ips p\\<^sub>1 \\<Longrightarrow>\n       U (\\<sigma> j) (\\<sigma>' j)", "assume \"i\\<in>net_tree_ips p\\<^sub>1\""], ["proof (state)\nthis:\n  i \\<in> net_tree_ips p\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i \\<in> net_tree_ips p\\<^sub>1 \\<Longrightarrow>\n       \\<sigma>' i = \\<sigma> i\n 2. \\<And>j.\n       j \\<notin> net_tree_ips p\\<^sub>1 \\<Longrightarrow>\n       U (\\<sigma> j) (\\<sigma>' j)", "hence \"i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  i \\<in> net_tree_ips p\\<^sub>1\n\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)", "by simp"], ["proof (state)\nthis:\n  i \\<in> net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i \\<in> net_tree_ips p\\<^sub>1 \\<Longrightarrow>\n       \\<sigma>' i = \\<sigma> i\n 2. \\<And>j.\n       j \\<notin> net_tree_ips p\\<^sub>1 \\<Longrightarrow>\n       U (\\<sigma> j) (\\<sigma>' j)", "with ineq"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n     \\<sigma>' i = \\<sigma> i\n  i \\<in> net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)", "show \"\\<sigma>' i = \\<sigma> i\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n     \\<sigma>' i = \\<sigma> i\n  i \\<in> net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<sigma>' i = \\<sigma> i", ".."], ["proof (state)\nthis:\n  \\<sigma>' i = \\<sigma> i\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<notin> net_tree_ips p\\<^sub>1 \\<Longrightarrow>\n       U (\\<sigma> j) (\\<sigma>' j)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<notin> net_tree_ips p\\<^sub>1 \\<Longrightarrow>\n       U (\\<sigma> j) (\\<sigma>' j)", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<notin> net_tree_ips p\\<^sub>1 \\<Longrightarrow>\n       U (\\<sigma> j) (\\<sigma>' j)", "assume \"j\\<notin>net_tree_ips p\\<^sub>1\""], ["proof (state)\nthis:\n  j \\<notin> net_tree_ips p\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<notin> net_tree_ips p\\<^sub>1 \\<Longrightarrow>\n       U (\\<sigma> j) (\\<sigma>' j)", "show \"U (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. U (\\<sigma> j) (\\<sigma>' j)", "proof (cases \"j\\<in>net_tree_ips p\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j \\<in> net_tree_ips p\\<^sub>2 \\<Longrightarrow>\n    U (\\<sigma> j) (\\<sigma>' j)\n 2. j \\<notin> net_tree_ips p\\<^sub>2 \\<Longrightarrow>\n    U (\\<sigma> j) (\\<sigma>' j)", "assume \"j\\<in>net_tree_ips p\\<^sub>2\""], ["proof (state)\nthis:\n  j \\<in> net_tree_ips p\\<^sub>2\n\ngoal (2 subgoals):\n 1. j \\<in> net_tree_ips p\\<^sub>2 \\<Longrightarrow>\n    U (\\<sigma> j) (\\<sigma>' j)\n 2. j \\<notin> net_tree_ips p\\<^sub>2 \\<Longrightarrow>\n    U (\\<sigma> j) (\\<sigma>' j)", "hence \"j\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  j \\<in> net_tree_ips p\\<^sub>2\n\ngoal (1 subgoal):\n 1. j \\<in> net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)", "by simp"], ["proof (state)\nthis:\n  j \\<in> net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)\n\ngoal (2 subgoals):\n 1. j \\<in> net_tree_ips p\\<^sub>2 \\<Longrightarrow>\n    U (\\<sigma> j) (\\<sigma>' j)\n 2. j \\<notin> net_tree_ips p\\<^sub>2 \\<Longrightarrow>\n    U (\\<sigma> j) (\\<sigma>' j)", "with ineq"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n     \\<sigma>' i = \\<sigma> i\n  j \\<in> net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)", "have \"\\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n     \\<sigma>' i = \\<sigma> i\n  j \\<in> net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<sigma>' j = \\<sigma> j", ".."], ["proof (state)\nthis:\n  \\<sigma>' j = \\<sigma> j\n\ngoal (2 subgoals):\n 1. j \\<in> net_tree_ips p\\<^sub>2 \\<Longrightarrow>\n    U (\\<sigma> j) (\\<sigma>' j)\n 2. j \\<notin> net_tree_ips p\\<^sub>2 \\<Longrightarrow>\n    U (\\<sigma> j) (\\<sigma>' j)", "thus \"U (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. U (\\<sigma> j) (\\<sigma>' j)", "by simp (rule \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>)"], ["proof (state)\nthis:\n  U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. j \\<notin> net_tree_ips p\\<^sub>2 \\<Longrightarrow>\n    U (\\<sigma> j) (\\<sigma>' j)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<notin> net_tree_ips p\\<^sub>2 \\<Longrightarrow>\n    U (\\<sigma> j) (\\<sigma>' j)", "assume \"j\\<notin>net_tree_ips p\\<^sub>2\""], ["proof (state)\nthis:\n  j \\<notin> net_tree_ips p\\<^sub>2\n\ngoal (1 subgoal):\n 1. j \\<notin> net_tree_ips p\\<^sub>2 \\<Longrightarrow>\n    U (\\<sigma> j) (\\<sigma>' j)", "with \\<open>j\\<notin>net_tree_ips p\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  j \\<notin> net_tree_ips p\\<^sub>1\n  j \\<notin> net_tree_ips p\\<^sub>2", "have \"j\\<notin>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  j \\<notin> net_tree_ips p\\<^sub>1\n  j \\<notin> net_tree_ips p\\<^sub>2\n\ngoal (1 subgoal):\n 1. j \\<notin> net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)", "by simp"], ["proof (state)\nthis:\n  j \\<notin> net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. j \\<notin> net_tree_ips p\\<^sub>2 \\<Longrightarrow>\n    U (\\<sigma> j) (\\<sigma>' j)", "with outU"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips\n                 (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n     U (\\<sigma> j) (\\<sigma>' j)\n  j \\<notin> net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)", "show \"U (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips\n                 (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n     U (\\<sigma> j) (\\<sigma>' j)\n  j \\<notin> net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. U (\\<sigma> j) (\\<sigma>' j)", "by simp"], ["proof (state)\nthis:\n  U (\\<sigma> j) (\\<sigma>' j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  U (\\<sigma> j) (\\<sigma>' j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  other U (net_tree_ips p\\<^sub>1) \\<sigma> \\<sigma>'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma other_net_tree_ips_par_right:\n  assumes \"other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma> \\<sigma>'\"\n      and \"\\<And>\\<xi>. U \\<xi> \\<xi>\"\n    shows \"other U (net_tree_ips p\\<^sub>2) \\<sigma> \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. other U (net_tree_ips p\\<^sub>2) \\<sigma> \\<sigma>'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. other U (net_tree_ips p\\<^sub>2) \\<sigma> \\<sigma>'", "from assms(1)"], ["proof (chain)\npicking this:\n  other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n   \\<sigma>'", "have \"other U (net_tree_ips (p\\<^sub>2 \\<parallel> p\\<^sub>1)) \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n   \\<sigma>'\n\ngoal (1 subgoal):\n 1. other U (net_tree_ips (p\\<^sub>2 \\<parallel> p\\<^sub>1)) \\<sigma>\n     \\<sigma>'", "by (subst net_tree_ips_commute)"], ["proof (state)\nthis:\n  other U (net_tree_ips (p\\<^sub>2 \\<parallel> p\\<^sub>1)) \\<sigma>\n   \\<sigma>'\n\ngoal (1 subgoal):\n 1. other U (net_tree_ips p\\<^sub>2) \\<sigma> \\<sigma>'", "thus ?thesis"], ["proof (prove)\nusing this:\n  other U (net_tree_ips (p\\<^sub>2 \\<parallel> p\\<^sub>1)) \\<sigma>\n   \\<sigma>'\n\ngoal (1 subgoal):\n 1. other U (net_tree_ips p\\<^sub>2) \\<sigma> \\<sigma>'", "using \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>"], ["proof (prove)\nusing this:\n  other U (net_tree_ips (p\\<^sub>2 \\<parallel> p\\<^sub>1)) \\<sigma>\n   \\<sigma>'\n  U ?\\<xi> ?\\<xi>\n\ngoal (1 subgoal):\n 1. other U (net_tree_ips p\\<^sub>2) \\<sigma> \\<sigma>'", "by (rule other_net_tree_ips_par_left)"], ["proof (state)\nthis:\n  other U (net_tree_ips p\\<^sub>2) \\<sigma> \\<sigma>'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ostep_arrive_invariantD [elim]:\n  assumes \"p \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, U \\<rightarrow>) P\"\n      and \"(\\<sigma>, s) \\<in> oreachable p (otherwith S IPS (oarrivemsg I)) U\"\n      and \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans p\"\n      and \"oarrivemsg I \\<sigma> a\"\n    shows \"P ((\\<sigma>, s), a, (\\<sigma>', s'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P ((\\<sigma>, s), a, \\<sigma>', s')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P ((\\<sigma>, s), a, \\<sigma>', s')", "from assms(2)"], ["proof (chain)\npicking this:\n  (\\<sigma>, s) \\<in> oreachable p (otherwith S IPS (oarrivemsg I)) U", "have \"(\\<sigma>, s) \\<in> oreachable p (\\<lambda>\\<sigma> _ a. oarrivemsg I \\<sigma> a) U\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s) \\<in> oreachable p (otherwith S IPS (oarrivemsg I)) U\n\ngoal (1 subgoal):\n 1. (\\<sigma>, s)\n    \\<in> oreachable p (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) U", "by (rule oreachable_weakenE) auto"], ["proof (state)\nthis:\n  (\\<sigma>, s)\n  \\<in> oreachable p (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) U\n\ngoal (1 subgoal):\n 1. P ((\\<sigma>, s), a, \\<sigma>', s')", "thus \"P ((\\<sigma>, s), a, (\\<sigma>', s'))\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable p (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) U\n\ngoal (1 subgoal):\n 1. P ((\\<sigma>, s), a, \\<sigma>', s')", "using assms(3-4)"], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable p (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) U\n  ((\\<sigma>, s), a, \\<sigma>', s') \\<in> automaton.trans p\n  oarrivemsg I \\<sigma> a\n\ngoal (1 subgoal):\n 1. P ((\\<sigma>, s), a, \\<sigma>', s')", "by (rule ostep_invariantD [OF assms(1)])"], ["proof (state)\nthis:\n  P ((\\<sigma>, s), a, \\<sigma>', s')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma opnet_sync_action_subnet_oreachable:\n  assumes \"(\\<sigma>, SubnetS s t) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                                         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\"\n          (is \"_ \\<in> oreachable _ (?S (p\\<^sub>1 \\<parallel> p\\<^sub>2)) (?U (p\\<^sub>1 \\<parallel> p\\<^sub>2))\")\n\n      and \"\\<And>\\<xi>. U \\<xi> \\<xi>\"\n\n      and act1: \"opnet onp p\\<^sub>1 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U (net_tree_ips p\\<^sub>1) \\<rightarrow>)\n                   globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). castmsg (I \\<sigma>) a\n                                          \\<and> (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                                                 ((\\<forall>i\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> i) (\\<sigma>' i))\n                                               \\<and> (\\<forall>i. i\\<notin>net_tree_ips p\\<^sub>1 \\<longrightarrow> \\<sigma>' i = \\<sigma> i))))\"\n\n      and act2: \"opnet onp p\\<^sub>2 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U (net_tree_ips p\\<^sub>2) \\<rightarrow>)\n                   globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). castmsg (I \\<sigma>) a\n                                          \\<and> (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                                                 ((\\<forall>i\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> i) (\\<sigma>' i))\n                                               \\<and> (\\<forall>i. i\\<notin>net_tree_ips p\\<^sub>2 \\<longrightarrow> \\<sigma>' i = \\<sigma> i))))\"\n\n    shows \"(\\<sigma>, s) \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) (other U (net_tree_ips p\\<^sub>1))\n           \\<and> (\\<sigma>, t) \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) (other U (net_tree_ips p\\<^sub>2))\n           \\<and> net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>, s)\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>, t)\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n           (other U (net_tree_ips p\\<^sub>2)) \\<and>\n    net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "using assms(1)"], ["proof (prove)\nusing this:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. (\\<sigma>, s)\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>, t)\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n           (other U (net_tree_ips p\\<^sub>2)) \\<and>\n    net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "proof (induction rule: oreachable_par_subnet_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> s t.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       (\\<sigma>, s)\n       \\<in> oreachable (opnet onp p\\<^sub>1)\n              (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n              (other U (net_tree_ips p\\<^sub>1)) \\<and>\n       (\\<sigma>, t)\n       \\<in> oreachable (opnet onp p\\<^sub>2)\n              (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n              (other U (net_tree_ips p\\<^sub>2)) \\<and>\n       net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n 2. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 3. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "case (init \\<sigma> s t)"], ["proof (state)\nthis:\n  (\\<sigma>, SubnetS s t)\n  \\<in> init (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> s t.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       (\\<sigma>, s)\n       \\<in> oreachable (opnet onp p\\<^sub>1)\n              (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n              (other U (net_tree_ips p\\<^sub>1)) \\<and>\n       (\\<sigma>, t)\n       \\<in> oreachable (opnet onp p\\<^sub>2)\n              (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n              (other U (net_tree_ips p\\<^sub>2)) \\<and>\n       net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n 2. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 3. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "hence sinit: \"(\\<sigma>, s) \\<in> init (opnet onp p\\<^sub>1)\"\n      and tinit: \"(\\<sigma>, t) \\<in> init (opnet onp p\\<^sub>2)\"\n      and \"net_ips s \\<inter> net_ips t = {}\""], ["proof (prove)\nusing this:\n  (\\<sigma>, SubnetS s t)\n  \\<in> init (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>, s) \\<in> init (opnet onp p\\<^sub>1) &&&\n    (\\<sigma>, t) \\<in> init (opnet onp p\\<^sub>2) &&&\n    net_ips s \\<inter> net_ips t = {}", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>, s) \\<in> init (opnet onp p\\<^sub>1)\n  (\\<sigma>, t) \\<in> init (opnet onp p\\<^sub>2)\n  net_ips s \\<inter> net_ips t = {}\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> s t.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       (\\<sigma>, s)\n       \\<in> oreachable (opnet onp p\\<^sub>1)\n              (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n              (other U (net_tree_ips p\\<^sub>1)) \\<and>\n       (\\<sigma>, t)\n       \\<in> oreachable (opnet onp p\\<^sub>2)\n              (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n              (other U (net_tree_ips p\\<^sub>2)) \\<and>\n       net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n 2. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 3. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>, s) \\<in> init (opnet onp p\\<^sub>1)\n  (\\<sigma>, t) \\<in> init (opnet onp p\\<^sub>2)\n  net_ips s \\<inter> net_ips t = {}\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> s t.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       (\\<sigma>, s)\n       \\<in> oreachable (opnet onp p\\<^sub>1)\n              (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n              (other U (net_tree_ips p\\<^sub>1)) \\<and>\n       (\\<sigma>, t)\n       \\<in> oreachable (opnet onp p\\<^sub>2)\n              (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n              (other U (net_tree_ips p\\<^sub>2)) \\<and>\n       net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n 2. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 3. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "from sinit"], ["proof (chain)\npicking this:\n  (\\<sigma>, s) \\<in> init (opnet onp p\\<^sub>1)", "have \"net_ips s = net_tree_ips p\\<^sub>1\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s) \\<in> init (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. net_ips s = net_tree_ips p\\<^sub>1", "by (rule opnet_net_ips_net_tree_ips_init)"], ["proof (state)\nthis:\n  net_ips s = net_tree_ips p\\<^sub>1\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> s t.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       (\\<sigma>, s)\n       \\<in> oreachable (opnet onp p\\<^sub>1)\n              (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n              (other U (net_tree_ips p\\<^sub>1)) \\<and>\n       (\\<sigma>, t)\n       \\<in> oreachable (opnet onp p\\<^sub>2)\n              (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n              (other U (net_tree_ips p\\<^sub>2)) \\<and>\n       net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n 2. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 3. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "moreover"], ["proof (state)\nthis:\n  net_ips s = net_tree_ips p\\<^sub>1\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> s t.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       (\\<sigma>, s)\n       \\<in> oreachable (opnet onp p\\<^sub>1)\n              (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n              (other U (net_tree_ips p\\<^sub>1)) \\<and>\n       (\\<sigma>, t)\n       \\<in> oreachable (opnet onp p\\<^sub>2)\n              (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n              (other U (net_tree_ips p\\<^sub>2)) \\<and>\n       net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n 2. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 3. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "from tinit"], ["proof (chain)\npicking this:\n  (\\<sigma>, t) \\<in> init (opnet onp p\\<^sub>2)", "have \"net_ips t = net_tree_ips p\\<^sub>2\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t) \\<in> init (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. net_ips t = net_tree_ips p\\<^sub>2", "by (rule opnet_net_ips_net_tree_ips_init)"], ["proof (state)\nthis:\n  net_ips t = net_tree_ips p\\<^sub>2\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> s t.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       (\\<sigma>, s)\n       \\<in> oreachable (opnet onp p\\<^sub>1)\n              (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n              (other U (net_tree_ips p\\<^sub>1)) \\<and>\n       (\\<sigma>, t)\n       \\<in> oreachable (opnet onp p\\<^sub>2)\n              (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n              (other U (net_tree_ips p\\<^sub>2)) \\<and>\n       net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n 2. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 3. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>, s) \\<in> init (opnet onp p\\<^sub>1)\n  (\\<sigma>, t) \\<in> init (opnet onp p\\<^sub>2)\n  net_ips s \\<inter> net_ips t = {}\n  net_ips s = net_tree_ips p\\<^sub>1\n  net_ips t = net_tree_ips p\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  (\\<sigma>, s) \\<in> init (opnet onp p\\<^sub>1)\n  (\\<sigma>, t) \\<in> init (opnet onp p\\<^sub>2)\n  net_ips s \\<inter> net_ips t = {}\n  net_ips s = net_tree_ips p\\<^sub>1\n  net_ips t = net_tree_ips p\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<sigma>, s)\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>, t)\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n           (other U (net_tree_ips p\\<^sub>2)) \\<and>\n    net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "by (auto elim: oreachable_init)"], ["proof (state)\nthis:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2)) \\<and>\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 2. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 2. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "case (other \\<sigma> s t \\<sigma>')"], ["proof (state)\nthis:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n  other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n   \\<sigma>'\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2)) \\<and>\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 2. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "hence \"other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma> \\<sigma>'\"\n      and IHs: \"(\\<sigma>, s) \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\"\n      and IHt: \"(\\<sigma>, t) \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\"\n      and \"net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\""], ["proof (prove)\nusing this:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n  other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n   \\<sigma>'\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2)) \\<and>\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (1 subgoal):\n 1. (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n      \\<sigma>' &&&\n     (\\<sigma>, s)\n     \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n            (other U (net_tree_ips p\\<^sub>1))) &&&\n    (\\<sigma>, t)\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2)) &&&\n    net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "by auto"], ["proof (state)\nthis:\n  other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n   \\<sigma>'\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 2. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "have \"(\\<sigma>', s) \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', s)\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>', s)\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1))", "from \\<open>?U (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<sigma> \\<sigma>'\\<close> and \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>"], ["proof (chain)\npicking this:\n  other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n   \\<sigma>'\n  U ?\\<xi> ?\\<xi>", "have \"?U p\\<^sub>1 \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n   \\<sigma>'\n  U ?\\<xi> ?\\<xi>\n\ngoal (1 subgoal):\n 1. other U (net_tree_ips p\\<^sub>1) \\<sigma> \\<sigma>'", "by (rule other_net_tree_ips_par_left)"], ["proof (state)\nthis:\n  other U (net_tree_ips p\\<^sub>1) \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s)\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1))", "with IHs"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  other U (net_tree_ips p\\<^sub>1) \\<sigma> \\<sigma>'", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  other U (net_tree_ips p\\<^sub>1) \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s)\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1))", "by - (erule(1) oreachable_other')"], ["proof (state)\nthis:\n  (\\<sigma>', s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<sigma>', s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 2. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 2. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "have \"(\\<sigma>', t) \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', t)\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>', t)\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", "from \\<open>?U (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<sigma> \\<sigma>'\\<close> and \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>"], ["proof (chain)\npicking this:\n  other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n   \\<sigma>'\n  U ?\\<xi> ?\\<xi>", "have \"?U p\\<^sub>2 \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n   \\<sigma>'\n  U ?\\<xi> ?\\<xi>\n\ngoal (1 subgoal):\n 1. other U (net_tree_ips p\\<^sub>2) \\<sigma> \\<sigma>'", "by (rule other_net_tree_ips_par_right)"], ["proof (state)\nthis:\n  other U (net_tree_ips p\\<^sub>2) \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t)\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", "with IHt"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  other U (net_tree_ips p\\<^sub>2) \\<sigma> \\<sigma>'", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  other U (net_tree_ips p\\<^sub>2) \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t)\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", "by - (erule(1) oreachable_other')"], ["proof (state)\nthis:\n  (\\<sigma>', t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<sigma>', t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 2. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))", "show ?case"], ["proof (prove)\nusing this:\n  (\\<sigma>', s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s)\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t)\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n           (other U (net_tree_ips p\\<^sub>2)) \\<and>\n    net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "using \\<open>net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>', s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s)\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t)\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n           (other U (net_tree_ips p\\<^sub>2)) \\<and>\n    net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "by simp"], ["proof (state)\nthis:\n  (\\<sigma>', s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2)) \\<and>\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "case (local \\<sigma> s t \\<sigma>' s' t' a)"], ["proof (state)\nthis:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n  oarrivemsg I \\<sigma> a\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2)) \\<and>\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "hence stor: \"(\\<sigma>, SubnetS s t) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) (?S (p\\<^sub>1 \\<parallel> p\\<^sub>2)) (?U (p\\<^sub>1 \\<parallel> p\\<^sub>2))\"\n      and tr: \"((\\<sigma>, SubnetS s t), a, (\\<sigma>', SubnetS s' t')) \\<in> trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\"\n      and \"oarrivemsg I \\<sigma> a\"\n      and sor: \"(\\<sigma>, s) \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\"\n      and tor: \"(\\<sigma>, t) \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\"\n      and \"net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\""], ["proof (prove)\nusing this:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n  oarrivemsg I \\<sigma> a\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2)) \\<and>\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, SubnetS s t)\n     \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n            (\\<lambda>a b. oarrivemsg I a)\n            (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))) &&&\n     ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n     \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) &&&\n     oarrivemsg I \\<sigma> a) &&&\n    (\\<sigma>, s)\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1)) &&&\n    (\\<sigma>, t)\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2)) &&&\n    net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n  oarrivemsg I \\<sigma> a\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "from tr"], ["proof (chain)\npicking this:\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))", "have \"((\\<sigma>, SubnetS s t), a, (\\<sigma>', SubnetS s' t'))\n                    \\<in> opnet_sos (trans (opnet onp p\\<^sub>1)) (trans (opnet onp p\\<^sub>2))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n    \\<in> opnet_sos (automaton.trans (opnet onp p\\<^sub>1))\n           (automaton.trans (opnet onp p\\<^sub>2))", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> opnet_sos (automaton.trans (opnet onp p\\<^sub>1))\n         (automaton.trans (opnet onp p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "hence \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\n         \\<and> (\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> opnet_sos (automaton.trans (opnet onp p\\<^sub>1))\n         (automaton.trans (opnet onp p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", "proof (cases)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "fix H K m H' K'"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "assume \"a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m)\"\n         and str: \"((\\<sigma>, s), H\\<not>K:arrive(m), (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\"\n         and ttr: \"((\\<sigma>, t), H'\\<not>K':arrive(m), (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m)\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "from this(1) and \\<open>oarrivemsg I \\<sigma> a\\<close>"], ["proof (chain)\npicking this:\n  a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m)\n  oarrivemsg I \\<sigma> a", "have \"I \\<sigma> m\""], ["proof (prove)\nusing this:\n  a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m)\n  oarrivemsg I \\<sigma> a\n\ngoal (1 subgoal):\n 1. I \\<sigma> m", "by simp"], ["proof (state)\nthis:\n  I \\<sigma> m\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "with sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  I \\<sigma> m", "have \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  I \\<sigma> m\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "from \\<open>I \\<sigma> m\\<close> tor ttr"], ["proof (chain)\npicking this:\n  I \\<sigma> m\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"(\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  I \\<sigma> m\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", ".."], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (8 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "fix R m H K"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "assume str: \"((\\<sigma>, s), R:*cast(m), (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\"\n         and ttr: \"((\\<sigma>, t), H\\<not>K:arrive(m), (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (8 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "from sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)", "have \"I \\<sigma> m\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. I \\<sigma> m", "by - (drule(1) ostep_invariantD [OF act1], simp_all)"], ["proof (state)\nthis:\n  I \\<sigma> m\n\ngoal (8 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "with sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  I \\<sigma> m", "have \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  I \\<sigma> m\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (8 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (8 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "from \\<open>I \\<sigma> m\\<close> tor ttr"], ["proof (chain)\npicking this:\n  I \\<sigma> m\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"(\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  I \\<sigma> m\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (8 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", ".."], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (7 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "fix R m H K"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "assume str: \"((\\<sigma>, s), H\\<not>K:arrive(m), (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\"\n         and ttr: \"((\\<sigma>, t), R:*cast(m), (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (7 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "from tor ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"I \\<sigma> m\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. I \\<sigma> m", "by - (drule(1) ostep_invariantD [OF act2], simp_all)"], ["proof (state)\nthis:\n  I \\<sigma> m\n\ngoal (7 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "with sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  I \\<sigma> m", "have \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  I \\<sigma> m\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (7 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (7 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "from \\<open>I \\<sigma> m\\<close> tor ttr"], ["proof (chain)\npicking this:\n  I \\<sigma> m\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"(\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  I \\<sigma> m\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (7 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", ".."], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "fix i i'"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "assume str: \"((\\<sigma>, s), connect(i, i'), (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\"\n         and ttr: \"((\\<sigma>, t), connect(i, i'), (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "with sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "from tor ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"(\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", ".."], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "fix i i'"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "assume str: \"((\\<sigma>, s), disconnect(i, i'), (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\"\n         and ttr: \"((\\<sigma>, t), disconnect(i, i'), (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "with sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "from tor ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"(\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", ".."], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "fix i d"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "assume \"t' = t\"\n         and str: \"((\\<sigma>, s), i:deliver(d), (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\""], ["proof (state)\nthis:\n  t' = t\n  ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "from sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)", "have \"\\<forall>j. j\\<notin>net_tree_ips p\\<^sub>1 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n       \\<sigma>' j = \\<sigma> j", "by - (drule(1) ostep_invariantD [OF act1], simp_all)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "with \\<open>net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<close>"], ["proof (chain)\npicking this:\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j", "have \"\\<forall>j. j\\<in>net_tree_ips p\\<^sub>2 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n       \\<sigma>' j = \\<sigma> j", "by auto"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "from sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)", "have \"\\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)", "by - (drule(1) ostep_invariantD [OF act1], simp_all)"], ["proof (state)\nthis:\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)", "have \"(\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", "using tor \\<open>t' = t\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  t' = t\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", "by (clarsimp elim!: oreachable_other')\n                              (metis otherI \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>)+"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "from sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)", "have \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", "by (rule conjI [rotated])"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "fix i d"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "assume \"s' = s\"\n         and ttr: \"((\\<sigma>, t), i:deliver(d), (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  s' = s\n  ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "from tor ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"\\<forall>j. j\\<notin>net_tree_ips p\\<^sub>2 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n       \\<sigma>' j = \\<sigma> j", "by - (drule(1) ostep_invariantD [OF act2], simp_all)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "with \\<open>net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<close>"], ["proof (chain)\npicking this:\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j", "have \"\\<forall>j. j\\<in>net_tree_ips p\\<^sub>1 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n       \\<sigma>' j = \\<sigma> j", "by auto"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "from tor ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"\\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)", "by - (drule(1) ostep_invariantD [OF act2], simp_all)"], ["proof (state)\nthis:\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)", "have \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1))", "using sor \\<open>s' = s\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  s' = s\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1))", "by (clarsimp elim!: oreachable_other')\n                              (metis otherI \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>)+"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "from tor ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"(\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>a b. oarrivemsg I a)\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", ".."], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "assume \"t' = t\"\n         and str: \"((\\<sigma>, s), \\<tau>, (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\""], ["proof (state)\nthis:\n  t' = t\n  ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "from sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)", "have \"\\<forall>j. j\\<notin>net_tree_ips p\\<^sub>1 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n       \\<sigma>' j = \\<sigma> j", "by - (drule(1) ostep_invariantD [OF act1], simp_all)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "with \\<open>net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<close>"], ["proof (chain)\npicking this:\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j", "have \"\\<forall>j. j\\<in>net_tree_ips p\\<^sub>2 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n       \\<sigma>' j = \\<sigma> j", "by auto"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "from sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)", "have \"\\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)", "by - (drule(1) ostep_invariantD [OF act1], simp_all)"], ["proof (state)\nthis:\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)", "have \"(\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", "using tor \\<open>t' = t\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  t' = t\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", "by (clarsimp elim!: oreachable_other')\n                              (metis otherI \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>)+"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "from sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)", "have \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", "by (rule conjI [rotated])"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "assume \"s' = s\"\n         and ttr: \"((\\<sigma>, t), \\<tau>, (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  s' = s\n  ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "from tor ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"\\<forall>j. j\\<notin>net_tree_ips p\\<^sub>2 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n       \\<sigma>' j = \\<sigma> j", "by - (drule(1) ostep_invariantD [OF act2], simp_all)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "with \\<open>net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<close>"], ["proof (chain)\npicking this:\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j", "have \"\\<forall>j. j\\<in>net_tree_ips p\\<^sub>1 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n       \\<sigma>' j = \\<sigma> j", "by auto"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "from tor ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"\\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)", "by - (drule(1) ostep_invariantD [OF act2], simp_all)"], ["proof (state)\nthis:\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)", "have \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1))", "using sor \\<open>s' = s\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  s' = s\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1))", "by (clarsimp elim!: oreachable_other')\n                              (metis otherI \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>)+"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "from tor ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"(\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>a b. oarrivemsg I a)\n                             (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n           (other U (net_tree_ips p\\<^sub>2))", ".."], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "with \\<open>net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<close>"], ["proof (chain)\npicking this:\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))", "show ?case"], ["proof (prove)\nusing this:\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>a b. oarrivemsg I a)\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n           (other U (net_tree_ips p\\<^sub>2)) \\<and>\n    net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "by simp"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2)) \\<and>\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  `Splitting' reachability is trivial when there are no assumptions on interleavings, but\n  this is useless for showing non-trivial properties, since the interleaving steps can do\n  anything at all. This lemma is too weak.\n\\<close>"], ["", "lemma subnet_oreachable_true_true:\n  assumes \"(\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\"\n    shows \"(\\<sigma>, s\\<^sub>1) \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\"\n          \"(\\<sigma>, s\\<^sub>2) \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\"\n          (is \"_ \\<in> ?oreachable p\\<^sub>2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>, s\\<^sub>1)\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True) &&&\n    (\\<sigma>, s\\<^sub>2)\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True)", "using assms"], ["proof (prove)\nusing this:\n  (\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, s\\<^sub>1)\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True) &&&\n    (\\<sigma>, s\\<^sub>2)\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2)\n    \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n           (\\<lambda>_ _ _. True) (\\<lambda>_ _. True) \\<Longrightarrow>\n    (\\<sigma>, s\\<^sub>1)\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True)\n 2. (\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2)\n    \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n           (\\<lambda>_ _ _. True) (\\<lambda>_ _. True) \\<Longrightarrow>\n    (\\<sigma>, s\\<^sub>2)\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True)", "from assms"], ["proof (chain)\npicking this:\n  (\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "have \"(\\<sigma>, s\\<^sub>1) \\<in> ?oreachable p\\<^sub>1 \\<and> (\\<sigma>, s\\<^sub>2) \\<in> ?oreachable p\\<^sub>2\""], ["proof (prove)\nusing this:\n  (\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, s\\<^sub>1)\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True) \\<and>\n    (\\<sigma>, s\\<^sub>2)\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True)", "proof (induction rule: oreachable_par_subnet_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> s t.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       (\\<sigma>, s)\n       \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n              (\\<lambda>_ _. True) \\<and>\n       (\\<sigma>, t)\n       \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n              (\\<lambda>_ _. True)\n 2. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>_ _ _. True) (\\<lambda>_ _. True);\n        True;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 3. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>_ _ _. True) (\\<lambda>_ _. True);\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        True;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "fix \\<sigma> s\\<^sub>1 s\\<^sub>2"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> s t.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       (\\<sigma>, s)\n       \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n              (\\<lambda>_ _. True) \\<and>\n       (\\<sigma>, t)\n       \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n              (\\<lambda>_ _. True)\n 2. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>_ _ _. True) (\\<lambda>_ _. True);\n        True;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 3. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>_ _ _. True) (\\<lambda>_ _. True);\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        True;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "assume \"(\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2) \\<in> init (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\""], ["proof (state)\nthis:\n  (\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2)\n  \\<in> init (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> s t.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       (\\<sigma>, s)\n       \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n              (\\<lambda>_ _. True) \\<and>\n       (\\<sigma>, t)\n       \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n              (\\<lambda>_ _. True)\n 2. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>_ _ _. True) (\\<lambda>_ _. True);\n        True;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 3. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>_ _ _. True) (\\<lambda>_ _. True);\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        True;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "thus \"(\\<sigma>, s\\<^sub>1) \\<in> ?oreachable p\\<^sub>1 \\<and> (\\<sigma>, s\\<^sub>2) \\<in> ?oreachable p\\<^sub>2\""], ["proof (prove)\nusing this:\n  (\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2)\n  \\<in> init (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>, s\\<^sub>1)\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True) \\<and>\n    (\\<sigma>, s\\<^sub>2)\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True)", "by (auto dest: oreachable_init)"], ["proof (state)\nthis:\n  (\\<sigma>, s\\<^sub>1)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True) \\<and>\n  (\\<sigma>, s\\<^sub>2)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>_ _ _. True) (\\<lambda>_ _. True);\n        True;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>_ _ _. True) (\\<lambda>_ _. True);\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        True;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>_ _ _. True) (\\<lambda>_ _. True);\n        True;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>_ _ _. True) (\\<lambda>_ _. True);\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        True;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "case (local \\<sigma> s\\<^sub>1 s\\<^sub>2 \\<sigma>' s\\<^sub>1' s\\<^sub>2' a)"], ["proof (state)\nthis:\n  (\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n  ((\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2), a, \\<sigma>',\n   SubnetS s\\<^sub>1' s\\<^sub>2')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n  True\n  (\\<sigma>, s\\<^sub>1)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True) \\<and>\n  (\\<sigma>, s\\<^sub>2)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>_ _ _. True) (\\<lambda>_ _. True);\n        True;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>_ _ _. True) (\\<lambda>_ _. True);\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        True;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "hence \"(\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2) \\<in> ?oreachable (p\\<^sub>1 \\<parallel> p\\<^sub>2)\"\n        and sr1: \"(\\<sigma>, s\\<^sub>1) \\<in> ?oreachable p\\<^sub>1\"\n        and sr2: \"(\\<sigma>, s\\<^sub>2) \\<in> ?oreachable p\\<^sub>2\"\n        and \"((\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2), a, (\\<sigma>', SubnetS s\\<^sub>1' s\\<^sub>2')) \\<in> trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\""], ["proof (prove)\nusing this:\n  (\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n  ((\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2), a, \\<sigma>',\n   SubnetS s\\<^sub>1' s\\<^sub>2')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n  True\n  (\\<sigma>, s\\<^sub>1)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True) \\<and>\n  (\\<sigma>, s\\<^sub>2)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2)\n     \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n            (\\<lambda>_ _ _. True) (\\<lambda>_ _. True) &&&\n     (\\<sigma>, s\\<^sub>1)\n     \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n            (\\<lambda>_ _. True)) &&&\n    (\\<sigma>, s\\<^sub>2)\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True) &&&\n    ((\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2), a, \\<sigma>',\n     SubnetS s\\<^sub>1' s\\<^sub>2')\n    \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n  (\\<sigma>, s\\<^sub>1)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n  (\\<sigma>, s\\<^sub>2)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n  ((\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2), a, \\<sigma>',\n   SubnetS s\\<^sub>1' s\\<^sub>2')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>_ _ _. True) (\\<lambda>_ _. True);\n        True;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>_ _ _. True) (\\<lambda>_ _. True);\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        True;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "from this(4)"], ["proof (chain)\npicking this:\n  ((\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2), a, \\<sigma>',\n   SubnetS s\\<^sub>1' s\\<^sub>2')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))", "have \"((\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2), a, (\\<sigma>', SubnetS s\\<^sub>1' s\\<^sub>2'))\n                \\<in> opnet_sos (trans (opnet onp p\\<^sub>1)) (trans (opnet onp p\\<^sub>2))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2), a, \\<sigma>',\n   SubnetS s\\<^sub>1' s\\<^sub>2')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2), a, \\<sigma>',\n     SubnetS s\\<^sub>1' s\\<^sub>2')\n    \\<in> opnet_sos (automaton.trans (opnet onp p\\<^sub>1))\n           (automaton.trans (opnet onp p\\<^sub>2))", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2), a, \\<sigma>',\n   SubnetS s\\<^sub>1' s\\<^sub>2')\n  \\<in> opnet_sos (automaton.trans (opnet onp p\\<^sub>1))\n         (automaton.trans (opnet onp p\\<^sub>2))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>_ _ _. True) (\\<lambda>_ _. True);\n        True;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>_ _ _. True) (\\<lambda>_ _. True);\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        True;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "thus \"(\\<sigma>', s\\<^sub>1') \\<in> ?oreachable p\\<^sub>1 \\<and> (\\<sigma>', s\\<^sub>2') \\<in> ?oreachable p\\<^sub>2\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2), a, \\<sigma>',\n   SubnetS s\\<^sub>1' s\\<^sub>2')\n  \\<in> opnet_sos (automaton.trans (opnet onp p\\<^sub>1))\n         (automaton.trans (opnet onp p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s\\<^sub>1')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True) \\<and>\n    (\\<sigma>', s\\<^sub>2')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True)", "proof cases"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), R:*cast(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), R:*cast(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H'\\<not>K':arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>2' = s\\<^sub>2;\n        ((\\<sigma>, s\\<^sub>1), i:deliver(d), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>1' = s\\<^sub>1;\n        ((\\<sigma>, s\\<^sub>2), i:deliver(d), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 6. \\<lbrakk>a = \\<tau>; s\\<^sub>2' = s\\<^sub>2;\n     ((\\<sigma>, s\\<^sub>1), \\<tau>, \\<sigma>', s\\<^sub>1')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 7. \\<lbrakk>a = \\<tau>; s\\<^sub>1' = s\\<^sub>1;\n     ((\\<sigma>, s\\<^sub>2), \\<tau>, \\<sigma>', s\\<^sub>2')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s\\<^sub>1), connect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), connect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s\\<^sub>1), disconnect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), disconnect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "fix R m H K"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), R:*cast(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), R:*cast(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H'\\<not>K':arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>2' = s\\<^sub>2;\n        ((\\<sigma>, s\\<^sub>1), i:deliver(d), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>1' = s\\<^sub>1;\n        ((\\<sigma>, s\\<^sub>2), i:deliver(d), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 6. \\<lbrakk>a = \\<tau>; s\\<^sub>2' = s\\<^sub>2;\n     ((\\<sigma>, s\\<^sub>1), \\<tau>, \\<sigma>', s\\<^sub>1')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 7. \\<lbrakk>a = \\<tau>; s\\<^sub>1' = s\\<^sub>1;\n     ((\\<sigma>, s\\<^sub>2), \\<tau>, \\<sigma>', s\\<^sub>2')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s\\<^sub>1), connect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), connect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s\\<^sub>1), disconnect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), disconnect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "assume \"a = R:*cast(m)\"\n           and tr1: \"((\\<sigma>, s\\<^sub>1), R:*cast(m), (\\<sigma>', s\\<^sub>1')) \\<in> trans (opnet onp p\\<^sub>1)\"\n           and tr2: \"((\\<sigma>, s\\<^sub>2), H\\<not>K:arrive(m), (\\<sigma>', s\\<^sub>2')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  a = R:*cast(m)\n  ((\\<sigma>, s\\<^sub>1), R:*cast(m), \\<sigma>', s\\<^sub>1')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, s\\<^sub>2), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>2')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), R:*cast(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), R:*cast(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H'\\<not>K':arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>2' = s\\<^sub>2;\n        ((\\<sigma>, s\\<^sub>1), i:deliver(d), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>1' = s\\<^sub>1;\n        ((\\<sigma>, s\\<^sub>2), i:deliver(d), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 6. \\<lbrakk>a = \\<tau>; s\\<^sub>2' = s\\<^sub>2;\n     ((\\<sigma>, s\\<^sub>1), \\<tau>, \\<sigma>', s\\<^sub>1')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 7. \\<lbrakk>a = \\<tau>; s\\<^sub>1' = s\\<^sub>1;\n     ((\\<sigma>, s\\<^sub>2), \\<tau>, \\<sigma>', s\\<^sub>2')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s\\<^sub>1), connect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), connect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s\\<^sub>1), disconnect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), disconnect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "from sr1 and tr1 and TrueI"], ["proof (chain)\npicking this:\n  (\\<sigma>, s\\<^sub>1)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n  ((\\<sigma>, s\\<^sub>1), R:*cast(m), \\<sigma>', s\\<^sub>1')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  True", "have \"(\\<sigma>', s\\<^sub>1') \\<in> ?oreachable p\\<^sub>1\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s\\<^sub>1)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n  ((\\<sigma>, s\\<^sub>1), R:*cast(m), \\<sigma>', s\\<^sub>1')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  True\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s\\<^sub>1')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True)", "by (rule oreachable_local')"], ["proof (state)\nthis:\n  (\\<sigma>', s\\<^sub>1')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), R:*cast(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), R:*cast(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H'\\<not>K':arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>2' = s\\<^sub>2;\n        ((\\<sigma>, s\\<^sub>1), i:deliver(d), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>1' = s\\<^sub>1;\n        ((\\<sigma>, s\\<^sub>2), i:deliver(d), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 6. \\<lbrakk>a = \\<tau>; s\\<^sub>2' = s\\<^sub>2;\n     ((\\<sigma>, s\\<^sub>1), \\<tau>, \\<sigma>', s\\<^sub>1')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 7. \\<lbrakk>a = \\<tau>; s\\<^sub>1' = s\\<^sub>1;\n     ((\\<sigma>, s\\<^sub>2), \\<tau>, \\<sigma>', s\\<^sub>2')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s\\<^sub>1), connect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), connect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s\\<^sub>1), disconnect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), disconnect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', s\\<^sub>1')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), R:*cast(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), R:*cast(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H'\\<not>K':arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>2' = s\\<^sub>2;\n        ((\\<sigma>, s\\<^sub>1), i:deliver(d), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>1' = s\\<^sub>1;\n        ((\\<sigma>, s\\<^sub>2), i:deliver(d), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 6. \\<lbrakk>a = \\<tau>; s\\<^sub>2' = s\\<^sub>2;\n     ((\\<sigma>, s\\<^sub>1), \\<tau>, \\<sigma>', s\\<^sub>1')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 7. \\<lbrakk>a = \\<tau>; s\\<^sub>1' = s\\<^sub>1;\n     ((\\<sigma>, s\\<^sub>2), \\<tau>, \\<sigma>', s\\<^sub>2')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s\\<^sub>1), connect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), connect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s\\<^sub>1), disconnect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), disconnect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "from sr2 and tr2 and TrueI"], ["proof (chain)\npicking this:\n  (\\<sigma>, s\\<^sub>2)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n  ((\\<sigma>, s\\<^sub>2), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>2')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n  True", "have \"(\\<sigma>', s\\<^sub>2') \\<in> ?oreachable p\\<^sub>2\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s\\<^sub>2)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n  ((\\<sigma>, s\\<^sub>2), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>2')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n  True\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s\\<^sub>2')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True)", "by (rule oreachable_local')"], ["proof (state)\nthis:\n  (\\<sigma>', s\\<^sub>2')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), R:*cast(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), R:*cast(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H'\\<not>K':arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>2' = s\\<^sub>2;\n        ((\\<sigma>, s\\<^sub>1), i:deliver(d), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>1' = s\\<^sub>1;\n        ((\\<sigma>, s\\<^sub>2), i:deliver(d), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 6. \\<lbrakk>a = \\<tau>; s\\<^sub>2' = s\\<^sub>2;\n     ((\\<sigma>, s\\<^sub>1), \\<tau>, \\<sigma>', s\\<^sub>1')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 7. \\<lbrakk>a = \\<tau>; s\\<^sub>1' = s\\<^sub>1;\n     ((\\<sigma>, s\\<^sub>2), \\<tau>, \\<sigma>', s\\<^sub>2')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s\\<^sub>1), connect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), connect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s\\<^sub>1), disconnect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), disconnect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', s\\<^sub>1')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n  (\\<sigma>', s\\<^sub>2')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>', s\\<^sub>1')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n  (\\<sigma>', s\\<^sub>2')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s\\<^sub>1')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True) \\<and>\n    (\\<sigma>', s\\<^sub>2')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True)", ".."], ["proof (state)\nthis:\n  (\\<sigma>', s\\<^sub>1')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True) \\<and>\n  (\\<sigma>', s\\<^sub>2')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n\ngoal (8 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), R:*cast(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H'\\<not>K':arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>2' = s\\<^sub>2;\n        ((\\<sigma>, s\\<^sub>1), i:deliver(d), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>1' = s\\<^sub>1;\n        ((\\<sigma>, s\\<^sub>2), i:deliver(d), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 5. \\<lbrakk>a = \\<tau>; s\\<^sub>2' = s\\<^sub>2;\n     ((\\<sigma>, s\\<^sub>1), \\<tau>, \\<sigma>', s\\<^sub>1')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 6. \\<lbrakk>a = \\<tau>; s\\<^sub>1' = s\\<^sub>1;\n     ((\\<sigma>, s\\<^sub>2), \\<tau>, \\<sigma>', s\\<^sub>2')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s\\<^sub>1), connect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), connect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s\\<^sub>1), disconnect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), disconnect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), R:*cast(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H'\\<not>K':arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>2' = s\\<^sub>2;\n        ((\\<sigma>, s\\<^sub>1), i:deliver(d), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>1' = s\\<^sub>1;\n        ((\\<sigma>, s\\<^sub>2), i:deliver(d), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 5. \\<lbrakk>a = \\<tau>; s\\<^sub>2' = s\\<^sub>2;\n     ((\\<sigma>, s\\<^sub>1), \\<tau>, \\<sigma>', s\\<^sub>1')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 6. \\<lbrakk>a = \\<tau>; s\\<^sub>1' = s\\<^sub>1;\n     ((\\<sigma>, s\\<^sub>2), \\<tau>, \\<sigma>', s\\<^sub>2')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s\\<^sub>1), connect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), connect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s\\<^sub>1), disconnect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), disconnect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "assume \"a = \\<tau>\"\n           and \"s\\<^sub>2' = s\\<^sub>2\"\n           and tr1: \"((\\<sigma>, s\\<^sub>1), \\<tau>, (\\<sigma>', s\\<^sub>1')) \\<in> trans (opnet onp p\\<^sub>1)\""], ["proof (state)\nthis:\n  a = \\<tau>\n  s\\<^sub>2' = s\\<^sub>2\n  ((\\<sigma>, s\\<^sub>1), \\<tau>, \\<sigma>', s\\<^sub>1')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (8 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), R:*cast(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H'\\<not>K':arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>2' = s\\<^sub>2;\n        ((\\<sigma>, s\\<^sub>1), i:deliver(d), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>1' = s\\<^sub>1;\n        ((\\<sigma>, s\\<^sub>2), i:deliver(d), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 5. \\<lbrakk>a = \\<tau>; s\\<^sub>2' = s\\<^sub>2;\n     ((\\<sigma>, s\\<^sub>1), \\<tau>, \\<sigma>', s\\<^sub>1')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 6. \\<lbrakk>a = \\<tau>; s\\<^sub>1' = s\\<^sub>1;\n     ((\\<sigma>, s\\<^sub>2), \\<tau>, \\<sigma>', s\\<^sub>2')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s\\<^sub>1), connect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), connect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s\\<^sub>1), disconnect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), disconnect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "from sr2 and this(2)"], ["proof (chain)\npicking this:\n  (\\<sigma>, s\\<^sub>2)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n  s\\<^sub>2' = s\\<^sub>2", "have \"(\\<sigma>', s\\<^sub>2') \\<in> ?oreachable p\\<^sub>2\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s\\<^sub>2)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n  s\\<^sub>2' = s\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s\\<^sub>2')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True)", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>', s\\<^sub>2')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n\ngoal (8 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), R:*cast(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H'\\<not>K':arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>2' = s\\<^sub>2;\n        ((\\<sigma>, s\\<^sub>1), i:deliver(d), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>1' = s\\<^sub>1;\n        ((\\<sigma>, s\\<^sub>2), i:deliver(d), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 5. \\<lbrakk>a = \\<tau>; s\\<^sub>2' = s\\<^sub>2;\n     ((\\<sigma>, s\\<^sub>1), \\<tau>, \\<sigma>', s\\<^sub>1')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 6. \\<lbrakk>a = \\<tau>; s\\<^sub>1' = s\\<^sub>1;\n     ((\\<sigma>, s\\<^sub>2), \\<tau>, \\<sigma>', s\\<^sub>2')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s\\<^sub>1), connect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), connect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s\\<^sub>1), disconnect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), disconnect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', s\\<^sub>2')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n\ngoal (8 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), R:*cast(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H'\\<not>K':arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>2' = s\\<^sub>2;\n        ((\\<sigma>, s\\<^sub>1), i:deliver(d), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>1' = s\\<^sub>1;\n        ((\\<sigma>, s\\<^sub>2), i:deliver(d), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 5. \\<lbrakk>a = \\<tau>; s\\<^sub>2' = s\\<^sub>2;\n     ((\\<sigma>, s\\<^sub>1), \\<tau>, \\<sigma>', s\\<^sub>1')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 6. \\<lbrakk>a = \\<tau>; s\\<^sub>1' = s\\<^sub>1;\n     ((\\<sigma>, s\\<^sub>2), \\<tau>, \\<sigma>', s\\<^sub>2')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s\\<^sub>1), connect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), connect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s\\<^sub>1), disconnect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), disconnect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "have \"(\\<lambda>_ _. True) \\<sigma> \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. True", "by (rule TrueI)"], ["proof (state)\nthis:\n  True\n\ngoal (8 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), R:*cast(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H'\\<not>K':arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>2' = s\\<^sub>2;\n        ((\\<sigma>, s\\<^sub>1), i:deliver(d), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>1' = s\\<^sub>1;\n        ((\\<sigma>, s\\<^sub>2), i:deliver(d), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 5. \\<lbrakk>a = \\<tau>; s\\<^sub>2' = s\\<^sub>2;\n     ((\\<sigma>, s\\<^sub>1), \\<tau>, \\<sigma>', s\\<^sub>1')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 6. \\<lbrakk>a = \\<tau>; s\\<^sub>1' = s\\<^sub>1;\n     ((\\<sigma>, s\\<^sub>2), \\<tau>, \\<sigma>', s\\<^sub>2')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s\\<^sub>1), connect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), connect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s\\<^sub>1), disconnect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), disconnect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', s\\<^sub>2')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n  True", "have \"(\\<sigma>', s\\<^sub>2') \\<in> ?oreachable p\\<^sub>2\""], ["proof (prove)\nusing this:\n  (\\<sigma>', s\\<^sub>2')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n  True\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s\\<^sub>2')\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True)", "by (rule oreachable_other')"], ["proof (state)\nthis:\n  (\\<sigma>', s\\<^sub>2')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n\ngoal (8 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), R:*cast(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H'\\<not>K':arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>2' = s\\<^sub>2;\n        ((\\<sigma>, s\\<^sub>1), i:deliver(d), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>1' = s\\<^sub>1;\n        ((\\<sigma>, s\\<^sub>2), i:deliver(d), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 5. \\<lbrakk>a = \\<tau>; s\\<^sub>2' = s\\<^sub>2;\n     ((\\<sigma>, s\\<^sub>1), \\<tau>, \\<sigma>', s\\<^sub>1')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 6. \\<lbrakk>a = \\<tau>; s\\<^sub>1' = s\\<^sub>1;\n     ((\\<sigma>, s\\<^sub>2), \\<tau>, \\<sigma>', s\\<^sub>2')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s\\<^sub>1), connect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), connect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s\\<^sub>1), disconnect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), disconnect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', s\\<^sub>2')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n\ngoal (8 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), R:*cast(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H'\\<not>K':arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>2' = s\\<^sub>2;\n        ((\\<sigma>, s\\<^sub>1), i:deliver(d), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>1' = s\\<^sub>1;\n        ((\\<sigma>, s\\<^sub>2), i:deliver(d), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 5. \\<lbrakk>a = \\<tau>; s\\<^sub>2' = s\\<^sub>2;\n     ((\\<sigma>, s\\<^sub>1), \\<tau>, \\<sigma>', s\\<^sub>1')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 6. \\<lbrakk>a = \\<tau>; s\\<^sub>1' = s\\<^sub>1;\n     ((\\<sigma>, s\\<^sub>2), \\<tau>, \\<sigma>', s\\<^sub>2')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s\\<^sub>1), connect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), connect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s\\<^sub>1), disconnect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), disconnect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "from sr1 and tr1 and TrueI"], ["proof (chain)\npicking this:\n  (\\<sigma>, s\\<^sub>1)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n  ((\\<sigma>, s\\<^sub>1), \\<tau>, \\<sigma>', s\\<^sub>1')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  True", "have \"(\\<sigma>', s\\<^sub>1') \\<in> ?oreachable p\\<^sub>1\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s\\<^sub>1)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n  ((\\<sigma>, s\\<^sub>1), \\<tau>, \\<sigma>', s\\<^sub>1')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  True\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s\\<^sub>1')\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True)", "by (rule oreachable_local')"], ["proof (state)\nthis:\n  (\\<sigma>', s\\<^sub>1')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n\ngoal (8 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), R:*cast(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 2. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s\\<^sub>1), H\\<not>K:arrive(m), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), H'\\<not>K':arrive(m), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>2' = s\\<^sub>2;\n        ((\\<sigma>, s\\<^sub>1), i:deliver(d), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s\\<^sub>1' = s\\<^sub>1;\n        ((\\<sigma>, s\\<^sub>2), i:deliver(d), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 5. \\<lbrakk>a = \\<tau>; s\\<^sub>2' = s\\<^sub>2;\n     ((\\<sigma>, s\\<^sub>1), \\<tau>, \\<sigma>', s\\<^sub>1')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 6. \\<lbrakk>a = \\<tau>; s\\<^sub>1' = s\\<^sub>1;\n     ((\\<sigma>, s\\<^sub>2), \\<tau>, \\<sigma>', s\\<^sub>2')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (\\<lambda>_ _ _. True)\n                             (\\<lambda>_ _. True) \\<and>\n                      (\\<sigma>', s\\<^sub>2')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s\\<^sub>1), connect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), connect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s\\<^sub>1), disconnect(i, i'), \\<sigma>', s\\<^sub>1')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, s\\<^sub>2), disconnect(i, i'), \\<sigma>', s\\<^sub>2')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s\\<^sub>1')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', s\\<^sub>2')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "qed (insert sr1 sr2, simp_all, (metis (no_types) oreachable_local'\n                                                       oreachable_other')+)"], ["proof (state)\nthis:\n  (\\<sigma>', s\\<^sub>1')\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True) \\<and>\n  (\\<sigma>', s\\<^sub>2')\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>_ _ _. True) (\\<lambda>_ _. True);\n        True;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n               (\\<lambda>_ _. True)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (\\<lambda>_ _ _. True)\n                                (\\<lambda>_ _. True) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (\\<lambda>_ _ _. True) (\\<lambda>_ _. True)", "qed auto"], ["proof (state)\nthis:\n  (\\<sigma>, s\\<^sub>1)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True) \\<and>\n  (\\<sigma>, s\\<^sub>2)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n\ngoal (2 subgoals):\n 1. (\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2)\n    \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n           (\\<lambda>_ _ _. True) (\\<lambda>_ _. True) \\<Longrightarrow>\n    (\\<sigma>, s\\<^sub>1)\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True)\n 2. (\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2)\n    \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n           (\\<lambda>_ _ _. True) (\\<lambda>_ _. True) \\<Longrightarrow>\n    (\\<sigma>, s\\<^sub>2)\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True)", "thus \"(\\<sigma>, s\\<^sub>1) \\<in> ?oreachable p\\<^sub>1\"\n         \"(\\<sigma>, s\\<^sub>2) \\<in> ?oreachable p\\<^sub>2\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s\\<^sub>1)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True) \\<and>\n  (\\<sigma>, s\\<^sub>2)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, s\\<^sub>1)\n    \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True) &&&\n    (\\<sigma>, s\\<^sub>2)\n    \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n           (\\<lambda>_ _. True)", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>, s\\<^sub>1)\n  \\<in> oreachable (opnet onp p\\<^sub>1) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n  (\\<sigma>, s\\<^sub>2)\n  \\<in> oreachable (opnet onp p\\<^sub>2) (\\<lambda>_ _ _. True)\n         (\\<lambda>_ _. True)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  It may also be tempting to try splitting from the assumption\n  @{term \"(\\<sigma>, SubnetS s\\<^sub>1 s\\<^sub>2) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) (\\<lambda>_ _ _. True) (\\<lambda>_ _. False)\"},\n  where the environment step would be trivially true (since the assumption is false), but the\n  lemma cannot be shown when only one side acts, since it must guarantee the assumption for\n  the other side.\n\\<close>"], ["", "lemma lift_opnet_sync_action:\n  assumes \"\\<And>\\<xi>. U \\<xi> \\<xi>\"\n      and act1: \"\\<And>i R. \\<langle>i : onp i : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U {i} \\<rightarrow>)\n                      globala (\\<lambda>(\\<sigma>, a, _). castmsg (I \\<sigma>) a)\"\n      and act2: \"\\<And>i R. \\<langle>i : onp i : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U {i} \\<rightarrow>)\n                      globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). (a \\<noteq> \\<tau> \\<and> (\\<forall>d. a \\<noteq> i:deliver(d)) \\<longrightarrow> S (\\<sigma> i) (\\<sigma>' i)))\"\n      and act3: \"\\<And>i R. \\<langle>i : onp i : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U {i} \\<rightarrow>)\n                      globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). (a = \\<tau> \\<or> (\\<exists>d. a = i:deliver(d)) \\<longrightarrow> U (\\<sigma> i) (\\<sigma>' i)))\"\n  shows \"opnet onp p \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U (net_tree_ips p) \\<rightarrow>)\n                       globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). castmsg (I \\<sigma>) a\n                                              \\<and> (a \\<noteq> \\<tau> \\<and> (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                                                     (\\<forall>i\\<in>net_tree_ips p. S (\\<sigma> i) (\\<sigma>' i)))\n                                              \\<and> (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                                                     ((\\<forall>i\\<in>net_tree_ips p. U (\\<sigma> i) (\\<sigma>' i))\n                                                   \\<and> (\\<forall>i. i\\<notin>net_tree_ips p \\<longrightarrow> \\<sigma>' i = \\<sigma> i))))\"\n    (is \"opnet onp p \\<Turnstile>\\<^sub>A (?I, ?U p \\<rightarrow>) ?inv (net_tree_ips p)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. opnet onp\n     p \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>,\n                             other U (net_tree_ips p) \\<rightarrow>)\n                             globala\n                              (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                  castmsg (I \\<sigma>) a \\<and>\n                                  (a \\<noteq> \\<tau> \\<and>\n                                   (\\<forall>i d.\n a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                                   (\\<forall>i\\<in>net_tree_ips p.\n S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                  (a = \\<tau> \\<or>\n                                   (\\<exists>i d.\n a = i:deliver(d)) \\<longrightarrow>\n                                   (\\<forall>i\\<in>net_tree_ips p.\n U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                   (\\<forall>i.\n i \\<notin> net_tree_ips p \\<longrightarrow> \\<sigma>' i = \\<sigma> i)))", "proof (induction p)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R.\n       opnet onp\n        \\<langle>i; R\\<rangle> \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                  oarrivemsg I \\<sigma>,\n               other U (net_tree_ips \\<langle>i; R\\<rangle>) \\<rightarrow>)\n               globala\n                (\\<lambda>a.\n                    case a of\n                    (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                      castmsg (I \\<sigma>) aa \\<and>\n                      (aa \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips \\<langle>i; R\\<rangle>.\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (aa = \\<tau> \\<or>\n                       (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips \\<langle>i; R\\<rangle>.\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>ia.\n                           ia \\<notin> net_tree_ips\n  \\<langle>i; R\\<rangle> \\<longrightarrow>\n                           \\<sigma>' ia = \\<sigma> ia)))\n 2. \\<And>p1 p2.\n       \\<lbrakk>opnet onp\n                 p1 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n       oarrivemsg I \\<sigma>,\n    other U (net_tree_ips p1) \\<rightarrow>)\n    globala\n     (\\<lambda>a.\n         case a of\n         (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n           castmsg (I \\<sigma>) aa \\<and>\n           (aa \\<noteq> \\<tau> \\<and>\n            (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n            (\\<forall>i\\<in>net_tree_ips p1.\n                S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n           (aa = \\<tau> \\<or>\n            (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n            (\\<forall>i\\<in>net_tree_ips p1.\n                U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n            (\\<forall>i.\n                i \\<notin> net_tree_ips p1 \\<longrightarrow>\n                \\<sigma>' i = \\<sigma> i)));\n        opnet onp\n         p2 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                                     oarrivemsg I \\<sigma>,\n                                  other U (net_tree_ips p2) \\<rightarrow>)\n                                  globala\n                                   (\\<lambda>a.\n case a of\n (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n   castmsg (I \\<sigma>) aa \\<and>\n   (aa \\<noteq> \\<tau> \\<and>\n    (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n    (\\<forall>i\\<in>net_tree_ips p2. S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n   (aa = \\<tau> \\<or> (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n    (\\<forall>i\\<in>net_tree_ips p2. U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n    (\\<forall>i.\n        i \\<notin> net_tree_ips p2 \\<longrightarrow>\n        \\<sigma>' i = \\<sigma> i)))\\<rbrakk>\n       \\<Longrightarrow> opnet onp\n                          (p1 \\<parallel>\n                           p2) \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                  oarrivemsg I \\<sigma>,\n               other U (net_tree_ips (p1 \\<parallel> p2)) \\<rightarrow>)\n               globala\n                (\\<lambda>a.\n                    case a of\n                    (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                      castmsg (I \\<sigma>) aa \\<and>\n                      (aa \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips (p1 \\<parallel> p2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (aa = \\<tau> \\<or>\n                       (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips (p1 \\<parallel> p2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p1 \\<parallel> p2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i)))", "fix i R"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R.\n       opnet onp\n        \\<langle>i; R\\<rangle> \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                  oarrivemsg I \\<sigma>,\n               other U (net_tree_ips \\<langle>i; R\\<rangle>) \\<rightarrow>)\n               globala\n                (\\<lambda>a.\n                    case a of\n                    (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                      castmsg (I \\<sigma>) aa \\<and>\n                      (aa \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips \\<langle>i; R\\<rangle>.\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (aa = \\<tau> \\<or>\n                       (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips \\<langle>i; R\\<rangle>.\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>ia.\n                           ia \\<notin> net_tree_ips\n  \\<langle>i; R\\<rangle> \\<longrightarrow>\n                           \\<sigma>' ia = \\<sigma> ia)))\n 2. \\<And>p1 p2.\n       \\<lbrakk>opnet onp\n                 p1 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n       oarrivemsg I \\<sigma>,\n    other U (net_tree_ips p1) \\<rightarrow>)\n    globala\n     (\\<lambda>a.\n         case a of\n         (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n           castmsg (I \\<sigma>) aa \\<and>\n           (aa \\<noteq> \\<tau> \\<and>\n            (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n            (\\<forall>i\\<in>net_tree_ips p1.\n                S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n           (aa = \\<tau> \\<or>\n            (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n            (\\<forall>i\\<in>net_tree_ips p1.\n                U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n            (\\<forall>i.\n                i \\<notin> net_tree_ips p1 \\<longrightarrow>\n                \\<sigma>' i = \\<sigma> i)));\n        opnet onp\n         p2 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                                     oarrivemsg I \\<sigma>,\n                                  other U (net_tree_ips p2) \\<rightarrow>)\n                                  globala\n                                   (\\<lambda>a.\n case a of\n (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n   castmsg (I \\<sigma>) aa \\<and>\n   (aa \\<noteq> \\<tau> \\<and>\n    (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n    (\\<forall>i\\<in>net_tree_ips p2. S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n   (aa = \\<tau> \\<or> (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n    (\\<forall>i\\<in>net_tree_ips p2. U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n    (\\<forall>i.\n        i \\<notin> net_tree_ips p2 \\<longrightarrow>\n        \\<sigma>' i = \\<sigma> i)))\\<rbrakk>\n       \\<Longrightarrow> opnet onp\n                          (p1 \\<parallel>\n                           p2) \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                  oarrivemsg I \\<sigma>,\n               other U (net_tree_ips (p1 \\<parallel> p2)) \\<rightarrow>)\n               globala\n                (\\<lambda>a.\n                    case a of\n                    (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                      castmsg (I \\<sigma>) aa \\<and>\n                      (aa \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips (p1 \\<parallel> p2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (aa = \\<tau> \\<or>\n                       (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips (p1 \\<parallel> p2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p1 \\<parallel> p2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i)))", "show \"opnet onp \\<langle>i; R\\<rangle> \\<Turnstile>\\<^sub>A (?I, ?U \\<langle>i; R\\<rangle> \\<rightarrow>) ?inv (net_tree_ips \\<langle>i; R\\<rangle>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opnet onp\n     \\<langle>i; R\\<rangle> \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n               oarrivemsg I \\<sigma>,\n            other U (net_tree_ips \\<langle>i; R\\<rangle>) \\<rightarrow>)\n            globala\n             (\\<lambda>a.\n                 case a of\n                 (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                   castmsg (I \\<sigma>) aa \\<and>\n                   (aa \\<noteq> \\<tau> \\<and>\n                    (\\<forall>i d.\n                        aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n                    (\\<forall>i\\<in>net_tree_ips \\<langle>i; R\\<rangle>.\n                        S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                   (aa = \\<tau> \\<or>\n                    (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n                    (\\<forall>i\\<in>net_tree_ips \\<langle>i; R\\<rangle>.\n                        U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                    (\\<forall>ia.\n                        ia \\<notin> net_tree_ips\n                                     \\<langle>i; R\\<rangle> \\<longrightarrow>\n                        \\<sigma>' ia = \\<sigma> ia)))", "proof (rule ostep_invariantI, simp only: opnet.simps net_tree_ips.simps)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o);\n        oarrivemsg I \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> globala\n                          (\\<lambda>a.\n                              case a of\n                              (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                                castmsg (I \\<sigma>) aa \\<and>\n                                (aa \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>i d.\n                                     aa \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                (aa = \\<tau> \\<or>\n                                 (\\<exists>i d.\n                                     aa = i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                 (\\<forall>ia.\n                                     ia \\<notin> {i} \\<longrightarrow>\n                                     \\<sigma>' ia = \\<sigma> ia)))\n                          ((\\<sigma>, s), a, \\<sigma>', s')", "fix \\<sigma> s a \\<sigma>' s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o);\n        oarrivemsg I \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> globala\n                          (\\<lambda>a.\n                              case a of\n                              (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                                castmsg (I \\<sigma>) aa \\<and>\n                                (aa \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>i d.\n                                     aa \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                (aa = \\<tau> \\<or>\n                                 (\\<exists>i d.\n                                     aa = i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                 (\\<forall>ia.\n                                     ia \\<notin> {i} \\<longrightarrow>\n                                     \\<sigma>' ia = \\<sigma> ia)))\n                          ((\\<sigma>, s), a, \\<sigma>', s')", "assume sor: \"(\\<sigma>, s) \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o) (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) (other U {i})\"\n         and str: \"((\\<sigma>, s), a, (\\<sigma>', s')) \\<in> trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\"\n         and oam: \"oarrivemsg I \\<sigma> a\""], ["proof (state)\nthis:\n  (\\<sigma>, s)\n  \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n  oarrivemsg I \\<sigma> a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o);\n        oarrivemsg I \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> globala\n                          (\\<lambda>a.\n                              case a of\n                              (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                                castmsg (I \\<sigma>) aa \\<and>\n                                (aa \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>i d.\n                                     aa \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                (aa = \\<tau> \\<or>\n                                 (\\<exists>i d.\n                                     aa = i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                 (\\<forall>ia.\n                                     ia \\<notin> {i} \\<longrightarrow>\n                                     \\<sigma>' ia = \\<sigma> ia)))\n                          ((\\<sigma>, s), a, \\<sigma>', s')", "hence \"castmsg (I \\<sigma>) a\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n  oarrivemsg I \\<sigma> a\n\ngoal (1 subgoal):\n 1. castmsg (I \\<sigma>) a", "by - (drule(2) ostep_invariantD [OF act1], simp)"], ["proof (state)\nthis:\n  castmsg (I \\<sigma>) a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o);\n        oarrivemsg I \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> globala\n                          (\\<lambda>a.\n                              case a of\n                              (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                                castmsg (I \\<sigma>) aa \\<and>\n                                (aa \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>i d.\n                                     aa \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                (aa = \\<tau> \\<or>\n                                 (\\<exists>i d.\n                                     aa = i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                 (\\<forall>ia.\n                                     ia \\<notin> {i} \\<longrightarrow>\n                                     \\<sigma>' ia = \\<sigma> ia)))\n                          ((\\<sigma>, s), a, \\<sigma>', s')", "moreover"], ["proof (state)\nthis:\n  castmsg (I \\<sigma>) a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o);\n        oarrivemsg I \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> globala\n                          (\\<lambda>a.\n                              case a of\n                              (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                                castmsg (I \\<sigma>) aa \\<and>\n                                (aa \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>i d.\n                                     aa \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                (aa = \\<tau> \\<or>\n                                 (\\<exists>i d.\n                                     aa = i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                 (\\<forall>ia.\n                                     ia \\<notin> {i} \\<longrightarrow>\n                                     \\<sigma>' ia = \\<sigma> ia)))\n                          ((\\<sigma>, s), a, \\<sigma>', s')", "from sor str oam"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n  oarrivemsg I \\<sigma> a", "have \"a \\<noteq> \\<tau> \\<and> (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow> S (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n  oarrivemsg I \\<sigma> a\n\ngoal (1 subgoal):\n 1. a \\<noteq> \\<tau> \\<and>\n    (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n    S (\\<sigma> i) (\\<sigma>' i)", "by - (drule(2) ostep_invariantD [OF act2], simp)"], ["proof (state)\nthis:\n  a \\<noteq> \\<tau> \\<and>\n  (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n  S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o);\n        oarrivemsg I \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> globala\n                          (\\<lambda>a.\n                              case a of\n                              (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                                castmsg (I \\<sigma>) aa \\<and>\n                                (aa \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>i d.\n                                     aa \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                (aa = \\<tau> \\<or>\n                                 (\\<exists>i d.\n                                     aa = i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                 (\\<forall>ia.\n                                     ia \\<notin> {i} \\<longrightarrow>\n                                     \\<sigma>' ia = \\<sigma> ia)))\n                          ((\\<sigma>, s), a, \\<sigma>', s')", "moreover"], ["proof (state)\nthis:\n  a \\<noteq> \\<tau> \\<and>\n  (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n  S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o);\n        oarrivemsg I \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> globala\n                          (\\<lambda>a.\n                              case a of\n                              (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                                castmsg (I \\<sigma>) aa \\<and>\n                                (aa \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>i d.\n                                     aa \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                (aa = \\<tau> \\<or>\n                                 (\\<exists>i d.\n                                     aa = i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                 (\\<forall>ia.\n                                     ia \\<notin> {i} \\<longrightarrow>\n                                     \\<sigma>' ia = \\<sigma> ia)))\n                          ((\\<sigma>, s), a, \\<sigma>', s')", "have \"a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow> U (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n    U (\\<sigma> i) (\\<sigma>' i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n    U (\\<sigma> i) (\\<sigma>' i)", "from sor str oam"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n  oarrivemsg I \\<sigma> a", "have \"a = \\<tau> \\<or> (\\<exists>d. a = i:deliver(d)) \\<longrightarrow> U (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n  oarrivemsg I \\<sigma> a\n\ngoal (1 subgoal):\n 1. a = \\<tau> \\<or> (\\<exists>d. a = i:deliver(d)) \\<longrightarrow>\n    U (\\<sigma> i) (\\<sigma>' i)", "by - (drule(2) ostep_invariantD [OF act3], simp)"], ["proof (state)\nthis:\n  a = \\<tau> \\<or> (\\<exists>d. a = i:deliver(d)) \\<longrightarrow>\n  U (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n    U (\\<sigma> i) (\\<sigma>' i)", "moreover"], ["proof (state)\nthis:\n  a = \\<tau> \\<or> (\\<exists>d. a = i:deliver(d)) \\<longrightarrow>\n  U (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n    U (\\<sigma> i) (\\<sigma>' i)", "from sor str oam"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n  oarrivemsg I \\<sigma> a", "have \"\\<forall>j. j\\<noteq>i \\<longrightarrow> (\\<forall>d. a \\<noteq> j:deliver(d))\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n  oarrivemsg I \\<sigma> a\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<noteq> i \\<longrightarrow> (\\<forall>d. a \\<noteq> j:deliver(d))", "by - (drule(2) ostep_invariantD [OF node_local_deliver], simp)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow> (\\<forall>d. a \\<noteq> j:deliver(d))\n\ngoal (1 subgoal):\n 1. a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n    U (\\<sigma> i) (\\<sigma>' i)", "ultimately"], ["proof (chain)\npicking this:\n  a = \\<tau> \\<or> (\\<exists>d. a = i:deliver(d)) \\<longrightarrow>\n  U (\\<sigma> i) (\\<sigma>' i)\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow> (\\<forall>d. a \\<noteq> j:deliver(d))", "show ?thesis"], ["proof (prove)\nusing this:\n  a = \\<tau> \\<or> (\\<exists>d. a = i:deliver(d)) \\<longrightarrow>\n  U (\\<sigma> i) (\\<sigma>' i)\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow> (\\<forall>d. a \\<noteq> j:deliver(d))\n\ngoal (1 subgoal):\n 1. a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n    U (\\<sigma> i) (\\<sigma>' i)", "by clarsimp metis"], ["proof (state)\nthis:\n  a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n  U (\\<sigma> i) (\\<sigma>' i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n  U (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o);\n        oarrivemsg I \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> globala\n                          (\\<lambda>a.\n                              case a of\n                              (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                                castmsg (I \\<sigma>) aa \\<and>\n                                (aa \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>i d.\n                                     aa \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                (aa = \\<tau> \\<or>\n                                 (\\<exists>i d.\n                                     aa = i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                 (\\<forall>ia.\n                                     ia \\<notin> {i} \\<longrightarrow>\n                                     \\<sigma>' ia = \\<sigma> ia)))\n                          ((\\<sigma>, s), a, \\<sigma>', s')", "moreover"], ["proof (state)\nthis:\n  a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n  U (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o);\n        oarrivemsg I \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> globala\n                          (\\<lambda>a.\n                              case a of\n                              (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                                castmsg (I \\<sigma>) aa \\<and>\n                                (aa \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>i d.\n                                     aa \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                (aa = \\<tau> \\<or>\n                                 (\\<exists>i d.\n                                     aa = i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                 (\\<forall>ia.\n                                     ia \\<notin> {i} \\<longrightarrow>\n                                     \\<sigma>' ia = \\<sigma> ia)))\n                          ((\\<sigma>, s), a, \\<sigma>', s')", "from sor str oam"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n  oarrivemsg I \\<sigma> a", "have \"\\<forall>j. j\\<noteq>i \\<longrightarrow> (\\<forall>d. a \\<noteq> j:deliver(d))\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n  oarrivemsg I \\<sigma> a\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<noteq> i \\<longrightarrow> (\\<forall>d. a \\<noteq> j:deliver(d))", "by - (drule(2) ostep_invariantD [OF node_local_deliver], simp)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow> (\\<forall>d. a \\<noteq> j:deliver(d))\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o);\n        oarrivemsg I \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> globala\n                          (\\<lambda>a.\n                              case a of\n                              (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                                castmsg (I \\<sigma>) aa \\<and>\n                                (aa \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>i d.\n                                     aa \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                (aa = \\<tau> \\<or>\n                                 (\\<exists>i d.\n                                     aa = i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                 (\\<forall>ia.\n                                     ia \\<notin> {i} \\<longrightarrow>\n                                     \\<sigma>' ia = \\<sigma> ia)))\n                          ((\\<sigma>, s), a, \\<sigma>', s')", "moreover"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow> (\\<forall>d. a \\<noteq> j:deliver(d))\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o);\n        oarrivemsg I \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> globala\n                          (\\<lambda>a.\n                              case a of\n                              (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                                castmsg (I \\<sigma>) aa \\<and>\n                                (aa \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>i d.\n                                     aa \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                (aa = \\<tau> \\<or>\n                                 (\\<exists>i d.\n                                     aa = i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                 (\\<forall>ia.\n                                     ia \\<notin> {i} \\<longrightarrow>\n                                     \\<sigma>' ia = \\<sigma> ia)))\n                          ((\\<sigma>, s), a, \\<sigma>', s')", "from sor str oam"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n  oarrivemsg I \\<sigma> a", "have \"a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow> (\\<forall>j. j\\<noteq>i \\<longrightarrow> \\<sigma>' j = \\<sigma> j)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>) (other U {i})\n  ((\\<sigma>, s), a, \\<sigma>', s')\n  \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n  oarrivemsg I \\<sigma> a\n\ngoal (1 subgoal):\n 1. a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n    (\\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j)", "by - (drule(2) ostep_invariantD [OF node_tau_deliver_unchanged], simp)"], ["proof (state)\nthis:\n  a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n  (\\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable (\\<langle>i : onp i : R\\<rangle>\\<^sub>o)\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U {i});\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (\\<langle>i : onp i : R\\<rangle>\\<^sub>o);\n        oarrivemsg I \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> globala\n                          (\\<lambda>a.\n                              case a of\n                              (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                                castmsg (I \\<sigma>) aa \\<and>\n                                (aa \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>i d.\n                                     aa \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                (aa = \\<tau> \\<or>\n                                 (\\<exists>i d.\n                                     aa = i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\\<in>{i}.\n                                     U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                 (\\<forall>ia.\n                                     ia \\<notin> {i} \\<longrightarrow>\n                                     \\<sigma>' ia = \\<sigma> ia)))\n                          ((\\<sigma>, s), a, \\<sigma>', s')", "ultimately"], ["proof (chain)\npicking this:\n  castmsg (I \\<sigma>) a\n  a \\<noteq> \\<tau> \\<and>\n  (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n  S (\\<sigma> i) (\\<sigma>' i)\n  a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n  U (\\<sigma> i) (\\<sigma>' i)\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow> (\\<forall>d. a \\<noteq> j:deliver(d))\n  a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n  (\\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j)", "show \"?inv {i} ((\\<sigma>, s), a, (\\<sigma>', s'))\""], ["proof (prove)\nusing this:\n  castmsg (I \\<sigma>) a\n  a \\<noteq> \\<tau> \\<and>\n  (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n  S (\\<sigma> i) (\\<sigma>' i)\n  a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n  U (\\<sigma> i) (\\<sigma>' i)\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow> (\\<forall>d. a \\<noteq> j:deliver(d))\n  a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n  (\\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j)\n\ngoal (1 subgoal):\n 1. globala\n     (\\<lambda>a.\n         case a of\n         (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n           castmsg (I \\<sigma>) aa \\<and>\n           (aa \\<noteq> \\<tau> \\<and>\n            (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n            (\\<forall>i\\<in>{i}. S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n           (aa = \\<tau> \\<or>\n            (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n            (\\<forall>i\\<in>{i}. U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n            (\\<forall>ia.\n                ia \\<notin> {i} \\<longrightarrow>\n                \\<sigma>' ia = \\<sigma> ia)))\n     ((\\<sigma>, s), a, \\<sigma>', s')", "by simp"], ["proof (state)\nthis:\n  globala\n   (\\<lambda>a.\n       case a of\n       (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n         castmsg (I \\<sigma>) aa \\<and>\n         (aa \\<noteq> \\<tau> \\<and>\n          (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n          (\\<forall>i\\<in>{i}. S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n         (aa = \\<tau> \\<or>\n          (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n          (\\<forall>i\\<in>{i}. U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n          (\\<forall>ia.\n              ia \\<notin> {i} \\<longrightarrow>\n              \\<sigma>' ia = \\<sigma> ia)))\n   ((\\<sigma>, s), a, \\<sigma>', s')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  opnet onp\n   \\<langle>i; R\\<rangle> \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n             oarrivemsg I \\<sigma>,\n          other U (net_tree_ips \\<langle>i; R\\<rangle>) \\<rightarrow>)\n          globala\n           (\\<lambda>a.\n               case a of\n               (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                 castmsg (I \\<sigma>) aa \\<and>\n                 (aa \\<noteq> \\<tau> \\<and>\n                  (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n                  (\\<forall>i\\<in>net_tree_ips \\<langle>i; R\\<rangle>.\n                      S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                 (aa = \\<tau> \\<or>\n                  (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n                  (\\<forall>i\\<in>net_tree_ips \\<langle>i; R\\<rangle>.\n                      U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                  (\\<forall>ia.\n                      ia \\<notin> net_tree_ips\n                                   \\<langle>i; R\\<rangle> \\<longrightarrow>\n                      \\<sigma>' ia = \\<sigma> ia)))\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2.\n       \\<lbrakk>opnet onp\n                 p1 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n       oarrivemsg I \\<sigma>,\n    other U (net_tree_ips p1) \\<rightarrow>)\n    globala\n     (\\<lambda>a.\n         case a of\n         (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n           castmsg (I \\<sigma>) aa \\<and>\n           (aa \\<noteq> \\<tau> \\<and>\n            (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n            (\\<forall>i\\<in>net_tree_ips p1.\n                S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n           (aa = \\<tau> \\<or>\n            (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n            (\\<forall>i\\<in>net_tree_ips p1.\n                U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n            (\\<forall>i.\n                i \\<notin> net_tree_ips p1 \\<longrightarrow>\n                \\<sigma>' i = \\<sigma> i)));\n        opnet onp\n         p2 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                                     oarrivemsg I \\<sigma>,\n                                  other U (net_tree_ips p2) \\<rightarrow>)\n                                  globala\n                                   (\\<lambda>a.\n case a of\n (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n   castmsg (I \\<sigma>) aa \\<and>\n   (aa \\<noteq> \\<tau> \\<and>\n    (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n    (\\<forall>i\\<in>net_tree_ips p2. S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n   (aa = \\<tau> \\<or> (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n    (\\<forall>i\\<in>net_tree_ips p2. U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n    (\\<forall>i.\n        i \\<notin> net_tree_ips p2 \\<longrightarrow>\n        \\<sigma>' i = \\<sigma> i)))\\<rbrakk>\n       \\<Longrightarrow> opnet onp\n                          (p1 \\<parallel>\n                           p2) \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                  oarrivemsg I \\<sigma>,\n               other U (net_tree_ips (p1 \\<parallel> p2)) \\<rightarrow>)\n               globala\n                (\\<lambda>a.\n                    case a of\n                    (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                      castmsg (I \\<sigma>) aa \\<and>\n                      (aa \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips (p1 \\<parallel> p2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (aa = \\<tau> \\<or>\n                       (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips (p1 \\<parallel> p2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p1 \\<parallel> p2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2.\n       \\<lbrakk>opnet onp\n                 p1 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n       oarrivemsg I \\<sigma>,\n    other U (net_tree_ips p1) \\<rightarrow>)\n    globala\n     (\\<lambda>a.\n         case a of\n         (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n           castmsg (I \\<sigma>) aa \\<and>\n           (aa \\<noteq> \\<tau> \\<and>\n            (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n            (\\<forall>i\\<in>net_tree_ips p1.\n                S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n           (aa = \\<tau> \\<or>\n            (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n            (\\<forall>i\\<in>net_tree_ips p1.\n                U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n            (\\<forall>i.\n                i \\<notin> net_tree_ips p1 \\<longrightarrow>\n                \\<sigma>' i = \\<sigma> i)));\n        opnet onp\n         p2 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                                     oarrivemsg I \\<sigma>,\n                                  other U (net_tree_ips p2) \\<rightarrow>)\n                                  globala\n                                   (\\<lambda>a.\n case a of\n (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n   castmsg (I \\<sigma>) aa \\<and>\n   (aa \\<noteq> \\<tau> \\<and>\n    (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n    (\\<forall>i\\<in>net_tree_ips p2. S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n   (aa = \\<tau> \\<or> (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n    (\\<forall>i\\<in>net_tree_ips p2. U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n    (\\<forall>i.\n        i \\<notin> net_tree_ips p2 \\<longrightarrow>\n        \\<sigma>' i = \\<sigma> i)))\\<rbrakk>\n       \\<Longrightarrow> opnet onp\n                          (p1 \\<parallel>\n                           p2) \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                  oarrivemsg I \\<sigma>,\n               other U (net_tree_ips (p1 \\<parallel> p2)) \\<rightarrow>)\n               globala\n                (\\<lambda>a.\n                    case a of\n                    (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                      castmsg (I \\<sigma>) aa \\<and>\n                      (aa \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips (p1 \\<parallel> p2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (aa = \\<tau> \\<or>\n                       (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips (p1 \\<parallel> p2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p1 \\<parallel> p2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i)))", "fix p\\<^sub>1 p\\<^sub>2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2.\n       \\<lbrakk>opnet onp\n                 p1 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n       oarrivemsg I \\<sigma>,\n    other U (net_tree_ips p1) \\<rightarrow>)\n    globala\n     (\\<lambda>a.\n         case a of\n         (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n           castmsg (I \\<sigma>) aa \\<and>\n           (aa \\<noteq> \\<tau> \\<and>\n            (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n            (\\<forall>i\\<in>net_tree_ips p1.\n                S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n           (aa = \\<tau> \\<or>\n            (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n            (\\<forall>i\\<in>net_tree_ips p1.\n                U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n            (\\<forall>i.\n                i \\<notin> net_tree_ips p1 \\<longrightarrow>\n                \\<sigma>' i = \\<sigma> i)));\n        opnet onp\n         p2 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                                     oarrivemsg I \\<sigma>,\n                                  other U (net_tree_ips p2) \\<rightarrow>)\n                                  globala\n                                   (\\<lambda>a.\n case a of\n (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n   castmsg (I \\<sigma>) aa \\<and>\n   (aa \\<noteq> \\<tau> \\<and>\n    (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n    (\\<forall>i\\<in>net_tree_ips p2. S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n   (aa = \\<tau> \\<or> (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n    (\\<forall>i\\<in>net_tree_ips p2. U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n    (\\<forall>i.\n        i \\<notin> net_tree_ips p2 \\<longrightarrow>\n        \\<sigma>' i = \\<sigma> i)))\\<rbrakk>\n       \\<Longrightarrow> opnet onp\n                          (p1 \\<parallel>\n                           p2) \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                  oarrivemsg I \\<sigma>,\n               other U (net_tree_ips (p1 \\<parallel> p2)) \\<rightarrow>)\n               globala\n                (\\<lambda>a.\n                    case a of\n                    (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                      castmsg (I \\<sigma>) aa \\<and>\n                      (aa \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips (p1 \\<parallel> p2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (aa = \\<tau> \\<or>\n                       (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips (p1 \\<parallel> p2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p1 \\<parallel> p2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i)))", "assume inv1: \"opnet onp p\\<^sub>1 \\<Turnstile>\\<^sub>A (?I, ?U p\\<^sub>1 \\<rightarrow>) ?inv (net_tree_ips p\\<^sub>1)\"\n       and inv2: \"opnet onp p\\<^sub>2 \\<Turnstile>\\<^sub>A (?I, ?U p\\<^sub>2 \\<rightarrow>) ?inv (net_tree_ips p\\<^sub>2)\""], ["proof (state)\nthis:\n  opnet onp\n   p\\<^sub>1 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\noarrivemsg I \\<sigma>,\n                                   other U\n                                    (net_tree_ips p\\<^sub>1) \\<rightarrow>)\n                                   globala\n                                    (\\<lambda>a.\n  case a of\n  (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n    castmsg (I \\<sigma>) aa \\<and>\n    (aa \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips p\\<^sub>1.\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (aa = \\<tau> \\<or> (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips p\\<^sub>1.\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i)))\n  opnet onp\n   p\\<^sub>2 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\noarrivemsg I \\<sigma>,\n                                   other U\n                                    (net_tree_ips p\\<^sub>2) \\<rightarrow>)\n                                   globala\n                                    (\\<lambda>a.\n  case a of\n  (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n    castmsg (I \\<sigma>) aa \\<and>\n    (aa \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips p\\<^sub>2.\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (aa = \\<tau> \\<or> (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips p\\<^sub>2.\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i)))\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2.\n       \\<lbrakk>opnet onp\n                 p1 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n       oarrivemsg I \\<sigma>,\n    other U (net_tree_ips p1) \\<rightarrow>)\n    globala\n     (\\<lambda>a.\n         case a of\n         (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n           castmsg (I \\<sigma>) aa \\<and>\n           (aa \\<noteq> \\<tau> \\<and>\n            (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n            (\\<forall>i\\<in>net_tree_ips p1.\n                S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n           (aa = \\<tau> \\<or>\n            (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n            (\\<forall>i\\<in>net_tree_ips p1.\n                U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n            (\\<forall>i.\n                i \\<notin> net_tree_ips p1 \\<longrightarrow>\n                \\<sigma>' i = \\<sigma> i)));\n        opnet onp\n         p2 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                                     oarrivemsg I \\<sigma>,\n                                  other U (net_tree_ips p2) \\<rightarrow>)\n                                  globala\n                                   (\\<lambda>a.\n case a of\n (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n   castmsg (I \\<sigma>) aa \\<and>\n   (aa \\<noteq> \\<tau> \\<and>\n    (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n    (\\<forall>i\\<in>net_tree_ips p2. S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n   (aa = \\<tau> \\<or> (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n    (\\<forall>i\\<in>net_tree_ips p2. U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n    (\\<forall>i.\n        i \\<notin> net_tree_ips p2 \\<longrightarrow>\n        \\<sigma>' i = \\<sigma> i)))\\<rbrakk>\n       \\<Longrightarrow> opnet onp\n                          (p1 \\<parallel>\n                           p2) \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n                  oarrivemsg I \\<sigma>,\n               other U (net_tree_ips (p1 \\<parallel> p2)) \\<rightarrow>)\n               globala\n                (\\<lambda>a.\n                    case a of\n                    (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                      castmsg (I \\<sigma>) aa \\<and>\n                      (aa \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips (p1 \\<parallel> p2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (aa = \\<tau> \\<or>\n                       (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips (p1 \\<parallel> p2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p1 \\<parallel> p2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i)))", "show \"opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<Turnstile>\\<^sub>A (?I, ?U (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<rightarrow>) ?inv (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opnet onp\n     (p\\<^sub>1 \\<parallel>\n      p\\<^sub>2) \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n    oarrivemsg I \\<sigma>,\n other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<rightarrow>)\n globala\n  (\\<lambda>a.\n      case a of\n      (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n        castmsg (I \\<sigma>) aa \\<and>\n        (aa \\<noteq> \\<tau> \\<and>\n         (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n         (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n             S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n        (aa = \\<tau> \\<or>\n         (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n         (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n             U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n         (\\<forall>i.\n             i \\<notin> net_tree_ips\n                         (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n             \\<sigma>' i = \\<sigma> i)))", "proof (rule ostep_invariantI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> globala\n                          (\\<lambda>a.\n                              case a of\n                              (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                                castmsg (I \\<sigma>) aa \\<and>\n                                (aa \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>i d.\n                                     aa \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\n     \\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                                     S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                (aa = \\<tau> \\<or>\n                                 (\\<exists>i d.\n                                     aa = i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\n     \\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                                     U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                 (\\<forall>i.\n                                     i \\<notin> net_tree_ips\n           (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                                     \\<sigma>' i = \\<sigma> i)))\n                          ((\\<sigma>, s), a, \\<sigma>', s')", "fix \\<sigma> st a \\<sigma>' st'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> globala\n                          (\\<lambda>a.\n                              case a of\n                              (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                                castmsg (I \\<sigma>) aa \\<and>\n                                (aa \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>i d.\n                                     aa \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\n     \\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                                     S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                (aa = \\<tau> \\<or>\n                                 (\\<exists>i d.\n                                     aa = i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\n     \\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                                     U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                 (\\<forall>i.\n                                     i \\<notin> net_tree_ips\n           (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                                     \\<sigma>' i = \\<sigma> i)))\n                          ((\\<sigma>, s), a, \\<sigma>', s')", "assume \"(\\<sigma>, st) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) ?I (?U (p\\<^sub>1 \\<parallel> p\\<^sub>2))\"\n         and \"((\\<sigma>, st), a, (\\<sigma>', st')) \\<in> trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\"\n         and \"oarrivemsg I \\<sigma> a\""], ["proof (state)\nthis:\n  (\\<sigma>, st)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n  ((\\<sigma>, st), a, \\<sigma>', st')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n  oarrivemsg I \\<sigma> a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> globala\n                          (\\<lambda>a.\n                              case a of\n                              (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                                castmsg (I \\<sigma>) aa \\<and>\n                                (aa \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>i d.\n                                     aa \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\n     \\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                                     S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                (aa = \\<tau> \\<or>\n                                 (\\<exists>i d.\n                                     aa = i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\n     \\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                                     U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                 (\\<forall>i.\n                                     i \\<notin> net_tree_ips\n           (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                                     \\<sigma>' i = \\<sigma> i)))\n                          ((\\<sigma>, s), a, \\<sigma>', s')", "from this(1)"], ["proof (chain)\npicking this:\n  (\\<sigma>, st)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))", "obtain s t\n        where \"st = SubnetS s t\"\n          and *: \"(\\<sigma>, SubnetS s t) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) ?I (?U (p\\<^sub>1 \\<parallel> p\\<^sub>2))\""], ["proof (prove)\nusing this:\n  (\\<sigma>, st)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. (\\<And>s t.\n        \\<lbrakk>st = SubnetS s t;\n         (\\<sigma>, SubnetS s t)\n         \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                (other U\n                  (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (frule net_par_oreachable_is_subnet, metis)"], ["proof (state)\nthis:\n  st = SubnetS s t\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> globala\n                          (\\<lambda>a.\n                              case a of\n                              (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                                castmsg (I \\<sigma>) aa \\<and>\n                                (aa \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>i d.\n                                     aa \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\n     \\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                                     S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                (aa = \\<tau> \\<or>\n                                 (\\<exists>i d.\n                                     aa = i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\n     \\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                                     U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                 (\\<forall>i.\n                                     i \\<notin> net_tree_ips\n           (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                                     \\<sigma>' i = \\<sigma> i)))\n                          ((\\<sigma>, s), a, \\<sigma>', s')", "from this(2) and inv1 and inv2"], ["proof (chain)\npicking this:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n  opnet onp\n   p\\<^sub>1 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\noarrivemsg I \\<sigma>,\n                                   other U\n                                    (net_tree_ips p\\<^sub>1) \\<rightarrow>)\n                                   globala\n                                    (\\<lambda>a.\n  case a of\n  (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n    castmsg (I \\<sigma>) aa \\<and>\n    (aa \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips p\\<^sub>1.\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (aa = \\<tau> \\<or> (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips p\\<^sub>1.\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i)))\n  opnet onp\n   p\\<^sub>2 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\noarrivemsg I \\<sigma>,\n                                   other U\n                                    (net_tree_ips p\\<^sub>2) \\<rightarrow>)\n                                   globala\n                                    (\\<lambda>a.\n  case a of\n  (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n    castmsg (I \\<sigma>) aa \\<and>\n    (aa \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips p\\<^sub>2.\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (aa = \\<tau> \\<or> (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips p\\<^sub>2.\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i)))", "obtain sor: \"(\\<sigma>, s) \\<in> oreachable (opnet onp p\\<^sub>1) ?I (?U p\\<^sub>1)\"\n           and tor: \"(\\<sigma>, t) \\<in> oreachable (opnet onp p\\<^sub>2) ?I (?U p\\<^sub>2)\"\n           and \"net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\""], ["proof (prove)\nusing this:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n  opnet onp\n   p\\<^sub>1 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\noarrivemsg I \\<sigma>,\n                                   other U\n                                    (net_tree_ips p\\<^sub>1) \\<rightarrow>)\n                                   globala\n                                    (\\<lambda>a.\n  case a of\n  (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n    castmsg (I \\<sigma>) aa \\<and>\n    (aa \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips p\\<^sub>1.\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (aa = \\<tau> \\<or> (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips p\\<^sub>1.\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i)))\n  opnet onp\n   p\\<^sub>2 \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\noarrivemsg I \\<sigma>,\n                                   other U\n                                    (net_tree_ips p\\<^sub>2) \\<rightarrow>)\n                                   globala\n                                    (\\<lambda>a.\n  case a of\n  (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n    castmsg (I \\<sigma>) aa \\<and>\n    (aa \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips p\\<^sub>2.\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (aa = \\<tau> \\<or> (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips p\\<^sub>2.\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i)))\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>(\\<sigma>, s)\n              \\<in> oreachable (opnet onp p\\<^sub>1)\n                     (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                     (other U (net_tree_ips p\\<^sub>1));\n      (\\<sigma>, t)\n      \\<in> oreachable (opnet onp p\\<^sub>2)\n             (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n             (other U (net_tree_ips p\\<^sub>2));\n      net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (drule opnet_sync_action_subnet_oreachable [OF _ \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>], auto)"], ["proof (state)\nthis:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2))\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> globala\n                          (\\<lambda>a.\n                              case a of\n                              (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                                castmsg (I \\<sigma>) aa \\<and>\n                                (aa \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>i d.\n                                     aa \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\n     \\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                                     S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                (aa = \\<tau> \\<or>\n                                 (\\<exists>i d.\n                                     aa = i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\n     \\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                                     U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                 (\\<forall>i.\n                                     i \\<notin> net_tree_ips\n           (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                                     \\<sigma>' i = \\<sigma> i)))\n                          ((\\<sigma>, s), a, \\<sigma>', s')", "from * and \\<open>((\\<sigma>, st), a, (\\<sigma>', st')) \\<in> trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\\<close> and \\<open>st = SubnetS s t\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n  ((\\<sigma>, st), a, \\<sigma>', st')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n  st = SubnetS s t", "obtain s' t' where \"st' = SubnetS s' t'\"\n                       and \"((\\<sigma>, SubnetS s t), a, (\\<sigma>', SubnetS s' t'))\n                              \\<in> opnet_sos (trans (opnet onp p\\<^sub>1)) (trans (opnet onp p\\<^sub>2))\""], ["proof (prove)\nusing this:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n  ((\\<sigma>, st), a, \\<sigma>', st')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n  st = SubnetS s t\n\ngoal (1 subgoal):\n 1. (\\<And>s' t'.\n        \\<lbrakk>st' = SubnetS s' t';\n         ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n         \\<in> opnet_sos (automaton.trans (opnet onp p\\<^sub>1))\n                (automaton.trans (opnet onp p\\<^sub>2))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by clarsimp (frule opartial_net_preserves_subnets, metis)"], ["proof (state)\nthis:\n  st' = SubnetS s' t'\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> opnet_sos (automaton.trans (opnet onp p\\<^sub>1))\n         (automaton.trans (opnet onp p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> globala\n                          (\\<lambda>a.\n                              case a of\n                              (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                                castmsg (I \\<sigma>) aa \\<and>\n                                (aa \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>i d.\n                                     aa \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\n     \\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                                     S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                (aa = \\<tau> \\<or>\n                                 (\\<exists>i d.\n                                     aa = i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\n     \\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                                     U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                 (\\<forall>i.\n                                     i \\<notin> net_tree_ips\n           (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                                     \\<sigma>' i = \\<sigma> i)))\n                          ((\\<sigma>, s), a, \\<sigma>', s')", "from this(2)"], ["proof (chain)\npicking this:\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> opnet_sos (automaton.trans (opnet onp p\\<^sub>1))\n         (automaton.trans (opnet onp p\\<^sub>2))", "have\"castmsg (I \\<sigma>) a\n             \\<and> (a \\<noteq> \\<tau> \\<and> (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow> (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2). S (\\<sigma> i) (\\<sigma>' i)))\n             \\<and> (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow> (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2). U (\\<sigma> i) (\\<sigma>' i))\n                                                  \\<and> (\\<forall>i. i \\<notin> net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow> \\<sigma>' i = \\<sigma> i))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> opnet_sos (automaton.trans (opnet onp p\\<^sub>1))\n         (automaton.trans (opnet onp p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. castmsg (I \\<sigma>) a \\<and>\n    (a \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips\n                     (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i))", "proof cases"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "fix R m H K"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "assume \"a = R:*cast(m)\" \n           and str: \"((\\<sigma>, s), R:*cast(m), (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\"\n           and ttr: \"((\\<sigma>, t), H\\<not>K:arrive(m), (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  a = R:*cast(m)\n  ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "from sor and str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)", "have \"I \\<sigma> m \\<and> (\\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i))\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. I \\<sigma> m \\<and>\n    (\\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i))", "by (auto dest: ostep_invariantD [OF inv1])"], ["proof (state)\nthis:\n  I \\<sigma> m \\<and>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i))\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "moreover"], ["proof (state)\nthis:\n  I \\<sigma> m \\<and>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i))\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "with tor and ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n  I \\<sigma> m \\<and>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i))", "have \"\\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n  I \\<sigma> m \\<and>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i))\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)", "by (auto dest: ostep_invariantD [OF inv2])"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "ultimately"], ["proof (chain)\npicking this:\n  I \\<sigma> m \\<and>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i))\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)", "show ?thesis"], ["proof (prove)\nusing this:\n  I \\<sigma> m \\<and>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i))\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. castmsg (I \\<sigma>) a \\<and>\n    (a \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips\n                     (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i))", "using \\<open>a = R:*cast(m)\\<close>"], ["proof (prove)\nusing this:\n  I \\<sigma> m \\<and>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i))\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\n  a = R:*cast(m)\n\ngoal (1 subgoal):\n 1. castmsg (I \\<sigma>) a \\<and>\n    (a \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips\n                     (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i))", "by auto"], ["proof (state)\nthis:\n  castmsg (I \\<sigma>) a \\<and>\n  (a \\<noteq> \\<tau> \\<and>\n   (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n  (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n   (\\<forall>i.\n       i \\<notin> net_tree_ips\n                   (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n       \\<sigma>' i = \\<sigma> i))\n\ngoal (8 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "fix R m H K"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "assume \"a = R:*cast(m)\" \n           and str: \"((\\<sigma>, s), H\\<not>K:arrive(m), (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\"\n           and ttr: \"((\\<sigma>, t), R:*cast(m), (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  a = R:*cast(m)\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (8 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "from tor and ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"I \\<sigma> m \\<and> (\\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i))\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. I \\<sigma> m \\<and>\n    (\\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i))", "by (auto dest: ostep_invariantD [OF inv2])"], ["proof (state)\nthis:\n  I \\<sigma> m \\<and>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i))\n\ngoal (8 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "moreover"], ["proof (state)\nthis:\n  I \\<sigma> m \\<and>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i))\n\ngoal (8 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "with sor and str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  I \\<sigma> m \\<and>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i))", "have \"\\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  I \\<sigma> m \\<and>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i))\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)", "by (auto dest: ostep_invariantD [OF inv1])"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (8 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "ultimately"], ["proof (chain)\npicking this:\n  I \\<sigma> m \\<and>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i))\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)", "show ?thesis"], ["proof (prove)\nusing this:\n  I \\<sigma> m \\<and>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i))\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. castmsg (I \\<sigma>) a \\<and>\n    (a \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips\n                     (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i))", "using \\<open>a = R:*cast(m)\\<close>"], ["proof (prove)\nusing this:\n  I \\<sigma> m \\<and>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i))\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n  a = R:*cast(m)\n\ngoal (1 subgoal):\n 1. castmsg (I \\<sigma>) a \\<and>\n    (a \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips\n                     (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i))", "by auto"], ["proof (state)\nthis:\n  castmsg (I \\<sigma>) a \\<and>\n  (a \\<noteq> \\<tau> \\<and>\n   (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n  (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n   (\\<forall>i.\n       i \\<notin> net_tree_ips\n                   (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n       \\<sigma>' i = \\<sigma> i))\n\ngoal (7 subgoals):\n 1. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "fix H K m H' K'"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "assume \"a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m)\"\n           and str: \"((\\<sigma>, s), H\\<not>K:arrive(m), (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\"\n           and ttr: \"((\\<sigma>, t), H'\\<not>K':arrive(m), (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m)\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (7 subgoals):\n 1. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "from this(1) and \\<open>oarrivemsg I \\<sigma> a\\<close>"], ["proof (chain)\npicking this:\n  a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m)\n  oarrivemsg I \\<sigma> a", "have \"I \\<sigma> m\""], ["proof (prove)\nusing this:\n  a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m)\n  oarrivemsg I \\<sigma> a\n\ngoal (1 subgoal):\n 1. I \\<sigma> m", "by simp"], ["proof (state)\nthis:\n  I \\<sigma> m\n\ngoal (7 subgoals):\n 1. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "with sor and str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  I \\<sigma> m", "have \"\\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  I \\<sigma> m\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)", "by (auto dest: ostep_invariantD [OF inv1])"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (7 subgoals):\n 1. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "moreover"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (7 subgoals):\n 1. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "from tor and ttr and \\<open>I \\<sigma> m\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n  I \\<sigma> m", "have \"\\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n  I \\<sigma> m\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)", "by (auto dest: ostep_invariantD [OF inv2])"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (7 subgoals):\n 1. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. castmsg (I \\<sigma>) a \\<and>\n    (a \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips\n                     (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i))", "using \\<open>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\n  a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m)\n\ngoal (1 subgoal):\n 1. castmsg (I \\<sigma>) a \\<and>\n    (a \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips\n                     (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i))", "by auto"], ["proof (state)\nthis:\n  castmsg (I \\<sigma>) a \\<and>\n  (a \\<noteq> \\<tau> \\<and>\n   (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n  (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n   (\\<forall>i.\n       i \\<notin> net_tree_ips\n                   (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n       \\<sigma>' i = \\<sigma> i))\n\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "fix i d"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "assume \"a = i:deliver(d)\"\n           and str: \"((\\<sigma>, s), i:deliver(d), (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\""], ["proof (state)\nthis:\n  a = i:deliver(d)\n  ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "with sor"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1))\n  a = i:deliver(d)\n  ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)", "have \"((\\<forall>i\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> i) (\\<sigma>' i))\n                       \\<and> (\\<forall>i. i\\<notin>net_tree_ips p\\<^sub>1 \\<longrightarrow> \\<sigma>' i = \\<sigma> i))\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1))\n  a = i:deliver(d)\n  ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. (\\<forall>i\\<in>net_tree_ips p\\<^sub>1.\n        U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n    (\\<forall>i.\n        i \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n        \\<sigma>' i = \\<sigma> i)", "by (auto dest!: ostep_invariantD [OF inv1])"], ["proof (state)\nthis:\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>1.\n      U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n  (\\<forall>i.\n      i \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n      \\<sigma>' i = \\<sigma> i)\n\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "with \\<open>a = i:deliver(d)\\<close> and \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>"], ["proof (chain)\npicking this:\n  a = i:deliver(d)\n  U ?\\<xi> ?\\<xi>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>1.\n      U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n  (\\<forall>i.\n      i \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n      \\<sigma>' i = \\<sigma> i)", "show ?thesis"], ["proof (prove)\nusing this:\n  a = i:deliver(d)\n  U ?\\<xi> ?\\<xi>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>1.\n      U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n  (\\<forall>i.\n      i \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n      \\<sigma>' i = \\<sigma> i)\n\ngoal (1 subgoal):\n 1. castmsg (I \\<sigma>) a \\<and>\n    (a \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips\n                     (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i))", "by auto"], ["proof (state)\nthis:\n  castmsg (I \\<sigma>) a \\<and>\n  (a \\<noteq> \\<tau> \\<and>\n   (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n  (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n   (\\<forall>i.\n       i \\<notin> net_tree_ips\n                   (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n       \\<sigma>' i = \\<sigma> i))\n\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "fix i d"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "assume \"a = i:deliver(d)\"\n           and ttr: \"((\\<sigma>, t), i:deliver(d), (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  a = i:deliver(d)\n  ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "with tor"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2))\n  a = i:deliver(d)\n  ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"((\\<forall>i\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> i) (\\<sigma>' i))\n                       \\<and> (\\<forall>i. i\\<notin>net_tree_ips p\\<^sub>2 \\<longrightarrow> \\<sigma>' i = \\<sigma> i))\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2))\n  a = i:deliver(d)\n  ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<forall>i\\<in>net_tree_ips p\\<^sub>2.\n        U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n    (\\<forall>i.\n        i \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n        \\<sigma>' i = \\<sigma> i)", "by (auto dest!: ostep_invariantD [OF inv2])"], ["proof (state)\nthis:\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>2.\n      U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n  (\\<forall>i.\n      i \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n      \\<sigma>' i = \\<sigma> i)\n\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "with \\<open>a = i:deliver(d)\\<close> and \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>"], ["proof (chain)\npicking this:\n  a = i:deliver(d)\n  U ?\\<xi> ?\\<xi>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>2.\n      U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n  (\\<forall>i.\n      i \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n      \\<sigma>' i = \\<sigma> i)", "show ?thesis"], ["proof (prove)\nusing this:\n  a = i:deliver(d)\n  U ?\\<xi> ?\\<xi>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>2.\n      U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n  (\\<forall>i.\n      i \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n      \\<sigma>' i = \\<sigma> i)\n\ngoal (1 subgoal):\n 1. castmsg (I \\<sigma>) a \\<and>\n    (a \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips\n                     (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i))", "by auto"], ["proof (state)\nthis:\n  castmsg (I \\<sigma>) a \\<and>\n  (a \\<noteq> \\<tau> \\<and>\n   (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n  (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n   (\\<forall>i.\n       i \\<notin> net_tree_ips\n                   (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n       \\<sigma>' i = \\<sigma> i))\n\ngoal (4 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "assume \"a = \\<tau>\"\n           and str: \"((\\<sigma>, s), \\<tau>, (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\""], ["proof (state)\nthis:\n  a = \\<tau>\n  ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (4 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "with sor"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1))\n  a = \\<tau>\n  ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)", "have \"((\\<forall>i\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> i) (\\<sigma>' i))\n                       \\<and> (\\<forall>i. i\\<notin>net_tree_ips p\\<^sub>1 \\<longrightarrow> \\<sigma>' i = \\<sigma> i))\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1))\n  a = \\<tau>\n  ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. (\\<forall>i\\<in>net_tree_ips p\\<^sub>1.\n        U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n    (\\<forall>i.\n        i \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n        \\<sigma>' i = \\<sigma> i)", "by (auto dest!: ostep_invariantD [OF inv1])"], ["proof (state)\nthis:\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>1.\n      U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n  (\\<forall>i.\n      i \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n      \\<sigma>' i = \\<sigma> i)\n\ngoal (4 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 4. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "with \\<open>a = \\<tau>\\<close> and \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>"], ["proof (chain)\npicking this:\n  a = \\<tau>\n  U ?\\<xi> ?\\<xi>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>1.\n      U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n  (\\<forall>i.\n      i \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n      \\<sigma>' i = \\<sigma> i)", "show ?thesis"], ["proof (prove)\nusing this:\n  a = \\<tau>\n  U ?\\<xi> ?\\<xi>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>1.\n      U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n  (\\<forall>i.\n      i \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n      \\<sigma>' i = \\<sigma> i)\n\ngoal (1 subgoal):\n 1. castmsg (I \\<sigma>) a \\<and>\n    (a \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips\n                     (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i))", "by auto"], ["proof (state)\nthis:\n  castmsg (I \\<sigma>) a \\<and>\n  (a \\<noteq> \\<tau> \\<and>\n   (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n  (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n   (\\<forall>i.\n       i \\<notin> net_tree_ips\n                   (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n       \\<sigma>' i = \\<sigma> i))\n\ngoal (3 subgoals):\n 1. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "assume \"a = \\<tau>\"\n           and ttr: \"((\\<sigma>, t), \\<tau>, (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  a = \\<tau>\n  ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "with tor"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2))\n  a = \\<tau>\n  ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"((\\<forall>i\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> i) (\\<sigma>' i))\n                       \\<and> (\\<forall>i. i\\<notin>net_tree_ips p\\<^sub>2 \\<longrightarrow> \\<sigma>' i = \\<sigma> i))\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2))\n  a = \\<tau>\n  ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<forall>i\\<in>net_tree_ips p\\<^sub>2.\n        U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n    (\\<forall>i.\n        i \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n        \\<sigma>' i = \\<sigma> i)", "by (auto dest!: ostep_invariantD [OF inv2])"], ["proof (state)\nthis:\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>2.\n      U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n  (\\<forall>i.\n      i \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n      \\<sigma>' i = \\<sigma> i)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                      (a \\<noteq> \\<tau> \\<and>\n                       (\\<forall>i d.\n                           a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                      (a = \\<tau> \\<or>\n                       (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                       (\\<forall>i\\<in>net_tree_ips\n  (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                       (\\<forall>i.\n                           i \\<notin> net_tree_ips\n (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                           \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 3. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "with \\<open>a = \\<tau>\\<close> and \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>"], ["proof (chain)\npicking this:\n  a = \\<tau>\n  U ?\\<xi> ?\\<xi>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>2.\n      U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n  (\\<forall>i.\n      i \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n      \\<sigma>' i = \\<sigma> i)", "show ?thesis"], ["proof (prove)\nusing this:\n  a = \\<tau>\n  U ?\\<xi> ?\\<xi>\n  (\\<forall>i\\<in>net_tree_ips p\\<^sub>2.\n      U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n  (\\<forall>i.\n      i \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n      \\<sigma>' i = \\<sigma> i)\n\ngoal (1 subgoal):\n 1. castmsg (I \\<sigma>) a \\<and>\n    (a \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips\n                     (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i))", "by auto"], ["proof (state)\nthis:\n  castmsg (I \\<sigma>) a \\<and>\n  (a \\<noteq> \\<tau> \\<and>\n   (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n  (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n   (\\<forall>i.\n       i \\<notin> net_tree_ips\n                   (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n       \\<sigma>' i = \\<sigma> i))\n\ngoal (2 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "fix i i'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "assume \"a = connect(i, i')\"\n           and str: \"((\\<sigma>, s), connect(i, i'), (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\"\n           and ttr: \"((\\<sigma>, t), connect(i, i'), (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  a = connect(i, i')\n  ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (2 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "from sor and str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)", "have \"\\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)", "by (auto dest: ostep_invariantD [OF inv1])"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (2 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "moreover"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (2 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "from tor and ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"\\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)", "by (auto dest: ostep_invariantD [OF inv2])"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (2 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. castmsg (I \\<sigma>) a \\<and>\n    (a \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips\n                     (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i))", "using \\<open>a = connect(i, i')\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\n  a = connect(i, i')\n\ngoal (1 subgoal):\n 1. castmsg (I \\<sigma>) a \\<and>\n    (a \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips\n                     (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i))", "by auto"], ["proof (state)\nthis:\n  castmsg (I \\<sigma>) a \\<and>\n  (a \\<noteq> \\<tau> \\<and>\n   (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n  (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n   (\\<forall>i.\n       i \\<notin> net_tree_ips\n                   (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n       \\<sigma>' i = \\<sigma> i))\n\ngoal (1 subgoal):\n 1. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "fix i i'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "assume \"a = disconnect(i, i')\"\n           and str: \"((\\<sigma>, s), disconnect(i, i'), (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\"\n           and ttr: \"((\\<sigma>, t), disconnect(i, i'), (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  a = disconnect(i, i')\n  ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "from sor and str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)", "have \"\\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)", "by (auto dest: ostep_invariantD [OF inv1])"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "moreover"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "from tor and ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"\\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)", "by (auto dest: ostep_invariantD [OF inv2])"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> castmsg (I \\<sigma>) a \\<and>\n                         (a \\<noteq> \\<tau> \\<and>\n                          (\\<forall>i d.\n                              a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                         (a = \\<tau> \\<or>\n                          (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                          (\\<forall>i\\<in>net_tree_ips\n     (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                          (\\<forall>i.\n                              i \\<notin> net_tree_ips\n    (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                              \\<sigma>' i = \\<sigma> i))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. castmsg (I \\<sigma>) a \\<and>\n    (a \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips\n                     (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i))", "using \\<open>a = disconnect(i, i')\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\n  a = disconnect(i, i')\n\ngoal (1 subgoal):\n 1. castmsg (I \\<sigma>) a \\<and>\n    (a \\<noteq> \\<tau> \\<and>\n     (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n    (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n     (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n         U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n     (\\<forall>i.\n         i \\<notin> net_tree_ips\n                     (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n         \\<sigma>' i = \\<sigma> i))", "by auto"], ["proof (state)\nthis:\n  castmsg (I \\<sigma>) a \\<and>\n  (a \\<noteq> \\<tau> \\<and>\n   (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n  (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n   (\\<forall>i.\n       i \\<notin> net_tree_ips\n                   (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n       \\<sigma>' i = \\<sigma> i))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  castmsg (I \\<sigma>) a \\<and>\n  (a \\<noteq> \\<tau> \\<and>\n   (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n  (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n   (\\<forall>i.\n       i \\<notin> net_tree_ips\n                   (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n       \\<sigma>' i = \\<sigma> i))\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s a \\<sigma>' s'.\n       \\<lbrakk>(\\<sigma>, s)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>)\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, s), a, \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        oarrivemsg I \\<sigma> a\\<rbrakk>\n       \\<Longrightarrow> globala\n                          (\\<lambda>a.\n                              case a of\n                              (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n                                castmsg (I \\<sigma>) aa \\<and>\n                                (aa \\<noteq> \\<tau> \\<and>\n                                 (\\<forall>i d.\n                                     aa \\<noteq>\n                                     i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\n     \\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                                     S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                (aa = \\<tau> \\<or>\n                                 (\\<exists>i d.\n                                     aa = i:deliver(d)) \\<longrightarrow>\n                                 (\\<forall>i\n     \\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                                     U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                 (\\<forall>i.\n                                     i \\<notin> net_tree_ips\n           (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n                                     \\<sigma>' i = \\<sigma> i)))\n                          ((\\<sigma>, s), a, \\<sigma>', s')", "thus \"?inv (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) ((\\<sigma>, st), a, (\\<sigma>', st'))\""], ["proof (prove)\nusing this:\n  castmsg (I \\<sigma>) a \\<and>\n  (a \\<noteq> \\<tau> \\<and>\n   (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n  (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n   (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n   (\\<forall>i.\n       i \\<notin> net_tree_ips\n                   (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n       \\<sigma>' i = \\<sigma> i))\n\ngoal (1 subgoal):\n 1. globala\n     (\\<lambda>a.\n         case a of\n         (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n           castmsg (I \\<sigma>) aa \\<and>\n           (aa \\<noteq> \\<tau> \\<and>\n            (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n            (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n           (aa = \\<tau> \\<or>\n            (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n            (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n            (\\<forall>i.\n                i \\<notin> net_tree_ips\n                            (p\\<^sub>1 \\<parallel>\n                             p\\<^sub>2) \\<longrightarrow>\n                \\<sigma>' i = \\<sigma> i)))\n     ((\\<sigma>, st), a, \\<sigma>', st')", "by simp"], ["proof (state)\nthis:\n  globala\n   (\\<lambda>a.\n       case a of\n       (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n         castmsg (I \\<sigma>) aa \\<and>\n         (aa \\<noteq> \\<tau> \\<and>\n          (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n          (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n              S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n         (aa = \\<tau> \\<or>\n          (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n          (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n              U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n          (\\<forall>i.\n              i \\<notin> net_tree_ips\n                          (p\\<^sub>1 \\<parallel>\n                           p\\<^sub>2) \\<longrightarrow>\n              \\<sigma>' i = \\<sigma> i)))\n   ((\\<sigma>, st), a, \\<sigma>', st')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  opnet onp\n   (p\\<^sub>1 \\<parallel>\n    p\\<^sub>2) \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _.\n  oarrivemsg I \\<sigma>,\n                                     other U\n(net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<rightarrow>)\n                                     globala\n(\\<lambda>a.\n    case a of\n    (\\<sigma>, aa, \\<sigma>') \\<Rightarrow>\n      castmsg (I \\<sigma>) aa \\<and>\n      (aa \\<noteq> \\<tau> \\<and>\n       (\\<forall>i d. aa \\<noteq> i:deliver(d)) \\<longrightarrow>\n       (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n           S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n      (aa = \\<tau> \\<or> (\\<exists>i d. aa = i:deliver(d)) \\<longrightarrow>\n       (\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n           U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n       (\\<forall>i.\n           i \\<notin> net_tree_ips\n                       (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n           \\<sigma>' i = \\<sigma> i)))\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem subnet_oreachable:\n  assumes \"(\\<sigma>, SubnetS s t) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                                (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) (oarrivemsg I))\n                                (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\"\n          (is \"_ \\<in> oreachable _ (?S (p\\<^sub>1 \\<parallel> p\\<^sub>2)) (?U (p\\<^sub>1 \\<parallel> p\\<^sub>2))\")\n\n      and \"\\<And>\\<xi>. S \\<xi> \\<xi>\"\n      and \"\\<And>\\<xi>. U \\<xi> \\<xi>\"\n\n      and node1: \"\\<And>i R. \\<langle>i : onp i : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U {i} \\<rightarrow>)\n                      globala (\\<lambda>(\\<sigma>, a, _). castmsg (I \\<sigma>) a)\"\n      and node2: \"\\<And>i R. \\<langle>i : onp i : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U {i} \\<rightarrow>)\n                      globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). (a \\<noteq> \\<tau> \\<and> (\\<forall>d. a \\<noteq> i:deliver(d)) \\<longrightarrow> S (\\<sigma> i) (\\<sigma>' i)))\"\n      and node3: \"\\<And>i R. \\<langle>i : onp i : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U {i} \\<rightarrow>)\n                      globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). (a = \\<tau> \\<or> (\\<exists>d. a = i:deliver(d)) \\<longrightarrow> U (\\<sigma> i) (\\<sigma>' i)))\"\n\n    shows \"(\\<sigma>, s) \\<in> oreachable (opnet onp p\\<^sub>1)\n                               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n                               (other U (net_tree_ips p\\<^sub>1))\n           \\<and> (\\<sigma>, t) \\<in> oreachable (opnet onp p\\<^sub>2)\n                                  (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n                                  (other U (net_tree_ips p\\<^sub>2))\n           \\<and> net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>, s)\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>, t)\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2)) \\<and>\n    net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "using assms(1)"], ["proof (prove)\nusing this:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n           (oarrivemsg I))\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. (\\<sigma>, s)\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>, t)\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2)) \\<and>\n    net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "proof (induction rule: oreachable_par_subnet_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> s t.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       (\\<sigma>, s)\n       \\<in> oreachable (opnet onp p\\<^sub>1)\n              (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n              (other U (net_tree_ips p\\<^sub>1)) \\<and>\n       (\\<sigma>, t)\n       \\<in> oreachable (opnet onp p\\<^sub>2)\n              (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n              (other U (net_tree_ips p\\<^sub>2)) \\<and>\n       net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n 2. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 3. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "case (init \\<sigma> s t)"], ["proof (state)\nthis:\n  (\\<sigma>, SubnetS s t)\n  \\<in> init (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> s t.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       (\\<sigma>, s)\n       \\<in> oreachable (opnet onp p\\<^sub>1)\n              (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n              (other U (net_tree_ips p\\<^sub>1)) \\<and>\n       (\\<sigma>, t)\n       \\<in> oreachable (opnet onp p\\<^sub>2)\n              (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n              (other U (net_tree_ips p\\<^sub>2)) \\<and>\n       net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n 2. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 3. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "hence sinit: \"(\\<sigma>, s) \\<in> init (opnet onp p\\<^sub>1)\"\n      and tinit: \"(\\<sigma>, t) \\<in> init (opnet onp p\\<^sub>2)\"\n      and \"net_ips s \\<inter> net_ips t = {}\""], ["proof (prove)\nusing this:\n  (\\<sigma>, SubnetS s t)\n  \\<in> init (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>, s) \\<in> init (opnet onp p\\<^sub>1) &&&\n    (\\<sigma>, t) \\<in> init (opnet onp p\\<^sub>2) &&&\n    net_ips s \\<inter> net_ips t = {}", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>, s) \\<in> init (opnet onp p\\<^sub>1)\n  (\\<sigma>, t) \\<in> init (opnet onp p\\<^sub>2)\n  net_ips s \\<inter> net_ips t = {}\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> s t.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       (\\<sigma>, s)\n       \\<in> oreachable (opnet onp p\\<^sub>1)\n              (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n              (other U (net_tree_ips p\\<^sub>1)) \\<and>\n       (\\<sigma>, t)\n       \\<in> oreachable (opnet onp p\\<^sub>2)\n              (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n              (other U (net_tree_ips p\\<^sub>2)) \\<and>\n       net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n 2. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 3. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>, s) \\<in> init (opnet onp p\\<^sub>1)\n  (\\<sigma>, t) \\<in> init (opnet onp p\\<^sub>2)\n  net_ips s \\<inter> net_ips t = {}\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> s t.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       (\\<sigma>, s)\n       \\<in> oreachable (opnet onp p\\<^sub>1)\n              (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n              (other U (net_tree_ips p\\<^sub>1)) \\<and>\n       (\\<sigma>, t)\n       \\<in> oreachable (opnet onp p\\<^sub>2)\n              (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n              (other U (net_tree_ips p\\<^sub>2)) \\<and>\n       net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n 2. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 3. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "from sinit"], ["proof (chain)\npicking this:\n  (\\<sigma>, s) \\<in> init (opnet onp p\\<^sub>1)", "have \"net_ips s = net_tree_ips p\\<^sub>1\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s) \\<in> init (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. net_ips s = net_tree_ips p\\<^sub>1", "by (rule opnet_net_ips_net_tree_ips_init)"], ["proof (state)\nthis:\n  net_ips s = net_tree_ips p\\<^sub>1\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> s t.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       (\\<sigma>, s)\n       \\<in> oreachable (opnet onp p\\<^sub>1)\n              (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n              (other U (net_tree_ips p\\<^sub>1)) \\<and>\n       (\\<sigma>, t)\n       \\<in> oreachable (opnet onp p\\<^sub>2)\n              (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n              (other U (net_tree_ips p\\<^sub>2)) \\<and>\n       net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n 2. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 3. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "moreover"], ["proof (state)\nthis:\n  net_ips s = net_tree_ips p\\<^sub>1\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> s t.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       (\\<sigma>, s)\n       \\<in> oreachable (opnet onp p\\<^sub>1)\n              (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n              (other U (net_tree_ips p\\<^sub>1)) \\<and>\n       (\\<sigma>, t)\n       \\<in> oreachable (opnet onp p\\<^sub>2)\n              (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n              (other U (net_tree_ips p\\<^sub>2)) \\<and>\n       net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n 2. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 3. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "from tinit"], ["proof (chain)\npicking this:\n  (\\<sigma>, t) \\<in> init (opnet onp p\\<^sub>2)", "have \"net_ips t = net_tree_ips p\\<^sub>2\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t) \\<in> init (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. net_ips t = net_tree_ips p\\<^sub>2", "by (rule opnet_net_ips_net_tree_ips_init)"], ["proof (state)\nthis:\n  net_ips t = net_tree_ips p\\<^sub>2\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> s t.\n       (\\<sigma>, SubnetS s t)\n       \\<in> init\n              (opnet onp\n                (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<Longrightarrow>\n       (\\<sigma>, s)\n       \\<in> oreachable (opnet onp p\\<^sub>1)\n              (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n              (other U (net_tree_ips p\\<^sub>1)) \\<and>\n       (\\<sigma>, t)\n       \\<in> oreachable (opnet onp p\\<^sub>2)\n              (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n              (other U (net_tree_ips p\\<^sub>2)) \\<and>\n       net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n 2. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 3. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>, s) \\<in> init (opnet onp p\\<^sub>1)\n  (\\<sigma>, t) \\<in> init (opnet onp p\\<^sub>2)\n  net_ips s \\<inter> net_ips t = {}\n  net_ips s = net_tree_ips p\\<^sub>1\n  net_ips t = net_tree_ips p\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  (\\<sigma>, s) \\<in> init (opnet onp p\\<^sub>1)\n  (\\<sigma>, t) \\<in> init (opnet onp p\\<^sub>2)\n  net_ips s \\<inter> net_ips t = {}\n  net_ips s = net_tree_ips p\\<^sub>1\n  net_ips t = net_tree_ips p\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<sigma>, s)\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>, t)\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2)) \\<and>\n    net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "by (auto elim: oreachable_init)"], ["proof (state)\nthis:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2)) \\<and>\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 2. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 2. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "case (other \\<sigma> s t \\<sigma>')"], ["proof (state)\nthis:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n           (oarrivemsg I))\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n  other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n   \\<sigma>'\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2)) \\<and>\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 2. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "hence \"other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma> \\<sigma>'\"\n      and IHs: \"(\\<sigma>, s) \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\"\n      and IHt: \"(\\<sigma>, t) \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\"\n      and \"net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\""], ["proof (prove)\nusing this:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n           (oarrivemsg I))\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n  other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n   \\<sigma>'\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2)) \\<and>\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (1 subgoal):\n 1. (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n      \\<sigma>' &&&\n     (\\<sigma>, s)\n     \\<in> oreachable (opnet onp p\\<^sub>1)\n            (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n            (other U (net_tree_ips p\\<^sub>1))) &&&\n    (\\<sigma>, t)\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2)) &&&\n    net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "by auto"], ["proof (state)\nthis:\n  other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n   \\<sigma>'\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 2. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "have \"(\\<sigma>', s) \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', s)\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>', s)\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "from \\<open>?U (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<sigma> \\<sigma>'\\<close> and \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>"], ["proof (chain)\npicking this:\n  other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n   \\<sigma>'\n  U ?\\<xi> ?\\<xi>", "have \"?U p\\<^sub>1 \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n   \\<sigma>'\n  U ?\\<xi> ?\\<xi>\n\ngoal (1 subgoal):\n 1. other U (net_tree_ips p\\<^sub>1) \\<sigma> \\<sigma>'", "by (rule other_net_tree_ips_par_left)"], ["proof (state)\nthis:\n  other U (net_tree_ips p\\<^sub>1) \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s)\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "with IHs"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  other U (net_tree_ips p\\<^sub>1) \\<sigma> \\<sigma>'", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  other U (net_tree_ips p\\<^sub>1) \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s)\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "by - (erule(1) oreachable_other')"], ["proof (state)\nthis:\n  (\\<sigma>', s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<sigma>', s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 2. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 2. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "have \"(\\<sigma>', t) \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', t)\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>', t)\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "from \\<open>?U (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<sigma> \\<sigma>'\\<close> and \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>"], ["proof (chain)\npicking this:\n  other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n   \\<sigma>'\n  U ?\\<xi> ?\\<xi>", "have \"?U p\\<^sub>2 \\<sigma> \\<sigma>'\""], ["proof (prove)\nusing this:\n  other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n   \\<sigma>'\n  U ?\\<xi> ?\\<xi>\n\ngoal (1 subgoal):\n 1. other U (net_tree_ips p\\<^sub>2) \\<sigma> \\<sigma>'", "by (rule other_net_tree_ips_par_right)"], ["proof (state)\nthis:\n  other U (net_tree_ips p\\<^sub>2) \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t)\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "with IHt"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  other U (net_tree_ips p\\<^sub>2) \\<sigma> \\<sigma>'", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  other U (net_tree_ips p\\<^sub>2) \\<sigma> \\<sigma>'\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t)\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "by - (erule(1) oreachable_other')"], ["proof (state)\nthis:\n  (\\<sigma>', t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<sigma>', t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> s t \\<sigma>'.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)) \\<sigma>\n         \\<sigma>';\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s)\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t)\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}\n 2. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))", "show ?case"], ["proof (prove)\nusing this:\n  (\\<sigma>', s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s)\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t)\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2)) \\<and>\n    net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "using \\<open>net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>', s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s)\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t)\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2)) \\<and>\n    net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "by simp"], ["proof (state)\nthis:\n  (\\<sigma>', s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2)) \\<and>\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "case (local \\<sigma> s t \\<sigma>' s' t' a)"], ["proof (state)\nthis:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n           (oarrivemsg I))\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n  otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n   (oarrivemsg I) \\<sigma> \\<sigma>' a\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2)) \\<and>\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "hence stor: \"(\\<sigma>, SubnetS s t) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) (?S (p\\<^sub>1 \\<parallel> p\\<^sub>2)) (?U (p\\<^sub>1 \\<parallel> p\\<^sub>2))\"\n      and tr: \"((\\<sigma>, SubnetS s t), a, (\\<sigma>', SubnetS s' t')) \\<in> trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\"\n      and \"?S (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<sigma> \\<sigma>' a\"\n      and sor: \"(\\<sigma>, s) \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\"\n      and tor: \"(\\<sigma>, t) \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\"\n      and \"net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\""], ["proof (prove)\nusing this:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n           (oarrivemsg I))\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n  otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n   (oarrivemsg I) \\<sigma> \\<sigma>' a\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2)) \\<and>\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, SubnetS s t)\n     \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n            (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n              (oarrivemsg I))\n            (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))) &&&\n     ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n     \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) &&&\n     otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n      (oarrivemsg I) \\<sigma> \\<sigma>' a) &&&\n    (\\<sigma>, s)\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1)) &&&\n    (\\<sigma>, t)\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2)) &&&\n    net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n           (oarrivemsg I))\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n  otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n   (oarrivemsg I) \\<sigma> \\<sigma>' a\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "have act: \"\\<And>p. opnet onp p \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U (net_tree_ips p) \\<rightarrow>)\n                 globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). castmsg (I \\<sigma>) a\n                                        \\<and> (a \\<noteq> \\<tau> \\<and> (\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n                                               (\\<forall>i\\<in>net_tree_ips p. S (\\<sigma> i) (\\<sigma>' i)))\n                                        \\<and> (a = \\<tau> \\<or> (\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n                                               ((\\<forall>i\\<in>net_tree_ips p. U (\\<sigma> i) (\\<sigma>' i))\n                                             \\<and> (\\<forall>i. i\\<notin>net_tree_ips p \\<longrightarrow> \\<sigma>' i = \\<sigma> i))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       opnet onp\n        p \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>,\n                                other U (net_tree_ips p) \\<rightarrow>)\n                                globala\n                                 (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                     castmsg (I \\<sigma>) a \\<and>\n                                     (a \\<noteq> \\<tau> \\<and>\n(\\<forall>i d. a \\<noteq> i:deliver(d)) \\<longrightarrow>\n(\\<forall>i\\<in>net_tree_ips p. S (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                     (a = \\<tau> \\<or>\n(\\<exists>i d. a = i:deliver(d)) \\<longrightarrow>\n(\\<forall>i\\<in>net_tree_ips p. U (\\<sigma> i) (\\<sigma>' i)) \\<and>\n(\\<forall>i.\n    i \\<notin> net_tree_ips p \\<longrightarrow> \\<sigma>' i = \\<sigma> i)))", "by (rule lift_opnet_sync_action [OF assms(3-6)])"], ["proof (state)\nthis:\n  opnet onp\n   ?p \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>,\n                            other U (net_tree_ips ?p) \\<rightarrow>)\n                            globala\n                             (\\<lambda>(\\<sigma>, a, \\<sigma>').\n                                 castmsg (I \\<sigma>) a \\<and>\n                                 (a \\<noteq> \\<tau> \\<and>\n                                  (\\<forall>i d.\na \\<noteq> i:deliver(d)) \\<longrightarrow>\n                                  (\\<forall>i\\<in>net_tree_ips ?p.\nS (\\<sigma> i) (\\<sigma>' i))) \\<and>\n                                 (a = \\<tau> \\<or>\n                                  (\\<exists>i d.\na = i:deliver(d)) \\<longrightarrow>\n                                  (\\<forall>i\\<in>net_tree_ips ?p.\nU (\\<sigma> i) (\\<sigma>' i)) \\<and>\n                                  (\\<forall>i.\ni \\<notin> net_tree_ips ?p \\<longrightarrow> \\<sigma>' i = \\<sigma> i)))\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "from \\<open>?S (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<sigma> \\<sigma>' a\\<close>"], ["proof (chain)\npicking this:\n  otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n   (oarrivemsg I) \\<sigma> \\<sigma>' a", "have \"\\<forall>j. j \\<notin> net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)\"\n                                and \"oarrivemsg I \\<sigma> a\""], ["proof (prove)\nusing this:\n  otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n   (oarrivemsg I) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips\n                   (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n       S (\\<sigma> j) (\\<sigma>' j) &&&\n    oarrivemsg I \\<sigma> a", "by (auto elim!: otherwithE)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips\n                 (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n     S (\\<sigma> j) (\\<sigma>' j)\n  oarrivemsg I \\<sigma> a\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "from tr"], ["proof (chain)\npicking this:\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))", "have \"((\\<sigma>, SubnetS s t), a, (\\<sigma>', SubnetS s' t'))\n                    \\<in> opnet_sos (trans (opnet onp p\\<^sub>1)) (trans (opnet onp p\\<^sub>2))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n    \\<in> opnet_sos (automaton.trans (opnet onp p\\<^sub>1))\n           (automaton.trans (opnet onp p\\<^sub>2))", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> opnet_sos (automaton.trans (opnet onp p\\<^sub>1))\n         (automaton.trans (opnet onp p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "hence \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\n         \\<and> (\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n  \\<in> opnet_sos (automaton.trans (opnet onp p\\<^sub>1))\n         (automaton.trans (opnet onp p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "proof (cases)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "fix H K m H' K'"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "assume \"a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m)\"\n         and str: \"((\\<sigma>, s), H\\<not>K:arrive(m), (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\"\n         and ttr: \"((\\<sigma>, t), H'\\<not>K':arrive(m), (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m)\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "from this(1) and \\<open>?S (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<sigma> \\<sigma>' a\\<close>"], ["proof (chain)\npicking this:\n  a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m)\n  otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n   (oarrivemsg I) \\<sigma> \\<sigma>' a", "have \"I \\<sigma> m\""], ["proof (prove)\nusing this:\n  a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m)\n  otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n   (oarrivemsg I) \\<sigma> \\<sigma>' a\n\ngoal (1 subgoal):\n 1. I \\<sigma> m", "by auto"], ["proof (state)\nthis:\n  I \\<sigma> m\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "with sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  I \\<sigma> m", "have \"\\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  I \\<sigma> m\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)", "by - (drule(1) ostep_arrive_invariantD [OF act], simp_all)"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "from \\<open>I \\<sigma> m\\<close> tor ttr"], ["proof (chain)\npicking this:\n  I \\<sigma> m\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"\\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  I \\<sigma> m\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)", "by - (drule(1) ostep_arrive_invariantD [OF act], simp_all)"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)", "have \"\\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)", "using \\<open>\\<forall>j. j \\<notin> net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. S (\\<sigma> i) (\\<sigma>' i)\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. S (\\<sigma> i) (\\<sigma>' i)\n  \\<forall>j.\n     j \\<notin> net_tree_ips\n                 (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n     S (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "with \\<open>I \\<sigma> m\\<close> sor str"], ["proof (chain)\npicking this:\n  I \\<sigma> m\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)", "have \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  I \\<sigma> m\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "from \\<open>\\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\\<close> \\<open>I \\<sigma> m\\<close> tor ttr"], ["proof (chain)\npicking this:\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n  I \\<sigma> m\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"(\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n  I \\<sigma> m\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (9 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>H K m H' K'.\n       \\<lbrakk>a = (H \\<union> H')\\<not>(K \\<union> K'):arrive(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H'\\<not>K':arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 9. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", ".."], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (8 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "fix R m H K"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "assume str: \"((\\<sigma>, s), R:*cast(m), (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\"\n         and ttr: \"((\\<sigma>, t), H\\<not>K:arrive(m), (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (8 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "from sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)", "have \"I \\<sigma> m\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. I \\<sigma> m", "by - (drule(1) ostep_arrive_invariantD [OF act], simp_all)"], ["proof (state)\nthis:\n  I \\<sigma> m\n\ngoal (8 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "with sor str tor ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n  I \\<sigma> m", "have \"\\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n  I \\<sigma> m\n\ngoal (1 subgoal):\n 1. \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)", "using \\<open>\\<forall>j. j \\<notin> net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n  I \\<sigma> m\n  \\<forall>j.\n     j \\<notin> net_tree_ips\n                 (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n     S (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)", "by (fastforce dest!: ostep_arrive_invariantD [OF act] ostep_arrive_invariantD [OF act])"], ["proof (state)\nthis:\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (8 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "with \\<open>I \\<sigma> m\\<close> sor str"], ["proof (chain)\npicking this:\n  I \\<sigma> m\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)", "have \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  I \\<sigma> m\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (8 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (8 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "from \\<open>\\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\\<close> \\<open>I \\<sigma> m\\<close> tor ttr"], ["proof (chain)\npicking this:\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n  I \\<sigma> m\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"(\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n  I \\<sigma> m\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (8 subgoals):\n 1. \\<And>R m H K.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), R:*cast(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), H\\<not>K:arrive(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 8. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", ".."], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (7 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "fix R m H K"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "assume str: \"((\\<sigma>, s), H\\<not>K:arrive(m), (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\"\n         and ttr: \"((\\<sigma>, t), R:*cast(m), (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (7 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "from tor ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"I \\<sigma> m\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. I \\<sigma> m", "by - (drule(1) ostep_arrive_invariantD [OF act], simp_all)"], ["proof (state)\nthis:\n  I \\<sigma> m\n\ngoal (7 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "with sor str tor ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n  I \\<sigma> m", "have \"\\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n  I \\<sigma> m\n\ngoal (1 subgoal):\n 1. \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)", "using \\<open>\\<forall>j. j \\<notin> net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n  I \\<sigma> m\n  \\<forall>j.\n     j \\<notin> net_tree_ips\n                 (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n     S (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)", "by (fastforce dest!: ostep_arrive_invariantD [OF act] ostep_arrive_invariantD [OF act])"], ["proof (state)\nthis:\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (7 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "with \\<open>I \\<sigma> m\\<close> sor str"], ["proof (chain)\npicking this:\n  I \\<sigma> m\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)", "have \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  I \\<sigma> m\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (7 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (7 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "from \\<open>\\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\\<close> \\<open>I \\<sigma> m\\<close> tor ttr"], ["proof (chain)\npicking this:\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n  I \\<sigma> m\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"(\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n  I \\<sigma> m\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (7 subgoals):\n 1. \\<And>H K m R.\n       \\<lbrakk>a = R:*cast(m);\n        ((\\<sigma>, s), H\\<not>K:arrive(m), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), R:*cast(m), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2);\n        H \\<subseteq> R; K \\<inter> R = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 7. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", ".."], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "fix i i'"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "assume str: \"((\\<sigma>, s), connect(i, i'), (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\"\n         and ttr: \"((\\<sigma>, t), connect(i, i'), (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "with sor tor"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"\\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)", "using \\<open>\\<forall>j. j \\<notin> net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n  \\<forall>j.\n     j \\<notin> net_tree_ips\n                 (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n     S (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)", "by (fastforce dest!: ostep_arrive_invariantD [OF act] ostep_arrive_invariantD [OF act])"], ["proof (state)\nthis:\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "with sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)", "have \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "from \\<open>\\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\\<close> tor ttr"], ["proof (chain)\npicking this:\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"(\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (6 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        ((\\<sigma>, s), connect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), connect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 6. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", ".."], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "fix i i'"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "assume str: \"((\\<sigma>, s), disconnect(i, i'), (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\"\n         and ttr: \"((\\<sigma>, t), disconnect(i, i'), (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "with sor tor"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"\\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)", "using \\<open>\\<forall>j. j \\<notin> net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n  \\<forall>j.\n     j \\<notin> net_tree_ips\n                 (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<longrightarrow>\n     S (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)", "by (fastforce dest!: ostep_arrive_invariantD [OF act] ostep_arrive_invariantD [OF act])"], ["proof (state)\nthis:\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "with sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)", "have \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "from \\<open>\\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\\<close> tor ttr"], ["proof (chain)\npicking this:\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"(\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  \\<forall>i. S (\\<sigma> i) (\\<sigma>' i)\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (5 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 5. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        ((\\<sigma>, s), disconnect(i, i'), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1);\n        ((\\<sigma>, t), disconnect(i, i'), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", ".."], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "fix i d"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "assume \"t' = t\"\n         and str: \"((\\<sigma>, s), i:deliver(d), (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\""], ["proof (state)\nthis:\n  t' = t\n  ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "from sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)", "have \"\\<forall>j. j\\<notin>net_tree_ips p\\<^sub>1 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n       \\<sigma>' j = \\<sigma> j", "by - (drule(1) ostep_arrive_invariantD [OF act], simp_all)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "hence \"\\<forall>j. j\\<notin>net_tree_ips p\\<^sub>1 \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n       S (\\<sigma> j) (\\<sigma>' j)", "by (auto intro: \\<open>\\<And>\\<xi>. S \\<xi> \\<xi>\\<close>)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     S (\\<sigma> j) (\\<sigma>' j)\n\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "with sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     S (\\<sigma> j) (\\<sigma>' j)", "have \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     S (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "have \"(\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "from \\<open>\\<forall>j. j\\<notin>net_tree_ips p\\<^sub>1 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<close> and \\<open>net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "have \"\\<forall>j. j\\<in>net_tree_ips p\\<^sub>2 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n       \\<sigma>' j = \\<sigma> j", "by auto"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "from sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)", "have \"\\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)", "by - (drule(1) ostep_arrive_invariantD [OF act], simp_all)"], ["proof (state)\nthis:\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "using tor \\<open>t' = t\\<close> \\<open>\\<forall>j. j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  t' = t\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "by (clarsimp elim!: oreachable_other')\n             (metis otherI \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>)+"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (4 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); t' = t;\n        ((\\<sigma>, s), i:deliver(d), \\<sigma>', s')\n        \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 4. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", ".."], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "fix i d"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "assume \"s' = s\"\n         and ttr: \"((\\<sigma>, t), i:deliver(d), (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  s' = s\n  ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "from tor ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"\\<forall>j. j\\<notin>net_tree_ips p\\<^sub>2 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n       \\<sigma>' j = \\<sigma> j", "by - (drule(1) ostep_arrive_invariantD [OF act], simp_all)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "hence \"\\<forall>j. j\\<notin>net_tree_ips p\\<^sub>2 \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n       S (\\<sigma> j) (\\<sigma>' j)", "by (auto intro: \\<open>\\<And>\\<xi>. S \\<xi> \\<xi>\\<close>)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     S (\\<sigma> j) (\\<sigma>' j)\n\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "with tor ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     S (\\<sigma> j) (\\<sigma>' j)", "have \"(\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     S (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "have \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "from \\<open>\\<forall>j. j\\<notin>net_tree_ips p\\<^sub>2 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<close> and \\<open>net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "have \"\\<forall>j. j\\<in>net_tree_ips p\\<^sub>1 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n       \\<sigma>' j = \\<sigma> j", "by auto"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "moreover"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "from tor ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"\\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)", "by - (drule(1) ostep_arrive_invariantD [OF act], simp_all)"], ["proof (state)\nthis:\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "using sor \\<open>s' = s\\<close> \\<open>\\<forall>j. j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  s' = s\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "by (clarsimp elim!: oreachable_other')\n             (metis otherI \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>)+"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (3 subgoals):\n 1. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d); s' = s;\n        ((\\<sigma>, t), i:deliver(d), \\<sigma>', t')\n        \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 3. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "by - (rule conjI)"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "assume \"s' = s\"\n         and ttr: \"((\\<sigma>, t), \\<tau>, (\\<sigma>', t')) \\<in> trans (opnet onp p\\<^sub>2)\""], ["proof (state)\nthis:\n  s' = s\n  ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "from tor ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"\\<forall>j. j\\<notin>net_tree_ips p\\<^sub>2 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n       \\<sigma>' j = \\<sigma> j", "by - (drule(1) ostep_arrive_invariantD [OF act], simp_all)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "hence \"\\<forall>j. j\\<notin>net_tree_ips p\\<^sub>2 \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n       S (\\<sigma> j) (\\<sigma>' j)", "by (auto intro: \\<open>\\<And>\\<xi>. S \\<xi> \\<xi>\\<close>)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     S (\\<sigma> j) (\\<sigma>' j)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "with tor ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     S (\\<sigma> j) (\\<sigma>' j)", "have \"(\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     S (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "have \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "from \\<open>\\<forall>j. j\\<notin>net_tree_ips p\\<^sub>2 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<close> and \\<open>net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "have \"\\<forall>j. j\\<in>net_tree_ips p\\<^sub>1 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n       \\<sigma>' j = \\<sigma> j", "by auto"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "moreover"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "from tor ttr"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)", "have \"\\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n  \\<in> automaton.trans (opnet onp p\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)", "by - (drule(1) ostep_arrive_invariantD [OF act], simp_all)"], ["proof (state)\nthis:\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "using sor \\<open>s' = s\\<close> \\<open>\\<forall>j. j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>2. U (\\<sigma> j) (\\<sigma>' j)\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  s' = s\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "by (clarsimp elim!: oreachable_other')\n             (metis otherI \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>)+"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))\n 2. \\<lbrakk>a = \\<tau>; s' = s;\n     ((\\<sigma>, t), \\<tau>, \\<sigma>', t')\n     \\<in> automaton.trans (opnet onp p\\<^sub>2)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "by - (rule conjI)"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "assume \"t' = t\"\n         and str: \"((\\<sigma>, s), \\<tau>, (\\<sigma>', s')) \\<in> trans (opnet onp p\\<^sub>1)\""], ["proof (state)\nthis:\n  t' = t\n  ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "from sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)", "have \"\\<forall>j. j\\<notin>net_tree_ips p\\<^sub>1 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n       \\<sigma>' j = \\<sigma> j", "by - (drule(1) ostep_arrive_invariantD [OF act], simp_all)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "hence \"\\<forall>j. j\\<notin>net_tree_ips p\\<^sub>1 \\<longrightarrow> S (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n       S (\\<sigma> j) (\\<sigma>' j)", "by (auto intro: \\<open>\\<And>\\<xi>. S \\<xi> \\<xi>\\<close>)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     S (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "with sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     S (\\<sigma> j) (\\<sigma>' j)", "have \"(\\<sigma>', s') \\<in> oreachable (opnet onp p\\<^sub>1) (?S p\\<^sub>1) (?U p\\<^sub>1)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     S (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1))", "by - (erule(1) oreachable_local, auto)"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "have \"(\\<sigma>', t') \\<in> oreachable (opnet onp p\\<^sub>2) (?S p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "from \\<open>\\<forall>j. j\\<notin>net_tree_ips p\\<^sub>1 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<close> and \\<open>net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "have \"\\<forall>j. j\\<in>net_tree_ips p\\<^sub>2 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n       \\<sigma>' j = \\<sigma> j", "by auto"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "moreover"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "from sor str"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)", "have \"\\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n  \\<in> automaton.trans (opnet onp p\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)", "by - (drule(1) ostep_arrive_invariantD [OF act], simp_all)"], ["proof (state)\nthis:\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "using tor \\<open>t' = t\\<close> \\<open>\\<forall>j. j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<in> net_tree_ips p\\<^sub>2 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<forall>j\\<in>net_tree_ips p\\<^sub>1. U (\\<sigma> j) (\\<sigma>' j)\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n  t' = t\n  \\<forall>j.\n     j \\<notin> net_tree_ips p\\<^sub>1 \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", "by (clarsimp elim!: oreachable_other')\n             (metis otherI \\<open>\\<And>\\<xi>. U \\<xi> \\<xi>\\<close>)+"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a = \\<tau>; t' = t;\n     ((\\<sigma>, s), \\<tau>, \\<sigma>', s')\n     \\<in> automaton.trans (opnet onp p\\<^sub>1)\\<rbrakk>\n    \\<Longrightarrow> (\\<sigma>', s')\n                      \\<in> oreachable (opnet onp p\\<^sub>1)\n                             (otherwith S (net_tree_ips p\\<^sub>1)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                      (\\<sigma>', t')\n                      \\<in> oreachable (opnet onp p\\<^sub>2)\n                             (otherwith S (net_tree_ips p\\<^sub>2)\n                               (oarrivemsg I))\n                             (other U (net_tree_ips p\\<^sub>2))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2))", ".."], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> s t \\<sigma>' s' t' a.\n       \\<lbrakk>(\\<sigma>, SubnetS s t)\n                \\<in> oreachable\n                       (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                       (otherwith S\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                         (oarrivemsg I))\n                       (other U\n                         (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)));\n        ((\\<sigma>, SubnetS s t), a, \\<sigma>', SubnetS s' t')\n        \\<in> automaton.trans (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2));\n        otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I) \\<sigma> \\<sigma>' a;\n        (\\<sigma>, s)\n        \\<in> oreachable (opnet onp p\\<^sub>1)\n               (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>1)) \\<and>\n        (\\<sigma>, t)\n        \\<in> oreachable (opnet onp p\\<^sub>2)\n               (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n               (other U (net_tree_ips p\\<^sub>2)) \\<and>\n        net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>', s')\n                         \\<in> oreachable (opnet onp p\\<^sub>1)\n                                (otherwith S (net_tree_ips p\\<^sub>1)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>1)) \\<and>\n                         (\\<sigma>', t')\n                         \\<in> oreachable (opnet onp p\\<^sub>2)\n                                (otherwith S (net_tree_ips p\\<^sub>2)\n                                  (oarrivemsg I))\n                                (other U (net_tree_ips p\\<^sub>2)) \\<and>\n                         net_tree_ips p\\<^sub>1 \\<inter>\n                         net_tree_ips p\\<^sub>2 =\n                         {}", "with \\<open>net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\\<close>"], ["proof (chain)\npicking this:\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))", "show ?case"], ["proof (prove)\nusing this:\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', s')\n    \\<in> oreachable (opnet onp p\\<^sub>1)\n           (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>1)) \\<and>\n    (\\<sigma>', t')\n    \\<in> oreachable (opnet onp p\\<^sub>2)\n           (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n           (other U (net_tree_ips p\\<^sub>2)) \\<and>\n    net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}", "by simp"], ["proof (state)\nthis:\n  (\\<sigma>', s')\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1)) \\<and>\n  (\\<sigma>', t')\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2)) \\<and>\n  net_tree_ips p\\<^sub>1 \\<inter> net_tree_ips p\\<^sub>2 = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas subnet_oreachable1 [dest] = subnet_oreachable [THEN conjunct1, rotated 1]"], ["", "lemmas subnet_oreachable2 [dest] = subnet_oreachable [THEN conjunct2, THEN conjunct1, rotated 1]"], ["", "lemmas subnet_oreachable_disjoint [dest] = subnet_oreachable\n                                                    [THEN conjunct2, THEN conjunct2, rotated 1]"], ["", "corollary pnet_lift:\n  assumes \"\\<And>ii R\\<^sub>i. \\<langle>ii : onp ii : R\\<^sub>i\\<rangle>\\<^sub>o\n              \\<Turnstile> (otherwith S {ii} (oarrivemsg I), other U {ii} \\<rightarrow>) global (P ii)\"\n\n      and \"\\<And>\\<xi>. S \\<xi> \\<xi>\"\n      and \"\\<And>\\<xi>. U \\<xi> \\<xi>\"\n\n      and node1: \"\\<And>i R. \\<langle>i : onp i : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U {i} \\<rightarrow>)\n                      globala (\\<lambda>(\\<sigma>, a, _). castmsg (I \\<sigma>) a)\"\n      and node2: \"\\<And>i R. \\<langle>i : onp i : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U {i} \\<rightarrow>)\n                      globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). (a \\<noteq> \\<tau> \\<and> (\\<forall>d. a \\<noteq> i:deliver(d)) \\<longrightarrow> S (\\<sigma> i) (\\<sigma>' i)))\"\n      and node3: \"\\<And>i R. \\<langle>i : onp i : R\\<rangle>\\<^sub>o \\<Turnstile>\\<^sub>A (\\<lambda>\\<sigma> _. oarrivemsg I \\<sigma>, other U {i} \\<rightarrow>)\n                      globala (\\<lambda>(\\<sigma>, a, \\<sigma>'). (a = \\<tau> \\<or> (\\<exists>d. a = i:deliver(d)) \\<longrightarrow> U (\\<sigma> i) (\\<sigma>' i)))\"\n\n    shows \"opnet onp p \\<Turnstile> (otherwith S (net_tree_ips p) (oarrivemsg I),\n                       other U (net_tree_ips p) \\<rightarrow>) global (\\<lambda>\\<sigma>. \\<forall>i\\<in>net_tree_ips p. P i \\<sigma>)\"\n      (is \"_ \\<Turnstile> (?owS p, ?U p \\<rightarrow>) _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. opnet onp\n     p \\<Turnstile> (otherwith S (net_tree_ips p) (oarrivemsg I),\n                     other U (net_tree_ips p) \\<rightarrow>)\n                     global\n                      (\\<lambda>\\<sigma>.\n                          \\<forall>i\\<in>net_tree_ips p. P i \\<sigma>)", "proof (induction p)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R.\n       opnet onp\n        \\<langle>i; R\\<rangle> \\<Turnstile> (otherwith S\n        (net_tree_ips \\<langle>i; R\\<rangle>) (oarrivemsg I),\n       other U (net_tree_ips \\<langle>i; R\\<rangle>) \\<rightarrow>)\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips \\<langle>i; R\\<rangle>.\n               P i \\<sigma>)\n 2. \\<And>p1 p2.\n       \\<lbrakk>opnet onp\n                 p1 \\<Turnstile> (otherwith S (net_tree_ips p1)\n                                   (oarrivemsg I),\n                                  other U (net_tree_ips p1) \\<rightarrow>)\n                                  global\n                                   (\\<lambda>\\<sigma>.\n \\<forall>i\\<in>net_tree_ips p1. P i \\<sigma>);\n        opnet onp\n         p2 \\<Turnstile> (otherwith S (net_tree_ips p2) (oarrivemsg I),\n                          other U (net_tree_ips p2) \\<rightarrow>)\n                          global\n                           (\\<lambda>\\<sigma>.\n                               \\<forall>i\\<in>net_tree_ips p2.\n                                  P i \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> opnet onp\n                          (p1 \\<parallel>\n                           p2) \\<Turnstile> (otherwith S\n        (net_tree_ips (p1 \\<parallel> p2)) (oarrivemsg I),\n       other U (net_tree_ips (p1 \\<parallel> p2)) \\<rightarrow>)\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips (p1 \\<parallel> p2). P i \\<sigma>)", "fix ii R\\<^sub>i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R.\n       opnet onp\n        \\<langle>i; R\\<rangle> \\<Turnstile> (otherwith S\n        (net_tree_ips \\<langle>i; R\\<rangle>) (oarrivemsg I),\n       other U (net_tree_ips \\<langle>i; R\\<rangle>) \\<rightarrow>)\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips \\<langle>i; R\\<rangle>.\n               P i \\<sigma>)\n 2. \\<And>p1 p2.\n       \\<lbrakk>opnet onp\n                 p1 \\<Turnstile> (otherwith S (net_tree_ips p1)\n                                   (oarrivemsg I),\n                                  other U (net_tree_ips p1) \\<rightarrow>)\n                                  global\n                                   (\\<lambda>\\<sigma>.\n \\<forall>i\\<in>net_tree_ips p1. P i \\<sigma>);\n        opnet onp\n         p2 \\<Turnstile> (otherwith S (net_tree_ips p2) (oarrivemsg I),\n                          other U (net_tree_ips p2) \\<rightarrow>)\n                          global\n                           (\\<lambda>\\<sigma>.\n                               \\<forall>i\\<in>net_tree_ips p2.\n                                  P i \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> opnet onp\n                          (p1 \\<parallel>\n                           p2) \\<Turnstile> (otherwith S\n        (net_tree_ips (p1 \\<parallel> p2)) (oarrivemsg I),\n       other U (net_tree_ips (p1 \\<parallel> p2)) \\<rightarrow>)\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips (p1 \\<parallel> p2). P i \\<sigma>)", "from assms(1)"], ["proof (chain)\npicking this:\n  \\<langle>?ii : onp ?ii : ?R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile> (otherwith\n                                S {?ii} (oarrivemsg I),\n                               other U {?ii} \\<rightarrow>) global (P ?ii)", "show \"opnet onp \\<langle>ii; R\\<^sub>i\\<rangle> \\<Turnstile> (?owS \\<langle>ii; R\\<^sub>i\\<rangle>, ?U \\<langle>ii; R\\<^sub>i\\<rangle> \\<rightarrow>)\n                                         global (\\<lambda>\\<sigma>. \\<forall>i\\<in>net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>. P i \\<sigma>)\""], ["proof (prove)\nusing this:\n  \\<langle>?ii : onp ?ii : ?R\\<^sub>i\\<rangle>\\<^sub>o \\<Turnstile> (otherwith\n                                S {?ii} (oarrivemsg I),\n                               other U {?ii} \\<rightarrow>) global (P ?ii)\n\ngoal (1 subgoal):\n 1. opnet onp\n     \\<langle>ii; R\\<^sub>i\\<rangle> \\<Turnstile> (otherwith S\n              (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (oarrivemsg I),\n             other U\n              (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) \\<rightarrow>)\n             global\n              (\\<lambda>\\<sigma>.\n                  \\<forall>i\\<in>net_tree_ips\n                                  \\<langle>ii; R\\<^sub>i\\<rangle>.\n                     P i \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  opnet onp\n   \\<langle>ii; R\\<^sub>i\\<rangle> \\<Turnstile> (otherwith S\n            (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (oarrivemsg I),\n           other U\n            (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) \\<rightarrow>)\n           global\n            (\\<lambda>\\<sigma>.\n                \\<forall>i\\<in>net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>.\n                   P i \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2.\n       \\<lbrakk>opnet onp\n                 p1 \\<Turnstile> (otherwith S (net_tree_ips p1)\n                                   (oarrivemsg I),\n                                  other U (net_tree_ips p1) \\<rightarrow>)\n                                  global\n                                   (\\<lambda>\\<sigma>.\n \\<forall>i\\<in>net_tree_ips p1. P i \\<sigma>);\n        opnet onp\n         p2 \\<Turnstile> (otherwith S (net_tree_ips p2) (oarrivemsg I),\n                          other U (net_tree_ips p2) \\<rightarrow>)\n                          global\n                           (\\<lambda>\\<sigma>.\n                               \\<forall>i\\<in>net_tree_ips p2.\n                                  P i \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> opnet onp\n                          (p1 \\<parallel>\n                           p2) \\<Turnstile> (otherwith S\n        (net_tree_ips (p1 \\<parallel> p2)) (oarrivemsg I),\n       other U (net_tree_ips (p1 \\<parallel> p2)) \\<rightarrow>)\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips (p1 \\<parallel> p2). P i \\<sigma>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2.\n       \\<lbrakk>opnet onp\n                 p1 \\<Turnstile> (otherwith S (net_tree_ips p1)\n                                   (oarrivemsg I),\n                                  other U (net_tree_ips p1) \\<rightarrow>)\n                                  global\n                                   (\\<lambda>\\<sigma>.\n \\<forall>i\\<in>net_tree_ips p1. P i \\<sigma>);\n        opnet onp\n         p2 \\<Turnstile> (otherwith S (net_tree_ips p2) (oarrivemsg I),\n                          other U (net_tree_ips p2) \\<rightarrow>)\n                          global\n                           (\\<lambda>\\<sigma>.\n                               \\<forall>i\\<in>net_tree_ips p2.\n                                  P i \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> opnet onp\n                          (p1 \\<parallel>\n                           p2) \\<Turnstile> (otherwith S\n        (net_tree_ips (p1 \\<parallel> p2)) (oarrivemsg I),\n       other U (net_tree_ips (p1 \\<parallel> p2)) \\<rightarrow>)\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips (p1 \\<parallel> p2). P i \\<sigma>)", "fix p\\<^sub>1 p\\<^sub>2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2.\n       \\<lbrakk>opnet onp\n                 p1 \\<Turnstile> (otherwith S (net_tree_ips p1)\n                                   (oarrivemsg I),\n                                  other U (net_tree_ips p1) \\<rightarrow>)\n                                  global\n                                   (\\<lambda>\\<sigma>.\n \\<forall>i\\<in>net_tree_ips p1. P i \\<sigma>);\n        opnet onp\n         p2 \\<Turnstile> (otherwith S (net_tree_ips p2) (oarrivemsg I),\n                          other U (net_tree_ips p2) \\<rightarrow>)\n                          global\n                           (\\<lambda>\\<sigma>.\n                               \\<forall>i\\<in>net_tree_ips p2.\n                                  P i \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> opnet onp\n                          (p1 \\<parallel>\n                           p2) \\<Turnstile> (otherwith S\n        (net_tree_ips (p1 \\<parallel> p2)) (oarrivemsg I),\n       other U (net_tree_ips (p1 \\<parallel> p2)) \\<rightarrow>)\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips (p1 \\<parallel> p2). P i \\<sigma>)", "assume ih1: \"opnet onp p\\<^sub>1 \\<Turnstile> (?owS p\\<^sub>1, ?U p\\<^sub>1 \\<rightarrow>) global (\\<lambda>\\<sigma>. \\<forall>i\\<in>net_tree_ips p\\<^sub>1. P i \\<sigma>)\"\n       and ih2: \"opnet onp p\\<^sub>2 \\<Turnstile> (?owS p\\<^sub>2, ?U p\\<^sub>2 \\<rightarrow>) global (\\<lambda>\\<sigma>. \\<forall>i\\<in>net_tree_ips p\\<^sub>2. P i \\<sigma>)\""], ["proof (state)\nthis:\n  opnet onp\n   p\\<^sub>1 \\<Turnstile> (otherwith S (net_tree_ips p\\<^sub>1)\n                            (oarrivemsg I),\n                           other U (net_tree_ips p\\<^sub>1) \\<rightarrow>)\n                           global\n                            (\\<lambda>\\<sigma>.\n                                \\<forall>i\\<in>net_tree_ips p\\<^sub>1.\n                                   P i \\<sigma>)\n  opnet onp\n   p\\<^sub>2 \\<Turnstile> (otherwith S (net_tree_ips p\\<^sub>2)\n                            (oarrivemsg I),\n                           other U (net_tree_ips p\\<^sub>2) \\<rightarrow>)\n                           global\n                            (\\<lambda>\\<sigma>.\n                                \\<forall>i\\<in>net_tree_ips p\\<^sub>2.\n                                   P i \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2.\n       \\<lbrakk>opnet onp\n                 p1 \\<Turnstile> (otherwith S (net_tree_ips p1)\n                                   (oarrivemsg I),\n                                  other U (net_tree_ips p1) \\<rightarrow>)\n                                  global\n                                   (\\<lambda>\\<sigma>.\n \\<forall>i\\<in>net_tree_ips p1. P i \\<sigma>);\n        opnet onp\n         p2 \\<Turnstile> (otherwith S (net_tree_ips p2) (oarrivemsg I),\n                          other U (net_tree_ips p2) \\<rightarrow>)\n                          global\n                           (\\<lambda>\\<sigma>.\n                               \\<forall>i\\<in>net_tree_ips p2.\n                                  P i \\<sigma>)\\<rbrakk>\n       \\<Longrightarrow> opnet onp\n                          (p1 \\<parallel>\n                           p2) \\<Turnstile> (otherwith S\n        (net_tree_ips (p1 \\<parallel> p2)) (oarrivemsg I),\n       other U (net_tree_ips (p1 \\<parallel> p2)) \\<rightarrow>)\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips (p1 \\<parallel> p2). P i \\<sigma>)", "show \"opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<Turnstile> (?owS (p\\<^sub>1 \\<parallel> p\\<^sub>2), ?U (p\\<^sub>1 \\<parallel> p\\<^sub>2) \\<rightarrow>)\n                             global (\\<lambda>\\<sigma>. \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2). P i \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opnet onp\n     (p\\<^sub>1 \\<parallel>\n      p\\<^sub>2) \\<Turnstile> (otherwith S\n                                (net_tree_ips\n                                  (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                                (oarrivemsg I),\n                               other U\n                                (net_tree_ips\n                                  (p\\<^sub>1 \\<parallel>\n                                   p\\<^sub>2)) \\<rightarrow>)\n                               global\n                                (\\<lambda>\\<sigma>.\n                                    \\<forall>i\n       \\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n P i \\<sigma>)", "unfolding oinvariant_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball\n     (oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n       (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (oarrivemsg I))\n       (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))))\n     (global\n       (\\<lambda>\\<sigma>.\n           \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n              P i \\<sigma>))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                (otherwith S\n                  (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                  (oarrivemsg I))\n                (other U\n                  (net_tree_ips\n                    (p\\<^sub>1 \\<parallel> p\\<^sub>2))) \\<Longrightarrow>\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n               P i \\<sigma>)\n        x", "fix pq"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                (otherwith S\n                  (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                  (oarrivemsg I))\n                (other U\n                  (net_tree_ips\n                    (p\\<^sub>1 \\<parallel> p\\<^sub>2))) \\<Longrightarrow>\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n               P i \\<sigma>)\n        x", "assume \"pq \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2)) (?owS (p\\<^sub>1 \\<parallel> p\\<^sub>2)) (?U (p\\<^sub>1 \\<parallel> p\\<^sub>2))\""], ["proof (state)\nthis:\n  pq \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n            (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n              (oarrivemsg I))\n            (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                (otherwith S\n                  (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                  (oarrivemsg I))\n                (other U\n                  (net_tree_ips\n                    (p\\<^sub>1 \\<parallel> p\\<^sub>2))) \\<Longrightarrow>\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n               P i \\<sigma>)\n        x", "moreover"], ["proof (state)\nthis:\n  pq \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n            (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n              (oarrivemsg I))\n            (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                (otherwith S\n                  (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                  (oarrivemsg I))\n                (other U\n                  (net_tree_ips\n                    (p\\<^sub>1 \\<parallel> p\\<^sub>2))) \\<Longrightarrow>\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n               P i \\<sigma>)\n        x", "then"], ["proof (chain)\npicking this:\n  pq \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n            (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n              (oarrivemsg I))\n            (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))", "obtain \\<sigma> s t where \"pq = (\\<sigma>, SubnetS s t)\""], ["proof (prove)\nusing this:\n  pq \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n            (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n              (oarrivemsg I))\n            (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> s t.\n        pq = (\\<sigma>, SubnetS s t) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis net_par_oreachable_is_subnet surjective_pairing)"], ["proof (state)\nthis:\n  pq = (\\<sigma>, SubnetS s t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                (otherwith S\n                  (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                  (oarrivemsg I))\n                (other U\n                  (net_tree_ips\n                    (p\\<^sub>1 \\<parallel> p\\<^sub>2))) \\<Longrightarrow>\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n               P i \\<sigma>)\n        x", "ultimately"], ["proof (chain)\npicking this:\n  pq \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n            (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n              (oarrivemsg I))\n            (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n  pq = (\\<sigma>, SubnetS s t)", "have \"(\\<sigma>, SubnetS s t) \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                                               (?owS (p\\<^sub>1 \\<parallel> p\\<^sub>2)) (?U (p\\<^sub>1 \\<parallel> p\\<^sub>2))\""], ["proof (prove)\nusing this:\n  pq \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n            (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n              (oarrivemsg I))\n            (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n  pq = (\\<sigma>, SubnetS s t)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, SubnetS s t)\n    \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n           (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n             (oarrivemsg I))\n           (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))", "by simp"], ["proof (state)\nthis:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n           (oarrivemsg I))\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                (otherwith S\n                  (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                  (oarrivemsg I))\n                (other U\n                  (net_tree_ips\n                    (p\\<^sub>1 \\<parallel> p\\<^sub>2))) \\<Longrightarrow>\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n               P i \\<sigma>)\n        x", "then"], ["proof (chain)\npicking this:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n           (oarrivemsg I))\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))", "obtain sor: \"(\\<sigma>, s) \\<in> oreachable (opnet onp p\\<^sub>1) (?owS p\\<^sub>1) (?U p\\<^sub>1)\"\n              and tor: \"(\\<sigma>, t) \\<in> oreachable (opnet onp p\\<^sub>2) (?owS p\\<^sub>2) (?U p\\<^sub>2)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, SubnetS s t)\n  \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n         (otherwith S (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n           (oarrivemsg I))\n         (other U (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>(\\<sigma>, s)\n              \\<in> oreachable (opnet onp p\\<^sub>1)\n                     (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n                     (other U (net_tree_ips p\\<^sub>1));\n      (\\<sigma>, t)\n      \\<in> oreachable (opnet onp p\\<^sub>2)\n             (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n             (other U (net_tree_ips p\\<^sub>2))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (drule subnet_oreachable [OF _ _ _ node1 node2 node3], auto intro: assms(2-3))"], ["proof (state)\nthis:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                (otherwith S\n                  (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                  (oarrivemsg I))\n                (other U\n                  (net_tree_ips\n                    (p\\<^sub>1 \\<parallel> p\\<^sub>2))) \\<Longrightarrow>\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n               P i \\<sigma>)\n        x", "from sor"], ["proof (chain)\npicking this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))", "have \"\\<forall>i\\<in>net_tree_ips p\\<^sub>1. P i \\<sigma>\""], ["proof (prove)\nusing this:\n  (\\<sigma>, s)\n  \\<in> oreachable (opnet onp p\\<^sub>1)\n         (otherwith S (net_tree_ips p\\<^sub>1) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_tree_ips p\\<^sub>1. P i \\<sigma>", "by (auto dest: oinvariantD [OF ih1])"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. P i \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                (otherwith S\n                  (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                  (oarrivemsg I))\n                (other U\n                  (net_tree_ips\n                    (p\\<^sub>1 \\<parallel> p\\<^sub>2))) \\<Longrightarrow>\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n               P i \\<sigma>)\n        x", "moreover"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. P i \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                (otherwith S\n                  (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                  (oarrivemsg I))\n                (other U\n                  (net_tree_ips\n                    (p\\<^sub>1 \\<parallel> p\\<^sub>2))) \\<Longrightarrow>\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n               P i \\<sigma>)\n        x", "from tor"], ["proof (chain)\npicking this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))", "have \"\\<forall>i\\<in>net_tree_ips p\\<^sub>2. P i \\<sigma>\""], ["proof (prove)\nusing this:\n  (\\<sigma>, t)\n  \\<in> oreachable (opnet onp p\\<^sub>2)\n         (otherwith S (net_tree_ips p\\<^sub>2) (oarrivemsg I))\n         (other U (net_tree_ips p\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_tree_ips p\\<^sub>2. P i \\<sigma>", "by (auto dest: oinvariantD [OF ih2])"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. P i \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                (otherwith S\n                  (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                  (oarrivemsg I))\n                (other U\n                  (net_tree_ips\n                    (p\\<^sub>1 \\<parallel> p\\<^sub>2))) \\<Longrightarrow>\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n               P i \\<sigma>)\n        x", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. P i \\<sigma>\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. P i \\<sigma>", "have \"\\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2). P i \\<sigma>\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>1. P i \\<sigma>\n  \\<forall>i\\<in>net_tree_ips p\\<^sub>2. P i \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n       P i \\<sigma>", "by auto"], ["proof (state)\nthis:\n  \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n     P i \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> oreachable (opnet onp (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                (otherwith S\n                  (net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                  (oarrivemsg I))\n                (other U\n                  (net_tree_ips\n                    (p\\<^sub>1 \\<parallel> p\\<^sub>2))) \\<Longrightarrow>\n       global\n        (\\<lambda>\\<sigma>.\n            \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n               P i \\<sigma>)\n        x", "with \\<open>pq = (\\<sigma>, SubnetS s t)\\<close>"], ["proof (chain)\npicking this:\n  pq = (\\<sigma>, SubnetS s t)\n  \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n     P i \\<sigma>", "show \"global (\\<lambda>\\<sigma>. \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2). P i \\<sigma>) pq\""], ["proof (prove)\nusing this:\n  pq = (\\<sigma>, SubnetS s t)\n  \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n     P i \\<sigma>\n\ngoal (1 subgoal):\n 1. global\n     (\\<lambda>\\<sigma>.\n         \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n            P i \\<sigma>)\n     pq", "by simp"], ["proof (state)\nthis:\n  global\n   (\\<lambda>\\<sigma>.\n       \\<forall>i\\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n          P i \\<sigma>)\n   pq\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  opnet onp\n   (p\\<^sub>1 \\<parallel>\n    p\\<^sub>2) \\<Turnstile> (otherwith S\n                              (net_tree_ips\n                                (p\\<^sub>1 \\<parallel> p\\<^sub>2))\n                              (oarrivemsg I),\n                             other U\n                              (net_tree_ips\n                                (p\\<^sub>1 \\<parallel>\n                                 p\\<^sub>2)) \\<rightarrow>)\n                             global\n                              (\\<lambda>\\<sigma>.\n                                  \\<forall>i\n     \\<in>net_tree_ips (p\\<^sub>1 \\<parallel> p\\<^sub>2).\n                                     P i \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}