{"file_name": "/home/qj213/afp-2021-10-22/thys/AWN/OClosed_Transfer.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AWN", "problem_names": ["lemma init_pnet_p_NodeS:\n  assumes \"NodeS i s R \\<in> init (pnet np p)\"\n    shows \"p = \\<langle>i; R\\<rangle>\"", "lemma init_pnet_p_SubnetS:\n  assumes \"SubnetS s1 s2 \\<in> init (pnet np p)\"\n  obtains p1 p2 where \"p = (p1 \\<parallel> p2)\"\n                  and \"s1 \\<in> init (pnet np p1)\"\n                  and \"s2 \\<in> init (pnet np p2)\"", "lemma init_pnet_fst_sr_netgmap:\n  assumes \"s \\<in> init (pnet np p)\"\n      and \"i \\<in> net_ips s\"\n      and \"wf_net_tree p\"\n    shows \"the (fst (netgmap sr s) i) \\<in> (fst \\<circ> sr) ` init (np i)\"", "lemma init_lifted:\n  assumes \"wf_net_tree p\"                                                          \n  shows \"{ (\\<sigma>, snd (netgmap sr s)) |\\<sigma> s. s \\<in> init (pnet np p)\n                               \\<and> (\\<forall>i. if i\\<in>net_tree_ips p then \\<sigma> i = the (fst (netgmap sr s) i)\n                                      else \\<sigma> i \\<in> (fst o sr) ` init (np i)) } \\<subseteq> init (opnet onp p)\"", "lemma init_pnet_opnet [elim]:\n  assumes \"wf_net_tree p\"\n      and \"s \\<in> init (pnet np p)\"\n    shows \"netgmap sr s \\<in> netmask (net_tree_ips p) ` init (opnet onp p)\"", "lemma transfer_connect:\n  assumes \"(s, connect(i, i'), s') \\<in> trans (pnet np n)\"\n      and \"s \\<in> reachable (pnet np n) TT\"\n      and \"netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\"\n      and \"wf_net_tree n\"\n  obtains \\<sigma>' \\<zeta>' where \"((\\<sigma>, \\<zeta>), connect(i, i'), (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\"\n                  and \"\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\"\n                  and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\"", "lemma transfer_disconnect:\n  assumes \"(s, disconnect(i, i'), s') \\<in> trans (pnet np n)\"\n      and \"s \\<in> reachable (pnet np n) TT\"\n      and \"netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\"\n      and \"wf_net_tree n\"\n  obtains \\<sigma>' \\<zeta>' where \"((\\<sigma>, \\<zeta>), disconnect(i, i'), (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\"\n                  and \"\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\"\n                  and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\"", "lemma transfer_tau:\n  assumes \"(s, \\<tau>, s') \\<in> trans (pnet np n)\"\n      and \"s \\<in> reachable (pnet np n) TT\"\n      and \"netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\"\n      and \"wf_net_tree n\"\n  obtains \\<sigma>' \\<zeta>' where \"((\\<sigma>, \\<zeta>), \\<tau>, (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\"\n                  and \"\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\"\n                  and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\"", "lemma transfer_deliver:\n  assumes \"(s, i:deliver(d), s') \\<in> trans (pnet np n)\"\n      and \"s \\<in> reachable (pnet np n) TT\"\n      and \"netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\"\n      and \"wf_net_tree n\"\n  obtains \\<sigma>' \\<zeta>' where \"((\\<sigma>, \\<zeta>), i:deliver(d), (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\"\n                  and \"\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\"\n                  and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\"", "lemma transfer_arrive':\n  assumes \"(s, H\\<not>K:arrive(m), s') \\<in> trans (pnet np n)\"\n      and \"s \\<in> reachable (pnet np n) TT\"\n      and \"netgmap sr s  = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\"\n      and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\"\n      and \"wf_net_tree n\"\n  shows \"((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\"", "lemma transfer_arrive:\n  assumes \"(s, H\\<not>K:arrive(m), s') \\<in> trans (pnet np n)\"\n      and \"s \\<in> reachable (pnet np n) TT\"\n      and \"netgmap sr s  = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\"\n      and \"wf_net_tree n\"\n  obtains \\<sigma>' \\<zeta>' where \"((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\"\n                  and \"\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\"\n                  and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\"", "lemma transfer_cast:\n  assumes \"(s, mR:*cast(m), s') \\<in> trans (pnet np n)\"\n      and \"s \\<in> reachable (pnet np n) TT\"\n      and \"netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\"\n      and \"wf_net_tree n\"\n  obtains \\<sigma>' \\<zeta>' where \"((\\<sigma>, \\<zeta>), mR:*cast(m), (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\"\n                  and \"\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\"\n                  and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\"", "lemma transfer_pnet_action:\n  assumes \"s \\<in> reachable (pnet np n) TT\"\n      and \"netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\"\n      and \"wf_net_tree n\"\n      and \"(s, a, s') \\<in> trans (pnet np n)\"\n  obtains \\<sigma>' \\<zeta>' where \"((\\<sigma>, \\<zeta>), a, (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\"\n                  and \"\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\"\n                  and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\"", "lemma transfer_action_pnet_closed:\n  assumes \"(s, a, s') \\<in> trans (closed (pnet np n))\"\n  obtains a' where \"(s, a', s') \\<in> trans (pnet np n)\"\n               and \"\\<And>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'. \\<lbrakk> ((\\<sigma>, \\<zeta>), a', (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n);\n                                  (\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j) \\<rbrakk>\n                            \\<Longrightarrow> ((\\<sigma>, \\<zeta>), a, (\\<sigma>', \\<zeta>')) \\<in> trans (oclosed (opnet onp n))\"", "lemma transfer_action:\n  assumes \"s \\<in> reachable (closed (pnet np n)) TT\"\n      and \"netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\"\n      and \"wf_net_tree n\"\n      and \"(s, a, s') \\<in> trans (closed (pnet np n))\"\n  obtains \\<sigma>' \\<zeta>' where \"((\\<sigma>, \\<zeta>), a, (\\<sigma>', \\<zeta>')) \\<in> trans (oclosed (opnet onp n))\"\n                  and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\"", "lemma pnet_reachable_transfer':\n  assumes \"wf_net_tree n\"\n      and \"s \\<in> reachable (closed (pnet np n)) TT\"\n    shows \"netgmap sr s \\<in> netmask (net_tree_ips n) ` oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\"\n          (is \" _ \\<in> ?f ` ?oreachable n\")", "lemma initmissing_def':\n  \"initmissing = apfst (default someinit)\"", "lemma netmask_initmissing_netgmap:\n  \"netmask (net_ips s) (initmissing (netgmap sr s)) = netgmap sr s\"", "lemma snd_initmissing [simp]:\n  \"snd (initmissing x)= snd x\"", "lemma initmnissing_snd_netgmap [simp]:\n  assumes \"initmissing (netgmap sr s) = (\\<sigma>, \\<zeta>)\"\n    shows \"snd (netgmap sr s) = \\<zeta>\"", "lemma in_net_ips_fst_init_missing [simp]:\n  assumes \"i \\<in> net_ips s\"\n    shows \"fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\"", "lemma not_in_net_ips_fst_init_missing [simp]:\n  assumes \"i \\<notin> net_ips s\"\n    shows \"fst (initmissing (netgmap sr s)) i = someinit i\"", "lemma initmissing_oreachable_netmask [elim]:\n  assumes \"initmissing (netgmap sr s) \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\"\n          (is \"_ \\<in> ?oreachable n\")\n      and \"net_ips s = net_tree_ips n\"\n    shows \"netgmap sr s \\<in> netmask (net_tree_ips n) ` ?oreachable n\"", "lemma pnet_reachable_transfer:\n  assumes \"wf_net_tree n\"\n      and \"s \\<in> reachable (closed (pnet np n)) TT\"\n    shows \"initmissing (netgmap sr s) \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\"\n          (is \" _ \\<in> ?oreachable n\")", "lemma netglobalsimp [simp]:\n  \"netglobal P s = P (fst (initmissing (netgmap sr s)))\"", "lemma netglobalE [elim]:\n  assumes \"netglobal P s\"\n      and \"\\<And>\\<sigma>. \\<lbrakk> P \\<sigma>; fst (initmissing (netgmap sr s)) = \\<sigma> \\<rbrakk> \\<Longrightarrow> Q \\<sigma>\"\n    shows \"netglobal Q s\"", "lemma netglobal_weakenE [elim]:\n  assumes \"p \\<TTurnstile> netglobal P\"\n      and \"\\<And>\\<sigma>. P \\<sigma> \\<Longrightarrow> Q \\<sigma>\"\n    shows \"p \\<TTurnstile> netglobal Q\"", "lemma close_opnet:\n  assumes \"wf_net_tree n\"\n      and \"oclosed (opnet onp n) \\<Turnstile> (\\<lambda>_ _ _. True, U \\<rightarrow>) global P\"\n    shows \"closed (pnet np n) \\<TTurnstile> netglobal P\""], "translations": [["", "lemma init_pnet_p_NodeS:\n  assumes \"NodeS i s R \\<in> init (pnet np p)\"\n    shows \"p = \\<langle>i; R\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = \\<langle>i; R\\<rangle>", "using assms"], ["proof (prove)\nusing this:\n  NodeS i s R \\<in> init (pnet np p)\n\ngoal (1 subgoal):\n 1. p = \\<langle>i; R\\<rangle>", "by (cases p) (auto simp add: node_comps)"], ["", "lemma init_pnet_p_SubnetS:\n  assumes \"SubnetS s1 s2 \\<in> init (pnet np p)\"\n  obtains p1 p2 where \"p = (p1 \\<parallel> p2)\"\n                  and \"s1 \\<in> init (pnet np p1)\"\n                  and \"s2 \\<in> init (pnet np p2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p1 p2.\n        \\<lbrakk>p = p1 \\<parallel> p2; s1 \\<in> init (pnet np p1);\n         s2 \\<in> init (pnet np p2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  SubnetS s1 s2 \\<in> init (pnet np p)\n\ngoal (1 subgoal):\n 1. (\\<And>p1 p2.\n        \\<lbrakk>p = p1 \\<parallel> p2; s1 \\<in> init (pnet np p1);\n         s2 \\<in> init (pnet np p2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases p) (auto simp add: node_comps)"], ["", "lemma init_pnet_fst_sr_netgmap:\n  assumes \"s \\<in> init (pnet np p)\"\n      and \"i \\<in> net_ips s\"\n      and \"wf_net_tree p\"\n    shows \"the (fst (netgmap sr s) i) \\<in> (fst \\<circ> sr) ` init (np i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the (fst (netgmap sr s) i) \\<in> (fst \\<circ> sr) ` init (np i)", "using assms"], ["proof (prove)\nusing this:\n  s \\<in> init (pnet np p)\n  i \\<in> net_ips s\n  wf_net_tree p\n\ngoal (1 subgoal):\n 1. the (fst (netgmap sr s) i) \\<in> (fst \\<circ> sr) ` init (np i)", "proof (induction s arbitrary: p)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x3 p.\n       \\<lbrakk>NodeS x1 x2 x3 \\<in> init (pnet np p);\n        i \\<in> net_ips (NodeS x1 x2 x3); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (NodeS x1 x2 x3)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)\n 2. \\<And>s1 s2 p.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>s1 \\<in> init (pnet np p); i \\<in> net_ips s1;\n                    wf_net_tree p\\<rbrakk>\n                   \\<Longrightarrow> the (fst (netgmap sr s1) i)\n                                     \\<in> (fst \\<circ> sr) ` init (np i);\n        \\<And>p.\n           \\<lbrakk>s2 \\<in> init (pnet np p); i \\<in> net_ips s2;\n            wf_net_tree p\\<rbrakk>\n           \\<Longrightarrow> the (fst (netgmap sr s2) i)\n                             \\<in> (fst \\<circ> sr) ` init (np i);\n        SubnetS s1 s2 \\<in> init (pnet np p);\n        i \\<in> net_ips (SubnetS s1 s2); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (SubnetS s1 s2)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)", "fix ii s R\\<^sub>i p"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x3 p.\n       \\<lbrakk>NodeS x1 x2 x3 \\<in> init (pnet np p);\n        i \\<in> net_ips (NodeS x1 x2 x3); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (NodeS x1 x2 x3)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)\n 2. \\<And>s1 s2 p.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>s1 \\<in> init (pnet np p); i \\<in> net_ips s1;\n                    wf_net_tree p\\<rbrakk>\n                   \\<Longrightarrow> the (fst (netgmap sr s1) i)\n                                     \\<in> (fst \\<circ> sr) ` init (np i);\n        \\<And>p.\n           \\<lbrakk>s2 \\<in> init (pnet np p); i \\<in> net_ips s2;\n            wf_net_tree p\\<rbrakk>\n           \\<Longrightarrow> the (fst (netgmap sr s2) i)\n                             \\<in> (fst \\<circ> sr) ` init (np i);\n        SubnetS s1 s2 \\<in> init (pnet np p);\n        i \\<in> net_ips (SubnetS s1 s2); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (SubnetS s1 s2)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)", "assume \"NodeS ii s R\\<^sub>i \\<in> init (pnet np p)\"\n       and \"i \\<in> net_ips (NodeS ii s R\\<^sub>i)\"\n       and \"wf_net_tree p\""], ["proof (state)\nthis:\n  NodeS ii s R\\<^sub>i \\<in> init (pnet np p)\n  i \\<in> net_ips (NodeS ii s R\\<^sub>i)\n  wf_net_tree p\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x3 p.\n       \\<lbrakk>NodeS x1 x2 x3 \\<in> init (pnet np p);\n        i \\<in> net_ips (NodeS x1 x2 x3); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (NodeS x1 x2 x3)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)\n 2. \\<And>s1 s2 p.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>s1 \\<in> init (pnet np p); i \\<in> net_ips s1;\n                    wf_net_tree p\\<rbrakk>\n                   \\<Longrightarrow> the (fst (netgmap sr s1) i)\n                                     \\<in> (fst \\<circ> sr) ` init (np i);\n        \\<And>p.\n           \\<lbrakk>s2 \\<in> init (pnet np p); i \\<in> net_ips s2;\n            wf_net_tree p\\<rbrakk>\n           \\<Longrightarrow> the (fst (netgmap sr s2) i)\n                             \\<in> (fst \\<circ> sr) ` init (np i);\n        SubnetS s1 s2 \\<in> init (pnet np p);\n        i \\<in> net_ips (SubnetS s1 s2); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (SubnetS s1 s2)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)", "note this(1)"], ["proof (state)\nthis:\n  NodeS ii s R\\<^sub>i \\<in> init (pnet np p)\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x3 p.\n       \\<lbrakk>NodeS x1 x2 x3 \\<in> init (pnet np p);\n        i \\<in> net_ips (NodeS x1 x2 x3); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (NodeS x1 x2 x3)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)\n 2. \\<And>s1 s2 p.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>s1 \\<in> init (pnet np p); i \\<in> net_ips s1;\n                    wf_net_tree p\\<rbrakk>\n                   \\<Longrightarrow> the (fst (netgmap sr s1) i)\n                                     \\<in> (fst \\<circ> sr) ` init (np i);\n        \\<And>p.\n           \\<lbrakk>s2 \\<in> init (pnet np p); i \\<in> net_ips s2;\n            wf_net_tree p\\<rbrakk>\n           \\<Longrightarrow> the (fst (netgmap sr s2) i)\n                             \\<in> (fst \\<circ> sr) ` init (np i);\n        SubnetS s1 s2 \\<in> init (pnet np p);\n        i \\<in> net_ips (SubnetS s1 s2); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (SubnetS s1 s2)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)", "moreover"], ["proof (state)\nthis:\n  NodeS ii s R\\<^sub>i \\<in> init (pnet np p)\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x3 p.\n       \\<lbrakk>NodeS x1 x2 x3 \\<in> init (pnet np p);\n        i \\<in> net_ips (NodeS x1 x2 x3); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (NodeS x1 x2 x3)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)\n 2. \\<And>s1 s2 p.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>s1 \\<in> init (pnet np p); i \\<in> net_ips s1;\n                    wf_net_tree p\\<rbrakk>\n                   \\<Longrightarrow> the (fst (netgmap sr s1) i)\n                                     \\<in> (fst \\<circ> sr) ` init (np i);\n        \\<And>p.\n           \\<lbrakk>s2 \\<in> init (pnet np p); i \\<in> net_ips s2;\n            wf_net_tree p\\<rbrakk>\n           \\<Longrightarrow> the (fst (netgmap sr s2) i)\n                             \\<in> (fst \\<circ> sr) ` init (np i);\n        SubnetS s1 s2 \\<in> init (pnet np p);\n        i \\<in> net_ips (SubnetS s1 s2); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (SubnetS s1 s2)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)", "then"], ["proof (chain)\npicking this:\n  NodeS ii s R\\<^sub>i \\<in> init (pnet np p)", "have \"p = \\<langle>ii; R\\<^sub>i\\<rangle>\""], ["proof (prove)\nusing this:\n  NodeS ii s R\\<^sub>i \\<in> init (pnet np p)\n\ngoal (1 subgoal):\n 1. p = \\<langle>ii; R\\<^sub>i\\<rangle>", "by (rule init_pnet_p_NodeS)"], ["proof (state)\nthis:\n  p = \\<langle>ii; R\\<^sub>i\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x3 p.\n       \\<lbrakk>NodeS x1 x2 x3 \\<in> init (pnet np p);\n        i \\<in> net_ips (NodeS x1 x2 x3); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (NodeS x1 x2 x3)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)\n 2. \\<And>s1 s2 p.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>s1 \\<in> init (pnet np p); i \\<in> net_ips s1;\n                    wf_net_tree p\\<rbrakk>\n                   \\<Longrightarrow> the (fst (netgmap sr s1) i)\n                                     \\<in> (fst \\<circ> sr) ` init (np i);\n        \\<And>p.\n           \\<lbrakk>s2 \\<in> init (pnet np p); i \\<in> net_ips s2;\n            wf_net_tree p\\<rbrakk>\n           \\<Longrightarrow> the (fst (netgmap sr s2) i)\n                             \\<in> (fst \\<circ> sr) ` init (np i);\n        SubnetS s1 s2 \\<in> init (pnet np p);\n        i \\<in> net_ips (SubnetS s1 s2); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (SubnetS s1 s2)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)", "ultimately"], ["proof (chain)\npicking this:\n  NodeS ii s R\\<^sub>i \\<in> init (pnet np p)\n  p = \\<langle>ii; R\\<^sub>i\\<rangle>", "have \"s \\<in> init (np ii)\""], ["proof (prove)\nusing this:\n  NodeS ii s R\\<^sub>i \\<in> init (pnet np p)\n  p = \\<langle>ii; R\\<^sub>i\\<rangle>\n\ngoal (1 subgoal):\n 1. s \\<in> init (np ii)", "by (clarsimp simp: node_comps)"], ["proof (state)\nthis:\n  s \\<in> init (np ii)\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2 x3 p.\n       \\<lbrakk>NodeS x1 x2 x3 \\<in> init (pnet np p);\n        i \\<in> net_ips (NodeS x1 x2 x3); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (NodeS x1 x2 x3)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)\n 2. \\<And>s1 s2 p.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>s1 \\<in> init (pnet np p); i \\<in> net_ips s1;\n                    wf_net_tree p\\<rbrakk>\n                   \\<Longrightarrow> the (fst (netgmap sr s1) i)\n                                     \\<in> (fst \\<circ> sr) ` init (np i);\n        \\<And>p.\n           \\<lbrakk>s2 \\<in> init (pnet np p); i \\<in> net_ips s2;\n            wf_net_tree p\\<rbrakk>\n           \\<Longrightarrow> the (fst (netgmap sr s2) i)\n                             \\<in> (fst \\<circ> sr) ` init (np i);\n        SubnetS s1 s2 \\<in> init (pnet np p);\n        i \\<in> net_ips (SubnetS s1 s2); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (SubnetS s1 s2)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)", "with \\<open>i \\<in> net_ips (NodeS ii s R\\<^sub>i)\\<close>"], ["proof (chain)\npicking this:\n  i \\<in> net_ips (NodeS ii s R\\<^sub>i)\n  s \\<in> init (np ii)", "show \"the (fst (netgmap sr (NodeS ii s R\\<^sub>i)) i) \\<in> (fst \\<circ> sr) ` init (np i)\""], ["proof (prove)\nusing this:\n  i \\<in> net_ips (NodeS ii s R\\<^sub>i)\n  s \\<in> init (np ii)\n\ngoal (1 subgoal):\n 1. the (fst (netgmap sr (NodeS ii s R\\<^sub>i)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)", "by clarsimp"], ["proof (state)\nthis:\n  the (fst (netgmap sr (NodeS ii s R\\<^sub>i)) i)\n  \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 p.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>s1 \\<in> init (pnet np p); i \\<in> net_ips s1;\n                    wf_net_tree p\\<rbrakk>\n                   \\<Longrightarrow> the (fst (netgmap sr s1) i)\n                                     \\<in> (fst \\<circ> sr) ` init (np i);\n        \\<And>p.\n           \\<lbrakk>s2 \\<in> init (pnet np p); i \\<in> net_ips s2;\n            wf_net_tree p\\<rbrakk>\n           \\<Longrightarrow> the (fst (netgmap sr s2) i)\n                             \\<in> (fst \\<circ> sr) ` init (np i);\n        SubnetS s1 s2 \\<in> init (pnet np p);\n        i \\<in> net_ips (SubnetS s1 s2); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (SubnetS s1 s2)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1 s2 p.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>s1 \\<in> init (pnet np p); i \\<in> net_ips s1;\n                    wf_net_tree p\\<rbrakk>\n                   \\<Longrightarrow> the (fst (netgmap sr s1) i)\n                                     \\<in> (fst \\<circ> sr) ` init (np i);\n        \\<And>p.\n           \\<lbrakk>s2 \\<in> init (pnet np p); i \\<in> net_ips s2;\n            wf_net_tree p\\<rbrakk>\n           \\<Longrightarrow> the (fst (netgmap sr s2) i)\n                             \\<in> (fst \\<circ> sr) ` init (np i);\n        SubnetS s1 s2 \\<in> init (pnet np p);\n        i \\<in> net_ips (SubnetS s1 s2); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (SubnetS s1 s2)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)", "fix s1 s2 p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s1 s2 p.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>s1 \\<in> init (pnet np p); i \\<in> net_ips s1;\n                    wf_net_tree p\\<rbrakk>\n                   \\<Longrightarrow> the (fst (netgmap sr s1) i)\n                                     \\<in> (fst \\<circ> sr) ` init (np i);\n        \\<And>p.\n           \\<lbrakk>s2 \\<in> init (pnet np p); i \\<in> net_ips s2;\n            wf_net_tree p\\<rbrakk>\n           \\<Longrightarrow> the (fst (netgmap sr s2) i)\n                             \\<in> (fst \\<circ> sr) ` init (np i);\n        SubnetS s1 s2 \\<in> init (pnet np p);\n        i \\<in> net_ips (SubnetS s1 s2); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (SubnetS s1 s2)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)", "assume IH1: \"\\<And>p. s1 \\<in> init (pnet np p)\n                  \\<Longrightarrow> i \\<in> net_ips s1\n                  \\<Longrightarrow> wf_net_tree p\n                  \\<Longrightarrow> the (fst (netgmap sr s1) i) \\<in> (fst \\<circ> sr) ` init (np i)\"\n       and IH2: \"\\<And>p. s2 \\<in> init (pnet np p)\n                  \\<Longrightarrow> i \\<in> net_ips s2\n                  \\<Longrightarrow> wf_net_tree p\n                  \\<Longrightarrow> the (fst (netgmap sr s2) i) \\<in> (fst \\<circ> sr) ` init (np i)\"\n       and \"SubnetS s1 s2 \\<in> init (pnet np p)\"\n       and \"i \\<in> net_ips (SubnetS s1 s2)\"\n       and \"wf_net_tree p\""], ["proof (state)\nthis:\n  \\<lbrakk>s1 \\<in> init (pnet np ?p); i \\<in> net_ips s1;\n   wf_net_tree ?p\\<rbrakk>\n  \\<Longrightarrow> the (fst (netgmap sr s1) i)\n                    \\<in> (fst \\<circ> sr) ` init (np i)\n  \\<lbrakk>s2 \\<in> init (pnet np ?p); i \\<in> net_ips s2;\n   wf_net_tree ?p\\<rbrakk>\n  \\<Longrightarrow> the (fst (netgmap sr s2) i)\n                    \\<in> (fst \\<circ> sr) ` init (np i)\n  SubnetS s1 s2 \\<in> init (pnet np p)\n  i \\<in> net_ips (SubnetS s1 s2)\n  wf_net_tree p\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 p.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>s1 \\<in> init (pnet np p); i \\<in> net_ips s1;\n                    wf_net_tree p\\<rbrakk>\n                   \\<Longrightarrow> the (fst (netgmap sr s1) i)\n                                     \\<in> (fst \\<circ> sr) ` init (np i);\n        \\<And>p.\n           \\<lbrakk>s2 \\<in> init (pnet np p); i \\<in> net_ips s2;\n            wf_net_tree p\\<rbrakk>\n           \\<Longrightarrow> the (fst (netgmap sr s2) i)\n                             \\<in> (fst \\<circ> sr) ` init (np i);\n        SubnetS s1 s2 \\<in> init (pnet np p);\n        i \\<in> net_ips (SubnetS s1 s2); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (SubnetS s1 s2)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)", "from this(3)"], ["proof (chain)\npicking this:\n  SubnetS s1 s2 \\<in> init (pnet np p)", "obtain p1 p2 where \"p = (p1 \\<parallel> p2)\"\n                                and \"s1 \\<in> init (pnet np p1)\"\n                                and \"s2 \\<in> init (pnet np p2)\""], ["proof (prove)\nusing this:\n  SubnetS s1 s2 \\<in> init (pnet np p)\n\ngoal (1 subgoal):\n 1. (\\<And>p1 p2.\n        \\<lbrakk>p = p1 \\<parallel> p2; s1 \\<in> init (pnet np p1);\n         s2 \\<in> init (pnet np p2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule init_pnet_p_SubnetS)"], ["proof (state)\nthis:\n  p = p1 \\<parallel> p2\n  s1 \\<in> init (pnet np p1)\n  s2 \\<in> init (pnet np p2)\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 p.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>s1 \\<in> init (pnet np p); i \\<in> net_ips s1;\n                    wf_net_tree p\\<rbrakk>\n                   \\<Longrightarrow> the (fst (netgmap sr s1) i)\n                                     \\<in> (fst \\<circ> sr) ` init (np i);\n        \\<And>p.\n           \\<lbrakk>s2 \\<in> init (pnet np p); i \\<in> net_ips s2;\n            wf_net_tree p\\<rbrakk>\n           \\<Longrightarrow> the (fst (netgmap sr s2) i)\n                             \\<in> (fst \\<circ> sr) ` init (np i);\n        SubnetS s1 s2 \\<in> init (pnet np p);\n        i \\<in> net_ips (SubnetS s1 s2); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (SubnetS s1 s2)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)", "from this(1) and \\<open>wf_net_tree p\\<close>"], ["proof (chain)\npicking this:\n  p = p1 \\<parallel> p2\n  wf_net_tree p", "have \"wf_net_tree p1\"\n                                      and \"wf_net_tree p2\"\n                                      and \"net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\""], ["proof (prove)\nusing this:\n  p = p1 \\<parallel> p2\n  wf_net_tree p\n\ngoal (1 subgoal):\n 1. wf_net_tree p1 &&&\n    wf_net_tree p2 &&& net_tree_ips p1 \\<inter> net_tree_ips p2 = {}", "by auto"], ["proof (state)\nthis:\n  wf_net_tree p1\n  wf_net_tree p2\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 p.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>s1 \\<in> init (pnet np p); i \\<in> net_ips s1;\n                    wf_net_tree p\\<rbrakk>\n                   \\<Longrightarrow> the (fst (netgmap sr s1) i)\n                                     \\<in> (fst \\<circ> sr) ` init (np i);\n        \\<And>p.\n           \\<lbrakk>s2 \\<in> init (pnet np p); i \\<in> net_ips s2;\n            wf_net_tree p\\<rbrakk>\n           \\<Longrightarrow> the (fst (netgmap sr s2) i)\n                             \\<in> (fst \\<circ> sr) ` init (np i);\n        SubnetS s1 s2 \\<in> init (pnet np p);\n        i \\<in> net_ips (SubnetS s1 s2); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (SubnetS s1 s2)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)", "from \\<open>i \\<in> net_ips (SubnetS s1 s2)\\<close>"], ["proof (chain)\npicking this:\n  i \\<in> net_ips (SubnetS s1 s2)", "have \"i \\<in> net_ips s1 \\<or> i \\<in> net_ips s2\""], ["proof (prove)\nusing this:\n  i \\<in> net_ips (SubnetS s1 s2)\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s1 \\<or> i \\<in> net_ips s2", "by simp"], ["proof (state)\nthis:\n  i \\<in> net_ips s1 \\<or> i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2 p.\n       \\<lbrakk>\\<And>p.\n                   \\<lbrakk>s1 \\<in> init (pnet np p); i \\<in> net_ips s1;\n                    wf_net_tree p\\<rbrakk>\n                   \\<Longrightarrow> the (fst (netgmap sr s1) i)\n                                     \\<in> (fst \\<circ> sr) ` init (np i);\n        \\<And>p.\n           \\<lbrakk>s2 \\<in> init (pnet np p); i \\<in> net_ips s2;\n            wf_net_tree p\\<rbrakk>\n           \\<Longrightarrow> the (fst (netgmap sr s2) i)\n                             \\<in> (fst \\<circ> sr) ` init (np i);\n        SubnetS s1 s2 \\<in> init (pnet np p);\n        i \\<in> net_ips (SubnetS s1 s2); wf_net_tree p\\<rbrakk>\n       \\<Longrightarrow> the (fst (netgmap sr (SubnetS s1 s2)) i)\n                         \\<in> (fst \\<circ> sr) ` init (np i)", "thus \"the (fst (netgmap sr (SubnetS s1 s2)) i) \\<in> (fst \\<circ> sr) ` init (np i)\""], ["proof (prove)\nusing this:\n  i \\<in> net_ips s1 \\<or> i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> net_ips s1 \\<Longrightarrow>\n    the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)\n 2. i \\<in> net_ips s2 \\<Longrightarrow>\n    the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)", "assume \"i \\<in> net_ips s1\""], ["proof (state)\nthis:\n  i \\<in> net_ips s1\n\ngoal (2 subgoals):\n 1. i \\<in> net_ips s1 \\<Longrightarrow>\n    the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)\n 2. i \\<in> net_ips s2 \\<Longrightarrow>\n    the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)", "hence \"i \\<notin> net_ips s2\""], ["proof (prove)\nusing this:\n  i \\<in> net_ips s1\n\ngoal (1 subgoal):\n 1. i \\<notin> net_ips s2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<in> net_ips s1 \\<Longrightarrow> i \\<notin> net_ips s2", "from \\<open>s1 \\<in> init (pnet np p1)\\<close> and \\<open>i \\<in> net_ips s1\\<close>"], ["proof (chain)\npicking this:\n  s1 \\<in> init (pnet np p1)\n  i \\<in> net_ips s1", "have \"i\\<in>net_tree_ips p1\""], ["proof (prove)\nusing this:\n  s1 \\<in> init (pnet np p1)\n  i \\<in> net_ips s1\n\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips p1", ".."], ["proof (state)\nthis:\n  i \\<in> net_tree_ips p1\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s1 \\<Longrightarrow> i \\<notin> net_ips s2", "with \\<open>net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\\<close>"], ["proof (chain)\npicking this:\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n  i \\<in> net_tree_ips p1", "have \"i\\<notin>net_tree_ips p2\""], ["proof (prove)\nusing this:\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n  i \\<in> net_tree_ips p1\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips p2", "by auto"], ["proof (state)\nthis:\n  i \\<notin> net_tree_ips p2\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s1 \\<Longrightarrow> i \\<notin> net_ips s2", "with \\<open>s2 \\<in> init (pnet np p2)\\<close>"], ["proof (chain)\npicking this:\n  s2 \\<in> init (pnet np p2)\n  i \\<notin> net_tree_ips p2", "show ?thesis"], ["proof (prove)\nusing this:\n  s2 \\<in> init (pnet np p2)\n  i \\<notin> net_tree_ips p2\n\ngoal (1 subgoal):\n 1. i \\<notin> net_ips s2", ".."], ["proof (state)\nthis:\n  i \\<notin> net_ips s2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i \\<notin> net_ips s2\n\ngoal (2 subgoals):\n 1. i \\<in> net_ips s1 \\<Longrightarrow>\n    the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)\n 2. i \\<in> net_ips s2 \\<Longrightarrow>\n    the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)", "moreover"], ["proof (state)\nthis:\n  i \\<notin> net_ips s2\n\ngoal (2 subgoals):\n 1. i \\<in> net_ips s1 \\<Longrightarrow>\n    the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)\n 2. i \\<in> net_ips s2 \\<Longrightarrow>\n    the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)", "from \\<open>s1 \\<in> init (pnet np p1)\\<close>  \\<open>i \\<in> net_ips s1\\<close> and \\<open>wf_net_tree p1\\<close>"], ["proof (chain)\npicking this:\n  s1 \\<in> init (pnet np p1)\n  i \\<in> net_ips s1\n  wf_net_tree p1", "have \"the (fst (netgmap sr s1) i) \\<in> (fst \\<circ> sr) ` init (np i)\""], ["proof (prove)\nusing this:\n  s1 \\<in> init (pnet np p1)\n  i \\<in> net_ips s1\n  wf_net_tree p1\n\ngoal (1 subgoal):\n 1. the (fst (netgmap sr s1) i) \\<in> (fst \\<circ> sr) ` init (np i)", "by (rule IH1)"], ["proof (state)\nthis:\n  the (fst (netgmap sr s1) i) \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (2 subgoals):\n 1. i \\<in> net_ips s1 \\<Longrightarrow>\n    the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)\n 2. i \\<in> net_ips s2 \\<Longrightarrow>\n    the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)", "ultimately"], ["proof (chain)\npicking this:\n  i \\<notin> net_ips s2\n  the (fst (netgmap sr s1) i) \\<in> (fst \\<circ> sr) ` init (np i)", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<notin> net_ips s2\n  the (fst (netgmap sr s1) i) \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)", "by simp"], ["proof (state)\nthis:\n  the (fst (netgmap sr (SubnetS s1 s2)) i)\n  \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)", "assume \"i \\<in> net_ips s2\""], ["proof (state)\nthis:\n  i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)", "moreover"], ["proof (state)\nthis:\n  i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)", "with \\<open>s2 \\<in> init (pnet np p2)\\<close>"], ["proof (chain)\npicking this:\n  s2 \\<in> init (pnet np p2)\n  i \\<in> net_ips s2", "have \"the (fst (netgmap sr s2) i) \\<in> (fst \\<circ> sr) ` init (np i)\""], ["proof (prove)\nusing this:\n  s2 \\<in> init (pnet np p2)\n  i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. the (fst (netgmap sr s2) i) \\<in> (fst \\<circ> sr) ` init (np i)", "using \\<open>wf_net_tree p2\\<close>"], ["proof (prove)\nusing this:\n  s2 \\<in> init (pnet np p2)\n  i \\<in> net_ips s2\n  wf_net_tree p2\n\ngoal (1 subgoal):\n 1. the (fst (netgmap sr s2) i) \\<in> (fst \\<circ> sr) ` init (np i)", "by (rule IH2)"], ["proof (state)\nthis:\n  the (fst (netgmap sr s2) i) \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)", "moreover"], ["proof (state)\nthis:\n  the (fst (netgmap sr s2) i) \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)", "from \\<open>s2 \\<in> init (pnet np p2)\\<close> and \\<open>i \\<in> net_ips s2\\<close>"], ["proof (chain)\npicking this:\n  s2 \\<in> init (pnet np p2)\n  i \\<in> net_ips s2", "have \"i\\<in>net_tree_ips p2\""], ["proof (prove)\nusing this:\n  s2 \\<in> init (pnet np p2)\n  i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips p2", ".."], ["proof (state)\nthis:\n  i \\<in> net_tree_ips p2\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)", "ultimately"], ["proof (chain)\npicking this:\n  i \\<in> net_ips s2\n  the (fst (netgmap sr s2) i) \\<in> (fst \\<circ> sr) ` init (np i)\n  i \\<in> net_tree_ips p2", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<in> net_ips s2\n  the (fst (netgmap sr s2) i) \\<in> (fst \\<circ> sr) ` init (np i)\n  i \\<in> net_tree_ips p2\n\ngoal (1 subgoal):\n 1. the (fst (netgmap sr (SubnetS s1 s2)) i)\n    \\<in> (fst \\<circ> sr) ` init (np i)", "by simp"], ["proof (state)\nthis:\n  the (fst (netgmap sr (SubnetS s1 s2)) i)\n  \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  the (fst (netgmap sr (SubnetS s1 s2)) i)\n  \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma init_lifted:\n  assumes \"wf_net_tree p\"                                                          \n  shows \"{ (\\<sigma>, snd (netgmap sr s)) |\\<sigma> s. s \\<in> init (pnet np p)\n                               \\<and> (\\<forall>i. if i\\<in>net_tree_ips p then \\<sigma> i = the (fst (netgmap sr s) i)\n                                      else \\<sigma> i \\<in> (fst o sr) ` init (np i)) } \\<subseteq> init (opnet onp p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n     s \\<in> init (pnet np p) \\<and>\n     (\\<forall>i.\n         if i \\<in> net_tree_ips p\n         then \\<sigma> i = the (fst (netgmap sr s) i)\n         else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n    \\<subseteq> init (opnet onp p)", "using assms"], ["proof (prove)\nusing this:\n  wf_net_tree p\n\ngoal (1 subgoal):\n 1. {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n     s \\<in> init (pnet np p) \\<and>\n     (\\<forall>i.\n         if i \\<in> net_tree_ips p\n         then \\<sigma> i = the (fst (netgmap sr s) i)\n         else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n    \\<subseteq> init (opnet onp p)", "proof (induction p)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R.\n       wf_net_tree \\<langle>i; R\\<rangle> \\<Longrightarrow>\n       {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n        s \\<in> init (pnet np \\<langle>i; R\\<rangle>) \\<and>\n        (\\<forall>ia.\n            if ia \\<in> net_tree_ips \\<langle>i; R\\<rangle>\n            then \\<sigma> ia = the (fst (netgmap sr s) ia)\n            else \\<sigma> ia \\<in> (fst \\<circ> sr) ` init (np ia))}\n       \\<subseteq> init (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>p1 p2.\n       \\<lbrakk>wf_net_tree p1 \\<Longrightarrow>\n                {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n                 s \\<in> init (pnet np p1) \\<and>\n                 (\\<forall>i.\n                     if i \\<in> net_tree_ips p1\n                     then \\<sigma> i = the (fst (netgmap sr s) i)\n                     else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n                \\<subseteq> init (opnet onp p1);\n        wf_net_tree p2 \\<Longrightarrow>\n        {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p2) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p2\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n        \\<subseteq> init (opnet onp p2);\n        wf_net_tree (p1 \\<parallel> p2)\\<rbrakk>\n       \\<Longrightarrow> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n                          s \\<in> init (pnet np (p1 \\<parallel> p2)) \\<and>\n                          (\\<forall>i.\n                              if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n                              then \\<sigma> i = the (fst (netgmap sr s) i)\n                              else \\<sigma> i\n                                   \\<in> (fst \\<circ> sr) ` init (np i))}\n                         \\<subseteq> init (opnet onp (p1 \\<parallel> p2))", "fix i R"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R.\n       wf_net_tree \\<langle>i; R\\<rangle> \\<Longrightarrow>\n       {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n        s \\<in> init (pnet np \\<langle>i; R\\<rangle>) \\<and>\n        (\\<forall>ia.\n            if ia \\<in> net_tree_ips \\<langle>i; R\\<rangle>\n            then \\<sigma> ia = the (fst (netgmap sr s) ia)\n            else \\<sigma> ia \\<in> (fst \\<circ> sr) ` init (np ia))}\n       \\<subseteq> init (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>p1 p2.\n       \\<lbrakk>wf_net_tree p1 \\<Longrightarrow>\n                {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n                 s \\<in> init (pnet np p1) \\<and>\n                 (\\<forall>i.\n                     if i \\<in> net_tree_ips p1\n                     then \\<sigma> i = the (fst (netgmap sr s) i)\n                     else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n                \\<subseteq> init (opnet onp p1);\n        wf_net_tree p2 \\<Longrightarrow>\n        {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p2) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p2\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n        \\<subseteq> init (opnet onp p2);\n        wf_net_tree (p1 \\<parallel> p2)\\<rbrakk>\n       \\<Longrightarrow> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n                          s \\<in> init (pnet np (p1 \\<parallel> p2)) \\<and>\n                          (\\<forall>i.\n                              if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n                              then \\<sigma> i = the (fst (netgmap sr s) i)\n                              else \\<sigma> i\n                                   \\<in> (fst \\<circ> sr) ` init (np i))}\n                         \\<subseteq> init (opnet onp (p1 \\<parallel> p2))", "assume \"wf_net_tree \\<langle>i; R\\<rangle>\""], ["proof (state)\nthis:\n  wf_net_tree \\<langle>i; R\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>i R.\n       wf_net_tree \\<langle>i; R\\<rangle> \\<Longrightarrow>\n       {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n        s \\<in> init (pnet np \\<langle>i; R\\<rangle>) \\<and>\n        (\\<forall>ia.\n            if ia \\<in> net_tree_ips \\<langle>i; R\\<rangle>\n            then \\<sigma> ia = the (fst (netgmap sr s) ia)\n            else \\<sigma> ia \\<in> (fst \\<circ> sr) ` init (np ia))}\n       \\<subseteq> init (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>p1 p2.\n       \\<lbrakk>wf_net_tree p1 \\<Longrightarrow>\n                {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n                 s \\<in> init (pnet np p1) \\<and>\n                 (\\<forall>i.\n                     if i \\<in> net_tree_ips p1\n                     then \\<sigma> i = the (fst (netgmap sr s) i)\n                     else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n                \\<subseteq> init (opnet onp p1);\n        wf_net_tree p2 \\<Longrightarrow>\n        {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p2) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p2\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n        \\<subseteq> init (opnet onp p2);\n        wf_net_tree (p1 \\<parallel> p2)\\<rbrakk>\n       \\<Longrightarrow> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n                          s \\<in> init (pnet np (p1 \\<parallel> p2)) \\<and>\n                          (\\<forall>i.\n                              if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n                              then \\<sigma> i = the (fst (netgmap sr s) i)\n                              else \\<sigma> i\n                                   \\<in> (fst \\<circ> sr) ` init (np i))}\n                         \\<subseteq> init (opnet onp (p1 \\<parallel> p2))", "show \"{(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s. s \\<in> init (pnet np \\<langle>i; R\\<rangle>)\n            \\<and> (\\<forall>j. if j \\<in> net_tree_ips \\<langle>i; R\\<rangle> then \\<sigma> j = the (fst (netgmap sr s) j)\n                   else \\<sigma> j \\<in> (fst \\<circ> sr) ` init (np j))} \\<subseteq> init (opnet onp \\<langle>i; R\\<rangle>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n     s \\<in> init (pnet np \\<langle>i; R\\<rangle>) \\<and>\n     (\\<forall>j.\n         if j \\<in> net_tree_ips \\<langle>i; R\\<rangle>\n         then \\<sigma> j = the (fst (netgmap sr s) j)\n         else \\<sigma> j \\<in> (fst \\<circ> sr) ` init (np j))}\n    \\<subseteq> init (opnet onp \\<langle>i; R\\<rangle>)", "by (clarsimp simp add: node_comps onode_comps)\n         (rule subsetD [OF init], auto)"], ["proof (state)\nthis:\n  {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n   s \\<in> init (pnet np \\<langle>i; R\\<rangle>) \\<and>\n   (\\<forall>j.\n       if j \\<in> net_tree_ips \\<langle>i; R\\<rangle>\n       then \\<sigma> j = the (fst (netgmap sr s) j)\n       else \\<sigma> j \\<in> (fst \\<circ> sr) ` init (np j))}\n  \\<subseteq> init (opnet onp \\<langle>i; R\\<rangle>)\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2.\n       \\<lbrakk>wf_net_tree p1 \\<Longrightarrow>\n                {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n                 s \\<in> init (pnet np p1) \\<and>\n                 (\\<forall>i.\n                     if i \\<in> net_tree_ips p1\n                     then \\<sigma> i = the (fst (netgmap sr s) i)\n                     else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n                \\<subseteq> init (opnet onp p1);\n        wf_net_tree p2 \\<Longrightarrow>\n        {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p2) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p2\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n        \\<subseteq> init (opnet onp p2);\n        wf_net_tree (p1 \\<parallel> p2)\\<rbrakk>\n       \\<Longrightarrow> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n                          s \\<in> init (pnet np (p1 \\<parallel> p2)) \\<and>\n                          (\\<forall>i.\n                              if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n                              then \\<sigma> i = the (fst (netgmap sr s) i)\n                              else \\<sigma> i\n                                   \\<in> (fst \\<circ> sr) ` init (np i))}\n                         \\<subseteq> init (opnet onp (p1 \\<parallel> p2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2.\n       \\<lbrakk>wf_net_tree p1 \\<Longrightarrow>\n                {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n                 s \\<in> init (pnet np p1) \\<and>\n                 (\\<forall>i.\n                     if i \\<in> net_tree_ips p1\n                     then \\<sigma> i = the (fst (netgmap sr s) i)\n                     else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n                \\<subseteq> init (opnet onp p1);\n        wf_net_tree p2 \\<Longrightarrow>\n        {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p2) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p2\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n        \\<subseteq> init (opnet onp p2);\n        wf_net_tree (p1 \\<parallel> p2)\\<rbrakk>\n       \\<Longrightarrow> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n                          s \\<in> init (pnet np (p1 \\<parallel> p2)) \\<and>\n                          (\\<forall>i.\n                              if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n                              then \\<sigma> i = the (fst (netgmap sr s) i)\n                              else \\<sigma> i\n                                   \\<in> (fst \\<circ> sr) ` init (np i))}\n                         \\<subseteq> init (opnet onp (p1 \\<parallel> p2))", "fix p1 p2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p1 p2.\n       \\<lbrakk>wf_net_tree p1 \\<Longrightarrow>\n                {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n                 s \\<in> init (pnet np p1) \\<and>\n                 (\\<forall>i.\n                     if i \\<in> net_tree_ips p1\n                     then \\<sigma> i = the (fst (netgmap sr s) i)\n                     else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n                \\<subseteq> init (opnet onp p1);\n        wf_net_tree p2 \\<Longrightarrow>\n        {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p2) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p2\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n        \\<subseteq> init (opnet onp p2);\n        wf_net_tree (p1 \\<parallel> p2)\\<rbrakk>\n       \\<Longrightarrow> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n                          s \\<in> init (pnet np (p1 \\<parallel> p2)) \\<and>\n                          (\\<forall>i.\n                              if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n                              then \\<sigma> i = the (fst (netgmap sr s) i)\n                              else \\<sigma> i\n                                   \\<in> (fst \\<circ> sr) ` init (np i))}\n                         \\<subseteq> init (opnet onp (p1 \\<parallel> p2))", "assume IH1: \"wf_net_tree p1\n                \\<Longrightarrow> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s. s \\<in> init (pnet np p1)\n                      \\<and> (\\<forall>i. if i \\<in> net_tree_ips p1 then \\<sigma> i = the (fst (netgmap sr s) i)\n                             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))} \\<subseteq> init (opnet onp p1)\"\n                (is \"_ \\<Longrightarrow> ?S1 \\<subseteq> _\")\n       and IH2: \"wf_net_tree p2\n                 \\<Longrightarrow> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s. s \\<in> init (pnet np p2)\n                       \\<and> (\\<forall>i. if i \\<in> net_tree_ips p2 then \\<sigma> i = the (fst (netgmap sr s) i)\n                              else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))} \\<subseteq> init (opnet onp p2)\"\n                (is \"_ \\<Longrightarrow> ?S2 \\<subseteq> _\")\n        and \"wf_net_tree (p1 \\<parallel> p2)\""], ["proof (state)\nthis:\n  wf_net_tree p1 \\<Longrightarrow>\n  {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n   s \\<in> init (pnet np p1) \\<and>\n   (\\<forall>i.\n       if i \\<in> net_tree_ips p1\n       then \\<sigma> i = the (fst (netgmap sr s) i)\n       else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n  \\<subseteq> init (opnet onp p1)\n  wf_net_tree p2 \\<Longrightarrow>\n  {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n   s \\<in> init (pnet np p2) \\<and>\n   (\\<forall>i.\n       if i \\<in> net_tree_ips p2\n       then \\<sigma> i = the (fst (netgmap sr s) i)\n       else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n  \\<subseteq> init (opnet onp p2)\n  wf_net_tree (p1 \\<parallel> p2)\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2.\n       \\<lbrakk>wf_net_tree p1 \\<Longrightarrow>\n                {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n                 s \\<in> init (pnet np p1) \\<and>\n                 (\\<forall>i.\n                     if i \\<in> net_tree_ips p1\n                     then \\<sigma> i = the (fst (netgmap sr s) i)\n                     else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n                \\<subseteq> init (opnet onp p1);\n        wf_net_tree p2 \\<Longrightarrow>\n        {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p2) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p2\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n        \\<subseteq> init (opnet onp p2);\n        wf_net_tree (p1 \\<parallel> p2)\\<rbrakk>\n       \\<Longrightarrow> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n                          s \\<in> init (pnet np (p1 \\<parallel> p2)) \\<and>\n                          (\\<forall>i.\n                              if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n                              then \\<sigma> i = the (fst (netgmap sr s) i)\n                              else \\<sigma> i\n                                   \\<in> (fst \\<circ> sr) ` init (np i))}\n                         \\<subseteq> init (opnet onp (p1 \\<parallel> p2))", "from this(3)"], ["proof (chain)\npicking this:\n  wf_net_tree (p1 \\<parallel> p2)", "have \"wf_net_tree p1\"\n                  and \"wf_net_tree p2\"\n                  and \"net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\""], ["proof (prove)\nusing this:\n  wf_net_tree (p1 \\<parallel> p2)\n\ngoal (1 subgoal):\n 1. wf_net_tree p1 &&&\n    wf_net_tree p2 &&& net_tree_ips p1 \\<inter> net_tree_ips p2 = {}", "by auto"], ["proof (state)\nthis:\n  wf_net_tree p1\n  wf_net_tree p2\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n\ngoal (1 subgoal):\n 1. \\<And>p1 p2.\n       \\<lbrakk>wf_net_tree p1 \\<Longrightarrow>\n                {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n                 s \\<in> init (pnet np p1) \\<and>\n                 (\\<forall>i.\n                     if i \\<in> net_tree_ips p1\n                     then \\<sigma> i = the (fst (netgmap sr s) i)\n                     else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n                \\<subseteq> init (opnet onp p1);\n        wf_net_tree p2 \\<Longrightarrow>\n        {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p2) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p2\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n        \\<subseteq> init (opnet onp p2);\n        wf_net_tree (p1 \\<parallel> p2)\\<rbrakk>\n       \\<Longrightarrow> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n                          s \\<in> init (pnet np (p1 \\<parallel> p2)) \\<and>\n                          (\\<forall>i.\n                              if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n                              then \\<sigma> i = the (fst (netgmap sr s) i)\n                              else \\<sigma> i\n                                   \\<in> (fst \\<circ> sr) ` init (np i))}\n                         \\<subseteq> init (opnet onp (p1 \\<parallel> p2))", "show \"{(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s. s \\<in> init (pnet np (p1 \\<parallel> p2))\n            \\<and> (\\<forall>i. if i \\<in> net_tree_ips (p1 \\<parallel> p2) then \\<sigma> i = the (fst (netgmap sr s) i)\n                   else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))} \\<subseteq> init (opnet onp (p1 \\<parallel> p2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n     s \\<in> init (pnet np (p1 \\<parallel> p2)) \\<and>\n     (\\<forall>i.\n         if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n         then \\<sigma> i = the (fst (netgmap sr s) i)\n         else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n    \\<subseteq> init (opnet onp (p1 \\<parallel> p2))", "proof (rule, clarsimp simp only: split_paired_all pnet.simps automaton.simps)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b \\<sigma> s s\\<^sub>1 s\\<^sub>2.\n       \\<lbrakk>\\<forall>i.\n                   if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n                   then \\<sigma> i =\n                        the (fst (netgmap sr (SubnetS s\\<^sub>1 s\\<^sub>2))\n                              i)\n                   else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i);\n        s\\<^sub>1 \\<in> init (pnet np p1);\n        s\\<^sub>2 \\<in> init (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>,\n                          snd (netgmap sr (SubnetS s\\<^sub>1 s\\<^sub>2)))\n                         \\<in> init (opnet onp (p1 \\<parallel> p2))", "fix \\<sigma> s1 s2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b \\<sigma> s s\\<^sub>1 s\\<^sub>2.\n       \\<lbrakk>\\<forall>i.\n                   if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n                   then \\<sigma> i =\n                        the (fst (netgmap sr (SubnetS s\\<^sub>1 s\\<^sub>2))\n                              i)\n                   else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i);\n        s\\<^sub>1 \\<in> init (pnet np p1);\n        s\\<^sub>2 \\<in> init (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>,\n                          snd (netgmap sr (SubnetS s\\<^sub>1 s\\<^sub>2)))\n                         \\<in> init (opnet onp (p1 \\<parallel> p2))", "assume \\<sigma>_desc: \"\\<forall>i. if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n                          then \\<sigma> i = the (fst (netgmap sr (SubnetS s1 s2)) i)\n                          else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\"\n         and \"s1 \\<in> init (pnet np p1)\"\n         and \"s2 \\<in> init (pnet np p2)\""], ["proof (state)\nthis:\n  \\<forall>i.\n     if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n     then \\<sigma> i = the (fst (netgmap sr (SubnetS s1 s2)) i)\n     else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\n  s1 \\<in> init (pnet np p1)\n  s2 \\<in> init (pnet np p2)\n\ngoal (1 subgoal):\n 1. \\<And>a b \\<sigma> s s\\<^sub>1 s\\<^sub>2.\n       \\<lbrakk>\\<forall>i.\n                   if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n                   then \\<sigma> i =\n                        the (fst (netgmap sr (SubnetS s\\<^sub>1 s\\<^sub>2))\n                              i)\n                   else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i);\n        s\\<^sub>1 \\<in> init (pnet np p1);\n        s\\<^sub>2 \\<in> init (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>,\n                          snd (netgmap sr (SubnetS s\\<^sub>1 s\\<^sub>2)))\n                         \\<in> init (opnet onp (p1 \\<parallel> p2))", "from this(2-3)"], ["proof (chain)\npicking this:\n  s1 \\<in> init (pnet np p1)\n  s2 \\<in> init (pnet np p2)", "have \"net_ips s1 = net_tree_ips p1\"\n                      and \"net_ips s2 = net_tree_ips p2\""], ["proof (prove)\nusing this:\n  s1 \\<in> init (pnet np p1)\n  s2 \\<in> init (pnet np p2)\n\ngoal (1 subgoal):\n 1. net_ips s1 = net_tree_ips p1 &&& net_ips s2 = net_tree_ips p2", "by auto"], ["proof (state)\nthis:\n  net_ips s1 = net_tree_ips p1\n  net_ips s2 = net_tree_ips p2\n\ngoal (1 subgoal):\n 1. \\<And>a b \\<sigma> s s\\<^sub>1 s\\<^sub>2.\n       \\<lbrakk>\\<forall>i.\n                   if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n                   then \\<sigma> i =\n                        the (fst (netgmap sr (SubnetS s\\<^sub>1 s\\<^sub>2))\n                              i)\n                   else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i);\n        s\\<^sub>1 \\<in> init (pnet np p1);\n        s\\<^sub>2 \\<in> init (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>,\n                          snd (netgmap sr (SubnetS s\\<^sub>1 s\\<^sub>2)))\n                         \\<in> init (opnet onp (p1 \\<parallel> p2))", "have \"(\\<sigma>, snd (netgmap sr s1)) \\<in> ?S1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s1))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p1) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p1\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s1))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p1) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p1\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s1))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p1) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p1\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s1))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p1) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p1\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "assume \"i \\<in> net_tree_ips p1\""], ["proof (state)\nthis:\n  i \\<in> net_tree_ips p1\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s1))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p1) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p1\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "with \\<open>net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\\<close>"], ["proof (chain)\npicking this:\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n  i \\<in> net_tree_ips p1", "have \"i \\<notin> net_tree_ips p2\""], ["proof (prove)\nusing this:\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n  i \\<in> net_tree_ips p1\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips p2", "by auto"], ["proof (state)\nthis:\n  i \\<notin> net_tree_ips p2\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s1))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p1) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p1\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "with \\<open>s2 \\<in> init (pnet np p2)\\<close>"], ["proof (chain)\npicking this:\n  s2 \\<in> init (pnet np p2)\n  i \\<notin> net_tree_ips p2", "have \"i \\<notin> net_ips s2\""], ["proof (prove)\nusing this:\n  s2 \\<in> init (pnet np p2)\n  i \\<notin> net_tree_ips p2\n\ngoal (1 subgoal):\n 1. i \\<notin> net_ips s2", ".."], ["proof (state)\nthis:\n  i \\<notin> net_ips s2\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s1))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p1) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p1\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "hence \"the ((fst (netgmap sr s1) ++ fst (netgmap sr s2)) i) = the (fst (netgmap sr s1) i)\""], ["proof (prove)\nusing this:\n  i \\<notin> net_ips s2\n\ngoal (1 subgoal):\n 1. the ((fst (netgmap sr s1) ++ fst (netgmap sr s2)) i) =\n    the (fst (netgmap sr s1) i)", "by simp"], ["proof (state)\nthis:\n  the ((fst (netgmap sr s1) ++ fst (netgmap sr s2)) i) =\n  the (fst (netgmap sr s1) i)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s1))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p1) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p1\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "}"], ["proof (state)\nthis:\n  ?i2 \\<in> net_tree_ips p1 \\<Longrightarrow>\n  the ((fst (netgmap sr s1) ++ fst (netgmap sr s2)) ?i2) =\n  the (fst (netgmap sr s1) ?i2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s1))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p1) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p1\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "moreover"], ["proof (state)\nthis:\n  ?i2 \\<in> net_tree_ips p1 \\<Longrightarrow>\n  the ((fst (netgmap sr s1) ++ fst (netgmap sr s2)) ?i2) =\n  the (fst (netgmap sr s1) ?i2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s1))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p1) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p1\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "{"], ["proof (state)\nthis:\n  ?i2 \\<in> net_tree_ips p1 \\<Longrightarrow>\n  the ((fst (netgmap sr s1) ++ fst (netgmap sr s2)) ?i2) =\n  the (fst (netgmap sr s1) ?i2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s1))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p1) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p1\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s1))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p1) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p1\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "assume \"i \\<notin> net_tree_ips p1\""], ["proof (state)\nthis:\n  i \\<notin> net_tree_ips p1\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s1))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p1) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p1\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "have \"\\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "proof (cases \"i \\<in> net_tree_ips p2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> net_tree_ips p2 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\n 2. i \\<notin> net_tree_ips p2 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "assume \"i \\<notin> net_tree_ips p2\""], ["proof (state)\nthis:\n  i \\<notin> net_tree_ips p2\n\ngoal (2 subgoals):\n 1. i \\<in> net_tree_ips p2 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\n 2. i \\<notin> net_tree_ips p2 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "with \\<open>i \\<notin> net_tree_ips p1\\<close> and \\<sigma>_desc"], ["proof (chain)\npicking this:\n  i \\<notin> net_tree_ips p1\n  \\<forall>i.\n     if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n     then \\<sigma> i = the (fst (netgmap sr (SubnetS s1 s2)) i)\n     else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\n  i \\<notin> net_tree_ips p2", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<notin> net_tree_ips p1\n  \\<forall>i.\n     if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n     then \\<sigma> i = the (fst (netgmap sr (SubnetS s1 s2)) i)\n     else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\n  i \\<notin> net_tree_ips p2\n\ngoal (1 subgoal):\n 1. \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "by (auto dest: spec [of _ i])"], ["proof (state)\nthis:\n  \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips p2 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips p2 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "assume \"i \\<in> net_tree_ips p2\""], ["proof (state)\nthis:\n  i \\<in> net_tree_ips p2\n\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips p2 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "with \\<open>s2 \\<in> init (pnet np p2)\\<close>"], ["proof (chain)\npicking this:\n  s2 \\<in> init (pnet np p2)\n  i \\<in> net_tree_ips p2", "have \"i \\<in> net_ips s2\""], ["proof (prove)\nusing this:\n  s2 \\<in> init (pnet np p2)\n  i \\<in> net_tree_ips p2\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2", ".."], ["proof (state)\nthis:\n  i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips p2 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "with \\<open>s2 \\<in> init (pnet np p2)\\<close>"], ["proof (chain)\npicking this:\n  s2 \\<in> init (pnet np p2)\n  i \\<in> net_ips s2", "have \"the (fst (netgmap sr s2) i) \\<in> (fst \\<circ> sr) ` init (np i)\""], ["proof (prove)\nusing this:\n  s2 \\<in> init (pnet np p2)\n  i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. the (fst (netgmap sr s2) i) \\<in> (fst \\<circ> sr) ` init (np i)", "using \\<open>wf_net_tree p2\\<close>"], ["proof (prove)\nusing this:\n  s2 \\<in> init (pnet np p2)\n  i \\<in> net_ips s2\n  wf_net_tree p2\n\ngoal (1 subgoal):\n 1. the (fst (netgmap sr s2) i) \\<in> (fst \\<circ> sr) ` init (np i)", "by (rule init_pnet_fst_sr_netgmap)"], ["proof (state)\nthis:\n  the (fst (netgmap sr s2) i) \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips p2 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "with \\<open>i\\<in>net_tree_ips p2\\<close> and \\<open>i\\<in>net_ips s2\\<close>"], ["proof (chain)\npicking this:\n  i \\<in> net_tree_ips p2\n  i \\<in> net_ips s2\n  the (fst (netgmap sr s2) i) \\<in> (fst \\<circ> sr) ` init (np i)", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<in> net_tree_ips p2\n  i \\<in> net_ips s2\n  the (fst (netgmap sr s2) i) \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "using \\<sigma>_desc"], ["proof (prove)\nusing this:\n  i \\<in> net_tree_ips p2\n  i \\<in> net_ips s2\n  the (fst (netgmap sr s2) i) \\<in> (fst \\<circ> sr) ` init (np i)\n  \\<forall>i.\n     if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n     then \\<sigma> i = the (fst (netgmap sr (SubnetS s1 s2)) i)\n     else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "by simp"], ["proof (state)\nthis:\n  \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s1))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p1) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p1\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "}"], ["proof (state)\nthis:\n  ?i2 \\<notin> net_tree_ips p1 \\<Longrightarrow>\n  \\<sigma> ?i2 \\<in> (fst \\<circ> sr) ` init (np ?i2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s1))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p1) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p1\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "ultimately"], ["proof (chain)\npicking this:\n  ?i2 \\<in> net_tree_ips p1 \\<Longrightarrow>\n  the ((fst (netgmap sr s1) ++ fst (netgmap sr s2)) ?i2) =\n  the (fst (netgmap sr s1) ?i2)\n  ?i2 \\<notin> net_tree_ips p1 \\<Longrightarrow>\n  \\<sigma> ?i2 \\<in> (fst \\<circ> sr) ` init (np ?i2)", "show ?thesis"], ["proof (prove)\nusing this:\n  ?i2 \\<in> net_tree_ips p1 \\<Longrightarrow>\n  the ((fst (netgmap sr s1) ++ fst (netgmap sr s2)) ?i2) =\n  the (fst (netgmap sr s1) ?i2)\n  ?i2 \\<notin> net_tree_ips p1 \\<Longrightarrow>\n  \\<sigma> ?i2 \\<in> (fst \\<circ> sr) ` init (np ?i2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s1))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p1) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p1\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "using \\<open>s1 \\<in> init (pnet np p1)\\<close> and \\<sigma>_desc"], ["proof (prove)\nusing this:\n  ?i2 \\<in> net_tree_ips p1 \\<Longrightarrow>\n  the ((fst (netgmap sr s1) ++ fst (netgmap sr s2)) ?i2) =\n  the (fst (netgmap sr s1) ?i2)\n  ?i2 \\<notin> net_tree_ips p1 \\<Longrightarrow>\n  \\<sigma> ?i2 \\<in> (fst \\<circ> sr) ` init (np ?i2)\n  s1 \\<in> init (pnet np p1)\n  \\<forall>i.\n     if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n     then \\<sigma> i = the (fst (netgmap sr (SubnetS s1 s2)) i)\n     else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s1))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p1) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p1\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>, snd (netgmap sr s1))\n  \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p1) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p1\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<sigma>, snd (netgmap sr s1))\n  \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p1) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p1\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n\ngoal (1 subgoal):\n 1. \\<And>a b \\<sigma> s s\\<^sub>1 s\\<^sub>2.\n       \\<lbrakk>\\<forall>i.\n                   if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n                   then \\<sigma> i =\n                        the (fst (netgmap sr (SubnetS s\\<^sub>1 s\\<^sub>2))\n                              i)\n                   else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i);\n        s\\<^sub>1 \\<in> init (pnet np p1);\n        s\\<^sub>2 \\<in> init (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>,\n                          snd (netgmap sr (SubnetS s\\<^sub>1 s\\<^sub>2)))\n                         \\<in> init (opnet onp (p1 \\<parallel> p2))", "hence \"(\\<sigma>, snd (netgmap sr s1)) \\<in> init (opnet onp p1)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, snd (netgmap sr s1))\n  \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p1) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p1\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s1)) \\<in> init (opnet onp p1)", "by (rule subsetD [OF IH1 [OF \\<open>wf_net_tree p1\\<close>]])"], ["proof (state)\nthis:\n  (\\<sigma>, snd (netgmap sr s1)) \\<in> init (opnet onp p1)\n\ngoal (1 subgoal):\n 1. \\<And>a b \\<sigma> s s\\<^sub>1 s\\<^sub>2.\n       \\<lbrakk>\\<forall>i.\n                   if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n                   then \\<sigma> i =\n                        the (fst (netgmap sr (SubnetS s\\<^sub>1 s\\<^sub>2))\n                              i)\n                   else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i);\n        s\\<^sub>1 \\<in> init (pnet np p1);\n        s\\<^sub>2 \\<in> init (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>,\n                          snd (netgmap sr (SubnetS s\\<^sub>1 s\\<^sub>2)))\n                         \\<in> init (opnet onp (p1 \\<parallel> p2))", "have \"(\\<sigma>, snd (netgmap sr s2)) \\<in> ?S2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s2))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p2) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p2\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s2))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p2) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p2\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s2))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p2) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p2\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s2))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p2) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p2\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "assume \"i \\<in> net_tree_ips p2\""], ["proof (state)\nthis:\n  i \\<in> net_tree_ips p2\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s2))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p2) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p2\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "with \\<open>s2 \\<in> init (pnet np p2)\\<close>"], ["proof (chain)\npicking this:\n  s2 \\<in> init (pnet np p2)\n  i \\<in> net_tree_ips p2", "have \"i \\<in> net_ips s2\""], ["proof (prove)\nusing this:\n  s2 \\<in> init (pnet np p2)\n  i \\<in> net_tree_ips p2\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2", ".."], ["proof (state)\nthis:\n  i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s2))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p2) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p2\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "hence \"the ((fst (netgmap sr s1) ++ fst (netgmap sr s2)) i) = the (fst (netgmap sr s2) i)\""], ["proof (prove)\nusing this:\n  i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. the ((fst (netgmap sr s1) ++ fst (netgmap sr s2)) i) =\n    the (fst (netgmap sr s2) i)", "by simp"], ["proof (state)\nthis:\n  the ((fst (netgmap sr s1) ++ fst (netgmap sr s2)) i) =\n  the (fst (netgmap sr s2) i)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s2))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p2) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p2\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "}"], ["proof (state)\nthis:\n  ?i2 \\<in> net_tree_ips p2 \\<Longrightarrow>\n  the ((fst (netgmap sr s1) ++ fst (netgmap sr s2)) ?i2) =\n  the (fst (netgmap sr s2) ?i2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s2))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p2) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p2\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "moreover"], ["proof (state)\nthis:\n  ?i2 \\<in> net_tree_ips p2 \\<Longrightarrow>\n  the ((fst (netgmap sr s1) ++ fst (netgmap sr s2)) ?i2) =\n  the (fst (netgmap sr s2) ?i2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s2))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p2) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p2\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "{"], ["proof (state)\nthis:\n  ?i2 \\<in> net_tree_ips p2 \\<Longrightarrow>\n  the ((fst (netgmap sr s1) ++ fst (netgmap sr s2)) ?i2) =\n  the (fst (netgmap sr s2) ?i2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s2))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p2) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p2\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s2))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p2) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p2\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "assume \"i \\<notin> net_tree_ips p2\""], ["proof (state)\nthis:\n  i \\<notin> net_tree_ips p2\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s2))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p2) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p2\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "have \"\\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "proof (cases \"i \\<in> net_tree_ips p1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> net_tree_ips p1 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\n 2. i \\<notin> net_tree_ips p1 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "assume \"i \\<notin> net_tree_ips p1\""], ["proof (state)\nthis:\n  i \\<notin> net_tree_ips p1\n\ngoal (2 subgoals):\n 1. i \\<in> net_tree_ips p1 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\n 2. i \\<notin> net_tree_ips p1 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "with \\<open>i \\<notin> net_tree_ips p2\\<close> and \\<sigma>_desc"], ["proof (chain)\npicking this:\n  i \\<notin> net_tree_ips p2\n  \\<forall>i.\n     if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n     then \\<sigma> i = the (fst (netgmap sr (SubnetS s1 s2)) i)\n     else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\n  i \\<notin> net_tree_ips p1", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<notin> net_tree_ips p2\n  \\<forall>i.\n     if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n     then \\<sigma> i = the (fst (netgmap sr (SubnetS s1 s2)) i)\n     else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\n  i \\<notin> net_tree_ips p1\n\ngoal (1 subgoal):\n 1. \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "by (auto dest: spec [of _ i])"], ["proof (state)\nthis:\n  \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips p1 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips p1 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "assume \"i \\<in> net_tree_ips p1\""], ["proof (state)\nthis:\n  i \\<in> net_tree_ips p1\n\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips p1 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "with \\<open>s1 \\<in> init (pnet np p1)\\<close>"], ["proof (chain)\npicking this:\n  s1 \\<in> init (pnet np p1)\n  i \\<in> net_tree_ips p1", "have \"i \\<in> net_ips s1\""], ["proof (prove)\nusing this:\n  s1 \\<in> init (pnet np p1)\n  i \\<in> net_tree_ips p1\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s1", ".."], ["proof (state)\nthis:\n  i \\<in> net_ips s1\n\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips p1 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "with \\<open>s1 \\<in> init (pnet np p1)\\<close>"], ["proof (chain)\npicking this:\n  s1 \\<in> init (pnet np p1)\n  i \\<in> net_ips s1", "have \"the (fst (netgmap sr s1) i) \\<in> (fst \\<circ> sr) ` init (np i)\""], ["proof (prove)\nusing this:\n  s1 \\<in> init (pnet np p1)\n  i \\<in> net_ips s1\n\ngoal (1 subgoal):\n 1. the (fst (netgmap sr s1) i) \\<in> (fst \\<circ> sr) ` init (np i)", "using \\<open>wf_net_tree p1\\<close>"], ["proof (prove)\nusing this:\n  s1 \\<in> init (pnet np p1)\n  i \\<in> net_ips s1\n  wf_net_tree p1\n\ngoal (1 subgoal):\n 1. the (fst (netgmap sr s1) i) \\<in> (fst \\<circ> sr) ` init (np i)", "by (rule init_pnet_fst_sr_netgmap)"], ["proof (state)\nthis:\n  the (fst (netgmap sr s1) i) \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips p1 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "moreover"], ["proof (state)\nthis:\n  the (fst (netgmap sr s1) i) \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips p1 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "from \\<open>s2 \\<in> init (pnet np p2)\\<close> and \\<open>i \\<notin> net_tree_ips p2\\<close>"], ["proof (chain)\npicking this:\n  s2 \\<in> init (pnet np p2)\n  i \\<notin> net_tree_ips p2", "have \"i\\<notin>net_ips s2\""], ["proof (prove)\nusing this:\n  s2 \\<in> init (pnet np p2)\n  i \\<notin> net_tree_ips p2\n\ngoal (1 subgoal):\n 1. i \\<notin> net_ips s2", ".."], ["proof (state)\nthis:\n  i \\<notin> net_ips s2\n\ngoal (1 subgoal):\n 1. i \\<in> net_tree_ips p1 \\<Longrightarrow>\n    \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "ultimately"], ["proof (chain)\npicking this:\n  the (fst (netgmap sr s1) i) \\<in> (fst \\<circ> sr) ` init (np i)\n  i \\<notin> net_ips s2", "show ?thesis"], ["proof (prove)\nusing this:\n  the (fst (netgmap sr s1) i) \\<in> (fst \\<circ> sr) ` init (np i)\n  i \\<notin> net_ips s2\n\ngoal (1 subgoal):\n 1. \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "using \\<open>i\\<in>net_tree_ips p1\\<close> \\<open>i\\<in>net_ips s1\\<close> and \\<open>i\\<notin>net_tree_ips p2\\<close> \\<sigma>_desc"], ["proof (prove)\nusing this:\n  the (fst (netgmap sr s1) i) \\<in> (fst \\<circ> sr) ` init (np i)\n  i \\<notin> net_ips s2\n  i \\<in> net_tree_ips p1\n  i \\<in> net_ips s1\n  i \\<notin> net_tree_ips p2\n  \\<forall>i.\n     if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n     then \\<sigma> i = the (fst (netgmap sr (SubnetS s1 s2)) i)\n     else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)", "by simp"], ["proof (state)\nthis:\n  \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s2))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p2) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p2\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "}"], ["proof (state)\nthis:\n  ?i2 \\<notin> net_tree_ips p2 \\<Longrightarrow>\n  \\<sigma> ?i2 \\<in> (fst \\<circ> sr) ` init (np ?i2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s2))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p2) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p2\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "ultimately"], ["proof (chain)\npicking this:\n  ?i2 \\<in> net_tree_ips p2 \\<Longrightarrow>\n  the ((fst (netgmap sr s1) ++ fst (netgmap sr s2)) ?i2) =\n  the (fst (netgmap sr s2) ?i2)\n  ?i2 \\<notin> net_tree_ips p2 \\<Longrightarrow>\n  \\<sigma> ?i2 \\<in> (fst \\<circ> sr) ` init (np ?i2)", "show ?thesis"], ["proof (prove)\nusing this:\n  ?i2 \\<in> net_tree_ips p2 \\<Longrightarrow>\n  the ((fst (netgmap sr s1) ++ fst (netgmap sr s2)) ?i2) =\n  the (fst (netgmap sr s2) ?i2)\n  ?i2 \\<notin> net_tree_ips p2 \\<Longrightarrow>\n  \\<sigma> ?i2 \\<in> (fst \\<circ> sr) ` init (np ?i2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s2))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p2) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p2\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "using \\<open>s2 \\<in> init (pnet np p2)\\<close> and \\<sigma>_desc"], ["proof (prove)\nusing this:\n  ?i2 \\<in> net_tree_ips p2 \\<Longrightarrow>\n  the ((fst (netgmap sr s1) ++ fst (netgmap sr s2)) ?i2) =\n  the (fst (netgmap sr s2) ?i2)\n  ?i2 \\<notin> net_tree_ips p2 \\<Longrightarrow>\n  \\<sigma> ?i2 \\<in> (fst \\<circ> sr) ` init (np ?i2)\n  s2 \\<in> init (pnet np p2)\n  \\<forall>i.\n     if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n     then \\<sigma> i = the (fst (netgmap sr (SubnetS s1 s2)) i)\n     else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s2))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p2) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p2\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "by auto"], ["proof (state)\nthis:\n  (\\<sigma>, snd (netgmap sr s2))\n  \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p2) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p2\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<sigma>, snd (netgmap sr s2))\n  \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p2) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p2\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n\ngoal (1 subgoal):\n 1. \\<And>a b \\<sigma> s s\\<^sub>1 s\\<^sub>2.\n       \\<lbrakk>\\<forall>i.\n                   if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n                   then \\<sigma> i =\n                        the (fst (netgmap sr (SubnetS s\\<^sub>1 s\\<^sub>2))\n                              i)\n                   else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i);\n        s\\<^sub>1 \\<in> init (pnet np p1);\n        s\\<^sub>2 \\<in> init (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>,\n                          snd (netgmap sr (SubnetS s\\<^sub>1 s\\<^sub>2)))\n                         \\<in> init (opnet onp (p1 \\<parallel> p2))", "hence \"(\\<sigma>, snd (netgmap sr s2)) \\<in> init (opnet onp p2)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, snd (netgmap sr s2))\n  \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p2) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p2\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr s2)) \\<in> init (opnet onp p2)", "by (rule subsetD [OF IH2 [OF \\<open>wf_net_tree p2\\<close>]])"], ["proof (state)\nthis:\n  (\\<sigma>, snd (netgmap sr s2)) \\<in> init (opnet onp p2)\n\ngoal (1 subgoal):\n 1. \\<And>a b \\<sigma> s s\\<^sub>1 s\\<^sub>2.\n       \\<lbrakk>\\<forall>i.\n                   if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n                   then \\<sigma> i =\n                        the (fst (netgmap sr (SubnetS s\\<^sub>1 s\\<^sub>2))\n                              i)\n                   else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i);\n        s\\<^sub>1 \\<in> init (pnet np p1);\n        s\\<^sub>2 \\<in> init (pnet np p2)\\<rbrakk>\n       \\<Longrightarrow> (\\<sigma>,\n                          snd (netgmap sr (SubnetS s\\<^sub>1 s\\<^sub>2)))\n                         \\<in> init (opnet onp (p1 \\<parallel> p2))", "with \\<open>(\\<sigma>, snd (netgmap sr s1)) \\<in> init (opnet onp p1)\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, snd (netgmap sr s1)) \\<in> init (opnet onp p1)\n  (\\<sigma>, snd (netgmap sr s2)) \\<in> init (opnet onp p2)", "show \"(\\<sigma>, snd (netgmap sr (SubnetS s1 s2))) \\<in> init (opnet onp (p1 \\<parallel> p2))\""], ["proof (prove)\nusing this:\n  (\\<sigma>, snd (netgmap sr s1)) \\<in> init (opnet onp p1)\n  (\\<sigma>, snd (netgmap sr s2)) \\<in> init (opnet onp p2)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr (SubnetS s1 s2)))\n    \\<in> init (opnet onp (p1 \\<parallel> p2))", "using \\<open>net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\\<close>\n              \\<open>net_ips s1 = net_tree_ips p1\\<close>\n              \\<open>net_ips s2 = net_tree_ips p2\\<close>"], ["proof (prove)\nusing this:\n  (\\<sigma>, snd (netgmap sr s1)) \\<in> init (opnet onp p1)\n  (\\<sigma>, snd (netgmap sr s2)) \\<in> init (opnet onp p2)\n  net_tree_ips p1 \\<inter> net_tree_ips p2 = {}\n  net_ips s1 = net_tree_ips p1\n  net_ips s2 = net_tree_ips p2\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (netgmap sr (SubnetS s1 s2)))\n    \\<in> init (opnet onp (p1 \\<parallel> p2))", "by simp"], ["proof (state)\nthis:\n  (\\<sigma>, snd (netgmap sr (SubnetS s1 s2)))\n  \\<in> init (opnet onp (p1 \\<parallel> p2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n   s \\<in> init (pnet np (p1 \\<parallel> p2)) \\<and>\n   (\\<forall>i.\n       if i \\<in> net_tree_ips (p1 \\<parallel> p2)\n       then \\<sigma> i = the (fst (netgmap sr s) i)\n       else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n  \\<subseteq> init (opnet onp (p1 \\<parallel> p2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma init_pnet_opnet [elim]:\n  assumes \"wf_net_tree p\"\n      and \"s \\<in> init (pnet np p)\"\n    shows \"netgmap sr s \\<in> netmask (net_tree_ips p) ` init (opnet onp p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netgmap sr s \\<in> netmask (net_tree_ips p) ` init (opnet onp p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. netgmap sr s \\<in> netmask (net_tree_ips p) ` init (opnet onp p)", "from \\<open>wf_net_tree p\\<close>"], ["proof (chain)\npicking this:\n  wf_net_tree p", "have \"{ (\\<sigma>, snd (netgmap sr s)) |\\<sigma> s. s \\<in> init (pnet np p)\n                              \\<and> (\\<forall>i. if i\\<in>net_tree_ips p then \\<sigma> i = the (fst (netgmap sr s) i)\n                                     else \\<sigma> i \\<in> (fst o sr) ` init (np i)) } \\<subseteq> init (opnet onp p)\"\n        (is \"?S \\<subseteq> _\")"], ["proof (prove)\nusing this:\n  wf_net_tree p\n\ngoal (1 subgoal):\n 1. {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n     s \\<in> init (pnet np p) \\<and>\n     (\\<forall>i.\n         if i \\<in> net_tree_ips p\n         then \\<sigma> i = the (fst (netgmap sr s) i)\n         else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n    \\<subseteq> init (opnet onp p)", "by (rule init_lifted)"], ["proof (state)\nthis:\n  {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n   s \\<in> init (pnet np p) \\<and>\n   (\\<forall>i.\n       if i \\<in> net_tree_ips p\n       then \\<sigma> i = the (fst (netgmap sr s) i)\n       else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n  \\<subseteq> init (opnet onp p)\n\ngoal (1 subgoal):\n 1. netgmap sr s \\<in> netmask (net_tree_ips p) ` init (opnet onp p)", "hence \"netmask (net_tree_ips p) ` ?S \\<subseteq> netmask (net_tree_ips p) ` init (opnet onp p)\""], ["proof (prove)\nusing this:\n  {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n   s \\<in> init (pnet np p) \\<and>\n   (\\<forall>i.\n       if i \\<in> net_tree_ips p\n       then \\<sigma> i = the (fst (netgmap sr s) i)\n       else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n  \\<subseteq> init (opnet onp p)\n\ngoal (1 subgoal):\n 1. netmask (net_tree_ips p) `\n    {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n     s \\<in> init (pnet np p) \\<and>\n     (\\<forall>i.\n         if i \\<in> net_tree_ips p\n         then \\<sigma> i = the (fst (netgmap sr s) i)\n         else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n    \\<subseteq> netmask (net_tree_ips p) ` init (opnet onp p)", "by (rule image_mono)"], ["proof (state)\nthis:\n  netmask (net_tree_ips p) `\n  {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n   s \\<in> init (pnet np p) \\<and>\n   (\\<forall>i.\n       if i \\<in> net_tree_ips p\n       then \\<sigma> i = the (fst (netgmap sr s) i)\n       else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n  \\<subseteq> netmask (net_tree_ips p) ` init (opnet onp p)\n\ngoal (1 subgoal):\n 1. netgmap sr s \\<in> netmask (net_tree_ips p) ` init (opnet onp p)", "moreover"], ["proof (state)\nthis:\n  netmask (net_tree_ips p) `\n  {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n   s \\<in> init (pnet np p) \\<and>\n   (\\<forall>i.\n       if i \\<in> net_tree_ips p\n       then \\<sigma> i = the (fst (netgmap sr s) i)\n       else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n  \\<subseteq> netmask (net_tree_ips p) ` init (opnet onp p)\n\ngoal (1 subgoal):\n 1. netgmap sr s \\<in> netmask (net_tree_ips p) ` init (opnet onp p)", "have \"netgmap sr s \\<in> netmask (net_tree_ips p) ` ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips p) `\n          {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips p) `\n          {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips p) `\n          {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips p) `\n          {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "from init_notempty"], ["proof (chain)\npicking this:\n  \\<forall>j. init (np j) \\<noteq> {}", "have \"\\<exists>s. s \\<in> (fst \\<circ> sr) ` init (np i)\""], ["proof (prove)\nusing this:\n  \\<forall>j. init (np j) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>s. s \\<in> (fst \\<circ> sr) ` init (np i)", "by auto"], ["proof (state)\nthis:\n  \\<exists>s. s \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips p) `\n          {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "hence \"(SOME x. x \\<in> (fst \\<circ> sr) ` init (np i)) \\<in> (fst \\<circ> sr) ` init (np i)\""], ["proof (prove)\nusing this:\n  \\<exists>s. s \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. (SOME x. x \\<in> (fst \\<circ> sr) ` init (np i))\n    \\<in> (fst \\<circ> sr) ` init (np i)", ".."], ["proof (state)\nthis:\n  (SOME x. x \\<in> (fst \\<circ> sr) ` init (np i))\n  \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips p) `\n          {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "}"], ["proof (state)\nthis:\n  (SOME x. x \\<in> (fst \\<circ> sr) ` init (np ?i2))\n  \\<in> (fst \\<circ> sr) ` init (np ?i2)\n\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips p) `\n          {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "with \\<open>s \\<in> init (pnet np p)\\<close> and init_notempty"], ["proof (chain)\npicking this:\n  s \\<in> init (pnet np p)\n  \\<forall>j. init (np j) \\<noteq> {}\n  (SOME x. x \\<in> (fst \\<circ> sr) ` init (np ?i2))\n  \\<in> (fst \\<circ> sr) ` init (np ?i2)", "have \"(\\<lambda>i. if i \\<in> net_tree_ips p\n                   then the (fst (netgmap sr s) i)\n                   else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i), snd (netgmap sr s)) \\<in> ?S\"\n          (is \"?s \\<in> ?S\")"], ["proof (prove)\nusing this:\n  s \\<in> init (pnet np p)\n  \\<forall>j. init (np j) \\<noteq> {}\n  (SOME x. x \\<in> (fst \\<circ> sr) ` init (np ?i2))\n  \\<in> (fst \\<circ> sr) ` init (np ?i2)\n\ngoal (1 subgoal):\n 1. (\\<lambda>i.\n        if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n        else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n     snd (netgmap sr s))\n    \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>i.\n      if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n      else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n   snd (netgmap sr s))\n  \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips p) `\n          {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>i.\n      if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n      else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n   snd (netgmap sr s))\n  \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips p) `\n          {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "have \"netgmap sr s = netmask (net_tree_ips p) ?s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netgmap sr s =\n    netmask (net_tree_ips p)\n     (\\<lambda>i.\n         if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n         else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n      snd (netgmap sr s))", "proof (intro prod_eqI ext)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       fst (netgmap sr s) x =\n       fst (netmask (net_tree_ips p)\n             (\\<lambda>i.\n                 if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n                 else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n              snd (netgmap sr s)))\n        x\n 2. snd (netgmap sr s) =\n    snd (netmask (net_tree_ips p)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n              else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n           snd (netgmap sr s)))", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       fst (netgmap sr s) x =\n       fst (netmask (net_tree_ips p)\n             (\\<lambda>i.\n                 if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n                 else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n              snd (netgmap sr s)))\n        x\n 2. snd (netgmap sr s) =\n    snd (netmask (net_tree_ips p)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n              else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n           snd (netgmap sr s)))", "show \"fst (netgmap sr s) i = fst (netmask (net_tree_ips p) ?s) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (netgmap sr s) i =\n    fst (netmask (net_tree_ips p)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n              else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n           snd (netgmap sr s)))\n     i", "proof (cases \"i \\<in> net_tree_ips p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> net_tree_ips p \\<Longrightarrow>\n    fst (netgmap sr s) i =\n    fst (netmask (net_tree_ips p)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n              else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n           snd (netgmap sr s)))\n     i\n 2. i \\<notin> net_tree_ips p \\<Longrightarrow>\n    fst (netgmap sr s) i =\n    fst (netmask (net_tree_ips p)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n              else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n           snd (netgmap sr s)))\n     i", "assume \"i \\<in> net_tree_ips p\""], ["proof (state)\nthis:\n  i \\<in> net_tree_ips p\n\ngoal (2 subgoals):\n 1. i \\<in> net_tree_ips p \\<Longrightarrow>\n    fst (netgmap sr s) i =\n    fst (netmask (net_tree_ips p)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n              else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n           snd (netgmap sr s)))\n     i\n 2. i \\<notin> net_tree_ips p \\<Longrightarrow>\n    fst (netgmap sr s) i =\n    fst (netmask (net_tree_ips p)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n              else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n           snd (netgmap sr s)))\n     i", "with \\<open>s\\<in>init (pnet np p)\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> init (pnet np p)\n  i \\<in> net_tree_ips p", "have \"i\\<in>net_ips s\""], ["proof (prove)\nusing this:\n  s \\<in> init (pnet np p)\n  i \\<in> net_tree_ips p\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s", ".."], ["proof (state)\nthis:\n  i \\<in> net_ips s\n\ngoal (2 subgoals):\n 1. i \\<in> net_tree_ips p \\<Longrightarrow>\n    fst (netgmap sr s) i =\n    fst (netmask (net_tree_ips p)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n              else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n           snd (netgmap sr s)))\n     i\n 2. i \\<notin> net_tree_ips p \\<Longrightarrow>\n    fst (netgmap sr s) i =\n    fst (netmask (net_tree_ips p)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n              else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n           snd (netgmap sr s)))\n     i", "hence \"Some (the (fst (netgmap sr s) i)) = fst (netgmap sr s) i\""], ["proof (prove)\nusing this:\n  i \\<in> net_ips s\n\ngoal (1 subgoal):\n 1. Some (the (fst (netgmap sr s) i)) = fst (netgmap sr s) i", "by (rule some_the_fst_netgmap)"], ["proof (state)\nthis:\n  Some (the (fst (netgmap sr s) i)) = fst (netgmap sr s) i\n\ngoal (2 subgoals):\n 1. i \\<in> net_tree_ips p \\<Longrightarrow>\n    fst (netgmap sr s) i =\n    fst (netmask (net_tree_ips p)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n              else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n           snd (netgmap sr s)))\n     i\n 2. i \\<notin> net_tree_ips p \\<Longrightarrow>\n    fst (netgmap sr s) i =\n    fst (netmask (net_tree_ips p)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n              else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n           snd (netgmap sr s)))\n     i", "with \\<open>i\\<in>net_tree_ips p\\<close>"], ["proof (chain)\npicking this:\n  i \\<in> net_tree_ips p\n  Some (the (fst (netgmap sr s) i)) = fst (netgmap sr s) i", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<in> net_tree_ips p\n  Some (the (fst (netgmap sr s) i)) = fst (netgmap sr s) i\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s) i =\n    fst (netmask (net_tree_ips p)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n              else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n           snd (netgmap sr s)))\n     i", "by simp"], ["proof (state)\nthis:\n  fst (netgmap sr s) i =\n  fst (netmask (net_tree_ips p)\n        (\\<lambda>i.\n            if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n            else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n         snd (netgmap sr s)))\n   i\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips p \\<Longrightarrow>\n    fst (netgmap sr s) i =\n    fst (netmask (net_tree_ips p)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n              else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n           snd (netgmap sr s)))\n     i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips p \\<Longrightarrow>\n    fst (netgmap sr s) i =\n    fst (netmask (net_tree_ips p)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n              else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n           snd (netgmap sr s)))\n     i", "assume \"i \\<notin> net_tree_ips p\""], ["proof (state)\nthis:\n  i \\<notin> net_tree_ips p\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips p \\<Longrightarrow>\n    fst (netgmap sr s) i =\n    fst (netmask (net_tree_ips p)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n              else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n           snd (netgmap sr s)))\n     i", "moreover"], ["proof (state)\nthis:\n  i \\<notin> net_tree_ips p\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips p \\<Longrightarrow>\n    fst (netgmap sr s) i =\n    fst (netmask (net_tree_ips p)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n              else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n           snd (netgmap sr s)))\n     i", "with \\<open>s\\<in>init (pnet np p)\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> init (pnet np p)\n  i \\<notin> net_tree_ips p", "have \"i\\<notin>net_ips s\""], ["proof (prove)\nusing this:\n  s \\<in> init (pnet np p)\n  i \\<notin> net_tree_ips p\n\ngoal (1 subgoal):\n 1. i \\<notin> net_ips s", ".."], ["proof (state)\nthis:\n  i \\<notin> net_ips s\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips p \\<Longrightarrow>\n    fst (netgmap sr s) i =\n    fst (netmask (net_tree_ips p)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n              else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n           snd (netgmap sr s)))\n     i", "ultimately"], ["proof (chain)\npicking this:\n  i \\<notin> net_tree_ips p\n  i \\<notin> net_ips s", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<notin> net_tree_ips p\n  i \\<notin> net_ips s\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s) i =\n    fst (netmask (net_tree_ips p)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n              else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n           snd (netgmap sr s)))\n     i", "by simp"], ["proof (state)\nthis:\n  fst (netgmap sr s) i =\n  fst (netmask (net_tree_ips p)\n        (\\<lambda>i.\n            if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n            else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n         snd (netgmap sr s)))\n   i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (netgmap sr s) i =\n  fst (netmask (net_tree_ips p)\n        (\\<lambda>i.\n            if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n            else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n         snd (netgmap sr s)))\n   i\n\ngoal (1 subgoal):\n 1. snd (netgmap sr s) =\n    snd (netmask (net_tree_ips p)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n              else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n           snd (netgmap sr s)))", "qed simp"], ["proof (state)\nthis:\n  netgmap sr s =\n  netmask (net_tree_ips p)\n   (\\<lambda>i.\n       if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n       else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n    snd (netgmap sr s))\n\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips p) `\n          {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>i.\n      if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n      else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n   snd (netgmap sr s))\n  \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n  netgmap sr s =\n  netmask (net_tree_ips p)\n   (\\<lambda>i.\n       if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n       else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n    snd (netgmap sr s))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>i.\n      if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n      else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n   snd (netgmap sr s))\n  \\<in> {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n  netgmap sr s =\n  netmask (net_tree_ips p)\n   (\\<lambda>i.\n       if i \\<in> net_tree_ips p then the (fst (netgmap sr s) i)\n       else SOME x. x \\<in> (fst \\<circ> sr) ` init (np i),\n    snd (netgmap sr s))\n\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips p) `\n          {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n           s \\<in> init (pnet np p) \\<and>\n           (\\<forall>i.\n               if i \\<in> net_tree_ips p\n               then \\<sigma> i = the (fst (netgmap sr s) i)\n               else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "by (rule rev_image_eqI)"], ["proof (state)\nthis:\n  netgmap sr s\n  \\<in> netmask (net_tree_ips p) `\n        {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  netgmap sr s\n  \\<in> netmask (net_tree_ips p) `\n        {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n\ngoal (1 subgoal):\n 1. netgmap sr s \\<in> netmask (net_tree_ips p) ` init (opnet onp p)", "ultimately"], ["proof (chain)\npicking this:\n  netmask (net_tree_ips p) `\n  {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n   s \\<in> init (pnet np p) \\<and>\n   (\\<forall>i.\n       if i \\<in> net_tree_ips p\n       then \\<sigma> i = the (fst (netgmap sr s) i)\n       else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n  \\<subseteq> netmask (net_tree_ips p) ` init (opnet onp p)\n  netgmap sr s\n  \\<in> netmask (net_tree_ips p) `\n        {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}", "show ?thesis"], ["proof (prove)\nusing this:\n  netmask (net_tree_ips p) `\n  {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n   s \\<in> init (pnet np p) \\<and>\n   (\\<forall>i.\n       if i \\<in> net_tree_ips p\n       then \\<sigma> i = the (fst (netgmap sr s) i)\n       else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n  \\<subseteq> netmask (net_tree_ips p) ` init (opnet onp p)\n  netgmap sr s\n  \\<in> netmask (net_tree_ips p) `\n        {(\\<sigma>, snd (netgmap sr s)) |\\<sigma> s.\n         s \\<in> init (pnet np p) \\<and>\n         (\\<forall>i.\n             if i \\<in> net_tree_ips p\n             then \\<sigma> i = the (fst (netgmap sr s) i)\n             else \\<sigma> i \\<in> (fst \\<circ> sr) ` init (np i))}\n\ngoal (1 subgoal):\n 1. netgmap sr s \\<in> netmask (net_tree_ips p) ` init (opnet onp p)", "by (rule rev_subsetD [rotated])"], ["proof (state)\nthis:\n  netgmap sr s \\<in> netmask (net_tree_ips p) ` init (opnet onp p)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transfer_connect:\n  assumes \"(s, connect(i, i'), s') \\<in> trans (pnet np n)\"\n      and \"s \\<in> reachable (pnet np n) TT\"\n      and \"netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\"\n      and \"wf_net_tree n\"\n  obtains \\<sigma>' \\<zeta>' where \"((\\<sigma>, \\<zeta>), connect(i, i'), (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\"\n                  and \"\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\"\n                  and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<zeta>'.\n        \\<lbrakk>((\\<sigma>, \\<zeta>), connect(i, i'), \\<sigma>', \\<zeta>')\n                 \\<in> automaton.trans (opnet onp n);\n         \\<forall>j.\n            j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n            \\<sigma>' j = \\<sigma> j;\n         netgmap sr s' =\n         netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof atomize_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), connect(i, i'), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from assms"], ["proof (chain)\npicking this:\n  (s, connect(i, i'), s') \\<in> automaton.trans (pnet np n)\n  s \\<in> reachable (pnet np n) TT\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  wf_net_tree n", "have \"((\\<sigma>, snd (netgmap sr s)), connect(i, i'), (\\<sigma>, snd (netgmap sr s'))) \\<in> trans (opnet onp n)\n                     \\<and> netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>, snd (netgmap sr s'))\""], ["proof (prove)\nusing this:\n  (s, connect(i, i'), s') \\<in> automaton.trans (pnet np n)\n  s \\<in> reachable (pnet np n) TT\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  wf_net_tree n\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), connect(i, i'), \\<sigma>,\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp n) \\<and>\n    netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>, snd (netgmap sr s'))", "proof (induction n arbitrary: s s' \\<zeta>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, connect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "fix ii R\\<^sub>i ns ns' \\<zeta>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, connect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "assume \"(ns, connect(i, i'), ns') \\<in> trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\"\n           and \"netgmap sr ns = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\""], ["proof (state)\nthis:\n  (ns, connect(i, i'), ns')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, connect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "from this(1)"], ["proof (chain)\npicking this:\n  (ns, connect(i, i'), ns')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)", "have \"(ns, connect(i, i'), ns') \\<in> node_sos (trans (np ii))\""], ["proof (prove)\nusing this:\n  (ns, connect(i, i'), ns')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (1 subgoal):\n 1. (ns, connect(i, i'), ns') \\<in> node_sos (automaton.trans (np ii))", "by (simp add: node_comps)"], ["proof (state)\nthis:\n  (ns, connect(i, i'), ns') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, connect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "moreover"], ["proof (state)\nthis:\n  (ns, connect(i, i'), ns') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, connect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "then"], ["proof (chain)\npicking this:\n  (ns, connect(i, i'), ns') \\<in> node_sos (automaton.trans (np ii))", "obtain ni s s' R R' where \"ns  = NodeS ni s R\"\n                                            and \"ns' = NodeS ni s' R'\""], ["proof (prove)\nusing this:\n  (ns, connect(i, i'), ns') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (1 subgoal):\n 1. (\\<And>ni s R s' R'.\n        \\<lbrakk>ns = NodeS ni s R; ns' = NodeS ni s' R'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  ns = NodeS ni s R\n  ns' = NodeS ni s' R'\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, connect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "ultimately"], ["proof (chain)\npicking this:\n  (ns, connect(i, i'), ns') \\<in> node_sos (automaton.trans (np ii))\n  ns = NodeS ni s R\n  ns' = NodeS ni s' R'", "have \"(NodeS ni s R, connect(i, i'), NodeS ni s' R') \\<in> node_sos (trans (np ii))\""], ["proof (prove)\nusing this:\n  (ns, connect(i, i'), ns') \\<in> node_sos (automaton.trans (np ii))\n  ns = NodeS ni s R\n  ns' = NodeS ni s' R'\n\ngoal (1 subgoal):\n 1. (NodeS ni s R, connect(i, i'), NodeS ni s' R')\n    \\<in> node_sos (automaton.trans (np ii))", "by simp"], ["proof (state)\nthis:\n  (NodeS ni s R, connect(i, i'), NodeS ni s' R')\n  \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, connect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "moreover"], ["proof (state)\nthis:\n  (NodeS ni s R, connect(i, i'), NodeS ni s' R')\n  \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, connect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "then"], ["proof (chain)\npicking this:\n  (NodeS ni s R, connect(i, i'), NodeS ni s' R')\n  \\<in> node_sos (automaton.trans (np ii))", "have \"s' = s\""], ["proof (prove)\nusing this:\n  (NodeS ni s R, connect(i, i'), NodeS ni s' R')\n  \\<in> node_sos (automaton.trans (np ii))\n\ngoal (1 subgoal):\n 1. s' = s", "by auto"], ["proof (state)\nthis:\n  s' = s\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, connect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "ultimately"], ["proof (chain)\npicking this:\n  (NodeS ni s R, connect(i, i'), NodeS ni s' R')\n  \\<in> node_sos (automaton.trans (np ii))\n  s' = s", "have \"((\\<sigma>, NodeS ni (snd (sr s)) R), connect(i, i'), (\\<sigma>, NodeS ni (snd (sr s)) R'))\n                                                                      \\<in> onode_sos (trans (onp ii))\""], ["proof (prove)\nusing this:\n  (NodeS ni s R, connect(i, i'), NodeS ni s' R')\n  \\<in> node_sos (automaton.trans (np ii))\n  s' = s\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS ni (snd (sr s)) R), connect(i, i'), \\<sigma>,\n     NodeS ni (snd (sr s)) R')\n    \\<in> onode_sos (automaton.trans (onp ii))", "by - (rule node_connectTE', auto intro!: onode_sos.intros [simplified])"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS ni (snd (sr s)) R), connect(i, i'), \\<sigma>,\n   NodeS ni (snd (sr s)) R')\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, connect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "with \\<open>ns = NodeS ni s R\\<close> \\<open>ns' = NodeS ni s' R'\\<close> \\<open>s' = s\\<close>\n             and \\<open>netgmap sr ns = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\\<close>"], ["proof (chain)\npicking this:\n  ns = NodeS ni s R\n  ns' = NodeS ni s' R'\n  s' = s\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n  ((\\<sigma>, NodeS ni (snd (sr s)) R), connect(i, i'), \\<sigma>,\n   NodeS ni (snd (sr s)) R')\n  \\<in> onode_sos (automaton.trans (onp ii))", "show \"((\\<sigma>, snd (netgmap sr ns)), connect(i, i'), (\\<sigma>, snd (netgmap sr ns'))) \\<in> trans (opnet onp \\<langle>ii; R\\<^sub>i\\<rangle>)\n                \\<and> netgmap sr ns' = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, snd (netgmap sr ns'))\""], ["proof (prove)\nusing this:\n  ns = NodeS ni s R\n  ns' = NodeS ni s' R'\n  s' = s\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n  ((\\<sigma>, NodeS ni (snd (sr s)) R), connect(i, i'), \\<sigma>,\n   NodeS ni (snd (sr s)) R')\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr ns)), connect(i, i'), \\<sigma>,\n     snd (netgmap sr ns'))\n    \\<in> automaton.trans (opnet onp \\<langle>ii; R\\<^sub>i\\<rangle>) \\<and>\n    netgmap sr ns' =\n    netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n     (\\<sigma>, snd (netgmap sr ns'))", "by (simp add: onode_comps)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr ns)), connect(i, i'), \\<sigma>,\n   snd (netgmap sr ns'))\n  \\<in> automaton.trans (opnet onp \\<langle>ii; R\\<^sub>i\\<rangle>) \\<and>\n  netgmap sr ns' =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n   (\\<sigma>, snd (netgmap sr ns'))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "fix n1 n2 s s' \\<zeta>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "assume IH1: \"\\<And>s s' \\<zeta>. (s, connect(i, i'), s') \\<in> trans (pnet np n1)\n                      \\<Longrightarrow> s \\<in> reachable (pnet np n1) TT\n                      \\<Longrightarrow> netgmap sr s = netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>)\n                      \\<Longrightarrow> wf_net_tree n1\n                      \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'), (\\<sigma>, snd (netgmap sr s'))) \\<in> trans (opnet onp n1)\n                          \\<and> netgmap sr s' = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s'))\"\n           and IH2: \"\\<And>s s' \\<zeta>. (s, connect(i, i'), s') \\<in> trans (pnet np n2)\n                      \\<Longrightarrow> s \\<in> reachable (pnet np n2) TT\n                      \\<Longrightarrow> netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>)\n                      \\<Longrightarrow> wf_net_tree n2\n                      \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'), (\\<sigma>, snd (netgmap sr s'))) \\<in> trans (opnet onp n2)\n                          \\<and> netgmap sr s' = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s'))\"\n           and tr: \"(s, connect(i, i'), s') \\<in> trans (pnet np (n1 \\<parallel> n2))\"\n           and sr: \"s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\"\n           and nm: \"netgmap sr s = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\"\n           and \"wf_net_tree (n1 \\<parallel> n2)\""], ["proof (state)\nthis:\n  \\<lbrakk>(?s, connect(i, i'), ?s') \\<in> automaton.trans (pnet np n1);\n   ?s \\<in> reachable (pnet np n1) TT;\n   netgmap sr ?s = netmask (net_tree_ips n1) (\\<sigma>, ?\\<zeta>);\n   wf_net_tree n1\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr ?s)), connect(i, i'),\n                     \\<sigma>, snd (netgmap sr ?s'))\n                    \\<in> automaton.trans (opnet onp n1) \\<and>\n                    netgmap sr ?s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>, snd (netgmap sr ?s'))\n  \\<lbrakk>(?s, connect(i, i'), ?s') \\<in> automaton.trans (pnet np n2);\n   ?s \\<in> reachable (pnet np n2) TT;\n   netgmap sr ?s = netmask (net_tree_ips n2) (\\<sigma>, ?\\<zeta>);\n   wf_net_tree n2\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr ?s)), connect(i, i'),\n                     \\<sigma>, snd (netgmap sr ?s'))\n                    \\<in> automaton.trans (opnet onp n2) \\<and>\n                    netgmap sr ?s' =\n                    netmask (net_tree_ips n2)\n                     (\\<sigma>, snd (netgmap sr ?s'))\n  (s, connect(i, i'), s')\n  \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\n  s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n  netgmap sr s =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  wf_net_tree (n1 \\<parallel> n2)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "from this(3)"], ["proof (chain)\npicking this:\n  (s, connect(i, i'), s')\n  \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))", "have \"(s, connect(i, i'), s') \\<in> pnet_sos (trans (pnet np n1))\n                                                               (trans (pnet np n2))\""], ["proof (prove)\nusing this:\n  (s, connect(i, i'), s')\n  \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\n\ngoal (1 subgoal):\n 1. (s, connect(i, i'), s')\n    \\<in> pnet_sos (automaton.trans (pnet np n1))\n           (automaton.trans (pnet np n2))", "by simp"], ["proof (state)\nthis:\n  (s, connect(i, i'), s')\n  \\<in> pnet_sos (automaton.trans (pnet np n1))\n         (automaton.trans (pnet np n2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "then"], ["proof (chain)\npicking this:\n  (s, connect(i, i'), s')\n  \\<in> pnet_sos (automaton.trans (pnet np n1))\n         (automaton.trans (pnet np n2))", "obtain s1 s1' s2 s2' where \"s = SubnetS s1 s2\"\n                                    and \"s' = SubnetS s1' s2'\"\n                                    and \"(s1, connect(i, i'), s1') \\<in> trans (pnet np n1)\"\n                                    and \"(s2, connect(i, i'), s2') \\<in> trans (pnet np n2)\""], ["proof (prove)\nusing this:\n  (s, connect(i, i'), s')\n  \\<in> pnet_sos (automaton.trans (pnet np n1))\n         (automaton.trans (pnet np n2))\n\ngoal (1 subgoal):\n 1. (\\<And>s1 s2 s1' s2'.\n        \\<lbrakk>s = SubnetS s1 s2; s' = SubnetS s1' s2';\n         (s1, connect(i, i'), s1') \\<in> automaton.trans (pnet np n1);\n         (s2, connect(i, i'), s2')\n         \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule partial_connectTE) auto"], ["proof (state)\nthis:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  (s1, connect(i, i'), s1') \\<in> automaton.trans (pnet np n1)\n  (s2, connect(i, i'), s2') \\<in> automaton.trans (pnet np n2)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "from this(1) and nm"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  netgmap sr s =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)", "have \"netgmap sr (SubnetS s1 s2) = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\""], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  netgmap sr s =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. netgmap sr (SubnetS s1 s2) =\n    netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)", "by simp"], ["proof (state)\nthis:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "from \\<open>wf_net_tree (n1 \\<parallel> n2)\\<close>"], ["proof (chain)\npicking this:\n  wf_net_tree (n1 \\<parallel> n2)", "have \"wf_net_tree n1\" and \"wf_net_tree n2\"\n                                      and \"net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\""], ["proof (prove)\nusing this:\n  wf_net_tree (n1 \\<parallel> n2)\n\ngoal (1 subgoal):\n 1. wf_net_tree n1 &&&\n    wf_net_tree n2 &&& net_tree_ips n1 \\<inter> net_tree_ips n2 = {}", "by auto"], ["proof (state)\nthis:\n  wf_net_tree n1\n  wf_net_tree n2\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "from sr \\<open>s = SubnetS s1 s2\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n  s = SubnetS s1 s2", "have \"s1 \\<in> reachable (pnet np n1) TT\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n  s = SubnetS s1 s2\n\ngoal (1 subgoal):\n 1. s1 \\<in> reachable (pnet np n1) TT", "by (metis subnet_reachable(1))"], ["proof (state)\nthis:\n  s1 \\<in> reachable (pnet np n1) TT\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "hence \"net_ips s1 = net_tree_ips n1\""], ["proof (prove)\nusing this:\n  s1 \\<in> reachable (pnet np n1) TT\n\ngoal (1 subgoal):\n 1. net_ips s1 = net_tree_ips n1", "by (rule pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  net_ips s1 = net_tree_ips n1\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "from sr \\<open>s = SubnetS s1 s2\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n  s = SubnetS s1 s2", "have \"s2 \\<in> reachable (pnet np n2) TT\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n  s = SubnetS s1 s2\n\ngoal (1 subgoal):\n 1. s2 \\<in> reachable (pnet np n2) TT", "by (metis subnet_reachable(2))"], ["proof (state)\nthis:\n  s2 \\<in> reachable (pnet np n2) TT\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "hence \"net_ips s2 = net_tree_ips n2\""], ["proof (prove)\nusing this:\n  s2 \\<in> reachable (pnet np n2) TT\n\ngoal (1 subgoal):\n 1. net_ips s2 = net_tree_ips n2", "by (rule pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "from nm \\<open>s = SubnetS s1 s2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr s =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  s = SubnetS s1 s2", "have \"netgmap sr (SubnetS s1 s2) = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\""], ["proof (prove)\nusing this:\n  netgmap sr s =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  s = SubnetS s1 s2\n\ngoal (1 subgoal):\n 1. netgmap sr (SubnetS s1 s2) =\n    netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)", "by simp"], ["proof (state)\nthis:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "hence \"netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. netgmap sr s1 =\n    netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))", "using \\<open>net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\\<close> \\<open>net_ips s1 = net_tree_ips n1\\<close>\n                and \\<open>net_ips s2 = net_tree_ips n2\\<close>"], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s1 =\n    netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))", "by (rule netgmap_subnet_split1)"], ["proof (state)\nthis:\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "with \\<open>(s1, connect(i, i'), s1') \\<in> trans (pnet np n1)\\<close>\n         and \\<open>s1 \\<in> reachable (pnet np n1) TT\\<close>"], ["proof (chain)\npicking this:\n  (s1, connect(i, i'), s1') \\<in> automaton.trans (pnet np n1)\n  s1 \\<in> reachable (pnet np n1) TT\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))", "have \"((\\<sigma>, snd (netgmap sr s1)), connect(i, i'), (\\<sigma>, snd (netgmap sr s1'))) \\<in> trans (opnet onp n1)\"\n          and \"netgmap sr s1' = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1'))\""], ["proof (prove)\nusing this:\n  (s1, connect(i, i'), s1') \\<in> automaton.trans (pnet np n1)\n  s1 \\<in> reachable (pnet np n1) TT\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s1)), connect(i, i'), \\<sigma>,\n     snd (netgmap sr s1'))\n    \\<in> automaton.trans (opnet onp n1) &&&\n    netgmap sr s1' =\n    netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1'))", "using \\<open>wf_net_tree n1\\<close>"], ["proof (prove)\nusing this:\n  (s1, connect(i, i'), s1') \\<in> automaton.trans (pnet np n1)\n  s1 \\<in> reachable (pnet np n1) TT\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n  wf_net_tree n1\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s1)), connect(i, i'), \\<sigma>,\n     snd (netgmap sr s1'))\n    \\<in> automaton.trans (opnet onp n1) &&&\n    netgmap sr s1' =\n    netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1'))", "unfolding atomize_conj"], ["proof (prove)\nusing this:\n  (s1, connect(i, i'), s1') \\<in> automaton.trans (pnet np n1)\n  s1 \\<in> reachable (pnet np n1) TT\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n  wf_net_tree n1\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s1)), connect(i, i'), \\<sigma>,\n     snd (netgmap sr s1'))\n    \\<in> automaton.trans (opnet onp n1) \\<and>\n    netgmap sr s1' =\n    netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1'))", "by (rule IH1)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s1)), connect(i, i'), \\<sigma>,\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n  netgmap sr s1' =\n  netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1'))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "from \\<open>netgmap sr (SubnetS s1 s2) = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\\<close>\n             \\<open>net_ips s1 = net_tree_ips n1\\<close> and \\<open>net_ips s2 = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2", "have \"netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s2 =\n    netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))", "by (rule netgmap_subnet_split2)"], ["proof (state)\nthis:\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "with \\<open>(s2, connect(i, i'), s2') \\<in> trans (pnet np n2)\\<close>\n         and \\<open>s2 \\<in> reachable (pnet np n2) TT\\<close>"], ["proof (chain)\npicking this:\n  (s2, connect(i, i'), s2') \\<in> automaton.trans (pnet np n2)\n  s2 \\<in> reachable (pnet np n2) TT\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))", "have \"((\\<sigma>, snd (netgmap sr s2)), connect(i, i'), (\\<sigma>, snd (netgmap sr s2'))) \\<in> trans (opnet onp n2)\"\n          and \"netgmap sr s2' = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2'))\""], ["proof (prove)\nusing this:\n  (s2, connect(i, i'), s2') \\<in> automaton.trans (pnet np n2)\n  s2 \\<in> reachable (pnet np n2) TT\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s2)), connect(i, i'), \\<sigma>,\n     snd (netgmap sr s2'))\n    \\<in> automaton.trans (opnet onp n2) &&&\n    netgmap sr s2' =\n    netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2'))", "using \\<open>wf_net_tree n2\\<close>"], ["proof (prove)\nusing this:\n  (s2, connect(i, i'), s2') \\<in> automaton.trans (pnet np n2)\n  s2 \\<in> reachable (pnet np n2) TT\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n  wf_net_tree n2\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s2)), connect(i, i'), \\<sigma>,\n     snd (netgmap sr s2'))\n    \\<in> automaton.trans (opnet onp n2) &&&\n    netgmap sr s2' =\n    netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2'))", "unfolding atomize_conj"], ["proof (prove)\nusing this:\n  (s2, connect(i, i'), s2') \\<in> automaton.trans (pnet np n2)\n  s2 \\<in> reachable (pnet np n2) TT\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n  wf_net_tree n2\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s2)), connect(i, i'), \\<sigma>,\n     snd (netgmap sr s2'))\n    \\<in> automaton.trans (opnet onp n2) \\<and>\n    netgmap sr s2' =\n    netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2'))", "by (rule IH2)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s2)), connect(i, i'), \\<sigma>,\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)\n  netgmap sr s2' =\n  netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2'))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "have \"((\\<sigma>, snd (netgmap sr s)), connect(i, i'), (\\<sigma>, snd (netgmap sr s')))\n                                         \\<in> trans (opnet onp (n1 \\<parallel> n2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), connect(i, i'), \\<sigma>,\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), connect(i, i'), \\<sigma>,\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "from \\<open>((\\<sigma>, snd (netgmap sr s1)), connect(i, i'), (\\<sigma>, snd (netgmap sr s1'))) \\<in> trans (opnet onp n1)\\<close>\n           and \\<open>((\\<sigma>, snd (netgmap sr s2)), connect(i, i'), (\\<sigma>, snd (netgmap sr s2'))) \\<in> trans (opnet onp n2)\\<close>"], ["proof (chain)\npicking this:\n  ((\\<sigma>, snd (netgmap sr s1)), connect(i, i'), \\<sigma>,\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n  ((\\<sigma>, snd (netgmap sr s2)), connect(i, i'), \\<sigma>,\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)", "have \"((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))), connect(i, i'),\n                   (\\<sigma>, SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2'))))\n                                           \\<in> opnet_sos (trans (opnet onp n1)) (trans (opnet onp n2))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, snd (netgmap sr s1)), connect(i, i'), \\<sigma>,\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n  ((\\<sigma>, snd (netgmap sr s2)), connect(i, i'), \\<sigma>,\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))),\n     connect(i, i'), \\<sigma>,\n     SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2')))\n    \\<in> opnet_sos (automaton.trans (opnet onp n1))\n           (automaton.trans (opnet onp n2))", "by (rule opnet_connect)"], ["proof (state)\nthis:\n  ((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))),\n   connect(i, i'), \\<sigma>,\n   SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2')))\n  \\<in> opnet_sos (automaton.trans (opnet onp n1))\n         (automaton.trans (opnet onp n2))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), connect(i, i'), \\<sigma>,\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "with \\<open>s = SubnetS s1 s2\\<close> \\<open>s' = SubnetS s1' s2'\\<close>"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  ((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))),\n   connect(i, i'), \\<sigma>,\n   SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2')))\n  \\<in> opnet_sos (automaton.trans (opnet onp n1))\n         (automaton.trans (opnet onp n2))", "show ?thesis"], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  ((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))),\n   connect(i, i'), \\<sigma>,\n   SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2')))\n  \\<in> opnet_sos (automaton.trans (opnet onp n1))\n         (automaton.trans (opnet onp n2))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), connect(i, i'), \\<sigma>,\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), connect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), connect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "moreover"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), connect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "from \\<open>netgmap sr s1' = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1'))\\<close>\n                      \\<open>netgmap sr s2' = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2'))\\<close>\n                      \\<open>s' = SubnetS s1' s2'\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr s1' =\n  netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1'))\n  netgmap sr s2' =\n  netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2'))\n  s' = SubnetS s1' s2'", "have \"netgmap sr s' = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, snd (netgmap sr s'))\""], ["proof (prove)\nusing this:\n  netgmap sr s1' =\n  netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1'))\n  netgmap sr s2' =\n  netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2'))\n  s' = SubnetS s1' s2'\n\ngoal (1 subgoal):\n 1. netgmap sr s' =\n    netmask (net_tree_ips (n1 \\<parallel> n2))\n     (\\<sigma>, snd (netgmap sr s'))", ".."], ["proof (state)\nthis:\n  netgmap sr s' =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, connect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, connect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              connect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, connect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), connect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "ultimately"], ["proof (chain)\npicking this:\n  ((\\<sigma>, snd (netgmap sr s)), connect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n  netgmap sr s' =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, snd (netgmap sr s'))", "show \"((\\<sigma>, snd (netgmap sr s)), connect(i, i'), (\\<sigma>, snd (netgmap sr s')))\n                                                                \\<in> trans (opnet onp (n1 \\<parallel> n2))\n                         \\<and> netgmap sr s' = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, snd (netgmap sr s'))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, snd (netgmap sr s)), connect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n  netgmap sr s' =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), connect(i, i'), \\<sigma>,\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2)) \\<and>\n    netgmap sr s' =\n    netmask (net_tree_ips (n1 \\<parallel> n2))\n     (\\<sigma>, snd (netgmap sr s'))", ".."], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), connect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2)) \\<and>\n  netgmap sr s' =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, snd (netgmap sr s'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), connect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n) \\<and>\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>, snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), connect(i, i'), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "moreover"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), connect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n) \\<and>\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>, snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), connect(i, i'), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from \\<open>netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)", "have \"\\<zeta> = snd (netgmap sr s)\""], ["proof (prove)\nusing this:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. \\<zeta> = snd (netgmap sr s)", "by simp"], ["proof (state)\nthis:\n  \\<zeta> = snd (netgmap sr s)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), connect(i, i'), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "ultimately"], ["proof (chain)\npicking this:\n  ((\\<sigma>, snd (netgmap sr s)), connect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n) \\<and>\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>, snd (netgmap sr s'))\n  \\<zeta> = snd (netgmap sr s)", "show \" \\<exists>\\<sigma>' \\<zeta>'. ((\\<sigma>, \\<zeta>), connect(i, i'), (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\n                              \\<and> (\\<forall>j. j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j)\n                              \\<and> netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, snd (netgmap sr s)), connect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n) \\<and>\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>, snd (netgmap sr s'))\n  \\<zeta> = snd (netgmap sr s)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), connect(i, i'), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<zeta>'.\n     ((\\<sigma>, \\<zeta>), connect(i, i'), \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet onp n) \\<and>\n     (\\<forall>j.\n         j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n         \\<sigma>' j = \\<sigma> j) \\<and>\n     netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transfer_disconnect:\n  assumes \"(s, disconnect(i, i'), s') \\<in> trans (pnet np n)\"\n      and \"s \\<in> reachable (pnet np n) TT\"\n      and \"netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\"\n      and \"wf_net_tree n\"\n  obtains \\<sigma>' \\<zeta>' where \"((\\<sigma>, \\<zeta>), disconnect(i, i'), (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\"\n                  and \"\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\"\n                  and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<zeta>'.\n        \\<lbrakk>((\\<sigma>, \\<zeta>), disconnect(i, i'), \\<sigma>',\n                  \\<zeta>')\n                 \\<in> automaton.trans (opnet onp n);\n         \\<forall>j.\n            j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n            \\<sigma>' j = \\<sigma> j;\n         netgmap sr s' =\n         netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof atomize_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), disconnect(i, i'), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from assms"], ["proof (chain)\npicking this:\n  (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np n)\n  s \\<in> reachable (pnet np n) TT\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  wf_net_tree n", "have \"((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), (\\<sigma>, snd (netgmap sr s'))) \\<in> trans (opnet onp n)\n                     \\<and> netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>, snd (netgmap sr s'))\""], ["proof (prove)\nusing this:\n  (s, disconnect(i, i'), s') \\<in> automaton.trans (pnet np n)\n  s \\<in> reachable (pnet np n) TT\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  wf_net_tree n\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), \\<sigma>,\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp n) \\<and>\n    netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>, snd (netgmap sr s'))", "proof (induction n arbitrary: s s' \\<zeta>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, disconnect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "fix ii R\\<^sub>i ns ns' \\<zeta>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, disconnect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "assume \"(ns, disconnect(i, i'), ns') \\<in> trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\"\n           and \"netgmap sr ns = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\""], ["proof (state)\nthis:\n  (ns, disconnect(i, i'), ns')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, disconnect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "from this(1)"], ["proof (chain)\npicking this:\n  (ns, disconnect(i, i'), ns')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)", "have \"(ns, disconnect(i, i'), ns') \\<in> node_sos (trans (np ii))\""], ["proof (prove)\nusing this:\n  (ns, disconnect(i, i'), ns')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (1 subgoal):\n 1. (ns, disconnect(i, i'), ns') \\<in> node_sos (automaton.trans (np ii))", "by (simp add: node_comps)"], ["proof (state)\nthis:\n  (ns, disconnect(i, i'), ns') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, disconnect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "moreover"], ["proof (state)\nthis:\n  (ns, disconnect(i, i'), ns') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, disconnect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "then"], ["proof (chain)\npicking this:\n  (ns, disconnect(i, i'), ns') \\<in> node_sos (automaton.trans (np ii))", "obtain ni s s' R R' where \"ns  = NodeS ni s R\"\n                                            and \"ns' = NodeS ni s' R'\""], ["proof (prove)\nusing this:\n  (ns, disconnect(i, i'), ns') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (1 subgoal):\n 1. (\\<And>ni s R s' R'.\n        \\<lbrakk>ns = NodeS ni s R; ns' = NodeS ni s' R'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  ns = NodeS ni s R\n  ns' = NodeS ni s' R'\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, disconnect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "ultimately"], ["proof (chain)\npicking this:\n  (ns, disconnect(i, i'), ns') \\<in> node_sos (automaton.trans (np ii))\n  ns = NodeS ni s R\n  ns' = NodeS ni s' R'", "have \"(NodeS ni s R, disconnect(i, i'), NodeS ni s' R') \\<in> node_sos (trans (np ii))\""], ["proof (prove)\nusing this:\n  (ns, disconnect(i, i'), ns') \\<in> node_sos (automaton.trans (np ii))\n  ns = NodeS ni s R\n  ns' = NodeS ni s' R'\n\ngoal (1 subgoal):\n 1. (NodeS ni s R, disconnect(i, i'), NodeS ni s' R')\n    \\<in> node_sos (automaton.trans (np ii))", "by simp"], ["proof (state)\nthis:\n  (NodeS ni s R, disconnect(i, i'), NodeS ni s' R')\n  \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, disconnect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "moreover"], ["proof (state)\nthis:\n  (NodeS ni s R, disconnect(i, i'), NodeS ni s' R')\n  \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, disconnect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "then"], ["proof (chain)\npicking this:\n  (NodeS ni s R, disconnect(i, i'), NodeS ni s' R')\n  \\<in> node_sos (automaton.trans (np ii))", "have \"s' = s\""], ["proof (prove)\nusing this:\n  (NodeS ni s R, disconnect(i, i'), NodeS ni s' R')\n  \\<in> node_sos (automaton.trans (np ii))\n\ngoal (1 subgoal):\n 1. s' = s", "by auto"], ["proof (state)\nthis:\n  s' = s\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, disconnect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "ultimately"], ["proof (chain)\npicking this:\n  (NodeS ni s R, disconnect(i, i'), NodeS ni s' R')\n  \\<in> node_sos (automaton.trans (np ii))\n  s' = s", "have \"((\\<sigma>, NodeS ni (snd (sr s)) R), disconnect(i, i'), (\\<sigma>, NodeS ni (snd (sr s)) R'))\n                                                                      \\<in> onode_sos (trans (onp ii))\""], ["proof (prove)\nusing this:\n  (NodeS ni s R, disconnect(i, i'), NodeS ni s' R')\n  \\<in> node_sos (automaton.trans (np ii))\n  s' = s\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS ni (snd (sr s)) R), disconnect(i, i'), \\<sigma>,\n     NodeS ni (snd (sr s)) R')\n    \\<in> onode_sos (automaton.trans (onp ii))", "by - (rule node_disconnectTE', auto intro!: onode_sos.intros [simplified])"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS ni (snd (sr s)) R), disconnect(i, i'), \\<sigma>,\n   NodeS ni (snd (sr s)) R')\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, disconnect(i, i'), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        wf_net_tree \\<langle>ia; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n                          (\\<sigma>, snd (netgmap sr s'))\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "with \\<open>ns = NodeS ni s R\\<close> \\<open>ns' = NodeS ni s' R'\\<close> \\<open>s' = s\\<close>\n             and \\<open>netgmap sr ns = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\\<close>"], ["proof (chain)\npicking this:\n  ns = NodeS ni s R\n  ns' = NodeS ni s' R'\n  s' = s\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n  ((\\<sigma>, NodeS ni (snd (sr s)) R), disconnect(i, i'), \\<sigma>,\n   NodeS ni (snd (sr s)) R')\n  \\<in> onode_sos (automaton.trans (onp ii))", "show \"((\\<sigma>, snd (netgmap sr ns)), disconnect(i, i'), (\\<sigma>, snd (netgmap sr ns'))) \\<in> trans (opnet onp \\<langle>ii; R\\<^sub>i\\<rangle>)\n                \\<and> netgmap sr ns' = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, snd (netgmap sr ns'))\""], ["proof (prove)\nusing this:\n  ns = NodeS ni s R\n  ns' = NodeS ni s' R'\n  s' = s\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n  ((\\<sigma>, NodeS ni (snd (sr s)) R), disconnect(i, i'), \\<sigma>,\n   NodeS ni (snd (sr s)) R')\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr ns)), disconnect(i, i'), \\<sigma>,\n     snd (netgmap sr ns'))\n    \\<in> automaton.trans (opnet onp \\<langle>ii; R\\<^sub>i\\<rangle>) \\<and>\n    netgmap sr ns' =\n    netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n     (\\<sigma>, snd (netgmap sr ns'))", "by (simp add: onode_comps)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr ns)), disconnect(i, i'), \\<sigma>,\n   snd (netgmap sr ns'))\n  \\<in> automaton.trans (opnet onp \\<langle>ii; R\\<^sub>i\\<rangle>) \\<and>\n  netgmap sr ns' =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n   (\\<sigma>, snd (netgmap sr ns'))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "fix n1 n2 s s' \\<zeta>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "assume IH1: \"\\<And>s s' \\<zeta>. (s, disconnect(i, i'), s') \\<in> trans (pnet np n1)\n                      \\<Longrightarrow> s \\<in> reachable (pnet np n1) TT\n                      \\<Longrightarrow> netgmap sr s = netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>)\n                      \\<Longrightarrow> wf_net_tree n1\n                      \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), (\\<sigma>, snd (netgmap sr s'))) \\<in> trans (opnet onp n1)\n                          \\<and> netgmap sr s' = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s'))\"\n           and IH2: \"\\<And>s s' \\<zeta>. (s, disconnect(i, i'), s') \\<in> trans (pnet np n2)\n                      \\<Longrightarrow> s \\<in> reachable (pnet np n2) TT\n                      \\<Longrightarrow> netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>)\n                      \\<Longrightarrow> wf_net_tree n2\n                      \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), (\\<sigma>, snd (netgmap sr s'))) \\<in> trans (opnet onp n2)\n                          \\<and> netgmap sr s' = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s'))\"\n           and tr: \"(s, disconnect(i, i'), s') \\<in> trans (pnet np (n1 \\<parallel> n2))\"\n           and sr: \"s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\"\n           and nm: \"netgmap sr s = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\"\n           and \"wf_net_tree (n1 \\<parallel> n2)\""], ["proof (state)\nthis:\n  \\<lbrakk>(?s, disconnect(i, i'), ?s') \\<in> automaton.trans (pnet np n1);\n   ?s \\<in> reachable (pnet np n1) TT;\n   netgmap sr ?s = netmask (net_tree_ips n1) (\\<sigma>, ?\\<zeta>);\n   wf_net_tree n1\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr ?s)), disconnect(i, i'),\n                     \\<sigma>, snd (netgmap sr ?s'))\n                    \\<in> automaton.trans (opnet onp n1) \\<and>\n                    netgmap sr ?s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>, snd (netgmap sr ?s'))\n  \\<lbrakk>(?s, disconnect(i, i'), ?s') \\<in> automaton.trans (pnet np n2);\n   ?s \\<in> reachable (pnet np n2) TT;\n   netgmap sr ?s = netmask (net_tree_ips n2) (\\<sigma>, ?\\<zeta>);\n   wf_net_tree n2\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr ?s)), disconnect(i, i'),\n                     \\<sigma>, snd (netgmap sr ?s'))\n                    \\<in> automaton.trans (opnet onp n2) \\<and>\n                    netgmap sr ?s' =\n                    netmask (net_tree_ips n2)\n                     (\\<sigma>, snd (netgmap sr ?s'))\n  (s, disconnect(i, i'), s')\n  \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\n  s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n  netgmap sr s =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  wf_net_tree (n1 \\<parallel> n2)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "from this(3)"], ["proof (chain)\npicking this:\n  (s, disconnect(i, i'), s')\n  \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))", "have \"(s, disconnect(i, i'), s') \\<in> pnet_sos (trans (pnet np n1))\n                                                               (trans (pnet np n2))\""], ["proof (prove)\nusing this:\n  (s, disconnect(i, i'), s')\n  \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\n\ngoal (1 subgoal):\n 1. (s, disconnect(i, i'), s')\n    \\<in> pnet_sos (automaton.trans (pnet np n1))\n           (automaton.trans (pnet np n2))", "by simp"], ["proof (state)\nthis:\n  (s, disconnect(i, i'), s')\n  \\<in> pnet_sos (automaton.trans (pnet np n1))\n         (automaton.trans (pnet np n2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "then"], ["proof (chain)\npicking this:\n  (s, disconnect(i, i'), s')\n  \\<in> pnet_sos (automaton.trans (pnet np n1))\n         (automaton.trans (pnet np n2))", "obtain s1 s1' s2 s2' where \"s = SubnetS s1 s2\"\n                                    and \"s' = SubnetS s1' s2'\"\n                                    and \"(s1, disconnect(i, i'), s1') \\<in> trans (pnet np n1)\"\n                                    and \"(s2, disconnect(i, i'), s2') \\<in> trans (pnet np n2)\""], ["proof (prove)\nusing this:\n  (s, disconnect(i, i'), s')\n  \\<in> pnet_sos (automaton.trans (pnet np n1))\n         (automaton.trans (pnet np n2))\n\ngoal (1 subgoal):\n 1. (\\<And>s1 s2 s1' s2'.\n        \\<lbrakk>s = SubnetS s1 s2; s' = SubnetS s1' s2';\n         (s1, disconnect(i, i'), s1') \\<in> automaton.trans (pnet np n1);\n         (s2, disconnect(i, i'), s2')\n         \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule partial_disconnectTE) auto"], ["proof (state)\nthis:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  (s1, disconnect(i, i'), s1') \\<in> automaton.trans (pnet np n1)\n  (s2, disconnect(i, i'), s2') \\<in> automaton.trans (pnet np n2)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "from this(1) and nm"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  netgmap sr s =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)", "have \"netgmap sr (SubnetS s1 s2) = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\""], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  netgmap sr s =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. netgmap sr (SubnetS s1 s2) =\n    netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)", "by simp"], ["proof (state)\nthis:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "from \\<open>wf_net_tree (n1 \\<parallel> n2)\\<close>"], ["proof (chain)\npicking this:\n  wf_net_tree (n1 \\<parallel> n2)", "have \"wf_net_tree n1\" and \"wf_net_tree n2\"\n                                      and \"net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\""], ["proof (prove)\nusing this:\n  wf_net_tree (n1 \\<parallel> n2)\n\ngoal (1 subgoal):\n 1. wf_net_tree n1 &&&\n    wf_net_tree n2 &&& net_tree_ips n1 \\<inter> net_tree_ips n2 = {}", "by auto"], ["proof (state)\nthis:\n  wf_net_tree n1\n  wf_net_tree n2\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "from sr \\<open>s = SubnetS s1 s2\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n  s = SubnetS s1 s2", "have \"s1 \\<in> reachable (pnet np n1) TT\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n  s = SubnetS s1 s2\n\ngoal (1 subgoal):\n 1. s1 \\<in> reachable (pnet np n1) TT", "by (metis subnet_reachable(1))"], ["proof (state)\nthis:\n  s1 \\<in> reachable (pnet np n1) TT\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "hence \"net_ips s1 = net_tree_ips n1\""], ["proof (prove)\nusing this:\n  s1 \\<in> reachable (pnet np n1) TT\n\ngoal (1 subgoal):\n 1. net_ips s1 = net_tree_ips n1", "by (rule pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  net_ips s1 = net_tree_ips n1\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "from sr \\<open>s = SubnetS s1 s2\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n  s = SubnetS s1 s2", "have \"s2 \\<in> reachable (pnet np n2) TT\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n  s = SubnetS s1 s2\n\ngoal (1 subgoal):\n 1. s2 \\<in> reachable (pnet np n2) TT", "by (metis subnet_reachable(2))"], ["proof (state)\nthis:\n  s2 \\<in> reachable (pnet np n2) TT\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "hence \"net_ips s2 = net_tree_ips n2\""], ["proof (prove)\nusing this:\n  s2 \\<in> reachable (pnet np n2) TT\n\ngoal (1 subgoal):\n 1. net_ips s2 = net_tree_ips n2", "by (rule pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "from nm \\<open>s = SubnetS s1 s2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr s =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  s = SubnetS s1 s2", "have \"netgmap sr (SubnetS s1 s2) = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\""], ["proof (prove)\nusing this:\n  netgmap sr s =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  s = SubnetS s1 s2\n\ngoal (1 subgoal):\n 1. netgmap sr (SubnetS s1 s2) =\n    netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)", "by simp"], ["proof (state)\nthis:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "hence \"netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. netgmap sr s1 =\n    netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))", "using \\<open>net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\\<close> \\<open>net_ips s1 = net_tree_ips n1\\<close>\n                and \\<open>net_ips s2 = net_tree_ips n2\\<close>"], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s1 =\n    netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))", "by (rule netgmap_subnet_split1)"], ["proof (state)\nthis:\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "with \\<open>(s1, disconnect(i, i'), s1') \\<in> trans (pnet np n1)\\<close>\n         and \\<open>s1 \\<in> reachable (pnet np n1) TT\\<close>"], ["proof (chain)\npicking this:\n  (s1, disconnect(i, i'), s1') \\<in> automaton.trans (pnet np n1)\n  s1 \\<in> reachable (pnet np n1) TT\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))", "have \"((\\<sigma>, snd (netgmap sr s1)), disconnect(i, i'), (\\<sigma>, snd (netgmap sr s1'))) \\<in> trans (opnet onp n1)\"\n          and \"netgmap sr s1' = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1'))\""], ["proof (prove)\nusing this:\n  (s1, disconnect(i, i'), s1') \\<in> automaton.trans (pnet np n1)\n  s1 \\<in> reachable (pnet np n1) TT\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s1)), disconnect(i, i'), \\<sigma>,\n     snd (netgmap sr s1'))\n    \\<in> automaton.trans (opnet onp n1) &&&\n    netgmap sr s1' =\n    netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1'))", "using \\<open>wf_net_tree n1\\<close>"], ["proof (prove)\nusing this:\n  (s1, disconnect(i, i'), s1') \\<in> automaton.trans (pnet np n1)\n  s1 \\<in> reachable (pnet np n1) TT\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n  wf_net_tree n1\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s1)), disconnect(i, i'), \\<sigma>,\n     snd (netgmap sr s1'))\n    \\<in> automaton.trans (opnet onp n1) &&&\n    netgmap sr s1' =\n    netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1'))", "unfolding atomize_conj"], ["proof (prove)\nusing this:\n  (s1, disconnect(i, i'), s1') \\<in> automaton.trans (pnet np n1)\n  s1 \\<in> reachable (pnet np n1) TT\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n  wf_net_tree n1\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s1)), disconnect(i, i'), \\<sigma>,\n     snd (netgmap sr s1'))\n    \\<in> automaton.trans (opnet onp n1) \\<and>\n    netgmap sr s1' =\n    netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1'))", "by (rule IH1)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s1)), disconnect(i, i'), \\<sigma>,\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n  netgmap sr s1' =\n  netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1'))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "from \\<open>netgmap sr (SubnetS s1 s2) = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\\<close>\n             \\<open>net_ips s1 = net_tree_ips n1\\<close> and \\<open>net_ips s2 = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2", "have \"netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s2 =\n    netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))", "by (rule netgmap_subnet_split2)"], ["proof (state)\nthis:\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "with \\<open>(s2, disconnect(i, i'), s2') \\<in> trans (pnet np n2)\\<close>\n         and \\<open>s2 \\<in> reachable (pnet np n2) TT\\<close>"], ["proof (chain)\npicking this:\n  (s2, disconnect(i, i'), s2') \\<in> automaton.trans (pnet np n2)\n  s2 \\<in> reachable (pnet np n2) TT\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))", "have \"((\\<sigma>, snd (netgmap sr s2)), disconnect(i, i'), (\\<sigma>, snd (netgmap sr s2'))) \\<in> trans (opnet onp n2)\"\n          and \"netgmap sr s2' = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2'))\""], ["proof (prove)\nusing this:\n  (s2, disconnect(i, i'), s2') \\<in> automaton.trans (pnet np n2)\n  s2 \\<in> reachable (pnet np n2) TT\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s2)), disconnect(i, i'), \\<sigma>,\n     snd (netgmap sr s2'))\n    \\<in> automaton.trans (opnet onp n2) &&&\n    netgmap sr s2' =\n    netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2'))", "using \\<open>wf_net_tree n2\\<close>"], ["proof (prove)\nusing this:\n  (s2, disconnect(i, i'), s2') \\<in> automaton.trans (pnet np n2)\n  s2 \\<in> reachable (pnet np n2) TT\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n  wf_net_tree n2\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s2)), disconnect(i, i'), \\<sigma>,\n     snd (netgmap sr s2'))\n    \\<in> automaton.trans (opnet onp n2) &&&\n    netgmap sr s2' =\n    netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2'))", "unfolding atomize_conj"], ["proof (prove)\nusing this:\n  (s2, disconnect(i, i'), s2') \\<in> automaton.trans (pnet np n2)\n  s2 \\<in> reachable (pnet np n2) TT\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n  wf_net_tree n2\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s2)), disconnect(i, i'), \\<sigma>,\n     snd (netgmap sr s2'))\n    \\<in> automaton.trans (opnet onp n2) \\<and>\n    netgmap sr s2' =\n    netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2'))", "by (rule IH2)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s2)), disconnect(i, i'), \\<sigma>,\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)\n  netgmap sr s2' =\n  netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2'))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "have \"((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), (\\<sigma>, snd (netgmap sr s')))\n                                         \\<in> trans (opnet onp (n1 \\<parallel> n2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), \\<sigma>,\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), \\<sigma>,\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "from \\<open>((\\<sigma>, snd (netgmap sr s1)), disconnect(i, i'), (\\<sigma>, snd (netgmap sr s1'))) \\<in> trans (opnet onp n1)\\<close>\n           and \\<open>((\\<sigma>, snd (netgmap sr s2)), disconnect(i, i'), (\\<sigma>, snd (netgmap sr s2'))) \\<in> trans (opnet onp n2)\\<close>"], ["proof (chain)\npicking this:\n  ((\\<sigma>, snd (netgmap sr s1)), disconnect(i, i'), \\<sigma>,\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n  ((\\<sigma>, snd (netgmap sr s2)), disconnect(i, i'), \\<sigma>,\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)", "have \"((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))), disconnect(i, i'),\n                   (\\<sigma>, SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2'))))\n                                           \\<in> opnet_sos (trans (opnet onp n1)) (trans (opnet onp n2))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, snd (netgmap sr s1)), disconnect(i, i'), \\<sigma>,\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n  ((\\<sigma>, snd (netgmap sr s2)), disconnect(i, i'), \\<sigma>,\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))),\n     disconnect(i, i'), \\<sigma>,\n     SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2')))\n    \\<in> opnet_sos (automaton.trans (opnet onp n1))\n           (automaton.trans (opnet onp n2))", "by (rule opnet_disconnect)"], ["proof (state)\nthis:\n  ((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))),\n   disconnect(i, i'), \\<sigma>,\n   SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2')))\n  \\<in> opnet_sos (automaton.trans (opnet onp n1))\n         (automaton.trans (opnet onp n2))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), \\<sigma>,\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "with \\<open>s = SubnetS s1 s2\\<close> \\<open>s' = SubnetS s1' s2'\\<close>"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  ((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))),\n   disconnect(i, i'), \\<sigma>,\n   SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2')))\n  \\<in> opnet_sos (automaton.trans (opnet onp n1))\n         (automaton.trans (opnet onp n2))", "show ?thesis"], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  ((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))),\n   disconnect(i, i'), \\<sigma>,\n   SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2')))\n  \\<in> opnet_sos (automaton.trans (opnet onp n1))\n         (automaton.trans (opnet onp n2))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), \\<sigma>,\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "moreover"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "from \\<open>netgmap sr s1' = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1'))\\<close>\n                      \\<open>netgmap sr s2' = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2'))\\<close>\n                      \\<open>s' = SubnetS s1' s2'\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr s1' =\n  netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1'))\n  netgmap sr s2' =\n  netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2'))\n  s' = SubnetS s1' s2'", "have \"netgmap sr s' = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, snd (netgmap sr s'))\""], ["proof (prove)\nusing this:\n  netgmap sr s1' =\n  netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1'))\n  netgmap sr s2' =\n  netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2'))\n  s' = SubnetS s1' s2'\n\ngoal (1 subgoal):\n 1. netgmap sr s' =\n    netmask (net_tree_ips (n1 \\<parallel> n2))\n     (\\<sigma>, snd (netgmap sr s'))", ".."], ["proof (state)\nthis:\n  netgmap sr s' =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, disconnect(i, i'), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ndisconnect(i, i'), \\<sigma>, snd (netgmap sr s'))\n                                     \\<in> automaton.trans\n      (opnet onp n1) \\<and>\n                                     netgmap sr s' =\n                                     netmask (net_tree_ips n1)\n(\\<sigma>, snd (netgmap sr s'));\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, disconnect(i, i'), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              disconnect(i, i'), \\<sigma>,\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2) \\<and>\n                             netgmap sr s' =\n                             netmask (net_tree_ips n2)\n                              (\\<sigma>, snd (netgmap sr s'));\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'),\n                          \\<sigma>, snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2)) \\<and>\n                         netgmap sr s' =\n                         netmask (net_tree_ips (n1 \\<parallel> n2))\n                          (\\<sigma>, snd (netgmap sr s'))", "ultimately"], ["proof (chain)\npicking this:\n  ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n  netgmap sr s' =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, snd (netgmap sr s'))", "show \"((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), (\\<sigma>, snd (netgmap sr s')))\n                                                                \\<in> trans (opnet onp (n1 \\<parallel> n2))\n                         \\<and> netgmap sr s' = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, snd (netgmap sr s'))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n  netgmap sr s' =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), \\<sigma>,\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2)) \\<and>\n    netgmap sr s' =\n    netmask (net_tree_ips (n1 \\<parallel> n2))\n     (\\<sigma>, snd (netgmap sr s'))", ".."], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2)) \\<and>\n  netgmap sr s' =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, snd (netgmap sr s'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n) \\<and>\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>, snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), disconnect(i, i'), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "moreover"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n) \\<and>\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>, snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), disconnect(i, i'), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from \\<open>netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)", "have \"\\<zeta> = snd (netgmap sr s)\""], ["proof (prove)\nusing this:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. \\<zeta> = snd (netgmap sr s)", "by simp"], ["proof (state)\nthis:\n  \\<zeta> = snd (netgmap sr s)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), disconnect(i, i'), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "ultimately"], ["proof (chain)\npicking this:\n  ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n) \\<and>\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>, snd (netgmap sr s'))\n  \\<zeta> = snd (netgmap sr s)", "show \"\\<exists>\\<sigma>' \\<zeta>'. ((\\<sigma>, \\<zeta>), disconnect(i, i'), (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\n                              \\<and> (\\<forall>j. j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j)\n                              \\<and> netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, snd (netgmap sr s)), disconnect(i, i'), \\<sigma>,\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n) \\<and>\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>, snd (netgmap sr s'))\n  \\<zeta> = snd (netgmap sr s)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), disconnect(i, i'), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<zeta>'.\n     ((\\<sigma>, \\<zeta>), disconnect(i, i'), \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet onp n) \\<and>\n     (\\<forall>j.\n         j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n         \\<sigma>' j = \\<sigma> j) \\<and>\n     netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transfer_tau:\n  assumes \"(s, \\<tau>, s') \\<in> trans (pnet np n)\"\n      and \"s \\<in> reachable (pnet np n) TT\"\n      and \"netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\"\n      and \"wf_net_tree n\"\n  obtains \\<sigma>' \\<zeta>' where \"((\\<sigma>, \\<zeta>), \\<tau>, (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\"\n                  and \"\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\"\n                  and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<zeta>'.\n        \\<lbrakk>((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n                 \\<in> automaton.trans (opnet onp n);\n         \\<forall>j.\n            j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n            \\<sigma>' j = \\<sigma> j;\n         netgmap sr s' =\n         netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof atomize_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from assms(4,2,1)"], ["proof (chain)\npicking this:\n  wf_net_tree n\n  s \\<in> reachable (pnet np n) TT\n  (s, \\<tau>, s') \\<in> automaton.trans (pnet np n)", "obtain i where \"i\\<in>net_ips s\"\n                                 and \"\\<forall>j. j\\<noteq>i \\<longrightarrow> netmap s' j = netmap s j\"\n                                 and \"net_ip_action np \\<tau> i n s s'\""], ["proof (prove)\nusing this:\n  wf_net_tree n\n  s \\<in> reachable (pnet np n) TT\n  (s, \\<tau>, s') \\<in> automaton.trans (pnet np n)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i \\<in> net_ips s;\n         \\<forall>j.\n            j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j;\n         net_ip_action np \\<tau> i n s s'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis pnet_tau_single_node)"], ["proof (state)\nthis:\n  i \\<in> net_ips s\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j\n  net_ip_action np \\<tau> i n s s'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from this(2)"], ["proof (chain)\npicking this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j", "have \"\\<forall>j. j\\<noteq>i \\<longrightarrow> fst (netgmap sr s') j = fst (netgmap sr s) j\""], ["proof (prove)\nusing this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<noteq> i \\<longrightarrow>\n       fst (netgmap sr s') j = fst (netgmap sr s) j", "by (clarsimp intro!: netmap_is_fst_netgmap')"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     fst (netgmap sr s') j = fst (netgmap sr s) j\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from \\<open>(s, \\<tau>, s') \\<in> trans (pnet np n)\\<close>"], ["proof (chain)\npicking this:\n  (s, \\<tau>, s') \\<in> automaton.trans (pnet np n)", "have \"net_ips s' = net_ips s\""], ["proof (prove)\nusing this:\n  (s, \\<tau>, s') \\<in> automaton.trans (pnet np n)\n\ngoal (1 subgoal):\n 1. net_ips s' = net_ips s", "by (rule pnet_maintains_dom [THEN sym])"], ["proof (state)\nthis:\n  net_ips s' = net_ips s\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "define \\<sigma>' where \"\\<sigma>' j = (if j = i then the (fst (netgmap sr s') i) else \\<sigma> j)\" for j"], ["proof (state)\nthis:\n  \\<sigma>' ?j =\n  (if ?j = i then the (fst (netgmap sr s') i) else \\<sigma> ?j)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from \\<open>\\<forall>j. j\\<noteq>i \\<longrightarrow> fst (netgmap sr s') j = fst (netgmap sr s) j\\<close>\n         and \\<open>netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     fst (netgmap sr s') j = fst (netgmap sr s) j\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)", "have \"\\<forall>j. j\\<noteq>i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     fst (netgmap sr s') j = fst (netgmap sr s) j\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. \\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "unfolding \\<sigma>'_def"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     fst (netgmap sr s') j = fst (netgmap sr s) j\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<noteq> i \\<longrightarrow>\n       (if j = i then the (fst (netgmap sr s') i) else \\<sigma> j) =\n       \\<sigma> j", "by clarsimp"], ["proof (state)\nthis:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from assms(2)"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np n) TT", "have \"net_ips s = net_tree_ips n\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np n) TT\n\ngoal (1 subgoal):\n 1. net_ips s = net_tree_ips n", "by (rule pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  net_ips s = net_tree_ips n\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from \\<open>netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)", "have \"\\<zeta> = snd (netgmap sr s)\""], ["proof (prove)\nusing this:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. \\<zeta> = snd (netgmap sr s)", "by simp"], ["proof (state)\nthis:\n  \\<zeta> = snd (netgmap sr s)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from \\<open>\\<forall>j. j\\<noteq>i \\<longrightarrow> fst (netgmap sr s') j = fst (netgmap sr s) j\\<close> \\<open>i \\<in> net_ips s\\<close>\n         \\<open>net_ips s = net_tree_ips n\\<close> \\<open>net_ips s' = net_ips s\\<close>\n         \\<open>netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     fst (netgmap sr s') j = fst (netgmap sr s) j\n  i \\<in> net_ips s\n  net_ips s = net_tree_ips n\n  net_ips s' = net_ips s\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)", "have \"fst (netgmap sr s') = fst (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     fst (netgmap sr s') j = fst (netgmap sr s) j\n  i \\<in> net_ips s\n  net_ips s = net_tree_ips n\n  net_ips s' = net_ips s\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s') =\n    fst (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))", "unfolding \\<sigma>'_def [abs_def]"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     fst (netgmap sr s') j = fst (netgmap sr s) j\n  i \\<in> net_ips s\n  net_ips s = net_tree_ips n\n  net_ips s' = net_ips s\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s') =\n    fst (netmask (net_tree_ips n)\n          (\\<lambda>j.\n              if j = i then the (fst (netgmap sr s') i) else \\<sigma> j,\n           snd (netgmap sr s')))", "by - (rule ext, clarsimp)"], ["proof (state)\nthis:\n  fst (netgmap sr s') =\n  fst (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "hence \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\""], ["proof (prove)\nusing this:\n  fst (netgmap sr s') =\n  fst (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))\n\ngoal (1 subgoal):\n 1. netgmap sr s' =\n    netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))", "by (rule prod_eqI, simp)"], ["proof (state)\nthis:\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "with assms(1, 3)"], ["proof (chain)\npicking this:\n  (s, \\<tau>, s') \\<in> automaton.trans (pnet np n)\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))", "have \"((\\<sigma>, snd (netgmap sr s)), \\<tau>, (\\<sigma>', snd (netgmap sr s'))) \\<in> trans (opnet onp n)\""], ["proof (prove)\nusing this:\n  (s, \\<tau>, s') \\<in> automaton.trans (pnet np n)\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp n)", "using assms(2,4) \\<open>i\\<in>net_ips s\\<close> and \\<open>net_ip_action np \\<tau> i n s s'\\<close>"], ["proof (prove)\nusing this:\n  (s, \\<tau>, s') \\<in> automaton.trans (pnet np n)\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n  s \\<in> reachable (pnet np n) TT\n  wf_net_tree n\n  i \\<in> net_ips s\n  net_ip_action np \\<tau> i n s s'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp n)", "proof (induction n arbitrary: s s' \\<zeta>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, \\<tau>, s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np \\<tau> i \\<langle>ia; R\\<rangle> s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "fix ii R\\<^sub>i ns ns' \\<zeta>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, \\<tau>, s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np \\<tau> i \\<langle>ia; R\\<rangle> s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "assume \"(ns, \\<tau>, ns') \\<in> trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\"\n         and nsr: \"ns \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\"\n         and \"netgmap sr ns = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\"\n         and \"netgmap sr ns' = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>', snd (netgmap sr ns'))\"\n         and \"i\\<in>net_ips ns\""], ["proof (state)\nthis:\n  (ns, \\<tau>, ns')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n  ns \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n  netgmap sr ns' =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n   (\\<sigma>', snd (netgmap sr ns'))\n  i \\<in> net_ips ns\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, \\<tau>, s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np \\<tau> i \\<langle>ia; R\\<rangle> s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from this(1)"], ["proof (chain)\npicking this:\n  (ns, \\<tau>, ns')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)", "have \"(ns, \\<tau>, ns') \\<in> node_sos (trans (np ii))\""], ["proof (prove)\nusing this:\n  (ns, \\<tau>, ns')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (1 subgoal):\n 1. (ns, \\<tau>, ns') \\<in> node_sos (automaton.trans (np ii))", "by (simp add: node_comps)"], ["proof (state)\nthis:\n  (ns, \\<tau>, ns') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, \\<tau>, s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np \\<tau> i \\<langle>ia; R\\<rangle> s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "moreover"], ["proof (state)\nthis:\n  (ns, \\<tau>, ns') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, \\<tau>, s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np \\<tau> i \\<langle>ia; R\\<rangle> s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "with nsr"], ["proof (chain)\npicking this:\n  ns \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  (ns, \\<tau>, ns') \\<in> node_sos (automaton.trans (np ii))", "obtain s s' R R' where \"ns  = NodeS ii s R\"\n                                           and \"ns' = NodeS ii s' R'\""], ["proof (prove)\nusing this:\n  ns \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  (ns, \\<tau>, ns') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (1 subgoal):\n 1. (\\<And>s R s' R'.\n        \\<lbrakk>ns = NodeS ii s R; ns' = NodeS ii s' R'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis net_node_reachable_is_node node_tauTE')"], ["proof (state)\nthis:\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R'\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, \\<tau>, s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np \\<tau> i \\<langle>ia; R\\<rangle> s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "moreover"], ["proof (state)\nthis:\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R'\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, \\<tau>, s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np \\<tau> i \\<langle>ia; R\\<rangle> s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>i \\<in> net_ips ns\\<close> and \\<open>ns  = NodeS ii s R\\<close>"], ["proof (chain)\npicking this:\n  i \\<in> net_ips ns\n  ns = NodeS ii s R", "have \"ii = i\""], ["proof (prove)\nusing this:\n  i \\<in> net_ips ns\n  ns = NodeS ii s R\n\ngoal (1 subgoal):\n 1. ii = i", "by simp"], ["proof (state)\nthis:\n  ii = i\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, \\<tau>, s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np \\<tau> i \\<langle>ia; R\\<rangle> s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "ultimately"], ["proof (chain)\npicking this:\n  (ns, \\<tau>, ns') \\<in> node_sos (automaton.trans (np ii))\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R'\n  ii = i", "have ntr: \"(NodeS i s R, \\<tau>, NodeS i s' R') \\<in> node_sos (trans (np i))\""], ["proof (prove)\nusing this:\n  (ns, \\<tau>, ns') \\<in> node_sos (automaton.trans (np ii))\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R'\n  ii = i\n\ngoal (1 subgoal):\n 1. (NodeS i s R, \\<tau>, NodeS i s' R')\n    \\<in> node_sos (automaton.trans (np i))", "by simp"], ["proof (state)\nthis:\n  (NodeS i s R, \\<tau>, NodeS i s' R')\n  \\<in> node_sos (automaton.trans (np i))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, \\<tau>, s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np \\<tau> i \\<langle>ia; R\\<rangle> s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "hence \"R' = R\""], ["proof (prove)\nusing this:\n  (NodeS i s R, \\<tau>, NodeS i s' R')\n  \\<in> node_sos (automaton.trans (np i))\n\ngoal (1 subgoal):\n 1. R' = R", "by (metis net_state.inject(1) node_tauTE')"], ["proof (state)\nthis:\n  R' = R\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, \\<tau>, s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np \\<tau> i \\<langle>ia; R\\<rangle> s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from ntr"], ["proof (chain)\npicking this:\n  (NodeS i s R, \\<tau>, NodeS i s' R')\n  \\<in> node_sos (automaton.trans (np i))", "obtain a where \"(s, a, s') \\<in> trans (np i)\"\n                          and \"(\\<exists>d. a = \\<not>unicast d \\<and> d\\<notin>R) \\<or> (a = \\<tau>)\""], ["proof (prove)\nusing this:\n  (NodeS i s R, \\<tau>, NodeS i s' R')\n  \\<in> node_sos (automaton.trans (np i))\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>(s, a, s') \\<in> automaton.trans (np i);\n         (\\<exists>d. a = \\<not>unicast d \\<and> d \\<notin> R) \\<or>\n         a = \\<tau>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule node_tauTE') auto"], ["proof (state)\nthis:\n  (s, a, s') \\<in> automaton.trans (np i)\n  (\\<exists>d. a = \\<not>unicast d \\<and> d \\<notin> R) \\<or> a = \\<tau>\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, \\<tau>, s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np \\<tau> i \\<langle>ia; R\\<rangle> s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>netgmap sr ns = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\\<close> \\<open>ns  = NodeS ii s R\\<close> and \\<open>ii = i\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n  ns = NodeS ii s R\n  ii = i", "have \"\\<sigma> i = fst (sr s)\""], ["proof (prove)\nusing this:\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n  ns = NodeS ii s R\n  ii = i\n\ngoal (1 subgoal):\n 1. \\<sigma> i = fst (sr s)", "by simp (metis map_upd_Some_unfold)"], ["proof (state)\nthis:\n  \\<sigma> i = fst (sr s)\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, \\<tau>, s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np \\<tau> i \\<langle>ia; R\\<rangle> s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "moreover"], ["proof (state)\nthis:\n  \\<sigma> i = fst (sr s)\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, \\<tau>, s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np \\<tau> i \\<langle>ia; R\\<rangle> s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>netgmap sr ns' = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>', snd (netgmap sr ns'))\\<close>\n                    \\<open>ns' = NodeS ii s' R'\\<close> and \\<open>ii = i\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr ns' =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n   (\\<sigma>', snd (netgmap sr ns'))\n  ns' = NodeS ii s' R'\n  ii = i", "have \"\\<sigma>' i = fst (sr s')\""], ["proof (prove)\nusing this:\n  netgmap sr ns' =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n   (\\<sigma>', snd (netgmap sr ns'))\n  ns' = NodeS ii s' R'\n  ii = i\n\ngoal (1 subgoal):\n 1. \\<sigma>' i = fst (sr s')", "unfolding \\<sigma>'_def [abs_def]"], ["proof (prove)\nusing this:\n  netgmap sr ns' =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n   (\\<lambda>j. if j = i then the (fst (netgmap sr s') i) else \\<sigma> j,\n    snd (netgmap sr ns'))\n  ns' = NodeS ii s' R'\n  ii = i\n\ngoal (1 subgoal):\n 1. (if i = i then the (fst (netgmap sr s') i) else \\<sigma> i) =\n    fst (sr s')", "by clarsimp (hypsubst_thin,\n                                        metis (full_types, lifting) fun_upd_same option.sel)"], ["proof (state)\nthis:\n  \\<sigma>' i = fst (sr s')\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, \\<tau>, s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np \\<tau> i \\<langle>ia; R\\<rangle> s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "ultimately"], ["proof (chain)\npicking this:\n  \\<sigma> i = fst (sr s)\n  \\<sigma>' i = fst (sr s')", "have \"((\\<sigma>, snd (sr s)), a, (\\<sigma>', snd (sr s'))) \\<in> trans (onp i)\""], ["proof (prove)\nusing this:\n  \\<sigma> i = fst (sr s)\n  \\<sigma>' i = fst (sr s')\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (sr s)), a, \\<sigma>', snd (sr s'))\n    \\<in> automaton.trans (onp i)", "using \\<open>(s, a, s') \\<in> trans (np i)\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma> i = fst (sr s)\n  \\<sigma>' i = fst (sr s')\n  (s, a, s') \\<in> automaton.trans (np i)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (sr s)), a, \\<sigma>', snd (sr s'))\n    \\<in> automaton.trans (onp i)", "by (rule trans)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (sr s)), a, \\<sigma>', snd (sr s'))\n  \\<in> automaton.trans (onp i)\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, \\<tau>, s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np \\<tau> i \\<langle>ia; R\\<rangle> s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>(\\<exists>d. a = \\<not>unicast d \\<and> d\\<notin>R) \\<or> (a = \\<tau>)\\<close> \\<open>\\<forall>j. j\\<noteq>i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<close> \\<open>R'=R\\<close>\n           and \\<open>((\\<sigma>, snd (sr s)), a, (\\<sigma>', snd (sr s'))) \\<in> trans (onp i)\\<close>"], ["proof (chain)\npicking this:\n  (\\<exists>d. a = \\<not>unicast d \\<and> d \\<notin> R) \\<or> a = \\<tau>\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n  R' = R\n  ((\\<sigma>, snd (sr s)), a, \\<sigma>', snd (sr s'))\n  \\<in> automaton.trans (onp i)", "have \"((\\<sigma>, NodeS i (snd (sr s)) R), \\<tau>, (\\<sigma>', NodeS i (snd (sr s')) R')) \\<in> onode_sos (trans (onp i))\""], ["proof (prove)\nusing this:\n  (\\<exists>d. a = \\<not>unicast d \\<and> d \\<notin> R) \\<or> a = \\<tau>\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n  R' = R\n  ((\\<sigma>, snd (sr s)), a, \\<sigma>', snd (sr s'))\n  \\<in> automaton.trans (onp i)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS i (snd (sr s)) R), \\<tau>, \\<sigma>',\n     NodeS i (snd (sr s')) R')\n    \\<in> onode_sos (automaton.trans (onp i))", "by (metis onode_sos.onode_notucast onode_sos.onode_tau)"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS i (snd (sr s)) R), \\<tau>, \\<sigma>',\n   NodeS i (snd (sr s')) R')\n  \\<in> onode_sos (automaton.trans (onp i))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, \\<tau>, s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np \\<tau> i \\<langle>ia; R\\<rangle> s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "with \\<open>ns  = NodeS ii s R\\<close> \\<open>ns' = NodeS ii s' R'\\<close> \\<open>ii = i\\<close>"], ["proof (chain)\npicking this:\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R'\n  ii = i\n  ((\\<sigma>, NodeS i (snd (sr s)) R), \\<tau>, \\<sigma>',\n   NodeS i (snd (sr s')) R')\n  \\<in> onode_sos (automaton.trans (onp i))", "show \"((\\<sigma>, snd (netgmap sr ns)), \\<tau>, (\\<sigma>', snd (netgmap sr ns'))) \\<in> trans (opnet onp \\<langle>ii; R\\<^sub>i\\<rangle>)\""], ["proof (prove)\nusing this:\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R'\n  ii = i\n  ((\\<sigma>, NodeS i (snd (sr s)) R), \\<tau>, \\<sigma>',\n   NodeS i (snd (sr s')) R')\n  \\<in> onode_sos (automaton.trans (onp i))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr ns)), \\<tau>, \\<sigma>',\n     snd (netgmap sr ns'))\n    \\<in> automaton.trans (opnet onp \\<langle>ii; R\\<^sub>i\\<rangle>)", "by (simp add: onode_comps)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr ns)), \\<tau>, \\<sigma>', snd (netgmap sr ns'))\n  \\<in> automaton.trans (opnet onp \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "fix n1 n2 s s' \\<zeta>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "assume IH1: \"\\<And>s s' \\<zeta>. (s, \\<tau>, s') \\<in> trans (pnet np n1)\n                    \\<Longrightarrow> netgmap sr s = netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>)\n                    \\<Longrightarrow> netgmap sr s' = netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s'))\n                    \\<Longrightarrow> s \\<in> reachable (pnet np n1) TT\n                    \\<Longrightarrow> wf_net_tree n1\n                    \\<Longrightarrow> i\\<in>net_ips s\n                    \\<Longrightarrow> net_ip_action np \\<tau> i n1 s s'\n                    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, (\\<sigma>', snd (netgmap sr s'))) \\<in> trans (opnet onp n1)\"\n         and IH2: \"\\<And>s s' \\<zeta>. (s, \\<tau>, s') \\<in> trans (pnet np n2)\n                    \\<Longrightarrow> netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>)\n                    \\<Longrightarrow> netgmap sr s' = netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'))\n                    \\<Longrightarrow> s \\<in> reachable (pnet np n2) TT\n                    \\<Longrightarrow> wf_net_tree n2\n                    \\<Longrightarrow> i\\<in>net_ips s\n                    \\<Longrightarrow> net_ip_action np \\<tau> i n2 s s'\n                    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, (\\<sigma>', snd (netgmap sr s'))) \\<in> trans (opnet onp n2)\"\n         and tr: \"(s, \\<tau>, s') \\<in> trans (pnet np (n1 \\<parallel> n2))\"\n         and sr: \"s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\"\n         and nm: \"netgmap sr s = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\"\n         and nm': \"netgmap sr s' = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>', snd (netgmap sr s'))\"\n         and \"wf_net_tree (n1 \\<parallel> n2)\"\n         and \"i\\<in>net_ips s\"\n         and \"net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\""], ["proof (state)\nthis:\n  \\<lbrakk>(?s, \\<tau>, ?s') \\<in> automaton.trans (pnet np n1);\n   netgmap sr ?s = netmask (net_tree_ips n1) (\\<sigma>, ?\\<zeta>);\n   netgmap sr ?s' =\n   netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr ?s'));\n   ?s \\<in> reachable (pnet np n1) TT; wf_net_tree n1; i \\<in> net_ips ?s;\n   net_ip_action np \\<tau> i n1 ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr ?s)), \\<tau>, \\<sigma>',\n                     snd (netgmap sr ?s'))\n                    \\<in> automaton.trans (opnet onp n1)\n  \\<lbrakk>(?s, \\<tau>, ?s') \\<in> automaton.trans (pnet np n2);\n   netgmap sr ?s = netmask (net_tree_ips n2) (\\<sigma>, ?\\<zeta>);\n   netgmap sr ?s' =\n   netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr ?s'));\n   ?s \\<in> reachable (pnet np n2) TT; wf_net_tree n2; i \\<in> net_ips ?s;\n   net_ip_action np \\<tau> i n2 ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr ?s)), \\<tau>, \\<sigma>',\n                     snd (netgmap sr ?s'))\n                    \\<in> automaton.trans (opnet onp n2)\n  (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\n  s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n  netgmap sr s =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  netgmap sr s' =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr s'))\n  wf_net_tree (n1 \\<parallel> n2)\n  i \\<in> net_ips s\n  net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from tr"], ["proof (chain)\npicking this:\n  (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))", "have \"(s, \\<tau>, s') \\<in> pnet_sos (trans (pnet np n1)) (trans (pnet np n2))\""], ["proof (prove)\nusing this:\n  (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\n\ngoal (1 subgoal):\n 1. (s, \\<tau>, s')\n    \\<in> pnet_sos (automaton.trans (pnet np n1))\n           (automaton.trans (pnet np n2))", "by simp"], ["proof (state)\nthis:\n  (s, \\<tau>, s')\n  \\<in> pnet_sos (automaton.trans (pnet np n1))\n         (automaton.trans (pnet np n2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "then"], ["proof (chain)\npicking this:\n  (s, \\<tau>, s')\n  \\<in> pnet_sos (automaton.trans (pnet np n1))\n         (automaton.trans (pnet np n2))", "obtain s1 s1' s2 s2' where \"s = SubnetS s1 s2\"\n                                  and \"s' = SubnetS s1' s2'\""], ["proof (prove)\nusing this:\n  (s, \\<tau>, s')\n  \\<in> pnet_sos (automaton.trans (pnet np n1))\n         (automaton.trans (pnet np n2))\n\ngoal (1 subgoal):\n 1. (\\<And>s1 s2 s1' s2'.\n        \\<lbrakk>s = SubnetS s1 s2; s' = SubnetS s1' s2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule partial_tauTE) auto"], ["proof (state)\nthis:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from this(1) and nm"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  netgmap sr s =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)", "have \"netgmap sr (SubnetS s1 s2) = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\""], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  netgmap sr s =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. netgmap sr (SubnetS s1 s2) =\n    netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)", "by simp"], ["proof (state)\nthis:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>s' = SubnetS s1' s2'\\<close> and nm'"], ["proof (chain)\npicking this:\n  s' = SubnetS s1' s2'\n  netgmap sr s' =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr s'))", "have \"netgmap sr (SubnetS s1' s2') = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>', snd (netgmap sr s'))\""], ["proof (prove)\nusing this:\n  s' = SubnetS s1' s2'\n  netgmap sr s' =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. netgmap sr (SubnetS s1' s2') =\n    netmask (net_tree_ips (n1 \\<parallel> n2))\n     (\\<sigma>', snd (netgmap sr s'))", "by simp"], ["proof (state)\nthis:\n  netgmap sr (SubnetS s1' s2') =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>wf_net_tree (n1 \\<parallel> n2)\\<close>"], ["proof (chain)\npicking this:\n  wf_net_tree (n1 \\<parallel> n2)", "have \"wf_net_tree n1\"\n                                    and \"wf_net_tree n2\"\n                                    and \"net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\""], ["proof (prove)\nusing this:\n  wf_net_tree (n1 \\<parallel> n2)\n\ngoal (1 subgoal):\n 1. wf_net_tree n1 &&&\n    wf_net_tree n2 &&& net_tree_ips n1 \\<inter> net_tree_ips n2 = {}", "by auto"], ["proof (state)\nthis:\n  wf_net_tree n1\n  wf_net_tree n2\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from sr [simplified \\<open>s = SubnetS s1 s2\\<close>]"], ["proof (chain)\npicking this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT", "have \"s1 \\<in> reachable (pnet np n1) TT\""], ["proof (prove)\nusing this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n\ngoal (1 subgoal):\n 1. s1 \\<in> reachable (pnet np n1) TT", "by (rule subnet_reachable(1))"], ["proof (state)\nthis:\n  s1 \\<in> reachable (pnet np n1) TT\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "hence \"net_ips s1 = net_tree_ips n1\""], ["proof (prove)\nusing this:\n  s1 \\<in> reachable (pnet np n1) TT\n\ngoal (1 subgoal):\n 1. net_ips s1 = net_tree_ips n1", "by (rule pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  net_ips s1 = net_tree_ips n1\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from sr [simplified \\<open>s = SubnetS s1 s2\\<close>]"], ["proof (chain)\npicking this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT", "have \"s2 \\<in> reachable (pnet np n2) TT\""], ["proof (prove)\nusing this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n\ngoal (1 subgoal):\n 1. s2 \\<in> reachable (pnet np n2) TT", "by (rule subnet_reachable(2))"], ["proof (state)\nthis:\n  s2 \\<in> reachable (pnet np n2) TT\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "hence \"net_ips s2 = net_tree_ips n2\""], ["proof (prove)\nusing this:\n  s2 \\<in> reachable (pnet np n2) TT\n\ngoal (1 subgoal):\n 1. net_ips s2 = net_tree_ips n2", "by (rule pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from nm [simplified \\<open>s = SubnetS s1 s2\\<close>]\n           \\<open>net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\\<close>\n           \\<open>net_ips s1 = net_tree_ips n1\\<close>\n           \\<open>net_ips s2 = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2", "have \"netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s1 =\n    netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))", "by (rule netgmap_subnet_split1)"], ["proof (state)\nthis:\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from nm [simplified \\<open>s = SubnetS s1 s2\\<close>]\n           \\<open>net_ips s1 = net_tree_ips n1\\<close>\n           \\<open>net_ips s2 = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2", "have \"netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s2 =\n    netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))", "by (rule netgmap_subnet_split2)"], ["proof (state)\nthis:\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>i\\<in>net_ips s\\<close> and \\<open>s = SubnetS s1 s2\\<close>"], ["proof (chain)\npicking this:\n  i \\<in> net_ips s\n  s = SubnetS s1 s2", "have \"i\\<in>net_ips s1 \\<or> i\\<in>net_ips s2\""], ["proof (prove)\nusing this:\n  i \\<in> net_ips s\n  s = SubnetS s1 s2\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s1 \\<or> i \\<in> net_ips s2", "by auto"], ["proof (state)\nthis:\n  i \\<in> net_ips s1 \\<or> i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, \\<tau>, s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np \\<tau> i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n\\<tau>, \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, \\<tau>, s') \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s; net_ip_action np \\<tau> i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>,\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, \\<tau>, s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "thus \"((\\<sigma>, snd (netgmap sr s)), \\<tau>, (\\<sigma>', snd (netgmap sr s'))) \\<in> trans (opnet onp (n1 \\<parallel> n2))\""], ["proof (prove)\nusing this:\n  i \\<in> net_ips s1 \\<or> i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> net_ips s1 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n 2. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "assume \"i\\<in>net_ips s1\""], ["proof (state)\nthis:\n  i \\<in> net_ips s1\n\ngoal (2 subgoals):\n 1. i \\<in> net_ips s1 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n 2. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "with \\<open>s = SubnetS s1 s2\\<close> \\<open>s' = SubnetS s1' s2'\\<close> \\<open>net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<close>"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\n  i \\<in> net_ips s1", "have \"(s1, \\<tau>, s1') \\<in> trans (pnet np n1)\"\n           and \"net_ip_action np \\<tau> i n1 s1 s1'\"\n           and \"s2' = s2\""], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\n  i \\<in> net_ips s1\n\ngoal (1 subgoal):\n 1. (s1, \\<tau>, s1') \\<in> automaton.trans (pnet np n1) &&&\n    net_ip_action np \\<tau> i n1 s1 s1' &&& s2' = s2", "by simp_all"], ["proof (state)\nthis:\n  (s1, \\<tau>, s1') \\<in> automaton.trans (pnet np n1)\n  net_ip_action np \\<tau> i n1 s1 s1'\n  s2' = s2\n\ngoal (2 subgoals):\n 1. i \\<in> net_ips s1 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n 2. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "from \\<open>net_ips s1 = net_tree_ips n1\\<close> and \\<open>(s1, \\<tau>, s1') \\<in> trans (pnet np n1)\\<close>"], ["proof (chain)\npicking this:\n  net_ips s1 = net_tree_ips n1\n  (s1, \\<tau>, s1') \\<in> automaton.trans (pnet np n1)", "have \"net_ips s1' = net_tree_ips n1\""], ["proof (prove)\nusing this:\n  net_ips s1 = net_tree_ips n1\n  (s1, \\<tau>, s1') \\<in> automaton.trans (pnet np n1)\n\ngoal (1 subgoal):\n 1. net_ips s1' = net_tree_ips n1", "by (metis pnet_maintains_dom)"], ["proof (state)\nthis:\n  net_ips s1' = net_tree_ips n1\n\ngoal (2 subgoals):\n 1. i \\<in> net_ips s1 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n 2. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "from nm' [simplified \\<open>s' = SubnetS s1' s2'\\<close> \\<open>s2' = s2\\<close>]\n                        \\<open>net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\\<close>\n                        \\<open>net_ips s1' = net_tree_ips n1\\<close>\n                        \\<open>net_ips s2 = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr (SubnetS s1' s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr (SubnetS s1' s2)))\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  net_ips s1' = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2", "have \"netgmap sr s1' = netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1' s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr (SubnetS s1' s2)))\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  net_ips s1' = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s1' =\n    netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))", "by (rule netgmap_subnet_split1)"], ["proof (state)\nthis:\n  netgmap sr s1' =\n  netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\n\ngoal (2 subgoals):\n 1. i \\<in> net_ips s1 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n 2. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "from \\<open>(s1, \\<tau>, s1') \\<in> trans (pnet np n1)\\<close>\n             \\<open>netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\\<close>\n             \\<open>netgmap sr s1' = netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\\<close>\n             \\<open>s1 \\<in> reachable (pnet np n1) TT\\<close>\n             \\<open>wf_net_tree n1\\<close>\n             \\<open>i\\<in>net_ips s1\\<close>\n             \\<open>net_ip_action np \\<tau> i n1 s1 s1'\\<close>"], ["proof (chain)\npicking this:\n  (s1, \\<tau>, s1') \\<in> automaton.trans (pnet np n1)\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n  netgmap sr s1' =\n  netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\n  s1 \\<in> reachable (pnet np n1) TT\n  wf_net_tree n1\n  i \\<in> net_ips s1\n  net_ip_action np \\<tau> i n1 s1 s1'", "have \"((\\<sigma>, snd (netgmap sr s1)), \\<tau>, (\\<sigma>', snd (netgmap sr s1'))) \\<in> trans (opnet onp n1)\""], ["proof (prove)\nusing this:\n  (s1, \\<tau>, s1') \\<in> automaton.trans (pnet np n1)\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n  netgmap sr s1' =\n  netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\n  s1 \\<in> reachable (pnet np n1) TT\n  wf_net_tree n1\n  i \\<in> net_ips s1\n  net_ip_action np \\<tau> i n1 s1 s1'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s1)), \\<tau>, \\<sigma>',\n     snd (netgmap sr s1'))\n    \\<in> automaton.trans (opnet onp n1)", "by (rule IH1)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s1)), \\<tau>, \\<sigma>', snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n\ngoal (2 subgoals):\n 1. i \\<in> net_ips s1 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n 2. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "with \\<open>s = SubnetS s1 s2\\<close> \\<open>s' = SubnetS s1' s2'\\<close> \\<open>s2' = s2\\<close>"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  s2' = s2\n  ((\\<sigma>, snd (netgmap sr s1)), \\<tau>, \\<sigma>', snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)", "show ?thesis"], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  s2' = s2\n  ((\\<sigma>, snd (netgmap sr s1)), \\<tau>, \\<sigma>', snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "by (simp del: step_node_tau) (erule opnet_tau1)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "assume \"i\\<in>net_ips s2\""], ["proof (state)\nthis:\n  i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "with \\<open>s = SubnetS s1 s2\\<close> \\<open>s' = SubnetS s1' s2'\\<close> \\<open>net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\\<close>"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\n  i \\<in> net_ips s2", "have \"(s2, \\<tau>, s2') \\<in> trans (pnet np n2)\"\n           and \"net_ip_action np \\<tau> i n2 s2 s2'\"\n           and \"s1' = s1\""], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  net_ip_action np \\<tau> i (n1 \\<parallel> n2) s s'\n  i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. (s2, \\<tau>, s2') \\<in> automaton.trans (pnet np n2) &&&\n    net_ip_action np \\<tau> i n2 s2 s2' &&& s1' = s1", "by simp_all"], ["proof (state)\nthis:\n  (s2, \\<tau>, s2') \\<in> automaton.trans (pnet np n2)\n  net_ip_action np \\<tau> i n2 s2 s2'\n  s1' = s1\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "from \\<open>net_ips s2 = net_tree_ips n2\\<close> and \\<open>(s2, \\<tau>, s2') \\<in> trans (pnet np n2)\\<close>"], ["proof (chain)\npicking this:\n  net_ips s2 = net_tree_ips n2\n  (s2, \\<tau>, s2') \\<in> automaton.trans (pnet np n2)", "have \"net_ips s2' = net_tree_ips n2\""], ["proof (prove)\nusing this:\n  net_ips s2 = net_tree_ips n2\n  (s2, \\<tau>, s2') \\<in> automaton.trans (pnet np n2)\n\ngoal (1 subgoal):\n 1. net_ips s2' = net_tree_ips n2", "by (metis pnet_maintains_dom)"], ["proof (state)\nthis:\n  net_ips s2' = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "from nm' [simplified \\<open>s' = SubnetS s1' s2'\\<close> \\<open>s1' = s1\\<close>]\n                        \\<open>net_ips s1 = net_tree_ips n1\\<close>\n                        \\<open>net_ips s2' = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr (SubnetS s1 s2') =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr (SubnetS s1 s2')))\n  net_ips s1 = net_tree_ips n1\n  net_ips s2' = net_tree_ips n2", "have \"netgmap sr s2' = netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1 s2') =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr (SubnetS s1 s2')))\n  net_ips s1 = net_tree_ips n1\n  net_ips s2' = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s2' =\n    netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))", "by (rule netgmap_subnet_split2)"], ["proof (state)\nthis:\n  netgmap sr s2' =\n  netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "from \\<open>(s2, \\<tau>, s2') \\<in> trans (pnet np n2)\\<close>\n             \\<open>netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\\<close>\n             \\<open>netgmap sr s2' = netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\\<close>\n             \\<open>s2 \\<in> reachable (pnet np n2) TT\\<close>\n             \\<open>wf_net_tree n2\\<close>\n             \\<open>i\\<in>net_ips s2\\<close>\n             \\<open>net_ip_action np \\<tau> i n2 s2 s2'\\<close>"], ["proof (chain)\npicking this:\n  (s2, \\<tau>, s2') \\<in> automaton.trans (pnet np n2)\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n  netgmap sr s2' =\n  netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\n  s2 \\<in> reachable (pnet np n2) TT\n  wf_net_tree n2\n  i \\<in> net_ips s2\n  net_ip_action np \\<tau> i n2 s2 s2'", "have \"((\\<sigma>, snd (netgmap sr s2)), \\<tau>, (\\<sigma>', snd (netgmap sr s2'))) \\<in> trans (opnet onp n2)\""], ["proof (prove)\nusing this:\n  (s2, \\<tau>, s2') \\<in> automaton.trans (pnet np n2)\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n  netgmap sr s2' =\n  netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\n  s2 \\<in> reachable (pnet np n2) TT\n  wf_net_tree n2\n  i \\<in> net_ips s2\n  net_ip_action np \\<tau> i n2 s2 s2'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s2)), \\<tau>, \\<sigma>',\n     snd (netgmap sr s2'))\n    \\<in> automaton.trans (opnet onp n2)", "by (rule IH2)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s2)), \\<tau>, \\<sigma>', snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "with \\<open>s = SubnetS s1 s2\\<close> \\<open>s' = SubnetS s1' s2'\\<close> \\<open>s1' = s1\\<close>"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  s1' = s1\n  ((\\<sigma>, snd (netgmap sr s2)), \\<tau>, \\<sigma>', snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)", "show ?thesis"], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  s1' = s1\n  ((\\<sigma>, snd (netgmap sr s2)), \\<tau>, \\<sigma>', snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "by (simp del: step_node_tau) (erule opnet_tau2)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "with \\<open>\\<zeta> = snd (netgmap sr s)\\<close>"], ["proof (chain)\npicking this:\n  \\<zeta> = snd (netgmap sr s)\n  ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)", "have \"((\\<sigma>, \\<zeta>), \\<tau>, (\\<sigma>', snd (netgmap sr s'))) \\<in> trans (opnet onp n)\""], ["proof (prove)\nusing this:\n  \\<zeta> = snd (netgmap sr s)\n  ((\\<sigma>, snd (netgmap sr s)), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp n)", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "moreover"], ["proof (state)\nthis:\n  ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from \\<open>\\<forall>j. j\\<noteq>i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<close> \\<open>i \\<in> net_ips s\\<close> \\<open>\\<zeta> = snd (netgmap sr s)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n  i \\<in> net_ips s\n  \\<zeta> = snd (netgmap sr s)", "have \"\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n  i \\<in> net_ips s\n  \\<zeta> = snd (netgmap sr s)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "by (metis net_ips_netgmap)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "ultimately"], ["proof (chain)\npicking this:\n  ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "have \"((\\<sigma>, \\<zeta>), \\<tau>, (\\<sigma>', snd (netgmap sr s'))) \\<in> trans (opnet onp n)\n                     \\<and> (\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j)\n                     \\<and> netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp n) \\<and>\n    (\\<forall>j.\n        j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n        \\<sigma>' j = \\<sigma> j) \\<and>\n    netgmap sr s' =\n    netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))", "using \\<open>netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp n) \\<and>\n    (\\<forall>j.\n        j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n        \\<sigma>' j = \\<sigma> j) \\<and>\n    netgmap sr s' =\n    netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n) \\<and>\n  (\\<forall>j.\n      j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n      \\<sigma>' j = \\<sigma> j) \\<and>\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "thus \"\\<exists>\\<sigma>' \\<zeta>'. ((\\<sigma>, \\<zeta>), \\<tau>, (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\n                  \\<and> (\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j)\n                  \\<and> netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n) \\<and>\n  (\\<forall>j.\n      j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n      \\<sigma>' j = \\<sigma> j) \\<and>\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<zeta>'.\n     ((\\<sigma>, \\<zeta>), \\<tau>, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet onp n) \\<and>\n     (\\<forall>j.\n         j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n         \\<sigma>' j = \\<sigma> j) \\<and>\n     netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transfer_deliver:\n  assumes \"(s, i:deliver(d), s') \\<in> trans (pnet np n)\"\n      and \"s \\<in> reachable (pnet np n) TT\"\n      and \"netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\"\n      and \"wf_net_tree n\"\n  obtains \\<sigma>' \\<zeta>' where \"((\\<sigma>, \\<zeta>), i:deliver(d), (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\"\n                  and \"\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\"\n                  and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<zeta>'.\n        \\<lbrakk>((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n                 \\<in> automaton.trans (opnet onp n);\n         \\<forall>j.\n            j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n            \\<sigma>' j = \\<sigma> j;\n         netgmap sr s' =\n         netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof atomize_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from assms(4,2,1)"], ["proof (chain)\npicking this:\n  wf_net_tree n\n  s \\<in> reachable (pnet np n) TT\n  (s, i:deliver(d), s') \\<in> automaton.trans (pnet np n)", "obtain \"i\\<in>net_ips s\"\n                         and \"\\<forall>j. j\\<noteq>i \\<longrightarrow> netmap s' j = netmap s j\"\n                         and \"net_ip_action np (i:deliver(d)) i n s s'\""], ["proof (prove)\nusing this:\n  wf_net_tree n\n  s \\<in> reachable (pnet np n) TT\n  (s, i:deliver(d), s') \\<in> automaton.trans (pnet np n)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>i \\<in> net_ips s;\n      \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j;\n      net_ip_action np (i:deliver(d)) i n s s'\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis delivered_to_net_ips pnet_deliver_single_node)"], ["proof (state)\nthis:\n  i \\<in> net_ips s\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j\n  net_ip_action np (i:deliver(d)) i n s s'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from this(2)"], ["proof (chain)\npicking this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j", "have \"\\<forall>j. j\\<noteq>i \\<longrightarrow> fst (netgmap sr s') j = fst (netgmap sr s) j\""], ["proof (prove)\nusing this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> netmap s' j = netmap s j\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<noteq> i \\<longrightarrow>\n       fst (netgmap sr s') j = fst (netgmap sr s) j", "by (clarsimp intro!: netmap_is_fst_netgmap')"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     fst (netgmap sr s') j = fst (netgmap sr s) j\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from \\<open>(s, i:deliver(d), s') \\<in> trans (pnet np n)\\<close>"], ["proof (chain)\npicking this:\n  (s, i:deliver(d), s') \\<in> automaton.trans (pnet np n)", "have \"net_ips s' = net_ips s\""], ["proof (prove)\nusing this:\n  (s, i:deliver(d), s') \\<in> automaton.trans (pnet np n)\n\ngoal (1 subgoal):\n 1. net_ips s' = net_ips s", "by (rule pnet_maintains_dom [THEN sym])"], ["proof (state)\nthis:\n  net_ips s' = net_ips s\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "define \\<sigma>' where \"\\<sigma>' j = (if j = i then the (fst (netgmap sr s') i) else \\<sigma> j)\" for j"], ["proof (state)\nthis:\n  \\<sigma>' ?j =\n  (if ?j = i then the (fst (netgmap sr s') i) else \\<sigma> ?j)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from \\<open>\\<forall>j. j\\<noteq>i \\<longrightarrow> fst (netgmap sr s') j = fst (netgmap sr s) j\\<close>\n         and \\<open>netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     fst (netgmap sr s') j = fst (netgmap sr s) j\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)", "have \"\\<forall>j. j\\<noteq>i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     fst (netgmap sr s') j = fst (netgmap sr s) j\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. \\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "unfolding \\<sigma>'_def"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     fst (netgmap sr s') j = fst (netgmap sr s) j\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<noteq> i \\<longrightarrow>\n       (if j = i then the (fst (netgmap sr s') i) else \\<sigma> j) =\n       \\<sigma> j", "by clarsimp"], ["proof (state)\nthis:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from assms(2)"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np n) TT", "have \"net_ips s = net_tree_ips n\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np n) TT\n\ngoal (1 subgoal):\n 1. net_ips s = net_tree_ips n", "by (rule pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  net_ips s = net_tree_ips n\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from \\<open>netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)", "have \"\\<zeta> = snd (netgmap sr s)\""], ["proof (prove)\nusing this:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. \\<zeta> = snd (netgmap sr s)", "by simp"], ["proof (state)\nthis:\n  \\<zeta> = snd (netgmap sr s)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from \\<open>\\<forall>j. j\\<noteq>i \\<longrightarrow> fst (netgmap sr s') j = fst (netgmap sr s) j\\<close> \\<open>i \\<in> net_ips s\\<close>\n         \\<open>net_ips s = net_tree_ips n\\<close> \\<open>net_ips s' = net_ips s\\<close>\n         \\<open>netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     fst (netgmap sr s') j = fst (netgmap sr s) j\n  i \\<in> net_ips s\n  net_ips s = net_tree_ips n\n  net_ips s' = net_ips s\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)", "have \"fst (netgmap sr s') = fst (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     fst (netgmap sr s') j = fst (netgmap sr s) j\n  i \\<in> net_ips s\n  net_ips s = net_tree_ips n\n  net_ips s' = net_ips s\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s') =\n    fst (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))", "unfolding \\<sigma>'_def [abs_def]"], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     fst (netgmap sr s') j = fst (netgmap sr s) j\n  i \\<in> net_ips s\n  net_ips s = net_tree_ips n\n  net_ips s' = net_ips s\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s') =\n    fst (netmask (net_tree_ips n)\n          (\\<lambda>j.\n              if j = i then the (fst (netgmap sr s') i) else \\<sigma> j,\n           snd (netgmap sr s')))", "by - (rule ext, clarsimp)"], ["proof (state)\nthis:\n  fst (netgmap sr s') =\n  fst (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "hence \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\""], ["proof (prove)\nusing this:\n  fst (netgmap sr s') =\n  fst (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))\n\ngoal (1 subgoal):\n 1. netgmap sr s' =\n    netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))", "by (rule prod_eqI, simp)"], ["proof (state)\nthis:\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "with assms(1, 3)"], ["proof (chain)\npicking this:\n  (s, i:deliver(d), s') \\<in> automaton.trans (pnet np n)\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))", "have \"((\\<sigma>, snd (netgmap sr s)), i:deliver(d), (\\<sigma>', snd (netgmap sr s'))) \\<in> trans (opnet onp n)\""], ["proof (prove)\nusing this:\n  (s, i:deliver(d), s') \\<in> automaton.trans (pnet np n)\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp n)", "using assms(2,4) \\<open>i\\<in>net_ips s\\<close> and \\<open>net_ip_action np (i:deliver(d)) i n s s'\\<close>"], ["proof (prove)\nusing this:\n  (s, i:deliver(d), s') \\<in> automaton.trans (pnet np n)\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n  s \\<in> reachable (pnet np n) TT\n  wf_net_tree n\n  i \\<in> net_ips s\n  net_ip_action np (i:deliver(d)) i n s s'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp n)", "proof (induction n arbitrary: s s' \\<zeta>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, i:deliver(d), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i \\<langle>ia; R\\<rangle> s\n         s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "fix ii R\\<^sub>i ns ns' \\<zeta>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, i:deliver(d), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i \\<langle>ia; R\\<rangle> s\n         s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "assume \"(ns, i:deliver(d), ns') \\<in> trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\"\n         and nsr: \"ns \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\"\n         and \"netgmap sr ns = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\"\n         and \"netgmap sr ns' = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>', snd (netgmap sr ns'))\"\n         and \"i\\<in>net_ips ns\""], ["proof (state)\nthis:\n  (ns, i:deliver(d), ns')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n  ns \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n  netgmap sr ns' =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n   (\\<sigma>', snd (netgmap sr ns'))\n  i \\<in> net_ips ns\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, i:deliver(d), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i \\<langle>ia; R\\<rangle> s\n         s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from this(1)"], ["proof (chain)\npicking this:\n  (ns, i:deliver(d), ns')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)", "have \"(ns, i:deliver(d), ns') \\<in> node_sos (trans (np ii))\""], ["proof (prove)\nusing this:\n  (ns, i:deliver(d), ns')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (1 subgoal):\n 1. (ns, i:deliver(d), ns') \\<in> node_sos (automaton.trans (np ii))", "by (simp add: node_comps)"], ["proof (state)\nthis:\n  (ns, i:deliver(d), ns') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, i:deliver(d), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i \\<langle>ia; R\\<rangle> s\n         s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "moreover"], ["proof (state)\nthis:\n  (ns, i:deliver(d), ns') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, i:deliver(d), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i \\<langle>ia; R\\<rangle> s\n         s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "with nsr"], ["proof (chain)\npicking this:\n  ns \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  (ns, i:deliver(d), ns') \\<in> node_sos (automaton.trans (np ii))", "obtain s s' R R' where \"ns  = NodeS ii s R\"\n                                           and \"ns' = NodeS ii s' R'\""], ["proof (prove)\nusing this:\n  ns \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  (ns, i:deliver(d), ns') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (1 subgoal):\n 1. (\\<And>s R s' R'.\n        \\<lbrakk>ns = NodeS ii s R; ns' = NodeS ii s' R'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis net_node_reachable_is_node node_sos_dest)"], ["proof (state)\nthis:\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R'\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, i:deliver(d), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i \\<langle>ia; R\\<rangle> s\n         s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "moreover"], ["proof (state)\nthis:\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R'\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, i:deliver(d), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i \\<langle>ia; R\\<rangle> s\n         s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>i \\<in> net_ips ns\\<close> and \\<open>ns  = NodeS ii s R\\<close>"], ["proof (chain)\npicking this:\n  i \\<in> net_ips ns\n  ns = NodeS ii s R", "have \"ii = i\""], ["proof (prove)\nusing this:\n  i \\<in> net_ips ns\n  ns = NodeS ii s R\n\ngoal (1 subgoal):\n 1. ii = i", "by simp"], ["proof (state)\nthis:\n  ii = i\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, i:deliver(d), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i \\<langle>ia; R\\<rangle> s\n         s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "ultimately"], ["proof (chain)\npicking this:\n  (ns, i:deliver(d), ns') \\<in> node_sos (automaton.trans (np ii))\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R'\n  ii = i", "have ntr: \"(NodeS i s R, i:deliver(d), NodeS i s' R') \\<in> node_sos (trans (np i))\""], ["proof (prove)\nusing this:\n  (ns, i:deliver(d), ns') \\<in> node_sos (automaton.trans (np ii))\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R'\n  ii = i\n\ngoal (1 subgoal):\n 1. (NodeS i s R, i:deliver(d), NodeS i s' R')\n    \\<in> node_sos (automaton.trans (np i))", "by simp"], ["proof (state)\nthis:\n  (NodeS i s R, i:deliver(d), NodeS i s' R')\n  \\<in> node_sos (automaton.trans (np i))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, i:deliver(d), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i \\<langle>ia; R\\<rangle> s\n         s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "hence \"R' = R\""], ["proof (prove)\nusing this:\n  (NodeS i s R, i:deliver(d), NodeS i s' R')\n  \\<in> node_sos (automaton.trans (np i))\n\ngoal (1 subgoal):\n 1. R' = R", "by (metis net_state.inject(1) node_deliverTE')"], ["proof (state)\nthis:\n  R' = R\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, i:deliver(d), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i \\<langle>ia; R\\<rangle> s\n         s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from ntr"], ["proof (chain)\npicking this:\n  (NodeS i s R, i:deliver(d), NodeS i s' R')\n  \\<in> node_sos (automaton.trans (np i))", "have \"(s, deliver d, s') \\<in> trans (np i)\""], ["proof (prove)\nusing this:\n  (NodeS i s R, i:deliver(d), NodeS i s' R')\n  \\<in> node_sos (automaton.trans (np i))\n\ngoal (1 subgoal):\n 1. (s, deliver d, s') \\<in> automaton.trans (np i)", "by (rule node_deliverTE') simp"], ["proof (state)\nthis:\n  (s, deliver d, s') \\<in> automaton.trans (np i)\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, i:deliver(d), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i \\<langle>ia; R\\<rangle> s\n         s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>netgmap sr ns = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\\<close> \\<open>ns  = NodeS ii s R\\<close> and \\<open>ii = i\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n  ns = NodeS ii s R\n  ii = i", "have \"\\<sigma> i = fst (sr s)\""], ["proof (prove)\nusing this:\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n  ns = NodeS ii s R\n  ii = i\n\ngoal (1 subgoal):\n 1. \\<sigma> i = fst (sr s)", "by simp (metis map_upd_Some_unfold)"], ["proof (state)\nthis:\n  \\<sigma> i = fst (sr s)\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, i:deliver(d), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i \\<langle>ia; R\\<rangle> s\n         s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "moreover"], ["proof (state)\nthis:\n  \\<sigma> i = fst (sr s)\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, i:deliver(d), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i \\<langle>ia; R\\<rangle> s\n         s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>netgmap sr ns' = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>', snd (netgmap sr ns'))\\<close>\n                    \\<open>ns' = NodeS ii s' R'\\<close> and \\<open>ii = i\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr ns' =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n   (\\<sigma>', snd (netgmap sr ns'))\n  ns' = NodeS ii s' R'\n  ii = i", "have \"\\<sigma>' i = fst (sr s')\""], ["proof (prove)\nusing this:\n  netgmap sr ns' =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n   (\\<sigma>', snd (netgmap sr ns'))\n  ns' = NodeS ii s' R'\n  ii = i\n\ngoal (1 subgoal):\n 1. \\<sigma>' i = fst (sr s')", "unfolding \\<sigma>'_def [abs_def]"], ["proof (prove)\nusing this:\n  netgmap sr ns' =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n   (\\<lambda>j. if j = i then the (fst (netgmap sr s') i) else \\<sigma> j,\n    snd (netgmap sr ns'))\n  ns' = NodeS ii s' R'\n  ii = i\n\ngoal (1 subgoal):\n 1. (if i = i then the (fst (netgmap sr s') i) else \\<sigma> i) =\n    fst (sr s')", "by clarsimp (hypsubst_thin,\n                                        metis (lifting, full_types) fun_upd_same option.sel)"], ["proof (state)\nthis:\n  \\<sigma>' i = fst (sr s')\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, i:deliver(d), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i \\<langle>ia; R\\<rangle> s\n         s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "ultimately"], ["proof (chain)\npicking this:\n  \\<sigma> i = fst (sr s)\n  \\<sigma>' i = fst (sr s')", "have \"((\\<sigma>, snd (sr s)), deliver d, (\\<sigma>', snd (sr s'))) \\<in> trans (onp i)\""], ["proof (prove)\nusing this:\n  \\<sigma> i = fst (sr s)\n  \\<sigma>' i = fst (sr s')\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (sr s)), deliver d, \\<sigma>', snd (sr s'))\n    \\<in> automaton.trans (onp i)", "using \\<open>(s, deliver d, s') \\<in> trans (np i)\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma> i = fst (sr s)\n  \\<sigma>' i = fst (sr s')\n  (s, deliver d, s') \\<in> automaton.trans (np i)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (sr s)), deliver d, \\<sigma>', snd (sr s'))\n    \\<in> automaton.trans (onp i)", "by (rule trans)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (sr s)), deliver d, \\<sigma>', snd (sr s'))\n  \\<in> automaton.trans (onp i)\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, i:deliver(d), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i \\<langle>ia; R\\<rangle> s\n         s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "with \\<open>\\<forall>j. j\\<noteq>i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<close> \\<open>R'=R\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n  R' = R\n  ((\\<sigma>, snd (sr s)), deliver d, \\<sigma>', snd (sr s'))\n  \\<in> automaton.trans (onp i)", "have \"((\\<sigma>, NodeS i (snd (sr s)) R), i:deliver(d), (\\<sigma>', NodeS i (snd (sr s')) R'))\n                                                                      \\<in> onode_sos (trans (onp i))\""], ["proof (prove)\nusing this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n  R' = R\n  ((\\<sigma>, snd (sr s)), deliver d, \\<sigma>', snd (sr s'))\n  \\<in> automaton.trans (onp i)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS i (snd (sr s)) R), i:deliver(d), \\<sigma>',\n     NodeS i (snd (sr s')) R')\n    \\<in> onode_sos (automaton.trans (onp i))", "by (metis onode_sos.onode_deliver)"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS i (snd (sr s)) R), i:deliver(d), \\<sigma>',\n   NodeS i (snd (sr s')) R')\n  \\<in> onode_sos (automaton.trans (onp i))\n\ngoal (2 subgoals):\n 1. \\<And>ia R s s' \\<zeta>.\n       \\<lbrakk>(s, i:deliver(d), s')\n                \\<in> automaton.trans (pnet np \\<langle>ia; R\\<rangle>);\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>ia; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np \\<langle>ia; R\\<rangle>) TT;\n        wf_net_tree \\<langle>ia; R\\<rangle>; i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i \\<langle>ia; R\\<rangle> s\n         s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>ia; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "with \\<open>ns  = NodeS ii s R\\<close> \\<open>ns' = NodeS ii s' R'\\<close> \\<open>ii = i\\<close>"], ["proof (chain)\npicking this:\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R'\n  ii = i\n  ((\\<sigma>, NodeS i (snd (sr s)) R), i:deliver(d), \\<sigma>',\n   NodeS i (snd (sr s')) R')\n  \\<in> onode_sos (automaton.trans (onp i))", "show \"((\\<sigma>, snd (netgmap sr ns)), i:deliver(d), (\\<sigma>', snd (netgmap sr ns'))) \\<in> trans (opnet onp \\<langle>ii; R\\<^sub>i\\<rangle>)\""], ["proof (prove)\nusing this:\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R'\n  ii = i\n  ((\\<sigma>, NodeS i (snd (sr s)) R), i:deliver(d), \\<sigma>',\n   NodeS i (snd (sr s')) R')\n  \\<in> onode_sos (automaton.trans (onp i))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr ns)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr ns'))\n    \\<in> automaton.trans (opnet onp \\<langle>ii; R\\<^sub>i\\<rangle>)", "by (simp add: onode_comps)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr ns)), i:deliver(d), \\<sigma>',\n   snd (netgmap sr ns'))\n  \\<in> automaton.trans (opnet onp \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "fix n1 n2 s s' \\<zeta>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "assume IH1: \"\\<And>s s' \\<zeta>. (s, i:deliver(d), s') \\<in> trans (pnet np n1)\n                    \\<Longrightarrow> netgmap sr s = netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>)\n                    \\<Longrightarrow> netgmap sr s' = netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s'))\n                    \\<Longrightarrow> s \\<in> reachable (pnet np n1) TT\n                    \\<Longrightarrow> wf_net_tree n1\n                    \\<Longrightarrow> i\\<in>net_ips s\n                    \\<Longrightarrow> net_ip_action np (i:deliver(d)) i n1 s s'\n                    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), (\\<sigma>', snd (netgmap sr s'))) \\<in> trans (opnet onp n1)\"\n         and IH2: \"\\<And>s s' \\<zeta>. (s, i:deliver(d), s') \\<in> trans (pnet np n2)\n                    \\<Longrightarrow> netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>)\n                    \\<Longrightarrow> netgmap sr s' = netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'))\n                    \\<Longrightarrow> s \\<in> reachable (pnet np n2) TT\n                    \\<Longrightarrow> wf_net_tree n2\n                    \\<Longrightarrow> i\\<in>net_ips s\n                    \\<Longrightarrow> net_ip_action np (i:deliver(d)) i n2 s s'\n                    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), (\\<sigma>', snd (netgmap sr s'))) \\<in> trans (opnet onp n2)\"\n         and tr: \"(s, i:deliver(d), s') \\<in> trans (pnet np (n1 \\<parallel> n2))\"\n         and sr: \"s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\"\n         and nm: \"netgmap sr s = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\"\n         and nm': \"netgmap sr s' = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>', snd (netgmap sr s'))\"\n         and \"wf_net_tree (n1 \\<parallel> n2)\"\n         and \"i\\<in>net_ips s\"\n         and \"net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\""], ["proof (state)\nthis:\n  \\<lbrakk>(?s, i:deliver(d), ?s') \\<in> automaton.trans (pnet np n1);\n   netgmap sr ?s = netmask (net_tree_ips n1) (\\<sigma>, ?\\<zeta>);\n   netgmap sr ?s' =\n   netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr ?s'));\n   ?s \\<in> reachable (pnet np n1) TT; wf_net_tree n1; i \\<in> net_ips ?s;\n   net_ip_action np (i:deliver(d)) i n1 ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr ?s)), i:deliver(d),\n                     \\<sigma>', snd (netgmap sr ?s'))\n                    \\<in> automaton.trans (opnet onp n1)\n  \\<lbrakk>(?s, i:deliver(d), ?s') \\<in> automaton.trans (pnet np n2);\n   netgmap sr ?s = netmask (net_tree_ips n2) (\\<sigma>, ?\\<zeta>);\n   netgmap sr ?s' =\n   netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr ?s'));\n   ?s \\<in> reachable (pnet np n2) TT; wf_net_tree n2; i \\<in> net_ips ?s;\n   net_ip_action np (i:deliver(d)) i n2 ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr ?s)), i:deliver(d),\n                     \\<sigma>', snd (netgmap sr ?s'))\n                    \\<in> automaton.trans (opnet onp n2)\n  (s, i:deliver(d), s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\n  s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n  netgmap sr s =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  netgmap sr s' =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr s'))\n  wf_net_tree (n1 \\<parallel> n2)\n  i \\<in> net_ips s\n  net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from tr"], ["proof (chain)\npicking this:\n  (s, i:deliver(d), s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))", "have \"(s, i:deliver(d), s') \\<in> pnet_sos (trans (pnet np n1)) (trans (pnet np n2))\""], ["proof (prove)\nusing this:\n  (s, i:deliver(d), s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\n\ngoal (1 subgoal):\n 1. (s, i:deliver(d), s')\n    \\<in> pnet_sos (automaton.trans (pnet np n1))\n           (automaton.trans (pnet np n2))", "by simp"], ["proof (state)\nthis:\n  (s, i:deliver(d), s')\n  \\<in> pnet_sos (automaton.trans (pnet np n1))\n         (automaton.trans (pnet np n2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "then"], ["proof (chain)\npicking this:\n  (s, i:deliver(d), s')\n  \\<in> pnet_sos (automaton.trans (pnet np n1))\n         (automaton.trans (pnet np n2))", "obtain s1 s1' s2 s2' where \"s = SubnetS s1 s2\"\n                                  and \"s' = SubnetS s1' s2'\""], ["proof (prove)\nusing this:\n  (s, i:deliver(d), s')\n  \\<in> pnet_sos (automaton.trans (pnet np n1))\n         (automaton.trans (pnet np n2))\n\ngoal (1 subgoal):\n 1. (\\<And>s1 s2 s1' s2'.\n        \\<lbrakk>s = SubnetS s1 s2; s' = SubnetS s1' s2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule partial_deliverTE) auto"], ["proof (state)\nthis:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from this(1) and nm"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  netgmap sr s =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)", "have \"netgmap sr (SubnetS s1 s2) = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\""], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  netgmap sr s =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. netgmap sr (SubnetS s1 s2) =\n    netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)", "by simp"], ["proof (state)\nthis:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>s' = SubnetS s1' s2'\\<close> and nm'"], ["proof (chain)\npicking this:\n  s' = SubnetS s1' s2'\n  netgmap sr s' =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr s'))", "have \"netgmap sr (SubnetS s1' s2') = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>', snd (netgmap sr s'))\""], ["proof (prove)\nusing this:\n  s' = SubnetS s1' s2'\n  netgmap sr s' =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. netgmap sr (SubnetS s1' s2') =\n    netmask (net_tree_ips (n1 \\<parallel> n2))\n     (\\<sigma>', snd (netgmap sr s'))", "by simp"], ["proof (state)\nthis:\n  netgmap sr (SubnetS s1' s2') =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>wf_net_tree (n1 \\<parallel> n2)\\<close>"], ["proof (chain)\npicking this:\n  wf_net_tree (n1 \\<parallel> n2)", "have \"wf_net_tree n1\"\n                                    and \"wf_net_tree n2\"\n                                    and \"net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\""], ["proof (prove)\nusing this:\n  wf_net_tree (n1 \\<parallel> n2)\n\ngoal (1 subgoal):\n 1. wf_net_tree n1 &&&\n    wf_net_tree n2 &&& net_tree_ips n1 \\<inter> net_tree_ips n2 = {}", "by auto"], ["proof (state)\nthis:\n  wf_net_tree n1\n  wf_net_tree n2\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from sr [simplified \\<open>s = SubnetS s1 s2\\<close>]"], ["proof (chain)\npicking this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT", "have \"s1 \\<in> reachable (pnet np n1) TT\""], ["proof (prove)\nusing this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n\ngoal (1 subgoal):\n 1. s1 \\<in> reachable (pnet np n1) TT", "by (rule subnet_reachable(1))"], ["proof (state)\nthis:\n  s1 \\<in> reachable (pnet np n1) TT\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "hence \"net_ips s1 = net_tree_ips n1\""], ["proof (prove)\nusing this:\n  s1 \\<in> reachable (pnet np n1) TT\n\ngoal (1 subgoal):\n 1. net_ips s1 = net_tree_ips n1", "by (rule pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  net_ips s1 = net_tree_ips n1\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from sr [simplified \\<open>s = SubnetS s1 s2\\<close>]"], ["proof (chain)\npicking this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT", "have \"s2 \\<in> reachable (pnet np n2) TT\""], ["proof (prove)\nusing this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n\ngoal (1 subgoal):\n 1. s2 \\<in> reachable (pnet np n2) TT", "by (rule subnet_reachable(2))"], ["proof (state)\nthis:\n  s2 \\<in> reachable (pnet np n2) TT\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "hence \"net_ips s2 = net_tree_ips n2\""], ["proof (prove)\nusing this:\n  s2 \\<in> reachable (pnet np n2) TT\n\ngoal (1 subgoal):\n 1. net_ips s2 = net_tree_ips n2", "by (rule pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from nm [simplified \\<open>s = SubnetS s1 s2\\<close>]\n           \\<open>net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\\<close>\n           \\<open>net_ips s1 = net_tree_ips n1\\<close>\n           \\<open>net_ips s2 = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2", "have \"netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s1 =\n    netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))", "by (rule netgmap_subnet_split1)"], ["proof (state)\nthis:\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from nm [simplified \\<open>s = SubnetS s1 s2\\<close>]\n           \\<open>net_ips s1 = net_tree_ips n1\\<close>\n           \\<open>net_ips s2 = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2", "have \"netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s2 =\n    netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))", "by (rule netgmap_subnet_split2)"], ["proof (state)\nthis:\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>i\\<in>net_ips s\\<close> and \\<open>s = SubnetS s1 s2\\<close>"], ["proof (chain)\npicking this:\n  i \\<in> net_ips s\n  s = SubnetS s1 s2", "have \"i\\<in>net_ips s1 \\<or> i\\<in>net_ips s2\""], ["proof (prove)\nusing this:\n  i \\<in> net_ips s\n  s = SubnetS s1 s2\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s1 \\<or> i \\<in> net_ips s2", "by auto"], ["proof (state)\nthis:\n  i \\<in> net_ips s1 \\<or> i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta>.\n       \\<lbrakk>\\<And>s s' \\<zeta>.\n                   \\<lbrakk>(s, i:deliver(d), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    s \\<in> reachable (pnet np n1) TT; wf_net_tree n1;\n                    i \\<in> net_ips s;\n                    net_ip_action np (i:deliver(d)) i n1 s s'\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\ni:deliver(d), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta>.\n           \\<lbrakk>(s, i:deliver(d), s')\n                    \\<in> automaton.trans (pnet np n2);\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            s \\<in> reachable (pnet np n2) TT; wf_net_tree n2;\n            i \\<in> net_ips s;\n            net_ip_action np (i:deliver(d)) i n2 s s'\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, i:deliver(d), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        wf_net_tree (n1 \\<parallel> n2); i \\<in> net_ips s;\n        net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), i:deliver(d),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "thus \"((\\<sigma>, snd (netgmap sr s)), i:deliver(d), (\\<sigma>', snd (netgmap sr s'))) \\<in> trans (opnet onp (n1 \\<parallel> n2))\""], ["proof (prove)\nusing this:\n  i \\<in> net_ips s1 \\<or> i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> net_ips s1 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n 2. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "assume \"i\\<in>net_ips s1\""], ["proof (state)\nthis:\n  i \\<in> net_ips s1\n\ngoal (2 subgoals):\n 1. i \\<in> net_ips s1 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n 2. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "with \\<open>s = SubnetS s1 s2\\<close> \\<open>s' = SubnetS s1' s2'\\<close> \\<open>net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<close>"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\n  i \\<in> net_ips s1", "have \"(s1, i:deliver(d), s1') \\<in> trans (pnet np n1)\"\n           and \"net_ip_action np (i:deliver(d)) i n1 s1 s1'\"\n           and \"s2' = s2\""], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\n  i \\<in> net_ips s1\n\ngoal (1 subgoal):\n 1. (s1, i:deliver(d), s1') \\<in> automaton.trans (pnet np n1) &&&\n    net_ip_action np (i:deliver(d)) i n1 s1 s1' &&& s2' = s2", "by simp_all"], ["proof (state)\nthis:\n  (s1, i:deliver(d), s1') \\<in> automaton.trans (pnet np n1)\n  net_ip_action np (i:deliver(d)) i n1 s1 s1'\n  s2' = s2\n\ngoal (2 subgoals):\n 1. i \\<in> net_ips s1 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n 2. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "from \\<open>net_ips s1 = net_tree_ips n1\\<close> and \\<open>(s1, i:deliver(d), s1') \\<in> trans (pnet np n1)\\<close>"], ["proof (chain)\npicking this:\n  net_ips s1 = net_tree_ips n1\n  (s1, i:deliver(d), s1') \\<in> automaton.trans (pnet np n1)", "have \"net_ips s1' = net_tree_ips n1\""], ["proof (prove)\nusing this:\n  net_ips s1 = net_tree_ips n1\n  (s1, i:deliver(d), s1') \\<in> automaton.trans (pnet np n1)\n\ngoal (1 subgoal):\n 1. net_ips s1' = net_tree_ips n1", "by (metis pnet_maintains_dom)"], ["proof (state)\nthis:\n  net_ips s1' = net_tree_ips n1\n\ngoal (2 subgoals):\n 1. i \\<in> net_ips s1 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n 2. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "from nm' [simplified \\<open>s' = SubnetS s1' s2'\\<close> \\<open>s2' = s2\\<close>]\n                        \\<open>net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\\<close>\n                        \\<open>net_ips s1' = net_tree_ips n1\\<close>\n                        \\<open>net_ips s2 = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr (SubnetS s1' s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr (SubnetS s1' s2)))\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  net_ips s1' = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2", "have \"netgmap sr s1' = netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1' s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr (SubnetS s1' s2)))\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  net_ips s1' = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s1' =\n    netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))", "by (rule netgmap_subnet_split1)"], ["proof (state)\nthis:\n  netgmap sr s1' =\n  netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\n\ngoal (2 subgoals):\n 1. i \\<in> net_ips s1 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n 2. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "from \\<open>(s1, i:deliver(d), s1') \\<in> trans (pnet np n1)\\<close>\n             \\<open>netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\\<close>\n             \\<open>netgmap sr s1' = netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\\<close>\n             \\<open>s1 \\<in> reachable (pnet np n1) TT\\<close>\n             \\<open>wf_net_tree n1\\<close>\n             \\<open>i\\<in>net_ips s1\\<close>\n             \\<open>net_ip_action np (i:deliver(d)) i n1 s1 s1'\\<close>"], ["proof (chain)\npicking this:\n  (s1, i:deliver(d), s1') \\<in> automaton.trans (pnet np n1)\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n  netgmap sr s1' =\n  netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\n  s1 \\<in> reachable (pnet np n1) TT\n  wf_net_tree n1\n  i \\<in> net_ips s1\n  net_ip_action np (i:deliver(d)) i n1 s1 s1'", "have \"((\\<sigma>, snd (netgmap sr s1)), i:deliver(d), (\\<sigma>', snd (netgmap sr s1'))) \\<in> trans (opnet onp n1)\""], ["proof (prove)\nusing this:\n  (s1, i:deliver(d), s1') \\<in> automaton.trans (pnet np n1)\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n  netgmap sr s1' =\n  netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\n  s1 \\<in> reachable (pnet np n1) TT\n  wf_net_tree n1\n  i \\<in> net_ips s1\n  net_ip_action np (i:deliver(d)) i n1 s1 s1'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s1)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s1'))\n    \\<in> automaton.trans (opnet onp n1)", "by (rule IH1)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s1)), i:deliver(d), \\<sigma>',\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n\ngoal (2 subgoals):\n 1. i \\<in> net_ips s1 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n 2. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "with \\<open>s = SubnetS s1 s2\\<close> \\<open>s' = SubnetS s1' s2'\\<close> \\<open>s2' = s2\\<close>"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  s2' = s2\n  ((\\<sigma>, snd (netgmap sr s1)), i:deliver(d), \\<sigma>',\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)", "show ?thesis"], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  s2' = s2\n  ((\\<sigma>, snd (netgmap sr s1)), i:deliver(d), \\<sigma>',\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "by simp (erule opnet_deliver1)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "assume \"i\\<in>net_ips s2\""], ["proof (state)\nthis:\n  i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "with \\<open>s = SubnetS s1 s2\\<close> \\<open>s' = SubnetS s1' s2'\\<close> \\<open>net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\\<close>"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\n  i \\<in> net_ips s2", "have \"(s2, i:deliver(d), s2') \\<in> trans (pnet np n2)\"\n           and \"net_ip_action np (i:deliver(d)) i n2 s2 s2'\"\n           and \"s1' = s1\""], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  net_ip_action np (i:deliver(d)) i (n1 \\<parallel> n2) s s'\n  i \\<in> net_ips s2\n\ngoal (1 subgoal):\n 1. (s2, i:deliver(d), s2') \\<in> automaton.trans (pnet np n2) &&&\n    net_ip_action np (i:deliver(d)) i n2 s2 s2' &&& s1' = s1", "by simp_all"], ["proof (state)\nthis:\n  (s2, i:deliver(d), s2') \\<in> automaton.trans (pnet np n2)\n  net_ip_action np (i:deliver(d)) i n2 s2 s2'\n  s1' = s1\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "from \\<open>net_ips s2 = net_tree_ips n2\\<close> and \\<open>(s2, i:deliver(d), s2') \\<in> trans (pnet np n2)\\<close>"], ["proof (chain)\npicking this:\n  net_ips s2 = net_tree_ips n2\n  (s2, i:deliver(d), s2') \\<in> automaton.trans (pnet np n2)", "have \"net_ips s2' = net_tree_ips n2\""], ["proof (prove)\nusing this:\n  net_ips s2 = net_tree_ips n2\n  (s2, i:deliver(d), s2') \\<in> automaton.trans (pnet np n2)\n\ngoal (1 subgoal):\n 1. net_ips s2' = net_tree_ips n2", "by (metis pnet_maintains_dom)"], ["proof (state)\nthis:\n  net_ips s2' = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "from nm' [simplified \\<open>s' = SubnetS s1' s2'\\<close> \\<open>s1' = s1\\<close>]\n                        \\<open>net_ips s1 = net_tree_ips n1\\<close>\n                        \\<open>net_ips s2' = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr (SubnetS s1 s2') =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr (SubnetS s1 s2')))\n  net_ips s1 = net_tree_ips n1\n  net_ips s2' = net_tree_ips n2", "have \"netgmap sr s2' = netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1 s2') =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr (SubnetS s1 s2')))\n  net_ips s1 = net_tree_ips n1\n  net_ips s2' = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s2' =\n    netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))", "by (rule netgmap_subnet_split2)"], ["proof (state)\nthis:\n  netgmap sr s2' =\n  netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "from \\<open>(s2, i:deliver(d), s2') \\<in> trans (pnet np n2)\\<close>\n             \\<open>netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\\<close>\n             \\<open>netgmap sr s2' = netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\\<close>\n             \\<open>s2 \\<in> reachable (pnet np n2) TT\\<close>\n             \\<open>wf_net_tree n2\\<close>\n             \\<open>i\\<in>net_ips s2\\<close>\n             \\<open>net_ip_action np (i:deliver(d)) i n2 s2 s2'\\<close>"], ["proof (chain)\npicking this:\n  (s2, i:deliver(d), s2') \\<in> automaton.trans (pnet np n2)\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n  netgmap sr s2' =\n  netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\n  s2 \\<in> reachable (pnet np n2) TT\n  wf_net_tree n2\n  i \\<in> net_ips s2\n  net_ip_action np (i:deliver(d)) i n2 s2 s2'", "have \"((\\<sigma>, snd (netgmap sr s2)), i:deliver(d), (\\<sigma>', snd (netgmap sr s2'))) \\<in> trans (opnet onp n2)\""], ["proof (prove)\nusing this:\n  (s2, i:deliver(d), s2') \\<in> automaton.trans (pnet np n2)\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n  netgmap sr s2' =\n  netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\n  s2 \\<in> reachable (pnet np n2) TT\n  wf_net_tree n2\n  i \\<in> net_ips s2\n  net_ip_action np (i:deliver(d)) i n2 s2 s2'\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s2)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s2'))\n    \\<in> automaton.trans (opnet onp n2)", "by (rule IH2)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s2)), i:deliver(d), \\<sigma>',\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s2 \\<Longrightarrow>\n    ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "with \\<open>s = SubnetS s1 s2\\<close> \\<open>s' = SubnetS s1' s2'\\<close> \\<open>s1' = s1\\<close>"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  s1' = s1\n  ((\\<sigma>, snd (netgmap sr s2)), i:deliver(d), \\<sigma>',\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)", "show ?thesis"], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  s1' = s1\n  ((\\<sigma>, snd (netgmap sr s2)), i:deliver(d), \\<sigma>',\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "by simp (erule opnet_deliver2)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "with \\<open>\\<zeta> = snd (netgmap sr s)\\<close>"], ["proof (chain)\npicking this:\n  \\<zeta> = snd (netgmap sr s)\n  ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)", "have \"((\\<sigma>, \\<zeta>), i:deliver(d), (\\<sigma>', snd (netgmap sr s'))) \\<in> trans (opnet onp n)\""], ["proof (prove)\nusing this:\n  \\<zeta> = snd (netgmap sr s)\n  ((\\<sigma>, snd (netgmap sr s)), i:deliver(d), \\<sigma>',\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp n)", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "moreover"], ["proof (state)\nthis:\n  ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from \\<open>\\<forall>j. j\\<noteq>i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<close> \\<open>i \\<in> net_ips s\\<close> \\<open>\\<zeta> = snd (netgmap sr s)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n  i \\<in> net_ips s\n  \\<zeta> = snd (netgmap sr s)", "have \"\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  \\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n  i \\<in> net_ips s\n  \\<zeta> = snd (netgmap sr s)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "by (metis net_ips_netgmap)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "ultimately"], ["proof (chain)\npicking this:\n  ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "have \"((\\<sigma>, \\<zeta>), i:deliver(d), (\\<sigma>', snd (netgmap sr s'))) \\<in> trans (opnet onp n)\n                     \\<and> (\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j)\n                     \\<and> netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp n) \\<and>\n    (\\<forall>j.\n        j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n        \\<sigma>' j = \\<sigma> j) \\<and>\n    netgmap sr s' =\n    netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))", "using \\<open>netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp n) \\<and>\n    (\\<forall>j.\n        j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n        \\<sigma>' j = \\<sigma> j) \\<and>\n    netgmap sr s' =\n    netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n) \\<and>\n  (\\<forall>j.\n      j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n      \\<sigma>' j = \\<sigma> j) \\<and>\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "thus \"\\<exists>\\<sigma>' \\<zeta>'. ((\\<sigma>, \\<zeta>), i:deliver(d), (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\n                  \\<and> (\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j)\n                  \\<and> netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n) \\<and>\n  (\\<forall>j.\n      j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n      \\<sigma>' j = \\<sigma> j) \\<and>\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<zeta>'.\n     ((\\<sigma>, \\<zeta>), i:deliver(d), \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet onp n) \\<and>\n     (\\<forall>j.\n         j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n         \\<sigma>' j = \\<sigma> j) \\<and>\n     netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transfer_arrive':\n  assumes \"(s, H\\<not>K:arrive(m), s') \\<in> trans (pnet np n)\"\n      and \"s \\<in> reachable (pnet np n) TT\"\n      and \"netgmap sr s  = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\"\n      and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\"\n      and \"wf_net_tree n\"\n  shows \"((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n    \\<in> automaton.trans (opnet onp n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n    \\<in> automaton.trans (opnet onp n)", "from assms(2)"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np n) TT", "have \"net_ips s = net_tree_ips n\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np n) TT\n\ngoal (1 subgoal):\n 1. net_ips s = net_tree_ips n", ".."], ["proof (state)\nthis:\n  net_ips s = net_tree_ips n\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n    \\<in> automaton.trans (opnet onp n)", "with assms(1)"], ["proof (chain)\npicking this:\n  (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n)\n  net_ips s = net_tree_ips n", "have \"net_ips s' = net_tree_ips n\""], ["proof (prove)\nusing this:\n  (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n)\n  net_ips s = net_tree_ips n\n\ngoal (1 subgoal):\n 1. net_ips s' = net_tree_ips n", "by (metis pnet_maintains_dom)"], ["proof (state)\nthis:\n  net_ips s' = net_tree_ips n\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n    \\<in> automaton.trans (opnet onp n)", "from \\<open>netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)", "have \"\\<zeta> = snd (netgmap sr s)\""], ["proof (prove)\nusing this:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. \\<zeta> = snd (netgmap sr s)", "by simp"], ["proof (state)\nthis:\n  \\<zeta> = snd (netgmap sr s)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n    \\<in> automaton.trans (opnet onp n)", "from \\<open>netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "have \"\\<zeta>' = snd (netgmap sr s')\"\n       and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\""], ["proof (prove)\nusing this:\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n\ngoal (1 subgoal):\n 1. \\<zeta>' = snd (netgmap sr s') &&&\n    netgmap sr s' =\n    netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))", "by simp_all"], ["proof (state)\nthis:\n  \\<zeta>' = snd (netgmap sr s')\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n    \\<in> automaton.trans (opnet onp n)", "from assms(1-3) \\<open>netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\\<close> assms(5)"], ["proof (chain)\npicking this:\n  (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n)\n  s \\<in> reachable (pnet np n) TT\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n  wf_net_tree n", "have \"((\\<sigma>, snd (netgmap sr s)), H\\<not>K:arrive(m), (\\<sigma>', snd (netgmap sr s'))) \\<in> trans (opnet onp n)\""], ["proof (prove)\nusing this:\n  (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n)\n  s \\<in> reachable (pnet np n) TT\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n  wf_net_tree n\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), H\\<not>K:arrive(m), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp n)", "proof (induction n arbitrary: s s' \\<zeta> H K)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R s s' \\<zeta> H K.\n       \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree \\<langle>i; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta> H K.\n       \\<lbrakk>\\<And>s s' \\<zeta> H K.\n                   \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nH\\<not>K:arrive(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> H K.\n           \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              H\\<not>K:arrive(m), \\<sigma>',\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, H\\<not>K:arrive(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "fix ii R\\<^sub>i ns ns' \\<zeta> H K"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R s s' \\<zeta> H K.\n       \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree \\<langle>i; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta> H K.\n       \\<lbrakk>\\<And>s s' \\<zeta> H K.\n                   \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nH\\<not>K:arrive(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> H K.\n           \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              H\\<not>K:arrive(m), \\<sigma>',\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, H\\<not>K:arrive(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "assume \"(ns, H\\<not>K:arrive(m), ns') \\<in> trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\"\n           and nsr: \"ns \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\"\n           and \"netgmap sr ns = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\"\n           and \"netgmap sr ns' = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>', snd (netgmap sr ns'))\""], ["proof (state)\nthis:\n  (ns, H\\<not>K:arrive(m), ns')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n  ns \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n  netgmap sr ns' =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n   (\\<sigma>', snd (netgmap sr ns'))\n\ngoal (2 subgoals):\n 1. \\<And>i R s s' \\<zeta> H K.\n       \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree \\<langle>i; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta> H K.\n       \\<lbrakk>\\<And>s s' \\<zeta> H K.\n                   \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nH\\<not>K:arrive(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> H K.\n           \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              H\\<not>K:arrive(m), \\<sigma>',\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, H\\<not>K:arrive(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from this(1)"], ["proof (chain)\npicking this:\n  (ns, H\\<not>K:arrive(m), ns')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)", "have \"(ns, H\\<not>K:arrive(m), ns') \\<in> node_sos (trans (np ii))\""], ["proof (prove)\nusing this:\n  (ns, H\\<not>K:arrive(m), ns')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (1 subgoal):\n 1. (ns, H\\<not>K:arrive(m), ns') \\<in> node_sos (automaton.trans (np ii))", "by (simp add: node_comps)"], ["proof (state)\nthis:\n  (ns, H\\<not>K:arrive(m), ns') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>i R s s' \\<zeta> H K.\n       \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree \\<langle>i; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta> H K.\n       \\<lbrakk>\\<And>s s' \\<zeta> H K.\n                   \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nH\\<not>K:arrive(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> H K.\n           \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              H\\<not>K:arrive(m), \\<sigma>',\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, H\\<not>K:arrive(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "moreover"], ["proof (state)\nthis:\n  (ns, H\\<not>K:arrive(m), ns') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>i R s s' \\<zeta> H K.\n       \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree \\<langle>i; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta> H K.\n       \\<lbrakk>\\<And>s s' \\<zeta> H K.\n                   \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nH\\<not>K:arrive(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> H K.\n           \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              H\\<not>K:arrive(m), \\<sigma>',\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, H\\<not>K:arrive(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "with nsr"], ["proof (chain)\npicking this:\n  ns \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  (ns, H\\<not>K:arrive(m), ns') \\<in> node_sos (automaton.trans (np ii))", "obtain s s' R where \"ns  = NodeS ii s R\"\n                                          and \"ns' = NodeS ii s' R\""], ["proof (prove)\nusing this:\n  ns \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  (ns, H\\<not>K:arrive(m), ns') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (1 subgoal):\n 1. (\\<And>s R s'.\n        \\<lbrakk>ns = NodeS ii s R; ns' = NodeS ii s' R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis net_node_reachable_is_node node_arriveTE')"], ["proof (state)\nthis:\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R\n\ngoal (2 subgoals):\n 1. \\<And>i R s s' \\<zeta> H K.\n       \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree \\<langle>i; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta> H K.\n       \\<lbrakk>\\<And>s s' \\<zeta> H K.\n                   \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nH\\<not>K:arrive(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> H K.\n           \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              H\\<not>K:arrive(m), \\<sigma>',\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, H\\<not>K:arrive(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "ultimately"], ["proof (chain)\npicking this:\n  (ns, H\\<not>K:arrive(m), ns') \\<in> node_sos (automaton.trans (np ii))\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R", "have \"(NodeS ii s R, H\\<not>K:arrive(m), NodeS ii s' R) \\<in> node_sos (trans (np ii))\""], ["proof (prove)\nusing this:\n  (ns, H\\<not>K:arrive(m), ns') \\<in> node_sos (automaton.trans (np ii))\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R\n\ngoal (1 subgoal):\n 1. (NodeS ii s R, H\\<not>K:arrive(m), NodeS ii s' R)\n    \\<in> node_sos (automaton.trans (np ii))", "by simp"], ["proof (state)\nthis:\n  (NodeS ii s R, H\\<not>K:arrive(m), NodeS ii s' R)\n  \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>i R s s' \\<zeta> H K.\n       \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree \\<langle>i; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta> H K.\n       \\<lbrakk>\\<And>s s' \\<zeta> H K.\n                   \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nH\\<not>K:arrive(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> H K.\n           \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              H\\<not>K:arrive(m), \\<sigma>',\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, H\\<not>K:arrive(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from this(1)"], ["proof (chain)\npicking this:\n  (NodeS ii s R, H\\<not>K:arrive(m), NodeS ii s' R)\n  \\<in> node_sos (automaton.trans (np ii))", "have \"((\\<sigma>, NodeS ii (snd (sr s)) R), H\\<not>K:arrive(m), (\\<sigma>', NodeS ii (snd (sr s')) R))\n                                                                      \\<in> onode_sos (trans (onp ii))\""], ["proof (prove)\nusing this:\n  (NodeS ii s R, H\\<not>K:arrive(m), NodeS ii s' R)\n  \\<in> node_sos (automaton.trans (np ii))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS ii (snd (sr s)) R), H\\<not>K:arrive(m), \\<sigma>',\n     NodeS ii (snd (sr s')) R)\n    \\<in> onode_sos (automaton.trans (onp ii))", "proof (rule node_arriveTE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(s, receive m, s') \\<in> automaton.trans (np ii); H = {ii};\n     K = {}\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R),\n                       H\\<not>K:arrive(m), \\<sigma>',\n                       NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))\n 2. \\<lbrakk>s' = s; H = {}; K = {ii}\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R),\n                       H\\<not>K:arrive(m), \\<sigma>',\n                       NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))", "assume \"(s, receive m, s') \\<in> trans (np ii)\"\n             and \"H = {ii}\"\n             and \"K = {}\""], ["proof (state)\nthis:\n  (s, receive m, s') \\<in> automaton.trans (np ii)\n  H = {ii}\n  K = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(s, receive m, s') \\<in> automaton.trans (np ii); H = {ii};\n     K = {}\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R),\n                       H\\<not>K:arrive(m), \\<sigma>',\n                       NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))\n 2. \\<lbrakk>s' = s; H = {}; K = {ii}\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R),\n                       H\\<not>K:arrive(m), \\<sigma>',\n                       NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))", "from \\<open>netgmap sr ns = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\\<close> and \\<open>ns  = NodeS ii s R\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n  ns = NodeS ii s R", "have \"\\<sigma> ii = fst (sr s)\""], ["proof (prove)\nusing this:\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n  ns = NodeS ii s R\n\ngoal (1 subgoal):\n 1. \\<sigma> ii = fst (sr s)", "by simp (metis map_upd_Some_unfold)"], ["proof (state)\nthis:\n  \\<sigma> ii = fst (sr s)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(s, receive m, s') \\<in> automaton.trans (np ii); H = {ii};\n     K = {}\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R),\n                       H\\<not>K:arrive(m), \\<sigma>',\n                       NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))\n 2. \\<lbrakk>s' = s; H = {}; K = {ii}\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R),\n                       H\\<not>K:arrive(m), \\<sigma>',\n                       NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))", "moreover"], ["proof (state)\nthis:\n  \\<sigma> ii = fst (sr s)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(s, receive m, s') \\<in> automaton.trans (np ii); H = {ii};\n     K = {}\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R),\n                       H\\<not>K:arrive(m), \\<sigma>',\n                       NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))\n 2. \\<lbrakk>s' = s; H = {}; K = {ii}\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R),\n                       H\\<not>K:arrive(m), \\<sigma>',\n                       NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))", "from \\<open>netgmap sr ns' = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>', snd (netgmap sr ns'))\\<close>\n                        and \\<open>ns' = NodeS ii s' R\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr ns' =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n   (\\<sigma>', snd (netgmap sr ns'))\n  ns' = NodeS ii s' R", "have \"\\<sigma>' ii = fst (sr s')\""], ["proof (prove)\nusing this:\n  netgmap sr ns' =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n   (\\<sigma>', snd (netgmap sr ns'))\n  ns' = NodeS ii s' R\n\ngoal (1 subgoal):\n 1. \\<sigma>' ii = fst (sr s')", "by simp (metis map_upd_Some_unfold)"], ["proof (state)\nthis:\n  \\<sigma>' ii = fst (sr s')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(s, receive m, s') \\<in> automaton.trans (np ii); H = {ii};\n     K = {}\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R),\n                       H\\<not>K:arrive(m), \\<sigma>',\n                       NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))\n 2. \\<lbrakk>s' = s; H = {}; K = {ii}\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R),\n                       H\\<not>K:arrive(m), \\<sigma>',\n                       NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))", "ultimately"], ["proof (chain)\npicking this:\n  \\<sigma> ii = fst (sr s)\n  \\<sigma>' ii = fst (sr s')", "have \"((\\<sigma>, snd (sr s)), receive m, (\\<sigma>', snd (sr s'))) \\<in> trans (onp ii)\""], ["proof (prove)\nusing this:\n  \\<sigma> ii = fst (sr s)\n  \\<sigma>' ii = fst (sr s')\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (sr s)), receive m, \\<sigma>', snd (sr s'))\n    \\<in> automaton.trans (onp ii)", "using \\<open>(s, receive m, s') \\<in> trans (np ii)\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma> ii = fst (sr s)\n  \\<sigma>' ii = fst (sr s')\n  (s, receive m, s') \\<in> automaton.trans (np ii)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (sr s)), receive m, \\<sigma>', snd (sr s'))\n    \\<in> automaton.trans (onp ii)", "by (rule trans)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (sr s)), receive m, \\<sigma>', snd (sr s'))\n  \\<in> automaton.trans (onp ii)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(s, receive m, s') \\<in> automaton.trans (np ii); H = {ii};\n     K = {}\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R),\n                       H\\<not>K:arrive(m), \\<sigma>',\n                       NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))\n 2. \\<lbrakk>s' = s; H = {}; K = {ii}\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R),\n                       H\\<not>K:arrive(m), \\<sigma>',\n                       NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))", "hence \"((\\<sigma>, NodeS ii (snd (sr s)) R), {ii}\\<not>{}:arrive(m), (\\<sigma>', NodeS ii (snd (sr s')) R))\n                                                                      \\<in> onode_sos (trans (onp ii))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, snd (sr s)), receive m, \\<sigma>', snd (sr s'))\n  \\<in> automaton.trans (onp ii)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS ii (snd (sr s)) R), {ii}\\<not>{}:arrive(m), \\<sigma>',\n     NodeS ii (snd (sr s')) R)\n    \\<in> onode_sos (automaton.trans (onp ii))", "by (rule onode_receive)"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), {ii}\\<not>{}:arrive(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(s, receive m, s') \\<in> automaton.trans (np ii); H = {ii};\n     K = {}\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R),\n                       H\\<not>K:arrive(m), \\<sigma>',\n                       NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))\n 2. \\<lbrakk>s' = s; H = {}; K = {ii}\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R),\n                       H\\<not>K:arrive(m), \\<sigma>',\n                       NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))", "with \\<open>H={ii}\\<close> and \\<open>K={}\\<close>"], ["proof (chain)\npicking this:\n  H = {ii}\n  K = {}\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), {ii}\\<not>{}:arrive(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))", "show \"((\\<sigma>, NodeS ii (snd (sr s)) R), H\\<not>K:arrive(m), (\\<sigma>', NodeS ii (snd (sr s')) R))\n                                                                      \\<in> onode_sos (trans (onp ii))\""], ["proof (prove)\nusing this:\n  H = {ii}\n  K = {}\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), {ii}\\<not>{}:arrive(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS ii (snd (sr s)) R), H\\<not>K:arrive(m), \\<sigma>',\n     NodeS ii (snd (sr s')) R)\n    \\<in> onode_sos (automaton.trans (onp ii))", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), H\\<not>K:arrive(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s' = s; H = {}; K = {ii}\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R),\n                       H\\<not>K:arrive(m), \\<sigma>',\n                       NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>s' = s; H = {}; K = {ii}\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R),\n                       H\\<not>K:arrive(m), \\<sigma>',\n                       NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))", "assume \"H = {}\"\n             and \"s' = s\"\n             and \"K = {ii}\""], ["proof (state)\nthis:\n  H = {}\n  s' = s\n  K = {ii}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s' = s; H = {}; K = {ii}\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R),\n                       H\\<not>K:arrive(m), \\<sigma>',\n                       NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))", "from \\<open>s' = s\\<close> \\<open>netgmap sr ns' = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>', snd (netgmap sr ns'))\\<close>\n                        \\<open>netgmap sr ns = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\\<close>\n                        \\<open>ns = NodeS ii s R\\<close> and \\<open>ns' = NodeS ii s' R\\<close>"], ["proof (chain)\npicking this:\n  s' = s\n  netgmap sr ns' =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n   (\\<sigma>', snd (netgmap sr ns'))\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R", "have \"\\<sigma>' ii = \\<sigma> ii\""], ["proof (prove)\nusing this:\n  s' = s\n  netgmap sr ns' =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n   (\\<sigma>', snd (netgmap sr ns'))\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R\n\ngoal (1 subgoal):\n 1. \\<sigma>' ii = \\<sigma> ii", "by simp (metis option.sel)"], ["proof (state)\nthis:\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s' = s; H = {}; K = {ii}\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R),\n                       H\\<not>K:arrive(m), \\<sigma>',\n                       NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))", "hence \"((\\<sigma>, NodeS ii (snd (sr s)) R), {}\\<not>{ii}:arrive(m), (\\<sigma>', NodeS ii (snd (sr s)) R))\n                                                                      \\<in> onode_sos (trans (onp ii))\""], ["proof (prove)\nusing this:\n  \\<sigma>' ii = \\<sigma> ii\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS ii (snd (sr s)) R), {}\\<not>{ii}:arrive(m), \\<sigma>',\n     NodeS ii (snd (sr s)) R)\n    \\<in> onode_sos (automaton.trans (onp ii))", "by (rule onode_arrive)"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), {}\\<not>{ii}:arrive(m), \\<sigma>',\n   NodeS ii (snd (sr s)) R)\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s' = s; H = {}; K = {ii}\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R),\n                       H\\<not>K:arrive(m), \\<sigma>',\n                       NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))", "with \\<open>H={}\\<close> \\<open>K={ii}\\<close> and \\<open>s' = s\\<close>"], ["proof (chain)\npicking this:\n  H = {}\n  K = {ii}\n  s' = s\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), {}\\<not>{ii}:arrive(m), \\<sigma>',\n   NodeS ii (snd (sr s)) R)\n  \\<in> onode_sos (automaton.trans (onp ii))", "show \"((\\<sigma>, NodeS ii (snd (sr s)) R), H\\<not>K:arrive(m), (\\<sigma>', NodeS ii (snd (sr s')) R))\n                                                                     \\<in> onode_sos (trans (onp ii))\""], ["proof (prove)\nusing this:\n  H = {}\n  K = {ii}\n  s' = s\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), {}\\<not>{ii}:arrive(m), \\<sigma>',\n   NodeS ii (snd (sr s)) R)\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS ii (snd (sr s)) R), H\\<not>K:arrive(m), \\<sigma>',\n     NodeS ii (snd (sr s')) R)\n    \\<in> onode_sos (automaton.trans (onp ii))", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), H\\<not>K:arrive(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), H\\<not>K:arrive(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (2 subgoals):\n 1. \\<And>i R s s' \\<zeta> H K.\n       \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree \\<langle>i; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta> H K.\n       \\<lbrakk>\\<And>s s' \\<zeta> H K.\n                   \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nH\\<not>K:arrive(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> H K.\n           \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              H\\<not>K:arrive(m), \\<sigma>',\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, H\\<not>K:arrive(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "with \\<open>ns = NodeS ii s R\\<close> \\<open>ns' = NodeS ii s' R\\<close>"], ["proof (chain)\npicking this:\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), H\\<not>K:arrive(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))", "show \"((\\<sigma>, snd (netgmap sr ns)), H\\<not>K:arrive(m), (\\<sigma>', snd (netgmap sr ns')))\n                                                             \\<in> trans (opnet onp \\<langle>ii; R\\<^sub>i\\<rangle>)\""], ["proof (prove)\nusing this:\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), H\\<not>K:arrive(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr ns)), H\\<not>K:arrive(m), \\<sigma>',\n     snd (netgmap sr ns'))\n    \\<in> automaton.trans (opnet onp \\<langle>ii; R\\<^sub>i\\<rangle>)", "by (simp add: onode_comps)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr ns)), H\\<not>K:arrive(m), \\<sigma>',\n   snd (netgmap sr ns'))\n  \\<in> automaton.trans (opnet onp \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> H K.\n       \\<lbrakk>\\<And>s s' \\<zeta> H K.\n                   \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nH\\<not>K:arrive(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> H K.\n           \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              H\\<not>K:arrive(m), \\<sigma>',\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, H\\<not>K:arrive(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> H K.\n       \\<lbrakk>\\<And>s s' \\<zeta> H K.\n                   \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nH\\<not>K:arrive(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> H K.\n           \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              H\\<not>K:arrive(m), \\<sigma>',\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, H\\<not>K:arrive(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "fix n1 n2 s s' \\<zeta> H K"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> H K.\n       \\<lbrakk>\\<And>s s' \\<zeta> H K.\n                   \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nH\\<not>K:arrive(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> H K.\n           \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              H\\<not>K:arrive(m), \\<sigma>',\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, H\\<not>K:arrive(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "assume IH1: \"\\<And>s s' \\<zeta> H K. (s, H\\<not>K:arrive(m), s') \\<in> trans (pnet np n1)\n                         \\<Longrightarrow> s \\<in> reachable (pnet np n1) TT\n                         \\<Longrightarrow> netgmap sr s = netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>)\n                         \\<Longrightarrow> netgmap sr s' = netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s'))\n                         \\<Longrightarrow> wf_net_tree n1\n                         \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), H\\<not>K:arrive(m), \\<sigma>', snd (netgmap sr s'))\n                                                                        \\<in> trans (opnet onp n1)\"\n        and IH2: \"\\<And>s s' \\<zeta> H K. (s, H\\<not>K:arrive(m), s') \\<in> trans (pnet np n2)\n                         \\<Longrightarrow> s \\<in> reachable (pnet np n2) TT\n                         \\<Longrightarrow> netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>)\n                         \\<Longrightarrow> netgmap sr s' = netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'))\n                         \\<Longrightarrow> wf_net_tree n2\n                         \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), H\\<not>K:arrive(m), \\<sigma>', snd (netgmap sr s'))\n                                                                        \\<in> trans (opnet onp n2)\"\n        and \"(s, H\\<not>K:arrive(m), s') \\<in> trans (pnet np (n1 \\<parallel> n2))\"\n        and sr: \"s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\"\n        and nm: \"netgmap sr s = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\"\n        and nm': \"netgmap sr s' = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>', snd (netgmap sr s'))\"\n        and \"wf_net_tree (n1 \\<parallel> n2)\""], ["proof (state)\nthis:\n  \\<lbrakk>(?s, ?H\\<not>?K:arrive(m), ?s')\n           \\<in> automaton.trans (pnet np n1);\n   ?s \\<in> reachable (pnet np n1) TT;\n   netgmap sr ?s = netmask (net_tree_ips n1) (\\<sigma>, ?\\<zeta>);\n   netgmap sr ?s' =\n   netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr ?s'));\n   wf_net_tree n1\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr ?s)), ?H\\<not>?K:arrive(m),\n                     \\<sigma>', snd (netgmap sr ?s'))\n                    \\<in> automaton.trans (opnet onp n1)\n  \\<lbrakk>(?s, ?H\\<not>?K:arrive(m), ?s')\n           \\<in> automaton.trans (pnet np n2);\n   ?s \\<in> reachable (pnet np n2) TT;\n   netgmap sr ?s = netmask (net_tree_ips n2) (\\<sigma>, ?\\<zeta>);\n   netgmap sr ?s' =\n   netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr ?s'));\n   wf_net_tree n2\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr ?s)), ?H\\<not>?K:arrive(m),\n                     \\<sigma>', snd (netgmap sr ?s'))\n                    \\<in> automaton.trans (opnet onp n2)\n  (s, H\\<not>K:arrive(m), s')\n  \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\n  s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n  netgmap sr s =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  netgmap sr s' =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr s'))\n  wf_net_tree (n1 \\<parallel> n2)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> H K.\n       \\<lbrakk>\\<And>s s' \\<zeta> H K.\n                   \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nH\\<not>K:arrive(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> H K.\n           \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              H\\<not>K:arrive(m), \\<sigma>',\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, H\\<not>K:arrive(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from this(3)"], ["proof (chain)\npicking this:\n  (s, H\\<not>K:arrive(m), s')\n  \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))", "have \"(s, H\\<not>K:arrive(m), s') \\<in> pnet_sos (trans (pnet np n1))\n                                                              (trans (pnet np n2))\""], ["proof (prove)\nusing this:\n  (s, H\\<not>K:arrive(m), s')\n  \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\n\ngoal (1 subgoal):\n 1. (s, H\\<not>K:arrive(m), s')\n    \\<in> pnet_sos (automaton.trans (pnet np n1))\n           (automaton.trans (pnet np n2))", "by simp"], ["proof (state)\nthis:\n  (s, H\\<not>K:arrive(m), s')\n  \\<in> pnet_sos (automaton.trans (pnet np n1))\n         (automaton.trans (pnet np n2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> H K.\n       \\<lbrakk>\\<And>s s' \\<zeta> H K.\n                   \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nH\\<not>K:arrive(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> H K.\n           \\<lbrakk>(s, H\\<not>K:arrive(m), s')\n                    \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                              H\\<not>K:arrive(m), \\<sigma>',\n                              snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, H\\<not>K:arrive(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "thus \"((\\<sigma>, snd (netgmap sr s)), H\\<not>K:arrive(m), (\\<sigma>', snd (netgmap sr s')))\n                                                                   \\<in> trans (opnet onp (n1 \\<parallel> n2))\""], ["proof (prove)\nusing this:\n  (s, H\\<not>K:arrive(m), s')\n  \\<in> pnet_sos (automaton.trans (pnet np n1))\n         (automaton.trans (pnet np n2))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), H\\<not>K:arrive(m), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "proof (rule partial_arriveTE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s H K s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n1);\n        (t, H'\\<not>K':arrive(m), t') \\<in> automaton.trans (pnet np n2);\n        H = H \\<union> H'; K = K \\<union> K'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "fix s1 s1' s2 s2' H1 H2 K1 K2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s H K s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n1);\n        (t, H'\\<not>K':arrive(m), t') \\<in> automaton.trans (pnet np n2);\n        H = H \\<union> H'; K = K \\<union> K'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "assume \"s = SubnetS s1 s2\"\n           and \"s' = SubnetS s1' s2'\"\n           and tr1: \"(s1, H1\\<not>K1:arrive(m), s1') \\<in> trans (pnet np n1)\"\n           and tr2: \"(s2, H2\\<not>K2:arrive(m), s2') \\<in> trans (pnet np n2)\"\n           and \"H = H1 \\<union> H2\"\n           and \"K = K1 \\<union> K2\""], ["proof (state)\nthis:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  (s1, H1\\<not>K1:arrive(m), s1') \\<in> automaton.trans (pnet np n1)\n  (s2, H2\\<not>K2:arrive(m), s2') \\<in> automaton.trans (pnet np n2)\n  H = H1 \\<union> H2\n  K = K1 \\<union> K2\n\ngoal (1 subgoal):\n 1. \\<And>s H K s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n1);\n        (t, H'\\<not>K':arrive(m), t') \\<in> automaton.trans (pnet np n2);\n        H = H \\<union> H'; K = K \\<union> K'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>wf_net_tree (n1 \\<parallel> n2)\\<close>"], ["proof (chain)\npicking this:\n  wf_net_tree (n1 \\<parallel> n2)", "have \"wf_net_tree n1\"\n                                      and \"wf_net_tree n2\"\n                                      and \"net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\""], ["proof (prove)\nusing this:\n  wf_net_tree (n1 \\<parallel> n2)\n\ngoal (1 subgoal):\n 1. wf_net_tree n1 &&&\n    wf_net_tree n2 &&& net_tree_ips n1 \\<inter> net_tree_ips n2 = {}", "by auto"], ["proof (state)\nthis:\n  wf_net_tree n1\n  wf_net_tree n2\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n\ngoal (1 subgoal):\n 1. \\<And>s H K s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n1);\n        (t, H'\\<not>K':arrive(m), t') \\<in> automaton.trans (pnet np n2);\n        H = H \\<union> H'; K = K \\<union> K'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from sr [simplified \\<open>s = SubnetS s1 s2\\<close>]"], ["proof (chain)\npicking this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT", "have \"s1 \\<in> reachable (pnet np n1) TT\""], ["proof (prove)\nusing this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n\ngoal (1 subgoal):\n 1. s1 \\<in> reachable (pnet np n1) TT", "by (rule subnet_reachable(1))"], ["proof (state)\nthis:\n  s1 \\<in> reachable (pnet np n1) TT\n\ngoal (1 subgoal):\n 1. \\<And>s H K s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n1);\n        (t, H'\\<not>K':arrive(m), t') \\<in> automaton.trans (pnet np n2);\n        H = H \\<union> H'; K = K \\<union> K'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "hence \"net_ips s1 = net_tree_ips n1\""], ["proof (prove)\nusing this:\n  s1 \\<in> reachable (pnet np n1) TT\n\ngoal (1 subgoal):\n 1. net_ips s1 = net_tree_ips n1", "by (rule pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  net_ips s1 = net_tree_ips n1\n\ngoal (1 subgoal):\n 1. \\<And>s H K s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n1);\n        (t, H'\\<not>K':arrive(m), t') \\<in> automaton.trans (pnet np n2);\n        H = H \\<union> H'; K = K \\<union> K'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "with tr1"], ["proof (chain)\npicking this:\n  (s1, H1\\<not>K1:arrive(m), s1') \\<in> automaton.trans (pnet np n1)\n  net_ips s1 = net_tree_ips n1", "have \"net_ips s1' = net_tree_ips n1\""], ["proof (prove)\nusing this:\n  (s1, H1\\<not>K1:arrive(m), s1') \\<in> automaton.trans (pnet np n1)\n  net_ips s1 = net_tree_ips n1\n\ngoal (1 subgoal):\n 1. net_ips s1' = net_tree_ips n1", "by (metis pnet_maintains_dom)"], ["proof (state)\nthis:\n  net_ips s1' = net_tree_ips n1\n\ngoal (1 subgoal):\n 1. \\<And>s H K s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n1);\n        (t, H'\\<not>K':arrive(m), t') \\<in> automaton.trans (pnet np n2);\n        H = H \\<union> H'; K = K \\<union> K'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from sr [simplified \\<open>s = SubnetS s1 s2\\<close>]"], ["proof (chain)\npicking this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT", "have \"s2 \\<in> reachable (pnet np n2) TT\""], ["proof (prove)\nusing this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n\ngoal (1 subgoal):\n 1. s2 \\<in> reachable (pnet np n2) TT", "by (rule subnet_reachable(2))"], ["proof (state)\nthis:\n  s2 \\<in> reachable (pnet np n2) TT\n\ngoal (1 subgoal):\n 1. \\<And>s H K s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n1);\n        (t, H'\\<not>K':arrive(m), t') \\<in> automaton.trans (pnet np n2);\n        H = H \\<union> H'; K = K \\<union> K'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "hence \"net_ips s2 = net_tree_ips n2\""], ["proof (prove)\nusing this:\n  s2 \\<in> reachable (pnet np n2) TT\n\ngoal (1 subgoal):\n 1. net_ips s2 = net_tree_ips n2", "by (rule pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. \\<And>s H K s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n1);\n        (t, H'\\<not>K':arrive(m), t') \\<in> automaton.trans (pnet np n2);\n        H = H \\<union> H'; K = K \\<union> K'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "with tr2"], ["proof (chain)\npicking this:\n  (s2, H2\\<not>K2:arrive(m), s2') \\<in> automaton.trans (pnet np n2)\n  net_ips s2 = net_tree_ips n2", "have \"net_ips s2' = net_tree_ips n2\""], ["proof (prove)\nusing this:\n  (s2, H2\\<not>K2:arrive(m), s2') \\<in> automaton.trans (pnet np n2)\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. net_ips s2' = net_tree_ips n2", "by (metis pnet_maintains_dom)"], ["proof (state)\nthis:\n  net_ips s2' = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. \\<And>s H K s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n1);\n        (t, H'\\<not>K':arrive(m), t') \\<in> automaton.trans (pnet np n2);\n        H = H \\<union> H'; K = K \\<union> K'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>(s1, H1\\<not>K1:arrive(m), s1') \\<in> trans (pnet np n1)\\<close>\n             \\<open>s1 \\<in> reachable (pnet np n1) TT\\<close>"], ["proof (chain)\npicking this:\n  (s1, H1\\<not>K1:arrive(m), s1') \\<in> automaton.trans (pnet np n1)\n  s1 \\<in> reachable (pnet np n1) TT", "have \"((\\<sigma>, snd (netgmap sr s1)), H1\\<not>K1:arrive(m), (\\<sigma>', snd (netgmap sr s1')))\n                                                                            \\<in> trans (opnet onp n1)\""], ["proof (prove)\nusing this:\n  (s1, H1\\<not>K1:arrive(m), s1') \\<in> automaton.trans (pnet np n1)\n  s1 \\<in> reachable (pnet np n1) TT\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s1)), H1\\<not>K1:arrive(m), \\<sigma>',\n     snd (netgmap sr s1'))\n    \\<in> automaton.trans (opnet onp n1)", "proof (rule IH1 [OF _ _ _ _ \\<open>wf_net_tree n1\\<close>])"], ["proof (state)\ngoal (2 subgoals):\n 1. netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, ?\\<zeta>)\n 2. netgmap sr s1' =\n    netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))", "from nm [simplified \\<open>s = SubnetS s1 s2\\<close>]\n                 \\<open>net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\\<close>\n                 \\<open>net_ips s1 = net_tree_ips n1\\<close>\n                 \\<open>net_ips s2 = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2", "show \"netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s1 =\n    netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))", "by (rule netgmap_subnet_split1)"], ["proof (state)\nthis:\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n\ngoal (1 subgoal):\n 1. netgmap sr s1' =\n    netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. netgmap sr s1' =\n    netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))", "from nm' [simplified \\<open>s' = SubnetS s1' s2'\\<close>]\n                 \\<open>net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\\<close>\n                 \\<open>net_ips s1' = net_tree_ips n1\\<close>\n                 \\<open>net_ips s2' = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr (SubnetS s1' s2') =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr (SubnetS s1' s2')))\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  net_ips s1' = net_tree_ips n1\n  net_ips s2' = net_tree_ips n2", "show \"netgmap sr s1' = netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1' s2') =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr (SubnetS s1' s2')))\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  net_ips s1' = net_tree_ips n1\n  net_ips s2' = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s1' =\n    netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))", "by (rule netgmap_subnet_split1)"], ["proof (state)\nthis:\n  netgmap sr s1' =\n  netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s1)), H1\\<not>K1:arrive(m), \\<sigma>',\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n\ngoal (1 subgoal):\n 1. \\<And>s H K s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n1);\n        (t, H'\\<not>K':arrive(m), t') \\<in> automaton.trans (pnet np n2);\n        H = H \\<union> H'; K = K \\<union> K'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "moreover"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s1)), H1\\<not>K1:arrive(m), \\<sigma>',\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n\ngoal (1 subgoal):\n 1. \\<And>s H K s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n1);\n        (t, H'\\<not>K':arrive(m), t') \\<in> automaton.trans (pnet np n2);\n        H = H \\<union> H'; K = K \\<union> K'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>(s2, H2\\<not>K2:arrive(m), s2') \\<in> trans (pnet np n2)\\<close>\n                      \\<open>s2 \\<in> reachable (pnet np n2) TT\\<close>"], ["proof (chain)\npicking this:\n  (s2, H2\\<not>K2:arrive(m), s2') \\<in> automaton.trans (pnet np n2)\n  s2 \\<in> reachable (pnet np n2) TT", "have \"((\\<sigma>, snd (netgmap sr s2)), H2\\<not>K2:arrive(m), (\\<sigma>', snd (netgmap sr s2')))\n                                                                            \\<in> trans (opnet onp n2)\""], ["proof (prove)\nusing this:\n  (s2, H2\\<not>K2:arrive(m), s2') \\<in> automaton.trans (pnet np n2)\n  s2 \\<in> reachable (pnet np n2) TT\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s2)), H2\\<not>K2:arrive(m), \\<sigma>',\n     snd (netgmap sr s2'))\n    \\<in> automaton.trans (opnet onp n2)", "proof (rule IH2 [OF _ _ _ _ \\<open>wf_net_tree n2\\<close>])"], ["proof (state)\ngoal (2 subgoals):\n 1. netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, ?\\<zeta>)\n 2. netgmap sr s2' =\n    netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))", "from nm [simplified \\<open>s = SubnetS s1 s2\\<close>]\n                 \\<open>net_ips s1 = net_tree_ips n1\\<close>\n                 \\<open>net_ips s2 = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2", "show \"netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s2 =\n    netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))", "by (rule netgmap_subnet_split2)"], ["proof (state)\nthis:\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n\ngoal (1 subgoal):\n 1. netgmap sr s2' =\n    netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. netgmap sr s2' =\n    netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))", "from nm' [simplified \\<open>s' = SubnetS s1' s2'\\<close>]\n                 \\<open>net_ips s1' = net_tree_ips n1\\<close>\n                 \\<open>net_ips s2' = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr (SubnetS s1' s2') =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr (SubnetS s1' s2')))\n  net_ips s1' = net_tree_ips n1\n  net_ips s2' = net_tree_ips n2", "show \"netgmap sr s2' = netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1' s2') =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr (SubnetS s1' s2')))\n  net_ips s1' = net_tree_ips n1\n  net_ips s2' = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s2' =\n    netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))", "by (rule netgmap_subnet_split2)"], ["proof (state)\nthis:\n  netgmap sr s2' =\n  netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s2)), H2\\<not>K2:arrive(m), \\<sigma>',\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)\n\ngoal (1 subgoal):\n 1. \\<And>s H K s' t H' K' t'.\n       \\<lbrakk>s = SubnetS s t; s' = SubnetS s' t';\n        (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n1);\n        (t, H'\\<not>K':arrive(m), t') \\<in> automaton.trans (pnet np n2);\n        H = H \\<union> H'; K = K \\<union> K'\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\n                          H\\<not>K:arrive(m), \\<sigma>',\n                          snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "ultimately"], ["proof (chain)\npicking this:\n  ((\\<sigma>, snd (netgmap sr s1)), H1\\<not>K1:arrive(m), \\<sigma>',\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n  ((\\<sigma>, snd (netgmap sr s2)), H2\\<not>K2:arrive(m), \\<sigma>',\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)", "show \"((\\<sigma>, snd (netgmap sr s)), H\\<not>K:arrive(m), (\\<sigma>', snd (netgmap sr s')))\n                                                                     \\<in> trans (opnet onp (n1 \\<parallel> n2))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, snd (netgmap sr s1)), H1\\<not>K1:arrive(m), \\<sigma>',\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n  ((\\<sigma>, snd (netgmap sr s2)), H2\\<not>K2:arrive(m), \\<sigma>',\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), H\\<not>K:arrive(m), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "using \\<open>s = SubnetS s1 s2\\<close> \\<open>s' = SubnetS s1' s2'\\<close> \\<open>H = H1 \\<union> H2\\<close> \\<open>K = K1 \\<union> K2\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, snd (netgmap sr s1)), H1\\<not>K1:arrive(m), \\<sigma>',\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n  ((\\<sigma>, snd (netgmap sr s2)), H2\\<not>K2:arrive(m), \\<sigma>',\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  H = H1 \\<union> H2\n  K = K1 \\<union> K2\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), H\\<not>K:arrive(m), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "by simp (rule opnet_sos.opnet_arrive)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), H\\<not>K:arrive(m), \\<sigma>',\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), H\\<not>K:arrive(m), \\<sigma>',\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), H\\<not>K:arrive(m), \\<sigma>',\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n    \\<in> automaton.trans (opnet onp n)", "with \\<open>\\<zeta> = snd (netgmap sr s)\\<close> and \\<open>\\<zeta>' = snd (netgmap sr s')\\<close>"], ["proof (chain)\npicking this:\n  \\<zeta> = snd (netgmap sr s)\n  \\<zeta>' = snd (netgmap sr s')\n  ((\\<sigma>, snd (netgmap sr s)), H\\<not>K:arrive(m), \\<sigma>',\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)", "show \"((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\""], ["proof (prove)\nusing this:\n  \\<zeta> = snd (netgmap sr s)\n  \\<zeta>' = snd (netgmap sr s')\n  ((\\<sigma>, snd (netgmap sr s)), H\\<not>K:arrive(m), \\<sigma>',\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n    \\<in> automaton.trans (opnet onp n)", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (opnet onp n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transfer_arrive:\n  assumes \"(s, H\\<not>K:arrive(m), s') \\<in> trans (pnet np n)\"\n      and \"s \\<in> reachable (pnet np n) TT\"\n      and \"netgmap sr s  = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\"\n      and \"wf_net_tree n\"\n  obtains \\<sigma>' \\<zeta>' where \"((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\"\n                  and \"\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\"\n                  and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<zeta>'.\n        \\<lbrakk>((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>',\n                  \\<zeta>')\n                 \\<in> automaton.trans (opnet onp n);\n         \\<forall>j.\n            j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n            \\<sigma>' j = \\<sigma> j;\n         netgmap sr s' =\n         netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof atomize_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "define \\<sigma>' where \"\\<sigma>' i = (if i\\<in>net_tree_ips n then the (fst (netgmap sr s') i) else \\<sigma> i)\" for i"], ["proof (state)\nthis:\n  \\<sigma>' ?i =\n  (if ?i \\<in> net_tree_ips n then the (fst (netgmap sr s') ?i)\n   else \\<sigma> ?i)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from assms(2)"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np n) TT", "have \"net_ips s = net_tree_ips n\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np n) TT\n\ngoal (1 subgoal):\n 1. net_ips s = net_tree_ips n", "by (rule pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  net_ips s = net_tree_ips n\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "with assms(1)"], ["proof (chain)\npicking this:\n  (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n)\n  net_ips s = net_tree_ips n", "have \"net_ips s' = net_tree_ips n\""], ["proof (prove)\nusing this:\n  (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n)\n  net_ips s = net_tree_ips n\n\ngoal (1 subgoal):\n 1. net_ips s' = net_tree_ips n", "by (metis pnet_maintains_dom)"], ["proof (state)\nthis:\n  net_ips s' = net_tree_ips n\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "have \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netgmap sr s' =\n    netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))", "proof (rule prod_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. fst (netgmap sr s') =\n    fst (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))\n 2. snd (netgmap sr s') =\n    snd (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))", "from \\<open>net_ips s' = net_tree_ips n\\<close>"], ["proof (chain)\npicking this:\n  net_ips s' = net_tree_ips n", "show \"fst (netgmap sr s') = fst (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))\""], ["proof (prove)\nusing this:\n  net_ips s' = net_tree_ips n\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s') =\n    fst (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))", "unfolding \\<sigma>'_def [abs_def]"], ["proof (prove)\nusing this:\n  net_ips s' = net_tree_ips n\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s') =\n    fst (netmask (net_tree_ips n)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips n then the (fst (netgmap sr s') i)\n              else \\<sigma> i,\n           snd (netgmap sr s')))", "by - (rule ext, clarsimp)"], ["proof (state)\nthis:\n  fst (netgmap sr s') =\n  fst (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))\n\ngoal (1 subgoal):\n 1. snd (netgmap sr s') =\n    snd (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))", "qed simp"], ["proof (state)\nthis:\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "moreover"], ["proof (state)\nthis:\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "with assms(1-3)"], ["proof (chain)\npicking this:\n  (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n)\n  s \\<in> reachable (pnet np n) TT\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))", "have \"((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), (\\<sigma>', snd (netgmap sr s'))) \\<in> trans (opnet onp n)\""], ["proof (prove)\nusing this:\n  (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n)\n  s \\<in> reachable (pnet np n) TT\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp n)", "using \\<open>wf_net_tree n\\<close>"], ["proof (prove)\nusing this:\n  (s, H\\<not>K:arrive(m), s') \\<in> automaton.trans (pnet np n)\n  s \\<in> reachable (pnet np n) TT\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n  wf_net_tree n\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp n)", "by (rule transfer_arrive')"], ["proof (state)\nthis:\n  ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "moreover"], ["proof (state)\nthis:\n  ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "have \"\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "have \"\\<forall>j. j\\<notin>net_tree_ips n \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips n \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "unfolding \\<sigma>'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips n \\<longrightarrow>\n       (if j \\<in> net_tree_ips n then the (fst (netgmap sr s') j)\n        else \\<sigma> j) =\n       \\<sigma> j", "by simp"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips n \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "with assms(3) and \\<open>net_ips s = net_tree_ips n\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  net_ips s = net_tree_ips n\n  \\<forall>j.\n     j \\<notin> net_tree_ips n \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "show ?thesis"], ["proof (prove)\nusing this:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  net_ips s = net_tree_ips n\n  \\<forall>j.\n     j \\<notin> net_tree_ips n \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "by clarsimp (metis (mono_tags) net_ips_netgmap snd_conv)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "ultimately"], ["proof (chain)\npicking this:\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n  ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "show \"\\<exists>\\<sigma>' \\<zeta>'. ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\n                          \\<and> (\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j)\n                          \\<and> netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\""], ["proof (prove)\nusing this:\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n  ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<zeta>'.\n     ((\\<sigma>, \\<zeta>), H\\<not>K:arrive(m), \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet onp n) \\<and>\n     (\\<forall>j.\n         j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n         \\<sigma>' j = \\<sigma> j) \\<and>\n     netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transfer_cast:\n  assumes \"(s, mR:*cast(m), s') \\<in> trans (pnet np n)\"\n      and \"s \\<in> reachable (pnet np n) TT\"\n      and \"netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\"\n      and \"wf_net_tree n\"\n  obtains \\<sigma>' \\<zeta>' where \"((\\<sigma>, \\<zeta>), mR:*cast(m), (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\"\n                  and \"\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\"\n                  and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<zeta>'.\n        \\<lbrakk>((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', \\<zeta>')\n                 \\<in> automaton.trans (opnet onp n);\n         \\<forall>j.\n            j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n            \\<sigma>' j = \\<sigma> j;\n         netgmap sr s' =\n         netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof atomize_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "define \\<sigma>' where \"\\<sigma>' i = (if i\\<in>net_tree_ips n then the (fst (netgmap sr s') i) else \\<sigma> i)\" for i"], ["proof (state)\nthis:\n  \\<sigma>' ?i =\n  (if ?i \\<in> net_tree_ips n then the (fst (netgmap sr s') ?i)\n   else \\<sigma> ?i)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from assms(2)"], ["proof (chain)\npicking this:\n  s \\<in> reachable (pnet np n) TT", "have \"net_ips s = net_tree_ips n\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np n) TT\n\ngoal (1 subgoal):\n 1. net_ips s = net_tree_ips n", ".."], ["proof (state)\nthis:\n  net_ips s = net_tree_ips n\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "with assms(1)"], ["proof (chain)\npicking this:\n  (s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n)\n  net_ips s = net_tree_ips n", "have \"net_ips s' = net_tree_ips n\""], ["proof (prove)\nusing this:\n  (s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n)\n  net_ips s = net_tree_ips n\n\ngoal (1 subgoal):\n 1. net_ips s' = net_tree_ips n", "by (metis pnet_maintains_dom)"], ["proof (state)\nthis:\n  net_ips s' = net_tree_ips n\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "have \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netgmap sr s' =\n    netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))", "proof (rule prod_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. fst (netgmap sr s') =\n    fst (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))\n 2. snd (netgmap sr s') =\n    snd (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))", "from \\<open>net_ips s' = net_tree_ips n\\<close>"], ["proof (chain)\npicking this:\n  net_ips s' = net_tree_ips n", "show \"fst (netgmap sr s') = fst (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))\""], ["proof (prove)\nusing this:\n  net_ips s' = net_tree_ips n\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s') =\n    fst (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))", "unfolding \\<sigma>'_def [abs_def]"], ["proof (prove)\nusing this:\n  net_ips s' = net_tree_ips n\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s') =\n    fst (netmask (net_tree_ips n)\n          (\\<lambda>i.\n              if i \\<in> net_tree_ips n then the (fst (netgmap sr s') i)\n              else \\<sigma> i,\n           snd (netgmap sr s')))", "by - (rule ext, clarsimp simp add: some_the_fst_netgmap)"], ["proof (state)\nthis:\n  fst (netgmap sr s') =\n  fst (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))\n\ngoal (1 subgoal):\n 1. snd (netgmap sr s') =\n    snd (netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s')))", "qed simp"], ["proof (state)\nthis:\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from \\<open>net_ips s' = net_tree_ips n\\<close> and \\<open>net_ips s = net_tree_ips n\\<close>"], ["proof (chain)\npicking this:\n  net_ips s' = net_tree_ips n\n  net_ips s = net_tree_ips n", "have \"\\<forall>j. j\\<notin>net_ips (snd (netgmap sr s)) \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  net_ips s' = net_tree_ips n\n  net_ips s = net_tree_ips n\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_ips (snd (netgmap sr s)) \\<longrightarrow>\n       \\<sigma>' j = \\<sigma> j", "unfolding \\<sigma>'_def"], ["proof (prove)\nusing this:\n  net_ips s' = net_tree_ips n\n  net_ips s = net_tree_ips n\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_ips (snd (netgmap sr s)) \\<longrightarrow>\n       (if j \\<in> net_tree_ips n then the (fst (netgmap sr s') j)\n        else \\<sigma> j) =\n       \\<sigma> j", "by simp"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_ips (snd (netgmap sr s)) \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from \\<open>netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)", "have \"\\<zeta> = snd (netgmap sr s)\""], ["proof (prove)\nusing this:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. \\<zeta> = snd (netgmap sr s)", "by simp"], ["proof (state)\nthis:\n  \\<zeta> = snd (netgmap sr s)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from assms(1-3) \\<open>netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\\<close> assms(4)"], ["proof (chain)\npicking this:\n  (s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n)\n  s \\<in> reachable (pnet np n) TT\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n  wf_net_tree n", "have \"((\\<sigma>, snd (netgmap sr s)), mR:*cast(m), (\\<sigma>', snd (netgmap sr s'))) \\<in> trans (opnet onp n)\""], ["proof (prove)\nusing this:\n  (s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n)\n  s \\<in> reachable (pnet np n) TT\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n  wf_net_tree n\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp n)", "proof (induction n arbitrary: s s' \\<zeta> mR)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R s s' \\<zeta> mR.\n       \\<lbrakk>(s, mR:*cast(m), s')\n                \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree \\<langle>i; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "fix ii R\\<^sub>i ns ns' \\<zeta> mR"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i R s s' \\<zeta> mR.\n       \\<lbrakk>(s, mR:*cast(m), s')\n                \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree \\<langle>i; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "assume \"(ns, mR:*cast(m), ns') \\<in> trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\"\n           and nsr: \"ns \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\"\n           and \"netgmap sr ns = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\"\n           and \"netgmap sr ns' = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>', snd (netgmap sr ns'))\""], ["proof (state)\nthis:\n  (ns, mR:*cast(m), ns')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n  ns \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n  netgmap sr ns' =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n   (\\<sigma>', snd (netgmap sr ns'))\n\ngoal (2 subgoals):\n 1. \\<And>i R s s' \\<zeta> mR.\n       \\<lbrakk>(s, mR:*cast(m), s')\n                \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree \\<langle>i; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from this(1)"], ["proof (chain)\npicking this:\n  (ns, mR:*cast(m), ns')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)", "have \"(ns, mR:*cast(m), ns') \\<in> node_sos (trans (np ii))\""], ["proof (prove)\nusing this:\n  (ns, mR:*cast(m), ns')\n  \\<in> automaton.trans (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (1 subgoal):\n 1. (ns, mR:*cast(m), ns') \\<in> node_sos (automaton.trans (np ii))", "by (simp add: node_comps)"], ["proof (state)\nthis:\n  (ns, mR:*cast(m), ns') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>i R s s' \\<zeta> mR.\n       \\<lbrakk>(s, mR:*cast(m), s')\n                \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree \\<langle>i; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "moreover"], ["proof (state)\nthis:\n  (ns, mR:*cast(m), ns') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>i R s s' \\<zeta> mR.\n       \\<lbrakk>(s, mR:*cast(m), s')\n                \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree \\<langle>i; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "with nsr"], ["proof (chain)\npicking this:\n  ns \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  (ns, mR:*cast(m), ns') \\<in> node_sos (automaton.trans (np ii))", "obtain s s' R where \"ns  = NodeS ii s R\"\n                                          and \"ns' = NodeS ii s' R\""], ["proof (prove)\nusing this:\n  ns \\<in> reachable (pnet np \\<langle>ii; R\\<^sub>i\\<rangle>) TT\n  (ns, mR:*cast(m), ns') \\<in> node_sos (automaton.trans (np ii))\n\ngoal (1 subgoal):\n 1. (\\<And>s R s'.\n        \\<lbrakk>ns = NodeS ii s R; ns' = NodeS ii s' R\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis net_node_reachable_is_node node_castTE')"], ["proof (state)\nthis:\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R\n\ngoal (2 subgoals):\n 1. \\<And>i R s s' \\<zeta> mR.\n       \\<lbrakk>(s, mR:*cast(m), s')\n                \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree \\<langle>i; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "ultimately"], ["proof (chain)\npicking this:\n  (ns, mR:*cast(m), ns') \\<in> node_sos (automaton.trans (np ii))\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R", "have \"(NodeS ii s R, mR:*cast(m), NodeS ii s' R) \\<in> node_sos (trans (np ii))\""], ["proof (prove)\nusing this:\n  (ns, mR:*cast(m), ns') \\<in> node_sos (automaton.trans (np ii))\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R\n\ngoal (1 subgoal):\n 1. (NodeS ii s R, mR:*cast(m), NodeS ii s' R)\n    \\<in> node_sos (automaton.trans (np ii))", "by simp"], ["proof (state)\nthis:\n  (NodeS ii s R, mR:*cast(m), NodeS ii s' R)\n  \\<in> node_sos (automaton.trans (np ii))\n\ngoal (2 subgoals):\n 1. \\<And>i R s s' \\<zeta> mR.\n       \\<lbrakk>(s, mR:*cast(m), s')\n                \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree \\<langle>i; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>netgmap sr ns = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\\<close> and \\<open>ns  = NodeS ii s R\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n  ns = NodeS ii s R", "have \"\\<sigma> ii = fst (sr s)\""], ["proof (prove)\nusing this:\n  netgmap sr ns =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>, \\<zeta>)\n  ns = NodeS ii s R\n\ngoal (1 subgoal):\n 1. \\<sigma> ii = fst (sr s)", "by simp (metis map_upd_Some_unfold)"], ["proof (state)\nthis:\n  \\<sigma> ii = fst (sr s)\n\ngoal (2 subgoals):\n 1. \\<And>i R s s' \\<zeta> mR.\n       \\<lbrakk>(s, mR:*cast(m), s')\n                \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree \\<langle>i; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>netgmap sr ns' = netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>) (\\<sigma>', snd (netgmap sr ns'))\\<close>\n             and \\<open>ns' = NodeS ii s' R\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr ns' =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n   (\\<sigma>', snd (netgmap sr ns'))\n  ns' = NodeS ii s' R", "have \"\\<sigma>' ii = fst (sr s')\""], ["proof (prove)\nusing this:\n  netgmap sr ns' =\n  netmask (net_tree_ips \\<langle>ii; R\\<^sub>i\\<rangle>)\n   (\\<sigma>', snd (netgmap sr ns'))\n  ns' = NodeS ii s' R\n\ngoal (1 subgoal):\n 1. \\<sigma>' ii = fst (sr s')", "by simp (metis map_upd_Some_unfold)"], ["proof (state)\nthis:\n  \\<sigma>' ii = fst (sr s')\n\ngoal (2 subgoals):\n 1. \\<And>i R s s' \\<zeta> mR.\n       \\<lbrakk>(s, mR:*cast(m), s')\n                \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree \\<langle>i; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>(NodeS ii s R, mR:*cast(m), NodeS ii s' R) \\<in> node_sos (trans (np ii))\\<close>"], ["proof (chain)\npicking this:\n  (NodeS ii s R, mR:*cast(m), NodeS ii s' R)\n  \\<in> node_sos (automaton.trans (np ii))", "have \"((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m), (\\<sigma>', NodeS ii (snd (sr s')) R))\n                                                                      \\<in> onode_sos (trans (onp ii))\""], ["proof (prove)\nusing this:\n  (NodeS ii s R, mR:*cast(m), NodeS ii s' R)\n  \\<in> node_sos (automaton.trans (np ii))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m), \\<sigma>',\n     NodeS ii (snd (sr s')) R)\n    \\<in> onode_sos (automaton.trans (onp ii))", "proof (rule node_castTE)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>mR = R; R = R;\n     (s, broadcast m, s') \\<in> automaton.trans (np ii)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                       \\<sigma>', NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))\n 2. \\<And>D.\n       \\<lbrakk>mR = R \\<inter> D; R = R;\n        (s, groupcast D m, s') \\<in> automaton.trans (np ii)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))\n 3. \\<And>d.\n       \\<lbrakk>mR = {d}; R = R;\n        (s, unicast d m, s') \\<in> automaton.trans (np ii);\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))", "assume \"(s, broadcast m, s') \\<in> trans (np ii)\"\n             and \"mR = R\""], ["proof (state)\nthis:\n  (s, broadcast m, s') \\<in> automaton.trans (np ii)\n  mR = R\n\ngoal (3 subgoals):\n 1. \\<lbrakk>mR = R; R = R;\n     (s, broadcast m, s') \\<in> automaton.trans (np ii)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                       \\<sigma>', NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))\n 2. \\<And>D.\n       \\<lbrakk>mR = R \\<inter> D; R = R;\n        (s, groupcast D m, s') \\<in> automaton.trans (np ii)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))\n 3. \\<And>d.\n       \\<lbrakk>mR = {d}; R = R;\n        (s, unicast d m, s') \\<in> automaton.trans (np ii);\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))", "from \\<open>\\<sigma> ii = fst (sr s)\\<close> \\<open>\\<sigma>' ii = fst (sr s')\\<close> and this(1)"], ["proof (chain)\npicking this:\n  \\<sigma> ii = fst (sr s)\n  \\<sigma>' ii = fst (sr s')\n  (s, broadcast m, s') \\<in> automaton.trans (np ii)", "have \"((\\<sigma>, snd (sr s)), broadcast m, (\\<sigma>', snd (sr s'))) \\<in> trans (onp ii)\""], ["proof (prove)\nusing this:\n  \\<sigma> ii = fst (sr s)\n  \\<sigma>' ii = fst (sr s')\n  (s, broadcast m, s') \\<in> automaton.trans (np ii)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (sr s)), broadcast m, \\<sigma>', snd (sr s'))\n    \\<in> automaton.trans (onp ii)", "by (rule trans)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (sr s)), broadcast m, \\<sigma>', snd (sr s'))\n  \\<in> automaton.trans (onp ii)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>mR = R; R = R;\n     (s, broadcast m, s') \\<in> automaton.trans (np ii)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                       \\<sigma>', NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))\n 2. \\<And>D.\n       \\<lbrakk>mR = R \\<inter> D; R = R;\n        (s, groupcast D m, s') \\<in> automaton.trans (np ii)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))\n 3. \\<And>d.\n       \\<lbrakk>mR = {d}; R = R;\n        (s, unicast d m, s') \\<in> automaton.trans (np ii);\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))", "hence \"((\\<sigma>, NodeS ii (snd (sr s)) R), R:*cast(m), (\\<sigma>', NodeS ii (snd (sr s')) R))\n                                                                      \\<in> onode_sos (trans (onp ii))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, snd (sr s)), broadcast m, \\<sigma>', snd (sr s'))\n  \\<in> automaton.trans (onp ii)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS ii (snd (sr s)) R), R:*cast(m), \\<sigma>',\n     NodeS ii (snd (sr s')) R)\n    \\<in> onode_sos (automaton.trans (onp ii))", "by (rule onode_bcast)"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), R:*cast(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (3 subgoals):\n 1. \\<lbrakk>mR = R; R = R;\n     (s, broadcast m, s') \\<in> automaton.trans (np ii)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                       \\<sigma>', NodeS ii (snd (sr s')) R)\n                      \\<in> onode_sos (automaton.trans (onp ii))\n 2. \\<And>D.\n       \\<lbrakk>mR = R \\<inter> D; R = R;\n        (s, groupcast D m, s') \\<in> automaton.trans (np ii)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))\n 3. \\<And>d.\n       \\<lbrakk>mR = {d}; R = R;\n        (s, unicast d m, s') \\<in> automaton.trans (np ii);\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))", "with \\<open>mR = R\\<close>"], ["proof (chain)\npicking this:\n  mR = R\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), R:*cast(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))", "show \"((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m), (\\<sigma>', NodeS ii (snd (sr s')) R))\n                                                                      \\<in> onode_sos (trans (onp ii))\""], ["proof (prove)\nusing this:\n  mR = R\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), R:*cast(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m), \\<sigma>',\n     NodeS ii (snd (sr s')) R)\n    \\<in> onode_sos (automaton.trans (onp ii))", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (2 subgoals):\n 1. \\<And>D.\n       \\<lbrakk>mR = R \\<inter> D; R = R;\n        (s, groupcast D m, s') \\<in> automaton.trans (np ii)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))\n 2. \\<And>d.\n       \\<lbrakk>mR = {d}; R = R;\n        (s, unicast d m, s') \\<in> automaton.trans (np ii);\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>D.\n       \\<lbrakk>mR = R \\<inter> D; R = R;\n        (s, groupcast D m, s') \\<in> automaton.trans (np ii)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))\n 2. \\<And>d.\n       \\<lbrakk>mR = {d}; R = R;\n        (s, unicast d m, s') \\<in> automaton.trans (np ii);\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))", "fix D"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>D.\n       \\<lbrakk>mR = R \\<inter> D; R = R;\n        (s, groupcast D m, s') \\<in> automaton.trans (np ii)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))\n 2. \\<And>d.\n       \\<lbrakk>mR = {d}; R = R;\n        (s, unicast d m, s') \\<in> automaton.trans (np ii);\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))", "assume \"(s, groupcast D m, s') \\<in> trans (np ii)\"\n             and \"mR = R \\<inter> D\""], ["proof (state)\nthis:\n  (s, groupcast D m, s') \\<in> automaton.trans (np ii)\n  mR = R \\<inter> D\n\ngoal (2 subgoals):\n 1. \\<And>D.\n       \\<lbrakk>mR = R \\<inter> D; R = R;\n        (s, groupcast D m, s') \\<in> automaton.trans (np ii)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))\n 2. \\<And>d.\n       \\<lbrakk>mR = {d}; R = R;\n        (s, unicast d m, s') \\<in> automaton.trans (np ii);\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))", "from \\<open>\\<sigma> ii = fst (sr s)\\<close> \\<open>\\<sigma>' ii = fst (sr s')\\<close> and this(1)"], ["proof (chain)\npicking this:\n  \\<sigma> ii = fst (sr s)\n  \\<sigma>' ii = fst (sr s')\n  (s, groupcast D m, s') \\<in> automaton.trans (np ii)", "have \"((\\<sigma>, snd (sr s)), groupcast D m, (\\<sigma>', snd (sr s'))) \\<in> trans (onp ii)\""], ["proof (prove)\nusing this:\n  \\<sigma> ii = fst (sr s)\n  \\<sigma>' ii = fst (sr s')\n  (s, groupcast D m, s') \\<in> automaton.trans (np ii)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (sr s)), groupcast D m, \\<sigma>', snd (sr s'))\n    \\<in> automaton.trans (onp ii)", "by (rule trans)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (sr s)), groupcast D m, \\<sigma>', snd (sr s'))\n  \\<in> automaton.trans (onp ii)\n\ngoal (2 subgoals):\n 1. \\<And>D.\n       \\<lbrakk>mR = R \\<inter> D; R = R;\n        (s, groupcast D m, s') \\<in> automaton.trans (np ii)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))\n 2. \\<And>d.\n       \\<lbrakk>mR = {d}; R = R;\n        (s, unicast d m, s') \\<in> automaton.trans (np ii);\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))", "hence \"((\\<sigma>, NodeS ii (snd (sr s)) R), (R \\<inter> D):*cast(m), (\\<sigma>', NodeS ii (snd (sr s')) R))\n                                                                      \\<in> onode_sos (trans (onp ii))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, snd (sr s)), groupcast D m, \\<sigma>', snd (sr s'))\n  \\<in> automaton.trans (onp ii)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS ii (snd (sr s)) R), (R \\<inter> D):*cast(m),\n     \\<sigma>', NodeS ii (snd (sr s')) R)\n    \\<in> onode_sos (automaton.trans (onp ii))", "by (rule onode_gcast)"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), (R \\<inter> D):*cast(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (2 subgoals):\n 1. \\<And>D.\n       \\<lbrakk>mR = R \\<inter> D; R = R;\n        (s, groupcast D m, s') \\<in> automaton.trans (np ii)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))\n 2. \\<And>d.\n       \\<lbrakk>mR = {d}; R = R;\n        (s, unicast d m, s') \\<in> automaton.trans (np ii);\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))", "with \\<open>mR = R \\<inter> D\\<close>"], ["proof (chain)\npicking this:\n  mR = R \\<inter> D\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), (R \\<inter> D):*cast(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))", "show \"((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m), (\\<sigma>', NodeS ii (snd (sr s')) R))\n                                                                      \\<in> onode_sos (trans (onp ii))\""], ["proof (prove)\nusing this:\n  mR = R \\<inter> D\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), (R \\<inter> D):*cast(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m), \\<sigma>',\n     NodeS ii (snd (sr s')) R)\n    \\<in> onode_sos (automaton.trans (onp ii))", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>mR = {d}; R = R;\n        (s, unicast d m, s') \\<in> automaton.trans (np ii);\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>mR = {d}; R = R;\n        (s, unicast d m, s') \\<in> automaton.trans (np ii);\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))", "fix d"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>mR = {d}; R = R;\n        (s, unicast d m, s') \\<in> automaton.trans (np ii);\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))", "assume \"(s, unicast d m, s') \\<in> trans (np ii)\"\n             and \"d \\<in> R\"\n             and \"mR = {d}\""], ["proof (state)\nthis:\n  (s, unicast d m, s') \\<in> automaton.trans (np ii)\n  d \\<in> R\n  mR = {d}\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>mR = {d}; R = R;\n        (s, unicast d m, s') \\<in> automaton.trans (np ii);\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))", "from \\<open>\\<sigma> ii = fst (sr s)\\<close> \\<open>\\<sigma>' ii = fst (sr s')\\<close> and this(1)"], ["proof (chain)\npicking this:\n  \\<sigma> ii = fst (sr s)\n  \\<sigma>' ii = fst (sr s')\n  (s, unicast d m, s') \\<in> automaton.trans (np ii)", "have \"((\\<sigma>, snd (sr s)), unicast d m, (\\<sigma>', snd (sr s'))) \\<in> trans (onp ii)\""], ["proof (prove)\nusing this:\n  \\<sigma> ii = fst (sr s)\n  \\<sigma>' ii = fst (sr s')\n  (s, unicast d m, s') \\<in> automaton.trans (np ii)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (sr s)), unicast d m, \\<sigma>', snd (sr s'))\n    \\<in> automaton.trans (onp ii)", "by (rule trans)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (sr s)), unicast d m, \\<sigma>', snd (sr s'))\n  \\<in> automaton.trans (onp ii)\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>mR = {d}; R = R;\n        (s, unicast d m, s') \\<in> automaton.trans (np ii);\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))", "hence \"((\\<sigma>, NodeS ii (snd (sr s)) R), {d}:*cast(m), (\\<sigma>', NodeS ii (snd (sr s')) R))\n                                                                      \\<in> onode_sos (trans (onp ii))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, snd (sr s)), unicast d m, \\<sigma>', snd (sr s'))\n  \\<in> automaton.trans (onp ii)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS ii (snd (sr s)) R), {d}:*cast(m), \\<sigma>',\n     NodeS ii (snd (sr s')) R)\n    \\<in> onode_sos (automaton.trans (onp ii))", "using \\<open>d\\<in>R\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, snd (sr s)), unicast d m, \\<sigma>', snd (sr s'))\n  \\<in> automaton.trans (onp ii)\n  d \\<in> R\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS ii (snd (sr s)) R), {d}:*cast(m), \\<sigma>',\n     NodeS ii (snd (sr s')) R)\n    \\<in> onode_sos (automaton.trans (onp ii))", "by (rule onode_ucast)"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), {d}:*cast(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (1 subgoal):\n 1. \\<And>d.\n       \\<lbrakk>mR = {d}; R = R;\n        (s, unicast d m, s') \\<in> automaton.trans (np ii);\n        d \\<in> R\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m),\n                          \\<sigma>', NodeS ii (snd (sr s')) R)\n                         \\<in> onode_sos (automaton.trans (onp ii))", "with \\<open>mR={d}\\<close>"], ["proof (chain)\npicking this:\n  mR = {d}\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), {d}:*cast(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))", "show \"((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m), (\\<sigma>', NodeS ii (snd (sr s')) R))\n                                                                      \\<in> onode_sos (trans (onp ii))\""], ["proof (prove)\nusing this:\n  mR = {d}\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), {d}:*cast(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m), \\<sigma>',\n     NodeS ii (snd (sr s')) R)\n    \\<in> onode_sos (automaton.trans (onp ii))", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (2 subgoals):\n 1. \\<And>i R s s' \\<zeta> mR.\n       \\<lbrakk>(s, mR:*cast(m), s')\n                \\<in> automaton.trans (pnet np \\<langle>i; R\\<rangle>);\n        s \\<in> reachable (pnet np \\<langle>i; R\\<rangle>) TT;\n        netgmap sr s =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips \\<langle>i; R\\<rangle>)\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree \\<langle>i; R\\<rangle>\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp \\<langle>i; R\\<rangle>)\n 2. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "with \\<open>ns = NodeS ii s R\\<close> \\<open>ns' = NodeS ii s' R\\<close>"], ["proof (chain)\npicking this:\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))", "show \"((\\<sigma>, snd (netgmap sr ns)), mR:*cast(m), (\\<sigma>', snd (netgmap sr ns')))\n                                                             \\<in> trans (opnet onp \\<langle>ii; R\\<^sub>i\\<rangle>)\""], ["proof (prove)\nusing this:\n  ns = NodeS ii s R\n  ns' = NodeS ii s' R\n  ((\\<sigma>, NodeS ii (snd (sr s)) R), mR:*cast(m), \\<sigma>',\n   NodeS ii (snd (sr s')) R)\n  \\<in> onode_sos (automaton.trans (onp ii))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr ns)), mR:*cast(m), \\<sigma>',\n     snd (netgmap sr ns'))\n    \\<in> automaton.trans (opnet onp \\<langle>ii; R\\<^sub>i\\<rangle>)", "by (simp add: onode_comps)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr ns)), mR:*cast(m), \\<sigma>',\n   snd (netgmap sr ns'))\n  \\<in> automaton.trans (opnet onp \\<langle>ii; R\\<^sub>i\\<rangle>)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "fix n1 n2 s s' \\<zeta> mR"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "assume IH1: \"\\<And>s s' \\<zeta> mR. (s, mR:*cast(m), s') \\<in> trans (pnet np n1)\n                         \\<Longrightarrow> s \\<in> reachable (pnet np n1) TT\n                         \\<Longrightarrow> netgmap sr s = netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>)\n                         \\<Longrightarrow> netgmap sr s' = netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s'))\n                         \\<Longrightarrow> wf_net_tree n1\n                         \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                                                        \\<in> trans (opnet onp n1)\"\n        and IH2: \"\\<And>s s' \\<zeta> mR. (s, mR:*cast(m), s') \\<in> trans (pnet np n2)\n                         \\<Longrightarrow> s \\<in> reachable (pnet np n2) TT\n                         \\<Longrightarrow> netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>)\n                         \\<Longrightarrow> netgmap sr s' = netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'))\n                         \\<Longrightarrow> wf_net_tree n2\n                         \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                                                        \\<in> trans (opnet onp n2)\"\n        and \"(s, mR:*cast(m), s') \\<in> trans (pnet np (n1 \\<parallel> n2))\"\n        and sr: \"s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\"\n        and nm: \"netgmap sr s = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\"\n        and nm': \"netgmap sr s' = netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>', snd (netgmap sr s'))\"\n        and \"wf_net_tree (n1 \\<parallel> n2)\""], ["proof (state)\nthis:\n  \\<lbrakk>(?s, ?mR:*cast(m), ?s') \\<in> automaton.trans (pnet np n1);\n   ?s \\<in> reachable (pnet np n1) TT;\n   netgmap sr ?s = netmask (net_tree_ips n1) (\\<sigma>, ?\\<zeta>);\n   netgmap sr ?s' =\n   netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr ?s'));\n   wf_net_tree n1\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr ?s)), ?mR:*cast(m),\n                     \\<sigma>', snd (netgmap sr ?s'))\n                    \\<in> automaton.trans (opnet onp n1)\n  \\<lbrakk>(?s, ?mR:*cast(m), ?s') \\<in> automaton.trans (pnet np n2);\n   ?s \\<in> reachable (pnet np n2) TT;\n   netgmap sr ?s = netmask (net_tree_ips n2) (\\<sigma>, ?\\<zeta>);\n   netgmap sr ?s' =\n   netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr ?s'));\n   wf_net_tree n2\\<rbrakk>\n  \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr ?s)), ?mR:*cast(m),\n                     \\<sigma>', snd (netgmap sr ?s'))\n                    \\<in> automaton.trans (opnet onp n2)\n  (s, mR:*cast(m), s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\n  s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n  netgmap sr s =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  netgmap sr s' =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr s'))\n  wf_net_tree (n1 \\<parallel> n2)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from this(3)"], ["proof (chain)\npicking this:\n  (s, mR:*cast(m), s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))", "have \"(s, mR:*cast(m), s') \\<in> pnet_sos (trans (pnet np n1)) (trans (pnet np n2))\""], ["proof (prove)\nusing this:\n  (s, mR:*cast(m), s') \\<in> automaton.trans (pnet np (n1 \\<parallel> n2))\n\ngoal (1 subgoal):\n 1. (s, mR:*cast(m), s')\n    \\<in> pnet_sos (automaton.trans (pnet np n1))\n           (automaton.trans (pnet np n2))", "by simp"], ["proof (state)\nthis:\n  (s, mR:*cast(m), s')\n  \\<in> pnet_sos (automaton.trans (pnet np n1))\n         (automaton.trans (pnet np n2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "then"], ["proof (chain)\npicking this:\n  (s, mR:*cast(m), s')\n  \\<in> pnet_sos (automaton.trans (pnet np n1))\n         (automaton.trans (pnet np n2))", "obtain s1 s1' s2 s2' H K\n        where \"s  = SubnetS s1  s2\"\n          and \"s' = SubnetS s1' s2'\"\n          and \"H \\<subseteq> mR\"\n          and \"K \\<inter> mR = {}\"\n          and trtr: \"((s1, mR:*cast(m), s1') \\<in> trans (pnet np n1)\n                                  \\<and> (s2, H\\<not>K:arrive(m), s2') \\<in> trans (pnet np n2))\n                    \\<or> ((s1, H\\<not>K:arrive(m), s1') \\<in> trans (pnet np n1)\n                                  \\<and> (s2, mR:*cast(m), s2') \\<in> trans (pnet np n2))\""], ["proof (prove)\nusing this:\n  (s, mR:*cast(m), s')\n  \\<in> pnet_sos (automaton.trans (pnet np n1))\n         (automaton.trans (pnet np n2))\n\ngoal (1 subgoal):\n 1. (\\<And>s1 s2 s1' s2' H K.\n        \\<lbrakk>s = SubnetS s1 s2; s' = SubnetS s1' s2'; H \\<subseteq> mR;\n         K \\<inter> mR = {};\n         (s1, mR:*cast(m), s1') \\<in> automaton.trans (pnet np n1) \\<and>\n         (s2, H\\<not>K:arrive(m), s2')\n         \\<in> automaton.trans (pnet np n2) \\<or>\n         (s1, H\\<not>K:arrive(m), s1')\n         \\<in> automaton.trans (pnet np n1) \\<and>\n         (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule partial_castTE) metis+"], ["proof (state)\nthis:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  H \\<subseteq> mR\n  K \\<inter> mR = {}\n  (s1, mR:*cast(m), s1') \\<in> automaton.trans (pnet np n1) \\<and>\n  (s2, H\\<not>K:arrive(m), s2') \\<in> automaton.trans (pnet np n2) \\<or>\n  (s1, H\\<not>K:arrive(m), s1') \\<in> automaton.trans (pnet np n1) \\<and>\n  (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from \\<open>wf_net_tree (n1 \\<parallel> n2)\\<close>"], ["proof (chain)\npicking this:\n  wf_net_tree (n1 \\<parallel> n2)", "have \"wf_net_tree n1\"\n                                    and \"wf_net_tree n2\"\n                                    and \"net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\""], ["proof (prove)\nusing this:\n  wf_net_tree (n1 \\<parallel> n2)\n\ngoal (1 subgoal):\n 1. wf_net_tree n1 &&&\n    wf_net_tree n2 &&& net_tree_ips n1 \\<inter> net_tree_ips n2 = {}", "by auto"], ["proof (state)\nthis:\n  wf_net_tree n1\n  wf_net_tree n2\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from sr [simplified \\<open>s = SubnetS s1 s2\\<close>]"], ["proof (chain)\npicking this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT", "have \"s1 \\<in> reachable (pnet np n1) TT\""], ["proof (prove)\nusing this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n\ngoal (1 subgoal):\n 1. s1 \\<in> reachable (pnet np n1) TT", "by (rule subnet_reachable(1))"], ["proof (state)\nthis:\n  s1 \\<in> reachable (pnet np n1) TT\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "hence \"net_ips s1 = net_tree_ips n1\""], ["proof (prove)\nusing this:\n  s1 \\<in> reachable (pnet np n1) TT\n\ngoal (1 subgoal):\n 1. net_ips s1 = net_tree_ips n1", "by (rule pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  net_ips s1 = net_tree_ips n1\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "with trtr"], ["proof (chain)\npicking this:\n  (s1, mR:*cast(m), s1') \\<in> automaton.trans (pnet np n1) \\<and>\n  (s2, H\\<not>K:arrive(m), s2') \\<in> automaton.trans (pnet np n2) \\<or>\n  (s1, H\\<not>K:arrive(m), s1') \\<in> automaton.trans (pnet np n1) \\<and>\n  (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\n  net_ips s1 = net_tree_ips n1", "have \"net_ips s1' = net_tree_ips n1\""], ["proof (prove)\nusing this:\n  (s1, mR:*cast(m), s1') \\<in> automaton.trans (pnet np n1) \\<and>\n  (s2, H\\<not>K:arrive(m), s2') \\<in> automaton.trans (pnet np n2) \\<or>\n  (s1, H\\<not>K:arrive(m), s1') \\<in> automaton.trans (pnet np n1) \\<and>\n  (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\n  net_ips s1 = net_tree_ips n1\n\ngoal (1 subgoal):\n 1. net_ips s1' = net_tree_ips n1", "by (metis pnet_maintains_dom)"], ["proof (state)\nthis:\n  net_ips s1' = net_tree_ips n1\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from sr [simplified \\<open>s = SubnetS s1 s2\\<close>]"], ["proof (chain)\npicking this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT", "have \"s2 \\<in> reachable (pnet np n2) TT\""], ["proof (prove)\nusing this:\n  SubnetS s1 s2 \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT\n\ngoal (1 subgoal):\n 1. s2 \\<in> reachable (pnet np n2) TT", "by (rule subnet_reachable(2))"], ["proof (state)\nthis:\n  s2 \\<in> reachable (pnet np n2) TT\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "hence \"net_ips s2 = net_tree_ips n2\""], ["proof (prove)\nusing this:\n  s2 \\<in> reachable (pnet np n2) TT\n\ngoal (1 subgoal):\n 1. net_ips s2 = net_tree_ips n2", "by (rule pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "with trtr"], ["proof (chain)\npicking this:\n  (s1, mR:*cast(m), s1') \\<in> automaton.trans (pnet np n1) \\<and>\n  (s2, H\\<not>K:arrive(m), s2') \\<in> automaton.trans (pnet np n2) \\<or>\n  (s1, H\\<not>K:arrive(m), s1') \\<in> automaton.trans (pnet np n1) \\<and>\n  (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\n  net_ips s2 = net_tree_ips n2", "have \"net_ips s2' = net_tree_ips n2\""], ["proof (prove)\nusing this:\n  (s1, mR:*cast(m), s1') \\<in> automaton.trans (pnet np n1) \\<and>\n  (s2, H\\<not>K:arrive(m), s2') \\<in> automaton.trans (pnet np n2) \\<or>\n  (s1, H\\<not>K:arrive(m), s1') \\<in> automaton.trans (pnet np n1) \\<and>\n  (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. net_ips s2' = net_tree_ips n2", "by (metis pnet_maintains_dom)"], ["proof (state)\nthis:\n  net_ips s2' = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from nm [simplified \\<open>s = SubnetS s1 s2\\<close>]\n           \\<open>net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\\<close>\n           \\<open>net_ips s1 = net_tree_ips n1\\<close>\n           \\<open>net_ips s2 = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2", "have \"netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s1 =\n    netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))", "by (rule netgmap_subnet_split1)"], ["proof (state)\nthis:\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from nm' [simplified \\<open>s' = SubnetS s1' s2'\\<close>]\n           \\<open>net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\\<close>\n           \\<open>net_ips s1' = net_tree_ips n1\\<close>\n           \\<open>net_ips s2' = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr (SubnetS s1' s2') =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr (SubnetS s1' s2')))\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  net_ips s1' = net_tree_ips n1\n  net_ips s2' = net_tree_ips n2", "have \"netgmap sr s1' = netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1' s2') =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr (SubnetS s1' s2')))\n  net_tree_ips n1 \\<inter> net_tree_ips n2 = {}\n  net_ips s1' = net_tree_ips n1\n  net_ips s2' = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s1' =\n    netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))", "by (rule netgmap_subnet_split1)"], ["proof (state)\nthis:\n  netgmap sr s1' =\n  netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from nm [simplified \\<open>s = SubnetS s1 s2\\<close>]\n           \\<open>net_ips s1 = net_tree_ips n1\\<close>\n           \\<open>net_ips s2 = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2", "have \"netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1 s2) =\n  netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>)\n  net_ips s1 = net_tree_ips n1\n  net_ips s2 = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s2 =\n    netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))", "by (rule netgmap_subnet_split2)"], ["proof (state)\nthis:\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from nm' [simplified \\<open>s' = SubnetS s1' s2'\\<close>]\n           \\<open>net_ips s1' = net_tree_ips n1\\<close>\n           \\<open>net_ips s2' = net_tree_ips n2\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr (SubnetS s1' s2') =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr (SubnetS s1' s2')))\n  net_ips s1' = net_tree_ips n1\n  net_ips s2' = net_tree_ips n2", "have \"netgmap sr s2' = netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\""], ["proof (prove)\nusing this:\n  netgmap sr (SubnetS s1' s2') =\n  netmask (net_tree_ips (n1 \\<parallel> n2))\n   (\\<sigma>', snd (netgmap sr (SubnetS s1' s2')))\n  net_ips s1' = net_tree_ips n1\n  net_ips s2' = net_tree_ips n2\n\ngoal (1 subgoal):\n 1. netgmap sr s2' =\n    netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))", "by (rule netgmap_subnet_split2)"], ["proof (state)\nthis:\n  netgmap sr s2' =\n  netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\n\ngoal (1 subgoal):\n 1. \\<And>n1 n2 s s' \\<zeta> mR.\n       \\<lbrakk>\\<And>s s' \\<zeta> mR.\n                   \\<lbrakk>(s, mR:*cast(m), s')\n                            \\<in> automaton.trans (pnet np n1);\n                    s \\<in> reachable (pnet np n1) TT;\n                    netgmap sr s =\n                    netmask (net_tree_ips n1) (\\<sigma>, \\<zeta>);\n                    netgmap sr s' =\n                    netmask (net_tree_ips n1)\n                     (\\<sigma>', snd (netgmap sr s'));\n                    wf_net_tree n1\\<rbrakk>\n                   \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)),\nmR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n                                     \\<in> automaton.trans (opnet onp n1);\n        \\<And>s s' \\<zeta> mR.\n           \\<lbrakk>(s, mR:*cast(m), s') \\<in> automaton.trans (pnet np n2);\n            s \\<in> reachable (pnet np n2) TT;\n            netgmap sr s = netmask (net_tree_ips n2) (\\<sigma>, \\<zeta>);\n            netgmap sr s' =\n            netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s'));\n            wf_net_tree n2\\<rbrakk>\n           \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                              \\<sigma>', snd (netgmap sr s'))\n                             \\<in> automaton.trans (opnet onp n2);\n        (s, mR:*cast(m), s')\n        \\<in> automaton.trans (pnet np (n1 \\<parallel> n2));\n        s \\<in> reachable (pnet np (n1 \\<parallel> n2)) TT;\n        netgmap sr s =\n        netmask (net_tree_ips (n1 \\<parallel> n2)) (\\<sigma>, \\<zeta>);\n        netgmap sr s' =\n        netmask (net_tree_ips (n1 \\<parallel> n2))\n         (\\<sigma>', snd (netgmap sr s'));\n        wf_net_tree (n1 \\<parallel> n2)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                          \\<sigma>', snd (netgmap sr s'))\n                         \\<in> automaton.trans\n                                (opnet onp (n1 \\<parallel> n2))", "from trtr"], ["proof (chain)\npicking this:\n  (s1, mR:*cast(m), s1') \\<in> automaton.trans (pnet np n1) \\<and>\n  (s2, H\\<not>K:arrive(m), s2') \\<in> automaton.trans (pnet np n2) \\<or>\n  (s1, H\\<not>K:arrive(m), s1') \\<in> automaton.trans (pnet np n1) \\<and>\n  (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)", "show \"((\\<sigma>, snd (netgmap sr s)), mR:*cast(m), (\\<sigma>', snd (netgmap sr s')))\n                                                              \\<in> trans (opnet onp (n1 \\<parallel> n2))\""], ["proof (prove)\nusing this:\n  (s1, mR:*cast(m), s1') \\<in> automaton.trans (pnet np n1) \\<and>\n  (s2, H\\<not>K:arrive(m), s2') \\<in> automaton.trans (pnet np n2) \\<or>\n  (s1, H\\<not>K:arrive(m), s1') \\<in> automaton.trans (pnet np n1) \\<and>\n  (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "proof (elim disjE conjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(s1, mR:*cast(m), s1') \\<in> automaton.trans (pnet np n1);\n     (s2, H\\<not>K:arrive(m), s2')\n     \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                       \\<sigma>', snd (netgmap sr s'))\n                      \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n 2. \\<lbrakk>(s1, H\\<not>K:arrive(m), s1')\n             \\<in> automaton.trans (pnet np n1);\n     (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                       \\<sigma>', snd (netgmap sr s'))\n                      \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "assume \"(s1, mR:*cast(m), s1') \\<in> trans (pnet np n1)\"\n           and \"(s2, H\\<not>K:arrive(m), s2') \\<in> trans (pnet np n2)\""], ["proof (state)\nthis:\n  (s1, mR:*cast(m), s1') \\<in> automaton.trans (pnet np n1)\n  (s2, H\\<not>K:arrive(m), s2') \\<in> automaton.trans (pnet np n2)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(s1, mR:*cast(m), s1') \\<in> automaton.trans (pnet np n1);\n     (s2, H\\<not>K:arrive(m), s2')\n     \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                       \\<sigma>', snd (netgmap sr s'))\n                      \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n 2. \\<lbrakk>(s1, H\\<not>K:arrive(m), s1')\n             \\<in> automaton.trans (pnet np n1);\n     (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                       \\<sigma>', snd (netgmap sr s'))\n                      \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "from \\<open>(s1, mR:*cast(m), s1') \\<in> trans (pnet np n1)\\<close>\n             \\<open>s1 \\<in> reachable (pnet np n1) TT\\<close>\n             \\<open>netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\\<close>\n             \\<open>netgmap sr s1' = netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\\<close>\n             \\<open>wf_net_tree n1\\<close>"], ["proof (chain)\npicking this:\n  (s1, mR:*cast(m), s1') \\<in> automaton.trans (pnet np n1)\n  s1 \\<in> reachable (pnet np n1) TT\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n  netgmap sr s1' =\n  netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\n  wf_net_tree n1", "have \"((\\<sigma>, snd (netgmap sr s1)), mR:*cast(m), (\\<sigma>', snd (netgmap sr s1'))) \\<in> trans (opnet onp n1)\""], ["proof (prove)\nusing this:\n  (s1, mR:*cast(m), s1') \\<in> automaton.trans (pnet np n1)\n  s1 \\<in> reachable (pnet np n1) TT\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n  netgmap sr s1' =\n  netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\n  wf_net_tree n1\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s1)), mR:*cast(m), \\<sigma>',\n     snd (netgmap sr s1'))\n    \\<in> automaton.trans (opnet onp n1)", "by (rule IH1)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s1)), mR:*cast(m), \\<sigma>',\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(s1, mR:*cast(m), s1') \\<in> automaton.trans (pnet np n1);\n     (s2, H\\<not>K:arrive(m), s2')\n     \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                       \\<sigma>', snd (netgmap sr s'))\n                      \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n 2. \\<lbrakk>(s1, H\\<not>K:arrive(m), s1')\n             \\<in> automaton.trans (pnet np n1);\n     (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                       \\<sigma>', snd (netgmap sr s'))\n                      \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "moreover"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s1)), mR:*cast(m), \\<sigma>',\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(s1, mR:*cast(m), s1') \\<in> automaton.trans (pnet np n1);\n     (s2, H\\<not>K:arrive(m), s2')\n     \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                       \\<sigma>', snd (netgmap sr s'))\n                      \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n 2. \\<lbrakk>(s1, H\\<not>K:arrive(m), s1')\n             \\<in> automaton.trans (pnet np n1);\n     (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                       \\<sigma>', snd (netgmap sr s'))\n                      \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "from \\<open>(s2, H\\<not>K:arrive(m), s2') \\<in> trans (pnet np n2)\\<close>\n             \\<open>s2 \\<in> reachable (pnet np n2) TT\\<close>\n             \\<open>netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\\<close>\n             \\<open>netgmap sr s2' = netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\\<close>\n             \\<open>wf_net_tree n2\\<close>"], ["proof (chain)\npicking this:\n  (s2, H\\<not>K:arrive(m), s2') \\<in> automaton.trans (pnet np n2)\n  s2 \\<in> reachable (pnet np n2) TT\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n  netgmap sr s2' =\n  netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\n  wf_net_tree n2", "have \"((\\<sigma>, snd (netgmap sr s2)), H\\<not>K:arrive(m), (\\<sigma>', snd (netgmap sr s2'))) \\<in> trans (opnet onp n2)\""], ["proof (prove)\nusing this:\n  (s2, H\\<not>K:arrive(m), s2') \\<in> automaton.trans (pnet np n2)\n  s2 \\<in> reachable (pnet np n2) TT\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n  netgmap sr s2' =\n  netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\n  wf_net_tree n2\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s2)), H\\<not>K:arrive(m), \\<sigma>',\n     snd (netgmap sr s2'))\n    \\<in> automaton.trans (opnet onp n2)", "by (rule transfer_arrive')"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s2)), H\\<not>K:arrive(m), \\<sigma>',\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(s1, mR:*cast(m), s1') \\<in> automaton.trans (pnet np n1);\n     (s2, H\\<not>K:arrive(m), s2')\n     \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                       \\<sigma>', snd (netgmap sr s'))\n                      \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n 2. \\<lbrakk>(s1, H\\<not>K:arrive(m), s1')\n             \\<in> automaton.trans (pnet np n1);\n     (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                       \\<sigma>', snd (netgmap sr s'))\n                      \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "ultimately"], ["proof (chain)\npicking this:\n  ((\\<sigma>, snd (netgmap sr s1)), mR:*cast(m), \\<sigma>',\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n  ((\\<sigma>, snd (netgmap sr s2)), H\\<not>K:arrive(m), \\<sigma>',\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)", "have \"((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))), mR:*cast(m),\n                          (\\<sigma>', SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2'))))\n                             \\<in> opnet_sos (trans (opnet onp n1)) (trans (opnet onp n2))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, snd (netgmap sr s1)), mR:*cast(m), \\<sigma>',\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n  ((\\<sigma>, snd (netgmap sr s2)), H\\<not>K:arrive(m), \\<sigma>',\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))),\n     mR:*cast(m), \\<sigma>',\n     SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2')))\n    \\<in> opnet_sos (automaton.trans (opnet onp n1))\n           (automaton.trans (opnet onp n2))", "using \\<open>H \\<subseteq> mR\\<close> and \\<open>K \\<inter> mR = {}\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, snd (netgmap sr s1)), mR:*cast(m), \\<sigma>',\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n  ((\\<sigma>, snd (netgmap sr s2)), H\\<not>K:arrive(m), \\<sigma>',\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)\n  H \\<subseteq> mR\n  K \\<inter> mR = {}\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))),\n     mR:*cast(m), \\<sigma>',\n     SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2')))\n    \\<in> opnet_sos (automaton.trans (opnet onp n1))\n           (automaton.trans (opnet onp n2))", "by (rule opnet_sos.intros(1))"], ["proof (state)\nthis:\n  ((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))),\n   mR:*cast(m), \\<sigma>',\n   SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2')))\n  \\<in> opnet_sos (automaton.trans (opnet onp n1))\n         (automaton.trans (opnet onp n2))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(s1, mR:*cast(m), s1') \\<in> automaton.trans (pnet np n1);\n     (s2, H\\<not>K:arrive(m), s2')\n     \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                       \\<sigma>', snd (netgmap sr s'))\n                      \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n 2. \\<lbrakk>(s1, H\\<not>K:arrive(m), s1')\n             \\<in> automaton.trans (pnet np n1);\n     (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                       \\<sigma>', snd (netgmap sr s'))\n                      \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "with \\<open>s = SubnetS s1 s2\\<close> \\<open>s' = SubnetS s1' s2'\\<close>"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  ((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))),\n   mR:*cast(m), \\<sigma>',\n   SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2')))\n  \\<in> opnet_sos (automaton.trans (opnet onp n1))\n         (automaton.trans (opnet onp n2))", "show ?thesis"], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  ((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))),\n   mR:*cast(m), \\<sigma>',\n   SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2')))\n  \\<in> opnet_sos (automaton.trans (opnet onp n1))\n         (automaton.trans (opnet onp n2))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m), \\<sigma>',\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(s1, H\\<not>K:arrive(m), s1')\n             \\<in> automaton.trans (pnet np n1);\n     (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                       \\<sigma>', snd (netgmap sr s'))\n                      \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(s1, H\\<not>K:arrive(m), s1')\n             \\<in> automaton.trans (pnet np n1);\n     (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                       \\<sigma>', snd (netgmap sr s'))\n                      \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "assume \"(s1, H\\<not>K:arrive(m), s1') \\<in> trans (pnet np n1)\"\n           and \"(s2, mR:*cast(m), s2') \\<in> trans (pnet np n2)\""], ["proof (state)\nthis:\n  (s1, H\\<not>K:arrive(m), s1') \\<in> automaton.trans (pnet np n1)\n  (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(s1, H\\<not>K:arrive(m), s1')\n             \\<in> automaton.trans (pnet np n1);\n     (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                       \\<sigma>', snd (netgmap sr s'))\n                      \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "from \\<open>(s1, H\\<not>K:arrive(m), s1') \\<in> trans (pnet np n1)\\<close>\n             \\<open>s1 \\<in> reachable (pnet np n1) TT\\<close>\n             \\<open>netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\\<close>\n             \\<open>netgmap sr s1' = netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\\<close>\n             \\<open>wf_net_tree n1\\<close>"], ["proof (chain)\npicking this:\n  (s1, H\\<not>K:arrive(m), s1') \\<in> automaton.trans (pnet np n1)\n  s1 \\<in> reachable (pnet np n1) TT\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n  netgmap sr s1' =\n  netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\n  wf_net_tree n1", "have \"((\\<sigma>, snd (netgmap sr s1)), H\\<not>K:arrive(m), (\\<sigma>', snd (netgmap sr s1'))) \\<in> trans (opnet onp n1)\""], ["proof (prove)\nusing this:\n  (s1, H\\<not>K:arrive(m), s1') \\<in> automaton.trans (pnet np n1)\n  s1 \\<in> reachable (pnet np n1) TT\n  netgmap sr s1 = netmask (net_tree_ips n1) (\\<sigma>, snd (netgmap sr s1))\n  netgmap sr s1' =\n  netmask (net_tree_ips n1) (\\<sigma>', snd (netgmap sr s1'))\n  wf_net_tree n1\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s1)), H\\<not>K:arrive(m), \\<sigma>',\n     snd (netgmap sr s1'))\n    \\<in> automaton.trans (opnet onp n1)", "by (rule transfer_arrive')"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s1)), H\\<not>K:arrive(m), \\<sigma>',\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(s1, H\\<not>K:arrive(m), s1')\n             \\<in> automaton.trans (pnet np n1);\n     (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                       \\<sigma>', snd (netgmap sr s'))\n                      \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "moreover"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s1)), H\\<not>K:arrive(m), \\<sigma>',\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(s1, H\\<not>K:arrive(m), s1')\n             \\<in> automaton.trans (pnet np n1);\n     (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                       \\<sigma>', snd (netgmap sr s'))\n                      \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "from \\<open>(s2, mR:*cast(m), s2') \\<in> trans (pnet np n2)\\<close>\n             \\<open>s2 \\<in> reachable (pnet np n2) TT\\<close>\n             \\<open>netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\\<close>\n             \\<open>netgmap sr s2' = netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\\<close>\n             \\<open>wf_net_tree n2\\<close>"], ["proof (chain)\npicking this:\n  (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\n  s2 \\<in> reachable (pnet np n2) TT\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n  netgmap sr s2' =\n  netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\n  wf_net_tree n2", "have \"((\\<sigma>, snd (netgmap sr s2)), mR:*cast(m), (\\<sigma>', snd (netgmap sr s2'))) \\<in> trans (opnet onp n2)\""], ["proof (prove)\nusing this:\n  (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\n  s2 \\<in> reachable (pnet np n2) TT\n  netgmap sr s2 = netmask (net_tree_ips n2) (\\<sigma>, snd (netgmap sr s2))\n  netgmap sr s2' =\n  netmask (net_tree_ips n2) (\\<sigma>', snd (netgmap sr s2'))\n  wf_net_tree n2\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s2)), mR:*cast(m), \\<sigma>',\n     snd (netgmap sr s2'))\n    \\<in> automaton.trans (opnet onp n2)", "by (rule IH2)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s2)), mR:*cast(m), \\<sigma>',\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(s1, H\\<not>K:arrive(m), s1')\n             \\<in> automaton.trans (pnet np n1);\n     (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                       \\<sigma>', snd (netgmap sr s'))\n                      \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "ultimately"], ["proof (chain)\npicking this:\n  ((\\<sigma>, snd (netgmap sr s1)), H\\<not>K:arrive(m), \\<sigma>',\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n  ((\\<sigma>, snd (netgmap sr s2)), mR:*cast(m), \\<sigma>',\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)", "have \"((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))), mR:*cast(m),\n                          (\\<sigma>', SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2'))))\n                             \\<in> opnet_sos (trans (opnet onp n1)) (trans (opnet onp n2))\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, snd (netgmap sr s1)), H\\<not>K:arrive(m), \\<sigma>',\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n  ((\\<sigma>, snd (netgmap sr s2)), mR:*cast(m), \\<sigma>',\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))),\n     mR:*cast(m), \\<sigma>',\n     SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2')))\n    \\<in> opnet_sos (automaton.trans (opnet onp n1))\n           (automaton.trans (opnet onp n2))", "using \\<open>H \\<subseteq> mR\\<close> and \\<open>K \\<inter> mR = {}\\<close>"], ["proof (prove)\nusing this:\n  ((\\<sigma>, snd (netgmap sr s1)), H\\<not>K:arrive(m), \\<sigma>',\n   snd (netgmap sr s1'))\n  \\<in> automaton.trans (opnet onp n1)\n  ((\\<sigma>, snd (netgmap sr s2)), mR:*cast(m), \\<sigma>',\n   snd (netgmap sr s2'))\n  \\<in> automaton.trans (opnet onp n2)\n  H \\<subseteq> mR\n  K \\<inter> mR = {}\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))),\n     mR:*cast(m), \\<sigma>',\n     SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2')))\n    \\<in> opnet_sos (automaton.trans (opnet onp n1))\n           (automaton.trans (opnet onp n2))", "by (rule opnet_sos.intros(2))"], ["proof (state)\nthis:\n  ((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))),\n   mR:*cast(m), \\<sigma>',\n   SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2')))\n  \\<in> opnet_sos (automaton.trans (opnet onp n1))\n         (automaton.trans (opnet onp n2))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(s1, H\\<not>K:arrive(m), s1')\n             \\<in> automaton.trans (pnet np n1);\n     (s2, mR:*cast(m), s2') \\<in> automaton.trans (pnet np n2)\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m),\n                       \\<sigma>', snd (netgmap sr s'))\n                      \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "with \\<open>s = SubnetS s1 s2\\<close> \\<open>s' = SubnetS s1' s2'\\<close>"], ["proof (chain)\npicking this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  ((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))),\n   mR:*cast(m), \\<sigma>',\n   SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2')))\n  \\<in> opnet_sos (automaton.trans (opnet onp n1))\n         (automaton.trans (opnet onp n2))", "show ?thesis"], ["proof (prove)\nusing this:\n  s = SubnetS s1 s2\n  s' = SubnetS s1' s2'\n  ((\\<sigma>, SubnetS (snd (netgmap sr s1)) (snd (netgmap sr s2))),\n   mR:*cast(m), \\<sigma>',\n   SubnetS (snd (netgmap sr s1')) (snd (netgmap sr s2')))\n  \\<in> opnet_sos (automaton.trans (opnet onp n1))\n         (automaton.trans (opnet onp n2))\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m), \\<sigma>',\n     snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m), \\<sigma>',\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m), \\<sigma>',\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp (n1 \\<parallel> n2))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m), \\<sigma>',\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "with \\<open>\\<zeta> = snd (netgmap sr s)\\<close>"], ["proof (chain)\npicking this:\n  \\<zeta> = snd (netgmap sr s)\n  ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m), \\<sigma>',\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)", "have \"((\\<sigma>, \\<zeta>), mR:*cast(m), (\\<sigma>', snd (netgmap sr s'))) \\<in> trans (opnet onp n)\""], ["proof (prove)\nusing this:\n  \\<zeta> = snd (netgmap sr s)\n  ((\\<sigma>, snd (netgmap sr s)), mR:*cast(m), \\<sigma>',\n   snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n    \\<in> automaton.trans (opnet onp n)", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "moreover"], ["proof (state)\nthis:\n  ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from \\<open>\\<forall>j. j\\<notin>net_ips (snd (netgmap sr s)) \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<close> \\<open>\\<zeta> = snd (netgmap sr s)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<notin> net_ips (snd (netgmap sr s)) \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<zeta> = snd (netgmap sr s)", "have \"\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<notin> net_ips (snd (netgmap sr s)) \\<longrightarrow>\n     \\<sigma>' j = \\<sigma> j\n  \\<zeta> = snd (netgmap sr s)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "by simp"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "moreover"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "note \\<open>netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\\<close>"], ["proof (state)\nthis:\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "ultimately"], ["proof (chain)\npicking this:\n  ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))", "show \"\\<exists>\\<sigma>' \\<zeta>'. ((\\<sigma>, \\<zeta>), mR:*cast(m), (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\n                           \\<and> (\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j)\n                           \\<and> netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', snd (netgmap sr s'))\n  \\<in> automaton.trans (opnet onp n)\n  \\<forall>j.\n     j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', snd (netgmap sr s'))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<zeta>'.\n     ((\\<sigma>, \\<zeta>), mR:*cast(m), \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet onp n) \\<and>\n     (\\<forall>j.\n         j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n         \\<sigma>' j = \\<sigma> j) \\<and>\n     netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transfer_pnet_action:\n  assumes \"s \\<in> reachable (pnet np n) TT\"\n      and \"netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\"\n      and \"wf_net_tree n\"\n      and \"(s, a, s') \\<in> trans (pnet np n)\"\n  obtains \\<sigma>' \\<zeta>' where \"((\\<sigma>, \\<zeta>), a, (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\"\n                  and \"\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j\"\n                  and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<zeta>'.\n        \\<lbrakk>((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n                 \\<in> automaton.trans (opnet onp n);\n         \\<forall>j.\n            j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n            \\<sigma>' j = \\<sigma> j;\n         netgmap sr s' =\n         netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof atomize_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "show \"\\<exists>\\<sigma>' \\<zeta>'. ((\\<sigma>, \\<zeta>), a, (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\n                  \\<and> (\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j)\n                  \\<and> netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "proof (cases a)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x11 x12.\n       a = x11:*cast(x12) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 2. \\<And>x21 x22.\n       a = x21:deliver(x22) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 3. \\<And>x31 x32 x33.\n       a = x31\\<not>x32:arrive(x33) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 4. \\<And>x41 x42.\n       a = connect(x41, x42) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 5. \\<And>x51 x52.\n       a = disconnect(x51, x52) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 6. \\<And>x61 x62 x63.\n       a = x61:newpkt(x62, x63) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 7. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "case node_cast"], ["proof (state)\nthis:\n  a = x11_:*cast(x12_)\n\ngoal (7 subgoals):\n 1. \\<And>x11 x12.\n       a = x11:*cast(x12) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 2. \\<And>x21 x22.\n       a = x21:deliver(x22) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 3. \\<And>x31 x32 x33.\n       a = x31\\<not>x32:arrive(x33) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 4. \\<And>x41 x42.\n       a = connect(x41, x42) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 5. \\<And>x51 x52.\n       a = disconnect(x51, x52) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 6. \\<And>x61 x62 x63.\n       a = x61:newpkt(x62, x63) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 7. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "with assms(4)"], ["proof (chain)\npicking this:\n  (s, a, s') \\<in> automaton.trans (pnet np n)\n  a = x11_:*cast(x12_)", "show ?thesis"], ["proof (prove)\nusing this:\n  (s, a, s') \\<in> automaton.trans (pnet np n)\n  a = x11_:*cast(x12_)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "by (auto elim!: transfer_cast [OF _ assms(1-3)])"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<zeta>'.\n     ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet onp n) \\<and>\n     (\\<forall>j.\n         j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n         \\<sigma>' j = \\<sigma> j) \\<and>\n     netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n\ngoal (6 subgoals):\n 1. \\<And>x21 x22.\n       a = x21:deliver(x22) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 2. \\<And>x31 x32 x33.\n       a = x31\\<not>x32:arrive(x33) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 3. \\<And>x41 x42.\n       a = connect(x41, x42) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 4. \\<And>x51 x52.\n       a = disconnect(x51, x52) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 5. \\<And>x61 x62 x63.\n       a = x61:newpkt(x62, x63) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 6. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x21 x22.\n       a = x21:deliver(x22) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 2. \\<And>x31 x32 x33.\n       a = x31\\<not>x32:arrive(x33) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 3. \\<And>x41 x42.\n       a = connect(x41, x42) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 4. \\<And>x51 x52.\n       a = disconnect(x51, x52) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 5. \\<And>x61 x62 x63.\n       a = x61:newpkt(x62, x63) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 6. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "case node_deliver"], ["proof (state)\nthis:\n  a = x21_:deliver(x22_)\n\ngoal (6 subgoals):\n 1. \\<And>x21 x22.\n       a = x21:deliver(x22) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 2. \\<And>x31 x32 x33.\n       a = x31\\<not>x32:arrive(x33) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 3. \\<And>x41 x42.\n       a = connect(x41, x42) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 4. \\<And>x51 x52.\n       a = disconnect(x51, x52) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 5. \\<And>x61 x62 x63.\n       a = x61:newpkt(x62, x63) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 6. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "with assms(4)"], ["proof (chain)\npicking this:\n  (s, a, s') \\<in> automaton.trans (pnet np n)\n  a = x21_:deliver(x22_)", "show ?thesis"], ["proof (prove)\nusing this:\n  (s, a, s') \\<in> automaton.trans (pnet np n)\n  a = x21_:deliver(x22_)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "by (auto elim!: transfer_deliver [OF _ assms(1-3)])"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<zeta>'.\n     ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet onp n) \\<and>\n     (\\<forall>j.\n         j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n         \\<sigma>' j = \\<sigma> j) \\<and>\n     netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n\ngoal (5 subgoals):\n 1. \\<And>x31 x32 x33.\n       a = x31\\<not>x32:arrive(x33) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 2. \\<And>x41 x42.\n       a = connect(x41, x42) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 3. \\<And>x51 x52.\n       a = disconnect(x51, x52) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 4. \\<And>x61 x62 x63.\n       a = x61:newpkt(x62, x63) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 5. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x31 x32 x33.\n       a = x31\\<not>x32:arrive(x33) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 2. \\<And>x41 x42.\n       a = connect(x41, x42) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 3. \\<And>x51 x52.\n       a = disconnect(x51, x52) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 4. \\<And>x61 x62 x63.\n       a = x61:newpkt(x62, x63) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 5. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "case node_arrive"], ["proof (state)\nthis:\n  a = x31_\\<not>x32_:arrive(x33_)\n\ngoal (5 subgoals):\n 1. \\<And>x31 x32 x33.\n       a = x31\\<not>x32:arrive(x33) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 2. \\<And>x41 x42.\n       a = connect(x41, x42) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 3. \\<And>x51 x52.\n       a = disconnect(x51, x52) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 4. \\<And>x61 x62 x63.\n       a = x61:newpkt(x62, x63) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 5. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "with assms(4)"], ["proof (chain)\npicking this:\n  (s, a, s') \\<in> automaton.trans (pnet np n)\n  a = x31_\\<not>x32_:arrive(x33_)", "show ?thesis"], ["proof (prove)\nusing this:\n  (s, a, s') \\<in> automaton.trans (pnet np n)\n  a = x31_\\<not>x32_:arrive(x33_)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "by (auto elim!: transfer_arrive [OF _ assms(1-3)])"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<zeta>'.\n     ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet onp n) \\<and>\n     (\\<forall>j.\n         j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n         \\<sigma>' j = \\<sigma> j) \\<and>\n     netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n\ngoal (4 subgoals):\n 1. \\<And>x41 x42.\n       a = connect(x41, x42) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 2. \\<And>x51 x52.\n       a = disconnect(x51, x52) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 3. \\<And>x61 x62 x63.\n       a = x61:newpkt(x62, x63) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 4. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x41 x42.\n       a = connect(x41, x42) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 2. \\<And>x51 x52.\n       a = disconnect(x51, x52) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 3. \\<And>x61 x62 x63.\n       a = x61:newpkt(x62, x63) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 4. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "case node_connect"], ["proof (state)\nthis:\n  a = connect(x41_, x42_)\n\ngoal (4 subgoals):\n 1. \\<And>x41 x42.\n       a = connect(x41, x42) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 2. \\<And>x51 x52.\n       a = disconnect(x51, x52) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 3. \\<And>x61 x62 x63.\n       a = x61:newpkt(x62, x63) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 4. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "with assms(4)"], ["proof (chain)\npicking this:\n  (s, a, s') \\<in> automaton.trans (pnet np n)\n  a = connect(x41_, x42_)", "show ?thesis"], ["proof (prove)\nusing this:\n  (s, a, s') \\<in> automaton.trans (pnet np n)\n  a = connect(x41_, x42_)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "by (auto elim!: transfer_connect [OF _ assms(1-3)])"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<zeta>'.\n     ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet onp n) \\<and>\n     (\\<forall>j.\n         j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n         \\<sigma>' j = \\<sigma> j) \\<and>\n     netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n\ngoal (3 subgoals):\n 1. \\<And>x51 x52.\n       a = disconnect(x51, x52) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 2. \\<And>x61 x62 x63.\n       a = x61:newpkt(x62, x63) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 3. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x51 x52.\n       a = disconnect(x51, x52) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 2. \\<And>x61 x62 x63.\n       a = x61:newpkt(x62, x63) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 3. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "case node_disconnect"], ["proof (state)\nthis:\n  a = disconnect(x51_, x52_)\n\ngoal (3 subgoals):\n 1. \\<And>x51 x52.\n       a = disconnect(x51, x52) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 2. \\<And>x61 x62 x63.\n       a = x61:newpkt(x62, x63) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 3. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "with assms(4)"], ["proof (chain)\npicking this:\n  (s, a, s') \\<in> automaton.trans (pnet np n)\n  a = disconnect(x51_, x52_)", "show ?thesis"], ["proof (prove)\nusing this:\n  (s, a, s') \\<in> automaton.trans (pnet np n)\n  a = disconnect(x51_, x52_)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "by (auto elim!: transfer_disconnect [OF _ assms(1-3)])"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<zeta>'.\n     ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet onp n) \\<and>\n     (\\<forall>j.\n         j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n         \\<sigma>' j = \\<sigma> j) \\<and>\n     netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n\ngoal (2 subgoals):\n 1. \\<And>x61 x62 x63.\n       a = x61:newpkt(x62, x63) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 2. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x61 x62 x63.\n       a = x61:newpkt(x62, x63) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 2. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "case node_newpkt"], ["proof (state)\nthis:\n  a = x61_:newpkt(x62_, x63_)\n\ngoal (2 subgoals):\n 1. \\<And>x61 x62 x63.\n       a = x61:newpkt(x62, x63) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 2. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "with assms(4)"], ["proof (chain)\npicking this:\n  (s, a, s') \\<in> automaton.trans (pnet np n)\n  a = x61_:newpkt(x62_, x63_)", "have False"], ["proof (prove)\nusing this:\n  (s, a, s') \\<in> automaton.trans (pnet np n)\n  a = x61_:newpkt(x62_, x63_)\n\ngoal (1 subgoal):\n 1. False", "by (metis pnet_never_newpkt)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>x61 x62 x63.\n       a = x61:newpkt(x62, x63) \\<Longrightarrow>\n       \\<exists>\\<sigma>' \\<zeta>'.\n          ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n          \\<in> automaton.trans (opnet onp n) \\<and>\n          (\\<forall>j.\n              j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n              \\<sigma>' j = \\<sigma> j) \\<and>\n          netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n 2. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", ".."], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<zeta>'.\n     ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet onp n) \\<and>\n     (\\<forall>j.\n         j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n         \\<sigma>' j = \\<sigma> j) \\<and>\n     netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n\ngoal (1 subgoal):\n 1. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "case node_tau"], ["proof (state)\nthis:\n  a = \\<tau>\\<^sub>n\n\ngoal (1 subgoal):\n 1. a = \\<tau>\\<^sub>n \\<Longrightarrow>\n    \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "with assms(4)"], ["proof (chain)\npicking this:\n  (s, a, s') \\<in> automaton.trans (pnet np n)\n  a = \\<tau>\\<^sub>n", "show ?thesis"], ["proof (prove)\nusing this:\n  (s, a, s') \\<in> automaton.trans (pnet np n)\n  a = \\<tau>\\<^sub>n\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (opnet onp n) \\<and>\n       (\\<forall>j.\n           j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n           \\<sigma>' j = \\<sigma> j) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "by (auto elim!: transfer_tau [OF _ assms(1-3), simplified])"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<zeta>'.\n     ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet onp n) \\<and>\n     (\\<forall>j.\n         j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n         \\<sigma>' j = \\<sigma> j) \\<and>\n     netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<zeta>'.\n     ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (opnet onp n) \\<and>\n     (\\<forall>j.\n         j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n         \\<sigma>' j = \\<sigma> j) \\<and>\n     netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transfer_action_pnet_closed:\n  assumes \"(s, a, s') \\<in> trans (closed (pnet np n))\"\n  obtains a' where \"(s, a', s') \\<in> trans (pnet np n)\"\n               and \"\\<And>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'. \\<lbrakk> ((\\<sigma>, \\<zeta>), a', (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n);\n                                  (\\<forall>j. j\\<notin>net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j) \\<rbrakk>\n                            \\<Longrightarrow> ((\\<sigma>, \\<zeta>), a, (\\<sigma>', \\<zeta>')) \\<in> trans (oclosed (opnet onp n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a'.\n        \\<lbrakk>(s, a', s') \\<in> automaton.trans (pnet np n);\n         \\<And>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n            \\<lbrakk>((\\<sigma>, \\<zeta>), a', \\<sigma>', \\<zeta>')\n                     \\<in> automaton.trans (opnet onp n);\n             \\<forall>j.\n                j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n                \\<sigma>' j = \\<sigma> j\\<rbrakk>\n            \\<Longrightarrow> ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n                              \\<in> automaton.trans\n                                     (oclosed (opnet onp n))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a'.\n       (s, a', s') \\<in> automaton.trans (pnet np n) \\<and>\n       (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n           ((\\<sigma>, \\<zeta>), a', \\<sigma>', \\<zeta>')\n           \\<in> automaton.trans (opnet onp n) \\<longrightarrow>\n           (\\<forall>j.\n               j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n               \\<sigma>' j = \\<sigma> j) \\<longrightarrow>\n           ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n           \\<in> automaton.trans (oclosed (opnet onp n)))", "from assms"], ["proof (chain)\npicking this:\n  (s, a, s') \\<in> automaton.trans (closed (pnet np n))", "have \"(s, a, s') \\<in> cnet_sos (trans (pnet np n))\""], ["proof (prove)\nusing this:\n  (s, a, s') \\<in> automaton.trans (closed (pnet np n))\n\ngoal (1 subgoal):\n 1. (s, a, s') \\<in> cnet_sos (automaton.trans (pnet np n))", "by simp"], ["proof (state)\nthis:\n  (s, a, s') \\<in> cnet_sos (automaton.trans (pnet np n))\n\ngoal (1 subgoal):\n 1. \\<exists>a'.\n       (s, a', s') \\<in> automaton.trans (pnet np n) \\<and>\n       (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n           ((\\<sigma>, \\<zeta>), a', \\<sigma>', \\<zeta>')\n           \\<in> automaton.trans (opnet onp n) \\<longrightarrow>\n           (\\<forall>j.\n               j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n               \\<sigma>' j = \\<sigma> j) \\<longrightarrow>\n           ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n           \\<in> automaton.trans (oclosed (opnet onp n)))", "thus \"\\<exists>a'. (s, a', s') \\<in> trans (pnet np n)\n                \\<and> (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'. ((\\<sigma>, \\<zeta>), a', (\\<sigma>', \\<zeta>')) \\<in> trans (opnet onp n)\n                               \\<longrightarrow> (\\<forall>j. j \\<notin> net_ips \\<zeta> \\<longrightarrow> \\<sigma>' j = \\<sigma> j)\n                               \\<longrightarrow> ((\\<sigma>, \\<zeta>), a, (\\<sigma>', \\<zeta>')) \\<in> trans (oclosed (opnet onp n)))\""], ["proof (prove)\nusing this:\n  (s, a, s') \\<in> cnet_sos (automaton.trans (pnet np n))\n\ngoal (1 subgoal):\n 1. \\<exists>a'.\n       (s, a', s') \\<in> automaton.trans (pnet np n) \\<and>\n       (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n           ((\\<sigma>, \\<zeta>), a', \\<sigma>', \\<zeta>')\n           \\<in> automaton.trans (opnet onp n) \\<longrightarrow>\n           (\\<forall>j.\n               j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n               \\<sigma>' j = \\<sigma> j) \\<longrightarrow>\n           ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n           \\<in> automaton.trans (oclosed (opnet onp n)))", "proof cases"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a'.\n                            (s, a', s')\n                            \\<in> automaton.trans (pnet np n) \\<and>\n                            (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n                                ((\\<sigma>, \\<zeta>), a', \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (opnet onp n) \\<longrightarrow>\n                                (\\<forall>j.\n                                    j \\<notin> net_ips\n          \\<zeta> \\<longrightarrow>\n                                    \\<sigma>' j =\n                                    \\<sigma> j) \\<longrightarrow>\n                                ((\\<sigma>, \\<zeta>), a, \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (oclosed (opnet onp n)))\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a'.\n                            (s, a', s')\n                            \\<in> automaton.trans (pnet np n) \\<and>\n                            (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n                                ((\\<sigma>, \\<zeta>), a', \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (opnet onp n) \\<longrightarrow>\n                                (\\<forall>j.\n                                    j \\<notin> net_ips\n          \\<zeta> \\<longrightarrow>\n                                    \\<sigma>' j =\n                                    \\<sigma> j) \\<longrightarrow>\n                                ((\\<sigma>, \\<zeta>), a, \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (oclosed (opnet onp n)))\n 3. \\<And>R m.\n       \\<lbrakk>a = \\<tau>;\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a'.\n                            (s, a', s')\n                            \\<in> automaton.trans (pnet np n) \\<and>\n                            (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n                                ((\\<sigma>, \\<zeta>), a', \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (opnet onp n) \\<longrightarrow>\n                                (\\<forall>j.\n                                    j \\<notin> net_ips\n          \\<zeta> \\<longrightarrow>\n                                    \\<sigma>' j =\n                                    \\<sigma> j) \\<longrightarrow>\n                                ((\\<sigma>, \\<zeta>), a, \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (oclosed (opnet onp n)))\n 4. \\<lbrakk>a = \\<tau>;\n     (s, \\<tau>, s') \\<in> automaton.trans (pnet np n)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a'.\n                         (s, a', s')\n                         \\<in> automaton.trans (pnet np n) \\<and>\n                         (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n                             ((\\<sigma>, \\<zeta>), a', \\<sigma>', \\<zeta>')\n                             \\<in> automaton.trans\n                                    (opnet onp n) \\<longrightarrow>\n                             (\\<forall>j.\n                                 j \\<notin> net_ips\n       \\<zeta> \\<longrightarrow>\n                                 \\<sigma>' j = \\<sigma> j) \\<longrightarrow>\n                             ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n                             \\<in> automaton.trans (oclosed (opnet onp n)))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d);\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a'.\n                            (s, a', s')\n                            \\<in> automaton.trans (pnet np n) \\<and>\n                            (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n                                ((\\<sigma>, \\<zeta>), a', \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (opnet onp n) \\<longrightarrow>\n                                (\\<forall>j.\n                                    j \\<notin> net_ips\n          \\<zeta> \\<longrightarrow>\n                                    \\<sigma>' j =\n                                    \\<sigma> j) \\<longrightarrow>\n                                ((\\<sigma>, \\<zeta>), a, \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (oclosed (opnet onp n)))\n 6. \\<And>i K d di.\n       \\<lbrakk>a = i:newpkt(d, di);\n        (s, {i}\\<not>K:arrive(newpkt (d, di)), s')\n        \\<in> automaton.trans (pnet np n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a'.\n                            (s, a', s')\n                            \\<in> automaton.trans (pnet np n) \\<and>\n                            (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n                                ((\\<sigma>, \\<zeta>), a', \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (opnet onp n) \\<longrightarrow>\n                                (\\<forall>j.\n                                    j \\<notin> net_ips\n          \\<zeta> \\<longrightarrow>\n                                    \\<sigma>' j =\n                                    \\<sigma> j) \\<longrightarrow>\n                                ((\\<sigma>, \\<zeta>), a, \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (oclosed (opnet onp n)))", "case (cnet_cast R m)"], ["proof (state)\nthis:\n  a = \\<tau>\n  (s, R:*cast(m), s') \\<in> automaton.trans (pnet np n)\n\ngoal (6 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a'.\n                            (s, a', s')\n                            \\<in> automaton.trans (pnet np n) \\<and>\n                            (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n                                ((\\<sigma>, \\<zeta>), a', \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (opnet onp n) \\<longrightarrow>\n                                (\\<forall>j.\n                                    j \\<notin> net_ips\n          \\<zeta> \\<longrightarrow>\n                                    \\<sigma>' j =\n                                    \\<sigma> j) \\<longrightarrow>\n                                ((\\<sigma>, \\<zeta>), a, \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (oclosed (opnet onp n)))\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a'.\n                            (s, a', s')\n                            \\<in> automaton.trans (pnet np n) \\<and>\n                            (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n                                ((\\<sigma>, \\<zeta>), a', \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (opnet onp n) \\<longrightarrow>\n                                (\\<forall>j.\n                                    j \\<notin> net_ips\n          \\<zeta> \\<longrightarrow>\n                                    \\<sigma>' j =\n                                    \\<sigma> j) \\<longrightarrow>\n                                ((\\<sigma>, \\<zeta>), a, \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (oclosed (opnet onp n)))\n 3. \\<And>R m.\n       \\<lbrakk>a = \\<tau>;\n        (s, R:*cast(m), s') \\<in> automaton.trans (pnet np n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a'.\n                            (s, a', s')\n                            \\<in> automaton.trans (pnet np n) \\<and>\n                            (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n                                ((\\<sigma>, \\<zeta>), a', \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (opnet onp n) \\<longrightarrow>\n                                (\\<forall>j.\n                                    j \\<notin> net_ips\n          \\<zeta> \\<longrightarrow>\n                                    \\<sigma>' j =\n                                    \\<sigma> j) \\<longrightarrow>\n                                ((\\<sigma>, \\<zeta>), a, \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (oclosed (opnet onp n)))\n 4. \\<lbrakk>a = \\<tau>;\n     (s, \\<tau>, s') \\<in> automaton.trans (pnet np n)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a'.\n                         (s, a', s')\n                         \\<in> automaton.trans (pnet np n) \\<and>\n                         (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n                             ((\\<sigma>, \\<zeta>), a', \\<sigma>', \\<zeta>')\n                             \\<in> automaton.trans\n                                    (opnet onp n) \\<longrightarrow>\n                             (\\<forall>j.\n                                 j \\<notin> net_ips\n       \\<zeta> \\<longrightarrow>\n                                 \\<sigma>' j = \\<sigma> j) \\<longrightarrow>\n                             ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n                             \\<in> automaton.trans (oclosed (opnet onp n)))\n 5. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d);\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a'.\n                            (s, a', s')\n                            \\<in> automaton.trans (pnet np n) \\<and>\n                            (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n                                ((\\<sigma>, \\<zeta>), a', \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (opnet onp n) \\<longrightarrow>\n                                (\\<forall>j.\n                                    j \\<notin> net_ips\n          \\<zeta> \\<longrightarrow>\n                                    \\<sigma>' j =\n                                    \\<sigma> j) \\<longrightarrow>\n                                ((\\<sigma>, \\<zeta>), a, \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (oclosed (opnet onp n)))\n 6. \\<And>i K d di.\n       \\<lbrakk>a = i:newpkt(d, di);\n        (s, {i}\\<not>K:arrive(newpkt (d, di)), s')\n        \\<in> automaton.trans (pnet np n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a'.\n                            (s, a', s')\n                            \\<in> automaton.trans (pnet np n) \\<and>\n                            (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n                                ((\\<sigma>, \\<zeta>), a', \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (opnet onp n) \\<longrightarrow>\n                                (\\<forall>j.\n                                    j \\<notin> net_ips\n          \\<zeta> \\<longrightarrow>\n                                    \\<sigma>' j =\n                                    \\<sigma> j) \\<longrightarrow>\n                                ((\\<sigma>, \\<zeta>), a, \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (oclosed (opnet onp n)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = \\<tau>\n  (s, R:*cast(m), s') \\<in> automaton.trans (pnet np n)\n\ngoal (1 subgoal):\n 1. \\<exists>a'.\n       (s, a', s') \\<in> automaton.trans (pnet np n) \\<and>\n       (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n           ((\\<sigma>, \\<zeta>), a', \\<sigma>', \\<zeta>')\n           \\<in> automaton.trans (opnet onp n) \\<longrightarrow>\n           (\\<forall>j.\n               j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n               \\<sigma>' j = \\<sigma> j) \\<longrightarrow>\n           ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n           \\<in> automaton.trans (oclosed (opnet onp n)))", "by (auto intro!: exI [where x=\"R:*cast(m)\"] dest!: ocnet_cast)"], ["proof (state)\nthis:\n  \\<exists>a'.\n     (s, a', s') \\<in> automaton.trans (pnet np n) \\<and>\n     (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n         ((\\<sigma>, \\<zeta>), a', \\<sigma>', \\<zeta>')\n         \\<in> automaton.trans (opnet onp n) \\<longrightarrow>\n         (\\<forall>j.\n             j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n             \\<sigma>' j = \\<sigma> j) \\<longrightarrow>\n         ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n         \\<in> automaton.trans (oclosed (opnet onp n)))\n\ngoal (5 subgoals):\n 1. \\<And>i i'.\n       \\<lbrakk>a = connect(i, i');\n        (s, connect(i, i'), s') \\<in> automaton.trans (pnet np n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a'.\n                            (s, a', s')\n                            \\<in> automaton.trans (pnet np n) \\<and>\n                            (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n                                ((\\<sigma>, \\<zeta>), a', \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (opnet onp n) \\<longrightarrow>\n                                (\\<forall>j.\n                                    j \\<notin> net_ips\n          \\<zeta> \\<longrightarrow>\n                                    \\<sigma>' j =\n                                    \\<sigma> j) \\<longrightarrow>\n                                ((\\<sigma>, \\<zeta>), a, \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (oclosed (opnet onp n)))\n 2. \\<And>i i'.\n       \\<lbrakk>a = disconnect(i, i');\n        (s, disconnect(i, i'), s')\n        \\<in> automaton.trans (pnet np n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a'.\n                            (s, a', s')\n                            \\<in> automaton.trans (pnet np n) \\<and>\n                            (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n                                ((\\<sigma>, \\<zeta>), a', \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (opnet onp n) \\<longrightarrow>\n                                (\\<forall>j.\n                                    j \\<notin> net_ips\n          \\<zeta> \\<longrightarrow>\n                                    \\<sigma>' j =\n                                    \\<sigma> j) \\<longrightarrow>\n                                ((\\<sigma>, \\<zeta>), a, \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (oclosed (opnet onp n)))\n 3. \\<lbrakk>a = \\<tau>;\n     (s, \\<tau>, s') \\<in> automaton.trans (pnet np n)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a'.\n                         (s, a', s')\n                         \\<in> automaton.trans (pnet np n) \\<and>\n                         (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n                             ((\\<sigma>, \\<zeta>), a', \\<sigma>', \\<zeta>')\n                             \\<in> automaton.trans\n                                    (opnet onp n) \\<longrightarrow>\n                             (\\<forall>j.\n                                 j \\<notin> net_ips\n       \\<zeta> \\<longrightarrow>\n                                 \\<sigma>' j = \\<sigma> j) \\<longrightarrow>\n                             ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n                             \\<in> automaton.trans (oclosed (opnet onp n)))\n 4. \\<And>i d.\n       \\<lbrakk>a = i:deliver(d);\n        (s, i:deliver(d), s') \\<in> automaton.trans (pnet np n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a'.\n                            (s, a', s')\n                            \\<in> automaton.trans (pnet np n) \\<and>\n                            (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n                                ((\\<sigma>, \\<zeta>), a', \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (opnet onp n) \\<longrightarrow>\n                                (\\<forall>j.\n                                    j \\<notin> net_ips\n          \\<zeta> \\<longrightarrow>\n                                    \\<sigma>' j =\n                                    \\<sigma> j) \\<longrightarrow>\n                                ((\\<sigma>, \\<zeta>), a, \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (oclosed (opnet onp n)))\n 5. \\<And>i K d di.\n       \\<lbrakk>a = i:newpkt(d, di);\n        (s, {i}\\<not>K:arrive(newpkt (d, di)), s')\n        \\<in> automaton.trans (pnet np n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a'.\n                            (s, a', s')\n                            \\<in> automaton.trans (pnet np n) \\<and>\n                            (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n                                ((\\<sigma>, \\<zeta>), a', \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (opnet onp n) \\<longrightarrow>\n                                (\\<forall>j.\n                                    j \\<notin> net_ips\n          \\<zeta> \\<longrightarrow>\n                                    \\<sigma>' j =\n                                    \\<sigma> j) \\<longrightarrow>\n                                ((\\<sigma>, \\<zeta>), a, \\<sigma>',\n                                 \\<zeta>')\n                                \\<in> automaton.trans\n (oclosed (opnet onp n)))", "qed (auto intro!: ocnet_sos.intros [simplified])"], ["proof (state)\nthis:\n  \\<exists>a'.\n     (s, a', s') \\<in> automaton.trans (pnet np n) \\<and>\n     (\\<forall>\\<sigma> \\<zeta> \\<sigma>' \\<zeta>'.\n         ((\\<sigma>, \\<zeta>), a', \\<sigma>', \\<zeta>')\n         \\<in> automaton.trans (opnet onp n) \\<longrightarrow>\n         (\\<forall>j.\n             j \\<notin> net_ips \\<zeta> \\<longrightarrow>\n             \\<sigma>' j = \\<sigma> j) \\<longrightarrow>\n         ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n         \\<in> automaton.trans (oclosed (opnet onp n)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transfer_action:\n  assumes \"s \\<in> reachable (closed (pnet np n)) TT\"\n      and \"netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\"\n      and \"wf_net_tree n\"\n      and \"(s, a, s') \\<in> trans (closed (pnet np n))\"\n  obtains \\<sigma>' \\<zeta>' where \"((\\<sigma>, \\<zeta>), a, (\\<sigma>', \\<zeta>')) \\<in> trans (oclosed (opnet onp n))\"\n                  and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<zeta>'.\n        \\<lbrakk>((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n                 \\<in> automaton.trans (oclosed (opnet onp n));\n         netgmap sr s' =\n         netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof atomize_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (oclosed (opnet onp n)) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from assms(1)"], ["proof (chain)\npicking this:\n  s \\<in> reachable (closed (pnet np n)) TT", "have \"s \\<in> reachable (pnet np n) TT\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (closed (pnet np n)) TT\n\ngoal (1 subgoal):\n 1. s \\<in> reachable (pnet np n) TT", ".."], ["proof (state)\nthis:\n  s \\<in> reachable (pnet np n) TT\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (oclosed (opnet onp n)) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "from assms(4)"], ["proof (chain)\npicking this:\n  (s, a, s') \\<in> automaton.trans (closed (pnet np n))", "show \"\\<exists>\\<sigma>' \\<zeta>'. ((\\<sigma>, \\<zeta>), a, (\\<sigma>', \\<zeta>')) \\<in> trans (oclosed (opnet onp n))\n                    \\<and> netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\""], ["proof (prove)\nusing this:\n  (s, a, s') \\<in> automaton.trans (closed (pnet np n))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' \\<zeta>'.\n       ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n       \\<in> automaton.trans (oclosed (opnet onp n)) \\<and>\n       netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "by (cases a)\n           ((elim transfer_action_pnet_closed\n                  transfer_pnet_action [OF \\<open>s \\<in> reachable (pnet np n) TT\\<close> assms(2-3)])?,\n            (auto intro!: exI)[1])+"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' \\<zeta>'.\n     ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n     \\<in> automaton.trans (oclosed (opnet onp n)) \\<and>\n     netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pnet_reachable_transfer':\n  assumes \"wf_net_tree n\"\n      and \"s \\<in> reachable (closed (pnet np n)) TT\"\n    shows \"netgmap sr s \\<in> netmask (net_tree_ips n) ` oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\"\n          (is \" _ \\<in> ?f ` ?oreachable n\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips n) `\n          oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "using assms(2)"], ["proof (prove)\nusing this:\n  s \\<in> reachable (closed (pnet np n)) TT\n\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips n) `\n          oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "proof induction"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (closed (pnet np n)) \\<Longrightarrow>\n       netgmap sr s\n       \\<in> netmask (net_tree_ips n) `\n             oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        netgmap sr s\n        \\<in> netmask (net_tree_ips n) `\n              oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> netgmap sr s'\n                         \\<in> netmask (net_tree_ips n) `\n                               oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "fix s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (closed (pnet np n)) \\<Longrightarrow>\n       netgmap sr s\n       \\<in> netmask (net_tree_ips n) `\n             oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        netgmap sr s\n        \\<in> netmask (net_tree_ips n) `\n              oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> netgmap sr s'\n                         \\<in> netmask (net_tree_ips n) `\n                               oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "assume \"s \\<in> init (closed (pnet np n))\""], ["proof (state)\nthis:\n  s \\<in> init (closed (pnet np n))\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (closed (pnet np n)) \\<Longrightarrow>\n       netgmap sr s\n       \\<in> netmask (net_tree_ips n) `\n             oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        netgmap sr s\n        \\<in> netmask (net_tree_ips n) `\n              oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> netgmap sr s'\n                         \\<in> netmask (net_tree_ips n) `\n                               oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "hence \"s \\<in> init (pnet np n)\""], ["proof (prove)\nusing this:\n  s \\<in> init (closed (pnet np n))\n\ngoal (1 subgoal):\n 1. s \\<in> init (pnet np n)", "by simp"], ["proof (state)\nthis:\n  s \\<in> init (pnet np n)\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (closed (pnet np n)) \\<Longrightarrow>\n       netgmap sr s\n       \\<in> netmask (net_tree_ips n) `\n             oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        netgmap sr s\n        \\<in> netmask (net_tree_ips n) `\n              oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> netgmap sr s'\n                         \\<in> netmask (net_tree_ips n) `\n                               oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "with \\<open>wf_net_tree n\\<close>"], ["proof (chain)\npicking this:\n  wf_net_tree n\n  s \\<in> init (pnet np n)", "have \"netgmap sr s \\<in> netmask (net_tree_ips n) ` init (opnet onp n)\""], ["proof (prove)\nusing this:\n  wf_net_tree n\n  s \\<in> init (pnet np n)\n\ngoal (1 subgoal):\n 1. netgmap sr s \\<in> netmask (net_tree_ips n) ` init (opnet onp n)", "by (rule init_pnet_opnet)"], ["proof (state)\nthis:\n  netgmap sr s \\<in> netmask (net_tree_ips n) ` init (opnet onp n)\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (closed (pnet np n)) \\<Longrightarrow>\n       netgmap sr s\n       \\<in> netmask (net_tree_ips n) `\n             oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        netgmap sr s\n        \\<in> netmask (net_tree_ips n) `\n              oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> netgmap sr s'\n                         \\<in> netmask (net_tree_ips n) `\n                               oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "hence \"netgmap sr s \\<in> netmask (net_tree_ips n) ` init (oclosed (opnet onp n))\""], ["proof (prove)\nusing this:\n  netgmap sr s \\<in> netmask (net_tree_ips n) ` init (opnet onp n)\n\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips n) ` init (oclosed (opnet onp n))", "by simp"], ["proof (state)\nthis:\n  netgmap sr s \\<in> netmask (net_tree_ips n) ` init (oclosed (opnet onp n))\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (closed (pnet np n)) \\<Longrightarrow>\n       netgmap sr s\n       \\<in> netmask (net_tree_ips n) `\n             oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        netgmap sr s\n        \\<in> netmask (net_tree_ips n) `\n              oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> netgmap sr s'\n                         \\<in> netmask (net_tree_ips n) `\n                               oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "moreover"], ["proof (state)\nthis:\n  netgmap sr s \\<in> netmask (net_tree_ips n) ` init (oclosed (opnet onp n))\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (closed (pnet np n)) \\<Longrightarrow>\n       netgmap sr s\n       \\<in> netmask (net_tree_ips n) `\n             oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        netgmap sr s\n        \\<in> netmask (net_tree_ips n) `\n              oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> netgmap sr s'\n                         \\<in> netmask (net_tree_ips n) `\n                               oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "have \"netmask (net_tree_ips n) ` init (oclosed (opnet onp n))\n                                        \\<subseteq> netmask (net_tree_ips n) ` ?oreachable n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netmask (net_tree_ips n) ` init (oclosed (opnet onp n))\n    \\<subseteq> netmask (net_tree_ips n) `\n                oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "by (intro image_mono subsetI) (rule oreachable_init)"], ["proof (state)\nthis:\n  netmask (net_tree_ips n) ` init (oclosed (opnet onp n))\n  \\<subseteq> netmask (net_tree_ips n) `\n              oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (closed (pnet np n)) \\<Longrightarrow>\n       netgmap sr s\n       \\<in> netmask (net_tree_ips n) `\n             oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        netgmap sr s\n        \\<in> netmask (net_tree_ips n) `\n              oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> netgmap sr s'\n                         \\<in> netmask (net_tree_ips n) `\n                               oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "ultimately"], ["proof (chain)\npicking this:\n  netgmap sr s \\<in> netmask (net_tree_ips n) ` init (oclosed (opnet onp n))\n  netmask (net_tree_ips n) ` init (oclosed (opnet onp n))\n  \\<subseteq> netmask (net_tree_ips n) `\n              oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "show \"netgmap sr s \\<in> netmask (net_tree_ips n) ` ?oreachable n\""], ["proof (prove)\nusing this:\n  netgmap sr s \\<in> netmask (net_tree_ips n) ` init (oclosed (opnet onp n))\n  netmask (net_tree_ips n) ` init (oclosed (opnet onp n))\n  \\<subseteq> netmask (net_tree_ips n) `\n              oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips n) `\n          oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "by (rule rev_subsetD)"], ["proof (state)\nthis:\n  netgmap sr s\n  \\<in> netmask (net_tree_ips n) `\n        oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        netgmap sr s\n        \\<in> netmask (net_tree_ips n) `\n              oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> netgmap sr s'\n                         \\<in> netmask (net_tree_ips n) `\n                               oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        netgmap sr s\n        \\<in> netmask (net_tree_ips n) `\n              oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> netgmap sr s'\n                         \\<in> netmask (net_tree_ips n) `\n                               oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "fix s a s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        netgmap sr s\n        \\<in> netmask (net_tree_ips n) `\n              oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> netgmap sr s'\n                         \\<in> netmask (net_tree_ips n) `\n                               oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "assume \"s \\<in> reachable (closed (pnet np n)) TT\"\n       and \"netgmap sr s \\<in> netmask (net_tree_ips n) ` ?oreachable n\"\n       and \"(s, a, s') \\<in> trans (closed (pnet np n))\""], ["proof (state)\nthis:\n  s \\<in> reachable (closed (pnet np n)) TT\n  netgmap sr s\n  \\<in> netmask (net_tree_ips n) `\n        oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n  (s, a, s') \\<in> automaton.trans (closed (pnet np n))\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        netgmap sr s\n        \\<in> netmask (net_tree_ips n) `\n              oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> netgmap sr s'\n                         \\<in> netmask (net_tree_ips n) `\n                               oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "from this(2)"], ["proof (chain)\npicking this:\n  netgmap sr s\n  \\<in> netmask (net_tree_ips n) `\n        oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "obtain \\<sigma> \\<zeta> where \"netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\"\n                              and \"(\\<sigma>, \\<zeta>) \\<in> ?oreachable n\""], ["proof (prove)\nusing this:\n  netgmap sr s\n  \\<in> netmask (net_tree_ips n) `\n        oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> \\<zeta>.\n        \\<lbrakk>netgmap sr s =\n                 netmask (net_tree_ips n) (\\<sigma>, \\<zeta>);\n         (\\<sigma>, \\<zeta>)\n         \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True)\n                U\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by clarsimp"], ["proof (state)\nthis:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        netgmap sr s\n        \\<in> netmask (net_tree_ips n) `\n              oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> netgmap sr s'\n                         \\<in> netmask (net_tree_ips n) `\n                               oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "from \\<open>s \\<in> reachable (closed (pnet np n)) TT\\<close> this(1) \\<open>wf_net_tree n\\<close>\n         and \\<open>(s, a, s') \\<in> trans (closed (pnet np n))\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> reachable (closed (pnet np n)) TT\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  wf_net_tree n\n  (s, a, s') \\<in> automaton.trans (closed (pnet np n))", "obtain \\<sigma>' \\<zeta>' where \"((\\<sigma>, \\<zeta>), a, (\\<sigma>', \\<zeta>')) \\<in> trans (oclosed (opnet onp n))\"\n                     and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (closed (pnet np n)) TT\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  wf_net_tree n\n  (s, a, s') \\<in> automaton.trans (closed (pnet np n))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<zeta>'.\n        \\<lbrakk>((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n                 \\<in> automaton.trans (oclosed (opnet onp n));\n         netgmap sr s' =\n         netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule transfer_action)"], ["proof (state)\nthis:\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (oclosed (opnet onp n))\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        netgmap sr s\n        \\<in> netmask (net_tree_ips n) `\n              oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> netgmap sr s'\n                         \\<in> netmask (net_tree_ips n) `\n                               oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "from \\<open>(\\<sigma>, \\<zeta>) \\<in> ?oreachable n\\<close> and this(1)"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (oclosed (opnet onp n))", "have \"(\\<sigma>', \\<zeta>') \\<in> ?oreachable n\""], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (oclosed (opnet onp n))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "by (rule oreachable_local) simp"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        netgmap sr s\n        \\<in> netmask (net_tree_ips n) `\n              oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> netgmap sr s'\n                         \\<in> netmask (net_tree_ips n) `\n                               oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "with \\<open>netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "show \"netgmap sr s' \\<in> netmask (net_tree_ips n) ` ?oreachable n\""], ["proof (prove)\nusing this:\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. netgmap sr s'\n    \\<in> netmask (net_tree_ips n) `\n          oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "by (rule image_eqI)"], ["proof (state)\nthis:\n  netgmap sr s'\n  \\<in> netmask (net_tree_ips n) `\n        oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal:\nNo subgoals!", "qed"], ["", "definition\n  someinit :: \"nat \\<Rightarrow> 'g\"\nwhere\n  \"someinit i \\<equiv> SOME x. x \\<in> (fst o sr) ` init (np i)\""], ["", "definition\n  initmissing :: \"((nat \\<Rightarrow> 'g option) \\<times> 'a) \\<Rightarrow> (nat \\<Rightarrow> 'g) \\<times> 'a\"\nwhere\n  \"initmissing \\<sigma> = (\\<lambda>i. case (fst \\<sigma>) i of None \\<Rightarrow> someinit i | Some s \\<Rightarrow> s, snd \\<sigma>)\""], ["", "lemma initmissing_def':\n  \"initmissing = apfst (default someinit)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. initmissing = apfst (Lib.default someinit)", "by (auto simp add: initmissing_def default_def)"], ["", "lemma netmask_initmissing_netgmap:\n  \"netmask (net_ips s) (initmissing (netgmap sr s)) = netgmap sr s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netmask (net_ips s) (initmissing (netgmap sr s)) = netgmap sr s", "proof (intro prod_eqI ext)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       fst (netmask (net_ips s) (initmissing (netgmap sr s))) x =\n       fst (netgmap sr s) x\n 2. snd (netmask (net_ips s) (initmissing (netgmap sr s))) =\n    snd (netgmap sr s)", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       fst (netmask (net_ips s) (initmissing (netgmap sr s))) x =\n       fst (netgmap sr s) x\n 2. snd (netmask (net_ips s) (initmissing (netgmap sr s))) =\n    snd (netgmap sr s)", "show \"fst (netmask (net_ips s) (initmissing (netgmap sr s))) i = fst (netgmap sr s) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (netmask (net_ips s) (initmissing (netgmap sr s))) i =\n    fst (netgmap sr s) i", "unfolding initmissing_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (netmask (net_ips s)\n          (\\<lambda>i.\n              case fst (netgmap sr s) i of None \\<Rightarrow> someinit i\n              | Some s \\<Rightarrow> s,\n           snd (netgmap sr s)))\n     i =\n    fst (netgmap sr s) i", "by (clarsimp split: option.split)"], ["proof (state)\nthis:\n  fst (netmask (net_ips s) (initmissing (netgmap sr s))) i =\n  fst (netgmap sr s) i\n\ngoal (1 subgoal):\n 1. snd (netmask (net_ips s) (initmissing (netgmap sr s))) =\n    snd (netgmap sr s)", "qed (simp add: initmissing_def)"], ["", "lemma snd_initmissing [simp]:\n  \"snd (initmissing x)= snd x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (initmissing x) = snd x", "unfolding initmissing_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (\\<lambda>i.\n            case fst x i of None \\<Rightarrow> someinit i\n            | Some s \\<Rightarrow> s,\n         snd x) =\n    snd x", "by simp"], ["", "lemma initmnissing_snd_netgmap [simp]:\n  assumes \"initmissing (netgmap sr s) = (\\<sigma>, \\<zeta>)\"\n    shows \"snd (netgmap sr s) = \\<zeta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (netgmap sr s) = \\<zeta>", "using assms"], ["proof (prove)\nusing this:\n  initmissing (netgmap sr s) = (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. snd (netgmap sr s) = \\<zeta>", "unfolding initmissing_def"], ["proof (prove)\nusing this:\n  (\\<lambda>i.\n      case fst (netgmap sr s) i of None \\<Rightarrow> someinit i\n      | Some s \\<Rightarrow> s,\n   snd (netgmap sr s)) =\n  (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. snd (netgmap sr s) = \\<zeta>", "by simp"], ["", "lemma in_net_ips_fst_init_missing [simp]:\n  assumes \"i \\<in> net_ips s\"\n    shows \"fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)", "using assms"], ["proof (prove)\nusing this:\n  i \\<in> net_ips s\n\ngoal (1 subgoal):\n 1. fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)", "unfolding initmissing_def"], ["proof (prove)\nusing this:\n  i \\<in> net_ips s\n\ngoal (1 subgoal):\n 1. fst (\\<lambda>i.\n            case fst (netgmap sr s) i of None \\<Rightarrow> someinit i\n            | Some s \\<Rightarrow> s,\n         snd (netgmap sr s))\n     i =\n    the (fst (netgmap sr s) i)", "by (clarsimp split: option.split)"], ["", "lemma not_in_net_ips_fst_init_missing [simp]:\n  assumes \"i \\<notin> net_ips s\"\n    shows \"fst (initmissing (netgmap sr s)) i = someinit i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (initmissing (netgmap sr s)) i = someinit i", "using assms"], ["proof (prove)\nusing this:\n  i \\<notin> net_ips s\n\ngoal (1 subgoal):\n 1. fst (initmissing (netgmap sr s)) i = someinit i", "unfolding initmissing_def"], ["proof (prove)\nusing this:\n  i \\<notin> net_ips s\n\ngoal (1 subgoal):\n 1. fst (\\<lambda>i.\n            case fst (netgmap sr s) i of None \\<Rightarrow> someinit i\n            | Some s \\<Rightarrow> s,\n         snd (netgmap sr s))\n     i =\n    someinit i", "by (clarsimp split: option.split)"], ["", "lemma initmissing_oreachable_netmask [elim]:\n  assumes \"initmissing (netgmap sr s) \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\"\n          (is \"_ \\<in> ?oreachable n\")\n      and \"net_ips s = net_tree_ips n\"\n    shows \"netgmap sr s \\<in> netmask (net_tree_ips n) ` ?oreachable n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips n) `\n          oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips n) `\n          oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "obtain \\<sigma> \\<zeta> where \"initmissing (netgmap sr s) = (\\<sigma>, \\<zeta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> \\<zeta>.\n        initmissing (netgmap sr s) = (\\<sigma>, \\<zeta>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  initmissing (netgmap sr s) = (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips n) `\n          oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "with assms(1)"], ["proof (chain)\npicking this:\n  initmissing (netgmap sr s)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n  initmissing (netgmap sr s) = (\\<sigma>, \\<zeta>)", "have \"(\\<sigma>, \\<zeta>) \\<in> ?oreachable n\""], ["proof (prove)\nusing this:\n  initmissing (netgmap sr s)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n  initmissing (netgmap sr s) = (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<zeta>)\n    \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "by simp"], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips n) `\n          oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "have \"netgmap sr s = netmask (net_ips s) (\\<sigma>, \\<zeta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netgmap sr s = netmask (net_ips s) (\\<sigma>, \\<zeta>)", "proof (intro prod_eqI ext)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       fst (netgmap sr s) x =\n       fst (netmask (net_ips s) (\\<sigma>, \\<zeta>)) x\n 2. snd (netgmap sr s) = snd (netmask (net_ips s) (\\<sigma>, \\<zeta>))", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       fst (netgmap sr s) x =\n       fst (netmask (net_ips s) (\\<sigma>, \\<zeta>)) x\n 2. snd (netgmap sr s) = snd (netmask (net_ips s) (\\<sigma>, \\<zeta>))", "show \"fst (netgmap sr s) i = fst (netmask (net_ips s) (\\<sigma>, \\<zeta>)) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (netgmap sr s) i = fst (netmask (net_ips s) (\\<sigma>, \\<zeta>)) i", "proof (cases \"i\\<in>net_ips s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> net_ips s \\<Longrightarrow>\n    fst (netgmap sr s) i = fst (netmask (net_ips s) (\\<sigma>, \\<zeta>)) i\n 2. i \\<notin> net_ips s \\<Longrightarrow>\n    fst (netgmap sr s) i = fst (netmask (net_ips s) (\\<sigma>, \\<zeta>)) i", "assume \"i\\<in>net_ips s\""], ["proof (state)\nthis:\n  i \\<in> net_ips s\n\ngoal (2 subgoals):\n 1. i \\<in> net_ips s \\<Longrightarrow>\n    fst (netgmap sr s) i = fst (netmask (net_ips s) (\\<sigma>, \\<zeta>)) i\n 2. i \\<notin> net_ips s \\<Longrightarrow>\n    fst (netgmap sr s) i = fst (netmask (net_ips s) (\\<sigma>, \\<zeta>)) i", "hence \"fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\""], ["proof (prove)\nusing this:\n  i \\<in> net_ips s\n\ngoal (1 subgoal):\n 1. fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)", "by (rule in_net_ips_fst_init_missing)"], ["proof (state)\nthis:\n  fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\n\ngoal (2 subgoals):\n 1. i \\<in> net_ips s \\<Longrightarrow>\n    fst (netgmap sr s) i = fst (netmask (net_ips s) (\\<sigma>, \\<zeta>)) i\n 2. i \\<notin> net_ips s \\<Longrightarrow>\n    fst (netgmap sr s) i = fst (netmask (net_ips s) (\\<sigma>, \\<zeta>)) i", "moreover"], ["proof (state)\nthis:\n  fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\n\ngoal (2 subgoals):\n 1. i \\<in> net_ips s \\<Longrightarrow>\n    fst (netgmap sr s) i = fst (netmask (net_ips s) (\\<sigma>, \\<zeta>)) i\n 2. i \\<notin> net_ips s \\<Longrightarrow>\n    fst (netgmap sr s) i = fst (netmask (net_ips s) (\\<sigma>, \\<zeta>)) i", "from \\<open>i\\<in>net_ips s\\<close>"], ["proof (chain)\npicking this:\n  i \\<in> net_ips s", "have \"Some (the (fst (netgmap sr s) i)) = fst (netgmap sr s) i\""], ["proof (prove)\nusing this:\n  i \\<in> net_ips s\n\ngoal (1 subgoal):\n 1. Some (the (fst (netgmap sr s) i)) = fst (netgmap sr s) i", "by (rule some_the_fst_netgmap)"], ["proof (state)\nthis:\n  Some (the (fst (netgmap sr s) i)) = fst (netgmap sr s) i\n\ngoal (2 subgoals):\n 1. i \\<in> net_ips s \\<Longrightarrow>\n    fst (netgmap sr s) i = fst (netmask (net_ips s) (\\<sigma>, \\<zeta>)) i\n 2. i \\<notin> net_ips s \\<Longrightarrow>\n    fst (netgmap sr s) i = fst (netmask (net_ips s) (\\<sigma>, \\<zeta>)) i", "ultimately"], ["proof (chain)\npicking this:\n  fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\n  Some (the (fst (netgmap sr s) i)) = fst (netgmap sr s) i", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\n  Some (the (fst (netgmap sr s) i)) = fst (netgmap sr s) i\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s) i = fst (netmask (net_ips s) (\\<sigma>, \\<zeta>)) i", "using \\<open>initmissing (netgmap sr s) = (\\<sigma>, \\<zeta>)\\<close>"], ["proof (prove)\nusing this:\n  fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\n  Some (the (fst (netgmap sr s) i)) = fst (netgmap sr s) i\n  initmissing (netgmap sr s) = (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. fst (netgmap sr s) i = fst (netmask (net_ips s) (\\<sigma>, \\<zeta>)) i", "by simp"], ["proof (state)\nthis:\n  fst (netgmap sr s) i = fst (netmask (net_ips s) (\\<sigma>, \\<zeta>)) i\n\ngoal (1 subgoal):\n 1. i \\<notin> net_ips s \\<Longrightarrow>\n    fst (netgmap sr s) i = fst (netmask (net_ips s) (\\<sigma>, \\<zeta>)) i", "qed simp"], ["proof (state)\nthis:\n  fst (netgmap sr s) i = fst (netmask (net_ips s) (\\<sigma>, \\<zeta>)) i\n\ngoal (1 subgoal):\n 1. snd (netgmap sr s) = snd (netmask (net_ips s) (\\<sigma>, \\<zeta>))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. snd (netgmap sr s) = snd (netmask (net_ips s) (\\<sigma>, \\<zeta>))", "from \\<open>initmissing (netgmap sr s) = (\\<sigma>, \\<zeta>)\\<close>"], ["proof (chain)\npicking this:\n  initmissing (netgmap sr s) = (\\<sigma>, \\<zeta>)", "show \"snd (netgmap sr s) = snd (netmask (net_ips s) (\\<sigma>, \\<zeta>))\""], ["proof (prove)\nusing this:\n  initmissing (netgmap sr s) = (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. snd (netgmap sr s) = snd (netmask (net_ips s) (\\<sigma>, \\<zeta>))", "by simp"], ["proof (state)\nthis:\n  snd (netgmap sr s) = snd (netmask (net_ips s) (\\<sigma>, \\<zeta>))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  netgmap sr s = netmask (net_ips s) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips n) `\n          oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "with assms(2)"], ["proof (chain)\npicking this:\n  net_ips s = net_tree_ips n\n  netgmap sr s = netmask (net_ips s) (\\<sigma>, \\<zeta>)", "have \"netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\""], ["proof (prove)\nusing this:\n  net_ips s = net_tree_ips n\n  netgmap sr s = netmask (net_ips s) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)", "by simp"], ["proof (state)\nthis:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips n) `\n          oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "moreover"], ["proof (state)\nthis:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips n) `\n          oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "from \\<open>(\\<sigma>, \\<zeta>) \\<in> ?oreachable n\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "have \"netmask (net_ips s) (\\<sigma>, \\<zeta>) \\<in> netmask (net_ips s) ` ?oreachable n\""], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. netmask (net_ips s) (\\<sigma>, \\<zeta>)\n    \\<in> netmask (net_ips s) `\n          oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "by (rule imageI)"], ["proof (state)\nthis:\n  netmask (net_ips s) (\\<sigma>, \\<zeta>)\n  \\<in> netmask (net_ips s) `\n        oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips n) `\n          oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "ultimately"], ["proof (chain)\npicking this:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  netmask (net_ips s) (\\<sigma>, \\<zeta>)\n  \\<in> netmask (net_ips s) `\n        oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "show ?thesis"], ["proof (prove)\nusing this:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  netmask (net_ips s) (\\<sigma>, \\<zeta>)\n  \\<in> netmask (net_ips s) `\n        oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips n) `\n          oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "by (simp only: assms(2))"], ["proof (state)\nthis:\n  netgmap sr s\n  \\<in> netmask (net_tree_ips n) `\n        oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pnet_reachable_transfer:\n  assumes \"wf_net_tree n\"\n      and \"s \\<in> reachable (closed (pnet np n)) TT\"\n    shows \"initmissing (netgmap sr s) \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\"\n          (is \" _ \\<in> ?oreachable n\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. initmissing (netgmap sr s)\n    \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "using assms(2)"], ["proof (prove)\nusing this:\n  s \\<in> reachable (closed (pnet np n)) TT\n\ngoal (1 subgoal):\n 1. initmissing (netgmap sr s)\n    \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "proof induction"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (closed (pnet np n)) \\<Longrightarrow>\n       initmissing (netgmap sr s)\n       \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "fix s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (closed (pnet np n)) \\<Longrightarrow>\n       initmissing (netgmap sr s)\n       \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "assume \"s \\<in> init (closed (pnet np n))\""], ["proof (state)\nthis:\n  s \\<in> init (closed (pnet np n))\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (closed (pnet np n)) \\<Longrightarrow>\n       initmissing (netgmap sr s)\n       \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "hence \"s \\<in> init (pnet np n)\""], ["proof (prove)\nusing this:\n  s \\<in> init (closed (pnet np n))\n\ngoal (1 subgoal):\n 1. s \\<in> init (pnet np n)", "by simp"], ["proof (state)\nthis:\n  s \\<in> init (pnet np n)\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (closed (pnet np n)) \\<Longrightarrow>\n       initmissing (netgmap sr s)\n       \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "from \\<open>wf_net_tree n\\<close>"], ["proof (chain)\npicking this:\n  wf_net_tree n", "have \"initmissing (netgmap sr s) \\<in> init (opnet onp n)\""], ["proof (prove)\nusing this:\n  wf_net_tree n\n\ngoal (1 subgoal):\n 1. initmissing (netgmap sr s) \\<in> init (opnet onp n)", "proof (rule init_lifted [THEN subsetD], intro CollectI exI conjI allI)"], ["proof (state)\ngoal (3 subgoals):\n 1. wf_net_tree n \\<Longrightarrow>\n    initmissing (netgmap sr s) = (?\\<sigma>5, snd (netgmap sr ?s6))\n 2. wf_net_tree n \\<Longrightarrow> ?s6 \\<in> init (pnet np n)\n 3. \\<And>i.\n       wf_net_tree n \\<Longrightarrow>\n       if i \\<in> net_tree_ips n\n       then ?\\<sigma>5 i = the (fst (netgmap sr ?s6) i)\n       else ?\\<sigma>5 i \\<in> (fst \\<circ> sr) ` init (np i)", "show \"initmissing (netgmap sr s) = (fst (initmissing (netgmap sr s)), snd (netgmap sr s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. initmissing (netgmap sr s) =\n    (fst (initmissing (netgmap sr s)), snd (netgmap sr s))", "by (metis snd_initmissing surjective_pairing)"], ["proof (state)\nthis:\n  initmissing (netgmap sr s) =\n  (fst (initmissing (netgmap sr s)), snd (netgmap sr s))\n\ngoal (2 subgoals):\n 1. wf_net_tree n \\<Longrightarrow> s \\<in> init (pnet np n)\n 2. \\<And>i.\n       wf_net_tree n \\<Longrightarrow>\n       if i \\<in> net_tree_ips n\n       then fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\n       else fst (initmissing (netgmap sr s)) i\n            \\<in> (fst \\<circ> sr) ` init (np i)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. wf_net_tree n \\<Longrightarrow> s \\<in> init (pnet np n)\n 2. \\<And>i.\n       wf_net_tree n \\<Longrightarrow>\n       if i \\<in> net_tree_ips n\n       then fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\n       else fst (initmissing (netgmap sr s)) i\n            \\<in> (fst \\<circ> sr) ` init (np i)", "from \\<open>s \\<in> init (pnet np n)\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> init (pnet np n)", "show \"s \\<in> init (pnet np n)\""], ["proof (prove)\nusing this:\n  s \\<in> init (pnet np n)\n\ngoal (1 subgoal):\n 1. s \\<in> init (pnet np n)", ".."], ["proof (state)\nthis:\n  s \\<in> init (pnet np n)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       wf_net_tree n \\<Longrightarrow>\n       if i \\<in> net_tree_ips n\n       then fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\n       else fst (initmissing (netgmap sr s)) i\n            \\<in> (fst \\<circ> sr) ` init (np i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       wf_net_tree n \\<Longrightarrow>\n       if i \\<in> net_tree_ips n\n       then fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\n       else fst (initmissing (netgmap sr s)) i\n            \\<in> (fst \\<circ> sr) ` init (np i)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       wf_net_tree n \\<Longrightarrow>\n       if i \\<in> net_tree_ips n\n       then fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\n       else fst (initmissing (netgmap sr s)) i\n            \\<in> (fst \\<circ> sr) ` init (np i)", "show \"if i \\<in> net_tree_ips n\n            then (fst (initmissing (netgmap sr s))) i = the (fst (netgmap sr s) i)\n            else (fst (initmissing (netgmap sr s))) i \\<in> (fst \\<circ> sr) ` init (np i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. if i \\<in> net_tree_ips n\n    then fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\n    else fst (initmissing (netgmap sr s)) i\n         \\<in> (fst \\<circ> sr) ` init (np i)", "proof (cases \"i \\<in> net_tree_ips n\", simp_all only: if_True if_False)"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> net_tree_ips n \\<Longrightarrow>\n    fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\n 2. i \\<notin> net_tree_ips n \\<Longrightarrow>\n    fst (initmissing (netgmap sr s)) i \\<in> (fst \\<circ> sr) ` init (np i)", "assume \"i \\<in> net_tree_ips n\""], ["proof (state)\nthis:\n  i \\<in> net_tree_ips n\n\ngoal (2 subgoals):\n 1. i \\<in> net_tree_ips n \\<Longrightarrow>\n    fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\n 2. i \\<notin> net_tree_ips n \\<Longrightarrow>\n    fst (initmissing (netgmap sr s)) i \\<in> (fst \\<circ> sr) ` init (np i)", "with \\<open>s \\<in> init (pnet np n)\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> init (pnet np n)\n  i \\<in> net_tree_ips n", "have \"i \\<in> net_ips s\""], ["proof (prove)\nusing this:\n  s \\<in> init (pnet np n)\n  i \\<in> net_tree_ips n\n\ngoal (1 subgoal):\n 1. i \\<in> net_ips s", ".."], ["proof (state)\nthis:\n  i \\<in> net_ips s\n\ngoal (2 subgoals):\n 1. i \\<in> net_tree_ips n \\<Longrightarrow>\n    fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\n 2. i \\<notin> net_tree_ips n \\<Longrightarrow>\n    fst (initmissing (netgmap sr s)) i \\<in> (fst \\<circ> sr) ` init (np i)", "thus \"fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\""], ["proof (prove)\nusing this:\n  i \\<in> net_ips s\n\ngoal (1 subgoal):\n 1. fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)", "by simp"], ["proof (state)\nthis:\n  fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips n \\<Longrightarrow>\n    fst (initmissing (netgmap sr s)) i \\<in> (fst \\<circ> sr) ` init (np i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips n \\<Longrightarrow>\n    fst (initmissing (netgmap sr s)) i \\<in> (fst \\<circ> sr) ` init (np i)", "assume \"i \\<notin> net_tree_ips n\""], ["proof (state)\nthis:\n  i \\<notin> net_tree_ips n\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips n \\<Longrightarrow>\n    fst (initmissing (netgmap sr s)) i \\<in> (fst \\<circ> sr) ` init (np i)", "with \\<open>s \\<in> init (pnet np n)\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> init (pnet np n)\n  i \\<notin> net_tree_ips n", "have \"i \\<notin> net_ips s\""], ["proof (prove)\nusing this:\n  s \\<in> init (pnet np n)\n  i \\<notin> net_tree_ips n\n\ngoal (1 subgoal):\n 1. i \\<notin> net_ips s", ".."], ["proof (state)\nthis:\n  i \\<notin> net_ips s\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips n \\<Longrightarrow>\n    fst (initmissing (netgmap sr s)) i \\<in> (fst \\<circ> sr) ` init (np i)", "hence \"fst (initmissing (netgmap sr s)) i = someinit i\""], ["proof (prove)\nusing this:\n  i \\<notin> net_ips s\n\ngoal (1 subgoal):\n 1. fst (initmissing (netgmap sr s)) i = someinit i", "by simp"], ["proof (state)\nthis:\n  fst (initmissing (netgmap sr s)) i = someinit i\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips n \\<Longrightarrow>\n    fst (initmissing (netgmap sr s)) i \\<in> (fst \\<circ> sr) ` init (np i)", "moreover"], ["proof (state)\nthis:\n  fst (initmissing (netgmap sr s)) i = someinit i\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips n \\<Longrightarrow>\n    fst (initmissing (netgmap sr s)) i \\<in> (fst \\<circ> sr) ` init (np i)", "have \"someinit i \\<in> (fst \\<circ> sr) ` init (np i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. someinit i \\<in> (fst \\<circ> sr) ` init (np i)", "unfolding someinit_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME x. x \\<in> (fst \\<circ> sr) ` init (np i))\n    \\<in> (fst \\<circ> sr) ` init (np i)", "proof (rule someI_ex)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> (fst \\<circ> sr) ` init (np i)", "from init_notempty"], ["proof (chain)\npicking this:\n  \\<forall>j. init (np j) \\<noteq> {}", "show \"\\<exists>x. x \\<in> (fst o sr) ` init (np i)\""], ["proof (prove)\nusing this:\n  \\<forall>j. init (np j) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> (fst \\<circ> sr) ` init (np i)", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. x \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  someinit i \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. i \\<notin> net_tree_ips n \\<Longrightarrow>\n    fst (initmissing (netgmap sr s)) i \\<in> (fst \\<circ> sr) ` init (np i)", "ultimately"], ["proof (chain)\npicking this:\n  fst (initmissing (netgmap sr s)) i = someinit i\n  someinit i \\<in> (fst \\<circ> sr) ` init (np i)", "show \"fst (initmissing (netgmap sr s)) i \\<in> (fst \\<circ> sr) ` init (np i)\""], ["proof (prove)\nusing this:\n  fst (initmissing (netgmap sr s)) i = someinit i\n  someinit i \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal (1 subgoal):\n 1. fst (initmissing (netgmap sr s)) i \\<in> (fst \\<circ> sr) ` init (np i)", "by simp"], ["proof (state)\nthis:\n  fst (initmissing (netgmap sr s)) i \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  if i \\<in> net_tree_ips n\n  then fst (initmissing (netgmap sr s)) i = the (fst (netgmap sr s) i)\n  else fst (initmissing (netgmap sr s)) i\n       \\<in> (fst \\<circ> sr) ` init (np i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  initmissing (netgmap sr s) \\<in> init (opnet onp n)\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (closed (pnet np n)) \\<Longrightarrow>\n       initmissing (netgmap sr s)\n       \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "hence \"initmissing (netgmap sr s) \\<in> init (oclosed (opnet onp n))\""], ["proof (prove)\nusing this:\n  initmissing (netgmap sr s) \\<in> init (opnet onp n)\n\ngoal (1 subgoal):\n 1. initmissing (netgmap sr s) \\<in> init (oclosed (opnet onp n))", "by simp"], ["proof (state)\nthis:\n  initmissing (netgmap sr s) \\<in> init (oclosed (opnet onp n))\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       s \\<in> init (closed (pnet np n)) \\<Longrightarrow>\n       initmissing (netgmap sr s)\n       \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n 2. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "thus \"initmissing (netgmap sr s) \\<in> ?oreachable n\""], ["proof (prove)\nusing this:\n  initmissing (netgmap sr s) \\<in> init (oclosed (opnet onp n))\n\ngoal (1 subgoal):\n 1. initmissing (netgmap sr s)\n    \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", ".."], ["proof (state)\nthis:\n  initmissing (netgmap sr s)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "fix s a s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "assume \"s \\<in> reachable (closed (pnet np n)) TT\"\n       and \"(s, a, s') \\<in> trans (closed (pnet np n))\"\n       and \"initmissing (netgmap sr s) \\<in> ?oreachable n\""], ["proof (state)\nthis:\n  s \\<in> reachable (closed (pnet np n)) TT\n  (s, a, s') \\<in> automaton.trans (closed (pnet np n))\n  initmissing (netgmap sr s)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "from this(1)"], ["proof (chain)\npicking this:\n  s \\<in> reachable (closed (pnet np n)) TT", "have \"s \\<in> reachable (pnet np n) TT\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (closed (pnet np n)) TT\n\ngoal (1 subgoal):\n 1. s \\<in> reachable (pnet np n) TT", ".."], ["proof (state)\nthis:\n  s \\<in> reachable (pnet np n) TT\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "hence \"net_ips s = net_tree_ips n\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (pnet np n) TT\n\ngoal (1 subgoal):\n 1. net_ips s = net_tree_ips n", "by (rule pnet_net_ips_net_tree_ips)"], ["proof (state)\nthis:\n  net_ips s = net_tree_ips n\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "with \\<open>initmissing (netgmap sr s) \\<in> ?oreachable n\\<close>"], ["proof (chain)\npicking this:\n  initmissing (netgmap sr s)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n  net_ips s = net_tree_ips n", "have \"netgmap sr s \\<in> netmask (net_tree_ips n) ` ?oreachable n\""], ["proof (prove)\nusing this:\n  initmissing (netgmap sr s)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n  net_ips s = net_tree_ips n\n\ngoal (1 subgoal):\n 1. netgmap sr s\n    \\<in> netmask (net_tree_ips n) `\n          oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "by (rule initmissing_oreachable_netmask)"], ["proof (state)\nthis:\n  netgmap sr s\n  \\<in> netmask (net_tree_ips n) `\n        oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "obtain \\<sigma> \\<zeta> where \"(\\<sigma>, \\<zeta>) = initmissing (netgmap sr s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> \\<zeta>.\n        (\\<sigma>, \\<zeta>) = initmissing (netgmap sr s) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>) = initmissing (netgmap sr s)\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "with \\<open>initmissing (netgmap sr s) \\<in> ?oreachable n\\<close>"], ["proof (chain)\npicking this:\n  initmissing (netgmap sr s)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n  (\\<sigma>, \\<zeta>) = initmissing (netgmap sr s)", "have \"(\\<sigma>, \\<zeta>) \\<in> ?oreachable n\""], ["proof (prove)\nusing this:\n  initmissing (netgmap sr s)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n  (\\<sigma>, \\<zeta>) = initmissing (netgmap sr s)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, \\<zeta>)\n    \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "by simp"], ["proof (state)\nthis:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "from \\<open>(\\<sigma>, \\<zeta>) = initmissing (netgmap sr s)\\<close> and \\<open>net_ips s = net_tree_ips n\\<close> [symmetric]"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>) = initmissing (netgmap sr s)\n  net_tree_ips n = net_ips s", "have \"netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\""], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>) = initmissing (netgmap sr s)\n  net_tree_ips n = net_ips s\n\ngoal (1 subgoal):\n 1. netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)", "by (clarsimp simp add: netmask_initmissing_netgmap)"], ["proof (state)\nthis:\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "with \\<open>s \\<in> reachable (closed (pnet np n)) TT\\<close>"], ["proof (chain)\npicking this:\n  s \\<in> reachable (closed (pnet np n)) TT\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)", "obtain \\<sigma>' \\<zeta>' where \"((\\<sigma>, \\<zeta>), a, (\\<sigma>', \\<zeta>')) \\<in> trans (oclosed (opnet onp n))\"\n                     and \"netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\""], ["proof (prove)\nusing this:\n  s \\<in> reachable (closed (pnet np n)) TT\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<zeta>'.\n        \\<lbrakk>((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n                 \\<in> automaton.trans (oclosed (opnet onp n));\n         netgmap sr s' =\n         netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>wf_net_tree n\\<close> and \\<open>(s, a, s') \\<in> trans (closed (pnet np n))\\<close>"], ["proof (prove)\nusing this:\n  s \\<in> reachable (closed (pnet np n)) TT\n  netgmap sr s = netmask (net_tree_ips n) (\\<sigma>, \\<zeta>)\n  wf_net_tree n\n  (s, a, s') \\<in> automaton.trans (closed (pnet np n))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma>' \\<zeta>'.\n        \\<lbrakk>((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n                 \\<in> automaton.trans (oclosed (opnet onp n));\n         netgmap sr s' =\n         netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule transfer_action)"], ["proof (state)\nthis:\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (oclosed (opnet onp n))\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "from \\<open>(\\<sigma>, \\<zeta>) \\<in> ?oreachable n\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "have \"net_ips \\<zeta> = net_tree_ips n\""], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. net_ips \\<zeta> = net_tree_ips n", "by (rule opnet_net_ips_net_tree_ips [OF oclosed_oreachable_oreachable])"], ["proof (state)\nthis:\n  net_ips \\<zeta> = net_tree_ips n\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "with \\<open>((\\<sigma>, \\<zeta>), a, (\\<sigma>', \\<zeta>')) \\<in> trans (oclosed (opnet onp n))\\<close>"], ["proof (chain)\npicking this:\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (oclosed (opnet onp n))\n  net_ips \\<zeta> = net_tree_ips n", "have \"\\<forall>j. j\\<notin>net_tree_ips n \\<longrightarrow> \\<sigma>' j = \\<sigma> j\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (oclosed (opnet onp n))\n  net_ips \\<zeta> = net_tree_ips n\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<notin> net_tree_ips n \\<longrightarrow> \\<sigma>' j = \\<sigma> j", "by (clarsimp elim!: ocomplete_no_change)"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<notin> net_tree_ips n \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "have \"initmissing (netgmap sr s') = (\\<sigma>', \\<zeta>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. initmissing (netgmap sr s') = (\\<sigma>', \\<zeta>')", "proof (intro prod_eqI ext)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       fst (initmissing (netgmap sr s')) x = fst (\\<sigma>', \\<zeta>') x\n 2. snd (initmissing (netgmap sr s')) = snd (\\<sigma>', \\<zeta>')", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       fst (initmissing (netgmap sr s')) x = fst (\\<sigma>', \\<zeta>') x\n 2. snd (initmissing (netgmap sr s')) = snd (\\<sigma>', \\<zeta>')", "from \\<open>netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\\<close>\n           \\<open>\\<forall>j. j\\<notin>net_tree_ips n \\<longrightarrow> \\<sigma>' j = \\<sigma> j\\<close>\n           \\<open>(\\<sigma>, \\<zeta>) = initmissing (netgmap sr s)\\<close>\n           \\<open>net_ips s = net_tree_ips n\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n  \\<forall>j.\n     j \\<notin> net_tree_ips n \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n  (\\<sigma>, \\<zeta>) = initmissing (netgmap sr s)\n  net_ips s = net_tree_ips n", "show \"fst (initmissing (netgmap sr s')) i = fst (\\<sigma>', \\<zeta>') i\""], ["proof (prove)\nusing this:\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n  \\<forall>j.\n     j \\<notin> net_tree_ips n \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n  (\\<sigma>, \\<zeta>) = initmissing (netgmap sr s)\n  net_ips s = net_tree_ips n\n\ngoal (1 subgoal):\n 1. fst (initmissing (netgmap sr s')) i = fst (\\<sigma>', \\<zeta>') i", "unfolding initmissing_def"], ["proof (prove)\nusing this:\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n  \\<forall>j.\n     j \\<notin> net_tree_ips n \\<longrightarrow> \\<sigma>' j = \\<sigma> j\n  (\\<sigma>, \\<zeta>) =\n  (\\<lambda>i.\n      case fst (netgmap sr s) i of None \\<Rightarrow> someinit i\n      | Some s \\<Rightarrow> s,\n   snd (netgmap sr s))\n  net_ips s = net_tree_ips n\n\ngoal (1 subgoal):\n 1. fst (\\<lambda>i.\n            case fst (netgmap sr s') i of None \\<Rightarrow> someinit i\n            | Some s \\<Rightarrow> s,\n         snd (netgmap sr s'))\n     i =\n    fst (\\<sigma>', \\<zeta>') i", "by simp"], ["proof (state)\nthis:\n  fst (initmissing (netgmap sr s')) i = fst (\\<sigma>', \\<zeta>') i\n\ngoal (1 subgoal):\n 1. snd (initmissing (netgmap sr s')) = snd (\\<sigma>', \\<zeta>')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. snd (initmissing (netgmap sr s')) = snd (\\<sigma>', \\<zeta>')", "from \\<open>netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\\<close>"], ["proof (chain)\npicking this:\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')", "show \"snd (initmissing (netgmap sr s')) = snd (\\<sigma>', \\<zeta>')\""], ["proof (prove)\nusing this:\n  netgmap sr s' = netmask (net_tree_ips n) (\\<sigma>', \\<zeta>')\n\ngoal (1 subgoal):\n 1. snd (initmissing (netgmap sr s')) = snd (\\<sigma>', \\<zeta>')", "by simp"], ["proof (state)\nthis:\n  snd (initmissing (netgmap sr s')) = snd (\\<sigma>', \\<zeta>')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  initmissing (netgmap sr s') = (\\<sigma>', \\<zeta>')\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "moreover"], ["proof (state)\nthis:\n  initmissing (netgmap sr s') = (\\<sigma>', \\<zeta>')\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "from \\<open>(\\<sigma>, \\<zeta>) \\<in> ?oreachable n\\<close> \\<open>((\\<sigma>, \\<zeta>), a, (\\<sigma>', \\<zeta>')) \\<in> trans (oclosed (opnet onp n))\\<close>"], ["proof (chain)\npicking this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (oclosed (opnet onp n))", "have \"(\\<sigma>', \\<zeta>') \\<in> ?oreachable n\""], ["proof (prove)\nusing this:\n  (\\<sigma>, \\<zeta>)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n  ((\\<sigma>, \\<zeta>), a, \\<sigma>', \\<zeta>')\n  \\<in> automaton.trans (oclosed (opnet onp n))\n\ngoal (1 subgoal):\n 1. (\\<sigma>', \\<zeta>')\n    \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "by (rule oreachable_local) (rule TrueI)"], ["proof (state)\nthis:\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. \\<And>s a s'.\n       \\<lbrakk>s \\<in> reachable (closed (pnet np n)) TT;\n        initmissing (netgmap sr s)\n        \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U;\n        (s, a, s') \\<in> automaton.trans (closed (pnet np n)); TT a\\<rbrakk>\n       \\<Longrightarrow> initmissing (netgmap sr s')\n                         \\<in> oreachable (oclosed (opnet onp n))\n                                (\\<lambda>_ _ _. True) U", "ultimately"], ["proof (chain)\npicking this:\n  initmissing (netgmap sr s') = (\\<sigma>', \\<zeta>')\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "show \"initmissing (netgmap sr s') \\<in> ?oreachable n\""], ["proof (prove)\nusing this:\n  initmissing (netgmap sr s') = (\\<sigma>', \\<zeta>')\n  (\\<sigma>', \\<zeta>')\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. initmissing (netgmap sr s')\n    \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "by simp"], ["proof (state)\nthis:\n  initmissing (netgmap sr s')\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal:\nNo subgoals!", "qed"], ["", "definition\n  netglobal :: \"((nat \\<Rightarrow> 'g) \\<Rightarrow> bool) \\<Rightarrow> 's net_state \\<Rightarrow> bool\"\nwhere\n  \"netglobal P \\<equiv> (\\<lambda>s. P (fst (initmissing (netgmap sr s))))\""], ["", "lemma netglobalsimp [simp]:\n  \"netglobal P s = P (fst (initmissing (netgmap sr s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netglobal P s = P (fst (initmissing (netgmap sr s)))", "unfolding netglobal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (fst (initmissing (netgmap sr s))) =\n    P (fst (initmissing (netgmap sr s)))", "by simp"], ["", "lemma netglobalE [elim]:\n  assumes \"netglobal P s\"\n      and \"\\<And>\\<sigma>. \\<lbrakk> P \\<sigma>; fst (initmissing (netgmap sr s)) = \\<sigma> \\<rbrakk> \\<Longrightarrow> Q \\<sigma>\"\n    shows \"netglobal Q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. netglobal Q s", "using assms"], ["proof (prove)\nusing this:\n  netglobal P s\n  \\<lbrakk>P ?\\<sigma>1;\n   fst (initmissing (netgmap sr s)) = ?\\<sigma>1\\<rbrakk>\n  \\<Longrightarrow> Q ?\\<sigma>1\n\ngoal (1 subgoal):\n 1. netglobal Q s", "by simp"], ["", "lemma netglobal_weakenE [elim]:\n  assumes \"p \\<TTurnstile> netglobal P\"\n      and \"\\<And>\\<sigma>. P \\<sigma> \\<Longrightarrow> Q \\<sigma>\"\n    shows \"p \\<TTurnstile> netglobal Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<TTurnstile> netglobal Q", "using assms(1)"], ["proof (prove)\nusing this:\n  p \\<TTurnstile> netglobal P\n\ngoal (1 subgoal):\n 1. p \\<TTurnstile> netglobal Q", "proof (rule invariant_weakenE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s. netglobal P s \\<Longrightarrow> netglobal Q s\n 2. \\<And>a. TT a \\<Longrightarrow> TT a", "fix s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s. netglobal P s \\<Longrightarrow> netglobal Q s\n 2. \\<And>a. TT a \\<Longrightarrow> TT a", "assume \"netglobal P s\""], ["proof (state)\nthis:\n  netglobal P s\n\ngoal (2 subgoals):\n 1. \\<And>s. netglobal P s \\<Longrightarrow> netglobal Q s\n 2. \\<And>a. TT a \\<Longrightarrow> TT a", "thus \"netglobal Q s\""], ["proof (prove)\nusing this:\n  netglobal P s\n\ngoal (1 subgoal):\n 1. netglobal Q s", "by (rule netglobalE) (erule assms(2))"], ["proof (state)\nthis:\n  netglobal Q s\n\ngoal (1 subgoal):\n 1. \\<And>a. TT a \\<Longrightarrow> TT a", "qed"], ["", "lemma close_opnet:\n  assumes \"wf_net_tree n\"\n      and \"oclosed (opnet onp n) \\<Turnstile> (\\<lambda>_ _ _. True, U \\<rightarrow>) global P\"\n    shows \"closed (pnet np n) \\<TTurnstile> netglobal P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed (pnet np n) \\<TTurnstile> netglobal P", "unfolding invariant_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball (reachable (closed (pnet np n)) TT) (netglobal P)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> reachable (closed (pnet np n)) TT \\<Longrightarrow>\n       netglobal P x", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> reachable (closed (pnet np n)) TT \\<Longrightarrow>\n       netglobal P x", "assume \"s \\<in> reachable (closed (pnet np n)) TT\""], ["proof (state)\nthis:\n  s \\<in> reachable (closed (pnet np n)) TT\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> reachable (closed (pnet np n)) TT \\<Longrightarrow>\n       netglobal P x", "with assms(1)"], ["proof (chain)\npicking this:\n  wf_net_tree n\n  s \\<in> reachable (closed (pnet np n)) TT", "have \"initmissing (netgmap sr s) \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\""], ["proof (prove)\nusing this:\n  wf_net_tree n\n  s \\<in> reachable (closed (pnet np n)) TT\n\ngoal (1 subgoal):\n 1. initmissing (netgmap sr s)\n    \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "by (rule pnet_reachable_transfer)"], ["proof (state)\nthis:\n  initmissing (netgmap sr s)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> reachable (closed (pnet np n)) TT \\<Longrightarrow>\n       netglobal P x", "with assms(2)"], ["proof (chain)\npicking this:\n  oclosed\n   (opnet onp\n     n) \\<Turnstile> (\\<lambda>_ _ _. True, U \\<rightarrow>) global P\n  initmissing (netgmap sr s)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U", "have \"global P (initmissing (netgmap sr s))\""], ["proof (prove)\nusing this:\n  oclosed\n   (opnet onp\n     n) \\<Turnstile> (\\<lambda>_ _ _. True, U \\<rightarrow>) global P\n  initmissing (netgmap sr s)\n  \\<in> oreachable (oclosed (opnet onp n)) (\\<lambda>_ _ _. True) U\n\ngoal (1 subgoal):\n 1. global P (initmissing (netgmap sr s))", ".."], ["proof (state)\nthis:\n  global P (initmissing (netgmap sr s))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> reachable (closed (pnet np n)) TT \\<Longrightarrow>\n       netglobal P x", "thus \"netglobal P s\""], ["proof (prove)\nusing this:\n  global P (initmissing (netgmap sr s))\n\ngoal (1 subgoal):\n 1. netglobal P s", "by simp"], ["proof (state)\nthis:\n  netglobal P s\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale openproc_parq =\n  op?: openproc np onp sr for np :: \"ip \\<Rightarrow> ('s, ('m::msg) seq_action) automaton\" and onp sr\n  + fixes qp :: \"('t, 'm seq_action) automaton\"\n    assumes init_qp_notempty: \"init qp \\<noteq> {}\""], ["", "sublocale openproc_parq \\<subseteq> openproc \"\\<lambda>i. np i \\<langle>\\<langle> qp\"\n                                   \"\\<lambda>i. onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp\"\n                                   \"\\<lambda>(p, q). (fst (sr p), (snd (sr p), q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. openproc (\\<lambda>i. np i \\<langle>\\<langle> qp)\n     (\\<lambda>i. onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n     (\\<lambda>(p, q). (fst (sr p), snd (sr p), q))", "proof unfold_locales"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i.\n       {uu_.\n        \\<exists>\\<sigma> \\<zeta> s.\n           uu_ = (\\<sigma>, \\<zeta>) \\<and>\n           s \\<in> init (np i \\<langle>\\<langle> qp) \\<and>\n           (\\<sigma> i, \\<zeta>) =\n           (case s of\n            (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q)) \\<and>\n           (\\<forall>j.\n               j \\<noteq> i \\<longrightarrow>\n               \\<sigma> j\n               \\<in> (fst \\<circ>\n                      (\\<lambda>(p, q). (fst (sr p), snd (sr p), q))) `\n                     init (np j \\<langle>\\<langle> qp))}\n       \\<subseteq> init (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n 2. \\<forall>j. init (np j \\<langle>\\<langle> qp) \\<noteq> {}\n 3. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i =\n                fst (case s of\n                     (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q));\n        \\<sigma>' i =\n        fst (case s' of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q));\n        (s, a, s')\n        \\<in> automaton.trans (np i \\<langle>\\<langle> qp)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>,\n                           snd (case s of\n                                (p, q) \\<Rightarrow>\n                                  (fst (sr p), snd (sr p), q))),\n                          a, \\<sigma>',\n                          snd (case s' of\n                               (p, q) \\<Rightarrow>\n                                 (fst (sr p), snd (sr p), q)))\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "fix i"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i.\n       {uu_.\n        \\<exists>\\<sigma> \\<zeta> s.\n           uu_ = (\\<sigma>, \\<zeta>) \\<and>\n           s \\<in> init (np i \\<langle>\\<langle> qp) \\<and>\n           (\\<sigma> i, \\<zeta>) =\n           (case s of\n            (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q)) \\<and>\n           (\\<forall>j.\n               j \\<noteq> i \\<longrightarrow>\n               \\<sigma> j\n               \\<in> (fst \\<circ>\n                      (\\<lambda>(p, q). (fst (sr p), snd (sr p), q))) `\n                     init (np j \\<langle>\\<langle> qp))}\n       \\<subseteq> init (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n 2. \\<forall>j. init (np j \\<langle>\\<langle> qp) \\<noteq> {}\n 3. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i =\n                fst (case s of\n                     (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q));\n        \\<sigma>' i =\n        fst (case s' of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q));\n        (s, a, s')\n        \\<in> automaton.trans (np i \\<langle>\\<langle> qp)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>,\n                           snd (case s of\n                                (p, q) \\<Rightarrow>\n                                  (fst (sr p), snd (sr p), q))),\n                          a, \\<sigma>',\n                          snd (case s' of\n                               (p, q) \\<Rightarrow>\n                                 (fst (sr p), snd (sr p), q)))\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "show \"{ (\\<sigma>, \\<zeta>) |\\<sigma> \\<zeta> s. s \\<in> init (np i \\<langle>\\<langle> qp)\n                         \\<and> (\\<sigma> i, \\<zeta>) = ((\\<lambda>(p, q). (fst (sr p), (snd (sr p), q))) s)\n                         \\<and> (\\<forall>j. j\\<noteq>i \\<longrightarrow> \\<sigma> j \\<in> (fst o (\\<lambda>(p, q). (fst (sr p), (snd (sr p), q))))\n                                                  ` init (np j \\<langle>\\<langle> qp)) } \\<subseteq> init (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\"\n       (is \"?S \\<subseteq> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {uu_.\n     \\<exists>\\<sigma> \\<zeta> s.\n        uu_ = (\\<sigma>, \\<zeta>) \\<and>\n        s \\<in> init (np i \\<langle>\\<langle> qp) \\<and>\n        (\\<sigma> i, \\<zeta>) =\n        (case s of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q)) \\<and>\n        (\\<forall>j.\n            j \\<noteq> i \\<longrightarrow>\n            \\<sigma> j\n            \\<in> (fst \\<circ>\n                   (\\<lambda>(p, q). (fst (sr p), snd (sr p), q))) `\n                  init (np j \\<langle>\\<langle> qp))}\n    \\<subseteq> init (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {uu_.\n                \\<exists>\\<sigma> \\<zeta> s.\n                   uu_ = (\\<sigma>, \\<zeta>) \\<and>\n                   s \\<in> init (np i \\<langle>\\<langle> qp) \\<and>\n                   (\\<sigma> i, \\<zeta>) =\n                   (case s of\n                    (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q)) \\<and>\n                   (\\<forall>j.\n                       j \\<noteq> i \\<longrightarrow>\n                       \\<sigma> j\n                       \\<in> (fst \\<circ>\n                              (\\<lambda>(p, q).\n                                  (fst (sr p), snd (sr p), q))) `\n                             init\n                              (np j \\<langle>\\<langle> qp))} \\<Longrightarrow>\n       x \\<in> init (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {uu_.\n                \\<exists>\\<sigma> \\<zeta> s.\n                   uu_ = (\\<sigma>, \\<zeta>) \\<and>\n                   s \\<in> init (np i \\<langle>\\<langle> qp) \\<and>\n                   (\\<sigma> i, \\<zeta>) =\n                   (case s of\n                    (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q)) \\<and>\n                   (\\<forall>j.\n                       j \\<noteq> i \\<longrightarrow>\n                       \\<sigma> j\n                       \\<in> (fst \\<circ>\n                              (\\<lambda>(p, q).\n                                  (fst (sr p), snd (sr p), q))) `\n                             init\n                              (np j \\<langle>\\<langle> qp))} \\<Longrightarrow>\n       x \\<in> init (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "assume \"s \\<in> ?S\""], ["proof (state)\nthis:\n  s \\<in> {uu_.\n           \\<exists>\\<sigma> \\<zeta> s.\n              uu_ = (\\<sigma>, \\<zeta>) \\<and>\n              s \\<in> init (np i \\<langle>\\<langle> qp) \\<and>\n              (\\<sigma> i, \\<zeta>) =\n              (case s of\n               (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q)) \\<and>\n              (\\<forall>j.\n                  j \\<noteq> i \\<longrightarrow>\n                  \\<sigma> j\n                  \\<in> (fst \\<circ>\n                         (\\<lambda>(p, q). (fst (sr p), snd (sr p), q))) `\n                        init (np j \\<langle>\\<langle> qp))}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {uu_.\n                \\<exists>\\<sigma> \\<zeta> s.\n                   uu_ = (\\<sigma>, \\<zeta>) \\<and>\n                   s \\<in> init (np i \\<langle>\\<langle> qp) \\<and>\n                   (\\<sigma> i, \\<zeta>) =\n                   (case s of\n                    (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q)) \\<and>\n                   (\\<forall>j.\n                       j \\<noteq> i \\<longrightarrow>\n                       \\<sigma> j\n                       \\<in> (fst \\<circ>\n                              (\\<lambda>(p, q).\n                                  (fst (sr p), snd (sr p), q))) `\n                             init\n                              (np j \\<langle>\\<langle> qp))} \\<Longrightarrow>\n       x \\<in> init (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "then"], ["proof (chain)\npicking this:\n  s \\<in> {uu_.\n           \\<exists>\\<sigma> \\<zeta> s.\n              uu_ = (\\<sigma>, \\<zeta>) \\<and>\n              s \\<in> init (np i \\<langle>\\<langle> qp) \\<and>\n              (\\<sigma> i, \\<zeta>) =\n              (case s of\n               (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q)) \\<and>\n              (\\<forall>j.\n                  j \\<noteq> i \\<longrightarrow>\n                  \\<sigma> j\n                  \\<in> (fst \\<circ>\n                         (\\<lambda>(p, q). (fst (sr p), snd (sr p), q))) `\n                        init (np j \\<langle>\\<langle> qp))}", "obtain \\<sigma> p lq\n        where \"s = (\\<sigma>, (snd (sr p), lq))\"\n          and \"lq \\<in> init qp\"\n          and \"p \\<in> init (np i)\"\n          and \"\\<sigma> i = fst (sr p)\"\n          and \"\\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma> j \\<in> (fst \\<circ> (\\<lambda>(p, q). (fst (sr p), snd (sr p), q)))\n                                                                        ` (init (np j) \\<times> init qp)\""], ["proof (prove)\nusing this:\n  s \\<in> {uu_.\n           \\<exists>\\<sigma> \\<zeta> s.\n              uu_ = (\\<sigma>, \\<zeta>) \\<and>\n              s \\<in> init (np i \\<langle>\\<langle> qp) \\<and>\n              (\\<sigma> i, \\<zeta>) =\n              (case s of\n               (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q)) \\<and>\n              (\\<forall>j.\n                  j \\<noteq> i \\<longrightarrow>\n                  \\<sigma> j\n                  \\<in> (fst \\<circ>\n                         (\\<lambda>(p, q). (fst (sr p), snd (sr p), q))) `\n                        init (np j \\<langle>\\<langle> qp))}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<sigma> p lq.\n        \\<lbrakk>s = (\\<sigma>, snd (sr p), lq); lq \\<in> init qp;\n         p \\<in> init (np i); \\<sigma> i = fst (sr p);\n         \\<forall>j.\n            j \\<noteq> i \\<longrightarrow>\n            \\<sigma> j\n            \\<in> (fst \\<circ>\n                   (\\<lambda>(p, q). (fst (sr p), snd (sr p), q))) `\n                  (init (np j) \\<times> init qp)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s = (\\<sigma>, snd (sr p), lq)\n  lq \\<in> init qp\n  p \\<in> init (np i)\n  \\<sigma> i = fst (sr p)\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     \\<sigma> j\n     \\<in> (fst \\<circ> (\\<lambda>(p, q). (fst (sr p), snd (sr p), q))) `\n           (init (np j) \\<times> init qp)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {uu_.\n                \\<exists>\\<sigma> \\<zeta> s.\n                   uu_ = (\\<sigma>, \\<zeta>) \\<and>\n                   s \\<in> init (np i \\<langle>\\<langle> qp) \\<and>\n                   (\\<sigma> i, \\<zeta>) =\n                   (case s of\n                    (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q)) \\<and>\n                   (\\<forall>j.\n                       j \\<noteq> i \\<longrightarrow>\n                       \\<sigma> j\n                       \\<in> (fst \\<circ>\n                              (\\<lambda>(p, q).\n                                  (fst (sr p), snd (sr p), q))) `\n                             init\n                              (np j \\<langle>\\<langle> qp))} \\<Longrightarrow>\n       x \\<in> init (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "from this(5)"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     \\<sigma> j\n     \\<in> (fst \\<circ> (\\<lambda>(p, q). (fst (sr p), snd (sr p), q))) `\n           (init (np j) \\<times> init qp)", "have \"\\<forall>j. j \\<noteq> i \\<longrightarrow> \\<sigma> j \\<in> (fst \\<circ> sr) ` init (np j)\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     \\<sigma> j\n     \\<in> (fst \\<circ> (\\<lambda>(p, q). (fst (sr p), snd (sr p), q))) `\n           (init (np j) \\<times> init qp)\n\ngoal (1 subgoal):\n 1. \\<forall>j.\n       j \\<noteq> i \\<longrightarrow>\n       \\<sigma> j \\<in> (fst \\<circ> sr) ` init (np j)", "by auto"], ["proof (state)\nthis:\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     \\<sigma> j \\<in> (fst \\<circ> sr) ` init (np j)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {uu_.\n                \\<exists>\\<sigma> \\<zeta> s.\n                   uu_ = (\\<sigma>, \\<zeta>) \\<and>\n                   s \\<in> init (np i \\<langle>\\<langle> qp) \\<and>\n                   (\\<sigma> i, \\<zeta>) =\n                   (case s of\n                    (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q)) \\<and>\n                   (\\<forall>j.\n                       j \\<noteq> i \\<longrightarrow>\n                       \\<sigma> j\n                       \\<in> (fst \\<circ>\n                              (\\<lambda>(p, q).\n                                  (fst (sr p), snd (sr p), q))) `\n                             init\n                              (np j \\<langle>\\<langle> qp))} \\<Longrightarrow>\n       x \\<in> init (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "with \\<open>p \\<in> init (np i)\\<close> and \\<open>\\<sigma> i = fst (sr p)\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> init (np i)\n  \\<sigma> i = fst (sr p)\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     \\<sigma> j \\<in> (fst \\<circ> sr) ` init (np j)", "have \"(\\<sigma>, snd (sr p)) \\<in> init (onp i)\""], ["proof (prove)\nusing this:\n  p \\<in> init (np i)\n  \\<sigma> i = fst (sr p)\n  \\<forall>j.\n     j \\<noteq> i \\<longrightarrow>\n     \\<sigma> j \\<in> (fst \\<circ> sr) ` init (np j)\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (sr p)) \\<in> init (onp i)", "by - (rule init [THEN subsetD], auto)"], ["proof (state)\nthis:\n  (\\<sigma>, snd (sr p)) \\<in> init (onp i)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {uu_.\n                \\<exists>\\<sigma> \\<zeta> s.\n                   uu_ = (\\<sigma>, \\<zeta>) \\<and>\n                   s \\<in> init (np i \\<langle>\\<langle> qp) \\<and>\n                   (\\<sigma> i, \\<zeta>) =\n                   (case s of\n                    (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q)) \\<and>\n                   (\\<forall>j.\n                       j \\<noteq> i \\<longrightarrow>\n                       \\<sigma> j\n                       \\<in> (fst \\<circ>\n                              (\\<lambda>(p, q).\n                                  (fst (sr p), snd (sr p), q))) `\n                             init\n                              (np j \\<langle>\\<langle> qp))} \\<Longrightarrow>\n       x \\<in> init (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "with \\<open>lq\\<in> init qp\\<close>"], ["proof (chain)\npicking this:\n  lq \\<in> init qp\n  (\\<sigma>, snd (sr p)) \\<in> init (onp i)", "have \"((\\<sigma>, snd (sr p)), lq) \\<in> init (onp i) \\<times> init qp\""], ["proof (prove)\nusing this:\n  lq \\<in> init qp\n  (\\<sigma>, snd (sr p)) \\<in> init (onp i)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (sr p)), lq) \\<in> init (onp i) \\<times> init qp", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (sr p)), lq) \\<in> init (onp i) \\<times> init qp\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {uu_.\n                \\<exists>\\<sigma> \\<zeta> s.\n                   uu_ = (\\<sigma>, \\<zeta>) \\<and>\n                   s \\<in> init (np i \\<langle>\\<langle> qp) \\<and>\n                   (\\<sigma> i, \\<zeta>) =\n                   (case s of\n                    (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q)) \\<and>\n                   (\\<forall>j.\n                       j \\<noteq> i \\<longrightarrow>\n                       \\<sigma> j\n                       \\<in> (fst \\<circ>\n                              (\\<lambda>(p, q).\n                                  (fst (sr p), snd (sr p), q))) `\n                             init\n                              (np j \\<langle>\\<langle> qp))} \\<Longrightarrow>\n       x \\<in> init (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "hence \"(\\<sigma>, (snd (sr p), lq)) \\<in> extg ` (init (onp i) \\<times> init qp)\""], ["proof (prove)\nusing this:\n  ((\\<sigma>, snd (sr p)), lq) \\<in> init (onp i) \\<times> init qp\n\ngoal (1 subgoal):\n 1. (\\<sigma>, snd (sr p), lq) \\<in> extg ` (init (onp i) \\<times> init qp)", "by (rule rev_image_eqI) simp"], ["proof (state)\nthis:\n  (\\<sigma>, snd (sr p), lq) \\<in> extg ` (init (onp i) \\<times> init qp)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {uu_.\n                \\<exists>\\<sigma> \\<zeta> s.\n                   uu_ = (\\<sigma>, \\<zeta>) \\<and>\n                   s \\<in> init (np i \\<langle>\\<langle> qp) \\<and>\n                   (\\<sigma> i, \\<zeta>) =\n                   (case s of\n                    (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q)) \\<and>\n                   (\\<forall>j.\n                       j \\<noteq> i \\<longrightarrow>\n                       \\<sigma> j\n                       \\<in> (fst \\<circ>\n                              (\\<lambda>(p, q).\n                                  (fst (sr p), snd (sr p), q))) `\n                             init\n                              (np j \\<langle>\\<langle> qp))} \\<Longrightarrow>\n       x \\<in> init (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "with \\<open>s = (\\<sigma>, (snd (sr p), lq))\\<close>"], ["proof (chain)\npicking this:\n  s = (\\<sigma>, snd (sr p), lq)\n  (\\<sigma>, snd (sr p), lq) \\<in> extg ` (init (onp i) \\<times> init qp)", "show \"s \\<in> init (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\""], ["proof (prove)\nusing this:\n  s = (\\<sigma>, snd (sr p), lq)\n  (\\<sigma>, snd (sr p), lq) \\<in> extg ` (init (onp i) \\<times> init qp)\n\ngoal (1 subgoal):\n 1. s \\<in> init (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "by simp"], ["proof (state)\nthis:\n  s \\<in> init (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {uu_.\n   \\<exists>\\<sigma> \\<zeta> s.\n      uu_ = (\\<sigma>, \\<zeta>) \\<and>\n      s \\<in> init (np i \\<langle>\\<langle> qp) \\<and>\n      (\\<sigma> i, \\<zeta>) =\n      (case s of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q)) \\<and>\n      (\\<forall>j.\n          j \\<noteq> i \\<longrightarrow>\n          \\<sigma> j\n          \\<in> (fst \\<circ>\n                 (\\<lambda>(p, q). (fst (sr p), snd (sr p), q))) `\n                init (np j \\<langle>\\<langle> qp))}\n  \\<subseteq> init (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n\ngoal (2 subgoals):\n 1. \\<forall>j. init (np j \\<langle>\\<langle> qp) \\<noteq> {}\n 2. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i =\n                fst (case s of\n                     (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q));\n        \\<sigma>' i =\n        fst (case s' of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q));\n        (s, a, s')\n        \\<in> automaton.trans (np i \\<langle>\\<langle> qp)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>,\n                           snd (case s of\n                                (p, q) \\<Rightarrow>\n                                  (fst (sr p), snd (sr p), q))),\n                          a, \\<sigma>',\n                          snd (case s' of\n                               (p, q) \\<Rightarrow>\n                                 (fst (sr p), snd (sr p), q)))\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>j. init (np j \\<langle>\\<langle> qp) \\<noteq> {}\n 2. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i =\n                fst (case s of\n                     (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q));\n        \\<sigma>' i =\n        fst (case s' of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q));\n        (s, a, s')\n        \\<in> automaton.trans (np i \\<langle>\\<langle> qp)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>,\n                           snd (case s of\n                                (p, q) \\<Rightarrow>\n                                  (fst (sr p), snd (sr p), q))),\n                          a, \\<sigma>',\n                          snd (case s' of\n                               (p, q) \\<Rightarrow>\n                                 (fst (sr p), snd (sr p), q)))\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "fix i s a s' \\<sigma> \\<sigma>'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>j. init (np j \\<langle>\\<langle> qp) \\<noteq> {}\n 2. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i =\n                fst (case s of\n                     (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q));\n        \\<sigma>' i =\n        fst (case s' of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q));\n        (s, a, s')\n        \\<in> automaton.trans (np i \\<langle>\\<langle> qp)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>,\n                           snd (case s of\n                                (p, q) \\<Rightarrow>\n                                  (fst (sr p), snd (sr p), q))),\n                          a, \\<sigma>',\n                          snd (case s' of\n                               (p, q) \\<Rightarrow>\n                                 (fst (sr p), snd (sr p), q)))\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "assume \"\\<sigma> i = fst ((\\<lambda>(p, q). (fst (sr p), (snd (sr p), q))) s)\"\n       and \"\\<sigma>' i = fst ((\\<lambda>(p, q). (fst (sr p), (snd (sr p), q))) s')\"\n       and \"(s, a, s') \\<in> trans (np i \\<langle>\\<langle> qp)\""], ["proof (state)\nthis:\n  \\<sigma> i =\n  fst (case s of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q))\n  \\<sigma>' i =\n  fst (case s' of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q))\n  (s, a, s') \\<in> automaton.trans (np i \\<langle>\\<langle> qp)\n\ngoal (2 subgoals):\n 1. \\<forall>j. init (np j \\<langle>\\<langle> qp) \\<noteq> {}\n 2. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i =\n                fst (case s of\n                     (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q));\n        \\<sigma>' i =\n        fst (case s' of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q));\n        (s, a, s')\n        \\<in> automaton.trans (np i \\<langle>\\<langle> qp)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>,\n                           snd (case s of\n                                (p, q) \\<Rightarrow>\n                                  (fst (sr p), snd (sr p), q))),\n                          a, \\<sigma>',\n                          snd (case s' of\n                               (p, q) \\<Rightarrow>\n                                 (fst (sr p), snd (sr p), q)))\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "then"], ["proof (chain)\npicking this:\n  \\<sigma> i =\n  fst (case s of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q))\n  \\<sigma>' i =\n  fst (case s' of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q))\n  (s, a, s') \\<in> automaton.trans (np i \\<langle>\\<langle> qp)", "obtain p q p' q' where \"s  = (p, q)\"\n                            and \"s' = (p', q')\"\n                            and \"\\<sigma> i  = fst (sr p)\"\n                            and \"\\<sigma>' i = fst (sr p')\""], ["proof (prove)\nusing this:\n  \\<sigma> i =\n  fst (case s of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q))\n  \\<sigma>' i =\n  fst (case s' of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q))\n  (s, a, s') \\<in> automaton.trans (np i \\<langle>\\<langle> qp)\n\ngoal (1 subgoal):\n 1. (\\<And>p q p' q'.\n        \\<lbrakk>s = (p, q); s' = (p', q'); \\<sigma> i = fst (sr p);\n         \\<sigma>' i = fst (sr p')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (clarsimp split: prod.split_asm)"], ["proof (state)\nthis:\n  s = (p, q)\n  s' = (p', q')\n  \\<sigma> i = fst (sr p)\n  \\<sigma>' i = fst (sr p')\n\ngoal (2 subgoals):\n 1. \\<forall>j. init (np j \\<langle>\\<langle> qp) \\<noteq> {}\n 2. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i =\n                fst (case s of\n                     (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q));\n        \\<sigma>' i =\n        fst (case s' of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q));\n        (s, a, s')\n        \\<in> automaton.trans (np i \\<langle>\\<langle> qp)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>,\n                           snd (case s of\n                                (p, q) \\<Rightarrow>\n                                  (fst (sr p), snd (sr p), q))),\n                          a, \\<sigma>',\n                          snd (case s' of\n                               (p, q) \\<Rightarrow>\n                                 (fst (sr p), snd (sr p), q)))\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "from this(1-2) and \\<open>(s, a, s') \\<in> trans (np i \\<langle>\\<langle> qp)\\<close>"], ["proof (chain)\npicking this:\n  s = (p, q)\n  s' = (p', q')\n  (s, a, s') \\<in> automaton.trans (np i \\<langle>\\<langle> qp)", "have \"((p, q), a, (p', q')) \\<in> parp_sos (trans (np i)) (trans qp)\""], ["proof (prove)\nusing this:\n  s = (p, q)\n  s' = (p', q')\n  (s, a, s') \\<in> automaton.trans (np i \\<langle>\\<langle> qp)\n\ngoal (1 subgoal):\n 1. ((p, q), a, p', q')\n    \\<in> parp_sos (automaton.trans (np i)) (automaton.trans qp)", "by simp"], ["proof (state)\nthis:\n  ((p, q), a, p', q')\n  \\<in> parp_sos (automaton.trans (np i)) (automaton.trans qp)\n\ngoal (2 subgoals):\n 1. \\<forall>j. init (np j \\<langle>\\<langle> qp) \\<noteq> {}\n 2. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i =\n                fst (case s of\n                     (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q));\n        \\<sigma>' i =\n        fst (case s' of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q));\n        (s, a, s')\n        \\<in> automaton.trans (np i \\<langle>\\<langle> qp)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>,\n                           snd (case s of\n                                (p, q) \\<Rightarrow>\n                                  (fst (sr p), snd (sr p), q))),\n                          a, \\<sigma>',\n                          snd (case s' of\n                               (p, q) \\<Rightarrow>\n                                 (fst (sr p), snd (sr p), q)))\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "hence \"((\\<sigma>, (snd (sr p), q)), a, (\\<sigma>', (snd (sr p'), q'))) \\<in> trans (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\""], ["proof (prove)\nusing this:\n  ((p, q), a, p', q')\n  \\<in> parp_sos (automaton.trans (np i)) (automaton.trans qp)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (sr p), q), a, \\<sigma>', snd (sr p'), q')\n    \\<in> automaton.trans (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>q' = q; (p, a, p') \\<in> automaton.trans (np i);\n     \\<And>m. a \\<noteq> receive m\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>', snd (sr p'),\n                       q')\n                      \\<in> automaton.trans\n                             (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n 2. \\<lbrakk>p' = p; (q, a, q') \\<in> automaton.trans qp;\n     \\<And>m. a \\<noteq> send m\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>', snd (sr p'),\n                       q')\n                      \\<in> automaton.trans\n                             (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n 3. \\<And>m.\n       \\<lbrakk>a = \\<tau>; (p, receive m, p') \\<in> automaton.trans (np i);\n        (q, send m, q') \\<in> automaton.trans qp\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>',\n                          snd (sr p'), q')\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "assume \"q' = q\"\n         and \"(p, a, p') \\<in> trans (np i)\"\n         and \"\\<And>m. a \\<noteq> receive m\""], ["proof (state)\nthis:\n  q' = q\n  (p, a, p') \\<in> automaton.trans (np i)\n  a \\<noteq> receive ?m1\n\ngoal (3 subgoals):\n 1. \\<lbrakk>q' = q; (p, a, p') \\<in> automaton.trans (np i);\n     \\<And>m. a \\<noteq> receive m\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>', snd (sr p'),\n                       q')\n                      \\<in> automaton.trans\n                             (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n 2. \\<lbrakk>p' = p; (q, a, q') \\<in> automaton.trans qp;\n     \\<And>m. a \\<noteq> send m\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>', snd (sr p'),\n                       q')\n                      \\<in> automaton.trans\n                             (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n 3. \\<And>m.\n       \\<lbrakk>a = \\<tau>; (p, receive m, p') \\<in> automaton.trans (np i);\n        (q, send m, q') \\<in> automaton.trans qp\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>',\n                          snd (sr p'), q')\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "from \\<open>\\<sigma> i = fst (sr p)\\<close> and \\<open>\\<sigma>' i = fst (sr p')\\<close> this(2)"], ["proof (chain)\npicking this:\n  \\<sigma> i = fst (sr p)\n  \\<sigma>' i = fst (sr p')\n  (p, a, p') \\<in> automaton.trans (np i)", "have \"((\\<sigma>, snd (sr p)), a, (\\<sigma>', snd (sr p'))) \\<in> trans (onp i)\""], ["proof (prove)\nusing this:\n  \\<sigma> i = fst (sr p)\n  \\<sigma>' i = fst (sr p')\n  (p, a, p') \\<in> automaton.trans (np i)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (sr p)), a, \\<sigma>', snd (sr p'))\n    \\<in> automaton.trans (onp i)", "by (rule trans)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (sr p)), a, \\<sigma>', snd (sr p'))\n  \\<in> automaton.trans (onp i)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>q' = q; (p, a, p') \\<in> automaton.trans (np i);\n     \\<And>m. a \\<noteq> receive m\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>', snd (sr p'),\n                       q')\n                      \\<in> automaton.trans\n                             (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n 2. \\<lbrakk>p' = p; (q, a, q') \\<in> automaton.trans qp;\n     \\<And>m. a \\<noteq> send m\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>', snd (sr p'),\n                       q')\n                      \\<in> automaton.trans\n                             (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n 3. \\<And>m.\n       \\<lbrakk>a = \\<tau>; (p, receive m, p') \\<in> automaton.trans (np i);\n        (q, send m, q') \\<in> automaton.trans qp\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>',\n                          snd (sr p'), q')\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "with \\<open>q' = q\\<close> and \\<open>\\<And>m. a \\<noteq> receive m\\<close>"], ["proof (chain)\npicking this:\n  q' = q\n  a \\<noteq> receive ?m\n  ((\\<sigma>, snd (sr p)), a, \\<sigma>', snd (sr p'))\n  \\<in> automaton.trans (onp i)", "show \"((\\<sigma>, snd (sr p), q), a, (\\<sigma>', (snd (sr p'), q'))) \\<in> trans (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\""], ["proof (prove)\nusing this:\n  q' = q\n  a \\<noteq> receive ?m\n  ((\\<sigma>, snd (sr p)), a, \\<sigma>', snd (sr p'))\n  \\<in> automaton.trans (onp i)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (sr p), q), a, \\<sigma>', snd (sr p'), q')\n    \\<in> automaton.trans (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "by (auto elim!: oparleft)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (sr p), q), a, \\<sigma>', snd (sr p'), q')\n  \\<in> automaton.trans (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>p' = p; (q, a, q') \\<in> automaton.trans qp;\n     \\<And>m. a \\<noteq> send m\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>', snd (sr p'),\n                       q')\n                      \\<in> automaton.trans\n                             (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>; (p, receive m, p') \\<in> automaton.trans (np i);\n        (q, send m, q') \\<in> automaton.trans qp\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>',\n                          snd (sr p'), q')\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>p' = p; (q, a, q') \\<in> automaton.trans qp;\n     \\<And>m. a \\<noteq> send m\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>', snd (sr p'),\n                       q')\n                      \\<in> automaton.trans\n                             (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>; (p, receive m, p') \\<in> automaton.trans (np i);\n        (q, send m, q') \\<in> automaton.trans qp\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>',\n                          snd (sr p'), q')\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "assume \"p' = p\"\n         and \"(q, a, q') \\<in> trans qp\"\n         and \"\\<And>m. a \\<noteq> send m\""], ["proof (state)\nthis:\n  p' = p\n  (q, a, q') \\<in> automaton.trans qp\n  a \\<noteq> send ?m1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>p' = p; (q, a, q') \\<in> automaton.trans qp;\n     \\<And>m. a \\<noteq> send m\\<rbrakk>\n    \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>', snd (sr p'),\n                       q')\n                      \\<in> automaton.trans\n                             (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n 2. \\<And>m.\n       \\<lbrakk>a = \\<tau>; (p, receive m, p') \\<in> automaton.trans (np i);\n        (q, send m, q') \\<in> automaton.trans qp\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>',\n                          snd (sr p'), q')\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "with \\<open>\\<sigma> i = fst (sr p)\\<close> and \\<open>\\<sigma>' i = fst (sr p')\\<close>"], ["proof (chain)\npicking this:\n  \\<sigma> i = fst (sr p)\n  \\<sigma>' i = fst (sr p')\n  p' = p\n  (q, a, q') \\<in> automaton.trans qp\n  a \\<noteq> send ?m1", "show \"((\\<sigma>, snd (sr p), q), a, (\\<sigma>', (snd (sr p'), q'))) \\<in> trans (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\""], ["proof (prove)\nusing this:\n  \\<sigma> i = fst (sr p)\n  \\<sigma>' i = fst (sr p')\n  p' = p\n  (q, a, q') \\<in> automaton.trans qp\n  a \\<noteq> send ?m1\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (sr p), q), a, \\<sigma>', snd (sr p'), q')\n    \\<in> automaton.trans (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "by (auto elim!: oparright)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (sr p), q), a, \\<sigma>', snd (sr p'), q')\n  \\<in> automaton.trans (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>; (p, receive m, p') \\<in> automaton.trans (np i);\n        (q, send m, q') \\<in> automaton.trans qp\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>',\n                          snd (sr p'), q')\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>; (p, receive m, p') \\<in> automaton.trans (np i);\n        (q, send m, q') \\<in> automaton.trans qp\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>',\n                          snd (sr p'), q')\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>; (p, receive m, p') \\<in> automaton.trans (np i);\n        (q, send m, q') \\<in> automaton.trans qp\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>',\n                          snd (sr p'), q')\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "assume \"a = \\<tau>\"\n         and \"(p, receive m, p') \\<in> trans (np i)\"\n         and \"(q, send m, q') \\<in> trans qp\""], ["proof (state)\nthis:\n  a = \\<tau>\n  (p, receive m, p') \\<in> automaton.trans (np i)\n  (q, send m, q') \\<in> automaton.trans qp\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>; (p, receive m, p') \\<in> automaton.trans (np i);\n        (q, send m, q') \\<in> automaton.trans qp\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>',\n                          snd (sr p'), q')\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "from \\<open>\\<sigma> i = fst (sr p)\\<close> and \\<open>\\<sigma>' i = fst (sr p')\\<close> this(2)"], ["proof (chain)\npicking this:\n  \\<sigma> i = fst (sr p)\n  \\<sigma>' i = fst (sr p')\n  (p, receive m, p') \\<in> automaton.trans (np i)", "have \"((\\<sigma>, snd (sr p)), receive m, (\\<sigma>', snd (sr p'))) \\<in> trans (onp i)\""], ["proof (prove)\nusing this:\n  \\<sigma> i = fst (sr p)\n  \\<sigma>' i = fst (sr p')\n  (p, receive m, p') \\<in> automaton.trans (np i)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (sr p)), receive m, \\<sigma>', snd (sr p'))\n    \\<in> automaton.trans (onp i)", "by (rule trans)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (sr p)), receive m, \\<sigma>', snd (sr p'))\n  \\<in> automaton.trans (onp i)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>a = \\<tau>; (p, receive m, p') \\<in> automaton.trans (np i);\n        (q, send m, q') \\<in> automaton.trans qp\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>, snd (sr p), q), a, \\<sigma>',\n                          snd (sr p'), q')\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "with \\<open>(q, send m, q') \\<in> trans qp\\<close> and \\<open>a = \\<tau>\\<close>"], ["proof (chain)\npicking this:\n  (q, send m, q') \\<in> automaton.trans qp\n  a = \\<tau>\n  ((\\<sigma>, snd (sr p)), receive m, \\<sigma>', snd (sr p'))\n  \\<in> automaton.trans (onp i)", "show \"((\\<sigma>, snd (sr p), q), a, (\\<sigma>', (snd (sr p'), q'))) \\<in> trans (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\""], ["proof (prove)\nusing this:\n  (q, send m, q') \\<in> automaton.trans qp\n  a = \\<tau>\n  ((\\<sigma>, snd (sr p)), receive m, \\<sigma>', snd (sr p'))\n  \\<in> automaton.trans (onp i)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>, snd (sr p), q), a, \\<sigma>', snd (sr p'), q')\n    \\<in> automaton.trans (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "by (simp del: step_seq_tau) (rule oparboth)"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (sr p), q), a, \\<sigma>', snd (sr p'), q')\n  \\<in> automaton.trans (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<sigma>, snd (sr p), q), a, \\<sigma>', snd (sr p'), q')\n  \\<in> automaton.trans (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n\ngoal (2 subgoals):\n 1. \\<forall>j. init (np j \\<langle>\\<langle> qp) \\<noteq> {}\n 2. \\<And>i s a s' \\<sigma> \\<sigma>'.\n       \\<lbrakk>\\<sigma> i =\n                fst (case s of\n                     (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q));\n        \\<sigma>' i =\n        fst (case s' of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q));\n        (s, a, s')\n        \\<in> automaton.trans (np i \\<langle>\\<langle> qp)\\<rbrakk>\n       \\<Longrightarrow> ((\\<sigma>,\n                           snd (case s of\n                                (p, q) \\<Rightarrow>\n                                  (fst (sr p), snd (sr p), q))),\n                          a, \\<sigma>',\n                          snd (case s' of\n                               (p, q) \\<Rightarrow>\n                                 (fst (sr p), snd (sr p), q)))\n                         \\<in> automaton.trans\n                                (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "with \\<open>s = (p, q)\\<close> \\<open>s' = (p', q')\\<close>"], ["proof (chain)\npicking this:\n  s = (p, q)\n  s' = (p', q')\n  ((\\<sigma>, snd (sr p), q), a, \\<sigma>', snd (sr p'), q')\n  \\<in> automaton.trans (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "show \"((\\<sigma>, snd ((\\<lambda>(p, q). (fst (sr p), (snd (sr p), q))) s)), a,\n                 (\\<sigma>', snd ((\\<lambda>(p, q). (fst (sr p), (snd (sr p), q))) s'))) \\<in> trans (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\""], ["proof (prove)\nusing this:\n  s = (p, q)\n  s' = (p', q')\n  ((\\<sigma>, snd (sr p), q), a, \\<sigma>', snd (sr p'), q')\n  \\<in> automaton.trans (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n\ngoal (1 subgoal):\n 1. ((\\<sigma>,\n      snd (case s of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q))),\n     a, \\<sigma>',\n     snd (case s' of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q)))\n    \\<in> automaton.trans (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)", "by simp"], ["proof (state)\nthis:\n  ((\\<sigma>,\n    snd (case s of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q))),\n   a, \\<sigma>',\n   snd (case s' of (p, q) \\<Rightarrow> (fst (sr p), snd (sr p), q)))\n  \\<in> automaton.trans (onp i \\<langle>\\<langle>\\<^bsub>i\\<^esub> qp)\n\ngoal (1 subgoal):\n 1. \\<forall>j. init (np j \\<langle>\\<langle> qp) \\<noteq> {}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>j. init (np j \\<langle>\\<langle> qp) \\<noteq> {}", "show \"\\<forall>j. init (np j \\<langle>\\<langle> qp) \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j. init (np j \\<langle>\\<langle> qp) \\<noteq> {}", "by (clarsimp simp add: init_notempty init_qp_notempty)"], ["proof (state)\nthis:\n  \\<forall>j. init (np j \\<langle>\\<langle> qp) \\<noteq> {}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}