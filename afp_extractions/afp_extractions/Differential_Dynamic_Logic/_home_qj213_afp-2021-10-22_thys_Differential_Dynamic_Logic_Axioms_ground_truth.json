{"file_name": "/home/qj213/afp-2021-10-22/thys/Differential_Dynamic_Logic/Axioms.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Differential_Dynamic_Logic", "problem_names": ["theorem test_valid: \"valid test_axiom\"", "lemma assign_lem1:\n\"dterm_sem I (if i = vid1 then Var vid1 else (Const 0))\n                   (vec_lambda (\\<lambda>y. if vid1 = y then Functions I fid1\n  (vec_lambda (\\<lambda>i. dterm_sem I (empty i) \\<nu>)) else  vec_nth (fst \\<nu>) y), snd \\<nu>)\n=\n dterm_sem I (if i = vid1 then $f fid1 empty else (Const 0)) \\<nu>\"", "lemma diff_assign_lem1:\n\"dterm_sem I (if i = vid1 then DiffVar vid1 else (Const 0))\n                   (fst \\<nu>, vec_lambda (\\<lambda>y. if vid1 = y then Functions I fid1 (vec_lambda (\\<lambda>i. dterm_sem I (empty i) \\<nu>)) else  vec_nth (snd \\<nu>) y))\n=\n dterm_sem I (if i = vid1 then $f fid1 empty else (Const 0)) \\<nu>\n\"", "theorem assign_valid: \"valid assign_axiom\"", "theorem diff_assign_valid: \"valid diff_assign_axiom\"", "lemma mem_to_nonempty: \"\\<omega> \\<in> S \\<Longrightarrow> (S \\<noteq> {})\"", "lemma loop_forward: \"\\<nu> \\<in> fml_sem I ([[$\\<alpha> id1**]]Predicational pid1)\n  \\<longrightarrow> \\<nu> \\<in> fml_sem I (Predicational pid1&&[[$\\<alpha> id1]][[$\\<alpha> id1**]]Predicational pid1)\"", "lemma loop_backward:\n \"\\<nu> \\<in> fml_sem I (Predicational pid1 && [[$\\<alpha> id1]][[$\\<alpha> id1**]]Predicational pid1)\n  \\<longrightarrow> \\<nu> \\<in> fml_sem I ([[$\\<alpha> id1**]]Predicational pid1)\"", "theorem loop_valid: \"valid loop_iterate_axiom\"", "theorem box_valid: \"valid box_axiom\"", "theorem choice_valid: \"valid choice_axiom\"", "theorem compose_valid: \"valid compose_axiom\"", "theorem K_valid: \"valid Kaxiom\"", "lemma I_axiom_lemma:\n  fixes I::\"('sf,'sc,'sz) interp\" and \\<nu>\n  assumes \"is_interp I\"\n  assumes IS:\"\\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]](Predicational pid1 \\<rightarrow>\n                            [[$\\<alpha> vid1]]Predicational pid1))\"\n  assumes BC:\"\\<nu> \\<in> fml_sem I (Predicational pid1)\"\n  shows \"\\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]](Predicational pid1))\"", "theorem I_valid: \"valid Iaxiom\"", "theorem V_valid: \"valid Vaxiom\"", "theorem G_sound: \"G_holds \\<phi> \\<alpha>\"", "theorem Skolem_sound: \"Skolem_holds \\<phi> var\"", "theorem MP_sound: \"MP_holds \\<phi> \\<psi>\"", "lemma CT_lemma:\"\\<And>I::('sf::finite, 'sc::finite, 'sz::{finite,linorder}) interp. \\<And> a::(real, 'sz) vec. \\<And> b::(real, 'sz) vec. \\<forall>I::('sf,'sc,'sz) interp. is_interp I \\<longrightarrow> (\\<forall>a b. dterm_sem I \\<theta> (a, b) = dterm_sem I \\<theta>' (a, b)) \\<Longrightarrow>\n             is_interp I \\<Longrightarrow>\n             Functions I var (vec_lambda (\\<lambda>i. dterm_sem I (if i = vid1 then \\<theta> else  (Const 0)) (a, b))) =\n             Functions I var (vec_lambda (\\<lambda>i. dterm_sem I (if i = vid1 then \\<theta>' else (Const 0)) (a, b)))\"", "theorem CT_sound: \"CT_holds var \\<theta> \\<theta>'\"", "theorem CQ_sound: \"CQ_holds var \\<theta> \\<theta>'\"", "theorem CE_sound: \"CE_holds var \\<phi> \\<psi>\""], "translations": [["", "theorem test_valid: \"valid test_axiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid test_axiom", "by (auto simp add: valid_def test_axiom_def)"], ["", "lemma assign_lem1:\n\"dterm_sem I (if i = vid1 then Var vid1 else (Const 0))\n                   (vec_lambda (\\<lambda>y. if vid1 = y then Functions I fid1\n  (vec_lambda (\\<lambda>i. dterm_sem I (empty i) \\<nu>)) else  vec_nth (fst \\<nu>) y), snd \\<nu>)\n=\n dterm_sem I (if i = vid1 then $f fid1 empty else (Const 0)) \\<nu>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n     (\\<chi>y.\n         if vid1 = y\n         then Functions I fid1 (\\<chi>i. dterm_sem I (local.empty i) \\<nu>)\n         else fst \\<nu> $ y,\n      snd \\<nu>) =\n    dterm_sem I (if i = vid1 then $f fid1 local.empty else Const 0) \\<nu>", "by (cases \"i = vid1\") (auto simp: proj_sing1)"], ["", "lemma diff_assign_lem1:\n\"dterm_sem I (if i = vid1 then DiffVar vid1 else (Const 0))\n                   (fst \\<nu>, vec_lambda (\\<lambda>y. if vid1 = y then Functions I fid1 (vec_lambda (\\<lambda>i. dterm_sem I (empty i) \\<nu>)) else  vec_nth (snd \\<nu>) y))\n=\n dterm_sem I (if i = vid1 then $f fid1 empty else (Const 0)) \\<nu>\n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dterm_sem I (if i = vid1 then $' vid1 else Const 0)\n     (fst \\<nu>,\n      \\<chi>y.\n         if vid1 = y\n         then Functions I fid1 (\\<chi>i. dterm_sem I (local.empty i) \\<nu>)\n         else snd \\<nu> $ y) =\n    dterm_sem I (if i = vid1 then $f fid1 local.empty else Const 0) \\<nu>", "by (cases \"i = vid1\") (auto simp: proj_sing1)"], ["", "theorem assign_valid: \"valid assign_axiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid assign_axiom", "unfolding  valid_def assign_axiom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I \\<nu>.\n       is_interp I \\<longrightarrow>\n       \\<nu>\n       \\<in> fml_sem I\n              ([[vid1 :=\n                 $f fid1\n                  local.empty]]$\\<phi> vid1\n                                (singleton (Var vid1)) \\<leftrightarrow>\n               $\\<phi> vid1 (singleton ($f fid1 local.empty)))", "by (simp add: assign_lem1)"], ["", "theorem diff_assign_valid: \"valid diff_assign_axiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid diff_assign_axiom", "unfolding  valid_def diff_assign_axiom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I \\<nu>.\n       is_interp I \\<longrightarrow>\n       \\<nu>\n       \\<in> fml_sem I\n              ([[DiffAssign vid1\n                  ($f fid1\n                    local.empty)]]$\\<phi> vid1\n                                   (singleton ($' vid1)) \\<leftrightarrow>\n               $\\<phi> vid1 (singleton ($f fid1 local.empty)))", "by (simp add: diff_assign_lem1)"], ["", "lemma mem_to_nonempty: \"\\<omega> \\<in> S \\<Longrightarrow> (S \\<noteq> {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega> \\<in> S \\<Longrightarrow> S \\<noteq> {}", "by (auto)"], ["", "lemma loop_forward: \"\\<nu> \\<in> fml_sem I ([[$\\<alpha> id1**]]Predicational pid1)\n  \\<longrightarrow> \\<nu> \\<in> fml_sem I (Predicational pid1&&[[$\\<alpha> id1]][[$\\<alpha> id1**]]Predicational pid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nu> \\<in> fml_sem I ([[$\\<alpha> id1**]]Pc pid1) \\<longrightarrow>\n    \\<nu>\n    \\<in> fml_sem I (Pc pid1 && [[$\\<alpha> id1]][[$\\<alpha> id1**]]Pc pid1)", "by (cases \\<nu>) (auto intro: converse_rtrancl_into_rtrancl simp add: box_sem)"], ["", "lemma loop_backward:\n \"\\<nu> \\<in> fml_sem I (Predicational pid1 && [[$\\<alpha> id1]][[$\\<alpha> id1**]]Predicational pid1)\n  \\<longrightarrow> \\<nu> \\<in> fml_sem I ([[$\\<alpha> id1**]]Predicational pid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nu>\n    \\<in> fml_sem I\n           (Pc pid1 &&\n            [[$\\<alpha> id1]][[$\\<alpha> id1**]]Pc pid1) \\<longrightarrow>\n    \\<nu> \\<in> fml_sem I ([[$\\<alpha> id1**]]Pc pid1)", "by (auto elim: converse_rtranclE simp add: box_sem)"], ["", "theorem loop_valid: \"valid loop_iterate_axiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid loop_iterate_axiom", "apply(simp only: valid_def loop_iterate_axiom_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I \\<nu>.\n       is_interp I \\<longrightarrow>\n       \\<nu>\n       \\<in> fml_sem I\n              ([[$\\<alpha> vid1**]]Pc pid1 \\<leftrightarrow>\n               (Pc pid1 && [[$\\<alpha> vid1]][[$\\<alpha> vid1**]]Pc pid1))", "apply(simp only: iff_sem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I \\<nu>.\n       is_interp I \\<longrightarrow>\n       (\\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]]Pc pid1)) =\n       (\\<nu>\n        \\<in> fml_sem I\n               (Pc pid1 && [[$\\<alpha> vid1]][[$\\<alpha> vid1**]]Pc pid1))", "apply(simp only: HOL.iff_conv_conj_imp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I \\<nu>.\n       is_interp I \\<longrightarrow>\n       (\\<nu>\n        \\<in> fml_sem I ([[$\\<alpha> vid1**]]Pc pid1) \\<longrightarrow>\n        \\<nu>\n        \\<in> fml_sem I\n               (Pc pid1 &&\n                [[$\\<alpha> vid1]][[$\\<alpha> vid1**]]Pc pid1)) \\<and>\n       (\\<nu>\n        \\<in> fml_sem I\n               (Pc pid1 &&\n                [[$\\<alpha>\n                   vid1]][[$\\<alpha> vid1**]]Pc pid1) \\<longrightarrow>\n        \\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]]Pc pid1))", "apply(rule allI | rule impI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I \\<nu>.\n       is_interp I \\<Longrightarrow>\n       (\\<nu>\n        \\<in> fml_sem I ([[$\\<alpha> vid1**]]Pc pid1) \\<longrightarrow>\n        \\<nu>\n        \\<in> fml_sem I\n               (Pc pid1 &&\n                [[$\\<alpha> vid1]][[$\\<alpha> vid1**]]Pc pid1)) \\<and>\n       (\\<nu>\n        \\<in> fml_sem I\n               (Pc pid1 &&\n                [[$\\<alpha>\n                   vid1]][[$\\<alpha> vid1**]]Pc pid1) \\<longrightarrow>\n        \\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]]Pc pid1))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I \\<nu>.\n       is_interp I \\<Longrightarrow>\n       \\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]]Pc pid1) \\<longrightarrow>\n       \\<nu>\n       \\<in> fml_sem I\n              (Pc pid1 && [[$\\<alpha> vid1]][[$\\<alpha> vid1**]]Pc pid1)\n 2. \\<And>I \\<nu>.\n       is_interp I \\<Longrightarrow>\n       \\<nu>\n       \\<in> fml_sem I\n              (Pc pid1 &&\n               [[$\\<alpha>\n                  vid1]][[$\\<alpha> vid1**]]Pc pid1) \\<longrightarrow>\n       \\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]]Pc pid1)", "apply(rule loop_forward)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I \\<nu>.\n       is_interp I \\<Longrightarrow>\n       \\<nu>\n       \\<in> fml_sem I\n              (Pc pid1 &&\n               [[$\\<alpha>\n                  vid1]][[$\\<alpha> vid1**]]Pc pid1) \\<longrightarrow>\n       \\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]]Pc pid1)", "apply(rule loop_backward)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem box_valid: \"valid box_axiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid box_axiom", "unfolding valid_def box_axiom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I \\<nu>.\n       is_interp I \\<longrightarrow>\n       \\<nu>\n       \\<in> fml_sem I\n              (\\<langle> $\\<alpha> vid1 \\<rangle> Pc pid1 \\<leftrightarrow>\n               ! ([[$\\<alpha> vid1]]! (Pc pid1)))", "by(auto)"], ["", "theorem choice_valid: \"valid choice_axiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid choice_axiom", "unfolding valid_def choice_axiom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I \\<nu>.\n       is_interp I \\<longrightarrow>\n       \\<nu>\n       \\<in> fml_sem I\n              ([[$\\<alpha> vid1 \\<union>\\<union>\n                 $\\<alpha> vid2]]Pc pid1 \\<leftrightarrow>\n               ([[$\\<alpha> vid1]]Pc pid1 && [[$\\<alpha> vid2]]Pc pid1))", "by (auto)"], ["", "theorem compose_valid: \"valid compose_axiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid compose_axiom", "unfolding valid_def compose_axiom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I \\<nu>.\n       is_interp I \\<longrightarrow>\n       \\<nu>\n       \\<in> fml_sem I\n              ([[$\\<alpha> vid1 ;; $\\<alpha> vid2]]Pc pid1 \\<leftrightarrow>\n               ([[$\\<alpha> vid1]][[$\\<alpha> vid2]]Pc pid1))", "by (auto)"], ["", "theorem K_valid: \"valid Kaxiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid Kaxiom", "unfolding valid_def Kaxiom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I \\<nu>.\n       is_interp I \\<longrightarrow>\n       \\<nu>\n       \\<in> fml_sem I\n              (([[$\\<alpha>\n                   vid1]]Pc pid1 \\<rightarrow> Pc pid2) \\<rightarrow>\n               ([[$\\<alpha> vid1]]Pc pid1) \\<rightarrow>\n               [[$\\<alpha> vid1]]Pc pid2)", "by (auto)"], ["", "lemma I_axiom_lemma:\n  fixes I::\"('sf,'sc,'sz) interp\" and \\<nu>\n  assumes \"is_interp I\"\n  assumes IS:\"\\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]](Predicational pid1 \\<rightarrow>\n                            [[$\\<alpha> vid1]]Predicational pid1))\"\n  assumes BC:\"\\<nu> \\<in> fml_sem I (Predicational pid1)\"\n  shows \"\\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]](Predicational pid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]]Pc pid1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]]Pc pid1)", "have IS':\"\\<And>\\<nu>2. (\\<nu>, \\<nu>2) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>* \\<Longrightarrow> \\<nu>2 \\<in> fml_sem I (Predicational pid1 \\<rightarrow> [[$\\<alpha> vid1]](Predicational pid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<nu>2.\n       (\\<nu>, \\<nu>2)\n       \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>* \\<Longrightarrow>\n       \\<nu>2\n       \\<in> fml_sem I (Pc pid1 \\<rightarrow> [[$\\<alpha> vid1]]Pc pid1)", "using IS"], ["proof (prove)\nusing this:\n  \\<nu>\n  \\<in> fml_sem I\n         ([[$\\<alpha>\n             vid1**]]Pc pid1 \\<rightarrow> [[$\\<alpha> vid1]]Pc pid1)\n\ngoal (1 subgoal):\n 1. \\<And>\\<nu>2.\n       (\\<nu>, \\<nu>2)\n       \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>* \\<Longrightarrow>\n       \\<nu>2\n       \\<in> fml_sem I (Pc pid1 \\<rightarrow> [[$\\<alpha> vid1]]Pc pid1)", "by (auto simp add: box_sem)"], ["proof (state)\nthis:\n  (\\<nu>, ?\\<nu>2.5)\n  \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>* \\<Longrightarrow>\n  ?\\<nu>2.5\n  \\<in> fml_sem I (Pc pid1 \\<rightarrow> [[$\\<alpha> vid1]]Pc pid1)\n\ngoal (1 subgoal):\n 1. \\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]]Pc pid1)", "have res:\"\\<And>\\<nu>3. ((\\<nu>, \\<nu>3) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>*) \\<Longrightarrow> \\<nu>3 \\<in> fml_sem I (Predicational pid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<nu>3.\n       (\\<nu>, \\<nu>3)\n       \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>* \\<Longrightarrow>\n       \\<nu>3 \\<in> fml_sem I (Pc pid1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<nu>3.\n       (\\<nu>, \\<nu>3)\n       \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>* \\<Longrightarrow>\n       \\<nu>3 \\<in> fml_sem I (Pc pid1)", "fix \\<nu>3"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<nu>3.\n       (\\<nu>, \\<nu>3)\n       \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>* \\<Longrightarrow>\n       \\<nu>3 \\<in> fml_sem I (Pc pid1)", "show \"((\\<nu>, \\<nu>3) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>*) \\<Longrightarrow> \\<nu>3 \\<in> fml_sem I (Predicational pid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<nu>, \\<nu>3)\n    \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>* \\<Longrightarrow>\n    \\<nu>3 \\<in> fml_sem I (Pc pid1)", "apply(induction rule:rtrancl_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<nu> \\<in> fml_sem I (Pc pid1)\n 2. \\<And>y z.\n       \\<lbrakk>(\\<nu>, y) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>*;\n        (y, z) \\<in> prog_sem I ($\\<alpha> vid1);\n        y \\<in> fml_sem I (Pc pid1)\\<rbrakk>\n       \\<Longrightarrow> z \\<in> fml_sem I (Pc pid1)", "apply(rule BC)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(\\<nu>, y) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>*;\n        (y, z) \\<in> prog_sem I ($\\<alpha> vid1);\n        y \\<in> fml_sem I (Pc pid1)\\<rbrakk>\n       \\<Longrightarrow> z \\<in> fml_sem I (Pc pid1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(\\<nu>, y) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>*;\n        (y, z) \\<in> prog_sem I ($\\<alpha> vid1);\n        y \\<in> fml_sem I (Pc pid1)\\<rbrakk>\n       \\<Longrightarrow> z \\<in> fml_sem I (Pc pid1)", "fix y z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(\\<nu>, y) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>*;\n        (y, z) \\<in> prog_sem I ($\\<alpha> vid1);\n        y \\<in> fml_sem I (Pc pid1)\\<rbrakk>\n       \\<Longrightarrow> z \\<in> fml_sem I (Pc pid1)", "assume vy:\"(\\<nu>, y) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>*\""], ["proof (state)\nthis:\n  (\\<nu>, y) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(\\<nu>, y) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>*;\n        (y, z) \\<in> prog_sem I ($\\<alpha> vid1);\n        y \\<in> fml_sem I (Pc pid1)\\<rbrakk>\n       \\<Longrightarrow> z \\<in> fml_sem I (Pc pid1)", "assume yz:\"(y, z) \\<in> prog_sem I ($\\<alpha> vid1)\""], ["proof (state)\nthis:\n  (y, z) \\<in> prog_sem I ($\\<alpha> vid1)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(\\<nu>, y) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>*;\n        (y, z) \\<in> prog_sem I ($\\<alpha> vid1);\n        y \\<in> fml_sem I (Pc pid1)\\<rbrakk>\n       \\<Longrightarrow> z \\<in> fml_sem I (Pc pid1)", "assume yPP:\"y \\<in> fml_sem I (Predicational pid1)\""], ["proof (state)\nthis:\n  y \\<in> fml_sem I (Pc pid1)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(\\<nu>, y) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>*;\n        (y, z) \\<in> prog_sem I ($\\<alpha> vid1);\n        y \\<in> fml_sem I (Pc pid1)\\<rbrakk>\n       \\<Longrightarrow> z \\<in> fml_sem I (Pc pid1)", "have imp3:\"y \\<in> fml_sem I (Predicational pid1 \\<rightarrow> [[$\\<alpha> vid1 ]](Predicational pid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> fml_sem I (Pc pid1 \\<rightarrow> [[$\\<alpha> vid1]]Pc pid1)", "using IS' vy"], ["proof (prove)\nusing this:\n  (\\<nu>, ?\\<nu>2.5)\n  \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>* \\<Longrightarrow>\n  ?\\<nu>2.5\n  \\<in> fml_sem I (Pc pid1 \\<rightarrow> [[$\\<alpha> vid1]]Pc pid1)\n  (\\<nu>, y) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>*\n\ngoal (1 subgoal):\n 1. y \\<in> fml_sem I (Pc pid1 \\<rightarrow> [[$\\<alpha> vid1]]Pc pid1)", "by (simp)"], ["proof (state)\nthis:\n  y \\<in> fml_sem I (Pc pid1 \\<rightarrow> [[$\\<alpha> vid1]]Pc pid1)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(\\<nu>, y) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>*;\n        (y, z) \\<in> prog_sem I ($\\<alpha> vid1);\n        y \\<in> fml_sem I (Pc pid1)\\<rbrakk>\n       \\<Longrightarrow> z \\<in> fml_sem I (Pc pid1)", "have imp4:\"y \\<in> fml_sem I (Predicational pid1) \\<Longrightarrow> y \\<in> fml_sem I  ([[$\\<alpha> vid1]](Predicational pid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> fml_sem I (Pc pid1) \\<Longrightarrow>\n    y \\<in> fml_sem I ([[$\\<alpha> vid1]]Pc pid1)", "using imp3 impl_sem"], ["proof (prove)\nusing this:\n  y \\<in> fml_sem I (Pc pid1 \\<rightarrow> [[$\\<alpha> vid1]]Pc pid1)\n  (?\\<nu> \\<in> fml_sem ?I (?A \\<rightarrow> ?B)) =\n  (?\\<nu> \\<in> fml_sem ?I ?A \\<longrightarrow> ?\\<nu> \\<in> fml_sem ?I ?B)\n\ngoal (1 subgoal):\n 1. y \\<in> fml_sem I (Pc pid1) \\<Longrightarrow>\n    y \\<in> fml_sem I ([[$\\<alpha> vid1]]Pc pid1)", "by (auto)"], ["proof (state)\nthis:\n  y \\<in> fml_sem I (Pc pid1) \\<Longrightarrow>\n  y \\<in> fml_sem I ([[$\\<alpha> vid1]]Pc pid1)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(\\<nu>, y) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>*;\n        (y, z) \\<in> prog_sem I ($\\<alpha> vid1);\n        y \\<in> fml_sem I (Pc pid1)\\<rbrakk>\n       \\<Longrightarrow> z \\<in> fml_sem I (Pc pid1)", "have yaPP:\"y \\<in> fml_sem I ([[$\\<alpha> vid1]]Predicational pid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> fml_sem I ([[$\\<alpha> vid1]]Pc pid1)", "using imp4 yPP"], ["proof (prove)\nusing this:\n  y \\<in> fml_sem I (Pc pid1) \\<Longrightarrow>\n  y \\<in> fml_sem I ([[$\\<alpha> vid1]]Pc pid1)\n  y \\<in> fml_sem I (Pc pid1)\n\ngoal (1 subgoal):\n 1. y \\<in> fml_sem I ([[$\\<alpha> vid1]]Pc pid1)", "by auto"], ["proof (state)\nthis:\n  y \\<in> fml_sem I ([[$\\<alpha> vid1]]Pc pid1)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(\\<nu>, y) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>*;\n        (y, z) \\<in> prog_sem I ($\\<alpha> vid1);\n        y \\<in> fml_sem I (Pc pid1)\\<rbrakk>\n       \\<Longrightarrow> z \\<in> fml_sem I (Pc pid1)", "have zPP:\"z \\<in> fml_sem I (Predicational pid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<in> fml_sem I (Pc pid1)", "using yaPP box_sem yz mem_Collect_eq"], ["proof (prove)\nusing this:\n  y \\<in> fml_sem I ([[$\\<alpha> vid1]]Pc pid1)\n  fml_sem ?I ([[?\\<alpha>]]?\\<phi>) =\n  {\\<nu>.\n   \\<forall>\\<omega>.\n      (\\<nu>, \\<omega>) \\<in> prog_sem ?I ?\\<alpha> \\<longrightarrow>\n      \\<omega> \\<in> fml_sem ?I ?\\<phi>}\n  (y, z) \\<in> prog_sem I ($\\<alpha> vid1)\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. z \\<in> fml_sem I (Pc pid1)", "by blast"], ["proof (state)\nthis:\n  z \\<in> fml_sem I (Pc pid1)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(\\<nu>, y) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>*;\n        (y, z) \\<in> prog_sem I ($\\<alpha> vid1);\n        y \\<in> fml_sem I (Pc pid1)\\<rbrakk>\n       \\<Longrightarrow> z \\<in> fml_sem I (Pc pid1)", "show \"\n        (\\<nu>, y) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>* \\<Longrightarrow>\n        (y, z) \\<in> prog_sem I ($\\<alpha> vid1) \\<Longrightarrow>\n        y \\<in> fml_sem I (Predicational pid1) \\<Longrightarrow>\n        z \\<in> fml_sem I (Predicational pid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<nu>, y) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>*;\n     (y, z) \\<in> prog_sem I ($\\<alpha> vid1);\n     y \\<in> fml_sem I (Pc pid1)\\<rbrakk>\n    \\<Longrightarrow> z \\<in> fml_sem I (Pc pid1)", "using zPP"], ["proof (prove)\nusing this:\n  z \\<in> fml_sem I (Pc pid1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<nu>, y) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>*;\n     (y, z) \\<in> prog_sem I ($\\<alpha> vid1);\n     y \\<in> fml_sem I (Pc pid1)\\<rbrakk>\n    \\<Longrightarrow> z \\<in> fml_sem I (Pc pid1)", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>(\\<nu>, y) \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>*;\n   (y, z) \\<in> prog_sem I ($\\<alpha> vid1);\n   y \\<in> fml_sem I (Pc pid1)\\<rbrakk>\n  \\<Longrightarrow> z \\<in> fml_sem I (Pc pid1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<nu>, \\<nu>3)\n  \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>* \\<Longrightarrow>\n  \\<nu>3 \\<in> fml_sem I (Pc pid1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<nu>, ?\\<nu>3.5)\n  \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>* \\<Longrightarrow>\n  ?\\<nu>3.5 \\<in> fml_sem I (Pc pid1)\n\ngoal (1 subgoal):\n 1. \\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]]Pc pid1)", "show \"\\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]]Predicational pid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]]Pc pid1)", "using res"], ["proof (prove)\nusing this:\n  (\\<nu>, ?\\<nu>3.5)\n  \\<in> (prog_sem I ($\\<alpha> vid1))\\<^sup>* \\<Longrightarrow>\n  ?\\<nu>3.5 \\<in> fml_sem I (Pc pid1)\n\ngoal (1 subgoal):\n 1. \\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]]Pc pid1)", "by (simp add: mem_Collect_eq box_sem loop_sem)"], ["proof (state)\nthis:\n  \\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]]Pc pid1)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem I_valid: \"valid Iaxiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid Iaxiom", "apply(unfold Iaxiom_def valid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I \\<nu>.\n       is_interp I \\<longrightarrow>\n       \\<nu>\n       \\<in> fml_sem I\n              (([[$\\<alpha>\n                   vid1**]]Pc pid1 \\<rightarrow>\n                           [[$\\<alpha> vid1]]Pc pid1) \\<rightarrow>\n               Pc pid1 \\<rightarrow> [[$\\<alpha> vid1**]]Pc pid1)", "apply(rule impI | rule allI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I \\<nu>.\n       is_interp I \\<Longrightarrow>\n       \\<nu>\n       \\<in> fml_sem I\n              (([[$\\<alpha>\n                   vid1**]]Pc pid1 \\<rightarrow>\n                           [[$\\<alpha> vid1]]Pc pid1) \\<rightarrow>\n               Pc pid1 \\<rightarrow> [[$\\<alpha> vid1**]]Pc pid1)", "apply(simp only: impl_sem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I \\<nu>.\n       is_interp I \\<Longrightarrow>\n       \\<nu>\n       \\<in> fml_sem I\n              ([[$\\<alpha>\n                  vid1**]]Pc pid1 \\<rightarrow>\n                          [[$\\<alpha> vid1]]Pc pid1) \\<longrightarrow>\n       \\<nu> \\<in> fml_sem I (Pc pid1) \\<longrightarrow>\n       \\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]]Pc pid1)", "using I_axiom_lemma"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_interp ?I;\n   ?\\<nu>\n   \\<in> fml_sem ?I\n          ([[$\\<alpha>\n              vid1**]]Pc pid1 \\<rightarrow> [[$\\<alpha> vid1]]Pc pid1);\n   ?\\<nu> \\<in> fml_sem ?I (Pc pid1)\\<rbrakk>\n  \\<Longrightarrow> ?\\<nu> \\<in> fml_sem ?I ([[$\\<alpha> vid1**]]Pc pid1)\n\ngoal (1 subgoal):\n 1. \\<And>I \\<nu>.\n       is_interp I \\<Longrightarrow>\n       \\<nu>\n       \\<in> fml_sem I\n              ([[$\\<alpha>\n                  vid1**]]Pc pid1 \\<rightarrow>\n                          [[$\\<alpha> vid1]]Pc pid1) \\<longrightarrow>\n       \\<nu> \\<in> fml_sem I (Pc pid1) \\<longrightarrow>\n       \\<nu> \\<in> fml_sem I ([[$\\<alpha> vid1**]]Pc pid1)", "by blast"], ["", "theorem V_valid: \"valid Vaxiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid Vaxiom", "apply(simp only: valid_def Vaxiom_def impl_sem box_sem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I \\<nu>.\n       is_interp I \\<longrightarrow>\n       \\<nu> \\<in> fml_sem I ($\\<phi> vid1 local.empty) \\<longrightarrow>\n       \\<nu>\n       \\<in> {\\<nu>.\n              \\<forall>\\<omega>.\n                 (\\<nu>, \\<omega>)\n                 \\<in> prog_sem I ($\\<alpha> vid1) \\<longrightarrow>\n                 \\<omega> \\<in> fml_sem I ($\\<phi> vid1 local.empty)}", "apply(rule allI | rule impI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I \\<nu>.\n       \\<lbrakk>is_interp I;\n        \\<nu> \\<in> fml_sem I ($\\<phi> vid1 local.empty)\\<rbrakk>\n       \\<Longrightarrow> \\<nu>\n                         \\<in> {\\<nu>.\n                                \\<forall>\\<omega>.\n                                   (\\<nu>, \\<omega>)\n                                   \\<in> prog_sem I\n    ($\\<alpha> vid1) \\<longrightarrow>\n                                   \\<omega>\n                                   \\<in> fml_sem I\n    ($\\<phi> vid1 local.empty)}", "apply(auto simp add: empty_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition G_holds :: \"('sf, 'sc, 'sz) formula \\<Rightarrow> ('sf, 'sc, 'sz) hp \\<Rightarrow> bool\"\nwhere \"G_holds \\<phi> \\<alpha> \\<equiv> valid \\<phi> \\<longrightarrow> valid ([[\\<alpha>]]\\<phi>)\""], ["", "definition Skolem_holds :: \"('sf, 'sc, 'sz) formula \\<Rightarrow> 'sz \\<Rightarrow> bool\"\nwhere \"Skolem_holds \\<phi> var \\<equiv> valid \\<phi> \\<longrightarrow> valid (Forall var \\<phi>)\""], ["", "definition MP_holds :: \"('sf, 'sc, 'sz) formula \\<Rightarrow> ('sf, 'sc, 'sz) formula \\<Rightarrow> bool\"\nwhere \"MP_holds \\<phi> \\<psi> \\<equiv> valid (\\<phi> \\<rightarrow> \\<psi>) \\<longrightarrow> valid \\<phi> \\<longrightarrow> valid \\<psi>\""], ["", "definition CT_holds :: \"'sf \\<Rightarrow> ('sf, 'sz) trm \\<Rightarrow> ('sf, 'sz) trm \\<Rightarrow> bool\"\nwhere \"CT_holds g \\<theta> \\<theta>' \\<equiv> valid (Equals \\<theta> \\<theta>')\n  \\<longrightarrow> valid (Equals (Function g (singleton \\<theta>)) (Function g (singleton \\<theta>')))\""], ["", "definition CQ_holds :: \"'sz \\<Rightarrow> ('sf, 'sz) trm \\<Rightarrow> ('sf, 'sz) trm \\<Rightarrow> bool\"\nwhere \"CQ_holds p \\<theta> \\<theta>' \\<equiv> valid (Equals \\<theta> \\<theta>')\n  \\<longrightarrow> valid ((Prop p (singleton \\<theta>)) \\<leftrightarrow> (Prop p (singleton \\<theta>')))\""], ["", "definition CE_holds :: \"'sc \\<Rightarrow> ('sf, 'sc, 'sz) formula \\<Rightarrow> ('sf, 'sc, 'sz) formula \\<Rightarrow> bool\"\nwhere \"CE_holds var \\<phi> \\<psi> \\<equiv> valid (\\<phi> \\<leftrightarrow> \\<psi>)\n  \\<longrightarrow> valid (InContext var \\<phi> \\<leftrightarrow> InContext var \\<psi>)\""], ["", "subsection \\<open>Soundness proofs for rules\\<close>"], ["", "theorem G_sound: \"G_holds \\<phi> \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G_holds \\<phi> \\<alpha>", "by (simp add: G_holds_def valid_def box_sem)"], ["", "theorem Skolem_sound: \"Skolem_holds \\<phi> var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Skolem_holds \\<phi> var", "by (simp add: Skolem_holds_def valid_def)"], ["", "theorem MP_sound: \"MP_holds \\<phi> \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. MP_holds \\<phi> \\<psi>", "by (auto simp add: MP_holds_def valid_def)"], ["", "lemma CT_lemma:\"\\<And>I::('sf::finite, 'sc::finite, 'sz::{finite,linorder}) interp. \\<And> a::(real, 'sz) vec. \\<And> b::(real, 'sz) vec. \\<forall>I::('sf,'sc,'sz) interp. is_interp I \\<longrightarrow> (\\<forall>a b. dterm_sem I \\<theta> (a, b) = dterm_sem I \\<theta>' (a, b)) \\<Longrightarrow>\n             is_interp I \\<Longrightarrow>\n             Functions I var (vec_lambda (\\<lambda>i. dterm_sem I (if i = vid1 then \\<theta> else  (Const 0)) (a, b))) =\n             Functions I var (vec_lambda (\\<lambda>i. dterm_sem I (if i = vid1 then \\<theta>' else (Const 0)) (a, b)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I a b.\n       \\<lbrakk>\\<forall>I.\n                   is_interp I \\<longrightarrow>\n                   (\\<forall>a b.\n                       dterm_sem I \\<theta> (a, b) =\n                       dterm_sem I \\<theta>' (a, b));\n        is_interp I\\<rbrakk>\n       \\<Longrightarrow> Functions I var\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then \\<theta> else Const 0)\n                               (a, b)) =\n                         Functions I var\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then \\<theta>' else Const 0)\n                               (a, b))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I a b.\n       \\<lbrakk>\\<forall>I.\n                   is_interp I \\<longrightarrow>\n                   (\\<forall>a b.\n                       dterm_sem I \\<theta> (a, b) =\n                       dterm_sem I \\<theta>' (a, b));\n        is_interp I\\<rbrakk>\n       \\<Longrightarrow> Functions I var\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then \\<theta> else Const 0)\n                               (a, b)) =\n                         Functions I var\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then \\<theta>' else Const 0)\n                               (a, b))", "fix I :: \"('sf::finite, 'sc::finite, 'sz::{finite,linorder}) interp\" and a :: \"(real, 'sz) vec\" and b :: \"(real, 'sz) vec\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I a b.\n       \\<lbrakk>\\<forall>I.\n                   is_interp I \\<longrightarrow>\n                   (\\<forall>a b.\n                       dterm_sem I \\<theta> (a, b) =\n                       dterm_sem I \\<theta>' (a, b));\n        is_interp I\\<rbrakk>\n       \\<Longrightarrow> Functions I var\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then \\<theta> else Const 0)\n                               (a, b)) =\n                         Functions I var\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then \\<theta>' else Const 0)\n                               (a, b))", "assume a1: \"is_interp I\""], ["proof (state)\nthis:\n  is_interp I\n\ngoal (1 subgoal):\n 1. \\<And>I a b.\n       \\<lbrakk>\\<forall>I.\n                   is_interp I \\<longrightarrow>\n                   (\\<forall>a b.\n                       dterm_sem I \\<theta> (a, b) =\n                       dterm_sem I \\<theta>' (a, b));\n        is_interp I\\<rbrakk>\n       \\<Longrightarrow> Functions I var\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then \\<theta> else Const 0)\n                               (a, b)) =\n                         Functions I var\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then \\<theta>' else Const 0)\n                               (a, b))", "assume \"\\<forall>I::('sf,'sc,'sz) interp. is_interp I \\<longrightarrow> (\\<forall>a b. dterm_sem I \\<theta> (a, b) = dterm_sem I \\<theta>' (a, b))\""], ["proof (state)\nthis:\n  \\<forall>I.\n     is_interp I \\<longrightarrow>\n     (\\<forall>a b.\n         dterm_sem I \\<theta> (a, b) = dterm_sem I \\<theta>' (a, b))\n\ngoal (1 subgoal):\n 1. \\<And>I a b.\n       \\<lbrakk>\\<forall>I.\n                   is_interp I \\<longrightarrow>\n                   (\\<forall>a b.\n                       dterm_sem I \\<theta> (a, b) =\n                       dterm_sem I \\<theta>' (a, b));\n        is_interp I\\<rbrakk>\n       \\<Longrightarrow> Functions I var\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then \\<theta> else Const 0)\n                               (a, b)) =\n                         Functions I var\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then \\<theta>' else Const 0)\n                               (a, b))", "then"], ["proof (chain)\npicking this:\n  \\<forall>I.\n     is_interp I \\<longrightarrow>\n     (\\<forall>a b.\n         dterm_sem I \\<theta> (a, b) = dterm_sem I \\<theta>' (a, b))", "have \"\\<forall>i. dterm_sem I (if i = vid1 then \\<theta>' else (Const 0)) (a, b) = dterm_sem I (if i = vid1 then \\<theta> else (Const 0)) (a, b)\""], ["proof (prove)\nusing this:\n  \\<forall>I.\n     is_interp I \\<longrightarrow>\n     (\\<forall>a b.\n         dterm_sem I \\<theta> (a, b) = dterm_sem I \\<theta>' (a, b))\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       dterm_sem I (if i = vid1 then \\<theta>' else Const 0) (a, b) =\n       dterm_sem I (if i = vid1 then \\<theta> else Const 0) (a, b)", "using a1"], ["proof (prove)\nusing this:\n  \\<forall>I.\n     is_interp I \\<longrightarrow>\n     (\\<forall>a b.\n         dterm_sem I \\<theta> (a, b) = dterm_sem I \\<theta>' (a, b))\n  is_interp I\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       dterm_sem I (if i = vid1 then \\<theta>' else Const 0) (a, b) =\n       dterm_sem I (if i = vid1 then \\<theta> else Const 0) (a, b)", "by presburger"], ["proof (state)\nthis:\n  \\<forall>i.\n     dterm_sem I (if i = vid1 then \\<theta>' else Const 0) (a, b) =\n     dterm_sem I (if i = vid1 then \\<theta> else Const 0) (a, b)\n\ngoal (1 subgoal):\n 1. \\<And>I a b.\n       \\<lbrakk>\\<forall>I.\n                   is_interp I \\<longrightarrow>\n                   (\\<forall>a b.\n                       dterm_sem I \\<theta> (a, b) =\n                       dterm_sem I \\<theta>' (a, b));\n        is_interp I\\<rbrakk>\n       \\<Longrightarrow> Functions I var\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then \\<theta> else Const 0)\n                               (a, b)) =\n                         Functions I var\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then \\<theta>' else Const 0)\n                               (a, b))", "then"], ["proof (chain)\npicking this:\n  \\<forall>i.\n     dterm_sem I (if i = vid1 then \\<theta>' else Const 0) (a, b) =\n     dterm_sem I (if i = vid1 then \\<theta> else Const 0) (a, b)", "show \"Functions I var (vec_lambda (\\<lambda>i. dterm_sem I (if i = vid1 then \\<theta> else (Const 0)) (a, b)))\n           = Functions I var (vec_lambda (\\<lambda>i. dterm_sem I (if i = vid1 then \\<theta>' else (Const 0)) (a, b)))\""], ["proof (prove)\nusing this:\n  \\<forall>i.\n     dterm_sem I (if i = vid1 then \\<theta>' else Const 0) (a, b) =\n     dterm_sem I (if i = vid1 then \\<theta> else Const 0) (a, b)\n\ngoal (1 subgoal):\n 1. Functions I var\n     (\\<chi>i.\n         dterm_sem I (if i = vid1 then \\<theta> else Const 0) (a, b)) =\n    Functions I var\n     (\\<chi>i. dterm_sem I (if i = vid1 then \\<theta>' else Const 0) (a, b))", "by presburger"], ["proof (state)\nthis:\n  Functions I var\n   (\\<chi>i. dterm_sem I (if i = vid1 then \\<theta> else Const 0) (a, b)) =\n  Functions I var\n   (\\<chi>i. dterm_sem I (if i = vid1 then \\<theta>' else Const 0) (a, b))\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem CT_sound: \"CT_holds var \\<theta> \\<theta>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CT_holds var \\<theta> \\<theta>'", "apply(simp only: CT_holds_def valid_def equals_sem vec_extensionality vec_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>I \\<nu>.\n        is_interp I \\<longrightarrow>\n        dterm_sem I \\<theta> \\<nu> =\n        dterm_sem I \\<theta>' \\<nu>) \\<longrightarrow>\n    (\\<forall>I \\<nu>.\n        is_interp I \\<longrightarrow>\n        dterm_sem I ($f var (singleton \\<theta>)) \\<nu> =\n        dterm_sem I ($f var (singleton \\<theta>')) \\<nu>)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>I.\n        is_interp I \\<longrightarrow>\n        (\\<forall>a b.\n            dterm_sem I \\<theta> (a, b) =\n            dterm_sem I \\<theta>' (a, b))) \\<longrightarrow>\n    (\\<forall>I.\n        is_interp I \\<longrightarrow>\n        (\\<forall>a b.\n            Functions I var\n             (\\<chi>i.\n                 dterm_sem I (if i = vid1 then \\<theta> else Const 0)\n                  (a, b)) =\n            Functions I var\n             (\\<chi>i.\n                 dterm_sem I (if i = vid1 then \\<theta>' else Const 0)\n                  (a, b))))", "apply(rule allI | rule impI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I a b.\n       \\<lbrakk>\\<forall>I.\n                   is_interp I \\<longrightarrow>\n                   (\\<forall>a b.\n                       dterm_sem I \\<theta> (a, b) =\n                       dterm_sem I \\<theta>' (a, b));\n        is_interp I\\<rbrakk>\n       \\<Longrightarrow> Functions I var\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then \\<theta> else Const 0)\n                               (a, b)) =\n                         Functions I var\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then \\<theta>' else Const 0)\n                               (a, b))", "apply(simp add: CT_lemma)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem CQ_sound: \"CQ_holds var \\<theta> \\<theta>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CQ_holds var \\<theta> \\<theta>'", "proof (auto simp only: CQ_holds_def valid_def equals_sem vec_extensionality vec_eq_iff singleton.simps mem_Collect_eq)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I a b.\n       \\<lbrakk>\\<forall>I \\<nu>.\n                   is_interp I \\<longrightarrow>\n                   dterm_sem I \\<theta> \\<nu> = dterm_sem I \\<theta>' \\<nu>;\n        is_interp I\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> fml_sem I\n                                ($\\<phi> var\n                                  (singleton \\<theta>) \\<leftrightarrow>\n                                 $\\<phi> var (singleton \\<theta>'))", "fix I :: \"('sf,'sc,'sz) interp\" and a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I a b.\n       \\<lbrakk>\\<forall>I \\<nu>.\n                   is_interp I \\<longrightarrow>\n                   dterm_sem I \\<theta> \\<nu> = dterm_sem I \\<theta>' \\<nu>;\n        is_interp I\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> fml_sem I\n                                ($\\<phi> var\n                                  (singleton \\<theta>) \\<leftrightarrow>\n                                 $\\<phi> var (singleton \\<theta>'))", "assume sem:\"\\<forall>I::('sf,'sc,'sz) interp. \\<forall> \\<nu>. is_interp I \\<longrightarrow> dterm_sem I \\<theta> \\<nu> = dterm_sem I \\<theta>' \\<nu>\""], ["proof (state)\nthis:\n  \\<forall>I \\<nu>.\n     is_interp I \\<longrightarrow>\n     dterm_sem I \\<theta> \\<nu> = dterm_sem I \\<theta>' \\<nu>\n\ngoal (1 subgoal):\n 1. \\<And>I a b.\n       \\<lbrakk>\\<forall>I \\<nu>.\n                   is_interp I \\<longrightarrow>\n                   dterm_sem I \\<theta> \\<nu> = dterm_sem I \\<theta>' \\<nu>;\n        is_interp I\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> fml_sem I\n                                ($\\<phi> var\n                                  (singleton \\<theta>) \\<leftrightarrow>\n                                 $\\<phi> var (singleton \\<theta>'))", "assume good:\"is_interp I\""], ["proof (state)\nthis:\n  is_interp I\n\ngoal (1 subgoal):\n 1. \\<And>I a b.\n       \\<lbrakk>\\<forall>I \\<nu>.\n                   is_interp I \\<longrightarrow>\n                   dterm_sem I \\<theta> \\<nu> = dterm_sem I \\<theta>' \\<nu>;\n        is_interp I\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> fml_sem I\n                                ($\\<phi> var\n                                  (singleton \\<theta>) \\<leftrightarrow>\n                                 $\\<phi> var (singleton \\<theta>'))", "have sem_eq:\"dterm_sem I \\<theta> (a,b) = dterm_sem I \\<theta>' (a,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dterm_sem I \\<theta> (a, b) = dterm_sem I \\<theta>' (a, b)", "using sem good"], ["proof (prove)\nusing this:\n  \\<forall>I \\<nu>.\n     is_interp I \\<longrightarrow>\n     dterm_sem I \\<theta> \\<nu> = dterm_sem I \\<theta>' \\<nu>\n  is_interp I\n\ngoal (1 subgoal):\n 1. dterm_sem I \\<theta> (a, b) = dterm_sem I \\<theta>' (a, b)", "by auto"], ["proof (state)\nthis:\n  dterm_sem I \\<theta> (a, b) = dterm_sem I \\<theta>' (a, b)\n\ngoal (1 subgoal):\n 1. \\<And>I a b.\n       \\<lbrakk>\\<forall>I \\<nu>.\n                   is_interp I \\<longrightarrow>\n                   dterm_sem I \\<theta> \\<nu> = dterm_sem I \\<theta>' \\<nu>;\n        is_interp I\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> fml_sem I\n                                ($\\<phi> var\n                                  (singleton \\<theta>) \\<leftrightarrow>\n                                 $\\<phi> var (singleton \\<theta>'))", "have feq:\"(\\<chi> i. dterm_sem I (if i = vid1 then \\<theta> else Const 0) (a, b)) = (\\<chi> i. dterm_sem I (if i = vid1 then \\<theta>' else Const 0) (a, b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i. dterm_sem I (if i = vid1 then \\<theta> else Const 0) (a, b)) =\n    (\\<chi>i. dterm_sem I (if i = vid1 then \\<theta>' else Const 0) (a, b))", "apply(rule vec_extensionality)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<chi>i.\n           dterm_sem I (if i = vid1 then \\<theta> else Const 0) (a, b)) $\n       i =\n       (\\<chi>i.\n           dterm_sem I (if i = vid1 then \\<theta>' else Const 0) (a, b)) $\n       i", "using sem_eq"], ["proof (prove)\nusing this:\n  dterm_sem I \\<theta> (a, b) = dterm_sem I \\<theta>' (a, b)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<chi>i.\n           dterm_sem I (if i = vid1 then \\<theta> else Const 0) (a, b)) $\n       i =\n       (\\<chi>i.\n           dterm_sem I (if i = vid1 then \\<theta>' else Const 0) (a, b)) $\n       i", "by auto"], ["proof (state)\nthis:\n  (\\<chi>i. dterm_sem I (if i = vid1 then \\<theta> else Const 0) (a, b)) =\n  (\\<chi>i. dterm_sem I (if i = vid1 then \\<theta>' else Const 0) (a, b))\n\ngoal (1 subgoal):\n 1. \\<And>I a b.\n       \\<lbrakk>\\<forall>I \\<nu>.\n                   is_interp I \\<longrightarrow>\n                   dterm_sem I \\<theta> \\<nu> = dterm_sem I \\<theta>' \\<nu>;\n        is_interp I\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> fml_sem I\n                                ($\\<phi> var\n                                  (singleton \\<theta>) \\<leftrightarrow>\n                                 $\\<phi> var (singleton \\<theta>'))", "then"], ["proof (chain)\npicking this:\n  (\\<chi>i. dterm_sem I (if i = vid1 then \\<theta> else Const 0) (a, b)) =\n  (\\<chi>i. dterm_sem I (if i = vid1 then \\<theta>' else Const 0) (a, b))", "show \"(a, b) \\<in> fml_sem I ($\\<phi> var (singleton \\<theta>) \\<leftrightarrow> $\\<phi> var (singleton \\<theta>'))\""], ["proof (prove)\nusing this:\n  (\\<chi>i. dterm_sem I (if i = vid1 then \\<theta> else Const 0) (a, b)) =\n  (\\<chi>i. dterm_sem I (if i = vid1 then \\<theta>' else Const 0) (a, b))\n\ngoal (1 subgoal):\n 1. (a, b)\n    \\<in> fml_sem I\n           ($\\<phi> var (singleton \\<theta>) \\<leftrightarrow>\n            $\\<phi> var (singleton \\<theta>'))", "by auto"], ["proof (state)\nthis:\n  (a, b)\n  \\<in> fml_sem I\n         ($\\<phi> var (singleton \\<theta>) \\<leftrightarrow>\n          $\\<phi> var (singleton \\<theta>'))\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem CE_sound: \"CE_holds var \\<phi> \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CE_holds var \\<phi> \\<psi>", "apply(simp only: CE_holds_def valid_def iff_sem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>I \\<nu>.\n        is_interp I \\<longrightarrow>\n        (\\<nu> \\<in> fml_sem I \\<phi>) =\n        (\\<nu> \\<in> fml_sem I \\<psi>)) \\<longrightarrow>\n    (\\<forall>I \\<nu>.\n        is_interp I \\<longrightarrow>\n        (\\<nu> \\<in> fml_sem I (InContext var \\<phi>)) =\n        (\\<nu> \\<in> fml_sem I (InContext var \\<psi>)))", "apply(rule allI | rule impI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I \\<nu>.\n       \\<lbrakk>\\<forall>I \\<nu>.\n                   is_interp I \\<longrightarrow>\n                   (\\<nu> \\<in> fml_sem I \\<phi>) =\n                   (\\<nu> \\<in> fml_sem I \\<psi>);\n        is_interp I\\<rbrakk>\n       \\<Longrightarrow> (\\<nu> \\<in> fml_sem I (InContext var \\<phi>)) =\n                         (\\<nu> \\<in> fml_sem I (InContext var \\<psi>))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I \\<nu>.\n       \\<lbrakk>\\<forall>I.\n                   is_interp I \\<longrightarrow>\n                   (\\<forall>a b.\n                       ((a, b) \\<in> fml_sem I \\<phi>) =\n                       ((a, b) \\<in> fml_sem I \\<psi>));\n        is_interp I\\<rbrakk>\n       \\<Longrightarrow> (\\<nu> \\<in> Contexts I var (fml_sem I \\<phi>)) =\n                         (\\<nu> \\<in> Contexts I var (fml_sem I \\<psi>))", "apply(metis subsetI subset_antisym surj_pair)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "end"]]}