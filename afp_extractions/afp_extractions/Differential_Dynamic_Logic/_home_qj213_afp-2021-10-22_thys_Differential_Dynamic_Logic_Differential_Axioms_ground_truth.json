{"file_name": "/home/qj213/afp-2021-10-22/thys/Differential_Dynamic_Logic/Differential_Axioms.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Differential_Dynamic_Logic", "problem_names": ["lemma constant_deriv_inner:\n assumes interp:\"\\<forall>x i. (Functions I i has_derivative FunctionFrechet I i x) (at x)\"\n shows \"FunctionFrechet I id1 (vec_lambda (\\<lambda>i. sterm_sem I (empty i) (fst \\<nu>))) (vec_lambda(\\<lambda>i. frechet I (empty i) (fst \\<nu>) (snd \\<nu>)))= 0\"", "lemma constant_deriv_zero:\"is_interp I \\<Longrightarrow> directional_derivative I ($f id1 empty) \\<nu> = 0\"", "theorem diff_const_axiom_valid: \"valid diff_const_axiom\"", "theorem diff_var_axiom_valid: \"valid diff_var_axiom\"", "theorem diff_plus_axiom_valid: \"valid diff_plus_axiom\"", "theorem diff_times_axiom_valid: \"valid diff_times_axiom\"", "lemma DW_valid:\"valid DWaxiom\"", "lemma DE_lemma:\n  fixes ab bb::\"'sz simple_state\"\n  and sol::\"real \\<Rightarrow> 'sz simple_state\"\n  and I::\"('sf, 'sc, 'sz) interp\"\n  shows\n  \"repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1 (dterm_sem I (f1 fid1 vid1) (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\n   = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\"", "lemma DE_valid:\"valid DEaxiom\"", "lemma ODE_zero:\"\\<And>i. Inl i \\<notin> BVO ODE \\<Longrightarrow> Inr i \\<notin> BVO ODE \\<Longrightarrow> ODE_sem I ODE \\<nu> $ i= 0\"", "lemma DE_sys_valid:\n  assumes disj:\"{Inl vid1, Inr vid1} \\<inter> BVO ODE = {}\"\n  shows \"valid (([[EvolveODE (OProd  (OSing vid1 (f1 fid1 vid1)) ODE) (p1 vid2 vid1)]] (P pid1)) \\<leftrightarrow>\n ([[EvolveODE ((OProd  (OSing vid1 (f1 fid1 vid1))ODE)) (p1 vid2 vid1)]]\n    [[DiffAssign vid1 (f1 fid1 vid1)]]P pid1))\"", "lemma DC_valid:\"valid DCaxiom\"", "lemma DS_valid:\"valid DSaxiom\"", "lemma MVT0_within:\n  fixes f ::\"real \\<Rightarrow> real\"\n    and f'::\"real \\<Rightarrow> real \\<Rightarrow> real\"\n    and s t :: real\n  assumes f':\"\\<And>x. x \\<in> {0..t} \\<Longrightarrow> (f has_derivative (f' x)) (at x  within {0..t})\"\n  assumes geq':\"\\<And>x. x \\<in> {0..t} \\<Longrightarrow> f' x s \\<ge> 0\"\n  assumes int_s:\"s > 0 \\<and> s \\<le> t\"\n  assumes t: \"0 < t\"\n  shows \"f s \\<ge> f 0\"", "lemma MVT':\n  fixes f g ::\"real \\<Rightarrow> real\"\n  fixes f' g'::\"real \\<Rightarrow> real \\<Rightarrow> real\"\n  fixes s t ::real\n  assumes f':\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow> (f has_derivative (f' s)) (at s within {0..t})\"\n  assumes g':\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow> (g has_derivative (g' s)) (at s within {0..t})\"\n  assumes geq':\"\\<And>x. x \\<in> {0..t} \\<Longrightarrow> f' x s \\<ge> g' x s\"\n  assumes geq0:\"f 0 \\<ge> g 0\"\n  assumes int_s:\"s > 0 \\<and> s \\<le> t\"\n  assumes t:\"t > 0\"\n  shows \"f s \\<ge> g s\"", "lemma MVT'_gr:\n  fixes f g ::\"real \\<Rightarrow> real\"\n  fixes f' g'::\"real \\<Rightarrow> real \\<Rightarrow> real\"\n  fixes s t ::real\n  assumes f':\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow> (f has_derivative (f' s)) (at s within {0..t})\"\n  assumes g':\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow> (g has_derivative (g' s)) (at s within {0..t})\"\n  assumes geq':\"\\<And>x. x \\<in> {0..t} \\<Longrightarrow> f' x s \\<ge> g' x s\"\n  assumes geq0:\"f 0 > g 0\"\n  assumes int_s:\"s > 0 \\<and> s \\<le> t\"\n  assumes t:\"t > 0\"\n  shows \"f s > g s\"", "lemma frech_linear:\n  fixes x \\<theta> \\<nu> \\<nu>' I\n  assumes good_interp:\"is_interp I\"\n  assumes free:\"dfree \\<theta>\"\n  shows \"x * frechet I \\<theta> \\<nu> \\<nu>' = frechet I \\<theta> \\<nu> (x *\\<^sub>R \\<nu>')\"", "lemma rift_in_space_time:\n  fixes sol I ODE \\<psi> \\<theta> t s b\n  assumes good_interp:\"is_interp I\"\n  assumes free:\"dfree \\<theta>\"\n  assumes osafe:\"osafe ODE\"\n  assumes sol:\"(sol solves_ode (\\<lambda>_ \\<nu>'. ODE_sem I ODE \\<nu>')) {0..t} \n          {x. mk_v I ODE (sol 0, b) x \\<in> fml_sem I \\<psi>}\"\n  assumes FVT:\"FVT \\<theta> \\<subseteq> semBV I ODE\"  \n  assumes ivl:\"s \\<in> {0..t}\"\n  shows \"((\\<lambda>t. sterm_sem I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol t))))\n    \\<comment> \\<open>This is Frechet derivative, so equivalent to:\\<close>\n    \\<comment> \\<open>\\<open>has_real_derivative frechet I \\<theta> (fst((mk_v I ODE (sol 0, b) (sol s)))) (snd (mk_v I ODE (sol 0, b) (sol s))))) (at s within {0..t})\\<close>\\<close>\n    has_derivative (\\<lambda>t'. t' * frechet I \\<theta> (fst((mk_v I ODE (sol 0, b) (sol s)))) (snd (mk_v I ODE (sol 0, b) (sol s))))) (at s within {0..t})\"", "lemma dterm_sterm_dfree:\n   \"dfree \\<theta> \\<Longrightarrow> (\\<And>\\<nu> \\<nu>'. sterm_sem I \\<theta> \\<nu> = dterm_sem I \\<theta> (\\<nu>, \\<nu>'))\"", "lemma DIGeq_valid:\"valid DIGeqaxiom\"", "lemma DIGr_valid:\"valid DIGraxiom\"", "lemma DG_valid:\"valid DGaxiom\""], "translations": [["", "lemma constant_deriv_inner:\n assumes interp:\"\\<forall>x i. (Functions I i has_derivative FunctionFrechet I i x) (at x)\"\n shows \"FunctionFrechet I id1 (vec_lambda (\\<lambda>i. sterm_sem I (empty i) (fst \\<nu>))) (vec_lambda(\\<lambda>i. frechet I (empty i) (fst \\<nu>) (snd \\<nu>)))= 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FunctionFrechet I id1 (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>))\n     (\\<chi>i. frechet I (local.empty i) (fst \\<nu>) (snd \\<nu>)) =\n    0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. FunctionFrechet I id1 (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>))\n     (\\<chi>i. frechet I (local.empty i) (fst \\<nu>) (snd \\<nu>)) =\n    0", "have empty_zero:\"(vec_lambda(\\<lambda>i. frechet I (empty i) (fst \\<nu>) (snd \\<nu>))) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i. frechet I (local.empty i) (fst \\<nu>) (snd \\<nu>)) = 0", "using local.empty_def Cart_lambda_cong frechet.simps(5) zero_vec_def"], ["proof (prove)\nusing this:\n  local.empty \\<equiv> \\<lambda>i. Const 0\n  (\\<And>x. ?f x = ?g x) \\<Longrightarrow> vec_lambda ?f = vec_lambda ?g\n  frechet ?I (Const ?r) ?v = (\\<lambda>v'. 0)\n  0 \\<equiv> \\<chi>i. (0::?'a)\n\ngoal (1 subgoal):\n 1. (\\<chi>i. frechet I (local.empty i) (fst \\<nu>) (snd \\<nu>)) = 0", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.empty \\<equiv> \\<lambda>i. Const 0;\n     \\<And>f g. (\\<And>x. f x = g x) \\<Longrightarrow> f = g;\n     0 \\<equiv> \\<chi>i. (0::?'a6)\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>i.\n                          frechet I (local.empty i) (fst \\<nu>)\n                           (snd \\<nu>)) =\n                      0", "apply(rule vec_extensionality)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>local.empty \\<equiv> \\<lambda>i. Const 0;\n        \\<And>f g. (\\<And>x. f x = g x) \\<Longrightarrow> f = g;\n        0 \\<equiv> \\<chi>i. (0::?'a6)\\<rbrakk>\n       \\<Longrightarrow> (\\<chi>i.\n                             frechet I (local.empty i) (fst \\<nu>)\n                              (snd \\<nu>)) $\n                         i =\n                         0 $ i", "using local.empty_def Cart_lambda_cong frechet.simps(5) zero_vec_def"], ["proof (prove)\nusing this:\n  local.empty \\<equiv> \\<lambda>i. Const 0\n  (\\<And>x. ?f x = ?g x) \\<Longrightarrow> vec_lambda ?f = vec_lambda ?g\n  frechet ?I (Const ?r) ?v = (\\<lambda>v'. 0)\n  0 \\<equiv> \\<chi>i. (0::?'a)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>local.empty \\<equiv> \\<lambda>i. Const 0;\n        \\<And>f g. (\\<And>x. f x = g x) \\<Longrightarrow> f = g;\n        0 \\<equiv> \\<chi>i. (0::?'a6)\\<rbrakk>\n       \\<Longrightarrow> (\\<chi>i.\n                             frechet I (local.empty i) (fst \\<nu>)\n                              (snd \\<nu>)) $\n                         i =\n                         0 $ i", "by (simp add: local.empty_def)"], ["proof (state)\nthis:\n  (\\<chi>i. frechet I (local.empty i) (fst \\<nu>) (snd \\<nu>)) = 0\n\ngoal (1 subgoal):\n 1. FunctionFrechet I id1 (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>))\n     (\\<chi>i. frechet I (local.empty i) (fst \\<nu>) (snd \\<nu>)) =\n    0", "let ?x = \"(vec_lambda (\\<lambda>i. sterm_sem I (empty i) (fst \\<nu>)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. FunctionFrechet I id1 (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>))\n     (\\<chi>i. frechet I (local.empty i) (fst \\<nu>) (snd \\<nu>)) =\n    0", "from interp"], ["proof (chain)\npicking this:\n  \\<forall>x i. (Functions I i has_derivative FunctionFrechet I i x) (at x)", "have has_deriv:\"(Functions I id1 has_derivative FunctionFrechet I id1 ?x) (at ?x)\""], ["proof (prove)\nusing this:\n  \\<forall>x i. (Functions I i has_derivative FunctionFrechet I i x) (at x)\n\ngoal (1 subgoal):\n 1. (Functions I id1 has_derivative\n     FunctionFrechet I id1\n      (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>)))\n     (at (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>)))", "by auto"], ["proof (state)\nthis:\n  (Functions I id1 has_derivative\n   FunctionFrechet I id1 (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>)))\n   (at (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>)))\n\ngoal (1 subgoal):\n 1. FunctionFrechet I id1 (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>))\n     (\\<chi>i. frechet I (local.empty i) (fst \\<nu>) (snd \\<nu>)) =\n    0", "then"], ["proof (chain)\npicking this:\n  (Functions I id1 has_derivative\n   FunctionFrechet I id1 (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>)))\n   (at (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>)))", "have f_linear:\"linear (FunctionFrechet I id1 ?x)\""], ["proof (prove)\nusing this:\n  (Functions I id1 has_derivative\n   FunctionFrechet I id1 (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>)))\n   (at (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>)))\n\ngoal (1 subgoal):\n 1. linear\n     (FunctionFrechet I id1\n       (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>)))", "using Deriv.has_derivative_linear"], ["proof (prove)\nusing this:\n  (Functions I id1 has_derivative\n   FunctionFrechet I id1 (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>)))\n   (at (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>)))\n  (?f has_derivative ?f') ?F \\<Longrightarrow> linear ?f'\n\ngoal (1 subgoal):\n 1. linear\n     (FunctionFrechet I id1\n       (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>)))", "by auto"], ["proof (state)\nthis:\n  linear\n   (FunctionFrechet I id1\n     (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>)))\n\ngoal (1 subgoal):\n 1. FunctionFrechet I id1 (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>))\n     (\\<chi>i. frechet I (local.empty i) (fst \\<nu>) (snd \\<nu>)) =\n    0", "then"], ["proof (chain)\npicking this:\n  linear\n   (FunctionFrechet I id1\n     (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>)))", "show ?thesis"], ["proof (prove)\nusing this:\n  linear\n   (FunctionFrechet I id1\n     (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>)))\n\ngoal (1 subgoal):\n 1. FunctionFrechet I id1 (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>))\n     (\\<chi>i. frechet I (local.empty i) (fst \\<nu>) (snd \\<nu>)) =\n    0", "using empty_zero f_linear linear_0"], ["proof (prove)\nusing this:\n  linear\n   (FunctionFrechet I id1\n     (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>)))\n  (\\<chi>i. frechet I (local.empty i) (fst \\<nu>) (snd \\<nu>)) = 0\n  linear\n   (FunctionFrechet I id1\n     (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>)))\n  linear ?f \\<Longrightarrow> ?f (0::?'a) = (0::?'b)\n\ngoal (1 subgoal):\n 1. FunctionFrechet I id1 (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>))\n     (\\<chi>i. frechet I (local.empty i) (fst \\<nu>) (snd \\<nu>)) =\n    0", "by (auto)"], ["proof (state)\nthis:\n  FunctionFrechet I id1 (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>))\n   (\\<chi>i. frechet I (local.empty i) (fst \\<nu>) (snd \\<nu>)) =\n  0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma constant_deriv_zero:\"is_interp I \\<Longrightarrow> directional_derivative I ($f id1 empty) \\<nu> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_interp I \\<Longrightarrow>\n    directional_derivative I ($f id1 local.empty) \\<nu> = 0", "apply(simp only: is_interp_def directional_derivative_def frechet.simps frechet_correctness)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x i.\n       (Functions I i has_derivative FunctionFrechet I i x) (at x) \\<and>\n       continuous_on UNIV\n        (\\<lambda>x. Blinfun (FunctionFrechet I i x)) \\<Longrightarrow>\n    FunctionFrechet I id1 (\\<chi>i. sterm_sem I (local.empty i) (fst \\<nu>))\n     (\\<chi>i. frechet I (local.empty i) (fst \\<nu>) (snd \\<nu>)) =\n    0", "apply(rule constant_deriv_inner)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x i.\n       (Functions I i has_derivative FunctionFrechet I i x) (at x) \\<and>\n       continuous_on UNIV\n        (\\<lambda>x. Blinfun (FunctionFrechet I i x)) \\<Longrightarrow>\n    \\<forall>x i.\n       (Functions I i has_derivative FunctionFrechet I i x) (at x)", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem diff_const_axiom_valid: \"valid diff_const_axiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid diff_const_axiom", "apply(simp only: valid_def diff_const_axiom_def equals_sem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I \\<nu>.\n       is_interp I \\<longrightarrow>\n       dterm_sem I (Differential ($f fid1 local.empty)) \\<nu> =\n       dterm_sem I (Const 0) \\<nu>", "apply(rule allI | rule impI)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I \\<nu>.\n       is_interp I \\<Longrightarrow>\n       dterm_sem I (Differential ($f fid1 local.empty)) \\<nu> =\n       dterm_sem I (Const 0) \\<nu>", "apply(simp only: dterm_sem.simps constant_deriv_zero sterm_sem.simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem diff_var_axiom_valid: \"valid diff_var_axiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid diff_var_axiom", "apply(auto simp add: diff_var_axiom_def valid_def directional_derivative_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I b.\n       is_interp I \\<Longrightarrow> b \\<bullet> axis vid1 1 = b $ vid1", "by (metis inner_prod_eq)"], ["", "theorem diff_plus_axiom_valid: \"valid diff_plus_axiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid diff_plus_axiom", "apply(auto simp add: diff_plus_axiom_def valid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I a b.\n       is_interp I \\<Longrightarrow>\n       directional_derivative I (Plus (state_fun fid1) (state_fun fid2))\n        (a, b) =\n       directional_derivative I (state_fun fid1) (a, b) +\n       directional_derivative I (state_fun fid2) (a, b)", "subgoal for I a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_interp I \\<Longrightarrow>\n    directional_derivative I (Plus (state_fun fid1) (state_fun fid2))\n     (a, b) =\n    directional_derivative I (state_fun fid1) (a, b) +\n    directional_derivative I (state_fun fid2) (a, b)", "using frechet_correctness[of I \"(Plus (state_fun fid1) (state_fun fid2))\" b]"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_interp I;\n   dfree (Plus (state_fun fid1) (state_fun fid2))\\<rbrakk>\n  \\<Longrightarrow> (sterm_sem I\n                      (Plus (state_fun fid1)\n                        (state_fun fid2)) has_derivative\n                     frechet I (Plus (state_fun fid1) (state_fun fid2)) b)\n                     (at b)\n\ngoal (1 subgoal):\n 1. is_interp I \\<Longrightarrow>\n    directional_derivative I (Plus (state_fun fid1) (state_fun fid2))\n     (a, b) =\n    directional_derivative I (state_fun fid1) (a, b) +\n    directional_derivative I (state_fun fid2) (a, b)", "unfolding state_fun_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_interp I; dfree (Plus ($f fid1 Var) ($f fid2 Var))\\<rbrakk>\n  \\<Longrightarrow> (sterm_sem I\n                      (Plus ($f fid1 Var) ($f fid2 Var)) has_derivative\n                     frechet I (Plus ($f fid1 Var) ($f fid2 Var)) b)\n                     (at b)\n\ngoal (1 subgoal):\n 1. is_interp I \\<Longrightarrow>\n    directional_derivative I (Plus ($f fid1 Var) ($f fid2 Var)) (a, b) =\n    directional_derivative I ($f fid1 Var) (a, b) +\n    directional_derivative I ($f fid2 Var) (a, b)", "apply (auto intro: dfree.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     (sterm_sem I (Plus ($f fid1 Var) ($f fid2 Var)) has_derivative\n      (\\<lambda>v'.\n          (THE f'.\n              \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n           b (\\<chi>i. v' \\<bullet> axis i 1) +\n          (THE f'.\n              \\<forall>x. (Functions I fid2 has_derivative f' x) (at x))\n           b (\\<chi>i. v' \\<bullet> axis i 1)))\n      (at b)\\<rbrakk>\n    \\<Longrightarrow> directional_derivative I\n                       (Plus ($f fid1 Var) ($f fid2 Var)) (a, b) =\n                      directional_derivative I ($f fid1 Var) (a, b) +\n                      directional_derivative I ($f fid2 Var) (a, b)", "unfolding directional_derivative_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     (sterm_sem I (Plus ($f fid1 Var) ($f fid2 Var)) has_derivative\n      (\\<lambda>v'.\n          (THE f'.\n              \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n           b (\\<chi>i. v' \\<bullet> axis i 1) +\n          (THE f'.\n              \\<forall>x. (Functions I fid2 has_derivative f' x) (at x))\n           b (\\<chi>i. v' \\<bullet> axis i 1)))\n      (at b)\\<rbrakk>\n    \\<Longrightarrow> frechet I (Plus ($f fid1 Var) ($f fid2 Var))\n                       (fst (a, b)) (snd (a, b)) =\n                      frechet I ($f fid1 Var) (fst (a, b)) (snd (a, b)) +\n                      frechet I ($f fid2 Var) (fst (a, b)) (snd (a, b))", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem diff_times_axiom_valid: \"valid diff_times_axiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid diff_times_axiom", "apply(auto simp add: diff_times_axiom_def valid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I a b.\n       is_interp I \\<Longrightarrow>\n       directional_derivative I (Times (state_fun fid1) (state_fun fid2))\n        (a, b) =\n       directional_derivative I (state_fun fid1) (a, b) *\n       dterm_sem I (state_fun fid2) (a, b) +\n       dterm_sem I (state_fun fid1) (a, b) *\n       directional_derivative I (state_fun fid2) (a, b)", "subgoal for I a b"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_interp I \\<Longrightarrow>\n    directional_derivative I (Times (state_fun fid1) (state_fun fid2))\n     (a, b) =\n    directional_derivative I (state_fun fid1) (a, b) *\n    dterm_sem I (state_fun fid2) (a, b) +\n    dterm_sem I (state_fun fid1) (a, b) *\n    directional_derivative I (state_fun fid2) (a, b)", "using frechet_correctness[of I \"(Times (state_fun fid1) (state_fun fid2))\" b]"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_interp I;\n   dfree (Times (state_fun fid1) (state_fun fid2))\\<rbrakk>\n  \\<Longrightarrow> (sterm_sem I\n                      (Times (state_fun fid1)\n                        (state_fun fid2)) has_derivative\n                     frechet I (Times (state_fun fid1) (state_fun fid2)) b)\n                     (at b)\n\ngoal (1 subgoal):\n 1. is_interp I \\<Longrightarrow>\n    directional_derivative I (Times (state_fun fid1) (state_fun fid2))\n     (a, b) =\n    directional_derivative I (state_fun fid1) (a, b) *\n    dterm_sem I (state_fun fid2) (a, b) +\n    dterm_sem I (state_fun fid1) (a, b) *\n    directional_derivative I (state_fun fid2) (a, b)", "unfolding state_fun_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_interp I; dfree (Times ($f fid1 Var) ($f fid2 Var))\\<rbrakk>\n  \\<Longrightarrow> (sterm_sem I\n                      (Times ($f fid1 Var) ($f fid2 Var)) has_derivative\n                     frechet I (Times ($f fid1 Var) ($f fid2 Var)) b)\n                     (at b)\n\ngoal (1 subgoal):\n 1. is_interp I \\<Longrightarrow>\n    directional_derivative I (Times ($f fid1 Var) ($f fid2 Var)) (a, b) =\n    directional_derivative I ($f fid1 Var) (a, b) *\n    dterm_sem I ($f fid2 Var) (a, b) +\n    dterm_sem I ($f fid1 Var) (a, b) *\n    directional_derivative I ($f fid2 Var) (a, b)", "apply (auto intro: dfree.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     (sterm_sem I (Times ($f fid1 Var) ($f fid2 Var)) has_derivative\n      (\\<lambda>v'.\n          Functions I fid1 b *\n          (THE f'.\n              \\<forall>x. (Functions I fid2 has_derivative f' x) (at x))\n           b (\\<chi>i. v' \\<bullet> axis i 1) +\n          (THE f'.\n              \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n           b (\\<chi>i. v' \\<bullet> axis i 1) *\n          Functions I fid2 b))\n      (at b)\\<rbrakk>\n    \\<Longrightarrow> directional_derivative I\n                       (Times ($f fid1 Var) ($f fid2 Var)) (a, b) =\n                      directional_derivative I ($f fid1 Var) (a, b) *\n                      Functions I fid2 a +\n                      Functions I fid1 a *\n                      directional_derivative I ($f fid2 Var) (a, b)", "unfolding directional_derivative_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     (sterm_sem I (Times ($f fid1 Var) ($f fid2 Var)) has_derivative\n      (\\<lambda>v'.\n          Functions I fid1 b *\n          (THE f'.\n              \\<forall>x. (Functions I fid2 has_derivative f' x) (at x))\n           b (\\<chi>i. v' \\<bullet> axis i 1) +\n          (THE f'.\n              \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n           b (\\<chi>i. v' \\<bullet> axis i 1) *\n          Functions I fid2 b))\n      (at b)\\<rbrakk>\n    \\<Longrightarrow> frechet I (Times ($f fid1 Var) ($f fid2 Var))\n                       (fst (a, b)) (snd (a, b)) =\n                      frechet I ($f fid1 Var) (fst (a, b)) (snd (a, b)) *\n                      Functions I fid2 a +\n                      Functions I fid1 a *\n                      frechet I ($f fid2 Var) (fst (a, b)) (snd (a, b))", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Proofs for ODE Axioms\\<close>"], ["", "lemma DW_valid:\"valid DWaxiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid DWaxiom", "apply(unfold DWaxiom_def valid_def Let_def impl_sem )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I \\<nu>.\n       is_interp I \\<longrightarrow>\n       \\<nu> \\<in> fml_sem I ([[EvolveODE (OVar vid1) (Pc pid1)]]Pc pid1)", "apply(safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I a b.\n       is_interp I \\<Longrightarrow>\n       (a, b) \\<in> fml_sem I ([[EvolveODE (OVar vid1) (Pc pid1)]]Pc pid1)", "apply(auto simp only: fml_sem.simps prog_sem.simps box_sem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I; 0 \\<le> t;\n        (aa, ba) = mk_v I (OVar vid1) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OVar vid1))) {0..t}\n         {x. mk_v I (OVar vid1) (ab, bb) x \\<in> fml_sem I (Pc pid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "subgoal for I aa ba ab bb sol t"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I; 0 \\<le> t;\n     (aa, ba) = mk_v I (OVar vid1) (ab, bb) (sol t);\n     (sol solves_ode (\\<lambda>_. ODE_sem I (OVar vid1))) {0..t}\n      {x. mk_v I (OVar vid1) (ab, bb) x \\<in> fml_sem I (Pc pid1)};\n     sol 0 = fst (ab, bb)\\<rbrakk>\n    \\<Longrightarrow> mk_v I (OVar vid1) (ab, bb) (sol t)\n                      \\<in> fml_sem I (Pc pid1)", "using mk_v_agree[of I \"(OVar vid1)\" \"(ab,bb)\" \"sol t\"]\n    Vagree_univ[of \"aa\" \"ba\" \"sol t\" \"ODEs I vid1 (sol t)\"] solves_ode_domainD"], ["proof (prove)\nusing this:\n  Vagree (mk_v I (OVar vid1) (ab, bb) (sol t)) (ab, bb)\n   (- semBV I (OVar vid1)) \\<and>\n  Vagree (mk_v I (OVar vid1) (ab, bb) (sol t))\n   (mk_xode I (OVar vid1) (sol t)) (semBV I (OVar vid1))\n  Vagree (aa, ba) (sol t, ODEs I vid1 (sol t)) UNIV \\<Longrightarrow>\n  aa = sol t \\<and> ba = ODEs I vid1 (sol t)\n  \\<lbrakk>(?y solves_ode ?f) ?T ?X; ?t \\<in> ?T\\<rbrakk>\n  \\<Longrightarrow> ?y ?t \\<in> ?X\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I; 0 \\<le> t;\n     (aa, ba) = mk_v I (OVar vid1) (ab, bb) (sol t);\n     (sol solves_ode (\\<lambda>_. ODE_sem I (OVar vid1))) {0..t}\n      {x. mk_v I (OVar vid1) (ab, bb) x \\<in> fml_sem I (Pc pid1)};\n     sol 0 = fst (ab, bb)\\<rbrakk>\n    \\<Longrightarrow> mk_v I (OVar vid1) (ab, bb) (sol t)\n                      \\<in> fml_sem I (Pc pid1)", "by (fastforce)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma DE_lemma:\n  fixes ab bb::\"'sz simple_state\"\n  and sol::\"real \\<Rightarrow> 'sz simple_state\"\n  and I::\"('sf, 'sc, 'sz) interp\"\n  shows\n  \"repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1 (dterm_sem I (f1 fid1 vid1) (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\n   = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n     (dterm_sem I (f1 fid1 vid1)\n       (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))) =\n    mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. fst (repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n          (dterm_sem I (f1 fid1 vid1)\n            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))) =\n    fst (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\n 2. snd (repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n          (dterm_sem I (f1 fid1 vid1)\n            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))) =\n    snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))", "have set_eq:\" {Inl vid1, Inr vid1} = {Inr vid1, Inl vid1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {Inl vid1, Inr vid1} = {Inr vid1, Inl vid1}", "by auto"], ["proof (state)\nthis:\n  {Inl vid1, Inr vid1} = {Inr vid1, Inl vid1}\n\ngoal (2 subgoals):\n 1. fst (repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n          (dterm_sem I (f1 fid1 vid1)\n            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))) =\n    fst (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\n 2. snd (repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n          (dterm_sem I (f1 fid1 vid1)\n            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))) =\n    snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))", "have agree:\"Vagree (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) (mk_xode I (OSing vid1 (f1 fid1 vid1)) (sol t))\n      {Inl vid1, Inr vid1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\n     (mk_xode I (OSing vid1 (f1 fid1 vid1)) (sol t)) {Inl vid1, Inr vid1}", "using mk_v_agree[of I \"(OSing vid1 (f1 fid1 vid1))\" \"(ab, bb)\" \"(sol t)\"]"], ["proof (prove)\nusing this:\n  Vagree (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) (ab, bb)\n   (- semBV I (OSing vid1 (f1 fid1 vid1))) \\<and>\n  Vagree (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\n   (mk_xode I (OSing vid1 (f1 fid1 vid1)) (sol t))\n   (semBV I (OSing vid1 (f1 fid1 vid1)))\n\ngoal (1 subgoal):\n 1. Vagree (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\n     (mk_xode I (OSing vid1 (f1 fid1 vid1)) (sol t)) {Inl vid1, Inr vid1}", "unfolding semBV.simps"], ["proof (prove)\nusing this:\n  Vagree (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) (ab, bb)\n   (- (Inl ` ODE_vars I (OSing vid1 (f1 fid1 vid1)) \\<union>\n       Inr ` ODE_vars I (OSing vid1 (f1 fid1 vid1)))) \\<and>\n  Vagree (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\n   (mk_xode I (OSing vid1 (f1 fid1 vid1)) (sol t))\n   (Inl ` ODE_vars I (OSing vid1 (f1 fid1 vid1)) \\<union>\n    Inr ` ODE_vars I (OSing vid1 (f1 fid1 vid1)))\n\ngoal (1 subgoal):\n 1. Vagree (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\n     (mk_xode I (OSing vid1 (f1 fid1 vid1)) (sol t)) {Inl vid1, Inr vid1}", "using set_eq"], ["proof (prove)\nusing this:\n  Vagree (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) (ab, bb)\n   (- (Inl ` ODE_vars I (OSing vid1 (f1 fid1 vid1)) \\<union>\n       Inr ` ODE_vars I (OSing vid1 (f1 fid1 vid1)))) \\<and>\n  Vagree (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\n   (mk_xode I (OSing vid1 (f1 fid1 vid1)) (sol t))\n   (Inl ` ODE_vars I (OSing vid1 (f1 fid1 vid1)) \\<union>\n    Inr ` ODE_vars I (OSing vid1 (f1 fid1 vid1)))\n  {Inl vid1, Inr vid1} = {Inr vid1, Inl vid1}\n\ngoal (1 subgoal):\n 1. Vagree (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\n     (mk_xode I (OSing vid1 (f1 fid1 vid1)) (sol t)) {Inl vid1, Inr vid1}", "by auto"], ["proof (state)\nthis:\n  Vagree (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\n   (mk_xode I (OSing vid1 (f1 fid1 vid1)) (sol t)) {Inl vid1, Inr vid1}\n\ngoal (2 subgoals):\n 1. fst (repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n          (dterm_sem I (f1 fid1 vid1)\n            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))) =\n    fst (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\n 2. snd (repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n          (dterm_sem I (f1 fid1 vid1)\n            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))) =\n    snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))", "have fact:\"dterm_sem I (f1 fid1 vid1) (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\n          = snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) $ vid1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid1 vid1)\n     (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) =\n    snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) $ vid1", "using agree"], ["proof (prove)\nusing this:\n  Vagree (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\n   (mk_xode I (OSing vid1 (f1 fid1 vid1)) (sol t)) {Inl vid1, Inr vid1}\n\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid1 vid1)\n     (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) =\n    snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) $ vid1", "unfolding Vagree_def dterm_sem.simps f1_def mk_xode.simps"], ["proof (prove)\nusing this:\n  (\\<forall>i.\n      Inl i \\<in> {Inl vid1, Inr vid1} \\<longrightarrow>\n      fst (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n            (sol t)) $\n      i =\n      fst (sol t,\n           ODE_sem I (OSing vid1 ($f fid1 (singleton (Var vid1))))\n            (sol t)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> {Inl vid1, Inr vid1} \\<longrightarrow>\n      snd (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n            (sol t)) $\n      i =\n      snd (sol t,\n           ODE_sem I (OSing vid1 ($f fid1 (singleton (Var vid1))))\n            (sol t)) $\n      i)\n\ngoal (1 subgoal):\n 1. Functions I fid1\n     (\\<chi>i.\n         dterm_sem I (singleton (Var vid1) i)\n          (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n            (sol t))) =\n    snd (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n          (sol t)) $\n    vid1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i \\<in> {Inl vid1, Inr vid1} \\<longrightarrow>\n        fst (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n              (sol t)) $\n        i =\n        fst (sol t,\n             ODE_sem I (OSing vid1 ($f fid1 (singleton (Var vid1))))\n              (sol t)) $\n        i) \\<and>\n    (\\<forall>i.\n        Inr i \\<in> {Inl vid1, Inr vid1} \\<longrightarrow>\n        snd (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n              (sol t)) $\n        i =\n        snd (sol t,\n             ODE_sem I (OSing vid1 ($f fid1 (singleton (Var vid1))))\n              (sol t)) $\n        i) \\<Longrightarrow>\n    Functions I fid1\n     (\\<chi>i.\n         dterm_sem I (singleton (Var vid1) i)\n          (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n            (sol t))) =\n    snd (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n          (sol t)) $\n    vid1", "assume alls:\"(\\<forall>i. Inl i \\<in> {Inl vid1, Inr vid1} \\<longrightarrow>\n        fst (mk_v I (OSing vid1 ($f fid1 (singleton (trm.Var vid1)))) (ab, bb) (sol t)) $ i =\n        fst (sol t, ODE_sem I (OSing vid1 ($f fid1 (singleton (trm.Var vid1)))) (sol t)) $ i) \\<and>\n      (\\<forall>i. Inr i \\<in> {Inl vid1, Inr vid1} \\<longrightarrow>\n        snd (mk_v I (OSing vid1 ($f fid1 (singleton (trm.Var vid1)))) (ab, bb) (sol t)) $ i =\n        snd (sol t, ODE_sem I (OSing vid1 ($f fid1 (singleton (trm.Var vid1)))) (sol t)) $ i)\""], ["proof (state)\nthis:\n  (\\<forall>i.\n      Inl i \\<in> {Inl vid1, Inr vid1} \\<longrightarrow>\n      fst (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n            (sol t)) $\n      i =\n      fst (sol t,\n           ODE_sem I (OSing vid1 ($f fid1 (singleton (Var vid1))))\n            (sol t)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> {Inl vid1, Inr vid1} \\<longrightarrow>\n      snd (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n            (sol t)) $\n      i =\n      snd (sol t,\n           ODE_sem I (OSing vid1 ($f fid1 (singleton (Var vid1))))\n            (sol t)) $\n      i)\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i \\<in> {Inl vid1, Inr vid1} \\<longrightarrow>\n        fst (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n              (sol t)) $\n        i =\n        fst (sol t,\n             ODE_sem I (OSing vid1 ($f fid1 (singleton (Var vid1))))\n              (sol t)) $\n        i) \\<and>\n    (\\<forall>i.\n        Inr i \\<in> {Inl vid1, Inr vid1} \\<longrightarrow>\n        snd (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n              (sol t)) $\n        i =\n        snd (sol t,\n             ODE_sem I (OSing vid1 ($f fid1 (singleton (Var vid1))))\n              (sol t)) $\n        i) \\<Longrightarrow>\n    Functions I fid1\n     (\\<chi>i.\n         dterm_sem I (singleton (Var vid1) i)\n          (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n            (sol t))) =\n    snd (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n          (sol t)) $\n    vid1", "hence atVid'':\"snd (mk_v I (OSing vid1 ($f fid1 (singleton (trm.Var vid1)))) (ab, bb) (sol t)) $ vid1 = sterm_sem I ($f fid1 (singleton (trm.Var vid1))) (sol t)\""], ["proof (prove)\nusing this:\n  (\\<forall>i.\n      Inl i \\<in> {Inl vid1, Inr vid1} \\<longrightarrow>\n      fst (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n            (sol t)) $\n      i =\n      fst (sol t,\n           ODE_sem I (OSing vid1 ($f fid1 (singleton (Var vid1))))\n            (sol t)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> {Inl vid1, Inr vid1} \\<longrightarrow>\n      snd (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n            (sol t)) $\n      i =\n      snd (sol t,\n           ODE_sem I (OSing vid1 ($f fid1 (singleton (Var vid1))))\n            (sol t)) $\n      i)\n\ngoal (1 subgoal):\n 1. snd (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n          (sol t)) $\n    vid1 =\n    sterm_sem I ($f fid1 (singleton (Var vid1))) (sol t)", "by auto"], ["proof (state)\nthis:\n  snd (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n        (sol t)) $\n  vid1 =\n  sterm_sem I ($f fid1 (singleton (Var vid1))) (sol t)\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i \\<in> {Inl vid1, Inr vid1} \\<longrightarrow>\n        fst (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n              (sol t)) $\n        i =\n        fst (sol t,\n             ODE_sem I (OSing vid1 ($f fid1 (singleton (Var vid1))))\n              (sol t)) $\n        i) \\<and>\n    (\\<forall>i.\n        Inr i \\<in> {Inl vid1, Inr vid1} \\<longrightarrow>\n        snd (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n              (sol t)) $\n        i =\n        snd (sol t,\n             ODE_sem I (OSing vid1 ($f fid1 (singleton (Var vid1))))\n              (sol t)) $\n        i) \\<Longrightarrow>\n    Functions I fid1\n     (\\<chi>i.\n         dterm_sem I (singleton (Var vid1) i)\n          (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n            (sol t))) =\n    snd (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n          (sol t)) $\n    vid1", "have argsEq:\"(\\<chi> i. dterm_sem I (singleton (trm.Var vid1) i)\n          (mk_v I (OSing vid1 ($f fid1 (singleton (trm.Var vid1)))) (ab, bb) (sol t)))\n          = (\\<chi> i.  sterm_sem I (singleton (trm.Var vid1) i) (sol t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        dterm_sem I (singleton (Var vid1) i)\n         (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n           (sol t))) =\n    (\\<chi>i. sterm_sem I (singleton (Var vid1) i) (sol t))", "using alls f1_def"], ["proof (prove)\nusing this:\n  (\\<forall>i.\n      Inl i \\<in> {Inl vid1, Inr vid1} \\<longrightarrow>\n      fst (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n            (sol t)) $\n      i =\n      fst (sol t,\n           ODE_sem I (OSing vid1 ($f fid1 (singleton (Var vid1))))\n            (sol t)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> {Inl vid1, Inr vid1} \\<longrightarrow>\n      snd (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n            (sol t)) $\n      i =\n      snd (sol t,\n           ODE_sem I (OSing vid1 ($f fid1 (singleton (Var vid1))))\n            (sol t)) $\n      i)\n  f1 ?f ?x = $f ?f (singleton (Var ?x))\n\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        dterm_sem I (singleton (Var vid1) i)\n         (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n           (sol t))) =\n    (\\<chi>i. sterm_sem I (singleton (Var vid1) i) (sol t))", "by auto"], ["proof (state)\nthis:\n  (\\<chi>i.\n      dterm_sem I (singleton (Var vid1) i)\n       (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n         (sol t))) =\n  (\\<chi>i. sterm_sem I (singleton (Var vid1) i) (sol t))\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i \\<in> {Inl vid1, Inr vid1} \\<longrightarrow>\n        fst (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n              (sol t)) $\n        i =\n        fst (sol t,\n             ODE_sem I (OSing vid1 ($f fid1 (singleton (Var vid1))))\n              (sol t)) $\n        i) \\<and>\n    (\\<forall>i.\n        Inr i \\<in> {Inl vid1, Inr vid1} \\<longrightarrow>\n        snd (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n              (sol t)) $\n        i =\n        snd (sol t,\n             ODE_sem I (OSing vid1 ($f fid1 (singleton (Var vid1))))\n              (sol t)) $\n        i) \\<Longrightarrow>\n    Functions I fid1\n     (\\<chi>i.\n         dterm_sem I (singleton (Var vid1) i)\n          (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n            (sol t))) =\n    snd (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n          (sol t)) $\n    vid1", "thus \"Functions I fid1 (\\<chi> i. dterm_sem I (singleton (trm.Var vid1) i)\n          (mk_v I (OSing vid1 ($f fid1 (singleton (trm.Var vid1)))) (ab, bb) (sol t))) \n        = snd (mk_v I (OSing vid1 ($f fid1 (singleton (trm.Var vid1)))) (ab, bb) (sol t)) $ vid1\""], ["proof (prove)\nusing this:\n  (\\<chi>i.\n      dterm_sem I (singleton (Var vid1) i)\n       (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n         (sol t))) =\n  (\\<chi>i. sterm_sem I (singleton (Var vid1) i) (sol t))\n\ngoal (1 subgoal):\n 1. Functions I fid1\n     (\\<chi>i.\n         dterm_sem I (singleton (Var vid1) i)\n          (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n            (sol t))) =\n    snd (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n          (sol t)) $\n    vid1", "by (simp only: atVid'' ODE_sem.simps sterm_sem.simps dterm_sem.simps)"], ["proof (state)\nthis:\n  Functions I fid1\n   (\\<chi>i.\n       dterm_sem I (singleton (Var vid1) i)\n        (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n          (sol t))) =\n  snd (mk_v I (OSing vid1 ($f fid1 (singleton (Var vid1)))) (ab, bb)\n        (sol t)) $\n  vid1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dterm_sem I (f1 fid1 vid1)\n   (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) =\n  snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) $ vid1\n\ngoal (2 subgoals):\n 1. fst (repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n          (dterm_sem I (f1 fid1 vid1)\n            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))) =\n    fst (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\n 2. snd (repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n          (dterm_sem I (f1 fid1 vid1)\n            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))) =\n    snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))", "have eqSnd:\"(\\<chi> y. if vid1 = y then snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) $ vid1\n        else snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) $ y) = snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>y.\n        if vid1 = y\n        then snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) $\n             vid1\n        else snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) $\n             y) =\n    snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))", "by (simp add: vec_extensionality)"], ["proof (state)\nthis:\n  (\\<chi>y.\n      if vid1 = y\n      then snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) $ vid1\n      else snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) $ y) =\n  snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\n\ngoal (2 subgoals):\n 1. fst (repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n          (dterm_sem I (f1 fid1 vid1)\n            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))) =\n    fst (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\n 2. snd (repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n          (dterm_sem I (f1 fid1 vid1)\n            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))) =\n    snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))", "have truth:\"repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n        (dterm_sem I (f1 fid1 vid1) (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\n      = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n     (dterm_sem I (f1 fid1 vid1)\n       (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))) =\n    mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)", "using fact"], ["proof (prove)\nusing this:\n  dterm_sem I (f1 fid1 vid1)\n   (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) =\n  snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) $ vid1\n\ngoal (1 subgoal):\n 1. repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n     (dterm_sem I (f1 fid1 vid1)\n       (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))) =\n    mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)", "by (auto simp only: eqSnd repd.simps fact prod.collapse split: if_split)"], ["proof (state)\nthis:\n  repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n   (dterm_sem I (f1 fid1 vid1)\n     (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))) =\n  mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n\ngoal (2 subgoals):\n 1. fst (repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n          (dterm_sem I (f1 fid1 vid1)\n            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))) =\n    fst (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\n 2. snd (repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n          (dterm_sem I (f1 fid1 vid1)\n            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))) =\n    snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))", "thus \"fst (repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n          (dterm_sem I (f1 fid1 vid1) (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))) =\n    fst (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\"\n\n    \"snd (repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n      (dterm_sem I (f1 fid1 vid1) (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))) =\n    snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) \""], ["proof (prove)\nusing this:\n  repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n   (dterm_sem I (f1 fid1 vid1)\n     (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))) =\n  mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n\ngoal (1 subgoal):\n 1. fst (repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n          (dterm_sem I (f1 fid1 vid1)\n            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))) =\n    fst (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) &&&\n    snd (repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n          (dterm_sem I (f1 fid1 vid1)\n            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))) =\n    snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))", "by auto"], ["proof (state)\nthis:\n  fst (repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n        (dterm_sem I (f1 fid1 vid1)\n          (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))) =\n  fst (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\n  snd (repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n        (dterm_sem I (f1 fid1 vid1)\n          (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))) =\n  snd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma DE_valid:\"valid DEaxiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid DEaxiom", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. valid DEaxiom", "have dsafe:\"dsafe ($f fid1 (singleton (trm.Var vid1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dsafe ($f fid1 (singleton (Var vid1)))", "unfolding singleton_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dsafe ($f fid1 (singleton (Var vid1)))", "by(auto intro: dsafe.intros)"], ["proof (state)\nthis:\n  dsafe ($f fid1 (singleton (Var vid1)))\n\ngoal (1 subgoal):\n 1. valid DEaxiom", "have osafe:\"osafe(OSing vid1 (f1 fid1 vid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. osafe (OSing vid1 (f1 fid1 vid1))", "unfolding f1_def empty_def singleton_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. osafe (OSing vid1 ($f fid1 (singleton (Var vid1))))", "using dsafe osafe.intros dsafe.intros"], ["proof (prove)\nusing this:\n  dsafe ($f fid1 (singleton (Var vid1)))\n  osafe (OVar ?c)\n  dfree ?\\<theta> \\<Longrightarrow> osafe (OSing ?x ?\\<theta>)\n  \\<lbrakk>osafe ?ODE1.0; osafe ?ODE2.0;\n   ODE_dom ?ODE1.0 \\<inter> ODE_dom ?ODE2.0 = {}\\<rbrakk>\n  \\<Longrightarrow> osafe (OProd ?ODE1.0 ?ODE2.0)\n  dsafe (Var ?i)\n  dsafe (Const ?r)\n  (\\<And>i. dsafe (?args i)) \\<Longrightarrow> dsafe ($f ?i ?args)\n  \\<lbrakk>dsafe ?\\<theta>\\<^sub>1; dsafe ?\\<theta>\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> dsafe (Plus ?\\<theta>\\<^sub>1 ?\\<theta>\\<^sub>2)\n  \\<lbrakk>dsafe ?\\<theta>\\<^sub>1; dsafe ?\\<theta>\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> dsafe (Times ?\\<theta>\\<^sub>1 ?\\<theta>\\<^sub>2)\n  dfree ?\\<theta> \\<Longrightarrow> dsafe (Differential ?\\<theta>)\n  dsafe ($' ?i)\n\ngoal (1 subgoal):\n 1. osafe (OSing vid1 ($f fid1 (singleton (Var vid1))))", "by (simp add: osafe_Sing dfree_Const)"], ["proof (state)\nthis:\n  osafe (OSing vid1 (f1 fid1 vid1))\n\ngoal (1 subgoal):\n 1. valid DEaxiom", "have fsafe:\"fsafe (p1 vid2 vid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fsafe (p1 vid2 vid1)", "unfolding p1_def singleton_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fsafe ($\\<phi> vid2 (singleton (Var vid1)))", "using hpsafe_fsafe.intros(10)"], ["proof (prove)\nusing this:\n  (\\<And>i. dsafe (?args i)) \\<Longrightarrow> fsafe ($\\<phi> ?p ?args)\n\ngoal (1 subgoal):\n 1. fsafe ($\\<phi> vid2 (singleton (Var vid1)))", "using dsafe dsafe_Fun_simps image_iff"], ["proof (prove)\nusing this:\n  (\\<And>i. dsafe (?args i)) \\<Longrightarrow> fsafe ($\\<phi> ?p ?args)\n  dsafe ($f fid1 (singleton (Var vid1)))\n  dsafe ($f ?i ?args) = (\\<forall>x. dsafe (?args x))\n  (?z \\<in> ?f ` ?A) = (\\<exists>x\\<in>?A. ?z = ?f x)\n\ngoal (1 subgoal):\n 1. fsafe ($\\<phi> vid2 (singleton (Var vid1)))", "by (simp add: dfree_Const)"], ["proof (state)\nthis:\n  fsafe (p1 vid2 vid1)\n\ngoal (1 subgoal):\n 1. valid DEaxiom", "show \"valid DEaxiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid DEaxiom", "apply(auto simp only: DEaxiom_def valid_def Let_def iff_sem impl_sem)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I a b.\n       \\<lbrakk>is_interp I;\n        (a, b)\n        \\<in> fml_sem I\n               ([[EvolveODE (OSing vid1 (f1 fid1 vid1))\n                   (p1 vid2 vid1)]]P pid1)\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> fml_sem I\n                                ([[EvolveODE (OSing vid1 (f1 fid1 vid1))\n                                    (p1 vid2\nvid1)]][[DiffAssign vid1 (f1 fid1 vid1)]]P pid1)\n 2. \\<And>I a b.\n       \\<lbrakk>is_interp I;\n        (a, b)\n        \\<in> fml_sem I\n               ([[EvolveODE (OSing vid1 (f1 fid1 vid1))\n                   (p1 vid2\n                     vid1)]][[DiffAssign vid1\n                               (f1 fid1 vid1)]]P pid1)\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> fml_sem I\n                                ([[EvolveODE (OSing vid1 (f1 fid1 vid1))\n                                    (p1 vid2 vid1)]]P pid1)", "apply(auto simp only: fml_sem.simps prog_sem.simps mem_Collect_eq box_sem)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (P pid1);\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n         (dterm_sem I (f1 fid1 vid1)\n           (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                            (sol t))\n                          vid1\n                          (dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                              (sol t)))\n                         \\<in> fml_sem I (P pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (P pid1);\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n         (dterm_sem I (f1 fid1 vid1)\n           (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                            (sol t))\n                          vid1\n                          (dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                              (sol t)))\n                         \\<in> fml_sem I (P pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "fix I::\"('sf,'sc,'sz) interp\"\n       and aa ba ab bb sol \n       and t::real\n       and ac bc"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (P pid1);\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n         (dterm_sem I (f1 fid1 vid1)\n           (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                            (sol t))\n                          vid1\n                          (dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                              (sol t)))\n                         \\<in> fml_sem I (P pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "assume \"is_interp I\""], ["proof (state)\nthis:\n  is_interp I\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (P pid1);\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n         (dterm_sem I (f1 fid1 vid1)\n           (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                            (sol t))\n                          vid1\n                          (dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                              (sol t)))\n                         \\<in> fml_sem I (P pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "assume allw:\"\\<forall>\\<omega>. (\\<exists>\\<nu> sol t.\n                  ((ab, bb), \\<omega>) = (\\<nu>, mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n                  0 \\<le> t \\<and>\n                  (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1)))) {0..t}\n                   {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n                  (sol 0) = (fst \\<nu>) ) \\<longrightarrow>\n              \\<omega> \\<in> fml_sem I (P pid1)\""], ["proof (state)\nthis:\n  \\<forall>\\<omega>.\n     (\\<exists>\\<nu> sol t.\n         ((ab, bb), \\<omega>) =\n         (\\<nu>, mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n         0 \\<le> t \\<and>\n         (sol solves_ode\n          (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n          {0..t}\n          {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n              \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n         sol 0 = fst \\<nu>) \\<longrightarrow>\n     \\<omega> \\<in> fml_sem I (P pid1)\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (P pid1);\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n         (dterm_sem I (f1 fid1 vid1)\n           (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                            (sol t))\n                          vid1\n                          (dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                              (sol t)))\n                         \\<in> fml_sem I (P pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "assume t:\"0 \\<le> t\""], ["proof (state)\nthis:\n  0 \\<le> t\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (P pid1);\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n         (dterm_sem I (f1 fid1 vid1)\n           (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                            (sol t))\n                          vid1\n                          (dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                              (sol t)))\n                         \\<in> fml_sem I (P pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "assume aaba:\"(aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\""], ["proof (state)\nthis:\n  (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (P pid1);\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n         (dterm_sem I (f1 fid1 vid1)\n           (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                            (sol t))\n                          vid1\n                          (dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                              (sol t)))\n                         \\<in> fml_sem I (P pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "assume solve:\" (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1)))) {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x \\<in> fml_sem I (p1 vid2 vid1)}\""], ["proof (state)\nthis:\n  (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n   {0..t}\n   {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n       \\<in> fml_sem I (p1 vid2 vid1)}\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (P pid1);\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n         (dterm_sem I (f1 fid1 vid1)\n           (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                            (sol t))\n                          vid1\n                          (dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                              (sol t)))\n                         \\<in> fml_sem I (P pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "assume sol0:\" (sol 0) = (fst (ab, bb)) \""], ["proof (state)\nthis:\n  sol 0 = fst (ab, bb)\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (P pid1);\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n         (dterm_sem I (f1 fid1 vid1)\n           (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                            (sol t))\n                          vid1\n                          (dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                              (sol t)))\n                         \\<in> fml_sem I (P pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "assume rep:\"   (ac, bc) =\n        repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n         (dterm_sem I (f1 fid1 vid1) (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\""], ["proof (state)\nthis:\n  (ac, bc) =\n  repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n   (dterm_sem I (f1 fid1 vid1)\n     (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (P pid1);\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n         (dterm_sem I (f1 fid1 vid1)\n           (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                            (sol t))\n                          vid1\n                          (dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                              (sol t)))\n                         \\<in> fml_sem I (P pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "have aaba_sem:\"(aa,ba) \\<in> fml_sem I (P pid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (aa, ba) \\<in> fml_sem I (P pid1)", "using allw t aaba solve sol0 rep"], ["proof (prove)\nusing this:\n  \\<forall>\\<omega>.\n     (\\<exists>\\<nu> sol t.\n         ((ab, bb), \\<omega>) =\n         (\\<nu>, mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n         0 \\<le> t \\<and>\n         (sol solves_ode\n          (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n          {0..t}\n          {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n              \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n         sol 0 = fst \\<nu>) \\<longrightarrow>\n     \\<omega> \\<in> fml_sem I (P pid1)\n  0 \\<le> t\n  (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n  (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n   {0..t}\n   {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n       \\<in> fml_sem I (p1 vid2 vid1)}\n  sol 0 = fst (ab, bb)\n  (ac, bc) =\n  repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n   (dterm_sem I (f1 fid1 vid1)\n     (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\n\ngoal (1 subgoal):\n 1. (aa, ba) \\<in> fml_sem I (P pid1)", "by blast"], ["proof (state)\nthis:\n  (aa, ba) \\<in> fml_sem I (P pid1)\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (P pid1);\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n         (dterm_sem I (f1 fid1 vid1)\n           (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                            (sol t))\n                          vid1\n                          (dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                              (sol t)))\n                         \\<in> fml_sem I (P pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "have truth:\"repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n          (dterm_sem I (f1 fid1 vid1) (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\n     = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n     (dterm_sem I (f1 fid1 vid1)\n       (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))) =\n    mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)", "using DE_lemma"], ["proof (prove)\nusing this:\n  repd (mk_v ?I (OSing vid1 (f1 fid1 vid1)) (?ab, ?bb) (?sol ?t)) vid1\n   (dterm_sem ?I (f1 fid1 vid1)\n     (mk_v ?I (OSing vid1 (f1 fid1 vid1)) (?ab, ?bb) (?sol ?t))) =\n  mk_v ?I (OSing vid1 (f1 fid1 vid1)) (?ab, ?bb) (?sol ?t)\n\ngoal (1 subgoal):\n 1. repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n     (dterm_sem I (f1 fid1 vid1)\n       (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))) =\n    mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)", "by auto"], ["proof (state)\nthis:\n  repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n   (dterm_sem I (f1 fid1 vid1)\n     (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))) =\n  mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (P pid1);\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n         (dterm_sem I (f1 fid1 vid1)\n           (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                            (sol t))\n                          vid1\n                          (dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb)\n                              (sol t)))\n                         \\<in> fml_sem I (P pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "show \"\n        repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n         (dterm_sem I (f1 fid1 vid1) (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\n        \\<in> fml_sem I (P pid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n     (dterm_sem I (f1 fid1 vid1)\n       (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\n    \\<in> fml_sem I (P pid1)", "using aaba aaba_sem truth"], ["proof (prove)\nusing this:\n  (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n  (aa, ba) \\<in> fml_sem I (P pid1)\n  repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n   (dterm_sem I (f1 fid1 vid1)\n     (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))) =\n  mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n\ngoal (1 subgoal):\n 1. repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n     (dterm_sem I (f1 fid1 vid1)\n       (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\n    \\<in> fml_sem I (P pid1)", "by (auto)"], ["proof (state)\nthis:\n  repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n   (dterm_sem I (f1 fid1 vid1)\n     (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\n  \\<in> fml_sem I (P pid1)\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "fix I::\"('sf,'sc,'sz) interp\" and  aa ba ab bb sol and t::real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "assume \"is_interp I\""], ["proof (state)\nthis:\n  is_interp I\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "assume all:\"\\<forall>\\<omega>. (\\<exists>\\<nu> sol t.\n                ((ab, bb), \\<omega>) = (\\<nu>, mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n                0 \\<le> t \\<and>\n                (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1)))) {0..t}\n                 {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n                 (sol 0) = (fst \\<nu>) ) \\<longrightarrow>\n            (\\<forall>\\<omega>'. \\<omega>' = repd \\<omega> vid1 (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow> \\<omega>' \\<in> fml_sem I (P pid1))\""], ["proof (state)\nthis:\n  \\<forall>\\<omega>.\n     (\\<exists>\\<nu> sol t.\n         ((ab, bb), \\<omega>) =\n         (\\<nu>, mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n         0 \\<le> t \\<and>\n         (sol solves_ode\n          (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n          {0..t}\n          {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n              \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n         sol 0 = fst \\<nu>) \\<longrightarrow>\n     (\\<forall>\\<omega>'.\n         \\<omega>' =\n         repd \\<omega> vid1\n          (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n         \\<omega>' \\<in> fml_sem I (P pid1))\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "hence justW:\"(\\<exists>\\<nu> sol t.\n                ((ab, bb), (aa, ba)) = (\\<nu>, mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n                0 \\<le> t \\<and>\n                (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1)))) {0..t}\n                 {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n                (sol 0) = (fst \\<nu>)) \\<longrightarrow>\n            (\\<forall>\\<omega>'. \\<omega>' = repd (aa, ba) vid1 (dterm_sem I (f1 fid1 vid1) (aa, ba)) \\<longrightarrow> \\<omega>' \\<in> fml_sem I (P pid1))\""], ["proof (prove)\nusing this:\n  \\<forall>\\<omega>.\n     (\\<exists>\\<nu> sol t.\n         ((ab, bb), \\<omega>) =\n         (\\<nu>, mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n         0 \\<le> t \\<and>\n         (sol solves_ode\n          (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n          {0..t}\n          {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n              \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n         sol 0 = fst \\<nu>) \\<longrightarrow>\n     (\\<forall>\\<omega>'.\n         \\<omega>' =\n         repd \\<omega> vid1\n          (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n         \\<omega>' \\<in> fml_sem I (P pid1))\n\ngoal (1 subgoal):\n 1. (\\<exists>\\<nu> sol t.\n        ((ab, bb), aa, ba) =\n        (\\<nu>, mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n        0 \\<le> t \\<and>\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n             \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n        sol 0 = fst \\<nu>) \\<longrightarrow>\n    (\\<forall>\\<omega>'.\n        \\<omega>' =\n        repd (aa, ba) vid1\n         (dterm_sem I (f1 fid1 vid1) (aa, ba)) \\<longrightarrow>\n        \\<omega>' \\<in> fml_sem I (P pid1))", "by (rule allE)"], ["proof (state)\nthis:\n  (\\<exists>\\<nu> sol t.\n      ((ab, bb), aa, ba) =\n      (\\<nu>, mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n      0 \\<le> t \\<and>\n      (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n       {0..t}\n       {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n           \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n      sol 0 = fst \\<nu>) \\<longrightarrow>\n  (\\<forall>\\<omega>'.\n      \\<omega>' =\n      repd (aa, ba) vid1\n       (dterm_sem I (f1 fid1 vid1) (aa, ba)) \\<longrightarrow>\n      \\<omega>' \\<in> fml_sem I (P pid1))\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "assume t:\"0 \\<le> t\""], ["proof (state)\nthis:\n  0 \\<le> t\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "assume aaba:\"(aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\""], ["proof (state)\nthis:\n  (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "assume sol:\"(sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1)))) {0..t}\n        {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x \\<in> fml_sem I (p1 vid2 vid1)}\""], ["proof (state)\nthis:\n  (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n   {0..t}\n   {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n       \\<in> fml_sem I (p1 vid2 vid1)}\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "assume sol0:\" (sol 0) = (fst (ab, bb))\""], ["proof (state)\nthis:\n  sol 0 = fst (ab, bb)\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "have \"repd (aa, ba) vid1 (dterm_sem I (f1 fid1 vid1) (aa, ba)) \\<in> fml_sem I (P pid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repd (aa, ba) vid1 (dterm_sem I (f1 fid1 vid1) (aa, ba))\n    \\<in> fml_sem I (P pid1)", "using justW t aaba sol sol0"], ["proof (prove)\nusing this:\n  (\\<exists>\\<nu> sol t.\n      ((ab, bb), aa, ba) =\n      (\\<nu>, mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n      0 \\<le> t \\<and>\n      (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n       {0..t}\n       {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n           \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n      sol 0 = fst \\<nu>) \\<longrightarrow>\n  (\\<forall>\\<omega>'.\n      \\<omega>' =\n      repd (aa, ba) vid1\n       (dterm_sem I (f1 fid1 vid1) (aa, ba)) \\<longrightarrow>\n      \\<omega>' \\<in> fml_sem I (P pid1))\n  0 \\<le> t\n  (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n  (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n   {0..t}\n   {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n       \\<in> fml_sem I (p1 vid2 vid1)}\n  sol 0 = fst (ab, bb)\n\ngoal (1 subgoal):\n 1. repd (aa, ba) vid1 (dterm_sem I (f1 fid1 vid1) (aa, ba))\n    \\<in> fml_sem I (P pid1)", "by auto"], ["proof (state)\nthis:\n  repd (aa, ba) vid1 (dterm_sem I (f1 fid1 vid1) (aa, ba))\n  \\<in> fml_sem I (P pid1)\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "hence foo:\"repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1 (dterm_sem I (f1 fid1 vid1) (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))) \\<in> fml_sem I (P pid1)\""], ["proof (prove)\nusing this:\n  repd (aa, ba) vid1 (dterm_sem I (f1 fid1 vid1) (aa, ba))\n  \\<in> fml_sem I (P pid1)\n\ngoal (1 subgoal):\n 1. repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n     (dterm_sem I (f1 fid1 vid1)\n       (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\n    \\<in> fml_sem I (P pid1)", "using aaba"], ["proof (prove)\nusing this:\n  repd (aa, ba) vid1 (dterm_sem I (f1 fid1 vid1) (aa, ba))\n  \\<in> fml_sem I (P pid1)\n  (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n\ngoal (1 subgoal):\n 1. repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n     (dterm_sem I (f1 fid1 vid1)\n       (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\n    \\<in> fml_sem I (P pid1)", "by auto"], ["proof (state)\nthis:\n  repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n   (dterm_sem I (f1 fid1 vid1)\n     (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\n  \\<in> fml_sem I (P pid1)\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "hence \"repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1 (dterm_sem I (f1 fid1 vid1) (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\n             = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\""], ["proof (prove)\nusing this:\n  repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n   (dterm_sem I (f1 fid1 vid1)\n     (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\n  \\<in> fml_sem I (P pid1)\n\ngoal (1 subgoal):\n 1. repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n     (dterm_sem I (f1 fid1 vid1)\n       (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))) =\n    mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)", "using DE_lemma"], ["proof (prove)\nusing this:\n  repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n   (dterm_sem I (f1 fid1 vid1)\n     (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\n  \\<in> fml_sem I (P pid1)\n  repd (mk_v ?I (OSing vid1 (f1 fid1 vid1)) (?ab, ?bb) (?sol ?t)) vid1\n   (dterm_sem ?I (f1 fid1 vid1)\n     (mk_v ?I (OSing vid1 (f1 fid1 vid1)) (?ab, ?bb) (?sol ?t))) =\n  mk_v ?I (OSing vid1 (f1 fid1 vid1)) (?ab, ?bb) (?sol ?t)\n\ngoal (1 subgoal):\n 1. repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n     (dterm_sem I (f1 fid1 vid1)\n       (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))) =\n    mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)", "by auto"], ["proof (state)\nthis:\n  repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n   (dterm_sem I (f1 fid1 vid1)\n     (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))) =\n  mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I (f1 fid1 vid1) \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (P pid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f1 fid1 vid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (P pid1)", "thus \"mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t) \\<in> fml_sem I (P pid1)\""], ["proof (prove)\nusing this:\n  repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n   (dterm_sem I (f1 fid1 vid1)\n     (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))) =\n  mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n\ngoal (1 subgoal):\n 1. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n    \\<in> fml_sem I (P pid1)", "using foo"], ["proof (prove)\nusing this:\n  repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n   (dterm_sem I (f1 fid1 vid1)\n     (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t))) =\n  mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n  repd (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)) vid1\n   (dterm_sem I (f1 fid1 vid1)\n     (mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)))\n  \\<in> fml_sem I (P pid1)\n\ngoal (1 subgoal):\n 1. mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n    \\<in> fml_sem I (P pid1)", "by auto"], ["proof (state)\nthis:\n  mk_v I (OSing vid1 (f1 fid1 vid1)) (ab, bb) (sol t)\n  \\<in> fml_sem I (P pid1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  valid DEaxiom\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ODE_zero:\"\\<And>i. Inl i \\<notin> BVO ODE \\<Longrightarrow> Inr i \\<notin> BVO ODE \\<Longrightarrow> ODE_sem I ODE \\<nu> $ i= 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>Inl i \\<notin> BVO ODE; Inr i \\<notin> BVO ODE\\<rbrakk>\n       \\<Longrightarrow> ODE_sem I ODE \\<nu> $ i = 0", "by(induction ODE, auto)"], ["", "lemma DE_sys_valid:\n  assumes disj:\"{Inl vid1, Inr vid1} \\<inter> BVO ODE = {}\"\n  shows \"valid (([[EvolveODE (OProd  (OSing vid1 (f1 fid1 vid1)) ODE) (p1 vid2 vid1)]] (P pid1)) \\<leftrightarrow>\n ([[EvolveODE ((OProd  (OSing vid1 (f1 fid1 vid1))ODE)) (p1 vid2 vid1)]]\n    [[DiffAssign vid1 (f1 fid1 vid1)]]P pid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid\n     ([[EvolveODE (OProd (OSing vid1 (f1 fid1 vid1)) ODE)\n         (p1 vid2 vid1)]]P pid1 \\<leftrightarrow>\n      ([[EvolveODE (OProd (OSing vid1 (f1 fid1 vid1)) ODE)\n          (p1 vid2 vid1)]][[DiffAssign vid1 (f1 fid1 vid1)]]P pid1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. valid\n     ([[EvolveODE (OProd (OSing vid1 (f1 fid1 vid1)) ODE)\n         (p1 vid2 vid1)]]P pid1 \\<leftrightarrow>\n      ([[EvolveODE (OProd (OSing vid1 (f1 fid1 vid1)) ODE)\n          (p1 vid2 vid1)]][[DiffAssign vid1 (f1 fid1 vid1)]]P pid1))", "have dsafe:\"dsafe ($f fid1 (singleton (trm.Var vid1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dsafe ($f fid1 (singleton (Var vid1)))", "unfolding singleton_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dsafe ($f fid1 (singleton (Var vid1)))", "by(auto intro: dsafe.intros)"], ["proof (state)\nthis:\n  dsafe ($f fid1 (singleton (Var vid1)))\n\ngoal (1 subgoal):\n 1. valid\n     ([[EvolveODE (OProd (OSing vid1 (f1 fid1 vid1)) ODE)\n         (p1 vid2 vid1)]]P pid1 \\<leftrightarrow>\n      ([[EvolveODE (OProd (OSing vid1 (f1 fid1 vid1)) ODE)\n          (p1 vid2 vid1)]][[DiffAssign vid1 (f1 fid1 vid1)]]P pid1))", "have osafe:\"osafe(OSing vid1 (f1 fid1 vid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. osafe (OSing vid1 (f1 fid1 vid1))", "unfolding f1_def empty_def singleton_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. osafe (OSing vid1 ($f fid1 (singleton (Var vid1))))", "using dsafe osafe.intros dsafe.intros"], ["proof (prove)\nusing this:\n  dsafe ($f fid1 (singleton (Var vid1)))\n  osafe (OVar ?c)\n  dfree ?\\<theta> \\<Longrightarrow> osafe (OSing ?x ?\\<theta>)\n  \\<lbrakk>osafe ?ODE1.0; osafe ?ODE2.0;\n   ODE_dom ?ODE1.0 \\<inter> ODE_dom ?ODE2.0 = {}\\<rbrakk>\n  \\<Longrightarrow> osafe (OProd ?ODE1.0 ?ODE2.0)\n  dsafe (Var ?i)\n  dsafe (Const ?r)\n  (\\<And>i. dsafe (?args i)) \\<Longrightarrow> dsafe ($f ?i ?args)\n  \\<lbrakk>dsafe ?\\<theta>\\<^sub>1; dsafe ?\\<theta>\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> dsafe (Plus ?\\<theta>\\<^sub>1 ?\\<theta>\\<^sub>2)\n  \\<lbrakk>dsafe ?\\<theta>\\<^sub>1; dsafe ?\\<theta>\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> dsafe (Times ?\\<theta>\\<^sub>1 ?\\<theta>\\<^sub>2)\n  dfree ?\\<theta> \\<Longrightarrow> dsafe (Differential ?\\<theta>)\n  dsafe ($' ?i)\n\ngoal (1 subgoal):\n 1. osafe (OSing vid1 ($f fid1 (singleton (Var vid1))))", "by (simp add: osafe_Sing dfree_Const)"], ["proof (state)\nthis:\n  osafe (OSing vid1 (f1 fid1 vid1))\n\ngoal (1 subgoal):\n 1. valid\n     ([[EvolveODE (OProd (OSing vid1 (f1 fid1 vid1)) ODE)\n         (p1 vid2 vid1)]]P pid1 \\<leftrightarrow>\n      ([[EvolveODE (OProd (OSing vid1 (f1 fid1 vid1)) ODE)\n          (p1 vid2 vid1)]][[DiffAssign vid1 (f1 fid1 vid1)]]P pid1))", "have fsafe:\"fsafe (p1 vid2 vid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fsafe (p1 vid2 vid1)", "unfolding p1_def singleton_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fsafe ($\\<phi> vid2 (singleton (Var vid1)))", "using hpsafe_fsafe.intros(10)"], ["proof (prove)\nusing this:\n  (\\<And>i. dsafe (?args i)) \\<Longrightarrow> fsafe ($\\<phi> ?p ?args)\n\ngoal (1 subgoal):\n 1. fsafe ($\\<phi> vid2 (singleton (Var vid1)))", "using dsafe dsafe_Fun_simps image_iff"], ["proof (prove)\nusing this:\n  (\\<And>i. dsafe (?args i)) \\<Longrightarrow> fsafe ($\\<phi> ?p ?args)\n  dsafe ($f fid1 (singleton (Var vid1)))\n  dsafe ($f ?i ?args) = (\\<forall>x. dsafe (?args x))\n  (?z \\<in> ?f ` ?A) = (\\<exists>x\\<in>?A. ?z = ?f x)\n\ngoal (1 subgoal):\n 1. fsafe ($\\<phi> vid2 (singleton (Var vid1)))", "by (simp add: dfree_Const)"], ["proof (state)\nthis:\n  fsafe (p1 vid2 vid1)\n\ngoal (1 subgoal):\n 1. valid\n     ([[EvolveODE (OProd (OSing vid1 (f1 fid1 vid1)) ODE)\n         (p1 vid2 vid1)]]P pid1 \\<leftrightarrow>\n      ([[EvolveODE (OProd (OSing vid1 (f1 fid1 vid1)) ODE)\n          (p1 vid2 vid1)]][[DiffAssign vid1 (f1 fid1 vid1)]]P pid1))", "show \"valid (([[EvolveODE (OProd (OSing vid1 (f1 fid1 vid1)) ODE) (p1 vid2 vid1)]] (P pid1)) \\<leftrightarrow>\n ([[EvolveODE ((OProd (OSing vid1 (f1 fid1 vid1)) ODE)) (p1 vid2 vid1)]]\n    [[DiffAssign vid1 (f1 fid1 vid1)]]P pid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid\n     ([[EvolveODE (OProd (OSing vid1 (f1 fid1 vid1)) ODE)\n         (p1 vid2 vid1)]]P pid1 \\<leftrightarrow>\n      ([[EvolveODE (OProd (OSing vid1 (f1 fid1 vid1)) ODE)\n          (p1 vid2 vid1)]][[DiffAssign vid1 (f1 fid1 vid1)]]P pid1))", "apply(auto simp only: DEaxiom_def valid_def Let_def iff_sem impl_sem)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I a b.\n       \\<lbrakk>is_interp I;\n        (a, b)\n        \\<in> fml_sem I\n               ([[EvolveODE (OProd (OSing vid1 (f1 fid1 vid1)) ODE)\n                   (p1 vid2 vid1)]]P pid1)\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> fml_sem I\n                                ([[EvolveODE\n                                    (OProd (OSing vid1 (f1 fid1 vid1)) ODE)\n                                    (p1 vid2\nvid1)]][[DiffAssign vid1 (f1 fid1 vid1)]]P pid1)\n 2. \\<And>I a b.\n       \\<lbrakk>is_interp I;\n        (a, b)\n        \\<in> fml_sem I\n               ([[EvolveODE (OProd (OSing vid1 (f1 fid1 vid1)) ODE)\n                   (p1 vid2\n                     vid1)]][[DiffAssign vid1\n                               (f1 fid1 vid1)]]P pid1)\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> fml_sem I\n                                ([[EvolveODE\n                                    (OProd (OSing vid1 (f1 fid1 vid1)) ODE)\n                                    (p1 vid2 vid1)]]P pid1)", "apply(auto simp only: fml_sem.simps prog_sem.simps mem_Collect_eq box_sem f1_def p1_def P_def expand_singleton)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (Pc pid1);\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))\n         vid1\n         (dterm_sem I\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            (ab, bb) (sol t))\n                          vid1\n                          (dterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))\n                         \\<in> fml_sem I (Pc pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (Pc pid1);\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))\n         vid1\n         (dterm_sem I\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            (ab, bb) (sol t))\n                          vid1\n                          (dterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))\n                         \\<in> fml_sem I (Pc pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "fix I ::\"('sf,'sc,'sz) interp\"\n       and aa ba ab bb sol \n       and t::real\n       and ac bc"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (Pc pid1);\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))\n         vid1\n         (dterm_sem I\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            (ab, bb) (sol t))\n                          vid1\n                          (dterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))\n                         \\<in> fml_sem I (Pc pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "assume good:\"is_interp I\""], ["proof (state)\nthis:\n  is_interp I\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (Pc pid1);\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))\n         vid1\n         (dterm_sem I\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            (ab, bb) (sol t))\n                          vid1\n                          (dterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))\n                         \\<in> fml_sem I (Pc pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "assume bigAll:\"\n     \\<forall>\\<omega>. (\\<exists>\\<nu> sol t. ((ab, bb), \\<omega>) = (\\<nu>, mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) ODE) \\<nu> (sol t)) \\<and>\n                    0 \\<le> t \\<and>\n                    (sol solves_ode (\\<lambda>_. ODE_sem I (OProd(OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) ODE ))) {0..t}\n                     {x. Predicates I vid2\n                          (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n                                 (mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) \\<nu> x))} \\<and>\n                    sol 0 = fst \\<nu>) \\<longrightarrow>\n          \\<omega> \\<in> fml_sem I (Pc pid1)\""], ["proof (state)\nthis:\n  \\<forall>\\<omega>.\n     (\\<exists>\\<nu> sol t.\n         ((ab, bb), \\<omega>) =\n         (\\<nu>,\n          mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           \\<nu> (sol t)) \\<and>\n         0 \\<le> t \\<and>\n         (sol solves_ode\n          (\\<lambda>_.\n              ODE_sem I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)))\n          {0..t}\n          {x. Predicates I vid2\n               (\\<chi>i.\n                   dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                    (mk_v I\n                      (OProd\n                        (OSing vid1\n                          ($f fid1\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0)))\n                        ODE)\n                      \\<nu> x))} \\<and>\n         sol 0 = fst \\<nu>) \\<longrightarrow>\n     \\<omega> \\<in> fml_sem I (Pc pid1)\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (Pc pid1);\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))\n         vid1\n         (dterm_sem I\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            (ab, bb) (sol t))\n                          vid1\n                          (dterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))\n                         \\<in> fml_sem I (Pc pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "let ?my\\<omega> = \"mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab,bb) (sol t)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (Pc pid1);\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))\n         vid1\n         (dterm_sem I\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            (ab, bb) (sol t))\n                          vid1\n                          (dterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))\n                         \\<in> fml_sem I (Pc pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "assume t:\"0 \\<le> t\""], ["proof (state)\nthis:\n  0 \\<le> t\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (Pc pid1);\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))\n         vid1\n         (dterm_sem I\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            (ab, bb) (sol t))\n                          vid1\n                          (dterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))\n                         \\<in> fml_sem I (Pc pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "assume aaba:\"(aa, ba) = mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab, bb) (sol t)\""], ["proof (state)\nthis:\n  (aa, ba) =\n  mk_v I\n   (OProd\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     ODE)\n   (ab, bb) (sol t)\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (Pc pid1);\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))\n         vid1\n         (dterm_sem I\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            (ab, bb) (sol t))\n                          vid1\n                          (dterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))\n                         \\<in> fml_sem I (Pc pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "assume sol:\"(sol solves_ode (\\<lambda>_. ODE_sem I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE))) {0..t}\n      {x. Predicates I vid2\n           (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n                  (mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab, bb) x))}\""], ["proof (state)\nthis:\n  (sol solves_ode\n   (\\<lambda>_.\n       ODE_sem I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)))\n   {0..t}\n   {x. Predicates I vid2\n        (\\<chi>i.\n            dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) x))}\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (Pc pid1);\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))\n         vid1\n         (dterm_sem I\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            (ab, bb) (sol t))\n                          vid1\n                          (dterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))\n                         \\<in> fml_sem I (Pc pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "assume sol0:\"sol 0 = fst (ab, bb)\""], ["proof (state)\nthis:\n  sol 0 = fst (ab, bb)\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (Pc pid1);\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))\n         vid1\n         (dterm_sem I\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            (ab, bb) (sol t))\n                          vid1\n                          (dterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))\n                         \\<in> fml_sem I (Pc pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "assume acbc:\"(ac, bc) =\n     repd (mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab, bb) (sol t)) vid1\n      (dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))\n        (mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab, bb) (sol t)))\""], ["proof (state)\nthis:\n  (ac, bc) =\n  repd\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (ab, bb) (sol t))\n   vid1\n   (dterm_sem I\n     ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t)))\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (Pc pid1);\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))\n         vid1\n         (dterm_sem I\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            (ab, bb) (sol t))\n                          vid1\n                          (dterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))\n                         \\<in> fml_sem I (Pc pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "have bigEx:\"(\\<exists>\\<nu> sol t. ((ab, bb), ?my\\<omega>) = (\\<nu>, mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) \\<nu> (sol t)) \\<and>\n                    0 \\<le> t \\<and>\n                    (sol solves_ode (\\<lambda>_. ODE_sem I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE))) {0..t}\n                     {x. Predicates I vid2\n                          (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n                                 (mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) \\<nu> x))} \\<and>\n                    sol 0 = fst \\<nu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<nu> sola ta.\n       ((ab, bb),\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t)) =\n       (\\<nu>,\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         \\<nu> (sola ta)) \\<and>\n       0 \\<le> ta \\<and>\n       (sola solves_ode\n        (\\<lambda>_.\n            ODE_sem I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)))\n        {0..ta}\n        {x. Predicates I vid2\n             (\\<chi>i.\n                 dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (mk_v I\n                    (OProd\n                      (OSing vid1\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      ODE)\n                    \\<nu> x))} \\<and>\n       sola 0 = fst \\<nu>", "apply(rule exI[where x=\"(ab, bb)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>sola ta.\n       ((ab, bb),\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t)) =\n       ((ab, bb),\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sola ta)) \\<and>\n       0 \\<le> ta \\<and>\n       (sola solves_ode\n        (\\<lambda>_.\n            ODE_sem I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)))\n        {0..ta}\n        {x. Predicates I vid2\n             (\\<chi>i.\n                 dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (mk_v I\n                    (OProd\n                      (OSing vid1\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      ODE)\n                    (ab, bb) x))} \\<and>\n       sola 0 = fst (ab, bb)", "apply(rule exI[where x=\"sol\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ta.\n       ((ab, bb),\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t)) =\n       ((ab, bb),\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol ta)) \\<and>\n       0 \\<le> ta \\<and>\n       (sol solves_ode\n        (\\<lambda>_.\n            ODE_sem I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)))\n        {0..ta}\n        {x. Predicates I vid2\n             (\\<chi>i.\n                 dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (mk_v I\n                    (OProd\n                      (OSing vid1\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      ODE)\n                    (ab, bb) x))} \\<and>\n       sol 0 = fst (ab, bb)", "apply(rule exI[where x=\"t\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((ab, bb),\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t)) =\n    ((ab, bb),\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t)) \\<and>\n    0 \\<le> t \\<and>\n    (sol solves_ode\n     (\\<lambda>_.\n         ODE_sem I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)))\n     {0..t}\n     {x. Predicates I vid2\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 (ab, bb) x))} \\<and>\n    sol 0 = fst (ab, bb)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((ab, bb),\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t)) =\n    ((ab, bb),\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t))\n 2. 0 \\<le> t \\<and>\n    (sol solves_ode\n     (\\<lambda>_.\n         ODE_sem I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)))\n     {0..t}\n     {x. Predicates I vid2\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 (ab, bb) x))} \\<and>\n    sol 0 = fst (ab, bb)", "apply(rule refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> t \\<and>\n    (sol solves_ode\n     (\\<lambda>_.\n         ODE_sem I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)))\n     {0..t}\n     {x. Predicates I vid2\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 (ab, bb) x))} \\<and>\n    sol 0 = fst (ab, bb)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 \\<le> t\n 2. (sol solves_ode\n     (\\<lambda>_.\n         ODE_sem I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)))\n     {0..t}\n     {x. Predicates I vid2\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 (ab, bb) x))} \\<and>\n    sol 0 = fst (ab, bb)", "apply(rule t)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (sol solves_ode\n     (\\<lambda>_.\n         ODE_sem I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)))\n     {0..t}\n     {x. Predicates I vid2\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 (ab, bb) x))} \\<and>\n    sol 0 = fst (ab, bb)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (sol solves_ode\n     (\\<lambda>_.\n         ODE_sem I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)))\n     {0..t}\n     {x. Predicates I vid2\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 (ab, bb) x))}\n 2. sol 0 = fst (ab, bb)", "using sol"], ["proof (prove)\nusing this:\n  (sol solves_ode\n   (\\<lambda>_.\n       ODE_sem I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)))\n   {0..t}\n   {x. Predicates I vid2\n        (\\<chi>i.\n            dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) x))}\n\ngoal (2 subgoals):\n 1. (sol solves_ode\n     (\\<lambda>_.\n         ODE_sem I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)))\n     {0..t}\n     {x. Predicates I vid2\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 (ab, bb) x))}\n 2. sol 0 = fst (ab, bb)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. sol 0 = fst (ab, bb)", "by (rule sol0)"], ["proof (state)\nthis:\n  \\<exists>\\<nu> sola ta.\n     ((ab, bb),\n      mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t)) =\n     (\\<nu>,\n      mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       \\<nu> (sola ta)) \\<and>\n     0 \\<le> ta \\<and>\n     (sola solves_ode\n      (\\<lambda>_.\n          ODE_sem I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)))\n      {0..ta}\n      {x. Predicates I vid2\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    ODE)\n                  \\<nu> x))} \\<and>\n     sola 0 = fst \\<nu>\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (Pc pid1);\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))\n         vid1\n         (dterm_sem I\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            (ab, bb) (sol t))\n                          vid1\n                          (dterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))\n                         \\<in> fml_sem I (Pc pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "have bigRes:\"?my\\<omega> \\<in> fml_sem I (Pc pid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (ab, bb) (sol t)\n    \\<in> fml_sem I (Pc pid1)", "using bigAll bigEx"], ["proof (prove)\nusing this:\n  \\<forall>\\<omega>.\n     (\\<exists>\\<nu> sol t.\n         ((ab, bb), \\<omega>) =\n         (\\<nu>,\n          mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           \\<nu> (sol t)) \\<and>\n         0 \\<le> t \\<and>\n         (sol solves_ode\n          (\\<lambda>_.\n              ODE_sem I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)))\n          {0..t}\n          {x. Predicates I vid2\n               (\\<chi>i.\n                   dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                    (mk_v I\n                      (OProd\n                        (OSing vid1\n                          ($f fid1\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0)))\n                        ODE)\n                      \\<nu> x))} \\<and>\n         sol 0 = fst \\<nu>) \\<longrightarrow>\n     \\<omega> \\<in> fml_sem I (Pc pid1)\n  \\<exists>\\<nu> sola ta.\n     ((ab, bb),\n      mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t)) =\n     (\\<nu>,\n      mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       \\<nu> (sola ta)) \\<and>\n     0 \\<le> ta \\<and>\n     (sola solves_ode\n      (\\<lambda>_.\n          ODE_sem I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)))\n      {0..ta}\n      {x. Predicates I vid2\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    ODE)\n                  \\<nu> x))} \\<and>\n     sola 0 = fst \\<nu>\n\ngoal (1 subgoal):\n 1. mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (ab, bb) (sol t)\n    \\<in> fml_sem I (Pc pid1)", "by blast"], ["proof (state)\nthis:\n  mk_v I\n   (OProd\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     ODE)\n   (ab, bb) (sol t)\n  \\<in> fml_sem I (Pc pid1)\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (Pc pid1);\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))\n         vid1\n         (dterm_sem I\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            (ab, bb) (sol t))\n                          vid1\n                          (dterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))\n                         \\<in> fml_sem I (Pc pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "have notin1:\"Inl vid1 \\<notin> BVO ODE\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inl vid1 \\<notin> BVO ODE", "using disj"], ["proof (prove)\nusing this:\n  {Inl vid1, Inr vid1} \\<inter> BVO ODE = {}\n\ngoal (1 subgoal):\n 1. Inl vid1 \\<notin> BVO ODE", "by auto"], ["proof (state)\nthis:\n  Inl vid1 \\<notin> BVO ODE\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (Pc pid1);\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))\n         vid1\n         (dterm_sem I\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            (ab, bb) (sol t))\n                          vid1\n                          (dterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))\n                         \\<in> fml_sem I (Pc pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "have notin2:\"Inr vid1 \\<notin> BVO ODE\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inr vid1 \\<notin> BVO ODE", "using disj"], ["proof (prove)\nusing this:\n  {Inl vid1, Inr vid1} \\<inter> BVO ODE = {}\n\ngoal (1 subgoal):\n 1. Inr vid1 \\<notin> BVO ODE", "by auto"], ["proof (state)\nthis:\n  Inr vid1 \\<notin> BVO ODE\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (Pc pid1);\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))\n         vid1\n         (dterm_sem I\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            (ab, bb) (sol t))\n                          vid1\n                          (dterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))\n                         \\<in> fml_sem I (Pc pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "have ODE_sem:\"ODE_sem I ODE (sol t) $ vid1 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ODE_sem I ODE (sol t) $ vid1 = 0", "using ODE_zero notin1 notin2"], ["proof (prove)\nusing this:\n  \\<lbrakk>Inl ?i \\<notin> BVO ?ODE; Inr ?i \\<notin> BVO ?ODE\\<rbrakk>\n  \\<Longrightarrow> ODE_sem ?I ?ODE ?\\<nu> $ ?i = 0\n  Inl vid1 \\<notin> BVO ODE\n  Inr vid1 \\<notin> BVO ODE\n\ngoal (1 subgoal):\n 1. ODE_sem I ODE (sol t) $ vid1 = 0", "by blast"], ["proof (state)\nthis:\n  ODE_sem I ODE (sol t) $ vid1 = 0\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (Pc pid1);\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))\n         vid1\n         (dterm_sem I\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            (ab, bb) (sol t))\n                          vid1\n                          (dterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))\n                         \\<in> fml_sem I (Pc pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "have vec_eq:\"(\\<chi> i. sterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) (sol t)) =\n           (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n            (mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab, bb) (sol t)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        sterm_sem I (if i = vid1 then Var vid1 else Const 0) (sol t)) =\n    (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t)))", "apply(rule vec_extensionality)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<chi>i.\n           sterm_sem I (if i = vid1 then Var vid1 else Const 0) (sol t)) $\n       i =\n       (\\<chi>i.\n           dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)\n              (ab, bb) (sol t))) $\n       i", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i = vid1 \\<longrightarrow>\n       sol t $ vid1 =\n       fst (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)) $\n       vid1", "using mk_v_agree[of I \"(OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE)\" \"(ab, bb)\" \"(sol t)\"]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (ab, bb) (sol t))\n   (ab, bb)\n   (- semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)) \\<and>\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (ab, bb) (sol t))\n   (mk_xode I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (sol t))\n   (semBV I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i = vid1 \\<longrightarrow>\n       sol t $ vid1 =\n       fst (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)) $\n       vid1", "by(simp add: Vagree_def)"], ["proof (state)\nthis:\n  (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) (sol t)) =\n  (\\<chi>i.\n      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t)))\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (Pc pid1);\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))\n         vid1\n         (dterm_sem I\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            (ab, bb) (sol t))\n                          vid1\n                          (dterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))\n                         \\<in> fml_sem I (Pc pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "have sem_eq:\"(?my\\<omega> \\<in> fml_sem I (Pc pid1)) = ((repd (mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab, bb) (sol t)) vid1\n     (dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))\n       (mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab, bb) (sol t)))) \\<in> fml_sem I (Pc pid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t)\n     \\<in> fml_sem I (Pc pid1)) =\n    (repd\n      (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)\n        (ab, bb) (sol t))\n      vid1\n      (dterm_sem I\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n        (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)\n          (ab, bb) (sol t)))\n     \\<in> fml_sem I (Pc pid1))", "apply(rule coincidence_formula)"], ["proof (prove)\ngoal (3 subgoals):\n 1. fsafe (Pc pid1)\n 2. Iagree I I (SIGF (Pc pid1))\n 3. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t))\n     (repd\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t))\n       vid1\n       (dterm_sem I\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))))\n     (FVF (Pc pid1))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. fsafe (Pc pid1)", "by simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. Iagree I I (SIGF (Pc pid1))\n 2. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t))\n     (repd\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t))\n       vid1\n       (dterm_sem I\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))))\n     (FVF (Pc pid1))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. Iagree I I (SIGF (Pc pid1))", "by (rule Iagree_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t))\n     (repd\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t))\n       vid1\n       (dterm_sem I\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))))\n     (FVF (Pc pid1))", "using mk_v_agree[of \"I\" \"(OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE)\" \"(ab, bb)\" \"(sol t)\"]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (ab, bb) (sol t))\n   (ab, bb)\n   (- semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)) \\<and>\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (ab, bb) (sol t))\n   (mk_xode I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (sol t))\n   (semBV I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE))\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t))\n     (repd\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t))\n       vid1\n       (dterm_sem I\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))))\n     (FVF (Pc pid1))", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i\n       \\<in> - semBV I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  ODE) \\<longrightarrow>\n       fst (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)) $\n       i =\n       fst (ab, bb) $ i) \\<and>\n   (\\<forall>i.\n       Inr i\n       \\<in> - semBV I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  ODE) \\<longrightarrow>\n       snd (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)) $\n       i =\n       snd (ab, bb) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i\n      \\<in> semBV I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE) \\<longrightarrow>\n      fst (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      i =\n      fst (mk_xode I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (sol t)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i\n      \\<in> semBV I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE) \\<longrightarrow>\n      snd (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      i =\n      snd (mk_xode I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (sol t)) $\n      i)\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i \\<in> FVF (Pc pid1) \\<longrightarrow>\n        fst (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)\n              (ab, bb) (sol t)) $\n        i =\n        fst (repd\n              (mk_v I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  ODE)\n                (ab, bb) (sol t))\n              vid1\n              (dterm_sem I\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    ODE)\n                  (ab, bb) (sol t)))) $\n        i) \\<and>\n    (\\<forall>i.\n        Inr i \\<in> FVF (Pc pid1) \\<longrightarrow>\n        snd (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)\n              (ab, bb) (sol t)) $\n        i =\n        snd (repd\n              (mk_v I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  ODE)\n                (ab, bb) (sol t))\n              vid1\n              (dterm_sem I\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    ODE)\n                  (ab, bb) (sol t)))) $\n        i)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        i \\<noteq> vid1 \\<and>\n        Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        fst (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)\n              (ab, bb) (sol t)) $\n        i =\n        ab $ i) \\<and>\n    (\\<forall>i.\n        i \\<noteq> vid1 \\<and>\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)\n              (ab, bb) (sol t)) $\n        i =\n        bb $ i) \\<and>\n    (\\<forall>i.\n        (i = vid1 \\<longrightarrow>\n         fst (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         vid1 =\n         sol t $ vid1) \\<and>\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         i =\n         sol t $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         i =\n         sol t $ i)) \\<and>\n    (\\<forall>i.\n        (i = vid1 \\<longrightarrow>\n         snd (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         vid1 =\n         Functions I fid1\n          (\\<chi>i.\n              sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (sol t)) +\n         ODE_sem I ODE (sol t) $ vid1) \\<and>\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         i =\n         (if i = vid1\n          then sterm_sem I\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (sol t)\n          else 0) +\n         ODE_sem I ODE (sol t) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         i =\n         (if i = vid1\n          then sterm_sem I\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (sol t)\n          else 0) +\n         ODE_sem I ODE (sol t) $ i)) \\<Longrightarrow>\n    Functions I fid1\n     (\\<chi>i.\n         sterm_sem I (if i = vid1 then Var vid1 else Const 0) (sol t)) +\n    ODE_sem I ODE (sol t) $ vid1 =\n    Functions I fid1\n     (\\<chi>i.\n         dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n          (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)))", "apply(erule conjE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<and>\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I\n                      (OProd\n                        (OSing vid1\n                          ($f fid1\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0)))\n                        ODE)\n                      (ab, bb) (sol t)) $\n                i =\n                ab $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<and>\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)\n              (ab, bb) (sol t)) $\n        i =\n        bb $ i;\n     \\<forall>i.\n        (i = vid1 \\<longrightarrow>\n         fst (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         vid1 =\n         sol t $ vid1) \\<and>\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         i =\n         sol t $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         i =\n         sol t $ i);\n     \\<forall>i.\n        (i = vid1 \\<longrightarrow>\n         snd (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         vid1 =\n         Functions I fid1\n          (\\<chi>i.\n              sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (sol t)) +\n         ODE_sem I ODE (sol t) $ vid1) \\<and>\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         i =\n         (if i = vid1\n          then sterm_sem I\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (sol t)\n          else 0) +\n         ODE_sem I ODE (sol t) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         i =\n         (if i = vid1\n          then sterm_sem I\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (sol t)\n          else 0) +\n         ODE_sem I ODE (sol t) $ i)\\<rbrakk>\n    \\<Longrightarrow> Functions I fid1\n                       (\\<chi>i.\n                           sterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (sol t)) +\n                      ODE_sem I ODE (sol t) $ vid1 =\n                      Functions I fid1\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))", "apply(erule allE[where x=\"vid1\"])+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vid1 \\<noteq> vid1 \\<and>\n             Inl vid1 \\<notin> Inl ` ODE_vars I ODE \\<and>\n             Inl vid1 \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n             fst (mk_v I\n                   (OProd\n                     (OSing vid1\n                       ($f fid1\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))\n                     ODE)\n                   (ab, bb) (sol t)) $\n             vid1 =\n             ab $ vid1;\n     vid1 \\<noteq> vid1 \\<and>\n     Inr vid1 \\<notin> Inl ` ODE_vars I ODE \\<and>\n     Inr vid1 \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n     snd (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t)) $\n     vid1 =\n     bb $ vid1;\n     (vid1 = vid1 \\<longrightarrow>\n      fst (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      vid1 =\n      sol t $ vid1) \\<and>\n     (Inl vid1 \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n      fst (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      vid1 =\n      sol t $ vid1) \\<and>\n     (Inl vid1 \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n      fst (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      vid1 =\n      sol t $ vid1);\n     (vid1 = vid1 \\<longrightarrow>\n      snd (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      vid1 =\n      Functions I fid1\n       (\\<chi>i.\n           sterm_sem I (if i = vid1 then Var vid1 else Const 0) (sol t)) +\n      ODE_sem I ODE (sol t) $ vid1) \\<and>\n     (Inr vid1 \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n      snd (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      vid1 =\n      (if vid1 = vid1\n       then sterm_sem I\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (sol t)\n       else 0) +\n      ODE_sem I ODE (sol t) $ vid1) \\<and>\n     (Inr vid1 \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n      snd (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      vid1 =\n      (if vid1 = vid1\n       then sterm_sem I\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (sol t)\n       else 0) +\n      ODE_sem I ODE (sol t) $ vid1)\\<rbrakk>\n    \\<Longrightarrow> Functions I fid1\n                       (\\<chi>i.\n                           sterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (sol t)) +\n                      ODE_sem I ODE (sol t) $ vid1 =\n                      Functions I fid1\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))", "apply(simp add: ODE_sem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fst (mk_v I\n                   (OProd\n                     (OSing vid1\n                       ($f fid1\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))\n                     ODE)\n                   (ab, bb) (sol t)) $\n             vid1 =\n             sol t $ vid1 \\<and>\n             (Inl vid1 \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n              fst (mk_v I\n                    (OProd\n                      (OSing vid1\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      ODE)\n                    (ab, bb) (sol t)) $\n              vid1 =\n              sol t $ vid1) \\<and>\n             (Inl vid1 \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n              fst (mk_v I\n                    (OProd\n                      (OSing vid1\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      ODE)\n                    (ab, bb) (sol t)) $\n              vid1 =\n              sol t $ vid1);\n     snd (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t)) $\n     vid1 =\n     Functions I fid1\n      (\\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (sol t)) \\<and>\n     (Inr vid1 \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n      snd (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      vid1 =\n      Functions I fid1\n       (\\<chi>i.\n           sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (sol t))) \\<and>\n     (Inr vid1 \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n      snd (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      vid1 =\n      Functions I fid1\n       (\\<chi>i.\n           sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (sol t)))\\<rbrakk>\n    \\<Longrightarrow> Functions I fid1\n                       (\\<chi>i.\n                           sterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (sol t)) =\n                      Functions I fid1\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))", "using vec_eq"], ["proof (prove)\nusing this:\n  (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) (sol t)) =\n  (\\<chi>i.\n      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fst (mk_v I\n                   (OProd\n                     (OSing vid1\n                       ($f fid1\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))\n                     ODE)\n                   (ab, bb) (sol t)) $\n             vid1 =\n             sol t $ vid1 \\<and>\n             (Inl vid1 \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n              fst (mk_v I\n                    (OProd\n                      (OSing vid1\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      ODE)\n                    (ab, bb) (sol t)) $\n              vid1 =\n              sol t $ vid1) \\<and>\n             (Inl vid1 \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n              fst (mk_v I\n                    (OProd\n                      (OSing vid1\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      ODE)\n                    (ab, bb) (sol t)) $\n              vid1 =\n              sol t $ vid1);\n     snd (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t)) $\n     vid1 =\n     Functions I fid1\n      (\\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (sol t)) \\<and>\n     (Inr vid1 \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n      snd (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      vid1 =\n      Functions I fid1\n       (\\<chi>i.\n           sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (sol t))) \\<and>\n     (Inr vid1 \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n      snd (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      vid1 =\n      Functions I fid1\n       (\\<chi>i.\n           sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (sol t)))\\<rbrakk>\n    \\<Longrightarrow> Functions I fid1\n                       (\\<chi>i.\n                           sterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (sol t)) =\n                      Functions I fid1\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))", "by simp"], ["proof (state)\nthis:\n  (mk_v I\n    (OProd\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      ODE)\n    (ab, bb) (sol t)\n   \\<in> fml_sem I (Pc pid1)) =\n  (repd\n    (mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t))\n    vid1\n    (dterm_sem I\n      ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n      (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)\n        (ab, bb) (sol t)))\n   \\<in> fml_sem I (Pc pid1))\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba ab bb sol t ac bc.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (Pc pid1);\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb);\n        (ac, bc) =\n        repd\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))\n         vid1\n         (dterm_sem I\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)))\\<rbrakk>\n       \\<Longrightarrow> repd\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            (ab, bb) (sol t))\n                          vid1\n                          (dterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t)))\n                         \\<in> fml_sem I (Pc pid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "show  \"repd (mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab, bb) (sol t)) vid1\n      (dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))\n        (mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab, bb) (sol t)))\n     \\<in> fml_sem I (Pc pid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repd\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t))\n     vid1\n     (dterm_sem I\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t)))\n    \\<in> fml_sem I (Pc pid1)", "using bigRes sem_eq"], ["proof (prove)\nusing this:\n  mk_v I\n   (OProd\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     ODE)\n   (ab, bb) (sol t)\n  \\<in> fml_sem I (Pc pid1)\n  (mk_v I\n    (OProd\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      ODE)\n    (ab, bb) (sol t)\n   \\<in> fml_sem I (Pc pid1)) =\n  (repd\n    (mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t))\n    vid1\n    (dterm_sem I\n      ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n      (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)\n        (ab, bb) (sol t)))\n   \\<in> fml_sem I (Pc pid1))\n\ngoal (1 subgoal):\n 1. repd\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t))\n     vid1\n     (dterm_sem I\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t)))\n    \\<in> fml_sem I (Pc pid1)", "by blast"], ["proof (state)\nthis:\n  repd\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (ab, bb) (sol t))\n   vid1\n   (dterm_sem I\n     ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t)))\n  \\<in> fml_sem I (Pc pid1)\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "fix I::\"('sf,'sc,'sz)interp\" \n     and aa ba ab bb sol \n     and t::real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "assume good_interp:\"is_interp I\""], ["proof (state)\nthis:\n  is_interp I\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "assume all:\"\\<forall>\\<omega>. (\\<exists>\\<nu> sol t. ((ab, bb), \\<omega>) = (\\<nu>, mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) \\<nu> (sol t)) \\<and>\n                       0 \\<le> t \\<and>\n                       (sol solves_ode (\\<lambda>_. ODE_sem I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE))) {0..t}\n                        {x. Predicates I vid2\n                             (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n                                    (mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) \\<nu> x))} \\<and>\n                       sol 0 = fst \\<nu>) \\<longrightarrow>\n             (\\<forall>\\<omega>'. \\<omega>' = repd \\<omega> vid1 (dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) \\<omega>) \\<longrightarrow> \\<omega>' \\<in> fml_sem I (Pc pid1))\""], ["proof (state)\nthis:\n  \\<forall>\\<omega>.\n     (\\<exists>\\<nu> sol t.\n         ((ab, bb), \\<omega>) =\n         (\\<nu>,\n          mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           \\<nu> (sol t)) \\<and>\n         0 \\<le> t \\<and>\n         (sol solves_ode\n          (\\<lambda>_.\n              ODE_sem I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)))\n          {0..t}\n          {x. Predicates I vid2\n               (\\<chi>i.\n                   dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                    (mk_v I\n                      (OProd\n                        (OSing vid1\n                          ($f fid1\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0)))\n                        ODE)\n                      \\<nu> x))} \\<and>\n         sol 0 = fst \\<nu>) \\<longrightarrow>\n     (\\<forall>\\<omega>'.\n         \\<omega>' =\n         repd \\<omega> vid1\n          (dterm_sem I\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n            \\<omega>) \\<longrightarrow>\n         \\<omega>' \\<in> fml_sem I (Pc pid1))\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "let ?my\\<omega> = \"mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab, bb) (sol t)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "assume t:\"0 \\<le> t\""], ["proof (state)\nthis:\n  0 \\<le> t\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "assume aaba:\"(aa, ba) = mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab, bb) (sol t)\""], ["proof (state)\nthis:\n  (aa, ba) =\n  mk_v I\n   (OProd\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     ODE)\n   (ab, bb) (sol t)\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "assume sol:\"\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE))) {0..t}\n         {x. Predicates I vid2\n              (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n                    (mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab, bb) x))}\""], ["proof (state)\nthis:\n  (sol solves_ode\n   (\\<lambda>_.\n       ODE_sem I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)))\n   {0..t}\n   {x. Predicates I vid2\n        (\\<chi>i.\n            dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) x))}\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "assume sol0:\"sol 0 = fst (ab, bb)\""], ["proof (state)\nthis:\n  sol 0 = fst (ab, bb)\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "have bigEx:\"(\\<exists>\\<nu> sol t. ((ab, bb), ?my\\<omega>) = (\\<nu>, mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) \\<nu> (sol t)) \\<and>\n                      0 \\<le> t \\<and>\n                      (sol solves_ode (\\<lambda>_. ODE_sem I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE))) {0..t}\n                       {x. Predicates I vid2\n                            (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n                                   (mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) \\<nu> x))} \\<and>\n                      sol 0 = fst \\<nu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<nu> sola ta.\n       ((ab, bb),\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t)) =\n       (\\<nu>,\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         \\<nu> (sola ta)) \\<and>\n       0 \\<le> ta \\<and>\n       (sola solves_ode\n        (\\<lambda>_.\n            ODE_sem I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)))\n        {0..ta}\n        {x. Predicates I vid2\n             (\\<chi>i.\n                 dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (mk_v I\n                    (OProd\n                      (OSing vid1\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      ODE)\n                    \\<nu> x))} \\<and>\n       sola 0 = fst \\<nu>", "apply(rule exI[where x=\"(ab, bb)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>sola ta.\n       ((ab, bb),\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t)) =\n       ((ab, bb),\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sola ta)) \\<and>\n       0 \\<le> ta \\<and>\n       (sola solves_ode\n        (\\<lambda>_.\n            ODE_sem I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)))\n        {0..ta}\n        {x. Predicates I vid2\n             (\\<chi>i.\n                 dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (mk_v I\n                    (OProd\n                      (OSing vid1\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      ODE)\n                    (ab, bb) x))} \\<and>\n       sola 0 = fst (ab, bb)", "apply(rule exI[where x=sol])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ta.\n       ((ab, bb),\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t)) =\n       ((ab, bb),\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol ta)) \\<and>\n       0 \\<le> ta \\<and>\n       (sol solves_ode\n        (\\<lambda>_.\n            ODE_sem I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)))\n        {0..ta}\n        {x. Predicates I vid2\n             (\\<chi>i.\n                 dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (mk_v I\n                    (OProd\n                      (OSing vid1\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      ODE)\n                    (ab, bb) x))} \\<and>\n       sol 0 = fst (ab, bb)", "apply(rule exI[where x=t])"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((ab, bb),\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t)) =\n    ((ab, bb),\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t)) \\<and>\n    0 \\<le> t \\<and>\n    (sol solves_ode\n     (\\<lambda>_.\n         ODE_sem I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)))\n     {0..t}\n     {x. Predicates I vid2\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 (ab, bb) x))} \\<and>\n    sol 0 = fst (ab, bb)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((ab, bb),\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t)) =\n    ((ab, bb),\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t))\n 2. 0 \\<le> t \\<and>\n    (sol solves_ode\n     (\\<lambda>_.\n         ODE_sem I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)))\n     {0..t}\n     {x. Predicates I vid2\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 (ab, bb) x))} \\<and>\n    sol 0 = fst (ab, bb)", "apply(rule refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> t \\<and>\n    (sol solves_ode\n     (\\<lambda>_.\n         ODE_sem I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)))\n     {0..t}\n     {x. Predicates I vid2\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 (ab, bb) x))} \\<and>\n    sol 0 = fst (ab, bb)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 \\<le> t\n 2. (sol solves_ode\n     (\\<lambda>_.\n         ODE_sem I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)))\n     {0..t}\n     {x. Predicates I vid2\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 (ab, bb) x))} \\<and>\n    sol 0 = fst (ab, bb)", "apply(rule t)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (sol solves_ode\n     (\\<lambda>_.\n         ODE_sem I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)))\n     {0..t}\n     {x. Predicates I vid2\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 (ab, bb) x))} \\<and>\n    sol 0 = fst (ab, bb)", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (sol solves_ode\n     (\\<lambda>_.\n         ODE_sem I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)))\n     {0..t}\n     {x. Predicates I vid2\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 (ab, bb) x))}\n 2. sol 0 = fst (ab, bb)", "using sol sol0"], ["proof (prove)\nusing this:\n  (sol solves_ode\n   (\\<lambda>_.\n       ODE_sem I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)))\n   {0..t}\n   {x. Predicates I vid2\n        (\\<chi>i.\n            dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) x))}\n  sol 0 = fst (ab, bb)\n\ngoal (2 subgoals):\n 1. (sol solves_ode\n     (\\<lambda>_.\n         ODE_sem I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)))\n     {0..t}\n     {x. Predicates I vid2\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 (ab, bb) x))}\n 2. sol 0 = fst (ab, bb)", "by(blast)+"], ["proof (state)\nthis:\n  \\<exists>\\<nu> sola ta.\n     ((ab, bb),\n      mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t)) =\n     (\\<nu>,\n      mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       \\<nu> (sola ta)) \\<and>\n     0 \\<le> ta \\<and>\n     (sola solves_ode\n      (\\<lambda>_.\n          ODE_sem I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)))\n      {0..ta}\n      {x. Predicates I vid2\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    ODE)\n                  \\<nu> x))} \\<and>\n     sola 0 = fst \\<nu>\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "have rep_sem_eq:\"repd (mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab, bb) (sol t)) vid1\n                 (dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))\n                   (mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab, bb) (sol t)))  \\<in> fml_sem I (Pc pid1)\n         = (repd ?my\\<omega> vid1 (dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) ?my\\<omega>) \\<in> fml_sem I (Pc pid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (repd\n      (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)\n        (ab, bb) (sol t))\n      vid1\n      (dterm_sem I\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n        (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)\n          (ab, bb) (sol t)))\n     \\<in> fml_sem I (Pc pid1)) =\n    (repd\n      (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)\n        (ab, bb) (sol t))\n      vid1\n      (dterm_sem I\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n        (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)\n          (ab, bb) (sol t)))\n     \\<in> fml_sem I (Pc pid1))", "apply(rule coincidence_formula)"], ["proof (prove)\ngoal (3 subgoals):\n 1. fsafe (Pc pid1)\n 2. Iagree I I (SIGF (Pc pid1))\n 3. Vagree\n     (repd\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t))\n       vid1\n       (dterm_sem I\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))))\n     (repd\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t))\n       vid1\n       (dterm_sem I\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))))\n     (FVF (Pc pid1))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. fsafe (Pc pid1)", "by simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. Iagree I I (SIGF (Pc pid1))\n 2. Vagree\n     (repd\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t))\n       vid1\n       (dterm_sem I\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))))\n     (repd\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t))\n       vid1\n       (dterm_sem I\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))))\n     (FVF (Pc pid1))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. Iagree I I (SIGF (Pc pid1))", "by (rule Iagree_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree\n     (repd\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t))\n       vid1\n       (dterm_sem I\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))))\n     (repd\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t))\n       vid1\n       (dterm_sem I\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))))\n     (FVF (Pc pid1))", "by(simp add: Vagree_def)"], ["proof (state)\nthis:\n  (repd\n    (mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t))\n    vid1\n    (dterm_sem I\n      ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n      (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)\n        (ab, bb) (sol t)))\n   \\<in> fml_sem I (Pc pid1)) =\n  (repd\n    (mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t))\n    vid1\n    (dterm_sem I\n      ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n      (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)\n        (ab, bb) (sol t)))\n   \\<in> fml_sem I (Pc pid1))\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "have notin1:\"Inl vid1 \\<notin> BVO ODE\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inl vid1 \\<notin> BVO ODE", "using disj"], ["proof (prove)\nusing this:\n  {Inl vid1, Inr vid1} \\<inter> BVO ODE = {}\n\ngoal (1 subgoal):\n 1. Inl vid1 \\<notin> BVO ODE", "by auto"], ["proof (state)\nthis:\n  Inl vid1 \\<notin> BVO ODE\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "have notin2:\"Inr vid1 \\<notin> BVO ODE\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inr vid1 \\<notin> BVO ODE", "using disj"], ["proof (prove)\nusing this:\n  {Inl vid1, Inr vid1} \\<inter> BVO ODE = {}\n\ngoal (1 subgoal):\n 1. Inr vid1 \\<notin> BVO ODE", "by auto"], ["proof (state)\nthis:\n  Inr vid1 \\<notin> BVO ODE\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "have ODE_sem:\"ODE_sem I ODE (sol t) $ vid1 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ODE_sem I ODE (sol t) $ vid1 = 0", "using ODE_zero notin1 notin2"], ["proof (prove)\nusing this:\n  \\<lbrakk>Inl ?i \\<notin> BVO ?ODE; Inr ?i \\<notin> BVO ?ODE\\<rbrakk>\n  \\<Longrightarrow> ODE_sem ?I ?ODE ?\\<nu> $ ?i = 0\n  Inl vid1 \\<notin> BVO ODE\n  Inr vid1 \\<notin> BVO ODE\n\ngoal (1 subgoal):\n 1. ODE_sem I ODE (sol t) $ vid1 = 0", "by blast"], ["proof (state)\nthis:\n  ODE_sem I ODE (sol t) $ vid1 = 0\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "have vec_eq:\"\n      (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n             (mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab, bb) (sol t))) =\n      (\\<chi> i. sterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) (sol t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))) =\n    (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) (sol t))", "apply(rule vec_extensionality)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<chi>i.\n           dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)\n              (ab, bb) (sol t))) $\n       i =\n       (\\<chi>i.\n           sterm_sem I (if i = vid1 then Var vid1 else Const 0) (sol t)) $\n       i", "using mk_v_agree[of I \"(OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE)\" \"(ab, bb)\" \"(sol t)\"]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (ab, bb) (sol t))\n   (ab, bb)\n   (- semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)) \\<and>\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (ab, bb) (sol t))\n   (mk_xode I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (sol t))\n   (semBV I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<chi>i.\n           dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)\n              (ab, bb) (sol t))) $\n       i =\n       (\\<chi>i.\n           sterm_sem I (if i = vid1 then Var vid1 else Const 0) (sol t)) $\n       i", "by (simp add: Vagree_def)"], ["proof (state)\nthis:\n  (\\<chi>i.\n      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t))) =\n  (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) (sol t))\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "have sem_eq:\n        \"(repd ?my\\<omega> vid1 (dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) ?my\\<omega>) \\<in> fml_sem I (Pc pid1)) \n     = (mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab, bb) (sol t) \\<in> fml_sem I (Pc pid1)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (repd\n      (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)\n        (ab, bb) (sol t))\n      vid1\n      (dterm_sem I\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n        (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)\n          (ab, bb) (sol t)))\n     \\<in> fml_sem I (Pc pid1)) =\n    (mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t)\n     \\<in> fml_sem I (Pc pid1))", "apply(rule coincidence_formula)"], ["proof (prove)\ngoal (3 subgoals):\n 1. fsafe (Pc pid1)\n 2. Iagree I I (SIGF (Pc pid1))\n 3. Vagree\n     (repd\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t))\n       vid1\n       (dterm_sem I\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))))\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t))\n     (FVF (Pc pid1))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. fsafe (Pc pid1)", "by simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. Iagree I I (SIGF (Pc pid1))\n 2. Vagree\n     (repd\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t))\n       vid1\n       (dterm_sem I\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))))\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t))\n     (FVF (Pc pid1))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. Iagree I I (SIGF (Pc pid1))", "by (rule Iagree_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree\n     (repd\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t))\n       vid1\n       (dterm_sem I\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))))\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t))\n     (FVF (Pc pid1))", "using mk_v_agree[of I \"(OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE)\" \"(ab, bb)\" \"(sol t)\"]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (ab, bb) (sol t))\n   (ab, bb)\n   (- semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)) \\<and>\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (ab, bb) (sol t))\n   (mk_xode I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (sol t))\n   (semBV I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE))\n\ngoal (1 subgoal):\n 1. Vagree\n     (repd\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t))\n       vid1\n       (dterm_sem I\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t))))\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t))\n     (FVF (Pc pid1))", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i\n       \\<in> - semBV I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  ODE) \\<longrightarrow>\n       fst (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)) $\n       i =\n       fst (ab, bb) $ i) \\<and>\n   (\\<forall>i.\n       Inr i\n       \\<in> - semBV I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  ODE) \\<longrightarrow>\n       snd (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE)\n             (ab, bb) (sol t)) $\n       i =\n       snd (ab, bb) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i\n      \\<in> semBV I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE) \\<longrightarrow>\n      fst (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      i =\n      fst (mk_xode I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (sol t)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i\n      \\<in> semBV I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               ODE) \\<longrightarrow>\n      snd (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      i =\n      snd (mk_xode I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (sol t)) $\n      i)\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i \\<in> FVF (Pc pid1) \\<longrightarrow>\n        fst (repd\n              (mk_v I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  ODE)\n                (ab, bb) (sol t))\n              vid1\n              (dterm_sem I\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    ODE)\n                  (ab, bb) (sol t)))) $\n        i =\n        fst (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)\n              (ab, bb) (sol t)) $\n        i) \\<and>\n    (\\<forall>i.\n        Inr i \\<in> FVF (Pc pid1) \\<longrightarrow>\n        snd (repd\n              (mk_v I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  ODE)\n                (ab, bb) (sol t))\n              vid1\n              (dterm_sem I\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    ODE)\n                  (ab, bb) (sol t)))) $\n        i =\n        snd (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)\n              (ab, bb) (sol t)) $\n        i)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        i \\<noteq> vid1 \\<and>\n        Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        fst (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)\n              (ab, bb) (sol t)) $\n        i =\n        ab $ i) \\<and>\n    (\\<forall>i.\n        i \\<noteq> vid1 \\<and>\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)\n              (ab, bb) (sol t)) $\n        i =\n        bb $ i) \\<and>\n    (\\<forall>i.\n        (i = vid1 \\<longrightarrow>\n         fst (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         vid1 =\n         sol t $ vid1) \\<and>\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         i =\n         sol t $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         i =\n         sol t $ i)) \\<and>\n    (\\<forall>i.\n        (i = vid1 \\<longrightarrow>\n         snd (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         vid1 =\n         Functions I fid1\n          (\\<chi>i.\n              sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (sol t)) +\n         ODE_sem I ODE (sol t) $ vid1) \\<and>\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         i =\n         (if i = vid1\n          then sterm_sem I\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (sol t)\n          else 0) +\n         ODE_sem I ODE (sol t) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         i =\n         (if i = vid1\n          then sterm_sem I\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (sol t)\n          else 0) +\n         ODE_sem I ODE (sol t) $ i)) \\<Longrightarrow>\n    Functions I fid1\n     (\\<chi>i.\n         dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n          (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t))) =\n    Functions I fid1\n     (\\<chi>i.\n         sterm_sem I (if i = vid1 then Var vid1 else Const 0) (sol t)) +\n    ODE_sem I ODE (sol t) $ vid1", "apply(erule conjE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<and>\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I\n                      (OProd\n                        (OSing vid1\n                          ($f fid1\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0)))\n                        ODE)\n                      (ab, bb) (sol t)) $\n                i =\n                ab $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<and>\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)\n              (ab, bb) (sol t)) $\n        i =\n        bb $ i;\n     \\<forall>i.\n        (i = vid1 \\<longrightarrow>\n         fst (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         vid1 =\n         sol t $ vid1) \\<and>\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         i =\n         sol t $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         i =\n         sol t $ i);\n     \\<forall>i.\n        (i = vid1 \\<longrightarrow>\n         snd (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         vid1 =\n         Functions I fid1\n          (\\<chi>i.\n              sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (sol t)) +\n         ODE_sem I ODE (sol t) $ vid1) \\<and>\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         i =\n         (if i = vid1\n          then sterm_sem I\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (sol t)\n          else 0) +\n         ODE_sem I ODE (sol t) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)\n               (ab, bb) (sol t)) $\n         i =\n         (if i = vid1\n          then sterm_sem I\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (sol t)\n          else 0) +\n         ODE_sem I ODE (sol t) $ i)\\<rbrakk>\n    \\<Longrightarrow> Functions I fid1\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t))) =\n                      Functions I fid1\n                       (\\<chi>i.\n                           sterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (sol t)) +\n                      ODE_sem I ODE (sol t) $ vid1", "apply(erule allE[where x=vid1])+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vid1 \\<noteq> vid1 \\<and>\n             Inl vid1 \\<notin> Inl ` ODE_vars I ODE \\<and>\n             Inl vid1 \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n             fst (mk_v I\n                   (OProd\n                     (OSing vid1\n                       ($f fid1\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))\n                     ODE)\n                   (ab, bb) (sol t)) $\n             vid1 =\n             ab $ vid1;\n     vid1 \\<noteq> vid1 \\<and>\n     Inr vid1 \\<notin> Inl ` ODE_vars I ODE \\<and>\n     Inr vid1 \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n     snd (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t)) $\n     vid1 =\n     bb $ vid1;\n     (vid1 = vid1 \\<longrightarrow>\n      fst (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      vid1 =\n      sol t $ vid1) \\<and>\n     (Inl vid1 \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n      fst (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      vid1 =\n      sol t $ vid1) \\<and>\n     (Inl vid1 \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n      fst (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      vid1 =\n      sol t $ vid1);\n     (vid1 = vid1 \\<longrightarrow>\n      snd (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      vid1 =\n      Functions I fid1\n       (\\<chi>i.\n           sterm_sem I (if i = vid1 then Var vid1 else Const 0) (sol t)) +\n      ODE_sem I ODE (sol t) $ vid1) \\<and>\n     (Inr vid1 \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n      snd (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      vid1 =\n      (if vid1 = vid1\n       then sterm_sem I\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (sol t)\n       else 0) +\n      ODE_sem I ODE (sol t) $ vid1) \\<and>\n     (Inr vid1 \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n      snd (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t)) $\n      vid1 =\n      (if vid1 = vid1\n       then sterm_sem I\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (sol t)\n       else 0) +\n      ODE_sem I ODE (sol t) $ vid1)\\<rbrakk>\n    \\<Longrightarrow> Functions I fid1\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                ODE)\n                              (ab, bb) (sol t))) =\n                      Functions I fid1\n                       (\\<chi>i.\n                           sterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (sol t)) +\n                      ODE_sem I ODE (sol t) $ vid1", "by (simp add: ODE_sem vec_eq)"], ["proof (state)\nthis:\n  (repd\n    (mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t))\n    vid1\n    (dterm_sem I\n      ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n      (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)\n        (ab, bb) (sol t)))\n   \\<in> fml_sem I (Pc pid1)) =\n  (mk_v I\n    (OProd\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      ODE)\n    (ab, bb) (sol t)\n   \\<in> fml_sem I (Pc pid1))\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "have some_sem:\"repd (mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab, bb) (sol t)) vid1\n                (dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))\n                  (mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab, bb) (sol t))) \\<in> fml_sem I (Pc pid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repd\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t))\n     vid1\n     (dterm_sem I\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t)))\n    \\<in> fml_sem I (Pc pid1)", "using rep_sem_eq"], ["proof (prove)\nusing this:\n  (repd\n    (mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t))\n    vid1\n    (dterm_sem I\n      ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n      (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)\n        (ab, bb) (sol t)))\n   \\<in> fml_sem I (Pc pid1)) =\n  (repd\n    (mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t))\n    vid1\n    (dterm_sem I\n      ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n      (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)\n        (ab, bb) (sol t)))\n   \\<in> fml_sem I (Pc pid1))\n\ngoal (1 subgoal):\n 1. repd\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t))\n     vid1\n     (dterm_sem I\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t)))\n    \\<in> fml_sem I (Pc pid1)", "using all bigEx"], ["proof (prove)\nusing this:\n  (repd\n    (mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t))\n    vid1\n    (dterm_sem I\n      ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n      (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)\n        (ab, bb) (sol t)))\n   \\<in> fml_sem I (Pc pid1)) =\n  (repd\n    (mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t))\n    vid1\n    (dterm_sem I\n      ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n      (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)\n        (ab, bb) (sol t)))\n   \\<in> fml_sem I (Pc pid1))\n  \\<forall>\\<omega>.\n     (\\<exists>\\<nu> sol t.\n         ((ab, bb), \\<omega>) =\n         (\\<nu>,\n          mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           \\<nu> (sol t)) \\<and>\n         0 \\<le> t \\<and>\n         (sol solves_ode\n          (\\<lambda>_.\n              ODE_sem I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 ODE)))\n          {0..t}\n          {x. Predicates I vid2\n               (\\<chi>i.\n                   dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                    (mk_v I\n                      (OProd\n                        (OSing vid1\n                          ($f fid1\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0)))\n                        ODE)\n                      \\<nu> x))} \\<and>\n         sol 0 = fst \\<nu>) \\<longrightarrow>\n     (\\<forall>\\<omega>'.\n         \\<omega>' =\n         repd \\<omega> vid1\n          (dterm_sem I\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n            \\<omega>) \\<longrightarrow>\n         \\<omega>' \\<in> fml_sem I (Pc pid1))\n  \\<exists>\\<nu> sola ta.\n     ((ab, bb),\n      mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t)) =\n     (\\<nu>,\n      mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       \\<nu> (sola ta)) \\<and>\n     0 \\<le> ta \\<and>\n     (sola solves_ode\n      (\\<lambda>_.\n          ODE_sem I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)))\n      {0..ta}\n      {x. Predicates I vid2\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    ODE)\n                  \\<nu> x))} \\<and>\n     sola 0 = fst \\<nu>\n\ngoal (1 subgoal):\n 1. repd\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t))\n     vid1\n     (dterm_sem I\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t)))\n    \\<in> fml_sem I (Pc pid1)", "by blast"], ["proof (state)\nthis:\n  repd\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (ab, bb) (sol t))\n   vid1\n   (dterm_sem I\n     ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t)))\n  \\<in> fml_sem I (Pc pid1)\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "have bigImp:\"(\\<forall>\\<omega>'. \\<omega>' = repd ?my\\<omega> vid1 (dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) ?my\\<omega>) \\<longrightarrow> \\<omega>' \\<in> fml_sem I (Pc pid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<omega>'.\n       \\<omega>' =\n       repd\n        (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)\n          (ab, bb) (sol t))\n        vid1\n        (dterm_sem I\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n          (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t))) \\<longrightarrow>\n       \\<omega>' \\<in> fml_sem I (Pc pid1)", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<omega>'.\n       \\<omega>' =\n       repd\n        (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)\n          (ab, bb) (sol t))\n        vid1\n        (dterm_sem I\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n          (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t))) \\<longrightarrow>\n       \\<omega>' \\<in> fml_sem I (Pc pid1)", "apply(rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<omega>'.\n       \\<omega>' =\n       repd\n        (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)\n          (ab, bb) (sol t))\n        vid1\n        (dterm_sem I\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n          (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              ODE)\n            (ab, bb) (sol t))) \\<Longrightarrow>\n       \\<omega>' \\<in> fml_sem I (Pc pid1)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t)),\n     \\<chi>y.\n        if vid1 = y\n        then Functions I fid1\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) (sol t)))\n        else snd (mk_v I\n                   (OProd\n                     (OSing vid1\n                       ($f fid1\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))\n                     ODE)\n                   (ab, bb) (sol t)) $\n             y)\n    \\<in> Contexts I pid1 UNIV", "using some_sem"], ["proof (prove)\nusing this:\n  repd\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (ab, bb) (sol t))\n   vid1\n   (dterm_sem I\n     ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t)))\n  \\<in> fml_sem I (Pc pid1)\n\ngoal (1 subgoal):\n 1. (fst (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             ODE)\n           (ab, bb) (sol t)),\n     \\<chi>y.\n        if vid1 = y\n        then Functions I fid1\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) (sol t)))\n        else snd (mk_v I\n                   (OProd\n                     (OSing vid1\n                       ($f fid1\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))\n                     ODE)\n                   (ab, bb) (sol t)) $\n             y)\n    \\<in> Contexts I pid1 UNIV", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<omega>'.\n     \\<omega>' =\n     repd\n      (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)\n        (ab, bb) (sol t))\n      vid1\n      (dterm_sem I\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n        (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)\n          (ab, bb) (sol t))) \\<longrightarrow>\n     \\<omega>' \\<in> fml_sem I (Pc pid1)\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "have fml_sem:\"repd ?my\\<omega> vid1 (dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) ?my\\<omega>) \\<in> fml_sem I (Pc pid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repd\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t))\n     vid1\n     (dterm_sem I\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t)))\n    \\<in> fml_sem I (Pc pid1)", "using sem_eq bigImp"], ["proof (prove)\nusing this:\n  (repd\n    (mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t))\n    vid1\n    (dterm_sem I\n      ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n      (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)\n        (ab, bb) (sol t)))\n   \\<in> fml_sem I (Pc pid1)) =\n  (mk_v I\n    (OProd\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      ODE)\n    (ab, bb) (sol t)\n   \\<in> fml_sem I (Pc pid1))\n  \\<forall>\\<omega>'.\n     \\<omega>' =\n     repd\n      (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)\n        (ab, bb) (sol t))\n      vid1\n      (dterm_sem I\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n        (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            ODE)\n          (ab, bb) (sol t))) \\<longrightarrow>\n     \\<omega>' \\<in> fml_sem I (Pc pid1)\n\ngoal (1 subgoal):\n 1. repd\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t))\n     vid1\n     (dterm_sem I\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t)))\n    \\<in> fml_sem I (Pc pid1)", "by blast"], ["proof (state)\nthis:\n  repd\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (ab, bb) (sol t))\n   vid1\n   (dterm_sem I\n     ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t)))\n  \\<in> fml_sem I (Pc pid1)\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((ab, bb), \\<omega>) =\n               (\\<nu>,\n                mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   ODE)\n                 \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_.\n                    ODE_sem I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)))\n                {0..t}\n                {x. Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              ODE)\n                            \\<nu> x))} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           (\\<forall>\\<omega>'.\n               \\<omega>' =\n               repd \\<omega> vid1\n                (dterm_sem I\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  \\<omega>) \\<longrightarrow>\n               \\<omega>' \\<in> fml_sem I (Pc pid1));\n        0 \\<le> t;\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           ODE)\n         (ab, bb) (sol t);\n        (sol solves_ode\n         (\\<lambda>_.\n             ODE_sem I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                ODE)))\n         {0..t}\n         {x. Predicates I vid2\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       ODE)\n                     (ab, bb) x))};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            ODE)\n                          (ab, bb) (sol t)\n                         \\<in> fml_sem I (Pc pid1)", "show \"mk_v I (OProd  (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))ODE) (ab, bb) (sol t) \\<in> fml_sem I (Pc pid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (ab, bb) (sol t)\n    \\<in> fml_sem I (Pc pid1)", "using fml_sem sem_eq"], ["proof (prove)\nusing this:\n  repd\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (ab, bb) (sol t))\n   vid1\n   (dterm_sem I\n     ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         ODE)\n       (ab, bb) (sol t)))\n  \\<in> fml_sem I (Pc pid1)\n  (repd\n    (mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        ODE)\n      (ab, bb) (sol t))\n    vid1\n    (dterm_sem I\n      ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n      (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          ODE)\n        (ab, bb) (sol t)))\n   \\<in> fml_sem I (Pc pid1)) =\n  (mk_v I\n    (OProd\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      ODE)\n    (ab, bb) (sol t)\n   \\<in> fml_sem I (Pc pid1))\n\ngoal (1 subgoal):\n 1. mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       ODE)\n     (ab, bb) (sol t)\n    \\<in> fml_sem I (Pc pid1)", "by blast"], ["proof (state)\nthis:\n  mk_v I\n   (OProd\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     ODE)\n   (ab, bb) (sol t)\n  \\<in> fml_sem I (Pc pid1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  valid\n   ([[EvolveODE (OProd (OSing vid1 (f1 fid1 vid1)) ODE)\n       (p1 vid2 vid1)]]P pid1 \\<leftrightarrow>\n    ([[EvolveODE (OProd (OSing vid1 (f1 fid1 vid1)) ODE)\n        (p1 vid2 vid1)]][[DiffAssign vid1 (f1 fid1 vid1)]]P pid1))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma DC_valid:\"valid DCaxiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid DCaxiom", "proof (auto simp only: fml_sem.simps prog_sem.simps DCaxiom_def valid_def iff_sem impl_sem box_sem, auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV \\<and>\n             mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid3 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV\n 2. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV \\<and>\n                        mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid3 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV", "fix I::\"('sf,'sc,'sz) interp\" and aa ba bb sol t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV \\<and>\n             mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid3 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV\n 2. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV \\<and>\n                        mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid3 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV", "assume \"is_interp I\"\n    and all3:\"\\<forall>a b. (\\<exists>sola. sol 0 = sola 0 \\<and>\n                  (\\<exists>t. (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                        0 \\<le> t \\<and> (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t} {x. mk_v I (OVar vid1) (sola 0, bb) x \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV\"\n    and all2:\"\\<forall>a b. (\\<exists>sola. sol 0 = sola 0 \\<and>\n                   (\\<exists>t. (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                        0 \\<le> t \\<and> (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t} {x. mk_v I (OVar vid1) (sola 0, bb) x \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV\"\n    and t:\"0 \\<le> t\"\n    and aaba:\"(aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t)\"\n    and sol:\"(sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n       {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV \\<and> mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid3 UNIV}\""], ["proof (state)\nthis:\n  is_interp I\n  \\<forall>a b.\n     (\\<exists>sola.\n         sol 0 = sola 0 \\<and>\n         (\\<exists>t.\n             (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n             0 \\<le> t \\<and>\n             (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n              {x. mk_v I (OVar vid1) (sola 0, bb) x\n                  \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n     (a, b) \\<in> Contexts I pid3 UNIV\n  \\<forall>a b.\n     (\\<exists>sola.\n         sol 0 = sola 0 \\<and>\n         (\\<exists>t.\n             (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n             0 \\<le> t \\<and>\n             (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n              {x. mk_v I (OVar vid1) (sola 0, bb) x\n                  \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n     (a, b) \\<in> Contexts I pid2 UNIV\n  0 \\<le> t\n  (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t)\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV \\<and>\n       mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid3 UNIV}\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV \\<and>\n             mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid3 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV\n 2. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV \\<and>\n                        mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid3 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV", "from sol"], ["proof (chain)\npicking this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV \\<and>\n       mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid3 UNIV}", "have\n          sol1:\"(sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t} {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV}\""], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV \\<and>\n       mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid3 UNIV}\n\ngoal (1 subgoal):\n 1. (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n     {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV}", "by (metis (mono_tags, lifting) Collect_mono solves_ode_supset_range)"], ["proof (state)\nthis:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV}\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV \\<and>\n             mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid3 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV\n 2. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV \\<and>\n                        mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid3 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV", "from all2"], ["proof (chain)\npicking this:\n  \\<forall>a b.\n     (\\<exists>sola.\n         sol 0 = sola 0 \\<and>\n         (\\<exists>t.\n             (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n             0 \\<le> t \\<and>\n             (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n              {x. mk_v I (OVar vid1) (sola 0, bb) x\n                  \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n     (a, b) \\<in> Contexts I pid2 UNIV", "have all2':\"\\<And>v. (\\<exists>sola. sol 0 = sola 0 \\<and>\n                   (\\<exists>t. v = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                        0 \\<le> t \\<and> (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t} {x. mk_v I (OVar vid1) (sola 0, bb) x \\<in> Contexts I pid1 UNIV})) \\<Longrightarrow>\n           v \\<in> Contexts I pid2 UNIV\""], ["proof (prove)\nusing this:\n  \\<forall>a b.\n     (\\<exists>sola.\n         sol 0 = sola 0 \\<and>\n         (\\<exists>t.\n             (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n             0 \\<le> t \\<and>\n             (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n              {x. mk_v I (OVar vid1) (sola 0, bb) x\n                  \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n     (a, b) \\<in> Contexts I pid2 UNIV\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<exists>sola.\n          sol 0 = sola 0 \\<and>\n          (\\<exists>t.\n              v = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n              0 \\<le> t \\<and>\n              (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n               {x. mk_v I (OVar vid1) (sola 0, bb) x\n                   \\<in> Contexts I pid1 UNIV}) \\<Longrightarrow>\n       v \\<in> Contexts I pid2 UNIV", "by auto"], ["proof (state)\nthis:\n  \\<exists>sola.\n     sol 0 = sola 0 \\<and>\n     (\\<exists>t.\n         ?v5 = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n         0 \\<le> t \\<and>\n         (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n          {x. mk_v I (OVar vid1) (sola 0, bb) x\n              \\<in> Contexts I pid1 UNIV}) \\<Longrightarrow>\n  ?v5 \\<in> Contexts I pid2 UNIV\n\ngoal (2 subgoals):\n 1. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV \\<and>\n             mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid3 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV\n 2. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV \\<and>\n                        mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid3 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV", "show \"mk_v I (OVar vid1) (sol 0, bb) (sol t) \\<in> Contexts I pid2 UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_v I (OVar vid1) (sol 0, bb) (sol t) \\<in> Contexts I pid2 UNIV", "apply(rule all2'[of \"mk_v I (OVar vid1) (sol 0, bb) (sol t)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>sola.\n       sol 0 = sola 0 \\<and>\n       (\\<exists>ta.\n           mk_v I (OVar vid1) (sol 0, bb) (sol t) =\n           mk_v I (OVar vid1) (sola 0, bb) (sola ta) \\<and>\n           0 \\<le> ta \\<and>\n           (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n            {x. mk_v I (OVar vid1) (sola 0, bb) x\n                \\<in> Contexts I pid1 UNIV})", "apply(rule exI[where x=sol])"], ["proof (prove)\ngoal (1 subgoal):\n 1. sol 0 = sol 0 \\<and>\n    (\\<exists>ta.\n        mk_v I (OVar vid1) (sol 0, bb) (sol t) =\n        mk_v I (OVar vid1) (sol 0, bb) (sol ta) \\<and>\n        0 \\<le> ta \\<and>\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV})", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. sol 0 = sol 0\n 2. \\<exists>ta.\n       mk_v I (OVar vid1) (sol 0, bb) (sol t) =\n       mk_v I (OVar vid1) (sol 0, bb) (sol ta) \\<and>\n       0 \\<le> ta \\<and>\n       (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n        {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. sol 0 = sol 0", "by (rule refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ta.\n       mk_v I (OVar vid1) (sol 0, bb) (sol t) =\n       mk_v I (OVar vid1) (sol 0, bb) (sol ta) \\<and>\n       0 \\<le> ta \\<and>\n       (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n        {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ta.\n       mk_v I (OVar vid1) (sol 0, bb) (sol t) =\n       mk_v I (OVar vid1) (sol 0, bb) (sol ta) \\<and>\n       0 \\<le> ta \\<and>\n       (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n        {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV}", "using t sol1"], ["proof (prove)\nusing this:\n  0 \\<le> t\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV}\n\ngoal (1 subgoal):\n 1. \\<exists>ta.\n       mk_v I (OVar vid1) (sol 0, bb) (sol t) =\n       mk_v I (OVar vid1) (sol 0, bb) (sol ta) \\<and>\n       0 \\<le> ta \\<and>\n       (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n        {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV}", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  mk_v I (OVar vid1) (sol 0, bb) (sol t) \\<in> Contexts I pid2 UNIV\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV \\<and>\n                        mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid3 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV \\<and>\n                        mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid3 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV", "fix I::\"('sf,'sc,'sz) interp\" and  aa ba bb sol t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV \\<and>\n                        mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid3 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV", "assume \"is_interp I\"\n  and all3:\"\\<forall>a b. (\\<exists>sola. sol 0 = sola 0 \\<and>\n                (\\<exists>t. (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                     0 \\<le> t \\<and> (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t} {x. mk_v I (OVar vid1) (sola 0, bb) x \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n        (a, b) \\<in> Contexts I pid3 UNIV\"\n  and all2:\"\\<forall>a b. (\\<exists>sola. sol 0 = sola 0 \\<and>\n                (\\<exists>t. (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                     0 \\<le> t \\<and>\n                     (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                       {x. mk_v I (OVar vid1) (sola 0, bb) x \\<in> Contexts I pid1 UNIV \\<and>\n                          mk_v I (OVar vid1) (sola 0, bb) x \\<in> Contexts I pid3 UNIV})) \\<longrightarrow>\n        (a, b) \\<in> Contexts I pid2 UNIV\"\n  and t:\"0 \\<le> t\"\n  and aaba:\"(aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t)\"\n  and sol:\"(sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t} {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV}\""], ["proof (state)\nthis:\n  is_interp I\n  \\<forall>a b.\n     (\\<exists>sola.\n         sol 0 = sola 0 \\<and>\n         (\\<exists>t.\n             (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n             0 \\<le> t \\<and>\n             (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n              {x. mk_v I (OVar vid1) (sola 0, bb) x\n                  \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n     (a, b) \\<in> Contexts I pid3 UNIV\n  \\<forall>a b.\n     (\\<exists>sola.\n         sol 0 = sola 0 \\<and>\n         (\\<exists>t.\n             (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n             0 \\<le> t \\<and>\n             (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n              {x. mk_v I (OVar vid1) (sola 0, bb) x\n                  \\<in> Contexts I pid1 UNIV \\<and>\n                  mk_v I (OVar vid1) (sola 0, bb) x\n                  \\<in> Contexts I pid3 UNIV})) \\<longrightarrow>\n     (a, b) \\<in> Contexts I pid2 UNIV\n  0 \\<le> t\n  (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t)\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV}\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV \\<and>\n                        mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid3 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV", "from all2"], ["proof (chain)\npicking this:\n  \\<forall>a b.\n     (\\<exists>sola.\n         sol 0 = sola 0 \\<and>\n         (\\<exists>t.\n             (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n             0 \\<le> t \\<and>\n             (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n              {x. mk_v I (OVar vid1) (sola 0, bb) x\n                  \\<in> Contexts I pid1 UNIV \\<and>\n                  mk_v I (OVar vid1) (sola 0, bb) x\n                  \\<in> Contexts I pid3 UNIV})) \\<longrightarrow>\n     (a, b) \\<in> Contexts I pid2 UNIV", "have all2':\"\\<And>v. (\\<exists>sola. sol 0 = sola 0 \\<and>\n                (\\<exists>t. v = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                     0 \\<le> t \\<and>\n                     (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                      {x. mk_v I (OVar vid1) (sola 0, bb) x \\<in> Contexts I pid1 UNIV \\<and>\n                          mk_v I (OVar vid1) (sola 0, bb) x \\<in> Contexts I pid3 UNIV})) \\<Longrightarrow>\n        v \\<in> Contexts I pid2 UNIV\""], ["proof (prove)\nusing this:\n  \\<forall>a b.\n     (\\<exists>sola.\n         sol 0 = sola 0 \\<and>\n         (\\<exists>t.\n             (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n             0 \\<le> t \\<and>\n             (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n              {x. mk_v I (OVar vid1) (sola 0, bb) x\n                  \\<in> Contexts I pid1 UNIV \\<and>\n                  mk_v I (OVar vid1) (sola 0, bb) x\n                  \\<in> Contexts I pid3 UNIV})) \\<longrightarrow>\n     (a, b) \\<in> Contexts I pid2 UNIV\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<exists>sola.\n          sol 0 = sola 0 \\<and>\n          (\\<exists>t.\n              v = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n              0 \\<le> t \\<and>\n              (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n               {x. mk_v I (OVar vid1) (sola 0, bb) x\n                   \\<in> Contexts I pid1 UNIV \\<and>\n                   mk_v I (OVar vid1) (sola 0, bb) x\n                   \\<in> Contexts I pid3 UNIV}) \\<Longrightarrow>\n       v \\<in> Contexts I pid2 UNIV", "by auto"], ["proof (state)\nthis:\n  \\<exists>sola.\n     sol 0 = sola 0 \\<and>\n     (\\<exists>t.\n         ?v5 = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n         0 \\<le> t \\<and>\n         (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n          {x. mk_v I (OVar vid1) (sola 0, bb) x\n              \\<in> Contexts I pid1 UNIV \\<and>\n              mk_v I (OVar vid1) (sola 0, bb) x\n              \\<in> Contexts I pid3 UNIV}) \\<Longrightarrow>\n  ?v5 \\<in> Contexts I pid2 UNIV\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV \\<and>\n                        mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid3 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV", "from all3"], ["proof (chain)\npicking this:\n  \\<forall>a b.\n     (\\<exists>sola.\n         sol 0 = sola 0 \\<and>\n         (\\<exists>t.\n             (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n             0 \\<le> t \\<and>\n             (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n              {x. mk_v I (OVar vid1) (sola 0, bb) x\n                  \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n     (a, b) \\<in> Contexts I pid3 UNIV", "have all3':\"\\<And>v. (\\<exists>sola. sol 0 = sola 0 \\<and>\n                (\\<exists>t. v = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                     0 \\<le> t \\<and> (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t} {x. mk_v I (OVar vid1) (sola 0, bb) x \\<in> Contexts I pid1 UNIV})) \\<Longrightarrow>\n        v \\<in> Contexts I pid3 UNIV\""], ["proof (prove)\nusing this:\n  \\<forall>a b.\n     (\\<exists>sola.\n         sol 0 = sola 0 \\<and>\n         (\\<exists>t.\n             (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n             0 \\<le> t \\<and>\n             (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n              {x. mk_v I (OVar vid1) (sola 0, bb) x\n                  \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n     (a, b) \\<in> Contexts I pid3 UNIV\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<exists>sola.\n          sol 0 = sola 0 \\<and>\n          (\\<exists>t.\n              v = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n              0 \\<le> t \\<and>\n              (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n               {x. mk_v I (OVar vid1) (sola 0, bb) x\n                   \\<in> Contexts I pid1 UNIV}) \\<Longrightarrow>\n       v \\<in> Contexts I pid3 UNIV", "by auto"], ["proof (state)\nthis:\n  \\<exists>sola.\n     sol 0 = sola 0 \\<and>\n     (\\<exists>t.\n         ?v5 = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n         0 \\<le> t \\<and>\n         (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n          {x. mk_v I (OVar vid1) (sola 0, bb) x\n              \\<in> Contexts I pid1 UNIV}) \\<Longrightarrow>\n  ?v5 \\<in> Contexts I pid3 UNIV\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV \\<and>\n                        mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid3 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV", "have inp1:\"\\<And>s. 0 \\<le> s \\<Longrightarrow> s \\<le> t \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol s) \\<in> Contexts I pid1 UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol s)\n                         \\<in> Contexts I pid1 UNIV", "using sol solves_odeD atLeastAtMost_iff"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV}\n  (?y solves_ode ?f) ?T ?X \\<Longrightarrow>\n  (?y has_vderiv_on (\\<lambda>t. ?f t (?y t))) ?T\n  \\<lbrakk>(?y solves_ode ?f) ?T ?X; ?t \\<in> ?T\\<rbrakk>\n  \\<Longrightarrow> ?y ?t \\<in> ?X\n  (?i \\<in> {?l..?u}) = (?l \\<le> ?i \\<and> ?i \\<le> ?u)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol s)\n                         \\<in> Contexts I pid1 UNIV", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> ?s5; ?s5 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol ?s5)\n                    \\<in> Contexts I pid1 UNIV\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV \\<and>\n                        mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid3 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV", "have inp3:\"\\<And>s. 0 \\<le> s \\<Longrightarrow> s \\<le> t \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol s) \\<in> Contexts I pid3 UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol s)\n                         \\<in> Contexts I pid3 UNIV", "apply(rule all3')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sola.\n                            sol 0 = sola 0 \\<and>\n                            (\\<exists>t.\n                                mk_v I (OVar vid1) (sol 0, bb) (sol s) =\n                                mk_v I (OVar vid1) (sola 0, bb)\n                                 (sola t) \\<and>\n                                0 \\<le> t \\<and>\n                                (sola solves_ode (\\<lambda>a. ODEs I vid1))\n                                 {0..t}\n                                 {x. mk_v I (OVar vid1) (sola 0, bb) x\n                                     \\<in> Contexts I pid1 UNIV})", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>sola.\n                         sol 0 = sola 0 \\<and>\n                         (\\<exists>t.\n                             mk_v I (OVar vid1) (sol 0, bb) (sol s) =\n                             mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                             0 \\<le> t \\<and>\n                             (sola solves_ode (\\<lambda>a. ODEs I vid1))\n                              {0..t}\n                              {x. mk_v I (OVar vid1) (sola 0, bb) x\n                                  \\<in> Contexts I pid1 UNIV})", "apply(rule exI [where x=sol])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> sol 0 = sol 0 \\<and>\n                      (\\<exists>t.\n                          mk_v I (OVar vid1) (sol 0, bb) (sol s) =\n                          mk_v I (OVar vid1) (sol 0, bb) (sol t) \\<and>\n                          0 \\<le> t \\<and>\n                          (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                           {x. mk_v I (OVar vid1) (sol 0, bb) x\n                               \\<in> Contexts I pid1 UNIV})", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk> \\<Longrightarrow> sol 0 = sol 0\n 2. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         mk_v I (OVar vid1) (sol 0, bb) (sol s) =\n                         mk_v I (OVar vid1) (sol 0, bb) (sol t) \\<and>\n                         0 \\<le> t \\<and>\n                         (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                          {x. mk_v I (OVar vid1) (sol 0, bb) x\n                              \\<in> Contexts I pid1 UNIV}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk> \\<Longrightarrow> sol 0 = sol 0", "by (rule refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>t.\n                         mk_v I (OVar vid1) (sol 0, bb) (sol s) =\n                         mk_v I (OVar vid1) (sol 0, bb) (sol t) \\<and>\n                         0 \\<le> t \\<and>\n                         (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                          {x. mk_v I (OVar vid1) (sol 0, bb) x\n                              \\<in> Contexts I pid1 UNIV}", "apply(rule exI [where x=s])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol s) =\n                      mk_v I (OVar vid1) (sol 0, bb) (sol s) \\<and>\n                      0 \\<le> s \\<and>\n                      (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n                       {x. mk_v I (OVar vid1) (sol 0, bb) x\n                           \\<in> Contexts I pid1 UNIV}", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol s) =\n                      mk_v I (OVar vid1) (sol 0, bb) (sol s)\n 2. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> 0 \\<le> s \\<and>\n                      (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n                       {x. mk_v I (OVar vid1) (sol 0, bb) x\n                           \\<in> Contexts I pid1 UNIV}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol s) =\n                      mk_v I (OVar vid1) (sol 0, bb) (sol s)", "by (rule refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> 0 \\<le> s \\<and>\n                      (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n                       {x. mk_v I (OVar vid1) (sol 0, bb) x\n                           \\<in> Contexts I pid1 UNIV}", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk> \\<Longrightarrow> 0 \\<le> s\n 2. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n                       {x. mk_v I (OVar vid1) (sol 0, bb) x\n                           \\<in> Contexts I pid1 UNIV}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk> \\<Longrightarrow> 0 \\<le> s", "by assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n                       {x. mk_v I (OVar vid1) (sol 0, bb) x\n                           \\<in> Contexts I pid1 UNIV}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n                       {x. mk_v I (OVar vid1) (sol 0, bb) x\n                           \\<in> Contexts I pid1 UNIV}", "using sol"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n                       {x. mk_v I (OVar vid1) (sol 0, bb) x\n                           \\<in> Contexts I pid1 UNIV}", "by (meson atLeastatMost_subset_iff order_refl solves_ode_subset)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> ?s5; ?s5 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol ?s5)\n                    \\<in> Contexts I pid3 UNIV\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV \\<and>\n                        mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid3 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV", "have inp13:\"\\<And>s. 0 \\<le> s \\<Longrightarrow> s \\<le> t \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol s) \\<in> Contexts I pid1 UNIV \\<and> mk_v I (OVar vid1) (sol 0, bb) (sol s) \\<in> Contexts I pid3 UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol s)\n                         \\<in> Contexts I pid1 UNIV \\<and>\n                         mk_v I (OVar vid1) (sol 0, bb) (sol s)\n                         \\<in> Contexts I pid3 UNIV", "using inp1 inp3"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 \\<le> ?s5; ?s5 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol ?s5)\n                    \\<in> Contexts I pid1 UNIV\n  \\<lbrakk>0 \\<le> ?s5; ?s5 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol ?s5)\n                    \\<in> Contexts I pid3 UNIV\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol s)\n                         \\<in> Contexts I pid1 UNIV \\<and>\n                         mk_v I (OVar vid1) (sol 0, bb) (sol s)\n                         \\<in> Contexts I pid3 UNIV", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> ?s5; ?s5 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol ?s5)\n                    \\<in> Contexts I pid1 UNIV \\<and>\n                    mk_v I (OVar vid1) (sol 0, bb) (sol ?s5)\n                    \\<in> Contexts I pid3 UNIV\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV \\<and>\n                        mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid3 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV", "have sol13:\"(sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n     {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV \\<and> mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid3 UNIV}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n     {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV \\<and>\n         mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid3 UNIV}", "apply(rule solves_odeI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (sol has_vderiv_on (\\<lambda>t. ODEs I vid1 (sol t))) {0..t}\n 2. \\<And>ta.\n       ta \\<in> {0..t} \\<Longrightarrow>\n       sol ta\n       \\<in> {x. mk_v I (OVar vid1) (sol 0, bb) x\n                 \\<in> Contexts I pid1 UNIV \\<and>\n                 mk_v I (OVar vid1) (sol 0, bb) x\n                 \\<in> Contexts I pid3 UNIV}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (sol has_vderiv_on (\\<lambda>t. ODEs I vid1 (sol t))) {0..t}", "using sol"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV}\n\ngoal (1 subgoal):\n 1. (sol has_vderiv_on (\\<lambda>t. ODEs I vid1 (sol t))) {0..t}", "by (rule solves_odeD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ta.\n       ta \\<in> {0..t} \\<Longrightarrow>\n       sol ta\n       \\<in> {x. mk_v I (OVar vid1) (sol 0, bb) x\n                 \\<in> Contexts I pid1 UNIV \\<and>\n                 mk_v I (OVar vid1) (sol 0, bb) x\n                 \\<in> Contexts I pid3 UNIV}", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    sol s\n    \\<in> {x. mk_v I (OVar vid1) (sol 0, bb) x\n              \\<in> Contexts I pid1 UNIV \\<and>\n              mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid3 UNIV}", "using inp13[of s]"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n  \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol s)\n                    \\<in> Contexts I pid1 UNIV \\<and>\n                    mk_v I (OVar vid1) (sol 0, bb) (sol s)\n                    \\<in> Contexts I pid3 UNIV\n\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    sol s\n    \\<in> {x. mk_v I (OVar vid1) (sol 0, bb) x\n              \\<in> Contexts I pid1 UNIV \\<and>\n              mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid3 UNIV}", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV \\<and>\n       mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid3 UNIV}\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid3 UNIV;\n        \\<forall>a b.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, b) = mk_v I (OVar vid1) (sola 0, bb) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid1 UNIV \\<and>\n                        mk_v I (OVar vid1) (sola 0, bb) x\n                        \\<in> Contexts I pid3 UNIV})) \\<longrightarrow>\n           (a, b) \\<in> Contexts I pid2 UNIV;\n        0 \\<le> t; (aa, ba) = mk_v I (OVar vid1) (sol 0, bb) (sol t);\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. mk_v I (OVar vid1) (sol 0, bb) x\n             \\<in> Contexts I pid1 UNIV}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OVar vid1) (sol 0, bb) (sol t)\n                         \\<in> Contexts I pid2 UNIV", "show \"mk_v I (OVar vid1) (sol 0, bb) (sol t) \\<in> Contexts I pid2 UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_v I (OVar vid1) (sol 0, bb) (sol t) \\<in> Contexts I pid2 UNIV", "using t sol13 all2'[of \"mk_v I (OVar vid1) (sol 0, bb) (sol t)\"]"], ["proof (prove)\nusing this:\n  0 \\<le> t\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid1 UNIV \\<and>\n       mk_v I (OVar vid1) (sol 0, bb) x \\<in> Contexts I pid3 UNIV}\n  \\<exists>sola.\n     sol 0 = sola 0 \\<and>\n     (\\<exists>ta.\n         mk_v I (OVar vid1) (sol 0, bb) (sol t) =\n         mk_v I (OVar vid1) (sola 0, bb) (sola ta) \\<and>\n         0 \\<le> ta \\<and>\n         (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n          {x. mk_v I (OVar vid1) (sola 0, bb) x\n              \\<in> Contexts I pid1 UNIV \\<and>\n              mk_v I (OVar vid1) (sola 0, bb) x\n              \\<in> Contexts I pid3 UNIV}) \\<Longrightarrow>\n  mk_v I (OVar vid1) (sol 0, bb) (sol t) \\<in> Contexts I pid2 UNIV\n\ngoal (1 subgoal):\n 1. mk_v I (OVar vid1) (sol 0, bb) (sol t) \\<in> Contexts I pid2 UNIV", "by auto"], ["proof (state)\nthis:\n  mk_v I (OVar vid1) (sol 0, bb) (sol t) \\<in> Contexts I pid2 UNIV\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma DS_valid:\"valid DSaxiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid DSaxiom", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. valid DSaxiom", "have dsafe:\"dsafe($f fid1 (\\<lambda>i. Const 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dsafe ($f fid1 (\\<lambda>i. Const 0))", "using dsafe_Const"], ["proof (prove)\nusing this:\n  dsafe (Const ?r)\n\ngoal (1 subgoal):\n 1. dsafe ($f fid1 (\\<lambda>i. Const 0))", "by auto"], ["proof (state)\nthis:\n  dsafe ($f fid1 (\\<lambda>i. Const 0))\n\ngoal (1 subgoal):\n 1. valid DSaxiom", "have osafe:\"osafe(OSing vid1 (f0 fid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. osafe (OSing vid1 (f0 fid1))", "unfolding f0_def empty_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. osafe (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))", "using dsafe osafe.intros"], ["proof (prove)\nusing this:\n  dsafe ($f fid1 (\\<lambda>i. Const 0))\n  osafe (OVar ?c)\n  dfree ?\\<theta> \\<Longrightarrow> osafe (OSing ?x ?\\<theta>)\n  \\<lbrakk>osafe ?ODE1.0; osafe ?ODE2.0;\n   ODE_dom ?ODE1.0 \\<inter> ODE_dom ?ODE2.0 = {}\\<rbrakk>\n  \\<Longrightarrow> osafe (OProd ?ODE1.0 ?ODE2.0)\n\ngoal (1 subgoal):\n 1. osafe (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))", "by (simp add: osafe_Sing dfree_Const)"], ["proof (state)\nthis:\n  osafe (OSing vid1 (f0 fid1))\n\ngoal (1 subgoal):\n 1. valid DSaxiom", "have fsafe:\"fsafe(p1 vid2 vid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fsafe (p1 vid2 vid1)", "unfolding p1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fsafe ($\\<phi> vid2 (singleton (Var vid1)))", "apply(rule fsafe_Prop)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. dsafe (singleton (Var vid1) i)", "using singleton.simps dsafe_Const"], ["proof (prove)\nusing this:\n  singleton ?t ?i = (if ?i = vid1 then ?t else Const 0)\n  dsafe (Const ?r)\n\ngoal (1 subgoal):\n 1. \\<And>i. dsafe (singleton (Var vid1) i)", "by (auto intro: dfree.intros)"], ["proof (state)\nthis:\n  fsafe (p1 vid2 vid1)\n\ngoal (1 subgoal):\n 1. valid DSaxiom", "show \"valid DSaxiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid DSaxiom", "apply(auto simp only: DSaxiom_def valid_def Let_def iff_sem impl_sem box_sem)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I a b.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           ((a, b), \\<omega>)\n           \\<in> prog_sem I\n                  (EvolveODE (OSing vid1 (f0 fid1))\n                    (p1 vid2 vid1)) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1)\\<rbrakk>\n       \\<Longrightarrow> (a, b)\n                         \\<in> fml_sem I\n                                (Forall vid2\n                                  (Geq (Var vid2) (Const 0) \\<rightarrow>\n                                   Forall vid3\n                                    ((Geq (Var vid3) (Const 0) &&\nGeq (Var vid2) (Var vid3)) \\<rightarrow>\n                                     $\\<phi> vid2\n(singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3))))) \\<rightarrow>\n                                   [[vid1 :=\n                                     Plus (Var vid1)\n(Times (f0 fid1) (Var vid2))]]p1 vid3 vid1))\n 2. \\<And>I a b aa ba.\n       \\<lbrakk>is_interp I;\n        (a, b)\n        \\<in> fml_sem I\n               (Forall vid2\n                 (Geq (Var vid2) (Const 0) \\<rightarrow>\n                  Forall vid3\n                   ((Geq (Var vid3) (Const 0) &&\n                     Geq (Var vid2) (Var vid3)) \\<rightarrow>\n                    $\\<phi> vid2\n                     (singleton\n                       (Plus (Var vid1)\n                         (Times (f0 fid1) (Var vid3))))) \\<rightarrow>\n                  [[vid1 :=\n                    Plus (Var vid1)\n                     (Times (f0 fid1) (Var vid2))]]p1 vid3 vid1));\n        ((a, b), aa, ba)\n        \\<in> prog_sem I\n               (EvolveODE (OSing vid1 (f0 fid1)) (p1 vid2 vid1))\\<rbrakk>\n       \\<Longrightarrow> (aa, ba) \\<in> fml_sem I (p1 vid3 vid1)", "apply(auto simp only: fml_sem.simps prog_sem.simps mem_Collect_eq  iff_sem impl_sem box_sem forall_sem)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "fix I::\"('sf,'sc,'sz) interp\" \n      and a b r aa ba"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "assume good_interp:\"is_interp I\""], ["proof (state)\nthis:\n  is_interp I\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "assume allW:\"\\<forall>\\<omega>. (\\<exists>\\<nu> sol t.\n             ((a, b), \\<omega>) = (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n             0 \\<le> t \\<and>\n             (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..t}\n              {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n              (sol 0) = (fst \\<nu>)) \\<longrightarrow>\n         \\<omega> \\<in> fml_sem I (p1 vid3 vid1)\""], ["proof (state)\nthis:\n  \\<forall>\\<omega>.\n     (\\<exists>\\<nu> sol t.\n         ((a, b), \\<omega>) =\n         (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n         0 \\<le> t \\<and>\n         (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n          {0..t}\n          {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n              \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n         sol 0 = fst \\<nu>) \\<longrightarrow>\n     \\<omega> \\<in> fml_sem I (p1 vid3 vid1)\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "assume \"dterm_sem I (Const 0) (repv (a, b) vid2 r) \\<le> dterm_sem I (trm.Var vid2) (repv (a, b) vid2 r)\""], ["proof (state)\nthis:\n  dterm_sem I (Const 0) (repv (a, b) vid2 r)\n  \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r)\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "hence leq:\"0 \\<le> r\""], ["proof (prove)\nusing this:\n  dterm_sem I (Const 0) (repv (a, b) vid2 r)\n  \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r)\n\ngoal (1 subgoal):\n 1. 0 \\<le> r", "by (auto)"], ["proof (state)\nthis:\n  0 \\<le> r\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "assume \"\\<forall>ra. repv (repv (a, b) vid2 r) vid3 ra\n         \\<in> {v. dterm_sem I (Const 0) v \\<le> dterm_sem I (trm.Var vid3) v} \\<inter>\n            {v. dterm_sem I (trm.Var vid3) v \\<le> dterm_sem I (trm.Var vid2) v} \\<longrightarrow>\n         Predicates I vid2\n          (\\<chi> i. dterm_sem I (singleton (Plus (trm.Var vid1) (Times (f0 fid1) (trm.Var vid3))) i)\n                 (repv (repv (a, b) vid2 r) vid3 ra))\""], ["proof (state)\nthis:\n  \\<forall>ra.\n     repv (repv (a, b) vid2 r) vid3 ra\n     \\<in> {v. dterm_sem I (Const 0) v\n               \\<le> dterm_sem I (Var vid3) v} \\<inter>\n           {v. dterm_sem I (Var vid3) v\n               \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I\n           (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n           (repv (repv (a, b) vid2 r) vid3 ra))\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "hence constraint:\"\\<forall>ra. (0 \\<le> ra \\<and> ra \\<le> r) \\<longrightarrow> \n         (repv (repv (a, b) vid2 r) vid3 ra) \n       \\<in> fml_sem I (Prop vid2 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))))\""], ["proof (prove)\nusing this:\n  \\<forall>ra.\n     repv (repv (a, b) vid2 r) vid3 ra\n     \\<in> {v. dterm_sem I (Const 0) v\n               \\<le> dterm_sem I (Var vid3) v} \\<inter>\n           {v. dterm_sem I (Var vid3) v\n               \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I\n           (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n           (repv (repv (a, b) vid2 r) vid3 ra))\n\ngoal (1 subgoal):\n 1. \\<forall>ra.\n       0 \\<le> ra \\<and> ra \\<le> r \\<longrightarrow>\n       repv (repv (a, b) vid2 r) vid3 ra\n       \\<in> fml_sem I\n              ($\\<phi> vid2\n                (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))))", "using leq"], ["proof (prove)\nusing this:\n  \\<forall>ra.\n     repv (repv (a, b) vid2 r) vid3 ra\n     \\<in> {v. dterm_sem I (Const 0) v\n               \\<le> dterm_sem I (Var vid3) v} \\<inter>\n           {v. dterm_sem I (Var vid3) v\n               \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I\n           (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n           (repv (repv (a, b) vid2 r) vid3 ra))\n  0 \\<le> r\n\ngoal (1 subgoal):\n 1. \\<forall>ra.\n       0 \\<le> ra \\<and> ra \\<le> r \\<longrightarrow>\n       repv (repv (a, b) vid2 r) vid3 ra\n       \\<in> fml_sem I\n              ($\\<phi> vid2\n                (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))))", "by auto"], ["proof (state)\nthis:\n  \\<forall>ra.\n     0 \\<le> ra \\<and> ra \\<le> r \\<longrightarrow>\n     repv (repv (a, b) vid2 r) vid3 ra\n     \\<in> fml_sem I\n            ($\\<phi> vid2\n              (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))))\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "assume aaba:\" (aa, ba) =\n     repv (repv (a, b) vid2 r) vid1\n      (dterm_sem I (Plus (trm.Var vid1) (Times (f0 fid1) (trm.Var vid2))) (repv (a, b) vid2 r))\""], ["proof (state)\nthis:\n  (aa, ba) =\n  repv (repv (a, b) vid2 r) vid1\n   (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n     (repv (a, b) vid2 r))\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "let ?abba = \"repv (repd (a, b) vid1 (Functions I fid1 (\\<chi> i. 0))) vid1\n      (dterm_sem I (Plus (trm.Var vid1) (Times (f0 fid1) (trm.Var vid2))) (repv (a, b) vid2 r))\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "from allW"], ["proof (chain)\npicking this:\n  \\<forall>\\<omega>.\n     (\\<exists>\\<nu> sol t.\n         ((a, b), \\<omega>) =\n         (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n         0 \\<le> t \\<and>\n         (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n          {0..t}\n          {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n              \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n         sol 0 = fst \\<nu>) \\<longrightarrow>\n     \\<omega> \\<in> fml_sem I (p1 vid3 vid1)", "have thisW:\"(\\<exists>\\<nu> sol t.\n            ((a, b), ?abba) = (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..t}\n             {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n             (sol 0) = (fst \\<nu>)) \\<longrightarrow>\n        ?abba \\<in> fml_sem I (p1 vid3 vid1)\""], ["proof (prove)\nusing this:\n  \\<forall>\\<omega>.\n     (\\<exists>\\<nu> sol t.\n         ((a, b), \\<omega>) =\n         (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n         0 \\<le> t \\<and>\n         (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n          {0..t}\n          {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n              \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n         sol 0 = fst \\<nu>) \\<longrightarrow>\n     \\<omega> \\<in> fml_sem I (p1 vid3 vid1)\n\ngoal (1 subgoal):\n 1. (\\<exists>\\<nu> sol t.\n        ((a, b),\n         repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n          (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n            (repv (a, b) vid2 r))) =\n        (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n        0 \\<le> t \\<and>\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n             \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n        sol 0 = fst \\<nu>) \\<longrightarrow>\n    repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n     (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n       (repv (a, b) vid2 r))\n    \\<in> fml_sem I (p1 vid3 vid1)", "by blast"], ["proof (state)\nthis:\n  (\\<exists>\\<nu> sol t.\n      ((a, b),\n       repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n        (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n          (repv (a, b) vid2 r))) =\n      (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n      0 \\<le> t \\<and>\n      (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..t}\n       {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n           \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n      sol 0 = fst \\<nu>) \\<longrightarrow>\n  repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n   (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n     (repv (a, b) vid2 r))\n  \\<in> fml_sem I (p1 vid3 vid1)\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "let ?c = \"Functions I fid1 (\\<chi> _. 0)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "let ?sol = \"(\\<lambda>t. \\<chi> i. if i = vid1 then (a $ i) + ?c * t else (a $ i))\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have agrees:\"Vagree (mk_v I (OSing vid1 (f0 fid1)) (a, b) (?sol r)) (a, b) (- semBV I (OSing vid1 (f0 fid1))) \n  \\<and> Vagree (mk_v I (OSing vid1 (f0 fid1)) (a, b) (?sol r))\n   (mk_xode I (OSing vid1 (f0 fid1)) (?sol r)) (semBV I (OSing vid1 (f0 fid1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n       (\\<chi>i.\n           if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n           else a $ i))\n     (a, b) (- semBV I (OSing vid1 (f0 fid1))) \\<and>\n    Vagree\n     (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n       (\\<chi>i.\n           if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n           else a $ i))\n     (mk_xode I (OSing vid1 (f0 fid1))\n       (\\<chi>i.\n           if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n           else a $ i))\n     (semBV I (OSing vid1 (f0 fid1)))", "using mk_v_agree[of \"I\" \"(OSing vid1 (f0 fid1))\" \"(a,b)\" \"(?sol r)\"]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i))\n   (a, b) (- semBV I (OSing vid1 (f0 fid1))) \\<and>\n  Vagree\n   (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i))\n   (mk_xode I (OSing vid1 (f0 fid1))\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i))\n   (semBV I (OSing vid1 (f0 fid1)))\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n       (\\<chi>i.\n           if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n           else a $ i))\n     (a, b) (- semBV I (OSing vid1 (f0 fid1))) \\<and>\n    Vagree\n     (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n       (\\<chi>i.\n           if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n           else a $ i))\n     (mk_xode I (OSing vid1 (f0 fid1))\n       (\\<chi>i.\n           if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n           else a $ i))\n     (semBV I (OSing vid1 (f0 fid1)))", "by auto"], ["proof (state)\nthis:\n  Vagree\n   (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i))\n   (a, b) (- semBV I (OSing vid1 (f0 fid1))) \\<and>\n  Vagree\n   (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i))\n   (mk_xode I (OSing vid1 (f0 fid1))\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i))\n   (semBV I (OSing vid1 (f0 fid1)))\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have prereq1a:\"fst ?abba\n     = fst (mk_v I (OSing vid1 (f0 fid1)) (a,b) (?sol r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n          (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n            (repv (a, b) vid2 r))) =\n    fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n          (\\<chi>i.\n              if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n              else a $ i))", "using  agrees aaba"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i))\n   (a, b) (- semBV I (OSing vid1 (f0 fid1))) \\<and>\n  Vagree\n   (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i))\n   (mk_xode I (OSing vid1 (f0 fid1))\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i))\n   (semBV I (OSing vid1 (f0 fid1)))\n  (aa, ba) =\n  repv (repv (a, b) vid2 r) vid1\n   (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n     (repv (a, b) vid2 r))\n\ngoal (1 subgoal):\n 1. fst (repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n          (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n            (repv (a, b) vid2 r))) =\n    fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n          (\\<chi>i.\n              if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n              else a $ i))", "apply (auto simp add: aaba Vagree_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<longrightarrow>\n                fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                          else a $ i)) $\n                i =\n                a $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        i =\n        b $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     sterm_sem I (f0 fid1)\n      (\\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n          else a $ i);\n     vid2 = vid1\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>y.\n                          if vid1 = y\n                          then r +\n                               dterm_sem I (f0 fid1)\n                                (\\<chi>y.\n                                    if vid1 = y then r else fst (a, b) $ y,\n                                 b) *\n                               r\n                          else fst (a, \\<chi>y.\n    if vid1 = y then Functions I fid1 (\\<chi>i. 0) else snd (a, b) $ y) $\n                               y) =\n                      fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                            (\\<chi>i.\n                                if i = vid1\n                                then a $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * r\n                                else a $ i))\n 2. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<longrightarrow>\n                fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                          else a $ i)) $\n                i =\n                a $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        i =\n        b $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     sterm_sem I (f0 fid1)\n      (\\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n          else a $ i);\n     vid2 \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>y.\n                          if vid1 = y\n                          then fst (a, b) $ vid1 +\n                               dterm_sem I (f0 fid1)\n                                (\\<chi>y.\n                                    if vid2 = y then r else fst (a, b) $ y,\n                                 b) *\n                               r\n                          else fst (a, \\<chi>y.\n    if vid1 = y then Functions I fid1 (\\<chi>i. 0) else snd (a, b) $ y) $\n                               y) =\n                      fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                            (\\<chi>i.\n                                if i = vid1\n                                then a $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * r\n                                else a $ i))", "apply (rule vec_extensionality)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>i.\n                   i \\<noteq> vid1 \\<longrightarrow>\n                   fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                         (\\<chi>i.\n                             if i = vid1\n                             then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                             else a $ i)) $\n                   i =\n                   a $ i;\n        \\<forall>i.\n           i \\<noteq> vid1 \\<longrightarrow>\n           snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                 (\\<chi>i.\n                     if i = vid1\n                     then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                     else a $ i)) $\n           i =\n           b $ i;\n        fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        vid1 =\n        a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        vid1 =\n        sterm_sem I (f0 fid1)\n         (\\<chi>i.\n             if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n             else a $ i);\n        vid2 = vid1\\<rbrakk>\n       \\<Longrightarrow> (\\<chi>y.\n                             if vid1 = y\n                             then r +\n                                  dterm_sem I (f0 fid1)\n                                   (\\<chi>y.\n if vid1 = y then r else fst (a, b) $ y,\n                                    b) *\n                                  r\n                             else fst (a,\n \\<chi>y.\n    if vid1 = y then Functions I fid1 (\\<chi>i. 0) else snd (a, b) $ y) $\n                                  y) $\n                         i =\n                         fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                               (\\<chi>i.\n                                   if i = vid1\n                                   then a $ i +\n  Functions I fid1 (\\<chi>_. 0) * r\n                                   else a $ i)) $\n                         i\n 2. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<longrightarrow>\n                fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                          else a $ i)) $\n                i =\n                a $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        i =\n        b $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     sterm_sem I (f0 fid1)\n      (\\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n          else a $ i);\n     vid2 \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>y.\n                          if vid1 = y\n                          then fst (a, b) $ vid1 +\n                               dterm_sem I (f0 fid1)\n                                (\\<chi>y.\n                                    if vid2 = y then r else fst (a, b) $ y,\n                                 b) *\n                               r\n                          else fst (a, \\<chi>y.\n    if vid1 = y then Functions I fid1 (\\<chi>i. 0) else snd (a, b) $ y) $\n                               y) =\n                      fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                            (\\<chi>i.\n                                if i = vid1\n                                then a $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * r\n                                else a $ i))", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<longrightarrow>\n                fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                          else a $ i)) $\n                i =\n                a $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        i =\n        b $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     sterm_sem I (f0 fid1)\n      (\\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n          else a $ i);\n     vid2 = vid1\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>y.\n                          if vid1 = y\n                          then r +\n                               dterm_sem I (f0 fid1)\n                                (\\<chi>y.\n                                    if vid1 = y then r else fst (a, b) $ y,\n                                 b) *\n                               r\n                          else fst (a, \\<chi>y.\n    if vid1 = y then Functions I fid1 (\\<chi>i. 0) else snd (a, b) $ y) $\n                               y) $\n                      i =\n                      fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                            (\\<chi>i.\n                                if i = vid1\n                                then a $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * r\n                                else a $ i)) $\n                      i", "apply (cases \"i = vid1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<longrightarrow>\n                fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                          else a $ i)) $\n                i =\n                a $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        i =\n        b $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     sterm_sem I (f0 fid1)\n      (\\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n          else a $ i);\n     vid2 = vid1; i = vid1\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>y.\n                          if vid1 = y\n                          then r +\n                               dterm_sem I (f0 fid1)\n                                (\\<chi>y.\n                                    if vid1 = y then r else fst (a, b) $ y,\n                                 b) *\n                               r\n                          else fst (a, \\<chi>y.\n    if vid1 = y then Functions I fid1 (\\<chi>i. 0) else snd (a, b) $ y) $\n                               y) $\n                      i =\n                      fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                            (\\<chi>i.\n                                if i = vid1\n                                then a $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * r\n                                else a $ i)) $\n                      i\n 2. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<longrightarrow>\n                fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                          else a $ i)) $\n                i =\n                a $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        i =\n        b $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     sterm_sem I (f0 fid1)\n      (\\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n          else a $ i);\n     vid2 = vid1; i \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>y.\n                          if vid1 = y\n                          then r +\n                               dterm_sem I (f0 fid1)\n                                (\\<chi>y.\n                                    if vid1 = y then r else fst (a, b) $ y,\n                                 b) *\n                               r\n                          else fst (a, \\<chi>y.\n    if vid1 = y then Functions I fid1 (\\<chi>i. 0) else snd (a, b) $ y) $\n                               y) $\n                      i =\n                      fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                            (\\<chi>i.\n                                if i = vid1\n                                then a $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * r\n                                else a $ i)) $\n                      i", "using vne12 agrees Vagree_def"], ["proof (prove)\nusing this:\n  vid1 \\<noteq> vid2\n  Vagree\n   (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i))\n   (a, b) (- semBV I (OSing vid1 (f0 fid1))) \\<and>\n  Vagree\n   (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i))\n   (mk_xode I (OSing vid1 (f0 fid1))\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i))\n   (semBV I (OSing vid1 (f0 fid1)))\n  Vagree ?\\<nu> ?\\<nu>' ?V \\<equiv>\n  (\\<forall>i.\n      Inl i \\<in> ?V \\<longrightarrow>\n      fst ?\\<nu> $ i = fst ?\\<nu>' $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> ?V \\<longrightarrow> snd ?\\<nu> $ i = snd ?\\<nu>' $ i)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<longrightarrow>\n                fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                          else a $ i)) $\n                i =\n                a $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        i =\n        b $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     sterm_sem I (f0 fid1)\n      (\\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n          else a $ i);\n     vid2 = vid1; i = vid1\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>y.\n                          if vid1 = y\n                          then r +\n                               dterm_sem I (f0 fid1)\n                                (\\<chi>y.\n                                    if vid1 = y then r else fst (a, b) $ y,\n                                 b) *\n                               r\n                          else fst (a, \\<chi>y.\n    if vid1 = y then Functions I fid1 (\\<chi>i. 0) else snd (a, b) $ y) $\n                               y) $\n                      i =\n                      fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                            (\\<chi>i.\n                                if i = vid1\n                                then a $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * r\n                                else a $ i)) $\n                      i\n 2. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<longrightarrow>\n                fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                          else a $ i)) $\n                i =\n                a $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        i =\n        b $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     sterm_sem I (f0 fid1)\n      (\\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n          else a $ i);\n     vid2 = vid1; i \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>y.\n                          if vid1 = y\n                          then r +\n                               dterm_sem I (f0 fid1)\n                                (\\<chi>y.\n                                    if vid1 = y then r else fst (a, b) $ y,\n                                 b) *\n                               r\n                          else fst (a, \\<chi>y.\n    if vid1 = y then Functions I fid1 (\\<chi>i. 0) else snd (a, b) $ y) $\n                               y) $\n                      i =\n                      fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                            (\\<chi>i.\n                                if i = vid1\n                                then a $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * r\n                                else a $ i)) $\n                      i", "apply (auto simp add: aaba f0_def empty_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<longrightarrow>\n                fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                          else a $ i)) $\n                i =\n                a $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        i =\n        b $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     sterm_sem I (f0 fid1)\n      (\\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n          else a $ i);\n     vid2 \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>y.\n                          if vid1 = y\n                          then fst (a, b) $ vid1 +\n                               dterm_sem I (f0 fid1)\n                                (\\<chi>y.\n                                    if vid2 = y then r else fst (a, b) $ y,\n                                 b) *\n                               r\n                          else fst (a, \\<chi>y.\n    if vid1 = y then Functions I fid1 (\\<chi>i. 0) else snd (a, b) $ y) $\n                               y) =\n                      fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                            (\\<chi>i.\n                                if i = vid1\n                                then a $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * r\n                                else a $ i))", "apply (rule vec_extensionality)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>i.\n                   i \\<noteq> vid1 \\<longrightarrow>\n                   fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                         (\\<chi>i.\n                             if i = vid1\n                             then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                             else a $ i)) $\n                   i =\n                   a $ i;\n        \\<forall>i.\n           i \\<noteq> vid1 \\<longrightarrow>\n           snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                 (\\<chi>i.\n                     if i = vid1\n                     then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                     else a $ i)) $\n           i =\n           b $ i;\n        fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        vid1 =\n        a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        vid1 =\n        sterm_sem I (f0 fid1)\n         (\\<chi>i.\n             if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n             else a $ i);\n        vid2 \\<noteq> vid1\\<rbrakk>\n       \\<Longrightarrow> (\\<chi>y.\n                             if vid1 = y\n                             then fst (a, b) $ vid1 +\n                                  dterm_sem I (f0 fid1)\n                                   (\\<chi>y.\n if vid2 = y then r else fst (a, b) $ y,\n                                    b) *\n                                  r\n                             else fst (a,\n \\<chi>y.\n    if vid1 = y then Functions I fid1 (\\<chi>i. 0) else snd (a, b) $ y) $\n                                  y) $\n                         i =\n                         fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                               (\\<chi>i.\n                                   if i = vid1\n                                   then a $ i +\n  Functions I fid1 (\\<chi>_. 0) * r\n                                   else a $ i)) $\n                         i", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<longrightarrow>\n                fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                          else a $ i)) $\n                i =\n                a $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        i =\n        b $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     sterm_sem I (f0 fid1)\n      (\\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n          else a $ i);\n     vid2 \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>y.\n                          if vid1 = y\n                          then fst (a, b) $ vid1 +\n                               dterm_sem I (f0 fid1)\n                                (\\<chi>y.\n                                    if vid2 = y then r else fst (a, b) $ y,\n                                 b) *\n                               r\n                          else fst (a, \\<chi>y.\n    if vid1 = y then Functions I fid1 (\\<chi>i. 0) else snd (a, b) $ y) $\n                               y) $\n                      i =\n                      fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                            (\\<chi>i.\n                                if i = vid1\n                                then a $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * r\n                                else a $ i)) $\n                      i", "apply (cases \"i = vid1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<longrightarrow>\n                fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                          else a $ i)) $\n                i =\n                a $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        i =\n        b $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     sterm_sem I (f0 fid1)\n      (\\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n          else a $ i);\n     vid2 \\<noteq> vid1; i = vid1\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>y.\n                          if vid1 = y\n                          then fst (a, b) $ vid1 +\n                               dterm_sem I (f0 fid1)\n                                (\\<chi>y.\n                                    if vid2 = y then r else fst (a, b) $ y,\n                                 b) *\n                               r\n                          else fst (a, \\<chi>y.\n    if vid1 = y then Functions I fid1 (\\<chi>i. 0) else snd (a, b) $ y) $\n                               y) $\n                      i =\n                      fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                            (\\<chi>i.\n                                if i = vid1\n                                then a $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * r\n                                else a $ i)) $\n                      i\n 2. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<longrightarrow>\n                fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                          else a $ i)) $\n                i =\n                a $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        i =\n        b $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     sterm_sem I (f0 fid1)\n      (\\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n          else a $ i);\n     vid2 \\<noteq> vid1; i \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>y.\n                          if vid1 = y\n                          then fst (a, b) $ vid1 +\n                               dterm_sem I (f0 fid1)\n                                (\\<chi>y.\n                                    if vid2 = y then r else fst (a, b) $ y,\n                                 b) *\n                               r\n                          else fst (a, \\<chi>y.\n    if vid1 = y then Functions I fid1 (\\<chi>i. 0) else snd (a, b) $ y) $\n                               y) $\n                      i =\n                      fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                            (\\<chi>i.\n                                if i = vid1\n                                then a $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * r\n                                else a $ i)) $\n                      i", "apply(auto  simp add: f0_def empty_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  fst (repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n        (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n          (repv (a, b) vid2 r))) =\n  fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n        (\\<chi>i.\n            if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n            else a $ i))\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have prereq1b:\"snd (?abba) = snd (mk_v I (OSing vid1 (f0 fid1)) (a,b) (?sol r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n          (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n            (repv (a, b) vid2 r))) =\n    snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n          (\\<chi>i.\n              if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n              else a $ i))", "using agrees aaba"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i))\n   (a, b) (- semBV I (OSing vid1 (f0 fid1))) \\<and>\n  Vagree\n   (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i))\n   (mk_xode I (OSing vid1 (f0 fid1))\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i))\n   (semBV I (OSing vid1 (f0 fid1)))\n  (aa, ba) =\n  repv (repv (a, b) vid2 r) vid1\n   (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n     (repv (a, b) vid2 r))\n\ngoal (1 subgoal):\n 1. snd (repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n          (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n            (repv (a, b) vid2 r))) =\n    snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n          (\\<chi>i.\n              if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n              else a $ i))", "apply (auto simp add: aaba Vagree_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<longrightarrow>\n                fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                          else a $ i)) $\n                i =\n                a $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        i =\n        b $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     sterm_sem I (f0 fid1)\n      (\\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n          else a $ i)\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>y.\n                          if vid1 = y then Functions I fid1 (\\<chi>i. 0)\n                          else snd (a, b) $ y) =\n                      snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                            (\\<chi>i.\n                                if i = vid1\n                                then a $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * r\n                                else a $ i))", "apply (rule vec_extensionality)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>i.\n                   i \\<noteq> vid1 \\<longrightarrow>\n                   fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                         (\\<chi>i.\n                             if i = vid1\n                             then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                             else a $ i)) $\n                   i =\n                   a $ i;\n        \\<forall>i.\n           i \\<noteq> vid1 \\<longrightarrow>\n           snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                 (\\<chi>i.\n                     if i = vid1\n                     then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                     else a $ i)) $\n           i =\n           b $ i;\n        fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        vid1 =\n        a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        vid1 =\n        sterm_sem I (f0 fid1)\n         (\\<chi>i.\n             if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n             else a $ i)\\<rbrakk>\n       \\<Longrightarrow> (\\<chi>y.\n                             if vid1 = y then Functions I fid1 (\\<chi>i. 0)\n                             else snd (a, b) $ y) $\n                         i =\n                         snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                               (\\<chi>i.\n                                   if i = vid1\n                                   then a $ i +\n  Functions I fid1 (\\<chi>_. 0) * r\n                                   else a $ i)) $\n                         i", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<longrightarrow>\n                fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                          else a $ i)) $\n                i =\n                a $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        i =\n        b $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     sterm_sem I (f0 fid1)\n      (\\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n          else a $ i)\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>y.\n                          if vid1 = y then Functions I fid1 (\\<chi>i. 0)\n                          else snd (a, b) $ y) $\n                      i =\n                      snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                            (\\<chi>i.\n                                if i = vid1\n                                then a $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * r\n                                else a $ i)) $\n                      i", "apply (cases \"i = vid1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<longrightarrow>\n                fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                          else a $ i)) $\n                i =\n                a $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        i =\n        b $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     sterm_sem I (f0 fid1)\n      (\\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n          else a $ i);\n     i = vid1\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>y.\n                          if vid1 = y then Functions I fid1 (\\<chi>i. 0)\n                          else snd (a, b) $ y) $\n                      i =\n                      snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                            (\\<chi>i.\n                                if i = vid1\n                                then a $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * r\n                                else a $ i)) $\n                      i\n 2. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<longrightarrow>\n                fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                          else a $ i)) $\n                i =\n                a $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        i =\n        b $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     sterm_sem I (f0 fid1)\n      (\\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n          else a $ i);\n     i \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>y.\n                          if vid1 = y then Functions I fid1 (\\<chi>i. 0)\n                          else snd (a, b) $ y) $\n                      i =\n                      snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                            (\\<chi>i.\n                                if i = vid1\n                                then a $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * r\n                                else a $ i)) $\n                      i", "using vne12 agrees Vagree_def"], ["proof (prove)\nusing this:\n  vid1 \\<noteq> vid2\n  Vagree\n   (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i))\n   (a, b) (- semBV I (OSing vid1 (f0 fid1))) \\<and>\n  Vagree\n   (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i))\n   (mk_xode I (OSing vid1 (f0 fid1))\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i))\n   (semBV I (OSing vid1 (f0 fid1)))\n  Vagree ?\\<nu> ?\\<nu>' ?V \\<equiv>\n  (\\<forall>i.\n      Inl i \\<in> ?V \\<longrightarrow>\n      fst ?\\<nu> $ i = fst ?\\<nu>' $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> ?V \\<longrightarrow> snd ?\\<nu> $ i = snd ?\\<nu>' $ i)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<longrightarrow>\n                fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                          else a $ i)) $\n                i =\n                a $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        i =\n        b $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     sterm_sem I (f0 fid1)\n      (\\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n          else a $ i);\n     i = vid1\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>y.\n                          if vid1 = y then Functions I fid1 (\\<chi>i. 0)\n                          else snd (a, b) $ y) $\n                      i =\n                      snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                            (\\<chi>i.\n                                if i = vid1\n                                then a $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * r\n                                else a $ i)) $\n                      i\n 2. \\<lbrakk>\\<forall>i.\n                i \\<noteq> vid1 \\<longrightarrow>\n                fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                          else a $ i)) $\n                i =\n                a $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n              (\\<chi>i.\n                  if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n                  else a $ i)) $\n        i =\n        b $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     a $ vid1 + Functions I fid1 (\\<chi>_. 0) * r;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n               else a $ i)) $\n     vid1 =\n     sterm_sem I (f0 fid1)\n      (\\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n          else a $ i);\n     i \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>y.\n                          if vid1 = y then Functions I fid1 (\\<chi>i. 0)\n                          else snd (a, b) $ y) $\n                      i =\n                      snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n                            (\\<chi>i.\n                                if i = vid1\n                                then a $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * r\n                                else a $ i)) $\n                      i", "apply (auto simp add: aaba f0_def empty_def )"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  snd (repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n        (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n          (repv (a, b) vid2 r))) =\n  snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n        (\\<chi>i.\n            if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n            else a $ i))\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have \"?abba = mk_v I (OSing vid1 (f0 fid1)) (a,b) (?sol r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n     (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n       (repv (a, b) vid2 r)) =\n    mk_v I (OSing vid1 (f0 fid1)) (a, b)\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i)", "using prod_eq_iff prereq1a prereq1b"], ["proof (prove)\nusing this:\n  (?s = ?t) = (fst ?s = fst ?t \\<and> snd ?s = snd ?t)\n  fst (repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n        (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n          (repv (a, b) vid2 r))) =\n  fst (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n        (\\<chi>i.\n            if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n            else a $ i))\n  snd (repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n        (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n          (repv (a, b) vid2 r))) =\n  snd (mk_v I (OSing vid1 (f0 fid1)) (a, b)\n        (\\<chi>i.\n            if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n            else a $ i))\n\ngoal (1 subgoal):\n 1. repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n     (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n       (repv (a, b) vid2 r)) =\n    mk_v I (OSing vid1 (f0 fid1)) (a, b)\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n         else a $ i)", "by blast"], ["proof (state)\nthis:\n  repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n   (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n     (repv (a, b) vid2 r)) =\n  mk_v I (OSing vid1 (f0 fid1)) (a, b)\n   (\\<chi>i.\n       if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n       else a $ i)\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "hence req1:\"((a, b), ?abba) = ((a, b), mk_v I (OSing vid1 (f0 fid1)) (a,b) (?sol r))\""], ["proof (prove)\nusing this:\n  repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n   (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n     (repv (a, b) vid2 r)) =\n  mk_v I (OSing vid1 (f0 fid1)) (a, b)\n   (\\<chi>i.\n       if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n       else a $ i)\n\ngoal (1 subgoal):\n 1. ((a, b),\n     repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n      (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n        (repv (a, b) vid2 r))) =\n    ((a, b),\n     mk_v I (OSing vid1 (f0 fid1)) (a, b)\n      (\\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n          else a $ i))", "by auto"], ["proof (state)\nthis:\n  ((a, b),\n   repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n    (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n      (repv (a, b) vid2 r))) =\n  ((a, b),\n   mk_v I (OSing vid1 (f0 fid1)) (a, b)\n    (\\<chi>i.\n        if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n        else a $ i))\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have \"sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) b = Functions I fid1 (\\<chi> i. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) b =\n    Functions I fid1 (\\<chi>i. 0)", "by auto"], ["proof (state)\nthis:\n  sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) b =\n  Functions I fid1 (\\<chi>i. 0)\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "hence vec_simp:\"(\\<lambda>a b. \\<chi> i. if i = vid1 then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) b else 0) \n      = (\\<lambda>a b. \\<chi> i. if i = vid1 then Functions I fid1 (\\<chi> i. 0) else 0)\""], ["proof (prove)\nusing this:\n  sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) b =\n  Functions I fid1 (\\<chi>i. 0)\n\ngoal (1 subgoal):\n 1. (\\<lambda>a b.\n        \\<chi>i.\n           if i = vid1 then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) b\n           else 0) =\n    (\\<lambda>a b.\n        \\<chi>i. if i = vid1 then Functions I fid1 (\\<chi>i. 0) else 0)", "by (auto simp add: vec_eq_iff cong: if_cong)"], ["proof (state)\nthis:\n  (\\<lambda>a b.\n      \\<chi>i.\n         if i = vid1 then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) b\n         else 0) =\n  (\\<lambda>a b.\n      \\<chi>i. if i = vid1 then Functions I fid1 (\\<chi>i. 0) else 0)\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have sub: \"{0..r} \\<subseteq> UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..r} \\<subseteq> UNIV", "by auto"], ["proof (state)\nthis:\n  {0..r} \\<subseteq> UNIV\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have sub2:\"{x. mk_v I (OSing vid1 (f0 fid1)) (a,b) x \\<in> fml_sem I (p1 vid2 vid1)} \\<subseteq> UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. mk_v I (OSing vid1 (f0 fid1)) (a, b) x\n        \\<in> fml_sem I (p1 vid2 vid1)}\n    \\<subseteq> UNIV", "by auto"], ["proof (state)\nthis:\n  {x. mk_v I (OSing vid1 (f0 fid1)) (a, b) x \\<in> fml_sem I (p1 vid2 vid1)}\n  \\<subseteq> UNIV\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have req3:\"(?sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..r}\n            {x. mk_v I (OSing vid1 (f0 fid1)) (a,b) x \\<in> fml_sem I (p1 vid2 vid1)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         \\<chi>i.\n            if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else a $ i) solves_ode\n     (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n     {0..r}\n     {x. mk_v I (OSing vid1 (f0 fid1)) (a, b) x\n         \\<in> fml_sem I (p1 vid2 vid1)}", "apply(auto simp add: f0_def empty_def vec_simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         \\<chi>i.\n            if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else a $ i) solves_ode\n     (\\<lambda>a b.\n         \\<chi>i.\n            if i = vid1 then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) b\n            else 0))\n     {0..r}\n     {x. mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (a, b) x\n         \\<in> fml_sem I (p1 vid2 vid1)}", "apply(rule solves_odeI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((\\<lambda>t.\n         \\<chi>i.\n            if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else a $ i) has_vderiv_on\n     (\\<lambda>t.\n         \\<chi>i.\n            if i = vid1\n            then sterm_sem I ($f fid1 (\\<lambda>i. Const 0))\n                  (\\<chi>i.\n                      if i = vid1\n                      then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n                      else a $ i)\n            else 0))\n     {0..r}\n 2. \\<And>t.\n       t \\<in> {0..r} \\<Longrightarrow>\n       (\\<chi>i.\n           if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n           else a $ i)\n       \\<in> {x. mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (a, b)\n                  x\n                 \\<in> fml_sem I (p1 vid2 vid1)}", "apply(auto simp only: has_vderiv_on_def has_vector_derivative_def box_sem)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {0..r} \\<Longrightarrow>\n       ((\\<lambda>t.\n            \\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n               else a $ i) has_derivative\n        (\\<lambda>xa.\n            xa *\\<^sub>R\n            (\\<chi>i.\n                if i = vid1\n                then sterm_sem I ($f fid1 (\\<lambda>i. Const 0))\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * x\n                          else a $ i)\n                else 0)))\n        (at x within {0..r})\n 2. \\<And>t.\n       t \\<in> {0..r} \\<Longrightarrow>\n       mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (a, b)\n        (\\<chi>i.\n            if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else a $ i)\n       \\<in> fml_sem I (p1 vid2 vid1)", "apply (rule has_derivative_vec[THEN has_derivative_eq_rhs])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x i.\n       x \\<in> {0..r} \\<Longrightarrow>\n       ((\\<lambda>t.\n            if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else a $ i) has_derivative\n        ?f'11 x i)\n        (at x within {0..r})\n 2. \\<And>x.\n       x \\<in> {0..r} \\<Longrightarrow>\n       (\\<lambda>h. \\<chi>i. ?f'11 x i h) =\n       (\\<lambda>xa.\n           xa *\\<^sub>R\n           (\\<chi>i.\n               if i = vid1\n               then sterm_sem I ($f fid1 (\\<lambda>i. Const 0))\n                     (\\<chi>i.\n                         if i = vid1\n                         then a $ i + Functions I fid1 (\\<chi>_. 0) * x\n                         else a $ i)\n               else 0))\n 3. \\<And>t.\n       t \\<in> {0..r} \\<Longrightarrow>\n       mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (a, b)\n        (\\<chi>i.\n            if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else a $ i)\n       \\<in> fml_sem I (p1 vid2 vid1)", "defer"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       x \\<in> {0..r} \\<Longrightarrow>\n       (\\<lambda>h. \\<chi>i. ?f'11 x i h) =\n       (\\<lambda>xa.\n           xa *\\<^sub>R\n           (\\<chi>i.\n               if i = vid1\n               then sterm_sem I ($f fid1 (\\<lambda>i. Const 0))\n                     (\\<chi>i.\n                         if i = vid1\n                         then a $ i + Functions I fid1 (\\<chi>_. 0) * x\n                         else a $ i)\n               else 0))\n 2. \\<And>t.\n       t \\<in> {0..r} \\<Longrightarrow>\n       mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (a, b)\n        (\\<chi>i.\n            if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else a $ i)\n       \\<in> fml_sem I (p1 vid2 vid1)\n 3. \\<And>x i.\n       x \\<in> {0..r} \\<Longrightarrow>\n       ((\\<lambda>t.\n            if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else a $ i) has_derivative\n        ?f'11 x i)\n        (at x within {0..r})", "apply (rule ext)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x h.\n       x \\<in> {0..r} \\<Longrightarrow>\n       (\\<chi>i. ?f'11 x i h) =\n       h *\\<^sub>R\n       (\\<chi>i.\n           if i = vid1\n           then sterm_sem I ($f fid1 (\\<lambda>i. Const 0))\n                 (\\<chi>i.\n                     if i = vid1\n                     then a $ i + Functions I fid1 (\\<chi>_. 0) * x\n                     else a $ i)\n           else 0)\n 2. \\<And>t.\n       t \\<in> {0..r} \\<Longrightarrow>\n       mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (a, b)\n        (\\<chi>i.\n            if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else a $ i)\n       \\<in> fml_sem I (p1 vid2 vid1)\n 3. \\<And>x i.\n       x \\<in> {0..r} \\<Longrightarrow>\n       ((\\<lambda>t.\n            if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else a $ i) has_derivative\n        ?f'11 x i)\n        (at x within {0..r})", "apply (subst scaleR_vec_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x h.\n       x \\<in> {0..r} \\<Longrightarrow>\n       (\\<chi>i. ?f'18 x x h h i) =\n       (\\<chi>i.\n           h *\\<^sub>R\n           (\\<chi>i.\n               if i = vid1\n               then sterm_sem I ($f fid1 (\\<lambda>i. Const 0))\n                     (\\<chi>i.\n                         if i = vid1\n                         then a $ i + Functions I fid1 (\\<chi>_. 0) * x\n                         else a $ i)\n               else 0) $\n           i)\n 2. \\<And>t.\n       t \\<in> {0..r} \\<Longrightarrow>\n       mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (a, b)\n        (\\<chi>i.\n            if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else a $ i)\n       \\<in> fml_sem I (p1 vid2 vid1)\n 3. \\<And>x i.\n       x \\<in> {0..r} \\<Longrightarrow>\n       ((\\<lambda>t.\n            if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else a $ i) has_derivative\n        (\\<lambda>h. ?f'18 x x h h i))\n        (at x within {0..r})", "apply (rule refl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t.\n       t \\<in> {0..r} \\<Longrightarrow>\n       mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (a, b)\n        (\\<chi>i.\n            if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else a $ i)\n       \\<in> fml_sem I (p1 vid2 vid1)\n 2. \\<And>x i.\n       x \\<in> {0..r} \\<Longrightarrow>\n       ((\\<lambda>t.\n            if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else a $ i) has_derivative\n        (\\<lambda>h.\n            h *\\<^sub>R\n            (\\<chi>i.\n                if i = vid1\n                then sterm_sem I ($f fid1 (\\<lambda>i. Const 0))\n                      (\\<chi>i.\n                          if i = vid1\n                          then a $ i + Functions I fid1 (\\<chi>_. 0) * x\n                          else a $ i)\n                else 0) $\n            i))\n        (at x within {0..r})", "apply (auto intro!: derivative_eq_intros)\n    \\<comment> \\<open>Domain constraint satisfied\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>0 \\<le> t; t \\<le> r\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                          (a, b)\n                          (\\<chi>i.\n                              if i = vid1\n                              then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n                              else a $ i)\n                         \\<in> fml_sem I (p1 vid2 vid1)", "using constraint"], ["proof (prove)\nusing this:\n  \\<forall>ra.\n     0 \\<le> ra \\<and> ra \\<le> r \\<longrightarrow>\n     repv (repv (a, b) vid2 r) vid3 ra\n     \\<in> fml_sem I\n            ($\\<phi> vid2\n              (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))))\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>0 \\<le> t; t \\<le> r\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                          (a, b)\n                          (\\<chi>i.\n                              if i = vid1\n                              then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n                              else a $ i)\n                         \\<in> fml_sem I (p1 vid2 vid1)", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>0 \\<le> t; t \\<le> r;\n        \\<forall>ra.\n           0 \\<le> ra \\<and> ra \\<le> r \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (if i = vid1\n                  then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n                  else Const 0)\n                 (\\<chi>y.\n                     if vid3 = y then ra\n                     else fst (\\<chi>y.\n                                  if vid2 = y then r else fst (a, b) $ y,\n                               b) $\n                          y,\n                  b))\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                          (a, b)\n                          (\\<chi>i.\n                              if i = vid1\n                              then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n                              else a $ i)\n                         \\<in> fml_sem I (p1 vid2 vid1)", "subgoal for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> t; t \\<le> r;\n     \\<forall>ra.\n        0 \\<le> ra \\<and> ra \\<le> r \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I\n              (if i = vid1 then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n               else Const 0)\n              (\\<chi>y.\n                  if vid3 = y then ra\n                  else fst (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                            b) $\n                       y,\n               b))\\<rbrakk>\n    \\<Longrightarrow> mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                       (a, b)\n                       (\\<chi>i.\n                           if i = vid1\n                           then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n                           else a $ i)\n                      \\<in> fml_sem I (p1 vid2 vid1)", "apply(erule allE[where x=\"t\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> t; t \\<le> r;\n     0 \\<le> t \\<and> t \\<le> r \\<longrightarrow>\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I\n           (if i = vid1 then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n            else Const 0)\n           (\\<chi>y.\n               if vid3 = y then t\n               else fst (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                         b) $\n                    y,\n            b))\\<rbrakk>\n    \\<Longrightarrow> mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                       (a, b)\n                       (\\<chi>i.\n                           if i = vid1\n                           then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n                           else a $ i)\n                      \\<in> fml_sem I (p1 vid2 vid1)", "apply(auto simp add: p1_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> t; t \\<le> r;\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I\n           (if i = vid1 then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n            else Const 0)\n           (\\<chi>y.\n               if vid3 = y then t\n               else fst (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                         b) $\n                    y,\n            b))\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                              (a, b)\n                              (\\<chi>i.\n                                  if i = vid1\n                                  then a $ i +\n Functions I fid1 (\\<chi>_. 0) * t\n                                  else a $ i)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> t; t \\<le> r;\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I\n           (if i = vid1 then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n            else Const 0)\n           (\\<chi>y.\n               if vid3 = y then t\n               else fst (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                         b) $\n                    y,\n            b))\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                              (a, b)\n                              (\\<chi>i.\n                                  if i = vid1\n                                  then a $ i +\n Functions I fid1 (\\<chi>_. 0) * t\n                                  else a $ i)))", "have eq:\"(\\<chi> i. dterm_sem I (if i = vid1 then Plus (trm.Var vid1) (Times (f0 fid1) (trm.Var vid3)) else Const 0)\n            (\\<chi> y. if vid3 = y then t else fst (\\<chi> y. if vid2 = y then r else fst (a, b) $ y, b) $ y, b)) =\n            (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n              (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (a, b)\n                (\\<chi> i. if i = vid1 then a $ i + Functions I fid1 (\\<chi> _. 0) * t else a $ i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        dterm_sem I\n         (if i = vid1 then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n          else Const 0)\n         (\\<chi>y.\n             if vid3 = y then t\n             else fst (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) $\n                  y,\n          b)) =\n    (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n               else a $ i)))", "using vne12 vne13 mk_v_agree[of \"I\" \"(OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\" \"(a, b)\" \"(\\<chi> i. if i = vid1 then a $ i + Functions I fid1 (\\<chi> _. 0) * t else a $ i)\"]"], ["proof (prove)\nusing this:\n  vid1 \\<noteq> vid2\n  vid1 \\<noteq> vid3\n  Vagree\n   (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (a, b)\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n         else a $ i))\n   (a, b) (- semBV I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))) \\<and>\n  Vagree\n   (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (a, b)\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n         else a $ i))\n   (mk_xode I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n     (\\<chi>i.\n         if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n         else a $ i))\n   (semBV I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))))\n\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        dterm_sem I\n         (if i = vid1 then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n          else Const 0)\n         (\\<chi>y.\n             if vid3 = y then t\n             else fst (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) $\n                  y,\n          b)) =\n    (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (a, b)\n           (\\<chi>i.\n               if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n               else a $ i)))", "by (auto simp add: vec_eq_iff f0_def empty_def Vagree_def)"], ["proof (state)\nthis:\n  (\\<chi>i.\n      dterm_sem I\n       (if i = vid1 then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n        else Const 0)\n       (\\<chi>y.\n           if vid3 = y then t\n           else fst (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) $\n                y,\n        b)) =\n  (\\<chi>i.\n      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n       (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (a, b)\n         (\\<chi>i.\n             if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n             else a $ i)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> t; t \\<le> r;\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I\n           (if i = vid1 then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n            else Const 0)\n           (\\<chi>y.\n               if vid3 = y then t\n               else fst (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                         b) $\n                    y,\n            b))\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                              (a, b)\n                              (\\<chi>i.\n                                  if i = vid1\n                                  then a $ i +\n Functions I fid1 (\\<chi>_. 0) * t\n                                  else a $ i)))", "show \"0 \\<le> t \\<Longrightarrow>\n    t \\<le> r \\<Longrightarrow>\n    Predicates I vid2\n     (\\<chi> i. dterm_sem I (if i = vid1 then Plus (trm.Var vid1) (Times (f0 fid1) (trm.Var vid3)) else Const 0)\n            (\\<chi> y. if vid3 = y then t else fst (\\<chi> y. if vid2 = y then r else fst (a, b) $ y, b) $ y, b)) \\<Longrightarrow>\n    Predicates I vid2\n     (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n            (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (a, b)\n              (\\<chi> i. if i = vid1 then a $ i + Functions I fid1 (\\<chi> _. 0) * t else a $ i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> t; t \\<le> r;\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I\n           (if i = vid1 then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n            else Const 0)\n           (\\<chi>y.\n               if vid3 = y then t\n               else fst (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                         b) $\n                    y,\n            b))\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                              (a, b)\n                              (\\<chi>i.\n                                  if i = vid1\n                                  then a $ i +\n Functions I fid1 (\\<chi>_. 0) * t\n                                  else a $ i)))", "using eq"], ["proof (prove)\nusing this:\n  (\\<chi>i.\n      dterm_sem I\n       (if i = vid1 then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n        else Const 0)\n       (\\<chi>y.\n           if vid3 = y then t\n           else fst (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) $\n                y,\n        b)) =\n  (\\<chi>i.\n      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n       (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (a, b)\n         (\\<chi>i.\n             if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n             else a $ i)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> t; t \\<le> r;\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I\n           (if i = vid1 then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n            else Const 0)\n           (\\<chi>y.\n               if vid3 = y then t\n               else fst (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                         b) $\n                    y,\n            b))\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                              (a, b)\n                              (\\<chi>i.\n                                  if i = vid1\n                                  then a $ i +\n Functions I fid1 (\\<chi>_. 0) * t\n                                  else a $ i)))", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> t; t \\<le> r;\n   Predicates I vid2\n    (\\<chi>i.\n        dterm_sem I\n         (if i = vid1 then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n          else Const 0)\n         (\\<chi>y.\n             if vid3 = y then t\n             else fst (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) $\n                  y,\n          b))\\<rbrakk>\n  \\<Longrightarrow> Predicates I vid2\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                            (a, b)\n                            (\\<chi>i.\n                                if i = vid1\n                                then a $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * t\n                                else a $ i)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ((\\<lambda>t.\n       \\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n          else a $ i) solves_ode\n   (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n   {0..r}\n   {x. mk_v I (OSing vid1 (f0 fid1)) (a, b) x\n       \\<in> fml_sem I (p1 vid2 vid1)}\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have req4':\"?sol 0 = fst (a,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * 0\n        else a $ i) =\n    fst (a, b)", "by (auto simp: vec_eq_iff)"], ["proof (state)\nthis:\n  (\\<chi>i.\n      if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * 0\n      else a $ i) =\n  fst (a, b)\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "then"], ["proof (chain)\npicking this:\n  (\\<chi>i.\n      if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * 0\n      else a $ i) =\n  fst (a, b)", "have req4: \" (?sol 0) = (fst (a,b))\""], ["proof (prove)\nusing this:\n  (\\<chi>i.\n      if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * 0\n      else a $ i) =\n  fst (a, b)\n\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * 0\n        else a $ i) =\n    fst (a, b)", "using VSagree_refl[of a] req4'"], ["proof (prove)\nusing this:\n  (\\<chi>i.\n      if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * 0\n      else a $ i) =\n  fst (a, b)\n  VSagree a a ?A\n  (\\<chi>i.\n      if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * 0\n      else a $ i) =\n  fst (a, b)\n\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * 0\n        else a $ i) =\n    fst (a, b)", "unfolding VSagree_def"], ["proof (prove)\nusing this:\n  (\\<chi>i.\n      if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * 0\n      else a $ i) =\n  fst (a, b)\n  \\<forall>i\\<in>?A. a $ i = a $ i\n  (\\<chi>i.\n      if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * 0\n      else a $ i) =\n  fst (a, b)\n\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * 0\n        else a $ i) =\n    fst (a, b)", "by auto"], ["proof (state)\nthis:\n  (\\<chi>i.\n      if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * 0\n      else a $ i) =\n  fst (a, b)\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have inPred:\"?abba \\<in> fml_sem I (p1 vid3 vid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n     (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n       (repv (a, b) vid2 r))\n    \\<in> fml_sem I (p1 vid3 vid1)", "using req1 leq req3 req4 thisW"], ["proof (prove)\nusing this:\n  ((a, b),\n   repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n    (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n      (repv (a, b) vid2 r))) =\n  ((a, b),\n   mk_v I (OSing vid1 (f0 fid1)) (a, b)\n    (\\<chi>i.\n        if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * r\n        else a $ i))\n  0 \\<le> r\n  ((\\<lambda>t.\n       \\<chi>i.\n          if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * t\n          else a $ i) solves_ode\n   (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n   {0..r}\n   {x. mk_v I (OSing vid1 (f0 fid1)) (a, b) x\n       \\<in> fml_sem I (p1 vid2 vid1)}\n  (\\<chi>i.\n      if i = vid1 then a $ i + Functions I fid1 (\\<chi>_. 0) * 0\n      else a $ i) =\n  fst (a, b)\n  (\\<exists>\\<nu> sol t.\n      ((a, b),\n       repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n        (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n          (repv (a, b) vid2 r))) =\n      (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n      0 \\<le> t \\<and>\n      (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..t}\n       {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n           \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n      sol 0 = fst \\<nu>) \\<longrightarrow>\n  repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n   (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n     (repv (a, b) vid2 r))\n  \\<in> fml_sem I (p1 vid3 vid1)\n\ngoal (1 subgoal):\n 1. repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n     (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n       (repv (a, b) vid2 r))\n    \\<in> fml_sem I (p1 vid3 vid1)", "by fastforce"], ["proof (state)\nthis:\n  repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n   (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n     (repv (a, b) vid2 r))\n  \\<in> fml_sem I (p1 vid3 vid1)\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have sem_eq:\"?abba \\<in> fml_sem I (p1 vid3 vid1) \\<longleftrightarrow> (aa,ba) \\<in> fml_sem I (p1 vid3 vid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n      (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n        (repv (a, b) vid2 r))\n     \\<in> fml_sem I (p1 vid3 vid1)) =\n    ((aa, ba) \\<in> fml_sem I (p1 vid3 vid1))", "apply (rule coincidence_formula)"], ["proof (prove)\ngoal (3 subgoals):\n 1. fsafe (p1 vid3 vid1)\n 2. Iagree I I (SIGF (p1 vid3 vid1))\n 3. Vagree\n     (repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n       (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n         (repv (a, b) vid2 r)))\n     (aa, ba) (FVF (p1 vid3 vid1))", "apply (auto simp add: aaba Vagree_def p1_def f0_def empty_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Iagree I I {Inr (Inr vid3)}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. Iagree I I {Inr (Inr vid3)}", "using Iagree_refl"], ["proof (prove)\nusing this:\n  Iagree ?I ?I ?A\n\ngoal (1 subgoal):\n 1. Iagree I I {Inr (Inr vid3)}", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n    (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n      (repv (a, b) vid2 r))\n   \\<in> fml_sem I (p1 vid3 vid1)) =\n  ((aa, ba) \\<in> fml_sem I (p1 vid3 vid1))\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "from inPred sem_eq"], ["proof (chain)\npicking this:\n  repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n   (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n     (repv (a, b) vid2 r))\n  \\<in> fml_sem I (p1 vid3 vid1)\n  (repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n    (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n      (repv (a, b) vid2 r))\n   \\<in> fml_sem I (p1 vid3 vid1)) =\n  ((aa, ba) \\<in> fml_sem I (p1 vid3 vid1))", "have  inPred':\"(aa,ba) \\<in> fml_sem I (p1 vid3 vid1)\""], ["proof (prove)\nusing this:\n  repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n   (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n     (repv (a, b) vid2 r))\n  \\<in> fml_sem I (p1 vid3 vid1)\n  (repv (repd (a, b) vid1 (Functions I fid1 (\\<chi>i. 0))) vid1\n    (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n      (repv (a, b) vid2 r))\n   \\<in> fml_sem I (p1 vid3 vid1)) =\n  ((aa, ba) \\<in> fml_sem I (p1 vid3 vid1))\n\ngoal (1 subgoal):\n 1. (aa, ba) \\<in> fml_sem I (p1 vid3 vid1)", "by auto\n  \\<comment> \\<open>thus by lemma 6 consequence for formulas\\<close>"], ["proof (state)\nthis:\n  (aa, ba) \\<in> fml_sem I (p1 vid3 vid1)\n\ngoal (2 subgoals):\n 1. \\<And>I a b r aa ba.\n       \\<lbrakk>is_interp I;\n        \\<forall>\\<omega>.\n           (\\<exists>\\<nu> sol t.\n               ((a, b), \\<omega>) =\n               (\\<nu>, mk_v I (OSing vid1 (f0 fid1)) \\<nu> (sol t)) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f0 fid1)) \\<nu> x\n                    \\<in> fml_sem I (p1 vid2 vid1)} \\<and>\n               sol 0 = fst \\<nu>) \\<longrightarrow>\n           \\<omega> \\<in> fml_sem I (p1 vid3 vid1);\n        dterm_sem I (Const 0) (repv (a, b) vid2 r)\n        \\<le> dterm_sem I (Var vid2) (repv (a, b) vid2 r);\n        \\<forall>ra.\n           repv (repv (a, b) vid2 r) vid3 ra\n           \\<in> {v. dterm_sem I (Const 0) v\n                     \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                 {v. dterm_sem I (Var vid3) v\n                     \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I\n                 (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3)))\n                   i)\n                 (repv (repv (a, b) vid2 r) vid3 ra));\n        (aa, ba) =\n        repv (repv (a, b) vid2 r) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (a, b) vid2 r))\\<rbrakk>\n       \\<Longrightarrow> repv (repv (a, b) vid2 r) vid1\n                          (dterm_sem I\n                            (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                            (repv (a, b) vid2 r))\n                         \\<in> fml_sem I (p1 vid3 vid1)\n 2. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "show \"repv (repv (a, b) vid2 r) vid1\n       (dterm_sem I (Plus (trm.Var vid1) (Times (f0 fid1) (trm.Var vid2))) (repv (a, b) vid2 r))\n       \\<in> fml_sem I (p1 vid3 vid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repv (repv (a, b) vid2 r) vid1\n     (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n       (repv (a, b) vid2 r))\n    \\<in> fml_sem I (p1 vid3 vid1)", "using aaba inPred'"], ["proof (prove)\nusing this:\n  (aa, ba) =\n  repv (repv (a, b) vid2 r) vid1\n   (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n     (repv (a, b) vid2 r))\n  (aa, ba) \\<in> fml_sem I (p1 vid3 vid1)\n\ngoal (1 subgoal):\n 1. repv (repv (a, b) vid2 r) vid1\n     (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n       (repv (a, b) vid2 r))\n    \\<in> fml_sem I (p1 vid3 vid1)", "by (auto)"], ["proof (state)\nthis:\n  repv (repv (a, b) vid2 r) vid1\n   (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n     (repv (a, b) vid2 r))\n  \\<in> fml_sem I (p1 vid3 vid1)\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "fix I::\"('sf,'sc,'sz) interp\"\n  and aa ba ab bb sol \n  and t:: real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "assume good_interp:\"is_interp I\""], ["proof (state)\nthis:\n  is_interp I\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "assume all:\"\n       \\<forall>r. dterm_sem I (Const 0) (repv (ab, bb) vid2 r) \\<le> dterm_sem I (trm.Var vid2) (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra. repv (repv (ab, bb) vid2 r) vid3 ra\n                 \\<in> {v. dterm_sem I (Const 0) v \\<le> dterm_sem I (trm.Var vid3) v} \\<inter>\n                    {v. dterm_sem I (trm.Var vid3) v \\<le> dterm_sem I (trm.Var vid2) v} \\<longrightarrow>\n                 Predicates I vid2\n                  (\\<chi> i. dterm_sem I (singleton (Plus (trm.Var vid1) (Times (f0 fid1) (trm.Var vid3))) i)\n                         (repv (repv (ab, bb) vid2 r) vid3 ra))) \\<longrightarrow>\n                         \n           (\\<forall>\\<omega>. \\<omega> = repv (repv (ab, bb) vid2 r) vid1\n                      (dterm_sem I (Plus (trm.Var vid1) (Times (f0 fid1) (trm.Var vid2))) (repv (ab, bb) vid2 r)) \\<longrightarrow>\n                 \\<omega> \\<in> fml_sem I (p1 vid3 vid1))\""], ["proof (state)\nthis:\n  \\<forall>r.\n     dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n     \\<le> dterm_sem I (Var vid2) (repv (ab, bb) vid2 r) \\<longrightarrow>\n     (\\<forall>ra.\n         repv (repv (ab, bb) vid2 r) vid3 ra\n         \\<in> {v. dterm_sem I (Const 0) v\n                   \\<le> dterm_sem I (Var vid3) v} \\<inter>\n               {v. dterm_sem I (Var vid3) v\n                   \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n         Predicates I vid2\n          (\\<chi>i.\n              dterm_sem I\n               (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n               (repv (repv (ab, bb) vid2 r) vid3 ra))) \\<longrightarrow>\n     (\\<forall>\\<omega>.\n         \\<omega> =\n         repv (repv (ab, bb) vid2 r) vid1\n          (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n            (repv (ab, bb) vid2 r)) \\<longrightarrow>\n         \\<omega> \\<in> fml_sem I (p1 vid3 vid1))\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "assume t:\"0 \\<le> t\""], ["proof (state)\nthis:\n  0 \\<le> t\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "assume aaba:\"(aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\""], ["proof (state)\nthis:\n  (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "assume sol:\"(sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..t}\n        {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x \\<in> fml_sem I (p1 vid2 vid1)}\""], ["proof (state)\nthis:\n  (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..t}\n   {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n       \\<in> fml_sem I (p1 vid2 vid1)}\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "hence constraint:\"\\<And>s. s \\<in> {0 .. t} \\<Longrightarrow> sol s \\<in> {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x \\<in> fml_sem I (p1 vid2 vid1)}\""], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..t}\n   {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n       \\<in> fml_sem I (p1 vid2 vid1)}\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       sol s\n       \\<in> {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n                 \\<in> fml_sem I (p1 vid2 vid1)}", "using solves_ode_domainD"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..t}\n   {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n       \\<in> fml_sem I (p1 vid2 vid1)}\n  \\<lbrakk>(?y solves_ode ?f) ?T ?X; ?t \\<in> ?T\\<rbrakk>\n  \\<Longrightarrow> ?y ?t \\<in> ?X\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       sol s\n       \\<in> {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n                 \\<in> fml_sem I (p1 vid2 vid1)}", "by fastforce\n  \\<comment> \\<open>\\<open>sol 0 = fst (ab, bb)\\<close>\\<close>"], ["proof (state)\nthis:\n  ?s6 \\<in> {0..t} \\<Longrightarrow>\n  sol ?s6\n  \\<in> {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n            \\<in> fml_sem I (p1 vid2 vid1)}\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "assume sol0:\"  (sol 0) = (fst (ab, bb)) \""], ["proof (state)\nthis:\n  sol 0 = fst (ab, bb)\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have impl:\"dterm_sem I (Const 0) (repv (ab, bb) vid2 t) \\<le> dterm_sem I (trm.Var vid2) (repv (ab, bb) vid2 t) \\<longrightarrow>\n           (\\<forall>ra. repv (repv (ab, bb) vid2 t) vid3 ra\n                 \\<in> {v. dterm_sem I (Const 0) v \\<le> dterm_sem I (trm.Var vid3) v} \\<inter>\n                    {v. dterm_sem I (trm.Var vid3) v \\<le> dterm_sem I (trm.Var vid2) v} \\<longrightarrow>\n                 Predicates I vid2\n                  (\\<chi> i. dterm_sem I (singleton (Plus (trm.Var vid1) (Times (f0 fid1) (trm.Var vid3))) i)\n                         (repv (repv (ab, bb) vid2 t) vid3 ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>. \\<omega> = repv (repv (ab, bb) vid2 t) vid1\n                      (dterm_sem I (Plus (trm.Var vid1) (Times (f0 fid1) (trm.Var vid2))) (repv (ab, bb) vid2 t)) \\<longrightarrow>\n                 \\<omega> \\<in> fml_sem I (p1 vid3 vid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dterm_sem I (Const 0) (repv (ab, bb) vid2 t)\n    \\<le> dterm_sem I (Var vid2) (repv (ab, bb) vid2 t) \\<longrightarrow>\n    (\\<forall>ra.\n        repv (repv (ab, bb) vid2 t) vid3 ra\n        \\<in> {v. dterm_sem I (Const 0) v\n                  \\<le> dterm_sem I (Var vid3) v} \\<inter>\n              {v. dterm_sem I (Var vid3) v\n                  \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I\n              (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n              (repv (repv (ab, bb) vid2 t) vid3 ra))) \\<longrightarrow>\n    (\\<forall>\\<omega>.\n        \\<omega> =\n        repv (repv (ab, bb) vid2 t) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (ab, bb) vid2 t)) \\<longrightarrow>\n        \\<omega> \\<in> fml_sem I (p1 vid3 vid1))", "using all"], ["proof (prove)\nusing this:\n  \\<forall>r.\n     dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n     \\<le> dterm_sem I (Var vid2) (repv (ab, bb) vid2 r) \\<longrightarrow>\n     (\\<forall>ra.\n         repv (repv (ab, bb) vid2 r) vid3 ra\n         \\<in> {v. dterm_sem I (Const 0) v\n                   \\<le> dterm_sem I (Var vid3) v} \\<inter>\n               {v. dterm_sem I (Var vid3) v\n                   \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n         Predicates I vid2\n          (\\<chi>i.\n              dterm_sem I\n               (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n               (repv (repv (ab, bb) vid2 r) vid3 ra))) \\<longrightarrow>\n     (\\<forall>\\<omega>.\n         \\<omega> =\n         repv (repv (ab, bb) vid2 r) vid1\n          (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n            (repv (ab, bb) vid2 r)) \\<longrightarrow>\n         \\<omega> \\<in> fml_sem I (p1 vid3 vid1))\n\ngoal (1 subgoal):\n 1. dterm_sem I (Const 0) (repv (ab, bb) vid2 t)\n    \\<le> dterm_sem I (Var vid2) (repv (ab, bb) vid2 t) \\<longrightarrow>\n    (\\<forall>ra.\n        repv (repv (ab, bb) vid2 t) vid3 ra\n        \\<in> {v. dterm_sem I (Const 0) v\n                  \\<le> dterm_sem I (Var vid3) v} \\<inter>\n              {v. dterm_sem I (Var vid3) v\n                  \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I\n              (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n              (repv (repv (ab, bb) vid2 t) vid3 ra))) \\<longrightarrow>\n    (\\<forall>\\<omega>.\n        \\<omega> =\n        repv (repv (ab, bb) vid2 t) vid1\n         (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n           (repv (ab, bb) vid2 t)) \\<longrightarrow>\n        \\<omega> \\<in> fml_sem I (p1 vid3 vid1))", "by auto"], ["proof (state)\nthis:\n  dterm_sem I (Const 0) (repv (ab, bb) vid2 t)\n  \\<le> dterm_sem I (Var vid2) (repv (ab, bb) vid2 t) \\<longrightarrow>\n  (\\<forall>ra.\n      repv (repv (ab, bb) vid2 t) vid3 ra\n      \\<in> {v. dterm_sem I (Const 0) v\n                \\<le> dterm_sem I (Var vid3) v} \\<inter>\n            {v. dterm_sem I (Var vid3) v\n                \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n      Predicates I vid2\n       (\\<chi>i.\n           dterm_sem I\n            (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n            (repv (repv (ab, bb) vid2 t) vid3 ra))) \\<longrightarrow>\n  (\\<forall>\\<omega>.\n      \\<omega> =\n      repv (repv (ab, bb) vid2 t) vid1\n       (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n         (repv (ab, bb) vid2 t)) \\<longrightarrow>\n      \\<omega> \\<in> fml_sem I (p1 vid3 vid1))\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "interpret ll:ll_on_open_it UNIV \"(\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))\" \"UNIV\" 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. ll_on_open_it UNIV (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))) UNIV", "apply(standard)"], ["proof (prove)\ngoal (5 subgoals):\n 1. is_interval UNIV\n 2. local_lipschitz UNIV UNIV (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))\n 3. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       continuous_on UNIV (\\<lambda>t. ODE_sem I (OSing vid1 (f0 fid1)) x)\n 4. open UNIV\n 5. open UNIV", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. local_lipschitz UNIV UNIV\n     (\\<lambda>_ \\<nu>.\n         \\<chi>i. if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)", "unfolding local_lipschitz_def f0_def empty_def sterm_sem.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>UNIV.\n       \\<forall>t\\<in>UNIV.\n          \\<exists>u>0.\n             \\<exists>L.\n                \\<forall>t\\<in>cball t u \\<inter> UNIV.\n                   L-lipschitz_on (cball x u \\<inter> UNIV)\n                    (\\<lambda>\\<nu>.\n                        \\<chi>i.\n                           if i = vid1 then Functions I fid1 (\\<chi>i. 0)\n                           else 0)", "using gt_ex lipschitz_on_constant"], ["proof (prove)\nusing this:\n  \\<exists>y. ?x < y\n  0-lipschitz_on ?U (\\<lambda>x. ?c)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>UNIV.\n       \\<forall>t\\<in>UNIV.\n          \\<exists>u>0.\n             \\<exists>L.\n                \\<forall>t\\<in>cball t u \\<inter> UNIV.\n                   L-lipschitz_on (cball x u \\<inter> UNIV)\n                    (\\<lambda>\\<nu>.\n                        \\<chi>i.\n                           if i = vid1 then Functions I fid1 (\\<chi>i. 0)\n                           else 0)", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have eq_UNIV:\"ll.existence_ivl 0 (sol 0) = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ll.existence_ivl 0 (sol 0) = UNIV", "apply(rule ll.existence_ivl_eq_domain)"], ["proof (prove)\ngoal (5 subgoals):\n 1. 0 \\<in> UNIV\n 2. sol 0 \\<in> UNIV\n 3. \\<And>tm tM t x.\n       \\<lbrakk>tm \\<in> UNIV; tM \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x\\<in>UNIV.\n                                  norm (ODE_sem I (OSing vid1 (f0 fid1)) x)\n                                  \\<le> M + L * norm x\n 4. is_interval UNIV\n 5. UNIV = UNIV", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>tm tM t.\n       \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>x.\n                               norm\n                                (\\<chi>i.\n                                    if i = vid1 then sterm_sem I (f0 fid1) x\n                                    else 0)\n                               \\<le> M + L * norm x", "subgoal for tm tM t"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n    \\<Longrightarrow> \\<exists>M L.\n                         \\<forall>x.\n                            norm\n                             (\\<chi>i.\n                                 if i = vid1 then sterm_sem I (f0 fid1) x\n                                 else 0)\n                            \\<le> M + L * norm x", "apply(unfold f0_def empty_def sterm_sem.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n    \\<Longrightarrow> \\<exists>M L.\n                         \\<forall>x.\n                            norm\n                             (\\<chi>i.\n                                 if i = vid1\n                                 then Functions I fid1 (\\<chi>i. 0) else 0)\n                            \\<le> M + L * norm x", "by(metis add.right_neutral mult_zero_left order_refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done\n  \\<comment> \\<open>Combine with \\<open>flow_usolves_ode\\<close> and \\<open>equals_flowI\\<close> to get uniqueness of solution\\<close>"], ["proof (state)\nthis:\n  ll.existence_ivl 0 (sol 0) = UNIV\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "let ?f = \"(\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have sol_UNIV: \"\\<And>t x. (ll.flow 0 x usolves_ode ?f from 0) (ll.existence_ivl 0 x) UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t x.\n       (ll.flow 0\n         x usolves_ode (\\<lambda>_.\n                           ODE_sem I (OSing vid1 (f0 fid1))) from 0)\n        (ll.existence_ivl 0 x) UNIV", "using ll.flow_usolves_ode"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 \\<in> UNIV; ?x0.0 \\<in> UNIV\\<rbrakk>\n  \\<Longrightarrow> (ll.flow 0\n                      ?x0.0 usolves_ode (\\<lambda>_.\n      ODE_sem I (OSing vid1 (f0 fid1))) from 0)\n                     (ll.existence_ivl 0 ?x0.0) UNIV\n\ngoal (1 subgoal):\n 1. \\<And>t x.\n       (ll.flow 0\n         x usolves_ode (\\<lambda>_.\n                           ODE_sem I (OSing vid1 (f0 fid1))) from 0)\n        (ll.existence_ivl 0 x) UNIV", "by auto"], ["proof (state)\nthis:\n  (ll.flow 0\n    ?x7 usolves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))) from 0)\n   (ll.existence_ivl 0 ?x7) UNIV\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "from sol"], ["proof (chain)\npicking this:\n  (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..t}\n   {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n       \\<in> fml_sem I (p1 vid2 vid1)}", "have sol':\n    \"(sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..t} UNIV\""], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..t}\n   {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n       \\<in> fml_sem I (p1 vid2 vid1)}\n\ngoal (1 subgoal):\n 1. (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..t}\n     UNIV", "apply (rule solves_ode_supset_range)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n        \\<in> fml_sem I (p1 vid2 vid1)}\n    \\<subseteq> UNIV", "by auto"], ["proof (state)\nthis:\n  (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..t}\n   UNIV\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "from sol'"], ["proof (chain)\npicking this:\n  (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..t}\n   UNIV", "have sol'':\"\\<And>s. s \\<ge> 0 \\<Longrightarrow> s \\<le> t \\<Longrightarrow> (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..s} UNIV\""], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..t}\n   UNIV\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> (sol solves_ode\n                          (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                          {0..s} UNIV", "by (simp add: solves_ode_subset)"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> ?s8; ?s8 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> (sol solves_ode\n                     (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                     {0..?s8} UNIV\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have sol0_eq:\"sol 0 = ll.flow  0 (sol 0) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sol 0 = ll.flow 0 (sol 0) 0", "using ll.general.flow_initial_time_if"], ["proof (prove)\nusing this:\n  ll.flow ?t0.0 ?x0.0 ?t0.0 =\n  (if ?t0.0 \\<in> UNIV \\<and> ?x0.0 \\<in> UNIV then ?x0.0 else 0)\n\ngoal (1 subgoal):\n 1. sol 0 = ll.flow 0 (sol 0) 0", "by auto"], ["proof (state)\nthis:\n  sol 0 = ll.flow 0 (sol 0) 0\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have isFlow:\"\\<And>s. s \\<ge> 0 \\<Longrightarrow> s \\<le> t \\<Longrightarrow> sol s = ll.flow 0 (sol 0) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> sol s = ll.flow 0 (sol 0) s", "apply(rule ll.equals_flowI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> 0 \\<in> ?T' s\n 2. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> is_interval (?T' s)\n 3. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ?T' s \\<subseteq> ll.existence_ivl 0 (sol 0)\n 4. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> (sol solves_ode\n                          (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                          (?T' s) UNIV\n 5. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> sol 0 = ll.flow 0 (sol 0) 0\n 6. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> s \\<in> ?T' s", "apply(auto)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s x.\n       \\<lbrakk>0 \\<le> s; s \\<le> t; x \\<in> {s--0}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ll_on_open.existence_ivl UNIV\n                                  (\\<lambda>_ \\<nu>.\n\\<chi>i. if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n                                  UNIV 0 (sol 0)\n 2. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> (sol solves_ode\n                          (\\<lambda>a b.\n                              \\<chi>i.\n                                 if i = vid1 then sterm_sem I (f0 fid1) b\n                                 else 0))\n                          {s--0} UNIV\n 3. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> sol 0 =\n                         ll_on_open.flow UNIV\n                          (\\<lambda>_ \\<nu>.\n                              \\<chi>i.\n                                 if i = vid1\n                                 then sterm_sem I (f0 fid1) \\<nu> else 0)\n                          UNIV 0 (sol 0) 0", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s_; s_ \\<le> t; x_ \\<in> {s_--0}\\<rbrakk>\n    \\<Longrightarrow> x_ \\<in> ll_on_open.existence_ivl UNIV\n                                (\\<lambda>_ \\<nu>.\n                                    \\<chi>i.\n if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n                                UNIV 0 (sol 0)", "using eq_UNIV"], ["proof (prove)\nusing this:\n  ll.existence_ivl 0 (sol 0) = UNIV\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s_; s_ \\<le> t; x_ \\<in> {s_--0}\\<rbrakk>\n    \\<Longrightarrow> x_ \\<in> ll_on_open.existence_ivl UNIV\n                                (\\<lambda>_ \\<nu>.\n                                    \\<chi>i.\n if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n                                UNIV 0 (sol 0)", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> (sol solves_ode\n                          (\\<lambda>a b.\n                              \\<chi>i.\n                                 if i = vid1 then sterm_sem I (f0 fid1) b\n                                 else 0))\n                          {s--0} UNIV\n 2. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> sol 0 =\n                         ll_on_open.flow UNIV\n                          (\\<lambda>_ \\<nu>.\n                              \\<chi>i.\n                                 if i = vid1\n                                 then sterm_sem I (f0 fid1) \\<nu> else 0)\n                          UNIV 0 (sol 0) 0", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s_; s_ \\<le> t\\<rbrakk>\n    \\<Longrightarrow> (sol solves_ode\n                       (\\<lambda>a b.\n                           \\<chi>i.\n                              if i = vid1 then sterm_sem I (f0 fid1) b\n                              else 0))\n                       {s_--0} UNIV", "using sol'' closed_segment_eq_real_ivl t"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 \\<le> ?s8; ?s8 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> (sol solves_ode\n                     (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                     {0..?s8} UNIV\n  {?a--?b} = (if ?a \\<le> ?b then {?a..?b} else {?b..?a})\n  0 \\<le> t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s_; s_ \\<le> t\\<rbrakk>\n    \\<Longrightarrow> (sol solves_ode\n                       (\\<lambda>a b.\n                           \\<chi>i.\n                              if i = vid1 then sterm_sem I (f0 fid1) b\n                              else 0))\n                       {s_--0} UNIV", "by (auto simp add: solves_ode_singleton)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> sol 0 =\n                         ll_on_open.flow UNIV\n                          (\\<lambda>_ \\<nu>.\n                              \\<chi>i.\n                                 if i = vid1\n                                 then sterm_sem I (f0 fid1) \\<nu> else 0)\n                          UNIV 0 (sol 0) 0", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s_; s_ \\<le> t\\<rbrakk>\n    \\<Longrightarrow> sol 0 =\n                      ll_on_open.flow UNIV\n                       (\\<lambda>_ \\<nu>.\n                           \\<chi>i.\n                              if i = vid1 then sterm_sem I (f0 fid1) \\<nu>\n                              else 0)\n                       UNIV 0 (sol 0) 0", "using eq_UNIV sol sol0_eq"], ["proof (prove)\nusing this:\n  ll.existence_ivl 0 (sol 0) = UNIV\n  (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..t}\n   {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n       \\<in> fml_sem I (p1 vid2 vid1)}\n  sol 0 = ll.flow 0 (sol 0) 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s_; s_ \\<le> t\\<rbrakk>\n    \\<Longrightarrow> sol 0 =\n                      ll_on_open.flow UNIV\n                       (\\<lambda>_ \\<nu>.\n                           \\<chi>i.\n                              if i = vid1 then sterm_sem I (f0 fid1) \\<nu>\n                              else 0)\n                       UNIV 0 (sol 0) 0", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> ?s8; ?s8 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> sol ?s8 = ll.flow 0 (sol 0) ?s8\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "let ?c = \"Functions I fid1 (\\<chi> _. 0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "let ?sol = \"(\\<lambda>t. \\<chi> i. if i = vid1 then (ab $ i) + ?c * t else (ab $ i))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have vec_simp:\"(\\<lambda>a b. \\<chi> i. if i = vid1 then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) b else 0) \n      = (\\<lambda>a b. \\<chi> i. if i = vid1 then Functions I fid1 (\\<chi> i. 0) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a b.\n        \\<chi>i.\n           if i = vid1 then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) b\n           else 0) =\n    (\\<lambda>a b.\n        \\<chi>i. if i = vid1 then Functions I fid1 (\\<chi>i. 0) else 0)", "by (auto simp add: vec_eq_iff cong: if_cong)"], ["proof (state)\nthis:\n  (\\<lambda>a b.\n      \\<chi>i.\n         if i = vid1 then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) b\n         else 0) =\n  (\\<lambda>a b.\n      \\<chi>i. if i = vid1 then Functions I fid1 (\\<chi>i. 0) else 0)\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have exp_sol:\"(?sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..t}\n    UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         \\<chi>i.\n            if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else ab $ i) solves_ode\n     (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n     {0..t} UNIV", "apply(auto simp add: f0_def empty_def vec_simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         \\<chi>i.\n            if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else ab $ i) solves_ode\n     (\\<lambda>a b.\n         \\<chi>i.\n            if i = vid1 then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) b\n            else 0))\n     {0..t} UNIV", "apply(rule solves_odeI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((\\<lambda>t.\n         \\<chi>i.\n            if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else ab $ i) has_vderiv_on\n     (\\<lambda>t.\n         \\<chi>i.\n            if i = vid1\n            then sterm_sem I ($f fid1 (\\<lambda>i. Const 0))\n                  (\\<chi>i.\n                      if i = vid1\n                      then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n                      else ab $ i)\n            else 0))\n     {0..t}\n 2. \\<And>ta.\n       ta \\<in> {0..t} \\<Longrightarrow>\n       (\\<chi>i.\n           if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * ta\n           else ab $ i)\n       \\<in> UNIV", "apply(auto simp only: has_vderiv_on_def has_vector_derivative_def box_sem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>t.\n            \\<chi>i.\n               if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n               else ab $ i) has_derivative\n        (\\<lambda>xa.\n            xa *\\<^sub>R\n            (\\<chi>i.\n                if i = vid1\n                then sterm_sem I ($f fid1 (\\<lambda>i. Const 0))\n                      (\\<chi>i.\n                          if i = vid1\n                          then ab $ i + Functions I fid1 (\\<chi>_. 0) * x\n                          else ab $ i)\n                else 0)))\n        (at x within {0..t})", "apply (rule has_derivative_vec[THEN has_derivative_eq_rhs])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x i.\n       x \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>t.\n            if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else ab $ i) has_derivative\n        ?f'16 x i)\n        (at x within {0..t})\n 2. \\<And>x.\n       x \\<in> {0..t} \\<Longrightarrow>\n       (\\<lambda>h. \\<chi>i. ?f'16 x i h) =\n       (\\<lambda>xa.\n           xa *\\<^sub>R\n           (\\<chi>i.\n               if i = vid1\n               then sterm_sem I ($f fid1 (\\<lambda>i. Const 0))\n                     (\\<chi>i.\n                         if i = vid1\n                         then ab $ i + Functions I fid1 (\\<chi>_. 0) * x\n                         else ab $ i)\n               else 0))", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {0..t} \\<Longrightarrow>\n       (\\<lambda>h. \\<chi>i. ?f'16 x i h) =\n       (\\<lambda>xa.\n           xa *\\<^sub>R\n           (\\<chi>i.\n               if i = vid1\n               then sterm_sem I ($f fid1 (\\<lambda>i. Const 0))\n                     (\\<chi>i.\n                         if i = vid1\n                         then ab $ i + Functions I fid1 (\\<chi>_. 0) * x\n                         else ab $ i)\n               else 0))\n 2. \\<And>x i.\n       x \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>t.\n            if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else ab $ i) has_derivative\n        ?f'16 x i)\n        (at x within {0..t})", "apply (rule ext)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x h.\n       x \\<in> {0..t} \\<Longrightarrow>\n       (\\<chi>i. ?f'16 x i h) =\n       h *\\<^sub>R\n       (\\<chi>i.\n           if i = vid1\n           then sterm_sem I ($f fid1 (\\<lambda>i. Const 0))\n                 (\\<chi>i.\n                     if i = vid1\n                     then ab $ i + Functions I fid1 (\\<chi>_. 0) * x\n                     else ab $ i)\n           else 0)\n 2. \\<And>x i.\n       x \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>t.\n            if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else ab $ i) has_derivative\n        ?f'16 x i)\n        (at x within {0..t})", "apply (subst scaleR_vec_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x h.\n       x \\<in> {0..t} \\<Longrightarrow>\n       (\\<chi>i. ?f'23 x x h h i) =\n       (\\<chi>i.\n           h *\\<^sub>R\n           (\\<chi>i.\n               if i = vid1\n               then sterm_sem I ($f fid1 (\\<lambda>i. Const 0))\n                     (\\<chi>i.\n                         if i = vid1\n                         then ab $ i + Functions I fid1 (\\<chi>_. 0) * x\n                         else ab $ i)\n               else 0) $\n           i)\n 2. \\<And>x i.\n       x \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>t.\n            if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else ab $ i) has_derivative\n        (\\<lambda>h. ?f'23 x x h h i))\n        (at x within {0..t})", "apply (rule refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x i.\n       x \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>t.\n            if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n            else ab $ i) has_derivative\n        (\\<lambda>h.\n            h *\\<^sub>R\n            (\\<chi>i.\n                if i = vid1\n                then sterm_sem I ($f fid1 (\\<lambda>i. Const 0))\n                      (\\<chi>i.\n                          if i = vid1\n                          then ab $ i + Functions I fid1 (\\<chi>_. 0) * x\n                          else ab $ i)\n                else 0) $\n            i))\n        (at x within {0..t})", "apply (auto intro!: derivative_eq_intros)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ((\\<lambda>t.\n       \\<chi>i.\n          if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n          else ab $ i) solves_ode\n   (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n   {0..t} UNIV\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "from exp_sol"], ["proof (chain)\npicking this:\n  ((\\<lambda>t.\n       \\<chi>i.\n          if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n          else ab $ i) solves_ode\n   (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n   {0..t} UNIV", "have exp_sol':\"\\<And>s. s \\<ge> 0 \\<Longrightarrow> s \\<le> t \\<Longrightarrow> (?sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..s} UNIV\""], ["proof (prove)\nusing this:\n  ((\\<lambda>t.\n       \\<chi>i.\n          if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n          else ab $ i) solves_ode\n   (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n   {0..t} UNIV\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>t.\n                              \\<chi>i.\n                                 if i = vid1\n                                 then ab $ i +\nFunctions I fid1 (\\<chi>_. 0) * t\n                                 else ab $ i) solves_ode\n                          (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                          {0..s} UNIV", "by (simp add: solves_ode_subset)"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> ?s9; ?s9 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t.\n                         \\<chi>i.\n                            if i = vid1\n                            then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n                            else ab $ i) solves_ode\n                     (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                     {0..?s9} UNIV\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have exp_sol0_eq:\"?sol 0 = ll.flow  0 (?sol 0) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n        else ab $ i) =\n    ll.flow 0\n     (\\<chi>i.\n         if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n         else ab $ i)\n     0", "using ll.general.flow_initial_time_if"], ["proof (prove)\nusing this:\n  ll.flow ?t0.0 ?x0.0 ?t0.0 =\n  (if ?t0.0 \\<in> UNIV \\<and> ?x0.0 \\<in> UNIV then ?x0.0 else 0)\n\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n        else ab $ i) =\n    ll.flow 0\n     (\\<chi>i.\n         if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n         else ab $ i)\n     0", "by auto"], ["proof (state)\nthis:\n  (\\<chi>i.\n      if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n      else ab $ i) =\n  ll.flow 0\n   (\\<chi>i.\n       if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n       else ab $ i)\n   0\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have more_eq:\"(\\<chi> i. if i = vid1 then ab $ i + Functions I fid1 (\\<chi> _. 0) * 0 else ab $ i) = sol 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n        else ab $ i) =\n    sol 0", "using sol0"], ["proof (prove)\nusing this:\n  sol 0 = fst (ab, bb)\n\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n        else ab $ i) =\n    sol 0", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. ab = sol 0 \\<Longrightarrow>\n    (\\<chi>i.\n        if i = vid1 then sol 0 $ i + Functions I fid1 (\\<chi>_. 0) * 0\n        else sol 0 $ i) =\n    sol 0", "apply(rule vec_extensionality)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       ab = sol 0 \\<Longrightarrow>\n       (\\<chi>i.\n           if i = vid1 then sol 0 $ i + Functions I fid1 (\\<chi>_. 0) * 0\n           else sol 0 $ i) $\n       i =\n       sol 0 $ i", "by(auto)"], ["proof (state)\nthis:\n  (\\<chi>i.\n      if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n      else ab $ i) =\n  sol 0\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have exp_isFlow:\"\\<And>s. s \\<ge> 0 \\<Longrightarrow> s \\<le> t \\<Longrightarrow> ?sol s = ll.flow 0 (sol 0) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> (\\<chi>i.\n                             if i = vid1\n                             then ab $ i + Functions I fid1 (\\<chi>_. 0) * s\n                             else ab $ i) =\n                         ll.flow 0 (sol 0) s", "apply(rule ll.equals_flowI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> 0 \\<in> ?T' s\n 2. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> is_interval (?T' s)\n 3. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ?T' s \\<subseteq> ll.existence_ivl 0 (sol 0)\n 4. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>a.\n                              \\<chi>i.\n                                 if i = vid1\n                                 then ab $ i +\nFunctions I fid1 (\\<chi>_. 0) * a\n                                 else ab $ i) solves_ode\n                          (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                          (?T' s) UNIV\n 5. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> (\\<chi>i.\n                             if i = vid1\n                             then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n                             else ab $ i) =\n                         ll.flow 0 (sol 0) 0\n 6. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> s \\<in> ?T' s", "apply(auto)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s x.\n       \\<lbrakk>0 \\<le> s; s \\<le> t; x \\<in> {s--0}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ll_on_open.existence_ivl UNIV\n                                  (\\<lambda>_ \\<nu>.\n\\<chi>i. if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n                                  UNIV 0 (sol 0)\n 2. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>t.\n                              \\<chi>i.\n                                 if i = vid1\n                                 then ab $ i +\nFunctions I fid1 (\\<chi>_. 0) * t\n                                 else ab $ i) solves_ode\n                          (\\<lambda>a b.\n                              \\<chi>i.\n                                 if i = vid1 then sterm_sem I (f0 fid1) b\n                                 else 0))\n                          {s--0} UNIV\n 3. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> (\\<chi>i.\n                             if i = vid1\n                             then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n                             else ab $ i) =\n                         ll_on_open.flow UNIV\n                          (\\<lambda>_ \\<nu>.\n                              \\<chi>i.\n                                 if i = vid1\n                                 then sterm_sem I (f0 fid1) \\<nu> else 0)\n                          UNIV 0 (sol 0) 0", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s_; s_ \\<le> t; x_ \\<in> {s_--0}\\<rbrakk>\n    \\<Longrightarrow> x_ \\<in> ll_on_open.existence_ivl UNIV\n                                (\\<lambda>_ \\<nu>.\n                                    \\<chi>i.\n if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n                                UNIV 0 (sol 0)", "using eq_UNIV"], ["proof (prove)\nusing this:\n  ll.existence_ivl 0 (sol 0) = UNIV\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s_; s_ \\<le> t; x_ \\<in> {s_--0}\\<rbrakk>\n    \\<Longrightarrow> x_ \\<in> ll_on_open.existence_ivl UNIV\n                                (\\<lambda>_ \\<nu>.\n                                    \\<chi>i.\n if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n                                UNIV 0 (sol 0)", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>t.\n                              \\<chi>i.\n                                 if i = vid1\n                                 then ab $ i +\nFunctions I fid1 (\\<chi>_. 0) * t\n                                 else ab $ i) solves_ode\n                          (\\<lambda>a b.\n                              \\<chi>i.\n                                 if i = vid1 then sterm_sem I (f0 fid1) b\n                                 else 0))\n                          {s--0} UNIV\n 2. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> (\\<chi>i.\n                             if i = vid1\n                             then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n                             else ab $ i) =\n                         ll_on_open.flow UNIV\n                          (\\<lambda>_ \\<nu>.\n                              \\<chi>i.\n                                 if i = vid1\n                                 then sterm_sem I (f0 fid1) \\<nu> else 0)\n                          UNIV 0 (sol 0) 0", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> (\\<chi>i.\n                             if i = vid1\n                             then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n                             else ab $ i) =\n                         ll_on_open.flow UNIV\n                          (\\<lambda>_ \\<nu>.\n                              \\<chi>i.\n                                 if i = vid1\n                                 then sterm_sem I (f0 fid1) \\<nu> else 0)\n                          UNIV 0 (sol 0) 0\n 2. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>t.\n                              \\<chi>i.\n                                 if i = vid1\n                                 then ab $ i +\nFunctions I fid1 (\\<chi>_. 0) * t\n                                 else ab $ i) solves_ode\n                          (\\<lambda>a b.\n                              \\<chi>i.\n                                 if i = vid1 then sterm_sem I (f0 fid1) b\n                                 else 0))\n                          {s--0} UNIV", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>i.\n                          if i = vid1\n                          then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n                          else ab $ i) =\n                      ll_on_open.flow UNIV\n                       (\\<lambda>_ \\<nu>.\n                           \\<chi>i.\n                              if i = vid1 then sterm_sem I (f0 fid1) \\<nu>\n                              else 0)\n                       UNIV 0 (sol 0) 0", "using eq_UNIV"], ["proof (prove)\nusing this:\n  ll.existence_ivl 0 (sol 0) = UNIV\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>i.\n                          if i = vid1\n                          then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n                          else ab $ i) =\n                      ll_on_open.flow UNIV\n                       (\\<lambda>_ \\<nu>.\n                           \\<chi>i.\n                              if i = vid1 then sterm_sem I (f0 fid1) \\<nu>\n                              else 0)\n                       UNIV 0 (sol 0) 0", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t;\n     ll_on_open.existence_ivl UNIV\n      (\\<lambda>_ \\<nu>.\n          \\<chi>i. if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n      UNIV 0 (sol 0) =\n     UNIV\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>i.\n                          if i = vid1\n                          then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n                          else ab $ i) =\n                      ll_on_open.flow UNIV\n                       (\\<lambda>_ \\<nu>.\n                           \\<chi>i.\n                              if i = vid1 then sterm_sem I (f0 fid1) \\<nu>\n                              else 0)\n                       UNIV 0 (sol 0) 0", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t;\n     ll_on_open.existence_ivl UNIV\n      (\\<lambda>_ \\<nu>.\n          \\<chi>i. if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n      UNIV 0 (sol 0) =\n     UNIV\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>i.\n                          if i = vid1\n                          then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n                          else ab $ i) =\n                      ll_on_open.flow UNIV\n                       (\\<lambda>_ \\<nu>.\n                           \\<chi>i.\n                              if i = vid1 then sterm_sem I (f0 fid1) \\<nu>\n                              else 0)\n                       UNIV 0 (sol 0) 0", "using exp_sol exp_sol0_eq more_eq"], ["proof (prove)\nusing this:\n  ((\\<lambda>t.\n       \\<chi>i.\n          if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n          else ab $ i) solves_ode\n   (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n   {0..t} UNIV\n  (\\<chi>i.\n      if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n      else ab $ i) =\n  ll.flow 0\n   (\\<chi>i.\n       if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n       else ab $ i)\n   0\n  (\\<chi>i.\n      if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n      else ab $ i) =\n  sol 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t;\n     ll_on_open.existence_ivl UNIV\n      (\\<lambda>_ \\<nu>.\n          \\<chi>i. if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n      UNIV 0 (sol 0) =\n     UNIV\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>i.\n                          if i = vid1\n                          then ab $ i + Functions I fid1 (\\<chi>_. 0) * 0\n                          else ab $ i) =\n                      ll_on_open.flow UNIV\n                       (\\<lambda>_ \\<nu>.\n                           \\<chi>i.\n                              if i = vid1 then sterm_sem I (f0 fid1) \\<nu>\n                              else 0)\n                       UNIV 0 (sol 0) 0", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>t.\n                              \\<chi>i.\n                                 if i = vid1\n                                 then ab $ i +\nFunctions I fid1 (\\<chi>_. 0) * t\n                                 else ab $ i) solves_ode\n                          (\\<lambda>a b.\n                              \\<chi>i.\n                                 if i = vid1 then sterm_sem I (f0 fid1) b\n                                 else 0))\n                          {s--0} UNIV", "using exp_sol' closed_segment_eq_real_ivl t"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 \\<le> ?s9; ?s9 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t.\n                         \\<chi>i.\n                            if i = vid1\n                            then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n                            else ab $ i) solves_ode\n                     (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n                     {0..?s9} UNIV\n  {?a--?b} = (if ?a \\<le> ?b then {?a..?b} else {?b..?a})\n  0 \\<le> t\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>t.\n                              \\<chi>i.\n                                 if i = vid1\n                                 then ab $ i +\nFunctions I fid1 (\\<chi>_. 0) * t\n                                 else ab $ i) solves_ode\n                          (\\<lambda>a b.\n                              \\<chi>i.\n                                 if i = vid1 then sterm_sem I (f0 fid1) b\n                                 else 0))\n                          {s--0} UNIV", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> t;\n     \\<And>s.\n        \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n        \\<Longrightarrow> ((\\<lambda>t.\n                               \\<chi>i.\n                                  if i = vid1\n                                  then ab $ i +\n Functions I fid1 (\\<chi>_. 0) * t\n                                  else ab $ i) solves_ode\n                           (\\<lambda>a b.\n                               \\<chi>i.\n                                  if i = vid1 then sterm_sem I (f0 fid1) b\n                                  else 0))\n                           {0..s} UNIV;\n     \\<And>a b. {a--b} = (if a \\<le> b then {a..b} else {b..a})\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           \\<chi>i.\n                              if i = vid1\n                              then ab $ i +\n                                   Functions I fid1 (\\<chi>_. 0) * t\n                              else ab $ i) solves_ode\n                       (\\<lambda>a b.\n                           \\<chi>i.\n                              if i = vid1 then sterm_sem I (f0 fid1) b\n                              else 0))\n                       {0} UNIV", "by (simp add: solves_ode_singleton)"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> ?s9; ?s9 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> (\\<chi>i.\n                        if i = vid1\n                        then ab $ i + Functions I fid1 (\\<chi>_. 0) * ?s9\n                        else ab $ i) =\n                    ll.flow 0 (sol 0) ?s9\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have sol_eq_exp:\"\\<And>s. s \\<ge> 0 \\<Longrightarrow> s \\<le> t \\<Longrightarrow> ?sol s = sol s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> (\\<chi>i.\n                             if i = vid1\n                             then ab $ i + Functions I fid1 (\\<chi>_. 0) * s\n                             else ab $ i) =\n                         sol s", "unfolding exp_isFlow isFlow"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> ll.flow 0 (sol 0) s = ll.flow 0 (sol 0) s", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> ?s9; ?s9 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> (\\<chi>i.\n                        if i = vid1\n                        then ab $ i + Functions I fid1 (\\<chi>_. 0) * ?s9\n                        else ab $ i) =\n                    sol ?s9\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>0 \\<le> ?s9; ?s9 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> (\\<chi>i.\n                        if i = vid1\n                        then ab $ i + Functions I fid1 (\\<chi>_. 0) * ?s9\n                        else ab $ i) =\n                    sol ?s9", "have sol_eq_exp_t:\"?sol t = sol t\""], ["proof (prove)\nusing this:\n  \\<lbrakk>0 \\<le> ?s9; ?s9 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> (\\<chi>i.\n                        if i = vid1\n                        then ab $ i + Functions I fid1 (\\<chi>_. 0) * ?s9\n                        else ab $ i) =\n                    sol ?s9\n\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n        else ab $ i) =\n    sol t", "using t"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 \\<le> ?s9; ?s9 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> (\\<chi>i.\n                        if i = vid1\n                        then ab $ i + Functions I fid1 (\\<chi>_. 0) * ?s9\n                        else ab $ i) =\n                    sol ?s9\n  0 \\<le> t\n\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n        else ab $ i) =\n    sol t", "by auto"], ["proof (state)\nthis:\n  (\\<chi>i.\n      if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n      else ab $ i) =\n  sol t\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "then"], ["proof (chain)\npicking this:\n  (\\<chi>i.\n      if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n      else ab $ i) =\n  sol t", "have sol_eq_exp_t':\"sol t $ vid1 = ?sol t $ vid1\""], ["proof (prove)\nusing this:\n  (\\<chi>i.\n      if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n      else ab $ i) =\n  sol t\n\ngoal (1 subgoal):\n 1. sol t $ vid1 =\n    (\\<chi>i.\n        if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n        else ab $ i) $\n    vid1", "by auto"], ["proof (state)\nthis:\n  sol t $ vid1 =\n  (\\<chi>i.\n      if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n      else ab $ i) $\n  vid1\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "then"], ["proof (chain)\npicking this:\n  sol t $ vid1 =\n  (\\<chi>i.\n      if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n      else ab $ i) $\n  vid1", "have useful:\"?sol t $ vid1 = ab $ vid1 + Functions I fid1 (\\<chi> i. 0) * t\""], ["proof (prove)\nusing this:\n  sol t $ vid1 =\n  (\\<chi>i.\n      if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n      else ab $ i) $\n  vid1\n\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n        else ab $ i) $\n    vid1 =\n    ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * t", "by auto"], ["proof (state)\nthis:\n  (\\<chi>i.\n      if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n      else ab $ i) $\n  vid1 =\n  ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * t\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "from sol_eq_exp_t' useful"], ["proof (chain)\npicking this:\n  sol t $ vid1 =\n  (\\<chi>i.\n      if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n      else ab $ i) $\n  vid1\n  (\\<chi>i.\n      if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n      else ab $ i) $\n  vid1 =\n  ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * t", "have useful':\"sol t $ vid1 = ab $ vid1 + Functions I fid1 (\\<chi> i. 0) * t\""], ["proof (prove)\nusing this:\n  sol t $ vid1 =\n  (\\<chi>i.\n      if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n      else ab $ i) $\n  vid1\n  (\\<chi>i.\n      if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * t\n      else ab $ i) $\n  vid1 =\n  ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * t\n\ngoal (1 subgoal):\n 1. sol t $ vid1 = ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * t", "by auto"], ["proof (state)\nthis:\n  sol t $ vid1 = ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * t\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have sol_int:\"((ll.flow 0 (sol 0)) usolves_ode ?f from 0) {0..t} {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x \\<in> fml_sem I (p1 vid2 vid1)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ll.flow 0\n      (sol 0) usolves_ode (\\<lambda>_.\n                              ODE_sem I (OSing vid1 (f0 fid1))) from 0)\n     {0..t}\n     {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n         \\<in> fml_sem I (p1 vid2 vid1)}", "apply (rule usolves_ode_subset_range[of \"(ll.flow 0 (sol 0))\" \"?f\" \"0\" \"{0..t}\" \"UNIV\" \"{x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x \\<in> fml_sem I (p1 vid2 vid1)}\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. (ll.flow 0\n      (sol 0) usolves_ode (\\<lambda>_.\n                              ODE_sem I (OSing vid1 (f0 fid1))) from 0)\n     {0..t} UNIV\n 2. ll.flow 0 (sol 0) ` {0..t}\n    \\<subseteq> {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n                    \\<in> fml_sem I (p1 vid2 vid1)}\n 3. {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n        \\<in> fml_sem I (p1 vid2 vid1)}\n    \\<subseteq> UNIV", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ll.flow 0\n      (sol 0) usolves_ode (\\<lambda>_.\n                              ODE_sem I (OSing vid1 (f0 fid1))) from 0)\n     {0..t} UNIV", "using eq_UNIV sol_UNIV[of \"(sol 0)\"]"], ["proof (prove)\nusing this:\n  ll.existence_ivl 0 (sol 0) = UNIV\n  (ll.flow 0\n    (sol 0) usolves_ode (\\<lambda>_.\n                            ODE_sem I (OSing vid1 (f0 fid1))) from 0)\n   (ll.existence_ivl 0 (sol 0)) UNIV\n\ngoal (1 subgoal):\n 1. (ll.flow 0\n      (sol 0) usolves_ode (\\<lambda>_.\n                              ODE_sem I (OSing vid1 (f0 fid1))) from 0)\n     {0..t} UNIV", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ll_on_open.existence_ivl UNIV\n              (\\<lambda>_ \\<nu>.\n                  \\<chi>i.\n                     if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n              UNIV 0 (sol 0) =\n             UNIV;\n     (ll_on_open.flow UNIV\n       (\\<lambda>_ \\<nu>.\n           \\<chi>i. if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n       UNIV 0\n       (sol 0) usolves_ode (\\<lambda>t y.\n                               \\<chi>i.\n                                  if i = vid1 then sterm_sem I (f0 fid1) y\n                                  else 0) from 0)\n      UNIV UNIV\\<rbrakk>\n    \\<Longrightarrow> (ll_on_open.flow UNIV\n                        (\\<lambda>_ \\<nu>.\n                            \\<chi>i.\n                               if i = vid1 then sterm_sem I (f0 fid1) \\<nu>\n                               else 0)\n                        UNIV 0\n                        (sol 0) usolves_ode (\\<lambda>t y.\n          \\<chi>i. if i = vid1 then sterm_sem I (f0 fid1) y else 0) from 0)\n                       {0..t} UNIV", "apply (rule usolves_ode_subset)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>ll_on_open.existence_ivl UNIV\n              (\\<lambda>_ \\<nu>.\n                  \\<chi>i.\n                     if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n              UNIV 0 (sol 0) =\n             UNIV;\n     (ll_on_open.flow UNIV\n       (\\<lambda>_ \\<nu>.\n           \\<chi>i. if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n       UNIV 0\n       (sol 0) usolves_ode (\\<lambda>t y.\n                               \\<chi>i.\n                                  if i = vid1 then sterm_sem I (f0 fid1) y\n                                  else 0) from 0)\n      UNIV UNIV\\<rbrakk>\n    \\<Longrightarrow> (ll_on_open.flow UNIV\n                        (\\<lambda>_ \\<nu>.\n                            \\<chi>i.\n                               if i = vid1 then sterm_sem I (f0 fid1) \\<nu>\n                               else 0)\n                        UNIV 0\n                        (sol 0) usolves_ode (\\<lambda>t y.\n          \\<chi>i. if i = vid1 then sterm_sem I (f0 fid1) y else 0) from 0)\n                       ?T6 UNIV\n 2. \\<lbrakk>ll_on_open.existence_ivl UNIV\n              (\\<lambda>_ \\<nu>.\n                  \\<chi>i.\n                     if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n              UNIV 0 (sol 0) =\n             UNIV;\n     (ll_on_open.flow UNIV\n       (\\<lambda>_ \\<nu>.\n           \\<chi>i. if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n       UNIV 0\n       (sol 0) usolves_ode (\\<lambda>t y.\n                               \\<chi>i.\n                                  if i = vid1 then sterm_sem I (f0 fid1) y\n                                  else 0) from 0)\n      UNIV UNIV\\<rbrakk>\n    \\<Longrightarrow> {0..t} \\<subseteq> ?T6\n 3. \\<lbrakk>ll_on_open.existence_ivl UNIV\n              (\\<lambda>_ \\<nu>.\n                  \\<chi>i.\n                     if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n              UNIV 0 (sol 0) =\n             UNIV;\n     (ll_on_open.flow UNIV\n       (\\<lambda>_ \\<nu>.\n           \\<chi>i. if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n       UNIV 0\n       (sol 0) usolves_ode (\\<lambda>t y.\n                               \\<chi>i.\n                                  if i = vid1 then sterm_sem I (f0 fid1) y\n                                  else 0) from 0)\n      UNIV UNIV\\<rbrakk>\n    \\<Longrightarrow> 0 \\<in> {0..t}\n 4. \\<lbrakk>ll_on_open.existence_ivl UNIV\n              (\\<lambda>_ \\<nu>.\n                  \\<chi>i.\n                     if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n              UNIV 0 (sol 0) =\n             UNIV;\n     (ll_on_open.flow UNIV\n       (\\<lambda>_ \\<nu>.\n           \\<chi>i. if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n       UNIV 0\n       (sol 0) usolves_ode (\\<lambda>t y.\n                               \\<chi>i.\n                                  if i = vid1 then sterm_sem I (f0 fid1) y\n                                  else 0) from 0)\n      UNIV UNIV\\<rbrakk>\n    \\<Longrightarrow> is_interval {0..t}", "using t"], ["proof (prove)\nusing this:\n  0 \\<le> t\n\ngoal (4 subgoals):\n 1. \\<lbrakk>ll_on_open.existence_ivl UNIV\n              (\\<lambda>_ \\<nu>.\n                  \\<chi>i.\n                     if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n              UNIV 0 (sol 0) =\n             UNIV;\n     (ll_on_open.flow UNIV\n       (\\<lambda>_ \\<nu>.\n           \\<chi>i. if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n       UNIV 0\n       (sol 0) usolves_ode (\\<lambda>t y.\n                               \\<chi>i.\n                                  if i = vid1 then sterm_sem I (f0 fid1) y\n                                  else 0) from 0)\n      UNIV UNIV\\<rbrakk>\n    \\<Longrightarrow> (ll_on_open.flow UNIV\n                        (\\<lambda>_ \\<nu>.\n                            \\<chi>i.\n                               if i = vid1 then sterm_sem I (f0 fid1) \\<nu>\n                               else 0)\n                        UNIV 0\n                        (sol 0) usolves_ode (\\<lambda>t y.\n          \\<chi>i. if i = vid1 then sterm_sem I (f0 fid1) y else 0) from 0)\n                       ?T6 UNIV\n 2. \\<lbrakk>ll_on_open.existence_ivl UNIV\n              (\\<lambda>_ \\<nu>.\n                  \\<chi>i.\n                     if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n              UNIV 0 (sol 0) =\n             UNIV;\n     (ll_on_open.flow UNIV\n       (\\<lambda>_ \\<nu>.\n           \\<chi>i. if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n       UNIV 0\n       (sol 0) usolves_ode (\\<lambda>t y.\n                               \\<chi>i.\n                                  if i = vid1 then sterm_sem I (f0 fid1) y\n                                  else 0) from 0)\n      UNIV UNIV\\<rbrakk>\n    \\<Longrightarrow> {0..t} \\<subseteq> ?T6\n 3. \\<lbrakk>ll_on_open.existence_ivl UNIV\n              (\\<lambda>_ \\<nu>.\n                  \\<chi>i.\n                     if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n              UNIV 0 (sol 0) =\n             UNIV;\n     (ll_on_open.flow UNIV\n       (\\<lambda>_ \\<nu>.\n           \\<chi>i. if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n       UNIV 0\n       (sol 0) usolves_ode (\\<lambda>t y.\n                               \\<chi>i.\n                                  if i = vid1 then sterm_sem I (f0 fid1) y\n                                  else 0) from 0)\n      UNIV UNIV\\<rbrakk>\n    \\<Longrightarrow> 0 \\<in> {0..t}\n 4. \\<lbrakk>ll_on_open.existence_ivl UNIV\n              (\\<lambda>_ \\<nu>.\n                  \\<chi>i.\n                     if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n              UNIV 0 (sol 0) =\n             UNIV;\n     (ll_on_open.flow UNIV\n       (\\<lambda>_ \\<nu>.\n           \\<chi>i. if i = vid1 then sterm_sem I (f0 fid1) \\<nu> else 0)\n       UNIV 0\n       (sol 0) usolves_ode (\\<lambda>t y.\n                               \\<chi>i.\n                                  if i = vid1 then sterm_sem I (f0 fid1) y\n                                  else 0) from 0)\n      UNIV UNIV\\<rbrakk>\n    \\<Longrightarrow> is_interval {0..t}", "by(auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ll.flow 0 (sol 0) ` {0..t}\n    \\<subseteq> {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n                    \\<in> fml_sem I (p1 vid2 vid1)}\n 2. {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n        \\<in> fml_sem I (p1 vid2 vid1)}\n    \\<subseteq> UNIV", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>0 \\<le> xa; xa \\<le> t\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb)\n                          (ll_on_open.flow UNIV\n                            (\\<lambda>_ \\<nu>.\n                                \\<chi>i.\n                                   if i = vid1\n                                   then sterm_sem I (f0 fid1) \\<nu> else 0)\n                            UNIV 0 (sol 0) xa)\n                         \\<in> fml_sem I (p1 vid2 vid1)", "using sol"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1)))) {0..t}\n   {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n       \\<in> fml_sem I (p1 vid2 vid1)}\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>0 \\<le> xa; xa \\<le> t\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb)\n                          (ll_on_open.flow UNIV\n                            (\\<lambda>_ \\<nu>.\n                                \\<chi>i.\n                                   if i = vid1\n                                   then sterm_sem I (f0 fid1) \\<nu> else 0)\n                            UNIV 0 (sol 0) xa)\n                         \\<in> fml_sem I (p1 vid2 vid1)", "apply(auto  dest!: solves_ode_domainD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>0 \\<le> xa; xa \\<le> t;\n        mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol xa)\n        \\<in> fml_sem I (p1 vid2 vid1)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb)\n                          (ll_on_open.flow UNIV\n                            (\\<lambda>_ \\<nu>.\n                                \\<chi>i.\n                                   if i = vid1\n                                   then sterm_sem I (f0 fid1) \\<nu> else 0)\n                            UNIV 0 (sol 0) xa)\n                         \\<in> fml_sem I (p1 vid2 vid1)", "subgoal for xa"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> xa; xa \\<le> t;\n     mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol xa)\n     \\<in> fml_sem I (p1 vid2 vid1)\\<rbrakk>\n    \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb)\n                       (ll_on_open.flow UNIV\n                         (\\<lambda>_ \\<nu>.\n                             \\<chi>i.\n                                if i = vid1 then sterm_sem I (f0 fid1) \\<nu>\n                                else 0)\n                         UNIV 0 (sol 0) xa)\n                      \\<in> fml_sem I (p1 vid2 vid1)", "using isFlow[of xa]"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 \\<le> xa; xa \\<le> t\\<rbrakk>\n  \\<Longrightarrow> sol xa = ll.flow 0 (sol 0) xa\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> xa; xa \\<le> t;\n     mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol xa)\n     \\<in> fml_sem I (p1 vid2 vid1)\\<rbrakk>\n    \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb)\n                       (ll_on_open.flow UNIV\n                         (\\<lambda>_ \\<nu>.\n                             \\<chi>i.\n                                if i = vid1 then sterm_sem I (f0 fid1) \\<nu>\n                                else 0)\n                         UNIV 0 (sol 0) xa)\n                      \\<in> fml_sem I (p1 vid2 vid1)", "by(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (ll.flow 0\n    (sol 0) usolves_ode (\\<lambda>_.\n                            ODE_sem I (OSing vid1 (f0 fid1))) from 0)\n   {0..t}\n   {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n       \\<in> fml_sem I (p1 vid2 vid1)}\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have thing:\"\\<And>s. 0 \\<le> s \\<Longrightarrow> s \\<le> t \\<Longrightarrow> fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb) (?sol s)) $ vid1 = ab $ vid1 + Functions I fid1 (\\<chi> i. 0) * s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> fst (mk_v I\n                               (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                               (ab, bb)\n                               (\\<chi>i.\n                                   if i = vid1\n                                   then ab $ i +\n  Functions I fid1 (\\<chi>_. 0) * s\n                                   else ab $ i)) $\n                         vid1 =\n                         ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * s", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                            (ab, bb)\n                            (\\<chi>i.\n                                if i = vid1\n                                then ab $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * s\n                                else ab $ i)) $\n                      vid1 =\n                      ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * s", "using mk_v_agree[of I \"(OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\" \"(ab, bb)\" \"(?sol s)\"]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n     (\\<chi>i.\n         if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * s\n         else ab $ i))\n   (ab, bb) (- semBV I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))) \\<and>\n  Vagree\n   (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n     (\\<chi>i.\n         if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * s\n         else ab $ i))\n   (mk_xode I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n     (\\<chi>i.\n         if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * s\n         else ab $ i))\n   (semBV I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                            (ab, bb)\n                            (\\<chi>i.\n                                if i = vid1\n                                then ab $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * s\n                                else ab $ i)) $\n                      vid1 =\n                      ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * s", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t;\n     Vagree\n      (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n        (\\<chi>i.\n            if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * s\n            else ab $ i))\n      (ab, bb) (- {Inr vid1, Inl vid1});\n     Vagree\n      (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n        (\\<chi>i.\n            if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * s\n            else ab $ i))\n      (\\<chi>i.\n          if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * s\n          else ab $ i,\n       \\<chi>i.\n          if i = vid1\n          then sterm_sem I ($f fid1 (\\<lambda>i. Const 0))\n                (\\<chi>i.\n                    if i = vid1\n                    then ab $ i + Functions I fid1 (\\<chi>_. 0) * s\n                    else ab $ i)\n          else 0)\n      {Inr vid1, Inl vid1}\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                            (ab, bb)\n                            (\\<chi>i.\n                                if i = vid1\n                                then ab $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * s\n                                else ab $ i)) $\n                      vid1 =\n                      ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * s", "unfolding Vagree_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t;\n     (\\<forall>i.\n         Inl i \\<in> - {Inr vid1, Inl vid1} \\<longrightarrow>\n         fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n               (\\<chi>i.\n                   if i = vid1\n                   then ab $ i + Functions I fid1 (\\<chi>_. 0) * s\n                   else ab $ i)) $\n         i =\n         fst (ab, bb) $ i) \\<and>\n     (\\<forall>i.\n         Inr i \\<in> - {Inr vid1, Inl vid1} \\<longrightarrow>\n         snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n               (\\<chi>i.\n                   if i = vid1\n                   then ab $ i + Functions I fid1 (\\<chi>_. 0) * s\n                   else ab $ i)) $\n         i =\n         snd (ab, bb) $ i);\n     (\\<forall>i.\n         Inl i \\<in> {Inr vid1, Inl vid1} \\<longrightarrow>\n         fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n               (\\<chi>i.\n                   if i = vid1\n                   then ab $ i + Functions I fid1 (\\<chi>_. 0) * s\n                   else ab $ i)) $\n         i =\n         fst (\\<chi>i.\n                 if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * s\n                 else ab $ i,\n              \\<chi>i.\n                 if i = vid1\n                 then sterm_sem I ($f fid1 (\\<lambda>i. Const 0))\n                       (\\<chi>i.\n                           if i = vid1\n                           then ab $ i + Functions I fid1 (\\<chi>_. 0) * s\n                           else ab $ i)\n                 else 0) $\n         i) \\<and>\n     (\\<forall>i.\n         Inr i \\<in> {Inr vid1, Inl vid1} \\<longrightarrow>\n         snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n               (\\<chi>i.\n                   if i = vid1\n                   then ab $ i + Functions I fid1 (\\<chi>_. 0) * s\n                   else ab $ i)) $\n         i =\n         snd (\\<chi>i.\n                 if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * s\n                 else ab $ i,\n              \\<chi>i.\n                 if i = vid1\n                 then sterm_sem I ($f fid1 (\\<lambda>i. Const 0))\n                       (\\<chi>i.\n                           if i = vid1\n                           then ab $ i + Functions I fid1 (\\<chi>_. 0) * s\n                           else ab $ i)\n                 else 0) $\n         i)\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                            (ab, bb)\n                            (\\<chi>i.\n                                if i = vid1\n                                then ab $ i +\n                                     Functions I fid1 (\\<chi>_. 0) * s\n                                else ab $ i)) $\n                      vid1 =\n                      ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * s", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> ?s9; ?s9 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                          (ab, bb)\n                          (\\<chi>i.\n                              if i = vid1\n                              then ab $ i +\n                                   Functions I fid1 (\\<chi>_. 0) * ?s9\n                              else ab $ i)) $\n                    vid1 =\n                    ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * ?s9\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have thing':\"\\<And>s. 0 \\<le> s \\<Longrightarrow> s \\<le> t \\<Longrightarrow>  fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb) (sol s)) $ vid1 = ab $ vid1 + Functions I fid1 (\\<chi> i. 0) * s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> fst (mk_v I\n                               (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                               (ab, bb) (sol s)) $\n                         vid1 =\n                         ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * s", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                            (ab, bb) (sol s)) $\n                      vid1 =\n                      ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * s", "using thing[of s] sol_eq_exp[of s]"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n  \\<Longrightarrow> fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                          (ab, bb)\n                          (\\<chi>i.\n                              if i = vid1\n                              then ab $ i +\n                                   Functions I fid1 (\\<chi>_. 0) * s\n                              else ab $ i)) $\n                    vid1 =\n                    ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * s\n  \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n  \\<Longrightarrow> (\\<chi>i.\n                        if i = vid1\n                        then ab $ i + Functions I fid1 (\\<chi>_. 0) * s\n                        else ab $ i) =\n                    sol s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                            (ab, bb) (sol s)) $\n                      vid1 =\n                      ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * s", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> ?s9; ?s9 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                          (ab, bb) (sol ?s9)) $\n                    vid1 =\n                    ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * ?s9\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have another_eq:\"\\<And>i s. 0 \\<le> s \\<Longrightarrow> s \\<le> t \\<Longrightarrow> dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n                (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol s))\n\n        =  dterm_sem I (if i = vid1 then Plus (trm.Var vid1) (Times (f0 fid1) (trm.Var vid3)) else Const 0)\n                (\\<chi> y. if vid3 = y then s else fst (\\<chi> y. if vid2 = y then s else fst (ab, bb) $ y, bb) $ y, bb)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol s)) =\n                         dterm_sem I\n                          (if i = vid1\n                           then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n                           else Const 0)\n                          (\\<chi>y.\n                              if vid3 = y then s\n                              else fst (\\<chi>y.\n     if vid2 = y then s else fst (ab, bb) $ y,\n  bb) $\n                                   y,\n                           bb)", "using mk_v_agree[of \"I\" \"(OSing vid1 (f0 fid1))\" \"(ab, bb)\" \"(sol s)\"]  vne12 vne23 vne13"], ["proof (prove)\nusing this:\n  Vagree (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol s)) (ab, bb)\n   (- semBV I (OSing vid1 (f0 fid1))) \\<and>\n  Vagree (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol s))\n   (mk_xode I (OSing vid1 (f0 fid1)) (sol s))\n   (semBV I (OSing vid1 (f0 fid1)))\n  vid1 \\<noteq> vid2\n  vid2 \\<noteq> vid3\n  vid1 \\<noteq> vid3\n\ngoal (1 subgoal):\n 1. \\<And>i s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol s)) =\n                         dterm_sem I\n                          (if i = vid1\n                           then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n                           else Const 0)\n                          (\\<chi>y.\n                              if vid3 = y then s\n                              else fst (\\<chi>y.\n     if vid2 = y then s else fst (ab, bb) $ y,\n  bb) $\n                                   y,\n                           bb)", "apply(auto simp add: f0_def p1_def empty_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sa.\n       \\<lbrakk>0 \\<le> sa; sa \\<le> t; vid1 \\<noteq> vid2;\n        vid2 \\<noteq> vid3; vid1 \\<noteq> vid3;\n        Vagree\n         (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n           (sol s))\n         (ab, bb) (- {Inr vid1, Inl vid1});\n        Vagree\n         (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n           (sol s))\n         (sol s,\n          \\<chi>i.\n             if i = vid1\n             then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) (sol s)\n             else 0)\n         {Inr vid1, Inl vid1}\\<rbrakk>\n       \\<Longrightarrow> fst (mk_v I\n                               (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                               (ab, bb) (sol sa)) $\n                         vid1 =\n                         ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * sa", "unfolding Vagree_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sa.\n       \\<lbrakk>0 \\<le> sa; sa \\<le> t; vid1 \\<noteq> vid2;\n        vid2 \\<noteq> vid3; vid1 \\<noteq> vid3;\n        (\\<forall>i.\n            Inl i \\<in> - {Inr vid1, Inl vid1} \\<longrightarrow>\n            fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                  (ab, bb) (sol s)) $\n            i =\n            fst (ab, bb) $ i) \\<and>\n        (\\<forall>i.\n            Inr i \\<in> - {Inr vid1, Inl vid1} \\<longrightarrow>\n            snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                  (ab, bb) (sol s)) $\n            i =\n            snd (ab, bb) $ i);\n        (\\<forall>i.\n            Inl i \\<in> {Inr vid1, Inl vid1} \\<longrightarrow>\n            fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                  (ab, bb) (sol s)) $\n            i =\n            fst (sol s,\n                 \\<chi>i.\n                    if i = vid1\n                    then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) (sol s)\n                    else 0) $\n            i) \\<and>\n        (\\<forall>i.\n            Inr i \\<in> {Inr vid1, Inl vid1} \\<longrightarrow>\n            snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                  (ab, bb) (sol s)) $\n            i =\n            snd (sol s,\n                 \\<chi>i.\n                    if i = vid1\n                    then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) (sol s)\n                    else 0) $\n            i)\\<rbrakk>\n       \\<Longrightarrow> fst (mk_v I\n                               (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                               (ab, bb) (sol sa)) $\n                         vid1 =\n                         ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * sa", "apply(simp add: f0_def empty_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sa.\n       \\<lbrakk>0 \\<le> sa; sa \\<le> t; vid1 \\<noteq> vid2;\n        vid2 \\<noteq> vid3; vid1 \\<noteq> vid3;\n        (\\<forall>i.\n            i \\<noteq> vid1 \\<longrightarrow>\n            fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                  (ab, bb) (sol s)) $\n            i =\n            ab $ i) \\<and>\n        (\\<forall>i.\n            i \\<noteq> vid1 \\<longrightarrow>\n            snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                  (ab, bb) (sol s)) $\n            i =\n            bb $ i);\n        fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n              (sol s)) $\n        vid1 =\n        sol s $ vid1 \\<and>\n        snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n              (sol s)) $\n        vid1 =\n        Functions I fid1 (\\<chi>i. 0)\\<rbrakk>\n       \\<Longrightarrow> fst (mk_v I\n                               (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                               (ab, bb) (sol sa)) $\n                         vid1 =\n                         ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * sa", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t; vid1 \\<noteq> vid2; vid2 \\<noteq> vid3;\n     vid1 \\<noteq> vid3;\n     (\\<forall>i.\n         i \\<noteq> vid1 \\<longrightarrow>\n         fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n               (sol s)) $\n         i =\n         ab $ i) \\<and>\n     (\\<forall>i.\n         i \\<noteq> vid1 \\<longrightarrow>\n         snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n               (sol s)) $\n         i =\n         bb $ i);\n     fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n           (sol s)) $\n     vid1 =\n     sol s $ vid1 \\<and>\n     snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n           (sol s)) $\n     vid1 =\n     Functions I fid1 (\\<chi>i. 0)\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                            (ab, bb) (sol s)) $\n                      vid1 =\n                      ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * s", "using thing'"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 \\<le> ?s9; ?s9 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                          (ab, bb) (sol ?s9)) $\n                    vid1 =\n                    ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * ?s9\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t; vid1 \\<noteq> vid2; vid2 \\<noteq> vid3;\n     vid1 \\<noteq> vid3;\n     (\\<forall>i.\n         i \\<noteq> vid1 \\<longrightarrow>\n         fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n               (sol s)) $\n         i =\n         ab $ i) \\<and>\n     (\\<forall>i.\n         i \\<noteq> vid1 \\<longrightarrow>\n         snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n               (sol s)) $\n         i =\n         bb $ i);\n     fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n           (sol s)) $\n     vid1 =\n     sol s $ vid1 \\<and>\n     snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n           (sol s)) $\n     vid1 =\n     Functions I fid1 (\\<chi>i. 0)\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                            (ab, bb) (sol s)) $\n                      vid1 =\n                      ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * s", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> ?s9; ?s9 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> dterm_sem I (if ?i9 = vid1 then Var vid1 else Const 0)\n                     (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ?s9)) =\n                    dterm_sem I\n                     (if ?i9 = vid1\n                      then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n                      else Const 0)\n                     (\\<chi>y.\n                         if vid3 = y then ?s9\n                         else fst (\\<chi>y.\nif vid2 = y then ?s9 else fst (ab, bb) $ y,\n                                   bb) $\n                              y,\n                      bb)\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have allRa':\"(\\<forall>ra. repv (repv (ab, bb) vid2 t) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v \\<le> dterm_sem I (trm.Var vid3) v} \\<inter>\n                  {v. dterm_sem I (trm.Var vid3) v \\<le> dterm_sem I (trm.Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n                (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ra.\n       repv (repv (ab, bb) vid2 t) vid3 ra\n       \\<in> {v. dterm_sem I (Const 0) v\n                 \\<le> dterm_sem I (Var vid3) v} \\<inter>\n             {v. dterm_sem I (Var vid3) v\n                 \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n       Predicates I vid2\n        (\\<chi>i.\n            dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra)))", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra.\n       repv (repv (ab, bb) vid2 t) vid3 ra\n       \\<in> {v. dterm_sem I (Const 0) v\n                 \\<le> dterm_sem I (Var vid3) v} \\<inter>\n             {v. dterm_sem I (Var vid3) v\n                 \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n       Predicates I vid2\n        (\\<chi>i.\n            dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra)))", "subgoal for ra"], ["proof (prove)\ngoal (1 subgoal):\n 1. repv (repv (ab, bb) vid2 t) vid3 ra\n    \\<in> {v. dterm_sem I (Const 0) v\n              \\<le> dterm_sem I (Var vid3) v} \\<inter>\n          {v. dterm_sem I (Var vid3) v\n              \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n    Predicates I vid2\n     (\\<chi>i.\n         dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n          (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra)))", "using mk_v_agree[of \"I\" \"(OSing vid1 (f0 fid1))\" \"(ab, bb)\" \"(sol ra)\"]\n         vne23 constraint[of ra]"], ["proof (prove)\nusing this:\n  Vagree (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra)) (ab, bb)\n   (- semBV I (OSing vid1 (f0 fid1))) \\<and>\n  Vagree (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra))\n   (mk_xode I (OSing vid1 (f0 fid1)) (sol ra))\n   (semBV I (OSing vid1 (f0 fid1)))\n  vid2 \\<noteq> vid3\n  ra \\<in> {0..t} \\<Longrightarrow>\n  sol ra\n  \\<in> {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n            \\<in> fml_sem I (p1 vid2 vid1)}\n\ngoal (1 subgoal):\n 1. repv (repv (ab, bb) vid2 t) vid3 ra\n    \\<in> {v. dterm_sem I (Const 0) v\n              \\<le> dterm_sem I (Var vid3) v} \\<inter>\n          {v. dterm_sem I (Var vid3) v\n              \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n    Predicates I vid2\n     (\\<chi>i.\n         dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n          (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra)))", "apply(auto simp add: Vagree_def p1_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>ra.\n     repv (repv (ab, bb) vid2 t) vid3 ra\n     \\<in> {v. dterm_sem I (Const 0) v\n               \\<le> dterm_sem I (Var vid3) v} \\<inter>\n           {v. dterm_sem I (Var vid3) v\n               \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra)))\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have anotherFact:\"\\<And>ra. 0 \\<le> ra \\<Longrightarrow> ra \\<le> t \\<Longrightarrow> (\\<chi> i. if i = vid1 then ab $ i + Functions I fid1 (\\<chi> _. 0) * ra else ab $ i) $ vid1 =\n     ab $ vid1 + dterm_sem I (f0 fid1) (\\<chi> y. if vid3 = y then ra else fst (\\<chi> y. if vid2 = y then t else fst (ab, bb) $ y, bb) $ y, bb) * ra \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra.\n       \\<lbrakk>0 \\<le> ra; ra \\<le> t\\<rbrakk>\n       \\<Longrightarrow> (\\<chi>i.\n                             if i = vid1\n                             then ab $ i +\n                                  Functions I fid1 (\\<chi>_. 0) * ra\n                             else ab $ i) $\n                         vid1 =\n                         ab $ vid1 +\n                         dterm_sem I (f0 fid1)\n                          (\\<chi>y.\n                              if vid3 = y then ra\n                              else fst (\\<chi>y.\n     if vid2 = y then t else fst (ab, bb) $ y,\n  bb) $\n                                   y,\n                           bb) *\n                         ra", "subgoal for ra"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> ra; ra \\<le> t\\<rbrakk>\n    \\<Longrightarrow> (\\<chi>i.\n                          if i = vid1\n                          then ab $ i + Functions I fid1 (\\<chi>_. 0) * ra\n                          else ab $ i) $\n                      vid1 =\n                      ab $ vid1 +\n                      dterm_sem I (f0 fid1)\n                       (\\<chi>y.\n                           if vid3 = y then ra\n                           else fst (\\<chi>y.\n  if vid2 = y then t else fst (ab, bb) $ y,\n                                     bb) $\n                                y,\n                        bb) *\n                      ra", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> ra; ra \\<le> t\\<rbrakk>\n    \\<Longrightarrow> ra = 0 \\<or>\n                      Functions I fid1 (\\<chi>_. 0) =\n                      dterm_sem I (f0 fid1)\n                       (\\<chi>y.\n                           if vid3 = y then ra\n                           else fst (\\<chi>y.\n  if vid2 = y then t else fst (ab, bb) $ y,\n                                     bb) $\n                                y,\n                        bb)", "apply(rule disjI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> ra; ra \\<le> t\\<rbrakk>\n    \\<Longrightarrow> Functions I fid1 (\\<chi>_. 0) =\n                      dterm_sem I (f0 fid1)\n                       (\\<chi>y.\n                           if vid3 = y then ra\n                           else fst (\\<chi>y.\n  if vid2 = y then t else fst (ab, bb) $ y,\n                                     bb) $\n                                y,\n                        bb)", "by (auto simp add: f0_def empty_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> ?ra9; ?ra9 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> (\\<chi>i.\n                        if i = vid1\n                        then ab $ i + Functions I fid1 (\\<chi>_. 0) * ?ra9\n                        else ab $ i) $\n                    vid1 =\n                    ab $ vid1 +\n                    dterm_sem I (f0 fid1)\n                     (\\<chi>y.\n                         if vid3 = y then ?ra9\n                         else fst (\\<chi>y.\nif vid2 = y then t else fst (ab, bb) $ y,\n                                   bb) $\n                              y,\n                      bb) *\n                    ?ra9\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have thing':\"\\<And>ra i. 0 \\<le> ra \\<Longrightarrow> ra \\<le> t \\<Longrightarrow> dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb) (sol ra))\n      =  dterm_sem I (if i = vid1 then Plus (trm.Var vid1) (Times (f0 fid1) (trm.Var vid3)) else Const 0)\n            (\\<chi> y. if vid3 = y then ra else fst (\\<chi> y. if vid2 = y then t else fst (ab, bb) $ y, bb) $ y, bb) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra i.\n       \\<lbrakk>0 \\<le> ra; ra \\<le> t\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                            (ab, bb) (sol ra)) =\n                         dterm_sem I\n                          (if i = vid1\n                           then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n                           else Const 0)\n                          (\\<chi>y.\n                              if vid3 = y then ra\n                              else fst (\\<chi>y.\n     if vid2 = y then t else fst (ab, bb) $ y,\n  bb) $\n                                   y,\n                           bb)", "subgoal for ra i"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> ra; ra \\<le> t\\<rbrakk>\n    \\<Longrightarrow> dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                         (ab, bb) (sol ra)) =\n                      dterm_sem I\n                       (if i = vid1\n                        then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n                        else Const 0)\n                       (\\<chi>y.\n                           if vid3 = y then ra\n                           else fst (\\<chi>y.\n  if vid2 = y then t else fst (ab, bb) $ y,\n                                     bb) $\n                                y,\n                        bb)", "using vne12 vne13 mk_v_agree[of I \"OSing vid1 ($f fid1 (\\<lambda>i. Const 0))\" \"(ab,bb)\" \"(sol ra)\"]"], ["proof (prove)\nusing this:\n  vid1 \\<noteq> vid2\n  vid1 \\<noteq> vid3\n  Vagree\n   (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb) (sol ra))\n   (ab, bb) (- semBV I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))) \\<and>\n  Vagree\n   (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb) (sol ra))\n   (mk_xode I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (sol ra))\n   (semBV I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> ra; ra \\<le> t\\<rbrakk>\n    \\<Longrightarrow> dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                         (ab, bb) (sol ra)) =\n                      dterm_sem I\n                       (if i = vid1\n                        then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n                        else Const 0)\n                       (\\<chi>y.\n                           if vid3 = y then ra\n                           else fst (\\<chi>y.\n  if vid2 = y then t else fst (ab, bb) $ y,\n                                     bb) $\n                                y,\n                        bb)", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> ra; ra \\<le> t; vid1 \\<noteq> vid2; vid1 \\<noteq> vid3;\n     Vagree\n      (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n        (sol ra))\n      (ab, bb) (- {Inr vid1, Inl vid1});\n     Vagree\n      (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n        (sol ra))\n      (sol ra,\n       \\<chi>i.\n          if i = vid1\n          then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) (sol ra) else 0)\n      {Inr vid1, Inl vid1};\n     i = vid1\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                            (ab, bb) (sol ra)) $\n                      vid1 =\n                      ab $ vid1 +\n                      dterm_sem I (f0 fid1)\n                       (\\<chi>y.\n                           if vid3 = y then ra\n                           else fst (\\<chi>y.\n  if vid2 = y then t else fst (ab, bb) $ y,\n                                     bb) $\n                                y,\n                        bb) *\n                      ra", "unfolding Vagree_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> ra; ra \\<le> t; vid1 \\<noteq> vid2; vid1 \\<noteq> vid3;\n     (\\<forall>i.\n         Inl i \\<in> - {Inr vid1, Inl vid1} \\<longrightarrow>\n         fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n               (sol ra)) $\n         i =\n         fst (ab, bb) $ i) \\<and>\n     (\\<forall>i.\n         Inr i \\<in> - {Inr vid1, Inl vid1} \\<longrightarrow>\n         snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n               (sol ra)) $\n         i =\n         snd (ab, bb) $ i);\n     (\\<forall>i.\n         Inl i \\<in> {Inr vid1, Inl vid1} \\<longrightarrow>\n         fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n               (sol ra)) $\n         i =\n         fst (sol ra,\n              \\<chi>i.\n                 if i = vid1\n                 then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) (sol ra)\n                 else 0) $\n         i) \\<and>\n     (\\<forall>i.\n         Inr i \\<in> {Inr vid1, Inl vid1} \\<longrightarrow>\n         snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n               (sol ra)) $\n         i =\n         snd (sol ra,\n              \\<chi>i.\n                 if i = vid1\n                 then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) (sol ra)\n                 else 0) $\n         i);\n     i = vid1\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                            (ab, bb) (sol ra)) $\n                      vid1 =\n                      ab $ vid1 +\n                      dterm_sem I (f0 fid1)\n                       (\\<chi>y.\n                           if vid3 = y then ra\n                           else fst (\\<chi>y.\n  if vid2 = y then t else fst (ab, bb) $ y,\n                                     bb) $\n                                y,\n                        bb) *\n                      ra", "apply(safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> ra; ra \\<le> t; vid1 \\<noteq> vid2; vid1 \\<noteq> vid3;\n     i = vid1;\n     \\<forall>i.\n        Inl i \\<in> - {Inr vid1, Inl vid1} \\<longrightarrow>\n        fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n              (sol ra)) $\n        i =\n        fst (ab, bb) $ i;\n     \\<forall>i.\n        Inr i \\<in> - {Inr vid1, Inl vid1} \\<longrightarrow>\n        snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n              (sol ra)) $\n        i =\n        snd (ab, bb) $ i;\n     \\<forall>i.\n        Inl i \\<in> {Inr vid1, Inl vid1} \\<longrightarrow>\n        fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n              (sol ra)) $\n        i =\n        fst (sol ra,\n             \\<chi>i.\n                if i = vid1\n                then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) (sol ra)\n                else 0) $\n        i;\n     \\<forall>i.\n        Inr i \\<in> {Inr vid1, Inl vid1} \\<longrightarrow>\n        snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n              (sol ra)) $\n        i =\n        snd (sol ra,\n             \\<chi>i.\n                if i = vid1\n                then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) (sol ra)\n                else 0) $\n        i\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                            (ab, bb) (sol ra)) $\n                      vid1 =\n                      ab $ vid1 +\n                      dterm_sem I (f0 fid1)\n                       (\\<chi>y.\n                           if vid3 = y then ra\n                           else fst (\\<chi>y.\n  if vid2 = y then t else fst (ab, bb) $ y,\n                                     bb) $\n                                y,\n                        bb) *\n                      ra", "apply(erule allE[where x=\"vid1\"])+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> ra; ra \\<le> t; vid1 \\<noteq> vid2; vid1 \\<noteq> vid3;\n     i = vid1;\n     Inl vid1 \\<in> - {Inr vid1, Inl vid1} \\<longrightarrow>\n     fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n           (sol ra)) $\n     vid1 =\n     fst (ab, bb) $ vid1;\n     Inr vid1 \\<in> - {Inr vid1, Inl vid1} \\<longrightarrow>\n     snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n           (sol ra)) $\n     vid1 =\n     snd (ab, bb) $ vid1;\n     Inl vid1 \\<in> {Inr vid1, Inl vid1} \\<longrightarrow>\n     fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n           (sol ra)) $\n     vid1 =\n     fst (sol ra,\n          \\<chi>i.\n             if i = vid1\n             then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) (sol ra)\n             else 0) $\n     vid1;\n     Inr vid1 \\<in> {Inr vid1, Inl vid1} \\<longrightarrow>\n     snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n           (sol ra)) $\n     vid1 =\n     snd (sol ra,\n          \\<chi>i.\n             if i = vid1\n             then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) (sol ra)\n             else 0) $\n     vid1\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                            (ab, bb) (sol ra)) $\n                      vid1 =\n                      ab $ vid1 +\n                      dterm_sem I (f0 fid1)\n                       (\\<chi>y.\n                           if vid3 = y then ra\n                           else fst (\\<chi>y.\n  if vid2 = y then t else fst (ab, bb) $ y,\n                                     bb) $\n                                y,\n                        bb) *\n                      ra", "using sol_eq_exp[of ra] anotherFact[of ra]"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 \\<le> ra; ra \\<le> t\\<rbrakk>\n  \\<Longrightarrow> (\\<chi>i.\n                        if i = vid1\n                        then ab $ i + Functions I fid1 (\\<chi>_. 0) * ra\n                        else ab $ i) =\n                    sol ra\n  \\<lbrakk>0 \\<le> ra; ra \\<le> t\\<rbrakk>\n  \\<Longrightarrow> (\\<chi>i.\n                        if i = vid1\n                        then ab $ i + Functions I fid1 (\\<chi>_. 0) * ra\n                        else ab $ i) $\n                    vid1 =\n                    ab $ vid1 +\n                    dterm_sem I (f0 fid1)\n                     (\\<chi>y.\n                         if vid3 = y then ra\n                         else fst (\\<chi>y.\nif vid2 = y then t else fst (ab, bb) $ y,\n                                   bb) $\n                              y,\n                      bb) *\n                    ra\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> ra; ra \\<le> t; vid1 \\<noteq> vid2; vid1 \\<noteq> vid3;\n     i = vid1;\n     Inl vid1 \\<in> - {Inr vid1, Inl vid1} \\<longrightarrow>\n     fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n           (sol ra)) $\n     vid1 =\n     fst (ab, bb) $ vid1;\n     Inr vid1 \\<in> - {Inr vid1, Inl vid1} \\<longrightarrow>\n     snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n           (sol ra)) $\n     vid1 =\n     snd (ab, bb) $ vid1;\n     Inl vid1 \\<in> {Inr vid1, Inl vid1} \\<longrightarrow>\n     fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n           (sol ra)) $\n     vid1 =\n     fst (sol ra,\n          \\<chi>i.\n             if i = vid1\n             then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) (sol ra)\n             else 0) $\n     vid1;\n     Inr vid1 \\<in> {Inr vid1, Inl vid1} \\<longrightarrow>\n     snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n           (sol ra)) $\n     vid1 =\n     snd (sol ra,\n          \\<chi>i.\n             if i = vid1\n             then sterm_sem I ($f fid1 (\\<lambda>i. Const 0)) (sol ra)\n             else 0) $\n     vid1\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                            (ab, bb) (sol ra)) $\n                      vid1 =\n                      ab $ vid1 +\n                      dterm_sem I (f0 fid1)\n                       (\\<chi>y.\n                           if vid3 = y then ra\n                           else fst (\\<chi>y.\n  if vid2 = y then t else fst (ab, bb) $ y,\n                                     bb) $\n                                y,\n                        bb) *\n                      ra", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> ?ra9; ?ra9 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> dterm_sem I (if ?i9 = vid1 then Var vid1 else Const 0)\n                     (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                       (ab, bb) (sol ?ra9)) =\n                    dterm_sem I\n                     (if ?i9 = vid1\n                      then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n                      else Const 0)\n                     (\\<chi>y.\n                         if vid3 = y then ?ra9\n                         else fst (\\<chi>y.\nif vid2 = y then t else fst (ab, bb) $ y,\n                                   bb) $\n                              y,\n                      bb)\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have allRa:\"(\\<forall>ra. repv (repv (ab, bb) vid2 t) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v \\<le> dterm_sem I (trm.Var vid3) v} \\<inter>\n                  {v. dterm_sem I (trm.Var vid3) v \\<le> dterm_sem I (trm.Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi> i. dterm_sem I (singleton (Plus (trm.Var vid1) (Times (f0 fid1) (trm.Var vid3))) i)\n                       (repv (repv (ab, bb) vid2 t) vid3 ra)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ra.\n       repv (repv (ab, bb) vid2 t) vid3 ra\n       \\<in> {v. dterm_sem I (Const 0) v\n                 \\<le> dterm_sem I (Var vid3) v} \\<inter>\n             {v. dterm_sem I (Var vid3) v\n                 \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n       Predicates I vid2\n        (\\<chi>i.\n            dterm_sem I\n             (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n             (repv (repv (ab, bb) vid2 t) vid3 ra))", "apply(rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra.\n       repv (repv (ab, bb) vid2 t) vid3 ra\n       \\<in> {v. dterm_sem I (Const 0) v\n                 \\<le> dterm_sem I (Var vid3) v} \\<inter>\n             {v. dterm_sem I (Var vid3) v\n                 \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n       Predicates I vid2\n        (\\<chi>i.\n            dterm_sem I\n             (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n             (repv (repv (ab, bb) vid2 t) vid3 ra))", "subgoal for ra"], ["proof (prove)\ngoal (1 subgoal):\n 1. repv (repv (ab, bb) vid2 t) vid3 ra\n    \\<in> {v. dterm_sem I (Const 0) v\n              \\<le> dterm_sem I (Var vid3) v} \\<inter>\n          {v. dterm_sem I (Var vid3) v\n              \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n    Predicates I vid2\n     (\\<chi>i.\n         dterm_sem I\n          (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n          (repv (repv (ab, bb) vid2 t) vid3 ra))", "using mk_v_agree[of \"I\" \"(OSing vid1 (f0 fid1))\" \"(ab, bb)\" \"(sol ra)\"]\n         vne23 constraint[of ra]"], ["proof (prove)\nusing this:\n  Vagree (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra)) (ab, bb)\n   (- semBV I (OSing vid1 (f0 fid1))) \\<and>\n  Vagree (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra))\n   (mk_xode I (OSing vid1 (f0 fid1)) (sol ra))\n   (semBV I (OSing vid1 (f0 fid1)))\n  vid2 \\<noteq> vid3\n  ra \\<in> {0..t} \\<Longrightarrow>\n  sol ra\n  \\<in> {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n            \\<in> fml_sem I (p1 vid2 vid1)}\n\ngoal (1 subgoal):\n 1. repv (repv (ab, bb) vid2 t) vid3 ra\n    \\<in> {v. dterm_sem I (Const 0) v\n              \\<le> dterm_sem I (Var vid3) v} \\<inter>\n          {v. dterm_sem I (Var vid3) v\n              \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n    Predicates I vid2\n     (\\<chi>i.\n         dterm_sem I\n          (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n          (repv (repv (ab, bb) vid2 t) vid3 ra))", "apply(auto simp add: Vagree_def p1_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vid2 \\<noteq> vid3;\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra)));\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        fst (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra)) $ i = ab $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra)) $ i = bb $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra)) $ vid1 =\n     sol ra $ vid1;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra)) $ vid1 =\n     sterm_sem I (f0 fid1) (sol ra);\n     0 \\<le> ra; ra \\<le> t\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1\n                             then Plus (Var vid1)\n                                   (Times (f0 fid1) (Var vid3))\n                             else Const 0)\n                            (\\<chi>y.\n                                if vid3 = y then ra\n                                else fst\n(\\<chi>y. if vid2 = y then t else fst (ab, bb) $ y, bb) $\n                                     y,\n                             bb))", "using sol_eq_exp[of ra]"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 \\<le> ra; ra \\<le> t\\<rbrakk>\n  \\<Longrightarrow> (\\<chi>i.\n                        if i = vid1\n                        then ab $ i + Functions I fid1 (\\<chi>_. 0) * ra\n                        else ab $ i) =\n                    sol ra\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vid2 \\<noteq> vid3;\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra)));\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        fst (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra)) $ i = ab $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra)) $ i = bb $ i;\n     fst (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra)) $ vid1 =\n     sol ra $ vid1;\n     snd (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol ra)) $ vid1 =\n     sterm_sem I (f0 fid1) (sol ra);\n     0 \\<le> ra; ra \\<le> t\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1\n                             then Plus (Var vid1)\n                                   (Times (f0 fid1) (Var vid3))\n                             else Const 0)\n                            (\\<chi>y.\n                                if vid3 = y then ra\n                                else fst\n(\\<chi>y. if vid2 = y then t else fst (ab, bb) $ y, bb) $\n                                     y,\n                             bb))", "apply (auto simp add: f0_def empty_def Vagree_def vec_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vid2 \\<noteq> vid3;\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n             (sol ra)));\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n              (sol ra)) $\n        i =\n        ab $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n              (sol ra)) $\n        i =\n        bb $ i;\n     fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n           (sol ra)) $\n     vid1 =\n     sol ra $ vid1;\n     snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n           (sol ra)) $\n     vid1 =\n     Functions I fid1 (\\<chi>i. 0);\n     0 \\<le> ra; ra \\<le> t;\n     \\<forall>i.\n        (if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * ra\n         else ab $ i) =\n        sol ra $ i\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1\n                             then Plus (Var vid1)\n                                   (Times (f0 fid1) (Var vid3))\n                             else Const 0)\n                            (\\<chi>y.\n                                if vid3 = y then ra\n                                else fst\n(\\<chi>y. if vid2 = y then t else fst (ab, bb) $ y, bb) $\n                                     y,\n                             bb))", "using thing'"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 \\<le> ?ra9; ?ra9 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> dterm_sem I (if ?i9 = vid1 then Var vid1 else Const 0)\n                     (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                       (ab, bb) (sol ?ra9)) =\n                    dterm_sem I\n                     (if ?i9 = vid1\n                      then Plus (Var vid1) (Times (f0 fid1) (Var vid3))\n                      else Const 0)\n                     (\\<chi>y.\n                         if vid3 = y then ?ra9\n                         else fst (\\<chi>y.\nif vid2 = y then t else fst (ab, bb) $ y,\n                                   bb) $\n                              y,\n                      bb)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vid2 \\<noteq> vid3;\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n             (sol ra)));\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n              (sol ra)) $\n        i =\n        ab $ i;\n     \\<forall>i.\n        i \\<noteq> vid1 \\<longrightarrow>\n        snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n              (sol ra)) $\n        i =\n        bb $ i;\n     fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n           (sol ra)) $\n     vid1 =\n     sol ra $ vid1;\n     snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n           (sol ra)) $\n     vid1 =\n     Functions I fid1 (\\<chi>i. 0);\n     0 \\<le> ra; ra \\<le> t;\n     \\<forall>i.\n        (if i = vid1 then ab $ i + Functions I fid1 (\\<chi>_. 0) * ra\n         else ab $ i) =\n        sol ra $ i\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1\n                             then Plus (Var vid1)\n                                   (Times (f0 fid1) (Var vid3))\n                             else Const 0)\n                            (\\<chi>y.\n                                if vid3 = y then ra\n                                else fst\n(\\<chi>y. if vid2 = y then t else fst (ab, bb) $ y, bb) $\n                                     y,\n                             bb))", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>ra.\n     repv (repv (ab, bb) vid2 t) vid3 ra\n     \\<in> {v. dterm_sem I (Const 0) v\n               \\<le> dterm_sem I (Var vid3) v} \\<inter>\n           {v. dterm_sem I (Var vid3) v\n               \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I\n           (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n           (repv (repv (ab, bb) vid2 t) vid3 ra))\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have fml3:\"\\<And>ra. 0 \\<le> ra \\<Longrightarrow> ra \\<le> t \\<Longrightarrow>\n           (\\<forall>\\<omega>. \\<omega> = repv (repv (ab, bb) vid2 t) vid1\n                      (dterm_sem I (Plus (trm.Var vid1) (Times (f0 fid1) (trm.Var vid2))) (repv (ab, bb) vid2 t)) \\<longrightarrow>\n                 \\<omega> \\<in> fml_sem I (p1 vid3 vid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ra.\n       \\<lbrakk>0 \\<le> ra; ra \\<le> t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<omega>.\n                            \\<omega> =\n                            repv (repv (ab, bb) vid2 t) vid1\n                             (dterm_sem I\n                               (Plus (Var vid1)\n                                 (Times (f0 fid1) (Var vid2)))\n                               (repv (ab, bb) vid2 t)) \\<longrightarrow>\n                            \\<omega> \\<in> fml_sem I (p1 vid3 vid1)", "using impl allRa"], ["proof (prove)\nusing this:\n  dterm_sem I (Const 0) (repv (ab, bb) vid2 t)\n  \\<le> dterm_sem I (Var vid2) (repv (ab, bb) vid2 t) \\<longrightarrow>\n  (\\<forall>ra.\n      repv (repv (ab, bb) vid2 t) vid3 ra\n      \\<in> {v. dterm_sem I (Const 0) v\n                \\<le> dterm_sem I (Var vid3) v} \\<inter>\n            {v. dterm_sem I (Var vid3) v\n                \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n      Predicates I vid2\n       (\\<chi>i.\n           dterm_sem I\n            (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n            (repv (repv (ab, bb) vid2 t) vid3 ra))) \\<longrightarrow>\n  (\\<forall>\\<omega>.\n      \\<omega> =\n      repv (repv (ab, bb) vid2 t) vid1\n       (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n         (repv (ab, bb) vid2 t)) \\<longrightarrow>\n      \\<omega> \\<in> fml_sem I (p1 vid3 vid1))\n  \\<forall>ra.\n     repv (repv (ab, bb) vid2 t) vid3 ra\n     \\<in> {v. dterm_sem I (Const 0) v\n               \\<le> dterm_sem I (Var vid3) v} \\<inter>\n           {v. dterm_sem I (Var vid3) v\n               \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I\n           (singleton (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n           (repv (repv (ab, bb) vid2 t) vid3 ra))\n\ngoal (1 subgoal):\n 1. \\<And>ra.\n       \\<lbrakk>0 \\<le> ra; ra \\<le> t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<omega>.\n                            \\<omega> =\n                            repv (repv (ab, bb) vid2 t) vid1\n                             (dterm_sem I\n                               (Plus (Var vid1)\n                                 (Times (f0 fid1) (Var vid2)))\n                               (repv (ab, bb) vid2 t)) \\<longrightarrow>\n                            \\<omega> \\<in> fml_sem I (p1 vid3 vid1)", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> ?ra9; ?ra9 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> \\<forall>\\<omega>.\n                       \\<omega> =\n                       repv (repv (ab, bb) vid2 t) vid1\n                        (dterm_sem I\n                          (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                          (repv (ab, bb) vid2 t)) \\<longrightarrow>\n                       \\<omega> \\<in> fml_sem I (p1 vid3 vid1)\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "have someEq:\"(\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n            (\\<chi> y. if vid1 = y then (if vid2 = vid1 then t else fst (ab, bb) $ vid1) + Functions I fid1 (\\<chi> i. 0) * t\n                  else fst (\\<chi> y. if vid2 = y then t else fst (ab, bb) $ y, bb) $ y,\n             bb)) \n             = (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb) (sol t)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (\\<chi>y.\n             if vid1 = y\n             then (if vid2 = vid1 then t else fst (ab, bb) $ vid1) +\n                  Functions I fid1 (\\<chi>i. 0) * t\n             else fst (\\<chi>y. if vid2 = y then t else fst (ab, bb) $ y,\n                       bb) $\n                  y,\n          bb)) =\n    (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n           (sol t)))", "apply(rule vec_extensionality)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<chi>i.\n           dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (\\<chi>y.\n                if vid1 = y\n                then (if vid2 = vid1 then t else fst (ab, bb) $ vid1) +\n                     Functions I fid1 (\\<chi>i. 0) * t\n                else fst (\\<chi>y. if vid2 = y then t else fst (ab, bb) $ y,\n                          bb) $\n                     y,\n             bb)) $\n       i =\n       (\\<chi>i.\n           dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n              (sol t))) $\n       i", "using vne12 sol_eq_exp t thing"], ["proof (prove)\nusing this:\n  vid1 \\<noteq> vid2\n  \\<lbrakk>0 \\<le> ?s9; ?s9 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> (\\<chi>i.\n                        if i = vid1\n                        then ab $ i + Functions I fid1 (\\<chi>_. 0) * ?s9\n                        else ab $ i) =\n                    sol ?s9\n  0 \\<le> t\n  \\<lbrakk>0 \\<le> ?s9; ?s9 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0)))\n                          (ab, bb)\n                          (\\<chi>i.\n                              if i = vid1\n                              then ab $ i +\n                                   Functions I fid1 (\\<chi>_. 0) * ?s9\n                              else ab $ i)) $\n                    vid1 =\n                    ab $ vid1 + Functions I fid1 (\\<chi>i. 0) * ?s9\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<chi>i.\n           dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (\\<chi>y.\n                if vid1 = y\n                then (if vid2 = vid1 then t else fst (ab, bb) $ vid1) +\n                     Functions I fid1 (\\<chi>i. 0) * t\n                else fst (\\<chi>y. if vid2 = y then t else fst (ab, bb) $ y,\n                          bb) $\n                     y,\n             bb)) $\n       i =\n       (\\<chi>i.\n           dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n              (sol t))) $\n       i", "by auto"], ["proof (state)\nthis:\n  (\\<chi>i.\n      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n       (\\<chi>y.\n           if vid1 = y\n           then (if vid2 = vid1 then t else fst (ab, bb) $ vid1) +\n                Functions I fid1 (\\<chi>i. 0) * t\n           else fst (\\<chi>y. if vid2 = y then t else fst (ab, bb) $ y,\n                     bb) $\n                y,\n        bb)) =\n  (\\<chi>i.\n      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n       (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n         (sol t)))\n\ngoal (1 subgoal):\n 1. \\<And>I aa ba ab bb sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>r.\n           dterm_sem I (Const 0) (repv (ab, bb) vid2 r)\n           \\<le> dterm_sem I (Var vid2)\n                  (repv (ab, bb) vid2 r) \\<longrightarrow>\n           (\\<forall>ra.\n               repv (repv (ab, bb) vid2 r) vid3 ra\n               \\<in> {v. dterm_sem I (Const 0) v\n                         \\<le> dterm_sem I (Var vid3) v} \\<inter>\n                     {v. dterm_sem I (Var vid3) v\n                         \\<le> dterm_sem I (Var vid2) v} \\<longrightarrow>\n               Predicates I vid2\n                (\\<chi>i.\n                    dterm_sem I\n                     (singleton\n                       (Plus (Var vid1) (Times (f0 fid1) (Var vid3))) i)\n                     (repv (repv (ab, bb) vid2 r) vid3\n                       ra))) \\<longrightarrow>\n           (\\<forall>\\<omega>.\n               \\<omega> =\n               repv (repv (ab, bb) vid2 r) vid1\n                (dterm_sem I (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                  (repv (ab, bb) vid2 r)) \\<longrightarrow>\n               \\<omega> \\<in> fml_sem I (p1 vid3 vid1));\n        0 \\<le> t;\n        (aa, ba) = mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t);\n        (sol solves_ode (\\<lambda>_. ODE_sem I (OSing vid1 (f0 fid1))))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) x\n             \\<in> fml_sem I (p1 vid2 vid1)};\n        sol 0 = fst (ab, bb)\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n                         \\<in> fml_sem I (p1 vid3 vid1)", "show \"mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t) \\<in> fml_sem I (p1 vid3 vid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n    \\<in> fml_sem I (p1 vid3 vid1)", "using mk_v_agree[of I \"OSing vid1 (f0 fid1)\" \"(ab, bb)\" \"sol t\"] fml3[of t]"], ["proof (prove)\nusing this:\n  Vagree (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)) (ab, bb)\n   (- semBV I (OSing vid1 (f0 fid1))) \\<and>\n  Vagree (mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t))\n   (mk_xode I (OSing vid1 (f0 fid1)) (sol t))\n   (semBV I (OSing vid1 (f0 fid1)))\n  \\<lbrakk>0 \\<le> t; t \\<le> t\\<rbrakk>\n  \\<Longrightarrow> \\<forall>\\<omega>.\n                       \\<omega> =\n                       repv (repv (ab, bb) vid2 t) vid1\n                        (dterm_sem I\n                          (Plus (Var vid1) (Times (f0 fid1) (Var vid2)))\n                          (repv (ab, bb) vid2 t)) \\<longrightarrow>\n                       \\<omega> \\<in> fml_sem I (p1 vid3 vid1)\n\ngoal (1 subgoal):\n 1. mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n    \\<in> fml_sem I (p1 vid3 vid1)", "unfolding f0_def p1_def empty_def Vagree_def"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i\n       \\<in> - semBV I\n                (OSing vid1\n                  ($f fid1 (\\<lambda>i. Const 0))) \\<longrightarrow>\n       fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n             (sol t)) $\n       i =\n       fst (ab, bb) $ i) \\<and>\n   (\\<forall>i.\n       Inr i\n       \\<in> - semBV I\n                (OSing vid1\n                  ($f fid1 (\\<lambda>i. Const 0))) \\<longrightarrow>\n       snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n             (sol t)) $\n       i =\n       snd (ab, bb) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i\n      \\<in> semBV I\n             (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) \\<longrightarrow>\n      fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n            (sol t)) $\n      i =\n      fst (mk_xode I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (sol t)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i\n      \\<in> semBV I\n             (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) \\<longrightarrow>\n      snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n            (sol t)) $\n      i =\n      snd (mk_xode I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (sol t)) $\n      i)\n  \\<lbrakk>0 \\<le> t; t \\<le> t\\<rbrakk>\n  \\<Longrightarrow> \\<forall>\\<omega>.\n                       \\<omega> =\n                       repv (repv (ab, bb) vid2 t) vid1\n                        (dterm_sem I\n                          (Plus (Var vid1)\n                            (Times ($f fid1 (\\<lambda>i. Const 0))\n                              (Var vid2)))\n                          (repv (ab, bb) vid2 t)) \\<longrightarrow>\n                       \\<omega>\n                       \\<in> fml_sem I ($\\<phi> vid3 (singleton (Var vid1)))\n\ngoal (1 subgoal):\n 1. mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb) (sol t)\n    \\<in> fml_sem I ($\\<phi> vid3 (singleton (Var vid1)))", "using someEq"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i\n       \\<in> - semBV I\n                (OSing vid1\n                  ($f fid1 (\\<lambda>i. Const 0))) \\<longrightarrow>\n       fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n             (sol t)) $\n       i =\n       fst (ab, bb) $ i) \\<and>\n   (\\<forall>i.\n       Inr i\n       \\<in> - semBV I\n                (OSing vid1\n                  ($f fid1 (\\<lambda>i. Const 0))) \\<longrightarrow>\n       snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n             (sol t)) $\n       i =\n       snd (ab, bb) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i\n      \\<in> semBV I\n             (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) \\<longrightarrow>\n      fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n            (sol t)) $\n      i =\n      fst (mk_xode I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (sol t)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i\n      \\<in> semBV I\n             (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) \\<longrightarrow>\n      snd (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n            (sol t)) $\n      i =\n      snd (mk_xode I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (sol t)) $\n      i)\n  \\<lbrakk>0 \\<le> t; t \\<le> t\\<rbrakk>\n  \\<Longrightarrow> \\<forall>\\<omega>.\n                       \\<omega> =\n                       repv (repv (ab, bb) vid2 t) vid1\n                        (dterm_sem I\n                          (Plus (Var vid1)\n                            (Times ($f fid1 (\\<lambda>i. Const 0))\n                              (Var vid2)))\n                          (repv (ab, bb) vid2 t)) \\<longrightarrow>\n                       \\<omega>\n                       \\<in> fml_sem I ($\\<phi> vid3 (singleton (Var vid1)))\n  (\\<chi>i.\n      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n       (\\<chi>y.\n           if vid1 = y\n           then (if vid2 = vid1 then t else fst (ab, bb) $ vid1) +\n                Functions I fid1 (\\<chi>i. 0) * t\n           else fst (\\<chi>y. if vid2 = y then t else fst (ab, bb) $ y,\n                     bb) $\n                y,\n        bb)) =\n  (\\<chi>i.\n      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n       (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb)\n         (sol t)))\n\ngoal (1 subgoal):\n 1. mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. Const 0))) (ab, bb) (sol t)\n    \\<in> fml_sem I ($\\<phi> vid3 (singleton (Var vid1)))", "by(auto simp add:  sol_eq_exp_t' t vec_extensionality  vne12)"], ["proof (state)\nthis:\n  mk_v I (OSing vid1 (f0 fid1)) (ab, bb) (sol t)\n  \\<in> fml_sem I (p1 vid3 vid1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  valid DSaxiom\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma MVT0_within:\n  fixes f ::\"real \\<Rightarrow> real\"\n    and f'::\"real \\<Rightarrow> real \\<Rightarrow> real\"\n    and s t :: real\n  assumes f':\"\\<And>x. x \\<in> {0..t} \\<Longrightarrow> (f has_derivative (f' x)) (at x  within {0..t})\"\n  assumes geq':\"\\<And>x. x \\<in> {0..t} \\<Longrightarrow> f' x s \\<ge> 0\"\n  assumes int_s:\"s > 0 \\<and> s \\<le> t\"\n  assumes t: \"0 < t\"\n  shows \"f s \\<ge> f 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 0 \\<le> f s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f 0 \\<le> f s", "have \"f 0 + 0 \\<le> f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 0 + 0 \\<le> f s", "apply (rule Lib.MVT_ivl'[OF f', of 0 s 0])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. x \\<in> {0..t} \\<Longrightarrow> x \\<in> {0..t}\n 2. \\<And>x. x \\<in> {0..t} \\<Longrightarrow> 0 \\<le> f' x (s - 0)\n 3. \\<And>x.\n       x \\<in> {0..1} \\<Longrightarrow> 0 + x *\\<^sub>R (s - 0) \\<in> {0..t}", "subgoal for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {0..t} \\<Longrightarrow> x \\<in> {0..t}", "by assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> {0..t} \\<Longrightarrow> 0 \\<le> f' x (s - 0)\n 2. \\<And>x.\n       x \\<in> {0..1} \\<Longrightarrow> 0 + x *\\<^sub>R (s - 0) \\<in> {0..t}", "subgoal for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {0..t} \\<Longrightarrow> 0 \\<le> f' x (s - 0)", "using geq'"], ["proof (prove)\nusing this:\n  ?x5 \\<in> {0..t} \\<Longrightarrow> 0 \\<le> f' ?x5 s\n\ngoal (1 subgoal):\n 1. x \\<in> {0..t} \\<Longrightarrow> 0 \\<le> f' x (s - 0)", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..1} \\<Longrightarrow> 0 + x *\\<^sub>R (s - 0) \\<in> {0..t}", "using t int_s t"], ["proof (prove)\nusing this:\n  0 < t\n  0 < s \\<and> s \\<le> t\n  0 < t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..1} \\<Longrightarrow> 0 + x *\\<^sub>R (s - 0) \\<in> {0..t}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 \\<le> x; x \\<le> 1; 0 < s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> x * s \\<le> t", "subgoal for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> x; x \\<le> 1; 0 < s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> x * s \\<le> t", "by (metis int_s mult.commute mult.right_neutral order.trans mult_le_cancel_iff2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  f 0 + 0 \\<le> f s\n\ngoal (1 subgoal):\n 1. f 0 \\<le> f s", "then"], ["proof (chain)\npicking this:\n  f 0 + 0 \\<le> f s", "show \"?thesis\""], ["proof (prove)\nusing this:\n  f 0 + 0 \\<le> f s\n\ngoal (1 subgoal):\n 1. f 0 \\<le> f s", "by auto"], ["proof (state)\nthis:\n  f 0 \\<le> f s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma MVT':\n  fixes f g ::\"real \\<Rightarrow> real\"\n  fixes f' g'::\"real \\<Rightarrow> real \\<Rightarrow> real\"\n  fixes s t ::real\n  assumes f':\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow> (f has_derivative (f' s)) (at s within {0..t})\"\n  assumes g':\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow> (g has_derivative (g' s)) (at s within {0..t})\"\n  assumes geq':\"\\<And>x. x \\<in> {0..t} \\<Longrightarrow> f' x s \\<ge> g' x s\"\n  assumes geq0:\"f 0 \\<ge> g 0\"\n  assumes int_s:\"s > 0 \\<and> s \\<le> t\"\n  assumes t:\"t > 0\"\n  shows \"f s \\<ge> g s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g s \\<le> f s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. g s \\<le> f s", "let ?h = \"(\\<lambda>x. f x - g x)\""], ["proof (state)\ngoal (1 subgoal):\n 1. g s \\<le> f s", "let ?h' = \"(\\<lambda>s x. f' s x - g' s x)\""], ["proof (state)\ngoal (1 subgoal):\n 1. g s \\<le> f s", "have \"?h s \\<ge> ?h 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 0 - g 0 \\<le> f s - g s", "apply(rule MVT0_within[of t ?h \"?h'\" s])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       x \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>x. f x - g x) has_derivative\n        (\\<lambda>xa. f' x xa - g' x xa))\n        (at x within {0..t})\n 2. \\<And>x. x \\<in> {0..t} \\<Longrightarrow> 0 \\<le> f' x s - g' x s\n 3. 0 < s \\<and> s \\<le> t\n 4. 0 < t", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>x. f x - g x) has_derivative (\\<lambda>x. f' s x - g' s x))\n     (at s within {0..t})", "using f'[of s] g'[of s]"], ["proof (prove)\nusing this:\n  s \\<in> {0..t} \\<Longrightarrow>\n  (f has_derivative f' s) (at s within {0..t})\n  s \\<in> {0..t} \\<Longrightarrow>\n  (g has_derivative g' s) (at s within {0..t})\n\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>x. f x - g x) has_derivative (\\<lambda>x. f' s x - g' s x))\n     (at s within {0..t})", "by auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. x \\<in> {0..t} \\<Longrightarrow> 0 \\<le> f' x s - g' x s\n 2. 0 < s \\<and> s \\<le> t\n 3. 0 < t", "subgoal for sa"], ["proof (prove)\ngoal (1 subgoal):\n 1. sa \\<in> {0..t} \\<Longrightarrow> 0 \\<le> f' sa s - g' sa s", "using geq'[of sa]"], ["proof (prove)\nusing this:\n  sa \\<in> {0..t} \\<Longrightarrow> g' sa s \\<le> f' sa s\n\ngoal (1 subgoal):\n 1. sa \\<in> {0..t} \\<Longrightarrow> 0 \\<le> f' sa s - g' sa s", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < s \\<and> s \\<le> t\n 2. 0 < t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < s \\<and> s \\<le> t", "using int_s"], ["proof (prove)\nusing this:\n  0 < s \\<and> s \\<le> t\n\ngoal (1 subgoal):\n 1. 0 < s \\<and> s \\<le> t", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < t", "using t"], ["proof (prove)\nusing this:\n  0 < t\n\ngoal (1 subgoal):\n 1. 0 < t", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  f 0 - g 0 \\<le> f s - g s\n\ngoal (1 subgoal):\n 1. g s \\<le> f s", "then"], ["proof (chain)\npicking this:\n  f 0 - g 0 \\<le> f s - g s", "show \"?thesis\""], ["proof (prove)\nusing this:\n  f 0 - g 0 \\<le> f s - g s\n\ngoal (1 subgoal):\n 1. g s \\<le> f s", "using geq0"], ["proof (prove)\nusing this:\n  f 0 - g 0 \\<le> f s - g s\n  g 0 \\<le> f 0\n\ngoal (1 subgoal):\n 1. g s \\<le> f s", "by auto"], ["proof (state)\nthis:\n  g s \\<le> f s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma MVT'_gr:\n  fixes f g ::\"real \\<Rightarrow> real\"\n  fixes f' g'::\"real \\<Rightarrow> real \\<Rightarrow> real\"\n  fixes s t ::real\n  assumes f':\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow> (f has_derivative (f' s)) (at s within {0..t})\"\n  assumes g':\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow> (g has_derivative (g' s)) (at s within {0..t})\"\n  assumes geq':\"\\<And>x. x \\<in> {0..t} \\<Longrightarrow> f' x s \\<ge> g' x s\"\n  assumes geq0:\"f 0 > g 0\"\n  assumes int_s:\"s > 0 \\<and> s \\<le> t\"\n  assumes t:\"t > 0\"\n  shows \"f s > g s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g s < f s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. g s < f s", "let ?h = \"(\\<lambda>x. f x - g x)\""], ["proof (state)\ngoal (1 subgoal):\n 1. g s < f s", "let ?h' = \"(\\<lambda>s x. f' s x - g' s x)\""], ["proof (state)\ngoal (1 subgoal):\n 1. g s < f s", "have \"?h s \\<ge> ?h 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 0 - g 0 \\<le> f s - g s", "apply(rule MVT0_within[of t ?h \"?h'\" s])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       x \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>x. f x - g x) has_derivative\n        (\\<lambda>xa. f' x xa - g' x xa))\n        (at x within {0..t})\n 2. \\<And>x. x \\<in> {0..t} \\<Longrightarrow> 0 \\<le> f' x s - g' x s\n 3. 0 < s \\<and> s \\<le> t\n 4. 0 < t", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>x. f x - g x) has_derivative (\\<lambda>x. f' s x - g' s x))\n     (at s within {0..t})", "using f'[of s] g'[of s]"], ["proof (prove)\nusing this:\n  s \\<in> {0..t} \\<Longrightarrow>\n  (f has_derivative f' s) (at s within {0..t})\n  s \\<in> {0..t} \\<Longrightarrow>\n  (g has_derivative g' s) (at s within {0..t})\n\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>x. f x - g x) has_derivative (\\<lambda>x. f' s x - g' s x))\n     (at s within {0..t})", "by auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. x \\<in> {0..t} \\<Longrightarrow> 0 \\<le> f' x s - g' x s\n 2. 0 < s \\<and> s \\<le> t\n 3. 0 < t", "subgoal for sa"], ["proof (prove)\ngoal (1 subgoal):\n 1. sa \\<in> {0..t} \\<Longrightarrow> 0 \\<le> f' sa s - g' sa s", "using geq'[of sa]"], ["proof (prove)\nusing this:\n  sa \\<in> {0..t} \\<Longrightarrow> g' sa s \\<le> f' sa s\n\ngoal (1 subgoal):\n 1. sa \\<in> {0..t} \\<Longrightarrow> 0 \\<le> f' sa s - g' sa s", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 < s \\<and> s \\<le> t\n 2. 0 < t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < s \\<and> s \\<le> t", "using int_s"], ["proof (prove)\nusing this:\n  0 < s \\<and> s \\<le> t\n\ngoal (1 subgoal):\n 1. 0 < s \\<and> s \\<le> t", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < t", "using t"], ["proof (prove)\nusing this:\n  0 < t\n\ngoal (1 subgoal):\n 1. 0 < t", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  f 0 - g 0 \\<le> f s - g s\n\ngoal (1 subgoal):\n 1. g s < f s", "then"], ["proof (chain)\npicking this:\n  f 0 - g 0 \\<le> f s - g s", "show \"?thesis\""], ["proof (prove)\nusing this:\n  f 0 - g 0 \\<le> f s - g s\n\ngoal (1 subgoal):\n 1. g s < f s", "using geq0"], ["proof (prove)\nusing this:\n  f 0 - g 0 \\<le> f s - g s\n  g 0 < f 0\n\ngoal (1 subgoal):\n 1. g s < f s", "by auto"], ["proof (state)\nthis:\n  g s < f s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma frech_linear:\n  fixes x \\<theta> \\<nu> \\<nu>' I\n  assumes good_interp:\"is_interp I\"\n  assumes free:\"dfree \\<theta>\"\n  shows \"x * frechet I \\<theta> \\<nu> \\<nu>' = frechet I \\<theta> \\<nu> (x *\\<^sub>R \\<nu>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * frechet I \\<theta> \\<nu> \\<nu>' =\n    frechet I \\<theta> \\<nu> (x *\\<^sub>R \\<nu>')", "using frechet_linear[OF good_interp free]"], ["proof (prove)\nusing this:\n  bounded_linear (frechet I \\<theta> ?v)\n\ngoal (1 subgoal):\n 1. x * frechet I \\<theta> \\<nu> \\<nu>' =\n    frechet I \\<theta> \\<nu> (x *\\<^sub>R \\<nu>')", "by (simp add: linear_simps)"], ["", "lemma rift_in_space_time:\n  fixes sol I ODE \\<psi> \\<theta> t s b\n  assumes good_interp:\"is_interp I\"\n  assumes free:\"dfree \\<theta>\"\n  assumes osafe:\"osafe ODE\"\n  assumes sol:\"(sol solves_ode (\\<lambda>_ \\<nu>'. ODE_sem I ODE \\<nu>')) {0..t} \n          {x. mk_v I ODE (sol 0, b) x \\<in> fml_sem I \\<psi>}\"\n  assumes FVT:\"FVT \\<theta> \\<subseteq> semBV I ODE\"  \n  assumes ivl:\"s \\<in> {0..t}\"\n  shows \"((\\<lambda>t. sterm_sem I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol t))))\n    \\<comment> \\<open>This is Frechet derivative, so equivalent to:\\<close>\n    \\<comment> \\<open>\\<open>has_real_derivative frechet I \\<theta> (fst((mk_v I ODE (sol 0, b) (sol s)))) (snd (mk_v I ODE (sol 0, b) (sol s))))) (at s within {0..t})\\<close>\\<close>\n    has_derivative (\\<lambda>t'. t' * frechet I \\<theta> (fst((mk_v I ODE (sol 0, b) (sol s)))) (snd (mk_v I ODE (sol 0, b) (sol s))))) (at s within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "let ?\\<phi> = \"(\\<lambda>t. (mk_v I ODE (sol 0, b) (sol t)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "let ?\\<phi>s = \"(\\<lambda>t. fst (?\\<phi> t))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have sol_deriv:\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow> (sol has_derivative (\\<lambda>xa. xa *\\<^sub>R ODE_sem I ODE (sol s))) (at s within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       (sol has_derivative\n        (\\<lambda>xa. xa *\\<^sub>R ODE_sem I ODE (sol s)))\n        (at s within {0..t})", "using sol"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>_. ODE_sem I ODE)) {0..t}\n   {x. mk_v I ODE (sol 0, b) x \\<in> fml_sem I \\<psi>}\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       (sol has_derivative\n        (\\<lambda>xa. xa *\\<^sub>R ODE_sem I ODE (sol s)))\n        (at s within {0..t})", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODE_sem I ODE)) {0..t}\n         {x. mk_v I ODE (sol 0, b) x \\<in> fml_sem I \\<psi>}\\<rbrakk>\n       \\<Longrightarrow> (sol has_derivative\n                          (\\<lambda>xa. xa *\\<^sub>R ODE_sem I ODE (sol s)))\n                          (at s within {0..t})", "apply (drule solves_odeD(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n        (sol has_vderiv_on (\\<lambda>t. ODE_sem I ODE (sol t)))\n         {0..t}\\<rbrakk>\n       \\<Longrightarrow> (sol has_derivative\n                          (\\<lambda>xa. xa *\\<^sub>R ODE_sem I ODE (sol s)))\n                          (at s within {0..t})", "unfolding has_vderiv_on_def has_vector_derivative_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n        \\<forall>x\\<in>{0..t}.\n           (sol has_derivative\n            (\\<lambda>xa. xa *\\<^sub>R ODE_sem I ODE (sol x)))\n            (at x within {0..t})\\<rbrakk>\n       \\<Longrightarrow> (sol has_derivative\n                          (\\<lambda>xa. xa *\\<^sub>R ODE_sem I ODE (sol s)))\n                          (at s within {0..t})", "by auto"], ["proof (state)\nthis:\n  ?s5 \\<in> {0..t} \\<Longrightarrow>\n  (sol has_derivative (\\<lambda>xa. xa *\\<^sub>R ODE_sem I ODE (sol ?s5)))\n   (at ?s5 within {0..t})\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have sol_dom:\"\\<And>s. s\\<in> {0..t} \\<Longrightarrow> ?\\<phi> s \\<in> fml_sem I \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       mk_v I ODE (sol 0, b) (sol s) \\<in> fml_sem I \\<psi>", "using sol"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>_. ODE_sem I ODE)) {0..t}\n   {x. mk_v I ODE (sol 0, b) x \\<in> fml_sem I \\<psi>}\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       mk_v I ODE (sol 0, b) (sol s) \\<in> fml_sem I \\<psi>", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODE_sem I ODE)) {0..t}\n         {x. mk_v I ODE (sol 0, b) x \\<in> fml_sem I \\<psi>}\\<rbrakk>\n       \\<Longrightarrow> mk_v I ODE (sol 0, b) (sol s)\n                         \\<in> fml_sem I \\<psi>", "apply (drule solves_odeD(2))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s. 0 \\<le> s \\<and> s \\<le> t \\<Longrightarrow> ?t5 s \\<in> {0..t}\n 2. \\<And>s.\n       \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n        sol (?t5 s)\n        \\<in> {x. mk_v I ODE (sol 0, b) x \\<in> fml_sem I \\<psi>}\\<rbrakk>\n       \\<Longrightarrow> mk_v I ODE (sol 0, b) (sol s)\n                         \\<in> fml_sem I \\<psi>", "by auto"], ["proof (state)\nthis:\n  ?s5 \\<in> {0..t} \\<Longrightarrow>\n  mk_v I ODE (sol 0, b) (sol ?s5) \\<in> fml_sem I \\<psi>\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "let ?h = \"(\\<lambda>t. sterm_sem I \\<theta> (?\\<phi>s t))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "let ?g = \"(\\<lambda>\\<nu>. sterm_sem I \\<theta> \\<nu>)\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "let ?f = \"?\\<phi>s\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "let ?f' = \"(\\<lambda>t'. t' *\\<^sub>R (\\<chi> i. if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i else 0))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "let ?g' = \"(frechet I \\<theta> (?\\<phi>s s))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have heq:\"?h = ?g \\<circ> ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t.\n        sterm_sem I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol t)))) =\n    sterm_sem I \\<theta> \\<circ>\n    (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)))", "by (auto)"], ["proof (state)\nthis:\n  (\\<lambda>t. sterm_sem I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol t)))) =\n  sterm_sem I \\<theta> \\<circ>\n  (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have fact1:\"\\<And>i. i \\<in> ODE_vars I ODE \\<Longrightarrow> (\\<lambda>t. ?\\<phi>s(t) $ i) = (\\<lambda>t. sol t $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> ODE_vars I ODE \\<Longrightarrow>\n       (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) =\n       (\\<lambda>t. sol t $ i)", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> ODE_vars I ODE \\<Longrightarrow>\n    (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) =\n    (\\<lambda>t. sol t $ i)", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       i \\<in> ODE_vars I ODE \\<Longrightarrow>\n       fst (mk_v I ODE (sol 0, b) (sol t)) $ i = sol t $ i", "subgoal for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> ODE_vars I ODE \\<Longrightarrow>\n    fst (mk_v I ODE (sol 0, b) (sol t)) $ i = sol t $ i", "using mk_v_agree[of I ODE \"(sol 0, b)\" \"sol t\"]"], ["proof (prove)\nusing this:\n  Vagree (mk_v I ODE (sol 0, b) (sol t)) (sol 0, b) (- semBV I ODE) \\<and>\n  Vagree (mk_v I ODE (sol 0, b) (sol t)) (mk_xode I ODE (sol t))\n   (semBV I ODE)\n\ngoal (1 subgoal):\n 1. i \\<in> ODE_vars I ODE \\<Longrightarrow>\n    fst (mk_v I ODE (sol 0, b) (sol t)) $ i = sol t $ i", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i \\<in> - semBV I ODE \\<longrightarrow>\n       fst (mk_v I ODE (sol 0, b) (sol t)) $ i = fst (sol 0, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i \\<in> - semBV I ODE \\<longrightarrow>\n       snd (mk_v I ODE (sol 0, b) (sol t)) $ i = snd (sol 0, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i \\<in> semBV I ODE \\<longrightarrow>\n      fst (mk_v I ODE (sol 0, b) (sol t)) $ i =\n      fst (mk_xode I ODE (sol t)) $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> semBV I ODE \\<longrightarrow>\n      snd (mk_v I ODE (sol 0, b) (sol t)) $ i =\n      snd (mk_xode I ODE (sol t)) $ i)\n\ngoal (1 subgoal):\n 1. i \\<in> ODE_vars I ODE \\<Longrightarrow>\n    fst (mk_v I ODE (sol 0, b) (sol t)) $ i = sol t $ i", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?i5 \\<in> ODE_vars I ODE \\<Longrightarrow>\n  (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)) $ ?i5) =\n  (\\<lambda>t. sol t $ ?i5)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have fact2:\"\\<And>i. i \\<in> ODE_vars I ODE \\<Longrightarrow> (\\<lambda>t. if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol t) $ i else 0) = (\\<lambda>t. ODE_sem I ODE (sol t) $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> ODE_vars I ODE \\<Longrightarrow>\n       (\\<lambda>t.\n           if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol t) $ i\n           else 0) =\n       (\\<lambda>t. ODE_sem I ODE (sol t) $ i)", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> ODE_vars I ODE \\<Longrightarrow>\n    (\\<lambda>t.\n        if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol t) $ i else 0) =\n    (\\<lambda>t. ODE_sem I ODE (sol t) $ i)", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       i \\<in> ODE_vars I ODE \\<Longrightarrow>\n       (if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol t) $ i else 0) =\n       ODE_sem I ODE (sol t) $ i", "subgoal for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> ODE_vars I ODE \\<Longrightarrow>\n    (if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol t) $ i else 0) =\n    ODE_sem I ODE (sol t) $ i", "using mk_v_agree[of I ODE \"(sol 0, b)\" \"sol t\"]"], ["proof (prove)\nusing this:\n  Vagree (mk_v I ODE (sol 0, b) (sol t)) (sol 0, b) (- semBV I ODE) \\<and>\n  Vagree (mk_v I ODE (sol 0, b) (sol t)) (mk_xode I ODE (sol t))\n   (semBV I ODE)\n\ngoal (1 subgoal):\n 1. i \\<in> ODE_vars I ODE \\<Longrightarrow>\n    (if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol t) $ i else 0) =\n    ODE_sem I ODE (sol t) $ i", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i \\<in> - semBV I ODE \\<longrightarrow>\n       fst (mk_v I ODE (sol 0, b) (sol t)) $ i = fst (sol 0, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i \\<in> - semBV I ODE \\<longrightarrow>\n       snd (mk_v I ODE (sol 0, b) (sol t)) $ i = snd (sol 0, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i \\<in> semBV I ODE \\<longrightarrow>\n      fst (mk_v I ODE (sol 0, b) (sol t)) $ i =\n      fst (mk_xode I ODE (sol t)) $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> semBV I ODE \\<longrightarrow>\n      snd (mk_v I ODE (sol 0, b) (sol t)) $ i =\n      snd (mk_xode I ODE (sol t)) $ i)\n\ngoal (1 subgoal):\n 1. i \\<in> ODE_vars I ODE \\<Longrightarrow>\n    (if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol t) $ i else 0) =\n    ODE_sem I ODE (sol t) $ i", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?i5 \\<in> ODE_vars I ODE \\<Longrightarrow>\n  (\\<lambda>t.\n      if ?i5 \\<in> ODE_vars I ODE then ODE_sem I ODE (sol t) $ ?i5 else 0) =\n  (\\<lambda>t. ODE_sem I ODE (sol t) $ ?i5)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have fact3:\"\\<And>i. i \\<in> (-ODE_vars I ODE) \\<Longrightarrow> (\\<lambda>t. ?\\<phi>s(t) $ i) = (\\<lambda>t. sol 0 $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> - ODE_vars I ODE \\<Longrightarrow>\n       (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) =\n       (\\<lambda>t. sol 0 $ i)", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> - ODE_vars I ODE \\<Longrightarrow>\n    (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) =\n    (\\<lambda>t. sol 0 $ i)", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       i \\<in> - ODE_vars I ODE \\<Longrightarrow>\n       fst (mk_v I ODE (sol 0, b) (sol t)) $ i = sol 0 $ i", "subgoal for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> - ODE_vars I ODE \\<Longrightarrow>\n    fst (mk_v I ODE (sol 0, b) (sol t)) $ i = sol 0 $ i", "using mk_v_agree[of I ODE \"(sol 0, b)\" \"sol t\"]"], ["proof (prove)\nusing this:\n  Vagree (mk_v I ODE (sol 0, b) (sol t)) (sol 0, b) (- semBV I ODE) \\<and>\n  Vagree (mk_v I ODE (sol 0, b) (sol t)) (mk_xode I ODE (sol t))\n   (semBV I ODE)\n\ngoal (1 subgoal):\n 1. i \\<in> - ODE_vars I ODE \\<Longrightarrow>\n    fst (mk_v I ODE (sol 0, b) (sol t)) $ i = sol 0 $ i", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i \\<in> - semBV I ODE \\<longrightarrow>\n       fst (mk_v I ODE (sol 0, b) (sol t)) $ i = fst (sol 0, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i \\<in> - semBV I ODE \\<longrightarrow>\n       snd (mk_v I ODE (sol 0, b) (sol t)) $ i = snd (sol 0, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i \\<in> semBV I ODE \\<longrightarrow>\n      fst (mk_v I ODE (sol 0, b) (sol t)) $ i =\n      fst (mk_xode I ODE (sol t)) $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> semBV I ODE \\<longrightarrow>\n      snd (mk_v I ODE (sol 0, b) (sol t)) $ i =\n      snd (mk_xode I ODE (sol t)) $ i)\n\ngoal (1 subgoal):\n 1. i \\<in> - ODE_vars I ODE \\<Longrightarrow>\n    fst (mk_v I ODE (sol 0, b) (sol t)) $ i = sol 0 $ i", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?i5 \\<in> - ODE_vars I ODE \\<Longrightarrow>\n  (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)) $ ?i5) =\n  (\\<lambda>t. sol 0 $ ?i5)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have fact4:\"\\<And>i. i \\<in> (-ODE_vars I ODE) \\<Longrightarrow> (\\<lambda>t. if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol t) $ i else 0) = (\\<lambda>t. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> - ODE_vars I ODE \\<Longrightarrow>\n       (\\<lambda>t.\n           if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol t) $ i\n           else 0) =\n       (\\<lambda>t. 0)", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> - ODE_vars I ODE \\<Longrightarrow>\n    (\\<lambda>t.\n        if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol t) $ i else 0) =\n    (\\<lambda>t. 0)", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       i \\<in> - ODE_vars I ODE \\<Longrightarrow>\n       (if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol t) $ i else 0) = 0", "subgoal for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> - ODE_vars I ODE \\<Longrightarrow>\n    (if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol t) $ i else 0) = 0", "using mk_v_agree[of I ODE \"(sol 0, b)\" \"sol t\"]"], ["proof (prove)\nusing this:\n  Vagree (mk_v I ODE (sol 0, b) (sol t)) (sol 0, b) (- semBV I ODE) \\<and>\n  Vagree (mk_v I ODE (sol 0, b) (sol t)) (mk_xode I ODE (sol t))\n   (semBV I ODE)\n\ngoal (1 subgoal):\n 1. i \\<in> - ODE_vars I ODE \\<Longrightarrow>\n    (if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol t) $ i else 0) = 0", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i \\<in> - semBV I ODE \\<longrightarrow>\n       fst (mk_v I ODE (sol 0, b) (sol t)) $ i = fst (sol 0, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i \\<in> - semBV I ODE \\<longrightarrow>\n       snd (mk_v I ODE (sol 0, b) (sol t)) $ i = snd (sol 0, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i \\<in> semBV I ODE \\<longrightarrow>\n      fst (mk_v I ODE (sol 0, b) (sol t)) $ i =\n      fst (mk_xode I ODE (sol t)) $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> semBV I ODE \\<longrightarrow>\n      snd (mk_v I ODE (sol 0, b) (sol t)) $ i =\n      snd (mk_xode I ODE (sol t)) $ i)\n\ngoal (1 subgoal):\n 1. i \\<in> - ODE_vars I ODE \\<Longrightarrow>\n    (if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol t) $ i else 0) = 0", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?i5 \\<in> - ODE_vars I ODE \\<Longrightarrow>\n  (\\<lambda>t.\n      if ?i5 \\<in> ODE_vars I ODE then ODE_sem I ODE (sol t) $ ?i5 else 0) =\n  (\\<lambda>t. 0)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have some_eq:\"(\\<lambda>v'. \\<chi> i. v' *\\<^sub>R ODE_sem I ODE (sol s) $ i) = (\\<lambda>v'. v' *\\<^sub>R ODE_sem I ODE (sol s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>v'. \\<chi>i. v' *\\<^sub>R ODE_sem I ODE (sol s) $ i) =\n    (\\<lambda>v'. v' *\\<^sub>R ODE_sem I ODE (sol s))", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v'.\n       (\\<chi>i. v' *\\<^sub>R ODE_sem I ODE (sol s) $ i) =\n       v' *\\<^sub>R ODE_sem I ODE (sol s)", "apply(rule vec_extensionality)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v' i.\n       (\\<chi>i. v' *\\<^sub>R ODE_sem I ODE (sol s) $ i) $ i =\n       (v' *\\<^sub>R ODE_sem I ODE (sol s)) $ i", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>v'. \\<chi>i. v' *\\<^sub>R ODE_sem I ODE (sol s) $ i) =\n  (\\<lambda>v'. v' *\\<^sub>R ODE_sem I ODE (sol s))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have some_sol:\"(sol has_derivative (\\<lambda>v'. v' *\\<^sub>R ODE_sem I ODE (sol s))) (at s within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sol has_derivative (\\<lambda>v'. v' *\\<^sub>R ODE_sem I ODE (sol s)))\n     (at s within {0..t})", "using sol ivl"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>_. ODE_sem I ODE)) {0..t}\n   {x. mk_v I ODE (sol 0, b) x \\<in> fml_sem I \\<psi>}\n  s \\<in> {0..t}\n\ngoal (1 subgoal):\n 1. (sol has_derivative (\\<lambda>v'. v' *\\<^sub>R ODE_sem I ODE (sol s)))\n     (at s within {0..t})", "unfolding solves_ode_def has_vderiv_on_def has_vector_derivative_def"], ["proof (prove)\nusing this:\n  (\\<forall>x\\<in>{0..t}.\n      (sol has_derivative (\\<lambda>xa. xa *\\<^sub>R ODE_sem I ODE (sol x)))\n       (at x within {0..t})) \\<and>\n  sol\n  \\<in> {0..t} \\<rightarrow>\n        {x. mk_v I ODE (sol 0, b) x \\<in> fml_sem I \\<psi>}\n  s \\<in> {0..t}\n\ngoal (1 subgoal):\n 1. (sol has_derivative (\\<lambda>v'. v' *\\<^sub>R ODE_sem I ODE (sol s)))\n     (at s within {0..t})", "by auto"], ["proof (state)\nthis:\n  (sol has_derivative (\\<lambda>v'. v' *\\<^sub>R ODE_sem I ODE (sol s)))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have some_eta:\"(\\<lambda>t. \\<chi> i. sol t $ i) = sol\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t. \\<chi>i. sol t $ i) = sol", "by (rule ext, rule vec_extensionality, auto)"], ["proof (state)\nthis:\n  (\\<lambda>t. \\<chi>i. sol t $ i) = sol\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have ode_deriv:\"\\<And>i. i \\<in> ODE_vars I ODE \\<Longrightarrow> \n    ((\\<lambda>t. sol t $ i) has_derivative (\\<lambda> v'. v' *\\<^sub>R ODE_sem I ODE (sol s) $ i)) (at s within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> ODE_vars I ODE \\<Longrightarrow>\n       ((\\<lambda>t. sol t $ i) has_derivative\n        (\\<lambda>v'. v' *\\<^sub>R ODE_sem I ODE (sol s) $ i))\n        (at s within {0..t})", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> ODE_vars I ODE \\<Longrightarrow>\n    ((\\<lambda>t. sol t $ i) has_derivative\n     (\\<lambda>v'. v' *\\<^sub>R ODE_sem I ODE (sol s) $ i))\n     (at s within {0..t})", "apply(rule has_derivative_proj)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> ODE_vars I ODE \\<Longrightarrow>\n    ((\\<lambda>t. \\<chi>i. sol t $ i) has_derivative\n     (\\<lambda>v'. \\<chi>i. v' *\\<^sub>R ODE_sem I ODE (sol s) $ i))\n     (at s within {0..t})", "using some_eq some_sol some_eta"], ["proof (prove)\nusing this:\n  (\\<lambda>v'. \\<chi>i. v' *\\<^sub>R ODE_sem I ODE (sol s) $ i) =\n  (\\<lambda>v'. v' *\\<^sub>R ODE_sem I ODE (sol s))\n  (sol has_derivative (\\<lambda>v'. v' *\\<^sub>R ODE_sem I ODE (sol s)))\n   (at s within {0..t})\n  (\\<lambda>t. \\<chi>i. sol t $ i) = sol\n\ngoal (1 subgoal):\n 1. i \\<in> ODE_vars I ODE \\<Longrightarrow>\n    ((\\<lambda>t. \\<chi>i. sol t $ i) has_derivative\n     (\\<lambda>v'. \\<chi>i. v' *\\<^sub>R ODE_sem I ODE (sol s) $ i))\n     (at s within {0..t})", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?i5 \\<in> ODE_vars I ODE \\<Longrightarrow>\n  ((\\<lambda>t. sol t $ ?i5) has_derivative\n   (\\<lambda>v'. v' *\\<^sub>R ODE_sem I ODE (sol s) $ ?i5))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have eta:\"(\\<lambda>t. (\\<chi> i. ?f t $ i)) = ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t. \\<chi>i. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) =\n    (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)))", "by(rule ext, rule vec_extensionality, auto)"], ["proof (state)\nthis:\n  (\\<lambda>t. \\<chi>i. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) =\n  (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have eta_esque:\"(\\<lambda>t'. \\<chi> i. t' * (if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i else 0)) =  \n                  (\\<lambda>t'. t' *\\<^sub>R (\\<chi> i. if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i else 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t'.\n        \\<chi>i.\n           t' *\n           (if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n            else 0)) =\n    (\\<lambda>t'.\n        t' *\\<^sub>R\n        (\\<chi>i.\n            if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n            else 0))", "apply(rule ext | rule vec_extensionality)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t' i.\n       (\\<chi>i.\n           t' *\n           (if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n            else 0)) $\n       i =\n       (t' *\\<^sub>R\n        (\\<chi>i.\n            if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n            else 0)) $\n       i", "subgoal for t' i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        t' *\n        (if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i else 0)) $\n    i =\n    (t' *\\<^sub>R\n     (\\<chi>i.\n         if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i else 0)) $\n    i", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>t'.\n      \\<chi>i.\n         t' *\n         (if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n          else 0)) =\n  (\\<lambda>t'.\n      t' *\\<^sub>R\n      (\\<chi>i.\n          if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i else 0))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have \"((\\<lambda>t. (\\<chi> i. ?f t $ i)) has_derivative (\\<lambda>t'. (\\<chi> i. ?f' t' $ i))) (at s within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         \\<chi>i. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) has_derivative\n     (\\<lambda>t'.\n         \\<chi>i.\n            (t' *\\<^sub>R\n             (\\<chi>i.\n                 if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n                 else 0)) $\n            i))\n     (at s within {0..t})", "apply (rule has_derivative_vec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       ((\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) has_derivative\n        (\\<lambda>t'.\n            (t' *\\<^sub>R\n             (\\<chi>i.\n                 if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n                 else 0)) $\n            i))\n        (at s within {0..t})", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) has_derivative\n     (\\<lambda>t'.\n         (t' *\\<^sub>R\n          (\\<chi>i.\n              if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n              else 0)) $\n         i))\n     (at s within {0..t})", "apply(cases \"i \\<in> ODE_vars I ODE\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. i \\<in> ODE_vars I ODE \\<Longrightarrow>\n    ((\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) has_derivative\n     (\\<lambda>t'.\n         (t' *\\<^sub>R\n          (\\<chi>i.\n              if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n              else 0)) $\n         i))\n     (at s within {0..t})\n 2. i \\<notin> ODE_vars I ODE \\<Longrightarrow>\n    ((\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) has_derivative\n     (\\<lambda>t'.\n         (t' *\\<^sub>R\n          (\\<chi>i.\n              if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n              else 0)) $\n         i))\n     (at s within {0..t})", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> ODE_vars I ODE \\<Longrightarrow>\n    ((\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) has_derivative\n     (\\<lambda>t'.\n         (t' *\\<^sub>R\n          (\\<chi>i.\n              if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n              else 0)) $\n         i))\n     (at s within {0..t})", "using fact1[of i] fact2[of i] ode_deriv[of i]"], ["proof (prove)\nusing this:\n  i \\<in> ODE_vars I ODE \\<Longrightarrow>\n  (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) =\n  (\\<lambda>t. sol t $ i)\n  i \\<in> ODE_vars I ODE \\<Longrightarrow>\n  (\\<lambda>t.\n      if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol t) $ i else 0) =\n  (\\<lambda>t. ODE_sem I ODE (sol t) $ i)\n  i \\<in> ODE_vars I ODE \\<Longrightarrow>\n  ((\\<lambda>t. sol t $ i) has_derivative\n   (\\<lambda>v'. v' *\\<^sub>R ODE_sem I ODE (sol s) $ i))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. i \\<in> ODE_vars I ODE \\<Longrightarrow>\n    ((\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) has_derivative\n     (\\<lambda>t'.\n         (t' *\\<^sub>R\n          (\\<chi>i.\n              if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n              else 0)) $\n         i))\n     (at s within {0..t})", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<notin> ODE_vars I ODE \\<Longrightarrow>\n    ((\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) has_derivative\n     (\\<lambda>t'.\n         (t' *\\<^sub>R\n          (\\<chi>i.\n              if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n              else 0)) $\n         i))\n     (at s within {0..t})", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<notin> ODE_vars I ODE \\<Longrightarrow>\n    ((\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) has_derivative\n     (\\<lambda>t'.\n         (t' *\\<^sub>R\n          (\\<chi>i.\n              if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n              else 0)) $\n         i))\n     (at s within {0..t})", "using fact3[of i] fact4[of i]"], ["proof (prove)\nusing this:\n  i \\<in> - ODE_vars I ODE \\<Longrightarrow>\n  (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) =\n  (\\<lambda>t. sol 0 $ i)\n  i \\<in> - ODE_vars I ODE \\<Longrightarrow>\n  (\\<lambda>t.\n      if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol t) $ i else 0) =\n  (\\<lambda>t. 0)\n\ngoal (1 subgoal):\n 1. i \\<notin> ODE_vars I ODE \\<Longrightarrow>\n    ((\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) has_derivative\n     (\\<lambda>t'.\n         (t' *\\<^sub>R\n          (\\<chi>i.\n              if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n              else 0)) $\n         i))\n     (at s within {0..t})", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ((\\<lambda>t.\n       \\<chi>i. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) has_derivative\n   (\\<lambda>t'.\n       \\<chi>i.\n          (t' *\\<^sub>R\n           (\\<chi>i.\n               if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n               else 0)) $\n          i))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "then"], ["proof (chain)\npicking this:\n  ((\\<lambda>t.\n       \\<chi>i. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) has_derivative\n   (\\<lambda>t'.\n       \\<chi>i.\n          (t' *\\<^sub>R\n           (\\<chi>i.\n               if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n               else 0)) $\n          i))\n   (at s within {0..t})", "have fderiv:\"(?f has_derivative ?f') (at s within {0..t})\""], ["proof (prove)\nusing this:\n  ((\\<lambda>t.\n       \\<chi>i. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) has_derivative\n   (\\<lambda>t'.\n       \\<chi>i.\n          (t' *\\<^sub>R\n           (\\<chi>i.\n               if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n               else 0)) $\n          i))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n     (\\<lambda>t'.\n         t' *\\<^sub>R\n         (\\<chi>i.\n             if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n             else 0)))\n     (at s within {0..t})", "using eta eta_esque"], ["proof (prove)\nusing this:\n  ((\\<lambda>t.\n       \\<chi>i. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) has_derivative\n   (\\<lambda>t'.\n       \\<chi>i.\n          (t' *\\<^sub>R\n           (\\<chi>i.\n               if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n               else 0)) $\n          i))\n   (at s within {0..t})\n  (\\<lambda>t. \\<chi>i. fst (mk_v I ODE (sol 0, b) (sol t)) $ i) =\n  (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)))\n  (\\<lambda>t'.\n      \\<chi>i.\n         t' *\n         (if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n          else 0)) =\n  (\\<lambda>t'.\n      t' *\\<^sub>R\n      (\\<chi>i.\n          if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i else 0))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n     (\\<lambda>t'.\n         t' *\\<^sub>R\n         (\\<chi>i.\n             if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n             else 0)))\n     (at s within {0..t})", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n   (\\<lambda>t'.\n       t' *\\<^sub>R\n       (\\<chi>i.\n           if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n           else 0)))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have gderiv:\"(?g has_derivative ?g') (at (?f s) within ?f ` {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sterm_sem I \\<theta> has_derivative\n     frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s))))\n     (at (fst (mk_v I ODE (sol 0, b) (sol s)))\n      within (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) ` {0..t})", "using has_derivative_at_withinI"], ["proof (prove)\nusing this:\n  (?f has_derivative ?f') (at ?x) \\<Longrightarrow>\n  (?f has_derivative ?f') (at ?x within ?s)\n\ngoal (1 subgoal):\n 1. (sterm_sem I \\<theta> has_derivative\n     frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s))))\n     (at (fst (mk_v I ODE (sol 0, b) (sol s)))\n      within (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) ` {0..t})", "using frechet_correctness free good_interp"], ["proof (prove)\nusing this:\n  (?f has_derivative ?f') (at ?x) \\<Longrightarrow>\n  (?f has_derivative ?f') (at ?x within ?s)\n  \\<lbrakk>is_interp ?I; dfree ?\\<theta>\\<rbrakk>\n  \\<Longrightarrow> (sterm_sem ?I ?\\<theta> has_derivative\n                     frechet ?I ?\\<theta> ?\\<nu>)\n                     (at ?\\<nu>)\n  dfree \\<theta>\n  is_interp I\n\ngoal (1 subgoal):\n 1. (sterm_sem I \\<theta> has_derivative\n     frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s))))\n     (at (fst (mk_v I ODE (sol 0, b) (sol s)))\n      within (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) ` {0..t})", "by blast"], ["proof (state)\nthis:\n  (sterm_sem I \\<theta> has_derivative\n   frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s))))\n   (at (fst (mk_v I ODE (sol 0, b) (sol s)))\n    within (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) ` {0..t})\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have chain:\"((?g \\<circ> ?f) has_derivative (?g' \\<circ> ?f')) (at s within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sterm_sem I \\<theta> \\<circ>\n     (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n     frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s))) \\<circ>\n     (\\<lambda>t'.\n         t' *\\<^sub>R\n         (\\<chi>i.\n             if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n             else 0)))\n     (at s within {0..t})", "using fderiv gderiv diff_chain_within"], ["proof (prove)\nusing this:\n  ((\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n   (\\<lambda>t'.\n       t' *\\<^sub>R\n       (\\<chi>i.\n           if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n           else 0)))\n   (at s within {0..t})\n  (sterm_sem I \\<theta> has_derivative\n   frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s))))\n   (at (fst (mk_v I ODE (sol 0, b) (sol s)))\n    within (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) ` {0..t})\n  \\<lbrakk>(?f has_derivative ?f') (at ?x within ?s);\n   (?g has_derivative ?g') (at (?f ?x) within ?f ` ?s)\\<rbrakk>\n  \\<Longrightarrow> (?g \\<circ> ?f has_derivative ?g' \\<circ> ?f')\n                     (at ?x within ?s)\n\ngoal (1 subgoal):\n 1. (sterm_sem I \\<theta> \\<circ>\n     (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n     frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s))) \\<circ>\n     (\\<lambda>t'.\n         t' *\\<^sub>R\n         (\\<chi>i.\n             if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n             else 0)))\n     (at s within {0..t})", "by blast"], ["proof (state)\nthis:\n  (sterm_sem I \\<theta> \\<circ>\n   (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n   frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s))) \\<circ>\n   (\\<lambda>t'.\n       t' *\\<^sub>R\n       (\\<chi>i.\n           if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n           else 0)))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "let ?co\\<nu>1 = \"(fst (mk_v I ODE (sol 0, b) (sol s)), ODE_sem I ODE (fst (mk_v I ODE (sol 0, b) (sol s))))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "let ?co\\<nu>2 = \"(fst (mk_v I ODE (sol 0, b) (sol s)), snd (mk_v I ODE (sol 0, b) (sol s)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have sub_cont:\"\\<And>a .a \\<notin> ODE_vars I ODE \\<Longrightarrow> Inl a \\<in> FVT \\<theta> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<notin> ODE_vars I ODE; Inl a \\<in> FVT \\<theta>\\<rbrakk>\n       \\<Longrightarrow> False", "using FVT"], ["proof (prove)\nusing this:\n  FVT \\<theta> \\<subseteq> semBV I ODE\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<notin> ODE_vars I ODE; Inl a \\<in> FVT \\<theta>\\<rbrakk>\n       \\<Longrightarrow> False", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?a5 \\<notin> ODE_vars I ODE; Inl ?a5 \\<in> FVT \\<theta>\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have sub_cont2:\"\\<And>a .a \\<notin> ODE_vars I ODE \\<Longrightarrow> Inr a \\<in> FVT \\<theta> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<notin> ODE_vars I ODE; Inr a \\<in> FVT \\<theta>\\<rbrakk>\n       \\<Longrightarrow> False", "using FVT"], ["proof (prove)\nusing this:\n  FVT \\<theta> \\<subseteq> semBV I ODE\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<notin> ODE_vars I ODE; Inr a \\<in> FVT \\<theta>\\<rbrakk>\n       \\<Longrightarrow> False", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?a5 \\<notin> ODE_vars I ODE; Inr ?a5 \\<in> FVT \\<theta>\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have \"Vagree (mk_v I ODE (sol 0, b) (sol s)) (sol s, b) (Inl ` ODE_vars I ODE)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree (mk_v I ODE (sol 0, b) (sol s)) (sol s, b) (Inl ` ODE_vars I ODE)", "using mk_v_agree[of I ODE \"(sol 0, b)\" \"sol s\"]"], ["proof (prove)\nusing this:\n  Vagree (mk_v I ODE (sol 0, b) (sol s)) (sol 0, b) (- semBV I ODE) \\<and>\n  Vagree (mk_v I ODE (sol 0, b) (sol s)) (mk_xode I ODE (sol s))\n   (semBV I ODE)\n\ngoal (1 subgoal):\n 1. Vagree (mk_v I ODE (sol 0, b) (sol s)) (sol s, b) (Inl ` ODE_vars I ODE)", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i \\<in> - semBV I ODE \\<longrightarrow>\n       fst (mk_v I ODE (sol 0, b) (sol s)) $ i = fst (sol 0, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i \\<in> - semBV I ODE \\<longrightarrow>\n       snd (mk_v I ODE (sol 0, b) (sol s)) $ i = snd (sol 0, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i \\<in> semBV I ODE \\<longrightarrow>\n      fst (mk_v I ODE (sol 0, b) (sol s)) $ i =\n      fst (mk_xode I ODE (sol s)) $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> semBV I ODE \\<longrightarrow>\n      snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n      snd (mk_xode I ODE (sol s)) $ i)\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n        fst (mk_v I ODE (sol 0, b) (sol s)) $ i = fst (sol s, b) $ i) \\<and>\n    (\\<forall>i.\n        Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i = snd (sol s, b) $ i)", "by auto"], ["proof (state)\nthis:\n  Vagree (mk_v I ODE (sol 0, b) (sol s)) (sol s, b) (Inl ` ODE_vars I ODE)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "let ?co'\\<nu>1 = \"(\\<lambda>x. (fst (mk_v I ODE (sol 0, b) (sol s)), x *\\<^sub>R (\\<chi> i. if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i else 0)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "let ?co'\\<nu>2 = \"(\\<lambda>x. (fst (mk_v I ODE (sol 0, b) (sol s)), x *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s))))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have co_agree_sem:\"\\<And>s. Vagree (?co'\\<nu>1 s) (?co'\\<nu>2 s) (semBV I ODE)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sa.\n       Vagree\n        (fst (mk_v I ODE (sol 0, b) (sol s)),\n         sa *\\<^sub>R\n         (\\<chi>i.\n             if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n             else 0))\n        (fst (mk_v I ODE (sol 0, b) (sol s)),\n         sa *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s)))\n        (semBV I ODE)", "subgoal for sa"], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree\n     (fst (mk_v I ODE (sol 0, b) (sol s)),\n      sa *\\<^sub>R\n      (\\<chi>i.\n          if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i else 0))\n     (fst (mk_v I ODE (sol 0, b) (sol s)),\n      sa *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s)))\n     (semBV I ODE)", "using mk_v_agree[of I ODE \"(sol 0, b)\" \"sol s\"]"], ["proof (prove)\nusing this:\n  Vagree (mk_v I ODE (sol 0, b) (sol s)) (sol 0, b) (- semBV I ODE) \\<and>\n  Vagree (mk_v I ODE (sol 0, b) (sol s)) (mk_xode I ODE (sol s))\n   (semBV I ODE)\n\ngoal (1 subgoal):\n 1. Vagree\n     (fst (mk_v I ODE (sol 0, b) (sol s)),\n      sa *\\<^sub>R\n      (\\<chi>i.\n          if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i else 0))\n     (fst (mk_v I ODE (sol 0, b) (sol s)),\n      sa *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s)))\n     (semBV I ODE)", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i \\<in> - semBV I ODE \\<longrightarrow>\n       fst (mk_v I ODE (sol 0, b) (sol s)) $ i = fst (sol 0, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i \\<in> - semBV I ODE \\<longrightarrow>\n       snd (mk_v I ODE (sol 0, b) (sol s)) $ i = snd (sol 0, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i \\<in> semBV I ODE \\<longrightarrow>\n      fst (mk_v I ODE (sol 0, b) (sol s)) $ i =\n      fst (mk_xode I ODE (sol s)) $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> semBV I ODE \\<longrightarrow>\n      snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n      snd (mk_xode I ODE (sol s)) $ i)\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i \\<in> semBV I ODE \\<longrightarrow>\n        fst (fst (mk_v I ODE (sol 0, b) (sol s)),\n             sa *\\<^sub>R\n             (\\<chi>i.\n                 if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n                 else 0)) $\n        i =\n        fst (fst (mk_v I ODE (sol 0, b) (sol s)),\n             sa *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s))) $\n        i) \\<and>\n    (\\<forall>i.\n        Inr i \\<in> semBV I ODE \\<longrightarrow>\n        snd (fst (mk_v I ODE (sol 0, b) (sol s)),\n             sa *\\<^sub>R\n             (\\<chi>i.\n                 if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n                 else 0)) $\n        i =\n        snd (fst (mk_v I ODE (sol 0, b) (sol s)),\n             sa *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s))) $\n        i)", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Vagree\n   (fst (mk_v I ODE (sol 0, b) (sol s)),\n    ?s5 *\\<^sub>R\n    (\\<chi>i.\n        if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i else 0))\n   (fst (mk_v I ODE (sol 0, b) (sol s)),\n    ?s5 *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s)))\n   (semBV I ODE)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have co_agree_help:\"\\<And>s. Vagree (?co'\\<nu>1 s) (?co'\\<nu>2 s) (FVT \\<theta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sa.\n       Vagree\n        (fst (mk_v I ODE (sol 0, b) (sol s)),\n         sa *\\<^sub>R\n         (\\<chi>i.\n             if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n             else 0))\n        (fst (mk_v I ODE (sol 0, b) (sol s)),\n         sa *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s)))\n        (FVT \\<theta>)", "using agree_sub[OF FVT co_agree_sem]"], ["proof (prove)\nusing this:\n  Vagree\n   (fst (mk_v I ODE (sol 0, b) (sol s)),\n    ?s6 *\\<^sub>R\n    (\\<chi>i.\n        if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i else 0))\n   (fst (mk_v I ODE (sol 0, b) (sol s)),\n    ?s6 *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s)))\n   (FVT \\<theta>)\n\ngoal (1 subgoal):\n 1. \\<And>sa.\n       Vagree\n        (fst (mk_v I ODE (sol 0, b) (sol s)),\n         sa *\\<^sub>R\n         (\\<chi>i.\n             if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n             else 0))\n        (fst (mk_v I ODE (sol 0, b) (sol s)),\n         sa *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s)))\n        (FVT \\<theta>)", "by auto"], ["proof (state)\nthis:\n  Vagree\n   (fst (mk_v I ODE (sol 0, b) (sol s)),\n    ?s5 *\\<^sub>R\n    (\\<chi>i.\n        if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i else 0))\n   (fst (mk_v I ODE (sol 0, b) (sol s)),\n    ?s5 *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s)))\n   (FVT \\<theta>)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have co_agree':\"\\<And>s. Vagree (?co'\\<nu>1 s) (?co'\\<nu>2 s) (FVDiff \\<theta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sa.\n       Vagree\n        (fst (mk_v I ODE (sol 0, b) (sol s)),\n         sa *\\<^sub>R\n         (\\<chi>i.\n             if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n             else 0))\n        (fst (mk_v I ODE (sol 0, b) (sol s)),\n         sa *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s)))\n        (FVDiff \\<theta>)", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree\n     (fst (mk_v I ODE (sol 0, b) (sol s)),\n      s *\\<^sub>R\n      (\\<chi>i.\n          if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i else 0))\n     (fst (mk_v I ODE (sol 0, b) (sol s)),\n      s *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s)))\n     (FVDiff \\<theta>)", "using mk_v_agree[of I ODE \"(sol 0, b)\" \"sol s\"]"], ["proof (prove)\nusing this:\n  Vagree (mk_v I ODE (sol 0, b) (sol s)) (sol 0, b) (- semBV I ODE) \\<and>\n  Vagree (mk_v I ODE (sol 0, b) (sol s)) (mk_xode I ODE (sol s))\n   (semBV I ODE)\n\ngoal (1 subgoal):\n 1. Vagree\n     (fst (mk_v I ODE (sol 0, b) (sol s)),\n      s *\\<^sub>R\n      (\\<chi>i.\n          if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i else 0))\n     (fst (mk_v I ODE (sol 0, b) (sol s)),\n      s *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s)))\n     (FVDiff \\<theta>)", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i \\<in> - semBV I ODE \\<longrightarrow>\n       fst (mk_v I ODE (sol 0, b) (sol s)) $ i = fst (sol 0, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i \\<in> - semBV I ODE \\<longrightarrow>\n       snd (mk_v I ODE (sol 0, b) (sol s)) $ i = snd (sol 0, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i \\<in> semBV I ODE \\<longrightarrow>\n      fst (mk_v I ODE (sol 0, b) (sol s)) $ i =\n      fst (mk_xode I ODE (sol s)) $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> semBV I ODE \\<longrightarrow>\n      snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n      snd (mk_xode I ODE (sol s)) $ i)\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i \\<in> FVDiff \\<theta> \\<longrightarrow>\n        fst (fst (mk_v I ODE (sol 0, b) (sol s)),\n             s *\\<^sub>R\n             (\\<chi>i.\n                 if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n                 else 0)) $\n        i =\n        fst (fst (mk_v I ODE (sol 0, b) (sol s)),\n             s *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s))) $\n        i) \\<and>\n    (\\<forall>i.\n        Inr i \\<in> FVDiff \\<theta> \\<longrightarrow>\n        snd (fst (mk_v I ODE (sol 0, b) (sol s)),\n             s *\\<^sub>R\n             (\\<chi>i.\n                 if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n                 else 0)) $\n        i =\n        snd (fst (mk_v I ODE (sol 0, b) (sol s)),\n             s *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s))) $\n        i)", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i x.\n       \\<lbrakk>\\<forall>i.\n                   Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                   Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                   fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n        \\<forall>i.\n           Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n           Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n           snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n        \\<forall>i.\n           (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n            fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n           (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n            fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n        \\<forall>i.\n           (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n            snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n            ODE_sem I ODE (sol s) $ i) \\<and>\n           (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n            snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n            ODE_sem I ODE (sol s) $ i);\n        i \\<in> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n        ODE_sem I ODE (sol s) $ i \\<noteq>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i\\<rbrakk>\n       \\<Longrightarrow> s = 0\n 2. \\<And>i x.\n       \\<lbrakk>\\<forall>i.\n                   Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                   Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                   fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n        \\<forall>i.\n           Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n           Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n           snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n        \\<forall>i.\n           (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n            fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n           (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n            fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n        \\<forall>i.\n           (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n            snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n            ODE_sem I ODE (sol s) $ i) \\<and>\n           (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n            snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n            ODE_sem I ODE (sol s) $ i);\n        i \\<notin> ODE_vars I ODE; x \\<in> FVT \\<theta>;\n        Inr i \\<in> primify x;\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> s = 0", "subgoal for i x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i);\n     i \\<in> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n     ODE_sem I ODE (sol s) $ i \\<noteq>\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i\\<rbrakk>\n    \\<Longrightarrow> s = 0", "apply(cases x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<forall>i.\n                   Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                   Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                   fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n        \\<forall>i.\n           Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n           Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n           snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n        \\<forall>i.\n           (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n            fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n           (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n            fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n        \\<forall>i.\n           (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n            snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n            ODE_sem I ODE (sol s) $ i) \\<and>\n           (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n            snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n            ODE_sem I ODE (sol s) $ i);\n        i \\<in> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n        ODE_sem I ODE (sol s) $ i \\<noteq>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i;\n        x = Inl a\\<rbrakk>\n       \\<Longrightarrow> s = 0\n 2. \\<And>ba.\n       \\<lbrakk>\\<forall>i.\n                   Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                   Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                   fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n        \\<forall>i.\n           Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n           Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n           snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n        \\<forall>i.\n           (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n            fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n           (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n            fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n        \\<forall>i.\n           (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n            snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n            ODE_sem I ODE (sol s) $ i) \\<and>\n           (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n            snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n            ODE_sem I ODE (sol s) $ i);\n        i \\<in> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n        ODE_sem I ODE (sol s) $ i \\<noteq>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i;\n        x = Inr ba\\<rbrakk>\n       \\<Longrightarrow> s = 0", "subgoal for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i);\n     i \\<in> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n     ODE_sem I ODE (sol s) $ i \\<noteq>\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i;\n     x = Inl a\\<rbrakk>\n    \\<Longrightarrow> s = 0", "apply(cases \"a \\<in> ODE_vars I ODE\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i);\n     i \\<in> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n     ODE_sem I ODE (sol s) $ i \\<noteq>\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i;\n     x = Inl a; a \\<in> ODE_vars I ODE\\<rbrakk>\n    \\<Longrightarrow> s = 0\n 2. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i);\n     i \\<in> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n     ODE_sem I ODE (sol s) $ i \\<noteq>\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i;\n     x = Inl a; a \\<notin> ODE_vars I ODE\\<rbrakk>\n    \\<Longrightarrow> s = 0", "by (simp | metis (no_types, lifting) FVT ODE_vars_lr Vagree_def mk_v_agree mk_xode.elims subsetD snd_conv)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ba.\n       \\<lbrakk>\\<forall>i.\n                   Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                   Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                   fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n        \\<forall>i.\n           Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n           Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n           snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n        \\<forall>i.\n           (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n            fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n           (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n            fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n        \\<forall>i.\n           (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n            snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n            ODE_sem I ODE (sol s) $ i) \\<and>\n           (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n            snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n            ODE_sem I ODE (sol s) $ i);\n        i \\<in> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n        ODE_sem I ODE (sol s) $ i \\<noteq>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i;\n        x = Inr ba\\<rbrakk>\n       \\<Longrightarrow> s = 0", "subgoal for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i);\n     i \\<in> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n     ODE_sem I ODE (sol s) $ i \\<noteq>\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i;\n     x = Inr a\\<rbrakk>\n    \\<Longrightarrow> s = 0", "apply(cases \"a \\<in> ODE_vars I ODE\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i);\n     i \\<in> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n     ODE_sem I ODE (sol s) $ i \\<noteq>\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i;\n     x = Inr a; a \\<in> ODE_vars I ODE\\<rbrakk>\n    \\<Longrightarrow> s = 0\n 2. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i);\n     i \\<in> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n     ODE_sem I ODE (sol s) $ i \\<noteq>\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i;\n     x = Inr a; a \\<notin> ODE_vars I ODE\\<rbrakk>\n    \\<Longrightarrow> s = 0", "by (simp | metis (no_types, lifting) FVT Vagree_def mk_v_agree mk_xode.elims subsetD snd_conv)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i x.\n       \\<lbrakk>\\<forall>i.\n                   Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                   Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                   fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n        \\<forall>i.\n           Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n           Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n           snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n        \\<forall>i.\n           (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n            fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n           (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n            fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n        \\<forall>i.\n           (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n            snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n            ODE_sem I ODE (sol s) $ i) \\<and>\n           (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n            snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n            ODE_sem I ODE (sol s) $ i);\n        i \\<notin> ODE_vars I ODE; x \\<in> FVT \\<theta>;\n        Inr i \\<in> primify x;\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> s = 0", "subgoal for i x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i);\n     i \\<notin> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> s = 0", "apply(cases x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>\\<forall>i.\n                   Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                   Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                   fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n        \\<forall>i.\n           Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n           Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n           snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n        \\<forall>i.\n           (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n            fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n           (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n            fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n        \\<forall>i.\n           (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n            snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n            ODE_sem I ODE (sol s) $ i) \\<and>\n           (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n            snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n            ODE_sem I ODE (sol s) $ i);\n        i \\<notin> ODE_vars I ODE; x \\<in> FVT \\<theta>;\n        Inr i \\<in> primify x;\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i \\<noteq> 0;\n        x = Inl a\\<rbrakk>\n       \\<Longrightarrow> s = 0\n 2. \\<And>ba.\n       \\<lbrakk>\\<forall>i.\n                   Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                   Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                   fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n        \\<forall>i.\n           Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n           Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n           snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n        \\<forall>i.\n           (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n            fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n           (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n            fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n        \\<forall>i.\n           (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n            snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n            ODE_sem I ODE (sol s) $ i) \\<and>\n           (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n            snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n            ODE_sem I ODE (sol s) $ i);\n        i \\<notin> ODE_vars I ODE; x \\<in> FVT \\<theta>;\n        Inr i \\<in> primify x;\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i \\<noteq> 0;\n        x = Inr ba\\<rbrakk>\n       \\<Longrightarrow> s = 0", "subgoal for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i);\n     i \\<notin> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i \\<noteq> 0; x = Inl a\\<rbrakk>\n    \\<Longrightarrow> s = 0", "apply(cases \"a \\<in> ODE_vars I ODE\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i);\n     i \\<notin> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i \\<noteq> 0; x = Inl a;\n     a \\<in> ODE_vars I ODE\\<rbrakk>\n    \\<Longrightarrow> s = 0\n 2. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i);\n     i \\<notin> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i \\<noteq> 0; x = Inl a;\n     a \\<notin> ODE_vars I ODE\\<rbrakk>\n    \\<Longrightarrow> s = 0", "using FVT ODE_vars_lr Vagree_def mk_v_agree mk_xode.elims subsetD snd_conv"], ["proof (prove)\nusing this:\n  FVT \\<theta> \\<subseteq> semBV I ODE\n  (Inl ?x \\<in> semBV ?I ?ODE) = (Inr ?x \\<in> semBV ?I ?ODE)\n  Vagree ?\\<nu> ?\\<nu>' ?V \\<equiv>\n  (\\<forall>i.\n      Inl i \\<in> ?V \\<longrightarrow>\n      fst ?\\<nu> $ i = fst ?\\<nu>' $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> ?V \\<longrightarrow> snd ?\\<nu> $ i = snd ?\\<nu>' $ i)\n  Vagree (mk_v ?I ?ODE ?\\<nu> ?sol) ?\\<nu> (- semBV ?I ?ODE) \\<and>\n  Vagree (mk_v ?I ?ODE ?\\<nu> ?sol) (mk_xode ?I ?ODE ?sol) (semBV ?I ?ODE)\n  \\<lbrakk>mk_xode ?x ?xa ?xb = ?y;\n   \\<And>I ODE sol.\n      \\<lbrakk>?x = I; ?xa = ODE; ?xb = sol;\n       ?y = (sol, ODE_sem I ODE sol)\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?c \\<in> ?B\n  snd (?x1.0, ?x2.0) = ?x2.0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i);\n     i \\<notin> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i \\<noteq> 0; x = Inl a;\n     a \\<in> ODE_vars I ODE\\<rbrakk>\n    \\<Longrightarrow> s = 0\n 2. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i);\n     i \\<notin> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i \\<noteq> 0; x = Inl a;\n     a \\<notin> ODE_vars I ODE\\<rbrakk>\n    \\<Longrightarrow> s = 0", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ba.\n       \\<lbrakk>\\<forall>i.\n                   Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                   Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                   fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n        \\<forall>i.\n           Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n           Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n           snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n        \\<forall>i.\n           (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n            fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n           (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n            fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n        \\<forall>i.\n           (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n            snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n            ODE_sem I ODE (sol s) $ i) \\<and>\n           (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n            snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n            ODE_sem I ODE (sol s) $ i);\n        i \\<notin> ODE_vars I ODE; x \\<in> FVT \\<theta>;\n        Inr i \\<in> primify x;\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i \\<noteq> 0;\n        x = Inr ba\\<rbrakk>\n       \\<Longrightarrow> s = 0", "subgoal for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i);\n     i \\<notin> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i \\<noteq> 0; x = Inr a\\<rbrakk>\n    \\<Longrightarrow> s = 0", "apply(cases \"a \\<in> ODE_vars I ODE\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i);\n     i \\<notin> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i \\<noteq> 0; x = Inr a;\n     a \\<in> ODE_vars I ODE\\<rbrakk>\n    \\<Longrightarrow> s = 0\n 2. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i);\n     i \\<notin> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i \\<noteq> 0; x = Inr a;\n     a \\<notin> ODE_vars I ODE\\<rbrakk>\n    \\<Longrightarrow> s = 0", "apply(erule allE[where x=i])+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<notin> ODE_vars I ODE; x \\<in> FVT \\<theta>;\n     Inr i \\<in> primify x;\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i \\<noteq> 0; x = Inr a;\n     a \\<in> ODE_vars I ODE;\n     Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n     Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n     fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n     Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n      fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n     (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n      fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n      snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n      ODE_sem I ODE (sol s) $ i) \\<and>\n     (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n      snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n      ODE_sem I ODE (sol s) $ i)\\<rbrakk>\n    \\<Longrightarrow> s = 0\n 2. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i);\n     i \\<notin> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i \\<noteq> 0; x = Inr a;\n     a \\<notin> ODE_vars I ODE\\<rbrakk>\n    \\<Longrightarrow> s = 0", "using FVT ODE_vars_lr Vagree_def mk_v_agree mk_xode.elims subsetD snd_conv"], ["proof (prove)\nusing this:\n  FVT \\<theta> \\<subseteq> semBV I ODE\n  (Inl ?x \\<in> semBV ?I ?ODE) = (Inr ?x \\<in> semBV ?I ?ODE)\n  Vagree ?\\<nu> ?\\<nu>' ?V \\<equiv>\n  (\\<forall>i.\n      Inl i \\<in> ?V \\<longrightarrow>\n      fst ?\\<nu> $ i = fst ?\\<nu>' $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> ?V \\<longrightarrow> snd ?\\<nu> $ i = snd ?\\<nu>' $ i)\n  Vagree (mk_v ?I ?ODE ?\\<nu> ?sol) ?\\<nu> (- semBV ?I ?ODE) \\<and>\n  Vagree (mk_v ?I ?ODE ?\\<nu> ?sol) (mk_xode ?I ?ODE ?sol) (semBV ?I ?ODE)\n  \\<lbrakk>mk_xode ?x ?xa ?xb = ?y;\n   \\<And>I ODE sol.\n      \\<lbrakk>?x = I; ?xa = ODE; ?xb = sol;\n       ?y = (sol, ODE_sem I ODE sol)\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?c \\<in> ?B\n  snd (?x1.0, ?x2.0) = ?x2.0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<notin> ODE_vars I ODE; x \\<in> FVT \\<theta>;\n     Inr i \\<in> primify x;\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i \\<noteq> 0; x = Inr a;\n     a \\<in> ODE_vars I ODE;\n     Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n     Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n     fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n     Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n      fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n     (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n      fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n      snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n      ODE_sem I ODE (sol s) $ i) \\<and>\n     (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n      snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n      ODE_sem I ODE (sol s) $ i)\\<rbrakk>\n    \\<Longrightarrow> s = 0\n 2. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODE_vars I ODE \\<and>\n                Inl i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n                fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODE_vars I ODE \\<and>\n        Inr i \\<notin> Inr ` ODE_vars I ODE \\<longrightarrow>\n        snd (mk_v I ODE (sol 0, b) (sol s)) $ i = b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i) \\<and>\n        (Inl i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         fst (mk_v I ODE (sol 0, b) (sol s)) $ i = sol s $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i) \\<and>\n        (Inr i \\<in> Inr ` ODE_vars I ODE \\<longrightarrow>\n         snd (mk_v I ODE (sol 0, b) (sol s)) $ i =\n         ODE_sem I ODE (sol s) $ i);\n     i \\<notin> ODE_vars I ODE; x \\<in> FVT \\<theta>; Inr i \\<in> primify x;\n     snd (mk_v I ODE (sol 0, b) (sol s)) $ i \\<noteq> 0; x = Inr a;\n     a \\<notin> ODE_vars I ODE\\<rbrakk>\n    \\<Longrightarrow> s = 0", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Vagree\n   (fst (mk_v I ODE (sol 0, b) (sol s)),\n    ?s5 *\\<^sub>R\n    (\\<chi>i.\n        if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i else 0))\n   (fst (mk_v I ODE (sol 0, b) (sol s)),\n    ?s5 *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s)))\n   (FVDiff \\<theta>)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have heq'':\"(?g' \\<circ> ?f') = (\\<lambda>t'. t' *\\<^sub>R frechet I \\<theta> (?\\<phi>s s) (snd (?\\<phi> s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s))) \\<circ>\n    (\\<lambda>t'.\n        t' *\\<^sub>R\n        (\\<chi>i.\n            if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n            else 0)) =\n    (\\<lambda>t'.\n        t' *\\<^sub>R\n        frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n         (snd (mk_v I ODE (sol 0, b) (sol s))))", "using mk_v_agree[of I ODE \"(sol 0, b)\" \"sol s\"]"], ["proof (prove)\nusing this:\n  Vagree (mk_v I ODE (sol 0, b) (sol s)) (sol 0, b) (- semBV I ODE) \\<and>\n  Vagree (mk_v I ODE (sol 0, b) (sol s)) (mk_xode I ODE (sol s))\n   (semBV I ODE)\n\ngoal (1 subgoal):\n 1. frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s))) \\<circ>\n    (\\<lambda>t'.\n        t' *\\<^sub>R\n        (\\<chi>i.\n            if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n            else 0)) =\n    (\\<lambda>t'.\n        t' *\\<^sub>R\n        frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n         (snd (mk_v I ODE (sol 0, b) (sol s))))", "unfolding comp_def"], ["proof (prove)\nusing this:\n  Vagree (mk_v I ODE (sol 0, b) (sol s)) (sol 0, b) (- semBV I ODE) \\<and>\n  Vagree (mk_v I ODE (sol 0, b) (sol s)) (mk_xode I ODE (sol s))\n   (semBV I ODE)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n         (x *\\<^sub>R\n          (\\<chi>i.\n              if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n              else 0))) =\n    (\\<lambda>t'.\n        t' *\\<^sub>R\n        frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n         (snd (mk_v I ODE (sol 0, b) (sol s))))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Vagree (mk_v I ODE (sol 0, b) (sol s)) (sol 0, b)\n              (- Inl ` ODE_vars I ODE \\<inter> - Inr ` ODE_vars I ODE);\n     Vagree (mk_v I ODE (sol 0, b) (sol s)) (sol s, ODE_sem I ODE (sol s))\n      (Inl ` ODE_vars I ODE \\<union> Inr ` ODE_vars I ODE)\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x.\n                          frechet I \\<theta>\n                           (fst (mk_v I ODE (sol 0, b) (sol s)))\n                           (x *\\<^sub>R\n                            (\\<chi>i.\n                                if i \\<in> ODE_vars I ODE\n                                then ODE_sem I ODE (sol s) $ i else 0))) =\n                      (\\<lambda>t'.\n                          t' *\n                          frechet I \\<theta>\n                           (fst (mk_v I ODE (sol 0, b) (sol s)))\n                           (snd (mk_v I ODE (sol 0, b) (sol s))))", "apply(rule ext | rule vec_extensionality)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Vagree (mk_v I ODE (sol 0, b) (sol s)) (sol 0, b)\n                 (- Inl ` ODE_vars I ODE \\<inter> - Inr ` ODE_vars I ODE);\n        Vagree (mk_v I ODE (sol 0, b) (sol s))\n         (sol s, ODE_sem I ODE (sol s))\n         (Inl ` ODE_vars I ODE \\<union> Inr ` ODE_vars I ODE)\\<rbrakk>\n       \\<Longrightarrow> frechet I \\<theta>\n                          (fst (mk_v I ODE (sol 0, b) (sol s)))\n                          (x *\\<^sub>R\n                           (\\<chi>i.\n                               if i \\<in> ODE_vars I ODE\n                               then ODE_sem I ODE (sol s) $ i else 0)) =\n                         x *\n                         frechet I \\<theta>\n                          (fst (mk_v I ODE (sol 0, b) (sol s)))\n                          (snd (mk_v I ODE (sol 0, b) (sol s)))", "subgoal for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Vagree (mk_v I ODE (sol 0, b) (sol s)) (sol 0, b)\n              (- Inl ` ODE_vars I ODE \\<inter> - Inr ` ODE_vars I ODE);\n     Vagree (mk_v I ODE (sol 0, b) (sol s)) (sol s, ODE_sem I ODE (sol s))\n      (Inl ` ODE_vars I ODE \\<union> Inr ` ODE_vars I ODE)\\<rbrakk>\n    \\<Longrightarrow> frechet I \\<theta>\n                       (fst (mk_v I ODE (sol 0, b) (sol s)))\n                       (x *\\<^sub>R\n                        (\\<chi>i.\n                            if i \\<in> ODE_vars I ODE\n                            then ODE_sem I ODE (sol s) $ i else 0)) =\n                      x *\n                      frechet I \\<theta>\n                       (fst (mk_v I ODE (sol 0, b) (sol s)))\n                       (snd (mk_v I ODE (sol 0, b) (sol s)))", "using frech_linear[of I \\<theta> x \"(fst (mk_v I ODE (sol 0, b) (sol s)))\" \"(snd (mk_v I ODE (sol 0, b) (sol s)))\", OF good_interp free]"], ["proof (prove)\nusing this:\n  x *\n  frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n   (snd (mk_v I ODE (sol 0, b) (sol s))) =\n  frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n   (x *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Vagree (mk_v I ODE (sol 0, b) (sol s)) (sol 0, b)\n              (- Inl ` ODE_vars I ODE \\<inter> - Inr ` ODE_vars I ODE);\n     Vagree (mk_v I ODE (sol 0, b) (sol s)) (sol s, ODE_sem I ODE (sol s))\n      (Inl ` ODE_vars I ODE \\<union> Inr ` ODE_vars I ODE)\\<rbrakk>\n    \\<Longrightarrow> frechet I \\<theta>\n                       (fst (mk_v I ODE (sol 0, b) (sol s)))\n                       (x *\\<^sub>R\n                        (\\<chi>i.\n                            if i \\<in> ODE_vars I ODE\n                            then ODE_sem I ODE (sol s) $ i else 0)) =\n                      x *\n                      frechet I \\<theta>\n                       (fst (mk_v I ODE (sol 0, b) (sol s)))\n                       (snd (mk_v I ODE (sol 0, b) (sol s)))", "using coincidence_frechet[OF free, of \"(?co'\\<nu>1 x)\" \"(?co'\\<nu>2 x)\", OF co_agree'[of x], of I]"], ["proof (prove)\nusing this:\n  x *\n  frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n   (snd (mk_v I ODE (sol 0, b) (sol s))) =\n  frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n   (x *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s)))\n  frechet I \\<theta>\n   (fst (fst (mk_v I ODE (sol 0, b) (sol s)),\n         x *\\<^sub>R\n         (\\<chi>i.\n             if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n             else 0)))\n   (snd (fst (mk_v I ODE (sol 0, b) (sol s)),\n         x *\\<^sub>R\n         (\\<chi>i.\n             if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n             else 0))) =\n  frechet I \\<theta>\n   (fst (fst (mk_v I ODE (sol 0, b) (sol s)),\n         x *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s))))\n   (snd (fst (mk_v I ODE (sol 0, b) (sol s)),\n         x *\\<^sub>R snd (mk_v I ODE (sol 0, b) (sol s))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Vagree (mk_v I ODE (sol 0, b) (sol s)) (sol 0, b)\n              (- Inl ` ODE_vars I ODE \\<inter> - Inr ` ODE_vars I ODE);\n     Vagree (mk_v I ODE (sol 0, b) (sol s)) (sol s, ODE_sem I ODE (sol s))\n      (Inl ` ODE_vars I ODE \\<union> Inr ` ODE_vars I ODE)\\<rbrakk>\n    \\<Longrightarrow> frechet I \\<theta>\n                       (fst (mk_v I ODE (sol 0, b) (sol s)))\n                       (x *\\<^sub>R\n                        (\\<chi>i.\n                            if i \\<in> ODE_vars I ODE\n                            then ODE_sem I ODE (sol s) $ i else 0)) =\n                      x *\n                      frechet I \\<theta>\n                       (fst (mk_v I ODE (sol 0, b) (sol s)))\n                       (snd (mk_v I ODE (sol 0, b) (sol s)))", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s))) \\<circ>\n  (\\<lambda>t'.\n      t' *\\<^sub>R\n      (\\<chi>i.\n          if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n          else 0)) =\n  (\\<lambda>t'.\n      t' *\\<^sub>R\n      frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n       (snd (mk_v I ODE (sol 0, b) (sol s))))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "have \"((?g \\<circ> ?f) has_derivative (?g' \\<circ> ?f')) (at s within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sterm_sem I \\<theta> \\<circ>\n     (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n     frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s))) \\<circ>\n     (\\<lambda>t'.\n         t' *\\<^sub>R\n         (\\<chi>i.\n             if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n             else 0)))\n     (at s within {0..t})", "using chain"], ["proof (prove)\nusing this:\n  (sterm_sem I \\<theta> \\<circ>\n   (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n   frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s))) \\<circ>\n   (\\<lambda>t'.\n       t' *\\<^sub>R\n       (\\<chi>i.\n           if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n           else 0)))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. (sterm_sem I \\<theta> \\<circ>\n     (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n     frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s))) \\<circ>\n     (\\<lambda>t'.\n         t' *\\<^sub>R\n         (\\<chi>i.\n             if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n             else 0)))\n     (at s within {0..t})", "by auto"], ["proof (state)\nthis:\n  (sterm_sem I \\<theta> \\<circ>\n   (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n   frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s))) \\<circ>\n   (\\<lambda>t'.\n       t' *\\<^sub>R\n       (\\<chi>i.\n           if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n           else 0)))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "then"], ["proof (chain)\npicking this:\n  (sterm_sem I \\<theta> \\<circ>\n   (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n   frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s))) \\<circ>\n   (\\<lambda>t'.\n       t' *\\<^sub>R\n       (\\<chi>i.\n           if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n           else 0)))\n   (at s within {0..t})", "have \"((?g \\<circ> ?f) has_derivative (\\<lambda>t'. t' * frechet I \\<theta> (?\\<phi>s s) (snd (?\\<phi> s)))) (at s within {0..t})\""], ["proof (prove)\nusing this:\n  (sterm_sem I \\<theta> \\<circ>\n   (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n   frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s))) \\<circ>\n   (\\<lambda>t'.\n       t' *\\<^sub>R\n       (\\<chi>i.\n           if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n           else 0)))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. (sterm_sem I \\<theta> \\<circ>\n     (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "using heq''"], ["proof (prove)\nusing this:\n  (sterm_sem I \\<theta> \\<circ>\n   (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n   frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s))) \\<circ>\n   (\\<lambda>t'.\n       t' *\\<^sub>R\n       (\\<chi>i.\n           if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n           else 0)))\n   (at s within {0..t})\n  frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s))) \\<circ>\n  (\\<lambda>t'.\n      t' *\\<^sub>R\n      (\\<chi>i.\n          if i \\<in> ODE_vars I ODE then ODE_sem I ODE (sol s) $ i\n          else 0)) =\n  (\\<lambda>t'.\n      t' *\\<^sub>R\n      frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n       (snd (mk_v I ODE (sol 0, b) (sol s))))\n\ngoal (1 subgoal):\n 1. (sterm_sem I \\<theta> \\<circ>\n     (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "by auto"], ["proof (state)\nthis:\n  (sterm_sem I \\<theta> \\<circ>\n   (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n   (\\<lambda>t'.\n       t' *\n       frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n        (snd (mk_v I ODE (sol 0, b) (sol s)))))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "then"], ["proof (chain)\npicking this:\n  (sterm_sem I \\<theta> \\<circ>\n   (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n   (\\<lambda>t'.\n       t' *\n       frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n        (snd (mk_v I ODE (sol 0, b) (sol s)))))\n   (at s within {0..t})", "have result:\"((\\<lambda>t. sterm_sem I \\<theta> (?\\<phi>s t))  has_derivative (\\<lambda>t. t * frechet I \\<theta> (?\\<phi>s s) (snd (?\\<phi> s)))) (at s within {0..t})\""], ["proof (prove)\nusing this:\n  (sterm_sem I \\<theta> \\<circ>\n   (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n   (\\<lambda>t'.\n       t' *\n       frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n        (snd (mk_v I ODE (sol 0, b) (sol s)))))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t.\n         t *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "using heq"], ["proof (prove)\nusing this:\n  (sterm_sem I \\<theta> \\<circ>\n   (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t))) has_derivative\n   (\\<lambda>t'.\n       t' *\n       frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n        (snd (mk_v I ODE (sol 0, b) (sol s)))))\n   (at s within {0..t})\n  (\\<lambda>t. sterm_sem I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol t)))) =\n  sterm_sem I \\<theta> \\<circ>\n  (\\<lambda>t. fst (mk_v I ODE (sol 0, b) (sol t)))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t.\n         t *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>t.\n       sterm_sem I \\<theta>\n        (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n   (\\<lambda>t.\n       t *\n       frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n        (snd (mk_v I ODE (sol 0, b) (sol s)))))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "then"], ["proof (chain)\npicking this:\n  ((\\<lambda>t.\n       sterm_sem I \\<theta>\n        (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n   (\\<lambda>t.\n       t *\n       frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n        (snd (mk_v I ODE (sol 0, b) (sol s)))))\n   (at s within {0..t})", "show \"?thesis\""], ["proof (prove)\nusing this:\n  ((\\<lambda>t.\n       sterm_sem I \\<theta>\n        (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n   (\\<lambda>t.\n       t *\n       frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n        (snd (mk_v I ODE (sol 0, b) (sol s)))))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         sterm_sem I \\<theta>\n          (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n     (\\<lambda>t'.\n         t' *\n         frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n          (snd (mk_v I ODE (sol 0, b) (sol s)))))\n     (at s within {0..t})", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>t.\n       sterm_sem I \\<theta>\n        (fst (mk_v I ODE (sol 0, b) (sol t)))) has_derivative\n   (\\<lambda>t'.\n       t' *\n       frechet I \\<theta> (fst (mk_v I ODE (sol 0, b) (sol s)))\n        (snd (mk_v I ODE (sol 0, b) (sol s)))))\n   (at s within {0..t})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dterm_sterm_dfree:\n   \"dfree \\<theta> \\<Longrightarrow> (\\<And>\\<nu> \\<nu>'. sterm_sem I \\<theta> \\<nu> = dterm_sem I \\<theta> (\\<nu>, \\<nu>'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree \\<theta> \\<Longrightarrow>\n    (\\<And>\\<nu> \\<nu>'.\n        sterm_sem I \\<theta> \\<nu> = dterm_sem I \\<theta> (\\<nu>, \\<nu>'))", "by(induction rule: dfree.induct, auto)\n\n\\<comment> \\<open>\\<open>g(x)\\<ge> h(x) \\<rightarrow>  [x'=f(x), c & p(x)](g(x)' \\<ge> h(x)') \\<rightarrow> [x'=f(x), c]g(x) \\<ge> h(x)\\<close>\\<close>"], ["", "lemma DIGeq_valid:\"valid DIGeqaxiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid DIGeqaxiom", "unfolding DIGeqaxiom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid\n     (($\\<phi> vid1 local.empty \\<rightarrow>\n       [[EvolveODE (OVar vid1)\n          ($\\<phi> vid1\n            local.empty)]]Geq (Differential (f1 fid1 vid1))\n                           (Differential (f1 fid2 vid1))) \\<rightarrow>\n      ($\\<phi> vid1 local.empty \\<rightarrow>\n       Geq (f1 fid1 vid1) (f1 fid2 vid1)) \\<rightarrow>\n      [[EvolveODE (OVar vid1)\n         ($\\<phi> vid1 local.empty)]]Geq (f1 fid1 vid1) (f1 fid2 vid1))", "apply(unfold DIGeqaxiom_def valid_def impl_sem iff_sem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I \\<nu>.\n       is_interp I \\<longrightarrow>\n       (\\<nu> \\<in> fml_sem I ($\\<phi> vid1 local.empty) \\<longrightarrow>\n        \\<nu>\n        \\<in> fml_sem I\n               ([[EvolveODE (OVar vid1)\n                   ($\\<phi> vid1\n                     local.empty)]]Geq (Differential (f1 fid1 vid1))\n                                    (Differential\n(f1 fid2 vid1)))) \\<longrightarrow>\n       (\\<nu> \\<in> fml_sem I ($\\<phi> vid1 local.empty) \\<longrightarrow>\n        \\<nu>\n        \\<in> fml_sem I\n               (Geq (f1 fid1 vid1) (f1 fid2 vid1))) \\<longrightarrow>\n       \\<nu>\n       \\<in> fml_sem I\n              ([[EvolveODE (OVar vid1)\n                  ($\\<phi> vid1\n                    local.empty)]]Geq (f1 fid1 vid1) (f1 fid2 vid1))", "apply(auto)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "(* 4 goals*)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "fix I::\"('sf,'sc,'sz) interp\" and  b aa ba \n      and sol::\"real \\<Rightarrow> 'sz simple_state\" \n      and t::real"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?ODE = \"OVar vid1\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?\\<phi> = \"(\\<lambda>t. mk_v I (?ODE) (sol 0, b) (sol t))\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume t:\"0 \\<le> t\"\n      and sol:\"(sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n      {x. Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) (mk_v I ?ODE (sol 0, b) x))}\"\n      and notin:\" \\<not>(Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) (sol 0, b)))\""], ["proof (state)\nthis:\n  0 \\<le> t\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n  \\<not> Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have fsafe:\"fsafe (Prop vid1 empty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fsafe ($\\<phi> vid1 local.empty)", "by (auto simp add: empty_def)"], ["proof (state)\nthis:\n  fsafe ($\\<phi> vid1 local.empty)\n\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "from sol"], ["proof (chain)\npicking this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}", "have \"Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) (?\\<phi> 0))\""], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n\ngoal (1 subgoal):\n 1. Predicates I vid1\n     (\\<chi>i.\n         dterm_sem I (local.empty i)\n          (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "using t solves_ode_domainD[of sol \"(\\<lambda>a. ODEs I vid1)\" \"{0..t}\"]"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n  0 \\<le> t\n  \\<lbrakk>(sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t} ?X;\n   ?t \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> sol ?t \\<in> ?X\n\ngoal (1 subgoal):\n 1. Predicates I vid1\n     (\\<chi>i.\n         dterm_sem I (local.empty i)\n          (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "by auto"], ["proof (state)\nthis:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "then"], ["proof (chain)\npicking this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "have incon:\"Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) ((sol 0, b)))\""], ["proof (prove)\nusing this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))", "using coincidence_formula[OF fsafe Iagree_refl[of I], of \"(sol 0, b)\" \"?\\<phi> 0\"]"], ["proof (prove)\nusing this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n  Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n   (FVF ($\\<phi> vid1 local.empty)) \\<Longrightarrow>\n  ((sol 0, b) \\<in> fml_sem I ($\\<phi> vid1 local.empty)) =\n  (mk_v I (OVar vid1) (sol 0, b) (sol 0)\n   \\<in> fml_sem I ($\\<phi> vid1 local.empty))\n\ngoal (1 subgoal):\n 1. Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n  (\\<forall>i.\n      Inl i \\<in> FVF ($\\<phi> vid1 local.empty) \\<longrightarrow>\n      fst (sol 0, b) $ i =\n      fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> FVF ($\\<phi> vid1 local.empty) \\<longrightarrow>\n      snd (sol 0, b) $ i =\n      snd (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<Longrightarrow>\n  ((sol 0, b) \\<in> fml_sem I ($\\<phi> vid1 local.empty)) =\n  (mk_v I (OVar vid1) (sol 0, b) (sol 0)\n   \\<in> fml_sem I ($\\<phi> vid1 local.empty))\n\ngoal (1 subgoal):\n 1. Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))", "by (auto simp add: empty_def)"], ["proof (state)\nthis:\n  Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "show \"dterm_sem I (f1 fid2 vid1)  (mk_v I (OVar vid1) (sol 0, b) (sol t)) \\<le> dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n    \\<le> dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))", "using notin incon"], ["proof (prove)\nusing this:\n  \\<not> Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n  Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n    \\<le> dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))", "by auto"], ["proof (state)\nthis:\n  dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n  \\<le> dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n\ngoal (3 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "fix I::\"('sf,'sc,'sz) interp\" and  b aa ba \n      and sol::\"real \\<Rightarrow> 'sz simple_state\" \n      and t::real"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?ODE = \"OVar vid1\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?\\<phi> = \"(\\<lambda>t. mk_v I (?ODE) (sol 0, b) (sol t))\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume t:\"0 \\<le> t\"\n      and sol:\"(sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n      {x. Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) (mk_v I ?ODE (sol 0, b) x))}\"\n      and notin:\" \\<not>(Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) (sol 0, b)))\""], ["proof (state)\nthis:\n  0 \\<le> t\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n  \\<not> Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n\ngoal (3 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have fsafe:\"fsafe (Prop vid1 empty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fsafe ($\\<phi> vid1 local.empty)", "by (auto simp add: empty_def)"], ["proof (state)\nthis:\n  fsafe ($\\<phi> vid1 local.empty)\n\ngoal (3 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "from sol"], ["proof (chain)\npicking this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}", "have \"Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) (?\\<phi> 0))\""], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n\ngoal (1 subgoal):\n 1. Predicates I vid1\n     (\\<chi>i.\n         dterm_sem I (local.empty i)\n          (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "using t solves_ode_domainD[of sol \"(\\<lambda>a. ODEs I vid1)\" \"{0..t}\"]"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n  0 \\<le> t\n  \\<lbrakk>(sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t} ?X;\n   ?t \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> sol ?t \\<in> ?X\n\ngoal (1 subgoal):\n 1. Predicates I vid1\n     (\\<chi>i.\n         dterm_sem I (local.empty i)\n          (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "by auto"], ["proof (state)\nthis:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (3 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "then"], ["proof (chain)\npicking this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "have incon:\"Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) ((sol 0, b)))\""], ["proof (prove)\nusing this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))", "using coincidence_formula[OF fsafe Iagree_refl[of I], of \"(sol 0, b)\" \"?\\<phi> 0\"]"], ["proof (prove)\nusing this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n  Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n   (FVF ($\\<phi> vid1 local.empty)) \\<Longrightarrow>\n  ((sol 0, b) \\<in> fml_sem I ($\\<phi> vid1 local.empty)) =\n  (mk_v I (OVar vid1) (sol 0, b) (sol 0)\n   \\<in> fml_sem I ($\\<phi> vid1 local.empty))\n\ngoal (1 subgoal):\n 1. Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n  (\\<forall>i.\n      Inl i \\<in> FVF ($\\<phi> vid1 local.empty) \\<longrightarrow>\n      fst (sol 0, b) $ i =\n      fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> FVF ($\\<phi> vid1 local.empty) \\<longrightarrow>\n      snd (sol 0, b) $ i =\n      snd (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<Longrightarrow>\n  ((sol 0, b) \\<in> fml_sem I ($\\<phi> vid1 local.empty)) =\n  (mk_v I (OVar vid1) (sol 0, b) (sol 0)\n   \\<in> fml_sem I ($\\<phi> vid1 local.empty))\n\ngoal (1 subgoal):\n 1. Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))", "by (auto simp add: empty_def)"], ["proof (state)\nthis:\n  Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n\ngoal (3 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "show \"dterm_sem I (f1 fid2 vid1)  (mk_v I (OVar vid1) (sol 0, b) (sol t)) \\<le> dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n    \\<le> dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))", "using notin incon"], ["proof (prove)\nusing this:\n  \\<not> Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n  Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n    \\<le> dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))", "by auto"], ["proof (state)\nthis:\n  dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n  \\<le> dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "fix I::\"('sf,'sc,'sz) interp\" and  b aa ba \n      and sol::\"real \\<Rightarrow> 'sz simple_state\" \n      and t::real"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?ODE = \"OVar vid1\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?\\<phi> = \"(\\<lambda>t. mk_v I (?ODE) (sol 0, b) (sol t))\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume t:\"0 \\<le> t\""], ["proof (state)\nthis:\n  0 \\<le> t\n\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume sol:\"(sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n        {x. Predicates I vid1 (\\<chi> i. dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\""], ["proof (state)\nthis:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume notin:\"\\<not> Predicates I vid1 (\\<chi> i. dterm_sem I (local.empty i) (sol 0, b))\""], ["proof (state)\nthis:\n  \\<not> Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have fsafe:\"fsafe (Prop vid1 empty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fsafe ($\\<phi> vid1 local.empty)", "by (auto simp add: empty_def)"], ["proof (state)\nthis:\n  fsafe ($\\<phi> vid1 local.empty)\n\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "from sol"], ["proof (chain)\npicking this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}", "have \"Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) (?\\<phi> 0))\""], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n\ngoal (1 subgoal):\n 1. Predicates I vid1\n     (\\<chi>i.\n         dterm_sem I (local.empty i)\n          (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "using t solves_ode_domainD[of sol \"(\\<lambda>a. ODEs I vid1)\" \"{0..t}\"]"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n  0 \\<le> t\n  \\<lbrakk>(sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t} ?X;\n   ?t \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> sol ?t \\<in> ?X\n\ngoal (1 subgoal):\n 1. Predicates I vid1\n     (\\<chi>i.\n         dterm_sem I (local.empty i)\n          (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "by auto"], ["proof (state)\nthis:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "then"], ["proof (chain)\npicking this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "have incon:\"Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) ((sol 0, b)))\""], ["proof (prove)\nusing this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))", "using coincidence_formula[OF fsafe Iagree_refl[of I], of \"(sol 0, b)\" \"?\\<phi> 0\"]"], ["proof (prove)\nusing this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n  Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n   (FVF ($\\<phi> vid1 local.empty)) \\<Longrightarrow>\n  ((sol 0, b) \\<in> fml_sem I ($\\<phi> vid1 local.empty)) =\n  (mk_v I (OVar vid1) (sol 0, b) (sol 0)\n   \\<in> fml_sem I ($\\<phi> vid1 local.empty))\n\ngoal (1 subgoal):\n 1. Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n  (\\<forall>i.\n      Inl i \\<in> FVF ($\\<phi> vid1 local.empty) \\<longrightarrow>\n      fst (sol 0, b) $ i =\n      fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> FVF ($\\<phi> vid1 local.empty) \\<longrightarrow>\n      snd (sol 0, b) $ i =\n      snd (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<Longrightarrow>\n  ((sol 0, b) \\<in> fml_sem I ($\\<phi> vid1 local.empty)) =\n  (mk_v I (OVar vid1) (sol 0, b) (sol 0)\n   \\<in> fml_sem I ($\\<phi> vid1 local.empty))\n\ngoal (1 subgoal):\n 1. Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))", "by (auto simp add: empty_def)"], ["proof (state)\nthis:\n  Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "show \"dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n       \\<le> dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n    \\<le> dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))", "using incon notin"], ["proof (prove)\nusing this:\n  Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n  \\<not> Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n    \\<le> dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))", "by auto"], ["proof (state)\nthis:\n  dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n  \\<le> dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "fix I::\"('sf,'sc,'sz) interp\" and  b aa ba \n      and sol::\"real \\<Rightarrow> 'sz simple_state\" \n      and t::real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?ODE = \"OVar vid1\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?\\<phi> = \"(\\<lambda>t. mk_v I (?ODE) (sol 0, b) (sol t))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume good_interp:\"is_interp I\""], ["proof (state)\nthis:\n  is_interp I\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume aaba:\"(aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t)\""], ["proof (state)\nthis:\n  (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume t:\"0 \\<le> t\""], ["proof (state)\nthis:\n  0 \\<le> t\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume sol:\"(sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n        {x. Predicates I vid1 (\\<chi> i. dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\""], ["proof (state)\nthis:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume box:\"\\<forall>a ba. (\\<exists>sola. sol 0 = sola 0 \\<and>\n                      (\\<exists>t. (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                           0 \\<le> t \\<and>\n                           (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                            {x. Predicates I vid1\n                                 (\\<chi> i. dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sola 0, b) x))})) \\<longrightarrow>\n              directional_derivative I (f1 fid2 vid1) (a, ba) \\<le> directional_derivative I (f1 fid1 vid1) (a, ba)\""], ["proof (state)\nthis:\n  \\<forall>a ba.\n     (\\<exists>sola.\n         sol 0 = sola 0 \\<and>\n         (\\<exists>t.\n             (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n             0 \\<le> t \\<and>\n             (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n              {x. Predicates I vid1\n                   (\\<chi>i.\n                       dterm_sem I (local.empty i)\n                        (mk_v I (OVar vid1) (sola 0, b)\n                          x))})) \\<longrightarrow>\n     directional_derivative I (f1 fid2 vid1) (a, ba)\n     \\<le> directional_derivative I (f1 fid1 vid1) (a, ba)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume geq0:\"dterm_sem I (f1 fid2 vid1) (sol 0, b) \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\""], ["proof (state)\nthis:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b)\n  \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have free1:\"dfree ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))", "by (auto intro: dfree.intros)"], ["proof (state)\nthis:\n  dfree ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have free2:\"dfree ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))", "by (auto intro: dfree.intros)"], ["proof (state)\nthis:\n  dfree ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "from geq0"], ["proof (chain)\npicking this:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b)\n  \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)", "have geq0':\"sterm_sem I (f1 fid2 vid1) (sol 0) \\<le> sterm_sem I (f1 fid1 vid1) (sol 0)\""], ["proof (prove)\nusing this:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b)\n  \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\n\ngoal (1 subgoal):\n 1. sterm_sem I (f1 fid2 vid1) (sol 0)\n    \\<le> sterm_sem I (f1 fid1 vid1) (sol 0)", "unfolding f1_def"], ["proof (prove)\nusing this:\n  dterm_sem I ($f fid2 (singleton (Var vid1))) (sol 0, b)\n  \\<le> dterm_sem I ($f fid1 (singleton (Var vid1))) (sol 0, b)\n\ngoal (1 subgoal):\n 1. sterm_sem I ($f fid2 (singleton (Var vid1))) (sol 0)\n    \\<le> sterm_sem I ($f fid1 (singleton (Var vid1))) (sol 0)", "using dterm_sterm_dfree[OF free1, of I \"sol 0\" b] dterm_sterm_dfree[OF free2, of I \"sol 0\" b]"], ["proof (prove)\nusing this:\n  dterm_sem I ($f fid2 (singleton (Var vid1))) (sol 0, b)\n  \\<le> dterm_sem I ($f fid1 (singleton (Var vid1))) (sol 0, b)\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n  sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n\ngoal (1 subgoal):\n 1. sterm_sem I ($f fid2 (singleton (Var vid1))) (sol 0)\n    \\<le> sterm_sem I ($f fid1 (singleton (Var vid1))) (sol 0)", "by auto"], ["proof (state)\nthis:\n  sterm_sem I (f1 fid2 vid1) (sol 0)\n  \\<le> sterm_sem I (f1 fid1 vid1) (sol 0)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?\\<phi>s = \"\\<lambda>x. fst (?\\<phi> x)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?\\<phi>t = \"\\<lambda>x. snd (?\\<phi> x)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?df1 = \"(\\<lambda>t. dterm_sem I (f1 fid2 vid1) (?\\<phi> t))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?f1 = \"(\\<lambda>t. sterm_sem I (f1 fid2 vid1) (?\\<phi>s t))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?f1' = \"(\\<lambda> s t'. t' * frechet I (f1 fid2 vid1) (?\\<phi>s s) (?\\<phi>t s))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have dfeq:\"?df1 = ?f1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t.\n        dterm_sem I (f1 fid2 vid1)\n         (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n    (\\<lambda>t.\n        sterm_sem I (f1 fid2 vid1)\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))))", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t)) =\n       sterm_sem I (f1 fid2 vid1)\n        (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "subgoal for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t)) =\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "using dterm_sterm_dfree[OF free1, of I \"?\\<phi>s t\" \"snd (?\\<phi> t)\"]"], ["proof (prove)\nusing this:\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t)) =\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "unfolding f1_def expand_singleton"], ["proof (prove)\nusing this:\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n\ngoal (1 subgoal):\n 1. dterm_sem I\n     ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n     (mk_v I (OVar vid1) (sol 0, b) (sol t)) =\n    sterm_sem I\n     ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>t.\n      dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  (\\<lambda>t.\n      sterm_sem I (f1 fid2 vid1)\n       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have free3:\"dfree (f1 fid2 vid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree (f1 fid2 vid1)", "unfolding f1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree ($f fid2 (singleton (Var vid1)))", "by (auto intro: dfree.intros)"], ["proof (state)\nthis:\n  dfree (f1 fid2 vid1)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?df2 = \"(\\<lambda>t. dterm_sem I (f1 fid1 vid1) (?\\<phi> t))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?f2 = \"(\\<lambda>t. sterm_sem I (f1 fid1 vid1) (?\\<phi>s t))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?f2' = \"(\\<lambda>s t' . t' * frechet I (f1 fid1 vid1) (?\\<phi>s s) (?\\<phi>t s))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?int = \"{0..t}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have bluh:\"\\<And>x i. (Functions I i has_derivative (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x) (at x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x i.\n       (Functions I i has_derivative\n        (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x)\n        (at x)", "using good_interp"], ["proof (prove)\nusing this:\n  is_interp I\n\ngoal (1 subgoal):\n 1. \\<And>x i.\n       (Functions I i has_derivative\n        (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x)\n        (at x)", "unfolding is_interp_def"], ["proof (prove)\nusing this:\n  \\<forall>x i.\n     (Functions I i has_derivative FunctionFrechet I i x) (at x) \\<and>\n     continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet I i x))\n\ngoal (1 subgoal):\n 1. \\<And>x i.\n       (Functions I i has_derivative\n        (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x)\n        (at x)", "by auto"], ["proof (state)\nthis:\n  (Functions I ?i6 has_derivative\n   (THE f'. \\<forall>x. (Functions I ?i6 has_derivative f' x) (at x)) ?x6)\n   (at ?x6)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have blah:\"(Functions I fid2 has_derivative (THE f'. \\<forall>x. (Functions I fid2 has_derivative f' x) (at x)) (\\<chi> i. if i = vid1 then sol t $ vid1 else 0)) (at (\\<chi> i. if i = vid1 then sol t $ vid1 else 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Functions I fid2 has_derivative\n     (THE f'. \\<forall>x. (Functions I fid2 has_derivative f' x) (at x))\n      (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n     (at (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))", "using bluh"], ["proof (prove)\nusing this:\n  (Functions I ?i6 has_derivative\n   (THE f'. \\<forall>x. (Functions I ?i6 has_derivative f' x) (at x)) ?x6)\n   (at ?x6)\n\ngoal (1 subgoal):\n 1. (Functions I fid2 has_derivative\n     (THE f'. \\<forall>x. (Functions I fid2 has_derivative f' x) (at x))\n      (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n     (at (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))", "by auto"], ["proof (state)\nthis:\n  (Functions I fid2 has_derivative\n   (THE f'. \\<forall>x. (Functions I fid2 has_derivative f' x) (at x))\n    (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (at (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have bigEx:\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow>(\\<exists>sola. sol 0 = sola 0 \\<and>\n         (\\<exists>ta. (fst (?\\<phi> s),\n                snd (?\\<phi> s)) =\n               mk_v I (OVar vid1) (sola 0, b) (sola ta) \\<and>\n               0 \\<le> ta \\<and>\n               (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n                {x. Predicates I vid1 (\\<chi> i. dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       \\<exists>sola.\n          sol 0 = sola 0 \\<and>\n          (\\<exists>ta.\n              (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n               snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n              mk_v I (OVar vid1) (sola 0, b) (sola ta) \\<and>\n              0 \\<le> ta \\<and>\n              (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n               {x. Predicates I vid1\n                    (\\<chi>i.\n                        dterm_sem I (local.empty i)\n                         (mk_v I (OVar vid1) (sol 0, b) x))})", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    \\<exists>sola.\n       sol 0 = sola 0 \\<and>\n       (\\<exists>ta.\n           (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n            snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n           mk_v I (OVar vid1) (sola 0, b) (sola ta) \\<and>\n           0 \\<le> ta \\<and>\n           (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n            {x. Predicates I vid1\n                 (\\<chi>i.\n                     dterm_sem I (local.empty i)\n                      (mk_v I (OVar vid1) (sol 0, b) x))})", "apply(rule exI[where x=sol])"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    sol 0 = sol 0 \\<and>\n    (\\<exists>ta.\n        (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n         snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n        mk_v I (OVar vid1) (sol 0, b) (sol ta) \\<and>\n        0 \\<le> ta \\<and>\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))})", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. s \\<in> {0..t} \\<Longrightarrow> sol 0 = sol 0\n 2. s \\<in> {0..t} \\<Longrightarrow>\n    \\<exists>ta.\n       (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n        snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n       mk_v I (OVar vid1) (sol 0, b) (sol ta) \\<and>\n       0 \\<le> ta \\<and>\n       (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n        {x. Predicates I vid1\n             (\\<chi>i.\n                 dterm_sem I (local.empty i)\n                  (mk_v I (OVar vid1) (sol 0, b) x))}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow> sol 0 = sol 0", "by (rule refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    \\<exists>ta.\n       (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n        snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n       mk_v I (OVar vid1) (sol 0, b) (sol ta) \\<and>\n       0 \\<le> ta \\<and>\n       (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n        {x. Predicates I vid1\n             (\\<chi>i.\n                 dterm_sem I (local.empty i)\n                  (mk_v I (OVar vid1) (sol 0, b) x))}", "apply(rule exI[where x=s])"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n     snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n    mk_v I (OVar vid1) (sol 0, b) (sol s) \\<and>\n    0 \\<le> s \\<and>\n    (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (local.empty i)\n               (mk_v I (OVar vid1) (sol 0, b) x))}", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n     snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n    mk_v I (OVar vid1) (sol 0, b) (sol s)\n 2. s \\<in> {0..t} \\<Longrightarrow>\n    0 \\<le> s \\<and>\n    (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (local.empty i)\n               (mk_v I (OVar vid1) (sol 0, b) x))}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n     snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n    mk_v I (OVar vid1) (sol 0, b) (sol s)", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    0 \\<le> s \\<and>\n    (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (local.empty i)\n               (mk_v I (OVar vid1) (sol 0, b) x))}", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. s \\<in> {0..t} \\<Longrightarrow> 0 \\<le> s\n 2. s \\<in> {0..t} \\<Longrightarrow>\n    (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (local.empty i)\n               (mk_v I (OVar vid1) (sol 0, b) x))}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow> 0 \\<le> s", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (local.empty i)\n               (mk_v I (OVar vid1) (sol 0, b) x))}", "using sol"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (local.empty i)\n               (mk_v I (OVar vid1) (sol 0, b) x))}", "using atLeastAtMost_iff atLeastatMost_subset_iff order_refl solves_ode_on_subset"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n  (?i \\<in> {?l..?u}) = (?l \\<le> ?i \\<and> ?i \\<le> ?u)\n  ({?a..?b} \\<subseteq> {?c..?d}) =\n  (\\<not> ?a \\<le> ?b \\<or> ?c \\<le> ?a \\<and> ?b \\<le> ?d)\n  ?x \\<le> ?x\n  \\<lbrakk>(?x solves_ode ?f) ?S ?Y; ?T \\<subseteq> ?S;\n   ?Y \\<subseteq> ?X\\<rbrakk>\n  \\<Longrightarrow> (?x solves_ode ?f) ?T ?X\n\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (local.empty i)\n               (mk_v I (OVar vid1) (sol 0, b) x))}", "by (metis (no_types, lifting) subsetI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?s6 \\<in> {0..t} \\<Longrightarrow>\n  \\<exists>sola.\n     sol 0 = sola 0 \\<and>\n     (\\<exists>ta.\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s6)),\n          snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s6))) =\n         mk_v I (OVar vid1) (sola 0, b) (sola ta) \\<and>\n         0 \\<le> ta \\<and>\n         (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n          {x. Predicates I vid1\n               (\\<chi>i.\n                   dterm_sem I (local.empty i)\n                    (mk_v I (OVar vid1) (sol 0, b) x))})\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have box':\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow> directional_derivative I (f1 fid2 vid1) (?\\<phi>s s, ?\\<phi>t s) \n                                \\<le> directional_derivative I (f1 fid1 vid1) (?\\<phi>s s, ?\\<phi>t s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       directional_derivative I (f1 fid2 vid1)\n        (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n         snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n       \\<le> directional_derivative I (f1 fid1 vid1)\n              (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n               snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    directional_derivative I (f1 fid2 vid1)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n      snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n    \\<le> directional_derivative I (f1 fid1 vid1)\n           (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n            snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))", "using box"], ["proof (prove)\nusing this:\n  \\<forall>a ba.\n     (\\<exists>sola.\n         sol 0 = sola 0 \\<and>\n         (\\<exists>t.\n             (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n             0 \\<le> t \\<and>\n             (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n              {x. Predicates I vid1\n                   (\\<chi>i.\n                       dterm_sem I (local.empty i)\n                        (mk_v I (OVar vid1) (sola 0, b)\n                          x))})) \\<longrightarrow>\n     directional_derivative I (f1 fid2 vid1) (a, ba)\n     \\<le> directional_derivative I (f1 fid1 vid1) (a, ba)\n\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    directional_derivative I (f1 fid2 vid1)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n      snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n    \\<le> directional_derivative I (f1 fid1 vid1)\n           (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n            snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n     \\<forall>a ba.\n        (\\<exists>sola.\n            sol 0 = sola 0 \\<and>\n            (\\<exists>t.\n                (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                0 \\<le> t \\<and>\n                (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                 {x. Predicates I vid1\n                      (\\<chi>i.\n                          dterm_sem I (local.empty i)\n                           (mk_v I (OVar vid1) (sola 0, b)\n                             x))})) \\<longrightarrow>\n        directional_derivative I (f1 fid2 vid1) (a, ba)\n        \\<le> directional_derivative I (f1 fid1 vid1) (a, ba)\\<rbrakk>\n    \\<Longrightarrow> directional_derivative I (f1 fid2 vid1)\n                       (mk_v I (OVar vid1) (sol 0, b) (sol s))\n                      \\<le> directional_derivative I (f1 fid1 vid1)\n                             (mk_v I (OVar vid1) (sol 0, b) (sol s))", "apply (erule allE[where x=\"?\\<phi>s s\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n     \\<forall>ba.\n        (\\<exists>sola.\n            sol 0 = sola 0 \\<and>\n            (\\<exists>t.\n                (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)), ba) =\n                mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                0 \\<le> t \\<and>\n                (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                 {x. Predicates I vid1\n                      (\\<chi>i.\n                          dterm_sem I (local.empty i)\n                           (mk_v I (OVar vid1) (sola 0, b)\n                             x))})) \\<longrightarrow>\n        directional_derivative I (f1 fid2 vid1)\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)), ba)\n        \\<le> directional_derivative I (f1 fid1 vid1)\n               (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)), ba)\\<rbrakk>\n    \\<Longrightarrow> directional_derivative I (f1 fid2 vid1)\n                       (mk_v I (OVar vid1) (sol 0, b) (sol s))\n                      \\<le> directional_derivative I (f1 fid1 vid1)\n                             (mk_v I (OVar vid1) (sol 0, b) (sol s))", "apply (erule allE[where x=\"?\\<phi>t s\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n     (\\<exists>sola.\n         sol 0 = sola 0 \\<and>\n         (\\<exists>t.\n             (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n              snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n             mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n             0 \\<le> t \\<and>\n             (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n              {x. Predicates I vid1\n                   (\\<chi>i.\n                       dterm_sem I (local.empty i)\n                        (mk_v I (OVar vid1) (sola 0, b)\n                          x))})) \\<longrightarrow>\n     directional_derivative I (f1 fid2 vid1)\n      (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n       snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n     \\<le> directional_derivative I (f1 fid1 vid1)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n             snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\\<rbrakk>\n    \\<Longrightarrow> directional_derivative I (f1 fid2 vid1)\n                       (mk_v I (OVar vid1) (sol 0, b) (sol s))\n                      \\<le> directional_derivative I (f1 fid1 vid1)\n                             (mk_v I (OVar vid1) (sol 0, b) (sol s))", "using bigEx[of s]"], ["proof (prove)\nusing this:\n  s \\<in> {0..t} \\<Longrightarrow>\n  \\<exists>sola.\n     sol 0 = sola 0 \\<and>\n     (\\<exists>ta.\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n          snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n         mk_v I (OVar vid1) (sola 0, b) (sola ta) \\<and>\n         0 \\<le> ta \\<and>\n         (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n          {x. Predicates I vid1\n               (\\<chi>i.\n                   dterm_sem I (local.empty i)\n                    (mk_v I (OVar vid1) (sol 0, b) x))})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n     (\\<exists>sola.\n         sol 0 = sola 0 \\<and>\n         (\\<exists>t.\n             (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n              snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n             mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n             0 \\<le> t \\<and>\n             (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n              {x. Predicates I vid1\n                   (\\<chi>i.\n                       dterm_sem I (local.empty i)\n                        (mk_v I (OVar vid1) (sola 0, b)\n                          x))})) \\<longrightarrow>\n     directional_derivative I (f1 fid2 vid1)\n      (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n       snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n     \\<le> directional_derivative I (f1 fid1 vid1)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n             snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\\<rbrakk>\n    \\<Longrightarrow> directional_derivative I (f1 fid2 vid1)\n                       (mk_v I (OVar vid1) (sol 0, b) (sol s))\n                      \\<le> directional_derivative I (f1 fid1 vid1)\n                             (mk_v I (OVar vid1) (sol 0, b) (sol s))", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?s6 \\<in> {0..t} \\<Longrightarrow>\n  directional_derivative I (f1 fid2 vid1)\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s6)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s6)))\n  \\<le> directional_derivative I (f1 fid1 vid1)\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s6)),\n          snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s6)))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have dsafe1:\"dsafe (f1 fid2 vid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dsafe (f1 fid2 vid1)", "unfolding f1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dsafe ($f fid2 (singleton (Var vid1)))", "by (auto intro: dsafe.intros)"], ["proof (state)\nthis:\n  dsafe (f1 fid2 vid1)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have dsafe2:\"dsafe (f1 fid1 vid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dsafe (f1 fid1 vid1)", "unfolding f1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dsafe ($f fid1 (singleton (Var vid1)))", "by (auto intro: dsafe.intros)"], ["proof (state)\nthis:\n  dsafe (f1 fid1 vid1)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have agree1:\"Vagree (sol 0, b) (?\\<phi> 0) (FVT (f1 fid2 vid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n     (FVT (f1 fid2 vid1))", "using mk_v_agree[of I \"(OVar vid1)\" \"(sol 0, b)\" \"fst (?\\<phi> 0)\"]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I (OVar vid1) (sol 0, b)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))))\n   (sol 0, b) (- semBV I (OVar vid1)) \\<and>\n  Vagree\n   (mk_v I (OVar vid1) (sol 0, b)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))))\n   (mk_xode I (OVar vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))))\n   (semBV I (OVar vid1))\n\ngoal (1 subgoal):\n 1. Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n     (FVT (f1 fid2 vid1))", "unfolding f1_def Vagree_def expand_singleton"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i \\<in> - semBV I (OVar vid1) \\<longrightarrow>\n       fst (mk_v I (OVar vid1) (sol 0, b)\n             (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n       i =\n       fst (sol 0, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i \\<in> - semBV I (OVar vid1) \\<longrightarrow>\n       snd (mk_v I (OVar vid1) (sol 0, b)\n             (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n       i =\n       snd (sol 0, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i \\<in> semBV I (OVar vid1) \\<longrightarrow>\n      fst (mk_v I (OVar vid1) (sol 0, b)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n      i =\n      fst (mk_xode I (OVar vid1)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> semBV I (OVar vid1) \\<longrightarrow>\n      snd (mk_v I (OVar vid1) (sol 0, b)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n      i =\n      snd (mk_xode I (OVar vid1)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n      i)\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i\n        \\<in> FVT ($f fid2\n                    (\\<lambda>i.\n                        if i = vid1 then Var vid1\n                        else Const 0)) \\<longrightarrow>\n        fst (sol 0, b) $ i =\n        fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<and>\n    (\\<forall>i.\n        Inr i\n        \\<in> FVT ($f fid2\n                    (\\<lambda>i.\n                        if i = vid1 then Var vid1\n                        else Const 0)) \\<longrightarrow>\n        snd (sol 0, b) $ i =\n        snd (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODEBV I vid1 \\<and>\n                Inl i \\<notin> Inr ` ODEBV I vid1 \\<longrightarrow>\n                fst (mk_v I (OVar vid1) (sol 0, b)\n                      (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n                i =\n                sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODEBV I vid1 \\<and>\n        Inr i \\<notin> Inr ` ODEBV I vid1 \\<longrightarrow>\n        snd (mk_v I (OVar vid1) (sol 0, b)\n              (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n        i =\n        b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODEBV I vid1 \\<longrightarrow>\n         fst (mk_v I (OVar vid1) (sol 0, b)\n               (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n         i =\n         fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<and>\n        (Inl i \\<in> Inr ` ODEBV I vid1 \\<longrightarrow>\n         fst (mk_v I (OVar vid1) (sol 0, b)\n               (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n         i =\n         fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODEBV I vid1 \\<longrightarrow>\n         snd (mk_v I (OVar vid1) (sol 0, b)\n               (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n         i =\n         ODEs I vid1 (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))) $\n         i) \\<and>\n        (Inr i \\<in> Inr ` ODEBV I vid1 \\<longrightarrow>\n         snd (mk_v I (OVar vid1) (sol 0, b)\n               (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n         i =\n         ODEs I vid1 (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))) $\n         i)\\<rbrakk>\n    \\<Longrightarrow> sol 0 $ vid1 =\n                      fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ vid1", "by (metis (no_types, lifting) Compl_iff Vagree_def fst_conv mk_v_agree mk_xode.simps semBV.simps)"], ["proof (state)\nthis:\n  Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n   (FVT (f1 fid2 vid1))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have agree2:\"Vagree (sol 0, b) (?\\<phi> 0) (FVT (f1 fid1 vid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n     (FVT (f1 fid1 vid1))", "using mk_v_agree[of I \"(OVar vid1)\" \"(sol 0, b)\" \"fst (?\\<phi> 0)\"]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I (OVar vid1) (sol 0, b)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))))\n   (sol 0, b) (- semBV I (OVar vid1)) \\<and>\n  Vagree\n   (mk_v I (OVar vid1) (sol 0, b)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))))\n   (mk_xode I (OVar vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))))\n   (semBV I (OVar vid1))\n\ngoal (1 subgoal):\n 1. Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n     (FVT (f1 fid1 vid1))", "unfolding f1_def Vagree_def expand_singleton"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i \\<in> - semBV I (OVar vid1) \\<longrightarrow>\n       fst (mk_v I (OVar vid1) (sol 0, b)\n             (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n       i =\n       fst (sol 0, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i \\<in> - semBV I (OVar vid1) \\<longrightarrow>\n       snd (mk_v I (OVar vid1) (sol 0, b)\n             (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n       i =\n       snd (sol 0, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i \\<in> semBV I (OVar vid1) \\<longrightarrow>\n      fst (mk_v I (OVar vid1) (sol 0, b)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n      i =\n      fst (mk_xode I (OVar vid1)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> semBV I (OVar vid1) \\<longrightarrow>\n      snd (mk_v I (OVar vid1) (sol 0, b)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n      i =\n      snd (mk_xode I (OVar vid1)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n      i)\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i\n        \\<in> FVT ($f fid1\n                    (\\<lambda>i.\n                        if i = vid1 then Var vid1\n                        else Const 0)) \\<longrightarrow>\n        fst (sol 0, b) $ i =\n        fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<and>\n    (\\<forall>i.\n        Inr i\n        \\<in> FVT ($f fid1\n                    (\\<lambda>i.\n                        if i = vid1 then Var vid1\n                        else Const 0)) \\<longrightarrow>\n        snd (sol 0, b) $ i =\n        snd (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODEBV I vid1 \\<and>\n                Inl i \\<notin> Inr ` ODEBV I vid1 \\<longrightarrow>\n                fst (mk_v I (OVar vid1) (sol 0, b)\n                      (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n                i =\n                sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODEBV I vid1 \\<and>\n        Inr i \\<notin> Inr ` ODEBV I vid1 \\<longrightarrow>\n        snd (mk_v I (OVar vid1) (sol 0, b)\n              (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n        i =\n        b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODEBV I vid1 \\<longrightarrow>\n         fst (mk_v I (OVar vid1) (sol 0, b)\n               (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n         i =\n         fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<and>\n        (Inl i \\<in> Inr ` ODEBV I vid1 \\<longrightarrow>\n         fst (mk_v I (OVar vid1) (sol 0, b)\n               (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n         i =\n         fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODEBV I vid1 \\<longrightarrow>\n         snd (mk_v I (OVar vid1) (sol 0, b)\n               (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n         i =\n         ODEs I vid1 (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))) $\n         i) \\<and>\n        (Inr i \\<in> Inr ` ODEBV I vid1 \\<longrightarrow>\n         snd (mk_v I (OVar vid1) (sol 0, b)\n               (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n         i =\n         ODEs I vid1 (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))) $\n         i)\\<rbrakk>\n    \\<Longrightarrow> sol 0 $ vid1 =\n                      fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ vid1", "by (metis (no_types, lifting) Compl_iff Vagree_def fst_conv mk_v_agree mk_xode.simps semBV.simps)"], ["proof (state)\nthis:\n  Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n   (FVT (f1 fid1 vid1))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have sem_eq1:\"dterm_sem I (f1 fid2 vid1) (sol 0, b) = dterm_sem I (f1 fid2 vid1) (?\\<phi> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (sol 0, b) =\n    dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))", "using coincidence_dterm[OF dsafe1 agree1]"], ["proof (prove)\nusing this:\n  dterm_sem ?I (f1 fid2 vid1) (sol 0, b) =\n  dterm_sem ?I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (sol 0, b) =\n    dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))", "by auto"], ["proof (state)\nthis:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b) =\n  dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "then"], ["proof (chain)\npicking this:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b) =\n  dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))", "have sem_eq1':\"sterm_sem I (f1 fid2 vid1) (sol 0) = sterm_sem I (f1 fid2 vid1) (?\\<phi>s 0)\""], ["proof (prove)\nusing this:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b) =\n  dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n\ngoal (1 subgoal):\n 1. sterm_sem I (f1 fid2 vid1) (sol 0) =\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "using dterm_sterm_dfree[OF free1, of I \"sol 0\" \"b\"] \n            dterm_sterm_dfree[OF free1, of I \"(?\\<phi>s 0)\" \"snd (?\\<phi> 0)\"]"], ["proof (prove)\nusing this:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b) =\n  dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. sterm_sem I (f1 fid2 vid1) (sol 0) =\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "unfolding f1_def expand_singleton"], ["proof (prove)\nusing this:\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. sterm_sem I\n     ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n     (sol 0) =\n    sterm_sem I\n     ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "by auto"], ["proof (state)\nthis:\n  sterm_sem I (f1 fid2 vid1) (sol 0) =\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have sem_eq2:\"dterm_sem I (f1 fid1 vid1) (sol 0, b) = dterm_sem I (f1 fid1 vid1) (?\\<phi> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid1 vid1) (sol 0, b) =\n    dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))", "using coincidence_dterm[OF dsafe2 agree2]"], ["proof (prove)\nusing this:\n  dterm_sem ?I (f1 fid1 vid1) (sol 0, b) =\n  dterm_sem ?I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid1 vid1) (sol 0, b) =\n    dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))", "by auto"], ["proof (state)\nthis:\n  dterm_sem I (f1 fid1 vid1) (sol 0, b) =\n  dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "then"], ["proof (chain)\npicking this:\n  dterm_sem I (f1 fid1 vid1) (sol 0, b) =\n  dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))", "have sem_eq2':\"sterm_sem I (f1 fid1 vid1) (sol 0) = sterm_sem I (f1 fid1 vid1) (?\\<phi>s 0)\""], ["proof (prove)\nusing this:\n  dterm_sem I (f1 fid1 vid1) (sol 0, b) =\n  dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n\ngoal (1 subgoal):\n 1. sterm_sem I (f1 fid1 vid1) (sol 0) =\n    sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "using dterm_sterm_dfree[OF free2, of I \"sol 0\" \"b\"] dterm_sterm_dfree[OF free2, of I \"(?\\<phi>s 0)\" \"snd (?\\<phi> 0)\"]"], ["proof (prove)\nusing this:\n  dterm_sem I (f1 fid1 vid1) (sol 0, b) =\n  dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n  sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n  sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))) =\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. sterm_sem I (f1 fid1 vid1) (sol 0) =\n    sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "unfolding f1_def expand_singleton"], ["proof (prove)\nusing this:\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b) =\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n  sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n  sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))) =\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. sterm_sem I\n     ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n     (sol 0) =\n    sterm_sem I\n     ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "by auto"], ["proof (state)\nthis:\n  sterm_sem I (f1 fid1 vid1) (sol 0) =\n  sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have good_interp':\"\\<And>i x. (Functions I i has_derivative (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x) (at x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i x.\n       (Functions I i has_derivative\n        (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x)\n        (at x)", "using good_interp"], ["proof (prove)\nusing this:\n  is_interp I\n\ngoal (1 subgoal):\n 1. \\<And>i x.\n       (Functions I i has_derivative\n        (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x)\n        (at x)", "unfolding is_interp_def"], ["proof (prove)\nusing this:\n  \\<forall>x i.\n     (Functions I i has_derivative FunctionFrechet I i x) (at x) \\<and>\n     continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet I i x))\n\ngoal (1 subgoal):\n 1. \\<And>i x.\n       (Functions I i has_derivative\n        (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x)\n        (at x)", "by auto"], ["proof (state)\nthis:\n  (Functions I ?i6 has_derivative\n   (THE f'. \\<forall>x. (Functions I ?i6 has_derivative f' x) (at x)) ?x6)\n   (at ?x6)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have chain :  \n      \"\\<And>f f' g g' x s.\n        (f has_derivative f') (at x within s) \\<Longrightarrow>\n        (g has_derivative g') (at (f x) within f ` s) \\<Longrightarrow> (g \\<circ> f has_derivative g' \\<circ> f') (at x within s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f f' g g' x s.\n       \\<lbrakk>(f has_derivative f') (at x within s);\n        (g has_derivative g') (at (f x) within f ` s)\\<rbrakk>\n       \\<Longrightarrow> (g \\<circ> f has_derivative g' \\<circ> f')\n                          (at x within s)", "by(auto intro: derivative_intros)"], ["proof (state)\nthis:\n  \\<lbrakk>(?f6 has_derivative ?f'6) (at ?x6 within ?s6);\n   (?g6 has_derivative ?g'6) (at (?f6 ?x6) within ?f6 ` ?s6)\\<rbrakk>\n  \\<Longrightarrow> (?g6 \\<circ> ?f6 has_derivative ?g'6 \\<circ> ?f'6)\n                     (at ?x6 within ?s6)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have sol1:\"(sol solves_ode (\\<lambda>_. ODE_sem I (OVar vid1))) {0..t} {x. mk_v I (OVar vid1) (sol 0, b) x \\<in> fml_sem I (Prop vid1 empty)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sol solves_ode (\\<lambda>_. ODE_sem I (OVar vid1))) {0..t}\n     {x. mk_v I (OVar vid1) (sol 0, b) x\n         \\<in> fml_sem I ($\\<phi> vid1 local.empty)}", "using sol"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n\ngoal (1 subgoal):\n 1. (sol solves_ode (\\<lambda>_. ODE_sem I (OVar vid1))) {0..t}\n     {x. mk_v I (OVar vid1) (sol 0, b) x\n         \\<in> fml_sem I ($\\<phi> vid1 local.empty)}", "unfolding p1_def singleton_def empty_def"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i. dterm_sem I (Const 0) (mk_v I (OVar vid1) (sol 0, b) x))}\n\ngoal (1 subgoal):\n 1. (sol solves_ode (\\<lambda>_. ODE_sem I (OVar vid1))) {0..t}\n     {x. mk_v I (OVar vid1) (sol 0, b) x\n         \\<in> fml_sem I ($\\<phi> vid1 (\\<lambda>i. Const 0))}", "by auto"], ["proof (state)\nthis:\n  (sol solves_ode (\\<lambda>_. ODE_sem I (OVar vid1))) {0..t}\n   {x. mk_v I (OVar vid1) (sol 0, b) x\n       \\<in> fml_sem I ($\\<phi> vid1 local.empty)}\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have FVTsub1:\"vid1 \\<in> ODE_vars I (OVar vid1) \\<Longrightarrow> FVT ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) \\<subseteq> semBV I ((OVar vid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vid1 \\<in> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    FVT ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n    \\<subseteq> semBV I (OVar vid1)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>vid1 \\<in> ODEBV I vid1;\n        x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n        x \\<notin> Inr ` ODEBV I vid1\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Inl ` ODEBV I vid1", "subgoal for x xa"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vid1 \\<in> ODEBV I vid1;\n     x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n     x \\<notin> Inr ` ODEBV I vid1\\<rbrakk>\n    \\<Longrightarrow> x \\<in> Inl ` ODEBV I vid1", "apply(cases \"xa = vid1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>vid1 \\<in> ODEBV I vid1;\n     x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n     x \\<notin> Inr ` ODEBV I vid1; xa = vid1\\<rbrakk>\n    \\<Longrightarrow> x \\<in> Inl ` ODEBV I vid1\n 2. \\<lbrakk>vid1 \\<in> ODEBV I vid1;\n     x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n     x \\<notin> Inr ` ODEBV I vid1; xa \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> x \\<in> Inl ` ODEBV I vid1", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  vid1 \\<in> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  FVT ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n  \\<subseteq> semBV I (OVar vid1)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have FVTsub2:\"vid1 \\<in> ODE_vars I (OVar vid1) \\<Longrightarrow> FVT ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) \\<subseteq> semBV I ((OVar vid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vid1 \\<in> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    FVT ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n    \\<subseteq> semBV I (OVar vid1)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>vid1 \\<in> ODEBV I vid1;\n        x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n        x \\<notin> Inr ` ODEBV I vid1\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Inl ` ODEBV I vid1", "subgoal for x xa"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vid1 \\<in> ODEBV I vid1;\n     x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n     x \\<notin> Inr ` ODEBV I vid1\\<rbrakk>\n    \\<Longrightarrow> x \\<in> Inl ` ODEBV I vid1", "apply(cases \"xa = vid1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>vid1 \\<in> ODEBV I vid1;\n     x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n     x \\<notin> Inr ` ODEBV I vid1; xa = vid1\\<rbrakk>\n    \\<Longrightarrow> x \\<in> Inl ` ODEBV I vid1\n 2. \\<lbrakk>vid1 \\<in> ODEBV I vid1;\n     x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n     x \\<notin> Inr ` ODEBV I vid1; xa \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> x \\<in> Inl ` ODEBV I vid1", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  vid1 \\<in> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  FVT ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n  \\<subseteq> semBV I (OVar vid1)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have osafe:\"osafe (OVar vid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. osafe (OVar vid1)", "by auto"], ["proof (state)\nthis:\n  osafe (OVar vid1)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have deriv1:\"\\<And>s. vid1 \\<in> ODE_vars I (OVar vid1) \\<Longrightarrow> s \\<in> ?int \\<Longrightarrow> (?f1 has_derivative (?f1' s)) (at s within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>t.\n                              sterm_sem I (f1 fid2 vid1)\n                               (fst (mk_v I (OVar vid1) (sol 0, b)\n(sol t)))) has_derivative\n                          (\\<lambda>t'.\n                              t' *\n                              frechet I (f1 fid2 vid1)\n                               (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                               (snd (mk_v I (OVar vid1) (sol 0, b)\n(sol s)))))\n                          (at s within {0..t})", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           sterm_sem I (f1 fid2 vid1)\n                            (fst (mk_v I (OVar vid1) (sol 0, b)\n                                   (sol t)))) has_derivative\n                       (\\<lambda>t'.\n                           t' *\n                           frechet I (f1 fid2 vid1)\n                            (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                            (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                       (at s within {0..t})", "using  rift_in_space_time[OF good_interp free1 osafe sol1 FVTsub1, of s]"], ["proof (prove)\nusing this:\n  \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t.\n                         sterm_sem I\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (fst (mk_v I (OVar vid1) (sol 0, b)\n                                 (sol t)))) has_derivative\n                     (\\<lambda>t'.\n                         t' *\n                         frechet I\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                     (at s within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           sterm_sem I (f1 fid2 vid1)\n                            (fst (mk_v I (OVar vid1) (sol 0, b)\n                                   (sol t)))) has_derivative\n                       (\\<lambda>t'.\n                           t' *\n                           frechet I (f1 fid2 vid1)\n                            (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                            (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                       (at s within {0..t})", "unfolding f1_def expand_singleton directional_derivative_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t.\n                         sterm_sem I\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (fst (mk_v I (OVar vid1) (sol 0, b)\n                                 (sol t)))) has_derivative\n                     (\\<lambda>t'.\n                         t' *\n                         frechet I\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                     (at s within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           sterm_sem I\n                            ($f fid2\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (fst (mk_v I (OVar vid1) (sol 0, b)\n                                   (sol t)))) has_derivative\n                       (\\<lambda>t'.\n                           t' *\n                           frechet I\n                            ($f fid2\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                            (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                       (at s within {0..t})", "by blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); ?s8 \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t.\n                         sterm_sem I (f1 fid2 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b)\n                                 (sol t)))) has_derivative\n                     (\\<lambda>t'.\n                         t' *\n                         frechet I (f1 fid2 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))))\n                     (at ?s8 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have deriv2:\"\\<And>s. vid1 \\<in> ODE_vars I (OVar vid1) \\<Longrightarrow> s \\<in> ?int \\<Longrightarrow> (?f2 has_derivative (?f2' s)) (at s within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>t.\n                              sterm_sem I (f1 fid1 vid1)\n                               (fst (mk_v I (OVar vid1) (sol 0, b)\n(sol t)))) has_derivative\n                          (\\<lambda>t'.\n                              t' *\n                              frechet I (f1 fid1 vid1)\n                               (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                               (snd (mk_v I (OVar vid1) (sol 0, b)\n(sol s)))))\n                          (at s within {0..t})", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           sterm_sem I (f1 fid1 vid1)\n                            (fst (mk_v I (OVar vid1) (sol 0, b)\n                                   (sol t)))) has_derivative\n                       (\\<lambda>t'.\n                           t' *\n                           frechet I (f1 fid1 vid1)\n                            (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                            (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                       (at s within {0..t})", "using rift_in_space_time[OF good_interp free2 osafe sol1 FVTsub2, of s]"], ["proof (prove)\nusing this:\n  \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t.\n                         sterm_sem I\n                          ($f fid1\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (fst (mk_v I (OVar vid1) (sol 0, b)\n                                 (sol t)))) has_derivative\n                     (\\<lambda>t'.\n                         t' *\n                         frechet I\n                          ($f fid1\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                     (at s within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           sterm_sem I (f1 fid1 vid1)\n                            (fst (mk_v I (OVar vid1) (sol 0, b)\n                                   (sol t)))) has_derivative\n                       (\\<lambda>t'.\n                           t' *\n                           frechet I (f1 fid1 vid1)\n                            (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                            (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                       (at s within {0..t})", "unfolding f1_def expand_singleton directional_derivative_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t.\n                         sterm_sem I\n                          ($f fid1\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (fst (mk_v I (OVar vid1) (sol 0, b)\n                                 (sol t)))) has_derivative\n                     (\\<lambda>t'.\n                         t' *\n                         frechet I\n                          ($f fid1\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                     (at s within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           sterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (fst (mk_v I (OVar vid1) (sol 0, b)\n                                   (sol t)))) has_derivative\n                       (\\<lambda>t'.\n                           t' *\n                           frechet I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                            (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                       (at s within {0..t})", "by blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); ?s8 \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t.\n                         sterm_sem I (f1 fid1 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b)\n                                 (sol t)))) has_derivative\n                     (\\<lambda>t'.\n                         t' *\n                         frechet I (f1 fid1 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))))\n                     (at ?s8 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have leq:\"\\<And>s . s \\<in> ?int \\<Longrightarrow> ?f1' s 1 \\<le> ?f2' s 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       1 *\n       frechet I (f1 fid2 vid1)\n        (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n        (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n       \\<le> 1 *\n             frechet I (f1 fid1 vid1)\n              (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n              (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    1 *\n    frechet I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n     (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n    \\<le> 1 *\n          frechet I (f1 fid1 vid1)\n           (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n           (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))", "using box'[of s]"], ["proof (prove)\nusing this:\n  s \\<in> {0..t} \\<Longrightarrow>\n  directional_derivative I (f1 fid2 vid1)\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n  \\<le> directional_derivative I (f1 fid1 vid1)\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n          snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    1 *\n    frechet I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n     (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n    \\<le> 1 *\n          frechet I (f1 fid1 vid1)\n           (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n           (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))", "by (simp add: directional_derivative_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?s8 \\<in> {0..t} \\<Longrightarrow>\n  1 *\n  frechet I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n   (snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n  \\<le> 1 *\n        frechet I (f1 fid1 vid1)\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n         (snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have preserve_agree1:\"vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow> VSagree (sol 0) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) {vid1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    VSagree (sol 0) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) {vid1}", "using mk_v_agree[of I \"OVar vid1\" \"(sol 0, b)\" \"sol t\"]"], ["proof (prove)\nusing this:\n  Vagree (mk_v I (OVar vid1) (sol 0, b) (sol t)) (sol 0, b)\n   (- semBV I (OVar vid1)) \\<and>\n  Vagree (mk_v I (OVar vid1) (sol 0, b) (sol t))\n   (mk_xode I (OVar vid1) (sol t)) (semBV I (OVar vid1))\n\ngoal (1 subgoal):\n 1. vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    VSagree (sol 0) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) {vid1}", "unfolding Vagree_def VSagree_def"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i \\<in> - semBV I (OVar vid1) \\<longrightarrow>\n       fst (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i =\n       fst (sol 0, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i \\<in> - semBV I (OVar vid1) \\<longrightarrow>\n       snd (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i =\n       snd (sol 0, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i \\<in> semBV I (OVar vid1) \\<longrightarrow>\n      fst (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i =\n      fst (mk_xode I (OVar vid1) (sol t)) $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> semBV I (OVar vid1) \\<longrightarrow>\n      snd (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i =\n      snd (mk_xode I (OVar vid1) (sol t)) $ i)\n\ngoal (1 subgoal):\n 1. vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    \\<forall>i\\<in>{vid1}.\n       sol 0 $ i = fst (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i", "by auto"], ["proof (state)\nthis:\n  vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  VSagree (sol 0) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) {vid1}\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have preserve_coincide1:\n      \"vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow> \n      sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n     = sterm_sem I (f1 fid2 vid1) (sol 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    sterm_sem I (f1 fid2 vid1)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n    sterm_sem I (f1 fid2 vid1) (sol 0)", "using coincidence_sterm[of \"(sol 0, b)\" \"(mk_v I (OVar vid1) (sol 0, b) (sol t))\" \"f1 fid2 vid1\" I]\n      preserve_agree1"], ["proof (prove)\nusing this:\n  Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n   (FVT (f1 fid2 vid1)) \\<Longrightarrow>\n  sterm_sem I (f1 fid2 vid1) (fst (sol 0, b)) =\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  VSagree (sol 0) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) {vid1}\n\ngoal (1 subgoal):\n 1. vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    sterm_sem I (f1 fid2 vid1)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n    sterm_sem I (f1 fid2 vid1) (sol 0)", "unfolding VSagree_def Vagree_def f1_def"], ["proof (prove)\nusing this:\n  (\\<forall>i.\n      Inl i \\<in> FVT ($f fid2 (singleton (Var vid1))) \\<longrightarrow>\n      fst (sol 0, b) $ i =\n      fst (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> FVT ($f fid2 (singleton (Var vid1))) \\<longrightarrow>\n      snd (sol 0, b) $ i =\n      snd (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i) \\<Longrightarrow>\n  sterm_sem I ($f fid2 (singleton (Var vid1))) (fst (sol 0, b)) =\n  sterm_sem I ($f fid2 (singleton (Var vid1)))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  \\<forall>i\\<in>{vid1}.\n     sol 0 $ i = fst (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i\n\ngoal (1 subgoal):\n 1. vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    sterm_sem I ($f fid2 (singleton (Var vid1)))\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n    sterm_sem I ($f fid2 (singleton (Var vid1))) (sol 0)", "by auto"], ["proof (state)\nthis:\n  vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  sterm_sem I (f1 fid2 vid1) (sol 0)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have preserve_coincide2:\n      \"vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow> \n      sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n     = sterm_sem I (f1 fid1 vid1) (sol 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    sterm_sem I (f1 fid1 vid1)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n    sterm_sem I (f1 fid1 vid1) (sol 0)", "using coincidence_sterm[of \"(sol 0, b)\" \"(mk_v I (OVar vid1) (sol 0, b) (sol t))\" \"f1 fid1 vid1\" I]\n      preserve_agree1"], ["proof (prove)\nusing this:\n  Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n   (FVT (f1 fid1 vid1)) \\<Longrightarrow>\n  sterm_sem I (f1 fid1 vid1) (fst (sol 0, b)) =\n  sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  VSagree (sol 0) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) {vid1}\n\ngoal (1 subgoal):\n 1. vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    sterm_sem I (f1 fid1 vid1)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n    sterm_sem I (f1 fid1 vid1) (sol 0)", "unfolding VSagree_def Vagree_def f1_def"], ["proof (prove)\nusing this:\n  (\\<forall>i.\n      Inl i \\<in> FVT ($f fid1 (singleton (Var vid1))) \\<longrightarrow>\n      fst (sol 0, b) $ i =\n      fst (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> FVT ($f fid1 (singleton (Var vid1))) \\<longrightarrow>\n      snd (sol 0, b) $ i =\n      snd (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i) \\<Longrightarrow>\n  sterm_sem I ($f fid1 (singleton (Var vid1))) (fst (sol 0, b)) =\n  sterm_sem I ($f fid1 (singleton (Var vid1)))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  \\<forall>i\\<in>{vid1}.\n     sol 0 $ i = fst (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i\n\ngoal (1 subgoal):\n 1. vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    sterm_sem I ($f fid1 (singleton (Var vid1)))\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n    sterm_sem I ($f fid1 (singleton (Var vid1))) (sol 0)", "by auto"], ["proof (state)\nthis:\n  vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  sterm_sem I (f1 fid1 vid1) (sol 0)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have \"?f1 t \\<le> ?f2 t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n    \\<le> sterm_sem I (f1 fid1 vid1)\n           (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "apply(cases \"t = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. t = 0 \\<Longrightarrow>\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n    \\<le> sterm_sem I (f1 fid1 vid1)\n           (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n 2. t \\<noteq> 0 \\<Longrightarrow>\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n    \\<le> sterm_sem I (f1 fid1 vid1)\n           (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. t = 0 \\<Longrightarrow>\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n    \\<le> sterm_sem I (f1 fid1 vid1)\n           (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "using geq0' sem_eq1' sem_eq2'"], ["proof (prove)\nusing this:\n  sterm_sem I (f1 fid2 vid1) (sol 0)\n  \\<le> sterm_sem I (f1 fid1 vid1) (sol 0)\n  sterm_sem I (f1 fid2 vid1) (sol 0) =\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n  sterm_sem I (f1 fid1 vid1) (sol 0) =\n  sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. t = 0 \\<Longrightarrow>\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n    \\<le> sterm_sem I (f1 fid1 vid1)\n           (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<noteq> 0 \\<Longrightarrow>\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n    \\<le> sterm_sem I (f1 fid1 vid1)\n           (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<noteq> 0 \\<Longrightarrow>\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n    \\<le> sterm_sem I (f1 fid1 vid1)\n           (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "apply(cases \"vid1 \\<in> ODE_vars I (OVar vid1)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n                      \\<le> sterm_sem I (f1 fid1 vid1)\n                             (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n 2. \\<lbrakk>t \\<noteq> 0; vid1 \\<notin> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n                      \\<le> sterm_sem I (f1 fid1 vid1)\n                             (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n                      \\<le> sterm_sem I (f1 fid1 vid1)\n                             (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "apply (rule MVT'[OF deriv2 deriv1, of t])"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> vid1 \\<in> ODE_vars I (OVar vid1)\n 2. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> s \\<in> {0..t}\n 3. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> vid1 \\<in> ODE_vars I (OVar vid1)\n 4. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> s \\<in> {0..t}\n 5. \\<And>x.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        x \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> t *\n                         frechet I (f1 fid2 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                         \\<le> t *\n                               frechet I (f1 fid1 vid1)\n                                (fst (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n                                (snd (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n 6. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n                      \\<le> sterm_sem I (f1 fid1 vid1)\n                             (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n 7. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t \\<and> t \\<le> t\n 8. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t", "(* 8 subgoals *)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> vid1 \\<in> ODE_vars I (OVar vid1)\n 2. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> s \\<in> {0..t}\n 3. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> vid1 \\<in> ODE_vars I (OVar vid1)\n 4. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> s \\<in> {0..t}\n 5. \\<And>x.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        x \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> t *\n                         frechet I (f1 fid2 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                         \\<le> t *\n                               frechet I (f1 fid1 vid1)\n                                (fst (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n                                (snd (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n 6. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n                      \\<le> sterm_sem I (f1 fid1 vid1)\n                             (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n 7. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t \\<and> t \\<le> t\n 8. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n     s_ \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> vid1 \\<in> ODE_vars I (OVar vid1)", "by auto"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> s \\<in> {0..t}\n 2. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> vid1 \\<in> ODE_vars I (OVar vid1)\n 3. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> s \\<in> {0..t}\n 4. \\<And>x.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        x \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> t *\n                         frechet I (f1 fid2 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                         \\<le> t *\n                               frechet I (f1 fid1 vid1)\n                                (fst (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n                                (snd (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n 5. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n                      \\<le> sterm_sem I (f1 fid1 vid1)\n                             (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n 6. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t \\<and> t \\<le> t\n 7. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n     s_ \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> s_ \\<in> {0..t}", "by auto"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> vid1 \\<in> ODE_vars I (OVar vid1)\n 2. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> s \\<in> {0..t}\n 3. \\<And>x.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        x \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> t *\n                         frechet I (f1 fid2 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                         \\<le> t *\n                               frechet I (f1 fid1 vid1)\n                                (fst (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n                                (snd (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n 4. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n                      \\<le> sterm_sem I (f1 fid1 vid1)\n                             (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n 5. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t \\<and> t \\<le> t\n 6. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n     s \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> vid1 \\<in> ODE_vars I (OVar vid1)", "using deriv2[of s]"], ["proof (prove)\nusing this:\n  \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t.\n                         sterm_sem I (f1 fid1 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b)\n                                 (sol t)))) has_derivative\n                     (\\<lambda>t'.\n                         t' *\n                         frechet I (f1 fid1 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                     (at s within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n     s \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> vid1 \\<in> ODE_vars I (OVar vid1)", "using leq"], ["proof (prove)\nusing this:\n  \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t.\n                         sterm_sem I (f1 fid1 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b)\n                                 (sol t)))) has_derivative\n                     (\\<lambda>t'.\n                         t' *\n                         frechet I (f1 fid1 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                     (at s within {0..t})\n  ?s8 \\<in> {0..t} \\<Longrightarrow>\n  1 *\n  frechet I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n   (snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n  \\<le> 1 *\n        frechet I (f1 fid1 vid1)\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n         (snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n     s \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> vid1 \\<in> ODE_vars I (OVar vid1)", "by auto"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> s \\<in> {0..t}\n 2. \\<And>x.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        x \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> t *\n                         frechet I (f1 fid2 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                         \\<le> t *\n                               frechet I (f1 fid1 vid1)\n                                (fst (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n                                (snd (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n 3. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n                      \\<le> sterm_sem I (f1 fid1 vid1)\n                             (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n 4. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t \\<and> t \\<le> t\n 5. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t", "using t leq geq0' sem_eq1' sem_eq2'"], ["proof (prove)\nusing this:\n  0 \\<le> t\n  ?s8 \\<in> {0..t} \\<Longrightarrow>\n  1 *\n  frechet I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n   (snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n  \\<le> 1 *\n        frechet I (f1 fid1 vid1)\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n         (snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n  sterm_sem I (f1 fid2 vid1) (sol 0)\n  \\<le> sterm_sem I (f1 fid1 vid1) (sol 0)\n  sterm_sem I (f1 fid2 vid1) (sol 0) =\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n  sterm_sem I (f1 fid1 vid1) (sol 0) =\n  sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (5 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> s \\<in> {0..t}\n 2. \\<And>x.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        x \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> t *\n                         frechet I (f1 fid2 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                         \\<le> t *\n                               frechet I (f1 fid1 vid1)\n                                (fst (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n                                (snd (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n 3. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n                      \\<le> sterm_sem I (f1 fid1 vid1)\n                             (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n 4. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t \\<and> t \\<le> t\n 5. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<notin> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n                      \\<le> sterm_sem I (f1 fid1 vid1)\n                             (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<notin> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n                      \\<le> sterm_sem I (f1 fid1 vid1)\n                             (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "using geq0"], ["proof (prove)\nusing this:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b)\n  \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<notin> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n                      \\<le> sterm_sem I (f1 fid1 vid1)\n                             (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "using dterm_sterm_dfree[OF free1, of I \"sol 0\" \"b\"]"], ["proof (prove)\nusing this:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b)\n  \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<notin> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n                      \\<le> sterm_sem I (f1 fid1 vid1)\n                             (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "using dterm_sterm_dfree[OF free2, of I \"sol 0\" \"b\"]"], ["proof (prove)\nusing this:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b)\n  \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n  sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<notin> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n                      \\<le> sterm_sem I (f1 fid1 vid1)\n                             (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "using preserve_coincide1 preserve_coincide2"], ["proof (prove)\nusing this:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b)\n  \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n  sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n  vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  sterm_sem I (f1 fid2 vid1) (sol 0)\n  vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  sterm_sem I (f1 fid1 vid1) (sol 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<notin> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n                      \\<le> sterm_sem I (f1 fid1 vid1)\n                             (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "by(simp add: f1_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  \\<le> sterm_sem I (f1 fid1 vid1)\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        \\<le> dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         \\<le> dterm_sem I (f1 fid1 vid1)\n                                (mk_v I (OVar vid1) (sol 0, b) (sol t))", "then"], ["proof (chain)\npicking this:\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  \\<le> sterm_sem I (f1 fid1 vid1)\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "show \"       dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n       \\<le> dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n\""], ["proof (prove)\nusing this:\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  \\<le> sterm_sem I (f1 fid1 vid1)\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n    \\<le> dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))", "using t \n      dterm_sterm_dfree[OF free2, of I \"?\\<phi>s t\" \"snd (?\\<phi> t)\"]\n      dterm_sterm_dfree[OF free1, of I \"?\\<phi>s t\" \"snd (?\\<phi> t)\"]"], ["proof (prove)\nusing this:\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  \\<le> sterm_sem I (f1 fid1 vid1)\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  0 \\<le> t\n  sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n    \\<le> dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))", "by (simp add: f1_def)"], ["proof (state)\nthis:\n  dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n  \\<le> dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma DIGr_valid:\"valid DIGraxiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid DIGraxiom", "unfolding DIGraxiom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. valid\n     (($\\<phi> vid1 local.empty \\<rightarrow>\n       [[EvolveODE (OVar vid1)\n          ($\\<phi> vid1\n            local.empty)]]Geq (Differential (f1 fid1 vid1))\n                           (Differential (f1 fid2 vid1))) \\<rightarrow>\n      ($\\<phi> vid1 local.empty \\<rightarrow>\n       Greater (f1 fid1 vid1) (f1 fid2 vid1)) \\<rightarrow>\n      [[EvolveODE (OVar vid1)\n         ($\\<phi> vid1 local.empty)]]Greater (f1 fid1 vid1) (f1 fid2 vid1))", "apply(unfold DIGraxiom_def valid_def impl_sem iff_sem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>I \\<nu>.\n       is_interp I \\<longrightarrow>\n       (\\<nu> \\<in> fml_sem I ($\\<phi> vid1 local.empty) \\<longrightarrow>\n        \\<nu>\n        \\<in> fml_sem I\n               ([[EvolveODE (OVar vid1)\n                   ($\\<phi> vid1\n                     local.empty)]]Geq (Differential (f1 fid1 vid1))\n                                    (Differential\n(f1 fid2 vid1)))) \\<longrightarrow>\n       (\\<nu> \\<in> fml_sem I ($\\<phi> vid1 local.empty) \\<longrightarrow>\n        \\<nu>\n        \\<in> fml_sem I\n               (Greater (f1 fid1 vid1) (f1 fid2 vid1))) \\<longrightarrow>\n       \\<nu>\n       \\<in> fml_sem I\n              ([[EvolveODE (OVar vid1)\n                  ($\\<phi> vid1\n                    local.empty)]]Greater (f1 fid1 vid1) (f1 fid2 vid1))", "apply(auto)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "(* 4 subgoals*)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "fix I::\"('sf,'sc,'sz) interp\" and  b aa ba \n    and sol::\"real \\<Rightarrow> 'sz simple_state\" \n    and t::real"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?ODE = \"OVar vid1\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?\\<phi> = \"(\\<lambda>t. mk_v I (?ODE) (sol 0, b) (sol t))\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume t:\"0 \\<le> t\"\n    and sol:\"(sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n    {x. Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) (mk_v I ?ODE (sol 0, b) x))}\"\n    and notin:\" \\<not>(Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) (sol 0, b)))\""], ["proof (state)\nthis:\n  0 \\<le> t\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n  \\<not> Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have fsafe:\"fsafe (Prop vid1 empty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fsafe ($\\<phi> vid1 local.empty)", "by (auto simp add: empty_def)"], ["proof (state)\nthis:\n  fsafe ($\\<phi> vid1 local.empty)\n\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "from sol"], ["proof (chain)\npicking this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}", "have \"Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) (?\\<phi> 0))\""], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n\ngoal (1 subgoal):\n 1. Predicates I vid1\n     (\\<chi>i.\n         dterm_sem I (local.empty i)\n          (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "using t solves_ode_domainD[of sol \"(\\<lambda>a. ODEs I vid1)\" \"{0..t}\"]"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n  0 \\<le> t\n  \\<lbrakk>(sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t} ?X;\n   ?t \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> sol ?t \\<in> ?X\n\ngoal (1 subgoal):\n 1. Predicates I vid1\n     (\\<chi>i.\n         dterm_sem I (local.empty i)\n          (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "by auto"], ["proof (state)\nthis:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "then"], ["proof (chain)\npicking this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "have incon:\"Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) ((sol 0, b)))\""], ["proof (prove)\nusing this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))", "using coincidence_formula[OF fsafe Iagree_refl[of I], of \"(sol 0, b)\" \"?\\<phi> 0\"]"], ["proof (prove)\nusing this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n  Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n   (FVF ($\\<phi> vid1 local.empty)) \\<Longrightarrow>\n  ((sol 0, b) \\<in> fml_sem I ($\\<phi> vid1 local.empty)) =\n  (mk_v I (OVar vid1) (sol 0, b) (sol 0)\n   \\<in> fml_sem I ($\\<phi> vid1 local.empty))\n\ngoal (1 subgoal):\n 1. Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n  (\\<forall>i.\n      Inl i \\<in> FVF ($\\<phi> vid1 local.empty) \\<longrightarrow>\n      fst (sol 0, b) $ i =\n      fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> FVF ($\\<phi> vid1 local.empty) \\<longrightarrow>\n      snd (sol 0, b) $ i =\n      snd (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<Longrightarrow>\n  ((sol 0, b) \\<in> fml_sem I ($\\<phi> vid1 local.empty)) =\n  (mk_v I (OVar vid1) (sol 0, b) (sol 0)\n   \\<in> fml_sem I ($\\<phi> vid1 local.empty))\n\ngoal (1 subgoal):\n 1. Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))", "by (auto simp add: empty_def)"], ["proof (state)\nthis:\n  Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n\ngoal (4 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 4. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "show \"dterm_sem I (f1 fid2 vid1)  (mk_v I (OVar vid1) (sol 0, b) (sol t)) < dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n    < dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))", "using notin incon"], ["proof (prove)\nusing this:\n  \\<not> Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n  Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n    < dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))", "by auto"], ["proof (state)\nthis:\n  dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n  < dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n\ngoal (3 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "fix I::\"('sf,'sc,'sz) interp\" and  b aa ba \n    and sol::\"real \\<Rightarrow> 'sz simple_state\" \n    and t::real"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?ODE = \"OVar vid1\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?\\<phi> = \"(\\<lambda>t. mk_v I (?ODE) (sol 0, b) (sol t))\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume t:\"0 \\<le> t\"\n    and sol:\"(sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n    {x. Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) (mk_v I ?ODE (sol 0, b) x))}\"\n    and notin:\" \\<not>(Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) (sol 0, b)))\""], ["proof (state)\nthis:\n  0 \\<le> t\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n  \\<not> Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n\ngoal (3 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have fsafe:\"fsafe (Prop vid1 empty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fsafe ($\\<phi> vid1 local.empty)", "by (auto simp add: empty_def)"], ["proof (state)\nthis:\n  fsafe ($\\<phi> vid1 local.empty)\n\ngoal (3 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "from sol"], ["proof (chain)\npicking this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}", "have \"Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) (?\\<phi> 0))\""], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n\ngoal (1 subgoal):\n 1. Predicates I vid1\n     (\\<chi>i.\n         dterm_sem I (local.empty i)\n          (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "using t solves_ode_domainD[of sol \"(\\<lambda>a. ODEs I vid1)\" \"{0..t}\"]"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n  0 \\<le> t\n  \\<lbrakk>(sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t} ?X;\n   ?t \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> sol ?t \\<in> ?X\n\ngoal (1 subgoal):\n 1. Predicates I vid1\n     (\\<chi>i.\n         dterm_sem I (local.empty i)\n          (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "by auto"], ["proof (state)\nthis:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (3 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "then"], ["proof (chain)\npicking this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "have incon:\"Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) ((sol 0, b)))\""], ["proof (prove)\nusing this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))", "using coincidence_formula[OF fsafe Iagree_refl[of I], of \"(sol 0, b)\" \"?\\<phi> 0\"]"], ["proof (prove)\nusing this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n  Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n   (FVF ($\\<phi> vid1 local.empty)) \\<Longrightarrow>\n  ((sol 0, b) \\<in> fml_sem I ($\\<phi> vid1 local.empty)) =\n  (mk_v I (OVar vid1) (sol 0, b) (sol 0)\n   \\<in> fml_sem I ($\\<phi> vid1 local.empty))\n\ngoal (1 subgoal):\n 1. Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n  (\\<forall>i.\n      Inl i \\<in> FVF ($\\<phi> vid1 local.empty) \\<longrightarrow>\n      fst (sol 0, b) $ i =\n      fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> FVF ($\\<phi> vid1 local.empty) \\<longrightarrow>\n      snd (sol 0, b) $ i =\n      snd (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<Longrightarrow>\n  ((sol 0, b) \\<in> fml_sem I ($\\<phi> vid1 local.empty)) =\n  (mk_v I (OVar vid1) (sol 0, b) (sol 0)\n   \\<in> fml_sem I ($\\<phi> vid1 local.empty))\n\ngoal (1 subgoal):\n 1. Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))", "by (auto simp add: empty_def)"], ["proof (state)\nthis:\n  Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n\ngoal (3 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b));\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 3. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "show \"dterm_sem I (f1 fid2 vid1)  (mk_v I (OVar vid1) (sol 0, b) (sol t)) < dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n    < dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))", "using notin incon"], ["proof (prove)\nusing this:\n  \\<not> Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n  Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n    < dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))", "by auto"], ["proof (state)\nthis:\n  dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n  < dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "fix I::\"('sf,'sc,'sz) interp\" and  b aa ba \n    and sol::\"real \\<Rightarrow> 'sz simple_state\" \n    and t::real"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?ODE = \"OVar vid1\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?\\<phi> = \"(\\<lambda>t. mk_v I (?ODE) (sol 0, b) (sol t))\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume t:\"0 \\<le> t\""], ["proof (state)\nthis:\n  0 \\<le> t\n\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume sol:\"(sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n      {x. Predicates I vid1 (\\<chi> i. dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\""], ["proof (state)\nthis:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume notin:\"\\<not> Predicates I vid1 (\\<chi> i. dterm_sem I (local.empty i) (sol 0, b))\""], ["proof (state)\nthis:\n  \\<not> Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have fsafe:\"fsafe (Prop vid1 empty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fsafe ($\\<phi> vid1 local.empty)", "by (auto simp add: empty_def)"], ["proof (state)\nthis:\n  fsafe ($\\<phi> vid1 local.empty)\n\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "from sol"], ["proof (chain)\npicking this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}", "have \"Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) (?\\<phi> 0))\""], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n\ngoal (1 subgoal):\n 1. Predicates I vid1\n     (\\<chi>i.\n         dterm_sem I (local.empty i)\n          (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "using t solves_ode_domainD[of sol \"(\\<lambda>a. ODEs I vid1)\" \"{0..t}\"]"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n  0 \\<le> t\n  \\<lbrakk>(sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t} ?X;\n   ?t \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> sol ?t \\<in> ?X\n\ngoal (1 subgoal):\n 1. Predicates I vid1\n     (\\<chi>i.\n         dterm_sem I (local.empty i)\n          (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "by auto"], ["proof (state)\nthis:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "then"], ["proof (chain)\npicking this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "have incon:\"Predicates I vid1 (\\<chi> i. dterm_sem I (empty i) ((sol 0, b)))\""], ["proof (prove)\nusing this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))", "using coincidence_formula[OF fsafe Iagree_refl[of I], of \"(sol 0, b)\" \"?\\<phi> 0\"]"], ["proof (prove)\nusing this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n  Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n   (FVF ($\\<phi> vid1 local.empty)) \\<Longrightarrow>\n  ((sol 0, b) \\<in> fml_sem I ($\\<phi> vid1 local.empty)) =\n  (mk_v I (OVar vid1) (sol 0, b) (sol 0)\n   \\<in> fml_sem I ($\\<phi> vid1 local.empty))\n\ngoal (1 subgoal):\n 1. Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n  (\\<forall>i.\n      Inl i \\<in> FVF ($\\<phi> vid1 local.empty) \\<longrightarrow>\n      fst (sol 0, b) $ i =\n      fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> FVF ($\\<phi> vid1 local.empty) \\<longrightarrow>\n      snd (sol 0, b) $ i =\n      snd (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<Longrightarrow>\n  ((sol 0, b) \\<in> fml_sem I ($\\<phi> vid1 local.empty)) =\n  (mk_v I (OVar vid1) (sol 0, b) (sol 0)\n   \\<in> fml_sem I ($\\<phi> vid1 local.empty))\n\ngoal (1 subgoal):\n 1. Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))", "by (auto simp add: empty_def)"], ["proof (state)\nthis:\n  Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n\ngoal (2 subgoals):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        \\<not> Predicates I vid1\n                (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))\n 2. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "show \"dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n     < dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n    < dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))", "using incon notin"], ["proof (prove)\nusing this:\n  Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n  \\<not> Predicates I vid1 (\\<chi>i. dterm_sem I (local.empty i) (sol 0, b))\n\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n    < dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))", "by auto"], ["proof (state)\nthis:\n  dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n  < dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "fix I::\"('sf,'sc,'sz) interp\" and  b aa ba \n  and sol::\"real \\<Rightarrow> 'sz simple_state\" \n  and t::real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?ODE = \"OVar vid1\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?\\<phi> = \"(\\<lambda>t. mk_v I (?ODE) (sol 0, b) (sol t))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume good_interp:\"is_interp I\""], ["proof (state)\nthis:\n  is_interp I\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume aaba:\"(aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t)\""], ["proof (state)\nthis:\n  (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume t:\"0 \\<le> t\""], ["proof (state)\nthis:\n  0 \\<le> t\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume sol:\"(sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n      {x. Predicates I vid1 (\\<chi> i. dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\""], ["proof (state)\nthis:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume box:\"\\<forall>a ba. (\\<exists>sola. sol 0 = sola 0 \\<and>\n                    (\\<exists>t. (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                         0 \\<le> t \\<and>\n                         (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                          {x. Predicates I vid1\n                               (\\<chi> i. dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sola 0, b) x))})) \\<longrightarrow>\n            directional_derivative I (f1 fid2 vid1) (a, ba) \\<le> directional_derivative I (f1 fid1 vid1) (a, ba)\""], ["proof (state)\nthis:\n  \\<forall>a ba.\n     (\\<exists>sola.\n         sol 0 = sola 0 \\<and>\n         (\\<exists>t.\n             (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n             0 \\<le> t \\<and>\n             (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n              {x. Predicates I vid1\n                   (\\<chi>i.\n                       dterm_sem I (local.empty i)\n                        (mk_v I (OVar vid1) (sola 0, b)\n                          x))})) \\<longrightarrow>\n     directional_derivative I (f1 fid2 vid1) (a, ba)\n     \\<le> directional_derivative I (f1 fid1 vid1) (a, ba)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "assume geq0:\"dterm_sem I (f1 fid2 vid1) (sol 0, b) < dterm_sem I (f1 fid1 vid1) (sol 0, b)\""], ["proof (state)\nthis:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b)\n  < dterm_sem I (f1 fid1 vid1) (sol 0, b)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have free1:\"dfree ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))", "by (auto intro: dfree.intros)"], ["proof (state)\nthis:\n  dfree ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have free2:\"dfree ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))", "by (auto intro: dfree.intros)"], ["proof (state)\nthis:\n  dfree ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "from geq0"], ["proof (chain)\npicking this:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b)\n  < dterm_sem I (f1 fid1 vid1) (sol 0, b)", "have geq0':\"sterm_sem I (f1 fid2 vid1) (sol 0) < sterm_sem I (f1 fid1 vid1) (sol 0)\""], ["proof (prove)\nusing this:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b)\n  < dterm_sem I (f1 fid1 vid1) (sol 0, b)\n\ngoal (1 subgoal):\n 1. sterm_sem I (f1 fid2 vid1) (sol 0) < sterm_sem I (f1 fid1 vid1) (sol 0)", "unfolding f1_def"], ["proof (prove)\nusing this:\n  dterm_sem I ($f fid2 (singleton (Var vid1))) (sol 0, b)\n  < dterm_sem I ($f fid1 (singleton (Var vid1))) (sol 0, b)\n\ngoal (1 subgoal):\n 1. sterm_sem I ($f fid2 (singleton (Var vid1))) (sol 0)\n    < sterm_sem I ($f fid1 (singleton (Var vid1))) (sol 0)", "using dterm_sterm_dfree[OF free1, of I \"sol 0\" b] dterm_sterm_dfree[OF free2, of I \"sol 0\" b]"], ["proof (prove)\nusing this:\n  dterm_sem I ($f fid2 (singleton (Var vid1))) (sol 0, b)\n  < dterm_sem I ($f fid1 (singleton (Var vid1))) (sol 0, b)\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n  sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n\ngoal (1 subgoal):\n 1. sterm_sem I ($f fid2 (singleton (Var vid1))) (sol 0)\n    < sterm_sem I ($f fid1 (singleton (Var vid1))) (sol 0)", "by auto"], ["proof (state)\nthis:\n  sterm_sem I (f1 fid2 vid1) (sol 0) < sterm_sem I (f1 fid1 vid1) (sol 0)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?\\<phi>s = \"\\<lambda>x. fst (?\\<phi> x)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?\\<phi>t = \"\\<lambda>x. snd (?\\<phi> x)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?df1 = \"(\\<lambda>t. dterm_sem I (f1 fid2 vid1) (?\\<phi> t))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?f1 = \"(\\<lambda>t. sterm_sem I (f1 fid2 vid1) (?\\<phi>s t))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?f1' = \"(\\<lambda> s t'. t' * frechet I (f1 fid2 vid1) (?\\<phi>s s) (?\\<phi>t s))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have dfeq:\"?df1 = ?f1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t.\n        dterm_sem I (f1 fid2 vid1)\n         (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n    (\\<lambda>t.\n        sterm_sem I (f1 fid2 vid1)\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))))", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t)) =\n       sterm_sem I (f1 fid2 vid1)\n        (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "subgoal for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t)) =\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "using dterm_sterm_dfree[OF free1, of I \"?\\<phi>s t\" \"snd (?\\<phi> t)\"]"], ["proof (prove)\nusing this:\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t)) =\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "unfolding f1_def expand_singleton"], ["proof (prove)\nusing this:\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n\ngoal (1 subgoal):\n 1. dterm_sem I\n     ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n     (mk_v I (OVar vid1) (sol 0, b) (sol t)) =\n    sterm_sem I\n     ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>t.\n      dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  (\\<lambda>t.\n      sterm_sem I (f1 fid2 vid1)\n       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have free3:\"dfree (f1 fid2 vid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree (f1 fid2 vid1)", "unfolding f1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree ($f fid2 (singleton (Var vid1)))", "by (auto intro: dfree.intros)"], ["proof (state)\nthis:\n  dfree (f1 fid2 vid1)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?df2 = \"(\\<lambda>t. dterm_sem I (f1 fid1 vid1) (?\\<phi> t))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?f2 = \"(\\<lambda>t. sterm_sem I (f1 fid1 vid1) (?\\<phi>s t))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?f2' = \"(\\<lambda>s t' . t' * frechet I (f1 fid1 vid1) (?\\<phi>s s) (?\\<phi>t s))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "let ?int = \"{0..t}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have bluh:\"\\<And>x i. (Functions I i has_derivative (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x) (at x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x i.\n       (Functions I i has_derivative\n        (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x)\n        (at x)", "using good_interp"], ["proof (prove)\nusing this:\n  is_interp I\n\ngoal (1 subgoal):\n 1. \\<And>x i.\n       (Functions I i has_derivative\n        (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x)\n        (at x)", "unfolding is_interp_def"], ["proof (prove)\nusing this:\n  \\<forall>x i.\n     (Functions I i has_derivative FunctionFrechet I i x) (at x) \\<and>\n     continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet I i x))\n\ngoal (1 subgoal):\n 1. \\<And>x i.\n       (Functions I i has_derivative\n        (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x)\n        (at x)", "by auto"], ["proof (state)\nthis:\n  (Functions I ?i6 has_derivative\n   (THE f'. \\<forall>x. (Functions I ?i6 has_derivative f' x) (at x)) ?x6)\n   (at ?x6)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have blah:\"(Functions I fid2 has_derivative (THE f'. \\<forall>x. (Functions I fid2 has_derivative f' x) (at x)) (\\<chi> i. if i = vid1 then sol t $ vid1 else 0)) (at (\\<chi> i. if i = vid1 then sol t $ vid1 else 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Functions I fid2 has_derivative\n     (THE f'. \\<forall>x. (Functions I fid2 has_derivative f' x) (at x))\n      (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n     (at (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))", "using bluh"], ["proof (prove)\nusing this:\n  (Functions I ?i6 has_derivative\n   (THE f'. \\<forall>x. (Functions I ?i6 has_derivative f' x) (at x)) ?x6)\n   (at ?x6)\n\ngoal (1 subgoal):\n 1. (Functions I fid2 has_derivative\n     (THE f'. \\<forall>x. (Functions I fid2 has_derivative f' x) (at x))\n      (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n     (at (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))", "by auto"], ["proof (state)\nthis:\n  (Functions I fid2 has_derivative\n   (THE f'. \\<forall>x. (Functions I fid2 has_derivative f' x) (at x))\n    (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (at (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have bigEx:\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow>(\\<exists>sola. sol 0 = sola 0 \\<and>\n       (\\<exists>ta. (fst (?\\<phi> s),\n              snd (?\\<phi> s)) =\n             mk_v I (OVar vid1) (sola 0, b) (sola ta) \\<and>\n             0 \\<le> ta \\<and>\n             (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n              {x. Predicates I vid1 (\\<chi> i. dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       \\<exists>sola.\n          sol 0 = sola 0 \\<and>\n          (\\<exists>ta.\n              (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n               snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n              mk_v I (OVar vid1) (sola 0, b) (sola ta) \\<and>\n              0 \\<le> ta \\<and>\n              (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n               {x. Predicates I vid1\n                    (\\<chi>i.\n                        dterm_sem I (local.empty i)\n                         (mk_v I (OVar vid1) (sol 0, b) x))})", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    \\<exists>sola.\n       sol 0 = sola 0 \\<and>\n       (\\<exists>ta.\n           (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n            snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n           mk_v I (OVar vid1) (sola 0, b) (sola ta) \\<and>\n           0 \\<le> ta \\<and>\n           (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n            {x. Predicates I vid1\n                 (\\<chi>i.\n                     dterm_sem I (local.empty i)\n                      (mk_v I (OVar vid1) (sol 0, b) x))})", "apply(rule exI[where x=sol])"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    sol 0 = sol 0 \\<and>\n    (\\<exists>ta.\n        (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n         snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n        mk_v I (OVar vid1) (sol 0, b) (sol ta) \\<and>\n        0 \\<le> ta \\<and>\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))})", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. s \\<in> {0..t} \\<Longrightarrow> sol 0 = sol 0\n 2. s \\<in> {0..t} \\<Longrightarrow>\n    \\<exists>ta.\n       (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n        snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n       mk_v I (OVar vid1) (sol 0, b) (sol ta) \\<and>\n       0 \\<le> ta \\<and>\n       (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n        {x. Predicates I vid1\n             (\\<chi>i.\n                 dterm_sem I (local.empty i)\n                  (mk_v I (OVar vid1) (sol 0, b) x))}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow> sol 0 = sol 0", "by (rule refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    \\<exists>ta.\n       (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n        snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n       mk_v I (OVar vid1) (sol 0, b) (sol ta) \\<and>\n       0 \\<le> ta \\<and>\n       (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n        {x. Predicates I vid1\n             (\\<chi>i.\n                 dterm_sem I (local.empty i)\n                  (mk_v I (OVar vid1) (sol 0, b) x))}", "apply(rule exI[where x=s])"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n     snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n    mk_v I (OVar vid1) (sol 0, b) (sol s) \\<and>\n    0 \\<le> s \\<and>\n    (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (local.empty i)\n               (mk_v I (OVar vid1) (sol 0, b) x))}", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n     snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n    mk_v I (OVar vid1) (sol 0, b) (sol s)\n 2. s \\<in> {0..t} \\<Longrightarrow>\n    0 \\<le> s \\<and>\n    (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (local.empty i)\n               (mk_v I (OVar vid1) (sol 0, b) x))}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n     snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n    mk_v I (OVar vid1) (sol 0, b) (sol s)", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    0 \\<le> s \\<and>\n    (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (local.empty i)\n               (mk_v I (OVar vid1) (sol 0, b) x))}", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. s \\<in> {0..t} \\<Longrightarrow> 0 \\<le> s\n 2. s \\<in> {0..t} \\<Longrightarrow>\n    (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (local.empty i)\n               (mk_v I (OVar vid1) (sol 0, b) x))}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow> 0 \\<le> s", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (local.empty i)\n               (mk_v I (OVar vid1) (sol 0, b) x))}", "using sol"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (local.empty i)\n               (mk_v I (OVar vid1) (sol 0, b) x))}", "using atLeastAtMost_iff atLeastatMost_subset_iff order_refl solves_ode_on_subset"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n  (?i \\<in> {?l..?u}) = (?l \\<le> ?i \\<and> ?i \\<le> ?u)\n  ({?a..?b} \\<subseteq> {?c..?d}) =\n  (\\<not> ?a \\<le> ?b \\<or> ?c \\<le> ?a \\<and> ?b \\<le> ?d)\n  ?x \\<le> ?x\n  \\<lbrakk>(?x solves_ode ?f) ?S ?Y; ?T \\<subseteq> ?S;\n   ?Y \\<subseteq> ?X\\<rbrakk>\n  \\<Longrightarrow> (?x solves_ode ?f) ?T ?X\n\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..s}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (local.empty i)\n               (mk_v I (OVar vid1) (sol 0, b) x))}", "by (metis (no_types, lifting) subsetI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?s6 \\<in> {0..t} \\<Longrightarrow>\n  \\<exists>sola.\n     sol 0 = sola 0 \\<and>\n     (\\<exists>ta.\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s6)),\n          snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s6))) =\n         mk_v I (OVar vid1) (sola 0, b) (sola ta) \\<and>\n         0 \\<le> ta \\<and>\n         (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n          {x. Predicates I vid1\n               (\\<chi>i.\n                   dterm_sem I (local.empty i)\n                    (mk_v I (OVar vid1) (sol 0, b) x))})\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have box':\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow> directional_derivative I (f1 fid2 vid1) (?\\<phi>s s, ?\\<phi>t s) \n                              \\<le> directional_derivative I (f1 fid1 vid1) (?\\<phi>s s, ?\\<phi>t s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       directional_derivative I (f1 fid2 vid1)\n        (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n         snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n       \\<le> directional_derivative I (f1 fid1 vid1)\n              (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n               snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    directional_derivative I (f1 fid2 vid1)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n      snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n    \\<le> directional_derivative I (f1 fid1 vid1)\n           (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n            snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))", "using box"], ["proof (prove)\nusing this:\n  \\<forall>a ba.\n     (\\<exists>sola.\n         sol 0 = sola 0 \\<and>\n         (\\<exists>t.\n             (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n             0 \\<le> t \\<and>\n             (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n              {x. Predicates I vid1\n                   (\\<chi>i.\n                       dterm_sem I (local.empty i)\n                        (mk_v I (OVar vid1) (sola 0, b)\n                          x))})) \\<longrightarrow>\n     directional_derivative I (f1 fid2 vid1) (a, ba)\n     \\<le> directional_derivative I (f1 fid1 vid1) (a, ba)\n\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    directional_derivative I (f1 fid2 vid1)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n      snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n    \\<le> directional_derivative I (f1 fid1 vid1)\n           (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n            snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n     \\<forall>a ba.\n        (\\<exists>sola.\n            sol 0 = sola 0 \\<and>\n            (\\<exists>t.\n                (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                0 \\<le> t \\<and>\n                (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                 {x. Predicates I vid1\n                      (\\<chi>i.\n                          dterm_sem I (local.empty i)\n                           (mk_v I (OVar vid1) (sola 0, b)\n                             x))})) \\<longrightarrow>\n        directional_derivative I (f1 fid2 vid1) (a, ba)\n        \\<le> directional_derivative I (f1 fid1 vid1) (a, ba)\\<rbrakk>\n    \\<Longrightarrow> directional_derivative I (f1 fid2 vid1)\n                       (mk_v I (OVar vid1) (sol 0, b) (sol s))\n                      \\<le> directional_derivative I (f1 fid1 vid1)\n                             (mk_v I (OVar vid1) (sol 0, b) (sol s))", "apply (erule allE[where x=\"?\\<phi>s s\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n     \\<forall>ba.\n        (\\<exists>sola.\n            sol 0 = sola 0 \\<and>\n            (\\<exists>t.\n                (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)), ba) =\n                mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                0 \\<le> t \\<and>\n                (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                 {x. Predicates I vid1\n                      (\\<chi>i.\n                          dterm_sem I (local.empty i)\n                           (mk_v I (OVar vid1) (sola 0, b)\n                             x))})) \\<longrightarrow>\n        directional_derivative I (f1 fid2 vid1)\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)), ba)\n        \\<le> directional_derivative I (f1 fid1 vid1)\n               (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)), ba)\\<rbrakk>\n    \\<Longrightarrow> directional_derivative I (f1 fid2 vid1)\n                       (mk_v I (OVar vid1) (sol 0, b) (sol s))\n                      \\<le> directional_derivative I (f1 fid1 vid1)\n                             (mk_v I (OVar vid1) (sol 0, b) (sol s))", "apply (erule allE[where x=\"?\\<phi>t s\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n     (\\<exists>sola.\n         sol 0 = sola 0 \\<and>\n         (\\<exists>t.\n             (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n              snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n             mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n             0 \\<le> t \\<and>\n             (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n              {x. Predicates I vid1\n                   (\\<chi>i.\n                       dterm_sem I (local.empty i)\n                        (mk_v I (OVar vid1) (sola 0, b)\n                          x))})) \\<longrightarrow>\n     directional_derivative I (f1 fid2 vid1)\n      (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n       snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n     \\<le> directional_derivative I (f1 fid1 vid1)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n             snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\\<rbrakk>\n    \\<Longrightarrow> directional_derivative I (f1 fid2 vid1)\n                       (mk_v I (OVar vid1) (sol 0, b) (sol s))\n                      \\<le> directional_derivative I (f1 fid1 vid1)\n                             (mk_v I (OVar vid1) (sol 0, b) (sol s))", "using bigEx[of s]"], ["proof (prove)\nusing this:\n  s \\<in> {0..t} \\<Longrightarrow>\n  \\<exists>sola.\n     sol 0 = sola 0 \\<and>\n     (\\<exists>ta.\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n          snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n         mk_v I (OVar vid1) (sola 0, b) (sola ta) \\<and>\n         0 \\<le> ta \\<and>\n         (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..ta}\n          {x. Predicates I vid1\n               (\\<chi>i.\n                   dterm_sem I (local.empty i)\n                    (mk_v I (OVar vid1) (sol 0, b) x))})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n     (\\<exists>sola.\n         sol 0 = sola 0 \\<and>\n         (\\<exists>t.\n             (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n              snd (mk_v I (OVar vid1) (sol 0, b) (sol s))) =\n             mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n             0 \\<le> t \\<and>\n             (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n              {x. Predicates I vid1\n                   (\\<chi>i.\n                       dterm_sem I (local.empty i)\n                        (mk_v I (OVar vid1) (sola 0, b)\n                          x))})) \\<longrightarrow>\n     directional_derivative I (f1 fid2 vid1)\n      (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n       snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n     \\<le> directional_derivative I (f1 fid1 vid1)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n             snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\\<rbrakk>\n    \\<Longrightarrow> directional_derivative I (f1 fid2 vid1)\n                       (mk_v I (OVar vid1) (sol 0, b) (sol s))\n                      \\<le> directional_derivative I (f1 fid1 vid1)\n                             (mk_v I (OVar vid1) (sol 0, b) (sol s))", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?s6 \\<in> {0..t} \\<Longrightarrow>\n  directional_derivative I (f1 fid2 vid1)\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s6)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s6)))\n  \\<le> directional_derivative I (f1 fid1 vid1)\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s6)),\n          snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s6)))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have dsafe1:\"dsafe (f1 fid2 vid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dsafe (f1 fid2 vid1)", "unfolding f1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dsafe ($f fid2 (singleton (Var vid1)))", "by (auto intro: dsafe.intros)"], ["proof (state)\nthis:\n  dsafe (f1 fid2 vid1)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have dsafe2:\"dsafe (f1 fid1 vid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dsafe (f1 fid1 vid1)", "unfolding f1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dsafe ($f fid1 (singleton (Var vid1)))", "by (auto intro: dsafe.intros)"], ["proof (state)\nthis:\n  dsafe (f1 fid1 vid1)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have agree1:\"Vagree (sol 0, b) (?\\<phi> 0) (FVT (f1 fid2 vid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n     (FVT (f1 fid2 vid1))", "using mk_v_agree[of I \"(OVar vid1)\" \"(sol 0, b)\" \"fst (?\\<phi> 0)\"]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I (OVar vid1) (sol 0, b)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))))\n   (sol 0, b) (- semBV I (OVar vid1)) \\<and>\n  Vagree\n   (mk_v I (OVar vid1) (sol 0, b)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))))\n   (mk_xode I (OVar vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))))\n   (semBV I (OVar vid1))\n\ngoal (1 subgoal):\n 1. Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n     (FVT (f1 fid2 vid1))", "unfolding f1_def Vagree_def expand_singleton"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i \\<in> - semBV I (OVar vid1) \\<longrightarrow>\n       fst (mk_v I (OVar vid1) (sol 0, b)\n             (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n       i =\n       fst (sol 0, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i \\<in> - semBV I (OVar vid1) \\<longrightarrow>\n       snd (mk_v I (OVar vid1) (sol 0, b)\n             (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n       i =\n       snd (sol 0, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i \\<in> semBV I (OVar vid1) \\<longrightarrow>\n      fst (mk_v I (OVar vid1) (sol 0, b)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n      i =\n      fst (mk_xode I (OVar vid1)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> semBV I (OVar vid1) \\<longrightarrow>\n      snd (mk_v I (OVar vid1) (sol 0, b)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n      i =\n      snd (mk_xode I (OVar vid1)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n      i)\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i\n        \\<in> FVT ($f fid2\n                    (\\<lambda>i.\n                        if i = vid1 then Var vid1\n                        else Const 0)) \\<longrightarrow>\n        fst (sol 0, b) $ i =\n        fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<and>\n    (\\<forall>i.\n        Inr i\n        \\<in> FVT ($f fid2\n                    (\\<lambda>i.\n                        if i = vid1 then Var vid1\n                        else Const 0)) \\<longrightarrow>\n        snd (sol 0, b) $ i =\n        snd (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODEBV I vid1 \\<and>\n                Inl i \\<notin> Inr ` ODEBV I vid1 \\<longrightarrow>\n                fst (mk_v I (OVar vid1) (sol 0, b)\n                      (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n                i =\n                sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODEBV I vid1 \\<and>\n        Inr i \\<notin> Inr ` ODEBV I vid1 \\<longrightarrow>\n        snd (mk_v I (OVar vid1) (sol 0, b)\n              (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n        i =\n        b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODEBV I vid1 \\<longrightarrow>\n         fst (mk_v I (OVar vid1) (sol 0, b)\n               (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n         i =\n         fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<and>\n        (Inl i \\<in> Inr ` ODEBV I vid1 \\<longrightarrow>\n         fst (mk_v I (OVar vid1) (sol 0, b)\n               (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n         i =\n         fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODEBV I vid1 \\<longrightarrow>\n         snd (mk_v I (OVar vid1) (sol 0, b)\n               (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n         i =\n         ODEs I vid1 (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))) $\n         i) \\<and>\n        (Inr i \\<in> Inr ` ODEBV I vid1 \\<longrightarrow>\n         snd (mk_v I (OVar vid1) (sol 0, b)\n               (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n         i =\n         ODEs I vid1 (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))) $\n         i)\\<rbrakk>\n    \\<Longrightarrow> sol 0 $ vid1 =\n                      fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ vid1", "by (metis (no_types, lifting) Compl_iff Vagree_def fst_conv mk_v_agree mk_xode.simps semBV.simps)"], ["proof (state)\nthis:\n  Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n   (FVT (f1 fid2 vid1))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have agree2:\"Vagree (sol 0, b) (?\\<phi> 0) (FVT (f1 fid1 vid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n     (FVT (f1 fid1 vid1))", "using mk_v_agree[of I \"(OVar vid1)\" \"(sol 0, b)\" \"fst (?\\<phi> 0)\"]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I (OVar vid1) (sol 0, b)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))))\n   (sol 0, b) (- semBV I (OVar vid1)) \\<and>\n  Vagree\n   (mk_v I (OVar vid1) (sol 0, b)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))))\n   (mk_xode I (OVar vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))))\n   (semBV I (OVar vid1))\n\ngoal (1 subgoal):\n 1. Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n     (FVT (f1 fid1 vid1))", "unfolding f1_def Vagree_def expand_singleton"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i \\<in> - semBV I (OVar vid1) \\<longrightarrow>\n       fst (mk_v I (OVar vid1) (sol 0, b)\n             (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n       i =\n       fst (sol 0, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i \\<in> - semBV I (OVar vid1) \\<longrightarrow>\n       snd (mk_v I (OVar vid1) (sol 0, b)\n             (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n       i =\n       snd (sol 0, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i \\<in> semBV I (OVar vid1) \\<longrightarrow>\n      fst (mk_v I (OVar vid1) (sol 0, b)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n      i =\n      fst (mk_xode I (OVar vid1)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> semBV I (OVar vid1) \\<longrightarrow>\n      snd (mk_v I (OVar vid1) (sol 0, b)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n      i =\n      snd (mk_xode I (OVar vid1)\n            (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n      i)\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i\n        \\<in> FVT ($f fid1\n                    (\\<lambda>i.\n                        if i = vid1 then Var vid1\n                        else Const 0)) \\<longrightarrow>\n        fst (sol 0, b) $ i =\n        fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<and>\n    (\\<forall>i.\n        Inr i\n        \\<in> FVT ($f fid1\n                    (\\<lambda>i.\n                        if i = vid1 then Var vid1\n                        else Const 0)) \\<longrightarrow>\n        snd (sol 0, b) $ i =\n        snd (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i.\n                Inl i \\<notin> Inl ` ODEBV I vid1 \\<and>\n                Inl i \\<notin> Inr ` ODEBV I vid1 \\<longrightarrow>\n                fst (mk_v I (OVar vid1) (sol 0, b)\n                      (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n                i =\n                sol 0 $ i;\n     \\<forall>i.\n        Inr i \\<notin> Inl ` ODEBV I vid1 \\<and>\n        Inr i \\<notin> Inr ` ODEBV I vid1 \\<longrightarrow>\n        snd (mk_v I (OVar vid1) (sol 0, b)\n              (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n        i =\n        b $ i;\n     \\<forall>i.\n        (Inl i \\<in> Inl ` ODEBV I vid1 \\<longrightarrow>\n         fst (mk_v I (OVar vid1) (sol 0, b)\n               (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n         i =\n         fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i) \\<and>\n        (Inl i \\<in> Inr ` ODEBV I vid1 \\<longrightarrow>\n         fst (mk_v I (OVar vid1) (sol 0, b)\n               (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n         i =\n         fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ i);\n     \\<forall>i.\n        (Inr i \\<in> Inl ` ODEBV I vid1 \\<longrightarrow>\n         snd (mk_v I (OVar vid1) (sol 0, b)\n               (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n         i =\n         ODEs I vid1 (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))) $\n         i) \\<and>\n        (Inr i \\<in> Inr ` ODEBV I vid1 \\<longrightarrow>\n         snd (mk_v I (OVar vid1) (sol 0, b)\n               (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))) $\n         i =\n         ODEs I vid1 (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))) $\n         i)\\<rbrakk>\n    \\<Longrightarrow> sol 0 $ vid1 =\n                      fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)) $ vid1", "by (metis (no_types, lifting) Compl_iff Vagree_def fst_conv mk_v_agree mk_xode.simps semBV.simps)"], ["proof (state)\nthis:\n  Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n   (FVT (f1 fid1 vid1))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have sem_eq1:\"dterm_sem I (f1 fid2 vid1) (sol 0, b) = dterm_sem I (f1 fid2 vid1) (?\\<phi> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (sol 0, b) =\n    dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))", "using coincidence_dterm[OF dsafe1 agree1]"], ["proof (prove)\nusing this:\n  dterm_sem ?I (f1 fid2 vid1) (sol 0, b) =\n  dterm_sem ?I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (sol 0, b) =\n    dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))", "by auto"], ["proof (state)\nthis:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b) =\n  dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "then"], ["proof (chain)\npicking this:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b) =\n  dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))", "have sem_eq1':\"sterm_sem I (f1 fid2 vid1) (sol 0) = sterm_sem I (f1 fid2 vid1) (?\\<phi>s 0)\""], ["proof (prove)\nusing this:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b) =\n  dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n\ngoal (1 subgoal):\n 1. sterm_sem I (f1 fid2 vid1) (sol 0) =\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "using dterm_sterm_dfree[OF free1, of I \"sol 0\" \"b\"] \n          dterm_sterm_dfree[OF free1, of I \"(?\\<phi>s 0)\" \"snd (?\\<phi> 0)\"]"], ["proof (prove)\nusing this:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b) =\n  dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. sterm_sem I (f1 fid2 vid1) (sol 0) =\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "unfolding f1_def expand_singleton"], ["proof (prove)\nusing this:\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. sterm_sem I\n     ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n     (sol 0) =\n    sterm_sem I\n     ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "by auto"], ["proof (state)\nthis:\n  sterm_sem I (f1 fid2 vid1) (sol 0) =\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have sem_eq2:\"dterm_sem I (f1 fid1 vid1) (sol 0, b) = dterm_sem I (f1 fid1 vid1) (?\\<phi> 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid1 vid1) (sol 0, b) =\n    dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))", "using coincidence_dterm[OF dsafe2 agree2]"], ["proof (prove)\nusing this:\n  dterm_sem ?I (f1 fid1 vid1) (sol 0, b) =\n  dterm_sem ?I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid1 vid1) (sol 0, b) =\n    dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))", "by auto"], ["proof (state)\nthis:\n  dterm_sem I (f1 fid1 vid1) (sol 0, b) =\n  dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "then"], ["proof (chain)\npicking this:\n  dterm_sem I (f1 fid1 vid1) (sol 0, b) =\n  dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))", "have sem_eq2':\"sterm_sem I (f1 fid1 vid1) (sol 0) = sterm_sem I (f1 fid1 vid1) (?\\<phi>s 0)\""], ["proof (prove)\nusing this:\n  dterm_sem I (f1 fid1 vid1) (sol 0, b) =\n  dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n\ngoal (1 subgoal):\n 1. sterm_sem I (f1 fid1 vid1) (sol 0) =\n    sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "using dterm_sterm_dfree[OF free2, of I \"sol 0\" \"b\"] dterm_sterm_dfree[OF free2, of I \"(?\\<phi>s 0)\" \"snd (?\\<phi> 0)\"]"], ["proof (prove)\nusing this:\n  dterm_sem I (f1 fid1 vid1) (sol 0, b) =\n  dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n  sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n  sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))) =\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. sterm_sem I (f1 fid1 vid1) (sol 0) =\n    sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "unfolding f1_def expand_singleton"], ["proof (prove)\nusing this:\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b) =\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (mk_v I (OVar vid1) (sol 0, b) (sol 0))\n  sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n  sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0))) =\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. sterm_sem I\n     ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n     (sol 0) =\n    sterm_sem I\n     ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))", "by auto"], ["proof (state)\nthis:\n  sterm_sem I (f1 fid1 vid1) (sol 0) =\n  sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have good_interp':\"\\<And>i x. (Functions I i has_derivative (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x) (at x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i x.\n       (Functions I i has_derivative\n        (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x)\n        (at x)", "using good_interp"], ["proof (prove)\nusing this:\n  is_interp I\n\ngoal (1 subgoal):\n 1. \\<And>i x.\n       (Functions I i has_derivative\n        (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x)\n        (at x)", "unfolding is_interp_def"], ["proof (prove)\nusing this:\n  \\<forall>x i.\n     (Functions I i has_derivative FunctionFrechet I i x) (at x) \\<and>\n     continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet I i x))\n\ngoal (1 subgoal):\n 1. \\<And>i x.\n       (Functions I i has_derivative\n        (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x)\n        (at x)", "by auto"], ["proof (state)\nthis:\n  (Functions I ?i6 has_derivative\n   (THE f'. \\<forall>x. (Functions I ?i6 has_derivative f' x) (at x)) ?x6)\n   (at ?x6)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have chain :  \n    \"\\<And>f f' g g' x s.\n      (f has_derivative f') (at x within s) \\<Longrightarrow>\n      (g has_derivative g') (at (f x) within f ` s) \\<Longrightarrow> (g \\<circ> f has_derivative g' \\<circ> f') (at x within s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f f' g g' x s.\n       \\<lbrakk>(f has_derivative f') (at x within s);\n        (g has_derivative g') (at (f x) within f ` s)\\<rbrakk>\n       \\<Longrightarrow> (g \\<circ> f has_derivative g' \\<circ> f')\n                          (at x within s)", "by(auto intro: derivative_intros)"], ["proof (state)\nthis:\n  \\<lbrakk>(?f6 has_derivative ?f'6) (at ?x6 within ?s6);\n   (?g6 has_derivative ?g'6) (at (?f6 ?x6) within ?f6 ` ?s6)\\<rbrakk>\n  \\<Longrightarrow> (?g6 \\<circ> ?f6 has_derivative ?g'6 \\<circ> ?f'6)\n                     (at ?x6 within ?s6)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have sol1:\"(sol solves_ode (\\<lambda>_. ODE_sem I (OVar vid1))) {0..t} {x. mk_v I (OVar vid1) (sol 0, b) x \\<in> fml_sem I (Prop vid1 empty)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sol solves_ode (\\<lambda>_. ODE_sem I (OVar vid1))) {0..t}\n     {x. mk_v I (OVar vid1) (sol 0, b) x\n         \\<in> fml_sem I ($\\<phi> vid1 local.empty)}", "using sol"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (local.empty i) (mk_v I (OVar vid1) (sol 0, b) x))}\n\ngoal (1 subgoal):\n 1. (sol solves_ode (\\<lambda>_. ODE_sem I (OVar vid1))) {0..t}\n     {x. mk_v I (OVar vid1) (sol 0, b) x\n         \\<in> fml_sem I ($\\<phi> vid1 local.empty)}", "unfolding p1_def singleton_def empty_def"], ["proof (prove)\nusing this:\n  (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i. dterm_sem I (Const 0) (mk_v I (OVar vid1) (sol 0, b) x))}\n\ngoal (1 subgoal):\n 1. (sol solves_ode (\\<lambda>_. ODE_sem I (OVar vid1))) {0..t}\n     {x. mk_v I (OVar vid1) (sol 0, b) x\n         \\<in> fml_sem I ($\\<phi> vid1 (\\<lambda>i. Const 0))}", "by auto"], ["proof (state)\nthis:\n  (sol solves_ode (\\<lambda>_. ODE_sem I (OVar vid1))) {0..t}\n   {x. mk_v I (OVar vid1) (sol 0, b) x\n       \\<in> fml_sem I ($\\<phi> vid1 local.empty)}\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have FVTsub1:\"vid1 \\<in> ODE_vars I (OVar vid1) \\<Longrightarrow> FVT ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) \\<subseteq> semBV I ((OVar vid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vid1 \\<in> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    FVT ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n    \\<subseteq> semBV I (OVar vid1)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>vid1 \\<in> ODEBV I vid1;\n        x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n        x \\<notin> Inr ` ODEBV I vid1\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Inl ` ODEBV I vid1", "subgoal for x xa"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vid1 \\<in> ODEBV I vid1;\n     x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n     x \\<notin> Inr ` ODEBV I vid1\\<rbrakk>\n    \\<Longrightarrow> x \\<in> Inl ` ODEBV I vid1", "apply(cases \"xa = vid1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>vid1 \\<in> ODEBV I vid1;\n     x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n     x \\<notin> Inr ` ODEBV I vid1; xa = vid1\\<rbrakk>\n    \\<Longrightarrow> x \\<in> Inl ` ODEBV I vid1\n 2. \\<lbrakk>vid1 \\<in> ODEBV I vid1;\n     x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n     x \\<notin> Inr ` ODEBV I vid1; xa \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> x \\<in> Inl ` ODEBV I vid1", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  vid1 \\<in> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  FVT ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n  \\<subseteq> semBV I (OVar vid1)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have FVTsub2:\"vid1 \\<in> ODE_vars I (OVar vid1) \\<Longrightarrow> FVT ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) \\<subseteq> semBV I ((OVar vid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vid1 \\<in> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    FVT ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n    \\<subseteq> semBV I (OVar vid1)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>vid1 \\<in> ODEBV I vid1;\n        x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n        x \\<notin> Inr ` ODEBV I vid1\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Inl ` ODEBV I vid1", "subgoal for x xa"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vid1 \\<in> ODEBV I vid1;\n     x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n     x \\<notin> Inr ` ODEBV I vid1\\<rbrakk>\n    \\<Longrightarrow> x \\<in> Inl ` ODEBV I vid1", "apply(cases \"xa = vid1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>vid1 \\<in> ODEBV I vid1;\n     x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n     x \\<notin> Inr ` ODEBV I vid1; xa = vid1\\<rbrakk>\n    \\<Longrightarrow> x \\<in> Inl ` ODEBV I vid1\n 2. \\<lbrakk>vid1 \\<in> ODEBV I vid1;\n     x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n     x \\<notin> Inr ` ODEBV I vid1; xa \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> x \\<in> Inl ` ODEBV I vid1", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  vid1 \\<in> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  FVT ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n  \\<subseteq> semBV I (OVar vid1)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have osafe:\"osafe (OVar vid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. osafe (OVar vid1)", "by auto"], ["proof (state)\nthis:\n  osafe (OVar vid1)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have deriv1:\"\\<And>s. vid1 \\<in> ODE_vars I (OVar vid1) \\<Longrightarrow> s \\<in> ?int \\<Longrightarrow> (?f1 has_derivative (?f1' s)) (at s within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>t.\n                              sterm_sem I (f1 fid2 vid1)\n                               (fst (mk_v I (OVar vid1) (sol 0, b)\n(sol t)))) has_derivative\n                          (\\<lambda>t'.\n                              t' *\n                              frechet I (f1 fid2 vid1)\n                               (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                               (snd (mk_v I (OVar vid1) (sol 0, b)\n(sol s)))))\n                          (at s within {0..t})", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           sterm_sem I (f1 fid2 vid1)\n                            (fst (mk_v I (OVar vid1) (sol 0, b)\n                                   (sol t)))) has_derivative\n                       (\\<lambda>t'.\n                           t' *\n                           frechet I (f1 fid2 vid1)\n                            (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                            (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                       (at s within {0..t})", "using  rift_in_space_time[OF good_interp free1 osafe sol1 FVTsub1, of s]"], ["proof (prove)\nusing this:\n  \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t.\n                         sterm_sem I\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (fst (mk_v I (OVar vid1) (sol 0, b)\n                                 (sol t)))) has_derivative\n                     (\\<lambda>t'.\n                         t' *\n                         frechet I\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                     (at s within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           sterm_sem I (f1 fid2 vid1)\n                            (fst (mk_v I (OVar vid1) (sol 0, b)\n                                   (sol t)))) has_derivative\n                       (\\<lambda>t'.\n                           t' *\n                           frechet I (f1 fid2 vid1)\n                            (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                            (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                       (at s within {0..t})", "unfolding f1_def expand_singleton directional_derivative_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t.\n                         sterm_sem I\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (fst (mk_v I (OVar vid1) (sol 0, b)\n                                 (sol t)))) has_derivative\n                     (\\<lambda>t'.\n                         t' *\n                         frechet I\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                     (at s within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           sterm_sem I\n                            ($f fid2\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (fst (mk_v I (OVar vid1) (sol 0, b)\n                                   (sol t)))) has_derivative\n                       (\\<lambda>t'.\n                           t' *\n                           frechet I\n                            ($f fid2\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                            (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                       (at s within {0..t})", "by blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); ?s8 \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t.\n                         sterm_sem I (f1 fid2 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b)\n                                 (sol t)))) has_derivative\n                     (\\<lambda>t'.\n                         t' *\n                         frechet I (f1 fid2 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))))\n                     (at ?s8 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have deriv2:\"\\<And>s. vid1 \\<in> ODE_vars I (OVar vid1) \\<Longrightarrow> s \\<in> ?int \\<Longrightarrow> (?f2 has_derivative (?f2' s)) (at s within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>t.\n                              sterm_sem I (f1 fid1 vid1)\n                               (fst (mk_v I (OVar vid1) (sol 0, b)\n(sol t)))) has_derivative\n                          (\\<lambda>t'.\n                              t' *\n                              frechet I (f1 fid1 vid1)\n                               (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                               (snd (mk_v I (OVar vid1) (sol 0, b)\n(sol s)))))\n                          (at s within {0..t})", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           sterm_sem I (f1 fid1 vid1)\n                            (fst (mk_v I (OVar vid1) (sol 0, b)\n                                   (sol t)))) has_derivative\n                       (\\<lambda>t'.\n                           t' *\n                           frechet I (f1 fid1 vid1)\n                            (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                            (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                       (at s within {0..t})", "using rift_in_space_time[OF good_interp free2 osafe sol1 FVTsub2, of s]"], ["proof (prove)\nusing this:\n  \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t.\n                         sterm_sem I\n                          ($f fid1\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (fst (mk_v I (OVar vid1) (sol 0, b)\n                                 (sol t)))) has_derivative\n                     (\\<lambda>t'.\n                         t' *\n                         frechet I\n                          ($f fid1\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                     (at s within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           sterm_sem I (f1 fid1 vid1)\n                            (fst (mk_v I (OVar vid1) (sol 0, b)\n                                   (sol t)))) has_derivative\n                       (\\<lambda>t'.\n                           t' *\n                           frechet I (f1 fid1 vid1)\n                            (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                            (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                       (at s within {0..t})", "unfolding f1_def expand_singleton directional_derivative_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t.\n                         sterm_sem I\n                          ($f fid1\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (fst (mk_v I (OVar vid1) (sol 0, b)\n                                 (sol t)))) has_derivative\n                     (\\<lambda>t'.\n                         t' *\n                         frechet I\n                          ($f fid1\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                     (at s within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           sterm_sem I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (fst (mk_v I (OVar vid1) (sol 0, b)\n                                   (sol t)))) has_derivative\n                       (\\<lambda>t'.\n                           t' *\n                           frechet I\n                            ($f fid1\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                            (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                       (at s within {0..t})", "by blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); ?s8 \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t.\n                         sterm_sem I (f1 fid1 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b)\n                                 (sol t)))) has_derivative\n                     (\\<lambda>t'.\n                         t' *\n                         frechet I (f1 fid1 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))))\n                     (at ?s8 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have leq:\"\\<And>s . s \\<in> ?int \\<Longrightarrow> ?f1' s 1 \\<le> ?f2' s 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       1 *\n       frechet I (f1 fid2 vid1)\n        (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n        (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n       \\<le> 1 *\n             frechet I (f1 fid1 vid1)\n              (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n              (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    1 *\n    frechet I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n     (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n    \\<le> 1 *\n          frechet I (f1 fid1 vid1)\n           (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n           (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))", "using box'[of s]"], ["proof (prove)\nusing this:\n  s \\<in> {0..t} \\<Longrightarrow>\n  directional_derivative I (f1 fid2 vid1)\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n  \\<le> directional_derivative I (f1 fid1 vid1)\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)),\n          snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    1 *\n    frechet I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n     (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n    \\<le> 1 *\n          frechet I (f1 fid1 vid1)\n           (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n           (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))", "by (simp add: directional_derivative_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?s8 \\<in> {0..t} \\<Longrightarrow>\n  1 *\n  frechet I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n   (snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n  \\<le> 1 *\n        frechet I (f1 fid1 vid1)\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n         (snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have preserve_agree1:\"vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow> VSagree (sol 0) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) {vid1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    VSagree (sol 0) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) {vid1}", "using mk_v_agree[of I \"OVar vid1\" \"(sol 0, b)\" \"sol t\"]"], ["proof (prove)\nusing this:\n  Vagree (mk_v I (OVar vid1) (sol 0, b) (sol t)) (sol 0, b)\n   (- semBV I (OVar vid1)) \\<and>\n  Vagree (mk_v I (OVar vid1) (sol 0, b) (sol t))\n   (mk_xode I (OVar vid1) (sol t)) (semBV I (OVar vid1))\n\ngoal (1 subgoal):\n 1. vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    VSagree (sol 0) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) {vid1}", "unfolding Vagree_def VSagree_def"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i \\<in> - semBV I (OVar vid1) \\<longrightarrow>\n       fst (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i =\n       fst (sol 0, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i \\<in> - semBV I (OVar vid1) \\<longrightarrow>\n       snd (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i =\n       snd (sol 0, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i \\<in> semBV I (OVar vid1) \\<longrightarrow>\n      fst (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i =\n      fst (mk_xode I (OVar vid1) (sol t)) $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> semBV I (OVar vid1) \\<longrightarrow>\n      snd (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i =\n      snd (mk_xode I (OVar vid1) (sol t)) $ i)\n\ngoal (1 subgoal):\n 1. vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    \\<forall>i\\<in>{vid1}.\n       sol 0 $ i = fst (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i", "by auto"], ["proof (state)\nthis:\n  vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  VSagree (sol 0) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) {vid1}\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have preserve_coincide1:\n    \"vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow> \n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n   = sterm_sem I (f1 fid2 vid1) (sol 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    sterm_sem I (f1 fid2 vid1)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n    sterm_sem I (f1 fid2 vid1) (sol 0)", "using coincidence_sterm[of \"(sol 0, b)\" \"(mk_v I (OVar vid1) (sol 0, b) (sol t))\" \"f1 fid2 vid1\" I]\n    preserve_agree1"], ["proof (prove)\nusing this:\n  Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n   (FVT (f1 fid2 vid1)) \\<Longrightarrow>\n  sterm_sem I (f1 fid2 vid1) (fst (sol 0, b)) =\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  VSagree (sol 0) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) {vid1}\n\ngoal (1 subgoal):\n 1. vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    sterm_sem I (f1 fid2 vid1)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n    sterm_sem I (f1 fid2 vid1) (sol 0)", "unfolding VSagree_def Vagree_def f1_def"], ["proof (prove)\nusing this:\n  (\\<forall>i.\n      Inl i \\<in> FVT ($f fid2 (singleton (Var vid1))) \\<longrightarrow>\n      fst (sol 0, b) $ i =\n      fst (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> FVT ($f fid2 (singleton (Var vid1))) \\<longrightarrow>\n      snd (sol 0, b) $ i =\n      snd (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i) \\<Longrightarrow>\n  sterm_sem I ($f fid2 (singleton (Var vid1))) (fst (sol 0, b)) =\n  sterm_sem I ($f fid2 (singleton (Var vid1)))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  \\<forall>i\\<in>{vid1}.\n     sol 0 $ i = fst (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i\n\ngoal (1 subgoal):\n 1. vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    sterm_sem I ($f fid2 (singleton (Var vid1)))\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n    sterm_sem I ($f fid2 (singleton (Var vid1))) (sol 0)", "by auto"], ["proof (state)\nthis:\n  vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  sterm_sem I (f1 fid2 vid1) (sol 0)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have preserve_coincide2:\n    \"vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow> \n    sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n   = sterm_sem I (f1 fid1 vid1) (sol 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    sterm_sem I (f1 fid1 vid1)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n    sterm_sem I (f1 fid1 vid1) (sol 0)", "using coincidence_sterm[of \"(sol 0, b)\" \"(mk_v I (OVar vid1) (sol 0, b) (sol t))\" \"f1 fid1 vid1\" I]\n    preserve_agree1"], ["proof (prove)\nusing this:\n  Vagree (sol 0, b) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n   (FVT (f1 fid1 vid1)) \\<Longrightarrow>\n  sterm_sem I (f1 fid1 vid1) (fst (sol 0, b)) =\n  sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  VSagree (sol 0) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) {vid1}\n\ngoal (1 subgoal):\n 1. vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    sterm_sem I (f1 fid1 vid1)\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n    sterm_sem I (f1 fid1 vid1) (sol 0)", "unfolding VSagree_def Vagree_def f1_def"], ["proof (prove)\nusing this:\n  (\\<forall>i.\n      Inl i \\<in> FVT ($f fid1 (singleton (Var vid1))) \\<longrightarrow>\n      fst (sol 0, b) $ i =\n      fst (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> FVT ($f fid1 (singleton (Var vid1))) \\<longrightarrow>\n      snd (sol 0, b) $ i =\n      snd (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i) \\<Longrightarrow>\n  sterm_sem I ($f fid1 (singleton (Var vid1))) (fst (sol 0, b)) =\n  sterm_sem I ($f fid1 (singleton (Var vid1)))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  \\<forall>i\\<in>{vid1}.\n     sol 0 $ i = fst (mk_v I (OVar vid1) (sol 0, b) (sol t)) $ i\n\ngoal (1 subgoal):\n 1. vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n    sterm_sem I ($f fid1 (singleton (Var vid1)))\n     (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n    sterm_sem I ($f fid1 (singleton (Var vid1))) (sol 0)", "by auto"], ["proof (state)\nthis:\n  vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  sterm_sem I (f1 fid1 vid1) (sol 0)\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "have \"?f1 t < ?f2 t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n    < sterm_sem I (f1 fid1 vid1)\n       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "apply(cases \"t = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. t = 0 \\<Longrightarrow>\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n    < sterm_sem I (f1 fid1 vid1)\n       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n 2. t \\<noteq> 0 \\<Longrightarrow>\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n    < sterm_sem I (f1 fid1 vid1)\n       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. t = 0 \\<Longrightarrow>\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n    < sterm_sem I (f1 fid1 vid1)\n       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "using geq0' sem_eq1' sem_eq2'"], ["proof (prove)\nusing this:\n  sterm_sem I (f1 fid2 vid1) (sol 0) < sterm_sem I (f1 fid1 vid1) (sol 0)\n  sterm_sem I (f1 fid2 vid1) (sol 0) =\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n  sterm_sem I (f1 fid1 vid1) (sol 0) =\n  sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (1 subgoal):\n 1. t = 0 \\<Longrightarrow>\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n    < sterm_sem I (f1 fid1 vid1)\n       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<noteq> 0 \\<Longrightarrow>\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n    < sterm_sem I (f1 fid1 vid1)\n       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<noteq> 0 \\<Longrightarrow>\n    sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n    < sterm_sem I (f1 fid1 vid1)\n       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "apply(cases \"vid1 \\<in> ODE_vars I (OVar vid1)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n                      < sterm_sem I (f1 fid1 vid1)\n                         (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n 2. \\<lbrakk>t \\<noteq> 0; vid1 \\<notin> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n                      < sterm_sem I (f1 fid1 vid1)\n                         (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n                      < sterm_sem I (f1 fid1 vid1)\n                         (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "apply (rule MVT'_gr[OF deriv2 deriv1, of t])"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> vid1 \\<in> ODE_vars I (OVar vid1)\n 2. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> s \\<in> {0..t}\n 3. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> vid1 \\<in> ODE_vars I (OVar vid1)\n 4. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> s \\<in> {0..t}\n 5. \\<And>x.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        x \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> t *\n                         frechet I (f1 fid2 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                         \\<le> t *\n                               frechet I (f1 fid1 vid1)\n                                (fst (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n                                (snd (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n 6. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n                      < sterm_sem I (f1 fid1 vid1)\n                         (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n 7. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t \\<and> t \\<le> t\n 8. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n     s_ \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> vid1 \\<in> ODE_vars I (OVar vid1)", "by auto"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> s \\<in> {0..t}\n 2. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> vid1 \\<in> ODE_vars I (OVar vid1)\n 3. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> s \\<in> {0..t}\n 4. \\<And>x.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        x \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> t *\n                         frechet I (f1 fid2 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                         \\<le> t *\n                               frechet I (f1 fid1 vid1)\n                                (fst (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n                                (snd (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n 5. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n                      < sterm_sem I (f1 fid1 vid1)\n                         (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n 6. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t \\<and> t \\<le> t\n 7. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n     s_ \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> s_ \\<in> {0..t}", "by auto"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> vid1 \\<in> ODE_vars I (OVar vid1)\n 2. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> s \\<in> {0..t}\n 3. \\<And>x.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        x \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> t *\n                         frechet I (f1 fid2 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                         \\<le> t *\n                               frechet I (f1 fid1 vid1)\n                                (fst (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n                                (snd (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n 4. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n                      < sterm_sem I (f1 fid1 vid1)\n                         (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n 5. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t \\<and> t \\<le> t\n 6. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n     s \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> vid1 \\<in> ODE_vars I (OVar vid1)", "using deriv2[of s]"], ["proof (prove)\nusing this:\n  \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t.\n                         sterm_sem I (f1 fid1 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b)\n                                 (sol t)))) has_derivative\n                     (\\<lambda>t'.\n                         t' *\n                         frechet I (f1 fid1 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                     (at s within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n     s \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> vid1 \\<in> ODE_vars I (OVar vid1)", "using leq"], ["proof (prove)\nusing this:\n  \\<lbrakk>vid1 \\<in> ODE_vars I (OVar vid1); s \\<in> {0..t}\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t.\n                         sterm_sem I (f1 fid1 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b)\n                                 (sol t)))) has_derivative\n                     (\\<lambda>t'.\n                         t' *\n                         frechet I (f1 fid1 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol s)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol s)))))\n                     (at s within {0..t})\n  ?s8 \\<in> {0..t} \\<Longrightarrow>\n  1 *\n  frechet I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n   (snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n  \\<le> 1 *\n        frechet I (f1 fid1 vid1)\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n         (snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n     s \\<in> {0..t}\\<rbrakk>\n    \\<Longrightarrow> vid1 \\<in> ODE_vars I (OVar vid1)", "by auto"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> s \\<in> {0..t}\n 2. \\<And>x.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        x \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> t *\n                         frechet I (f1 fid2 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                         \\<le> t *\n                               frechet I (f1 fid1 vid1)\n                                (fst (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n                                (snd (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n 3. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n                      < sterm_sem I (f1 fid1 vid1)\n                         (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n 4. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t \\<and> t \\<le> t\n 5. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t", "using t leq geq0' sem_eq1' sem_eq2'"], ["proof (prove)\nusing this:\n  0 \\<le> t\n  ?s8 \\<in> {0..t} \\<Longrightarrow>\n  1 *\n  frechet I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n   (snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n  \\<le> 1 *\n        frechet I (f1 fid1 vid1)\n         (fst (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n         (snd (mk_v I (OVar vid1) (sol 0, b) (sol ?s8)))\n  sterm_sem I (f1 fid2 vid1) (sol 0) < sterm_sem I (f1 fid1 vid1) (sol 0)\n  sterm_sem I (f1 fid2 vid1) (sol 0) =\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n  sterm_sem I (f1 fid1 vid1) (sol 0) =\n  sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n\ngoal (5 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        s \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> s \\<in> {0..t}\n 2. \\<And>x.\n       \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1);\n        x \\<in> {0..t}\\<rbrakk>\n       \\<Longrightarrow> t *\n                         frechet I (f1 fid2 vid1)\n                          (fst (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                          (snd (mk_v I (OVar vid1) (sol 0, b) (sol x)))\n                         \\<le> t *\n                               frechet I (f1 fid1 vid1)\n                                (fst (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n                                (snd (mk_v I (OVar vid1) (sol 0, b)\n (sol x)))\n 3. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n                      < sterm_sem I (f1 fid1 vid1)\n                         (fst (mk_v I (OVar vid1) (sol 0, b) (sol 0)))\n 4. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t \\<and> t \\<le> t\n 5. \\<lbrakk>t \\<noteq> 0; vid1 \\<in> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> 0 < t", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<notin> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n                      < sterm_sem I (f1 fid1 vid1)\n                         (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<notin> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n                      < sterm_sem I (f1 fid1 vid1)\n                         (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "using geq0"], ["proof (prove)\nusing this:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b)\n  < dterm_sem I (f1 fid1 vid1) (sol 0, b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<notin> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n                      < sterm_sem I (f1 fid1 vid1)\n                         (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "using dterm_sterm_dfree[OF free1, of I \"sol 0\" \"b\"]"], ["proof (prove)\nusing this:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b)\n  < dterm_sem I (f1 fid1 vid1) (sol 0, b)\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<notin> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n                      < sterm_sem I (f1 fid1 vid1)\n                         (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "using dterm_sterm_dfree[OF free2, of I \"sol 0\" \"b\"]"], ["proof (prove)\nusing this:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b)\n  < dterm_sem I (f1 fid1 vid1) (sol 0, b)\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n  sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<notin> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n                      < sterm_sem I (f1 fid1 vid1)\n                         (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "using preserve_coincide1 preserve_coincide2"], ["proof (prove)\nusing this:\n  dterm_sem I (f1 fid2 vid1) (sol 0, b)\n  < dterm_sem I (f1 fid1 vid1) (sol 0, b)\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n  sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0) =\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (sol 0, b)\n  vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  sterm_sem I (f1 fid2 vid1) (sol 0)\n  vid1 \\<notin> ODE_vars I (OVar vid1) \\<Longrightarrow>\n  sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  sterm_sem I (f1 fid1 vid1) (sol 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> 0; vid1 \\<notin> ODE_vars I (OVar vid1)\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I (f1 fid2 vid1)\n                       (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n                      < sterm_sem I (f1 fid1 vid1)\n                         (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "by(simp add: f1_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  < sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n\ngoal (1 subgoal):\n 1. \\<And>I b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        (aa, ba) = mk_v I (OVar vid1) (sol 0, b) (sol t); 0 \\<le> t;\n        (sol solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (local.empty i)\n                   (mk_v I (OVar vid1) (sol 0, b) x))};\n        \\<forall>a ba.\n           (\\<exists>sola.\n               sol 0 = sola 0 \\<and>\n               (\\<exists>t.\n                   (a, ba) = mk_v I (OVar vid1) (sola 0, b) (sola t) \\<and>\n                   0 \\<le> t \\<and>\n                   (sola solves_ode (\\<lambda>a. ODEs I vid1)) {0..t}\n                    {x. Predicates I vid1\n                         (\\<chi>i.\n                             dterm_sem I (local.empty i)\n                              (mk_v I (OVar vid1) (sola 0, b)\n                                x))})) \\<longrightarrow>\n           directional_derivative I (f1 fid2 vid1) (a, ba)\n           \\<le> directional_derivative I (f1 fid1 vid1) (a, ba);\n        dterm_sem I (f1 fid2 vid1) (sol 0, b)\n        < dterm_sem I (f1 fid1 vid1) (sol 0, b)\\<rbrakk>\n       \\<Longrightarrow> dterm_sem I (f1 fid2 vid1)\n                          (mk_v I (OVar vid1) (sol 0, b) (sol t))\n                         < dterm_sem I (f1 fid1 vid1)\n                            (mk_v I (OVar vid1) (sol 0, b) (sol t))", "then"], ["proof (chain)\npicking this:\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  < sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))", "show \"dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n     < dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\""], ["proof (prove)\nusing this:\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  < sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n    < dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))", "using t \n    dterm_sterm_dfree[OF free2, of I \"?\\<phi>s t\" \"snd (?\\<phi> t)\"]\n    dterm_sterm_dfree[OF free1, of I \"?\\<phi>s t\" \"snd (?\\<phi> t)\"]"], ["proof (prove)\nusing this:\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  < sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  0 \\<le> t\n  sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n    < dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))", "using geq0 f1_def"], ["proof (prove)\nusing this:\n  sterm_sem I (f1 fid2 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  < sterm_sem I (f1 fid1 vid1) (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  0 \\<le> t\n  sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  dterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  sterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t))) =\n  dterm_sem I ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (fst (mk_v I (OVar vid1) (sol 0, b) (sol t)),\n    snd (mk_v I (OVar vid1) (sol 0, b) (sol t)))\n  dterm_sem I (f1 fid2 vid1) (sol 0, b)\n  < dterm_sem I (f1 fid1 vid1) (sol 0, b)\n  f1 ?f ?x = $f ?f (singleton (Var ?x))\n\ngoal (1 subgoal):\n 1. dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n    < dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))", "by (simp add: f1_def)"], ["proof (state)\nthis:\n  dterm_sem I (f1 fid2 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n  < dterm_sem I (f1 fid1 vid1) (mk_v I (OVar vid1) (sol 0, b) (sol t))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma DG_valid:\"valid DGaxiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid DGaxiom", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. valid DGaxiom", "have osafe:\"osafe (OSing vid1 (f1 fid1 vid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. osafe (OSing vid1 (f1 fid1 vid1))", "by(auto simp add: osafe_Sing dfree_Fun dfree_Const f1_def expand_singleton)"], ["proof (state)\nthis:\n  osafe (OSing vid1 (f1 fid1 vid1))\n\ngoal (1 subgoal):\n 1. valid DGaxiom", "have fsafe:\"fsafe (p1 vid1 vid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fsafe (p1 vid1 vid1)", "by(auto simp add: p1_def dfree_Const)"], ["proof (state)\nthis:\n  fsafe (p1 vid1 vid1)\n\ngoal (1 subgoal):\n 1. valid DGaxiom", "have osafe2:\"osafe (OProd (OSing vid1 (f1 fid1 vid1)) (OSing vid2 (Plus (Times (f1 fid2 vid1) (trm.Var vid2)) (f1 fid3 vid1))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. osafe\n     (OProd (OSing vid1 (f1 fid1 vid1))\n       (OSing vid2 (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))))", "by(auto simp add: f1_def expand_singleton osafe.intros dfree.intros vne12)"], ["proof (state)\nthis:\n  osafe\n   (OProd (OSing vid1 (f1 fid1 vid1))\n     (OSing vid2 (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))))\n\ngoal (1 subgoal):\n 1. valid DGaxiom", "note sem = ode_alt_sem[OF osafe fsafe]"], ["proof (state)\nthis:\n  prog_sem ?I (EvolveODE (OSing vid1 (f1 fid1 vid1)) (p1 vid1 vid1)) =\n  {(\\<nu>, mk_v ?I (OSing vid1 (f1 fid1 vid1)) \\<nu> (sol t)) |\\<nu> sol t.\n   0 \\<le> t \\<and>\n   (sol solves_ode (\\<lambda>_. ODE_sem ?I (OSing vid1 (f1 fid1 vid1))))\n    {0..t}\n    {x. mk_v ?I (OSing vid1 (f1 fid1 vid1)) \\<nu> x\n        \\<in> fml_sem ?I (p1 vid1 vid1)} \\<and>\n   VSagree (sol 0) (fst \\<nu>)\n    {x |x.\n     Inl x\n     \\<in> FVP (EvolveODE (OSing vid1 (f1 fid1 vid1)) (p1 vid1 vid1))}}\n\ngoal (1 subgoal):\n 1. valid DGaxiom", "note sem2 = ode_alt_sem[OF osafe2 fsafe]"], ["proof (state)\nthis:\n  prog_sem ?I\n   (EvolveODE\n     (OProd (OSing vid1 (f1 fid1 vid1))\n       (OSing vid2 (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))))\n     (p1 vid1 vid1)) =\n  {(\\<nu>,\n    mk_v ?I\n     (OProd (OSing vid1 (f1 fid1 vid1))\n       (OSing vid2 (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))))\n     \\<nu> (sol t)) |\n   \\<nu> sol t.\n   0 \\<le> t \\<and>\n   (sol solves_ode\n    (\\<lambda>_.\n        ODE_sem ?I\n         (OProd (OSing vid1 (f1 fid1 vid1))\n           (OSing vid2\n             (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))))))\n    {0..t}\n    {x. mk_v ?I\n         (OProd (OSing vid1 (f1 fid1 vid1))\n           (OSing vid2\n             (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))))\n         \\<nu> x\n        \\<in> fml_sem ?I (p1 vid1 vid1)} \\<and>\n   VSagree (sol 0) (fst \\<nu>)\n    {x |x.\n     Inl x\n     \\<in> FVP (EvolveODE\n                 (OProd (OSing vid1 (f1 fid1 vid1))\n                   (OSing vid2\n                     (Plus (Times (f1 fid2 vid1) (Var vid2))\n                       (f1 fid3 vid1))))\n                 (p1 vid1 vid1))}}\n\ngoal (1 subgoal):\n 1. valid DGaxiom", "have p2safe:\"fsafe (p1 vid2 vid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fsafe (p1 vid2 vid1)", "by(auto simp add: p1_def dfree_Const)"], ["proof (state)\nthis:\n  fsafe (p1 vid2 vid1)\n\ngoal (1 subgoal):\n 1. valid DGaxiom", "show \"valid DGaxiom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid DGaxiom", "apply(auto simp  del: prog_sem.simps(8) simp add: DGaxiom_def valid_def sem sem2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I a b.\n       \\<lbrakk>is_interp I;\n        \\<forall>aa ba.\n           (\\<exists>sol t.\n               (aa, ba) =\n               mk_v I (OSing vid1 (f1 fid1 vid1)) (a, b) (sol t) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>a b.\n                    \\<chi>i.\n                       if i = vid1 then sterm_sem I (f1 fid1 vid1) b\n                       else 0))\n                {0..t}\n                {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (a, b) x\n                    \\<in> fml_sem I (p1 vid1 vid1)} \\<and>\n               VSagree (sol 0) a\n                {uu_.\n                 uu_ = vid1 \\<or>\n                 Inl uu_\n                 \\<in> Inl ` {x. Inl x \\<in> FVT (f1 fid1 vid1)} \\<or>\n                 Inl uu_ \\<in> FVF (p1 vid1 vid1)}) \\<longrightarrow>\n           (aa, ba) \\<in> fml_sem I (p1 vid2 vid1)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r.\n                            \\<forall>aa ba.\n                               (\\<exists>sol t.\n                                   (aa, ba) =\n                                   mk_v I\n                                    (OProd (OSing vid1 (f1 fid1 vid1))\n(OSing vid2 (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))))\n                                    (\\<chi>y.\n  if vid2 = y then r else fst (a, b) $ y,\n                                     b)\n                                    (sol t) \\<and>\n                                   0 \\<le> t \\<and>\n                                   (sol solves_ode\n                                    (\\<lambda>a b.\n  (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n  (\\<chi>i.\n      if i = vid2\n      then sterm_sem I\n            (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1)) b\n      else 0)))\n                                    {0..t}\n                                    {x. mk_v I\n   (OProd (OSing vid1 (f1 fid1 vid1))\n     (OSing vid2 (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))))\n   (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) x\n  \\<in> fml_sem I (p1 vid1 vid1)} \\<and>\n                                   VSagree (sol 0)\n                                    (\\<chi>y.\n  if vid2 = y then r else fst (a, b) $ y)\n                                    {uu_.\n                                     uu_ = vid2 \\<or>\n                                     uu_ = vid1 \\<or>\n                                     uu_ = vid2 \\<or>\n                                     uu_ = vid1 \\<or>\n                                     Inl uu_\n                                     \\<in> Inl `\n     ({x. Inl x \\<in> FVT (f1 fid1 vid1)} \\<union>\n      {x. x = vid2 \\<or>\n          Inl x \\<in> FVT (f1 fid2 vid1) \\<or>\n          Inl x \\<in> FVT (f1 fid3 vid1)}) \\<or>\n                                     Inl uu_\n                                     \\<in> FVF\n      (p1 vid1 vid1)}) \\<longrightarrow>\n                               (aa, ba) \\<in> fml_sem I (p1 vid2 vid1)\n 2. \\<And>I a b r aa ba sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>aa ba.\n           (\\<exists>sol t.\n               (aa, ba) =\n               mk_v I\n                (OProd (OSing vid1 (f1 fid1 vid1))\n                  (OSing vid2\n                    (Plus (Times (f1 fid2 vid1) (Var vid2))\n                      (f1 fid3 vid1))))\n                (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n                (sol t) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>a b.\n                    (\\<chi>i.\n                        if i = vid1 then sterm_sem I (f1 fid1 vid1) b\n                        else 0) +\n                    (\\<chi>i.\n                        if i = vid2\n                        then sterm_sem I\n                              (Plus (Times (f1 fid2 vid1) (Var vid2))\n                                (f1 fid3 vid1))\n                              b\n                        else 0)))\n                {0..t}\n                {x. mk_v I\n                     (OProd (OSing vid1 (f1 fid1 vid1))\n                       (OSing vid2\n                         (Plus (Times (f1 fid2 vid1) (Var vid2))\n                           (f1 fid3 vid1))))\n                     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) x\n                    \\<in> fml_sem I (p1 vid1 vid1)} \\<and>\n               VSagree (sol 0)\n                (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n                {uu_.\n                 uu_ = vid2 \\<or>\n                 uu_ = vid1 \\<or>\n                 uu_ = vid2 \\<or>\n                 uu_ = vid1 \\<or>\n                 Inl uu_\n                 \\<in> Inl `\n                       ({x. Inl x \\<in> FVT (f1 fid1 vid1)} \\<union>\n                        {x. x = vid2 \\<or>\n                            Inl x \\<in> FVT (f1 fid2 vid1) \\<or>\n                            Inl x \\<in> FVT (f1 fid3 vid1)}) \\<or>\n                 Inl uu_ \\<in> FVF (p1 vid1 vid1)}) \\<longrightarrow>\n           (aa, ba) \\<in> fml_sem I (p1 vid2 vid1);\n        (aa, ba) = mk_v I (OSing vid1 (f1 fid1 vid1)) (a, b) (sol t);\n        0 \\<le> t;\n        (sol solves_ode\n         (\\<lambda>a b.\n             \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n         {0..t}\n         {x. mk_v I (OSing vid1 (f1 fid1 vid1)) (a, b) x\n             \\<in> fml_sem I (p1 vid1 vid1)};\n        VSagree (sol 0) a\n         {uu_.\n          uu_ = vid1 \\<or>\n          Inl uu_ \\<in> Inl ` {x. Inl x \\<in> FVT (f1 fid1 vid1)} \\<or>\n          Inl uu_ \\<in> FVF (p1 vid1 vid1)}\\<rbrakk>\n       \\<Longrightarrow> mk_v I (OSing vid1 (f1 fid1 vid1)) (a, b) (sol t)\n                         \\<in> fml_sem I (p1 vid2 vid1)", "apply(rule exI[where x=0], auto simp add: f1_def p1_def expand_singleton)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I a b aa ba sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>aa ba.\n           (\\<exists>sol t.\n               (aa, ba) =\n               mk_v I\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (a, b) (sol t) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>a b.\n                    \\<chi>i.\n                       if i = vid1 then sterm_sem I (f1 fid1 vid1) b\n                       else 0))\n                {0..t}\n                {x. Predicates I vid1\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            (a, b) x))} \\<and>\n               VSagree (sol 0) a\n                {uu_.\n                 uu_ = vid1 \\<or>\n                 Inl uu_\n                 \\<in> Inl `\n                       {x. \\<exists>xa.\n                              Inl x\n                              \\<in> FVT (if xa = vid1 then Var vid1\n   else Const 0)} \\<or>\n                 (\\<exists>x.\n                     Inl uu_\n                     \\<in> FVT (if x = vid1 then Var vid1\n                                else Const 0))}) \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                 (aa, ba));\n        (aa, ba) =\n        mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (OSing vid2\n             (Plus\n               (Times\n                 ($f fid2\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                 (Var vid2))\n               ($f fid3\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n         (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n        0 \\<le> t;\n        (sol solves_ode\n         (\\<lambda>a b.\n             (\\<chi>i.\n                 if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n             (\\<chi>i.\n                 if i = vid2\n                 then sterm_sem I\n                       (Plus (Times (f1 fid2 vid1) (Var vid2))\n                         (f1 fid3 vid1))\n                       b\n                 else 0)))\n         {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       (OSing vid2\n                         (Plus\n                           (Times\n                             ($f fid2\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0))\n                             (Var vid2))\n                           ($f fid3\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))))\n                     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n                     x))};\n        VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n         {uu_.\n          uu_ = vid2 \\<or>\n          uu_ = vid1 \\<or>\n          uu_ = vid2 \\<or>\n          uu_ = vid1 \\<or>\n          Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n          uu_ = vid1}\\<rbrakk>\n       \\<Longrightarrow> Predicates I vid2\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then Var vid1 else Const 0)\n                               (mk_v I\n                                 (OProd\n                                   (OSing vid1\n                                     ($f fid1\n (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                                   (OSing vid2\n                                     (Plus\n (Times ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (Var vid2))\n ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                                 (\\<chi>y.\n                                     if vid2 = y then 0 else fst (a, b) $ y,\n                                  b)\n                                 (sol t)))\n 2. \\<And>I a b r aa ba sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>aa ba.\n           (\\<exists>sol t.\n               (aa, ba) =\n               mk_v I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (OSing vid2\n                    (Plus\n                      (Times\n                        ($f fid2\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0))\n                        (Var vid2))\n                      ($f fid3\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))))\n                (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n                (sol t) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>a b.\n                    (\\<chi>i.\n                        if i = vid1 then sterm_sem I (f1 fid1 vid1) b\n                        else 0) +\n                    (\\<chi>i.\n                        if i = vid2\n                        then sterm_sem I\n                              (Plus (Times (f1 fid2 vid1) (Var vid2))\n                                (f1 fid3 vid1))\n                              b\n                        else 0)))\n                {0..t}\n                {x. Predicates I vid1\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (OSing vid2\n                                (Plus\n                                  (Times\n                                    ($f fid2\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                                    (Var vid2))\n                                  ($f fid3\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))))\n                            (\\<chi>y.\n                                if vid2 = y then r else fst (a, b) $ y,\n                             b)\n                            x))} \\<and>\n               VSagree (sol 0)\n                (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n                {uu_.\n                 uu_ = vid2 \\<or>\n                 uu_ = vid1 \\<or>\n                 uu_ = vid2 \\<or>\n                 uu_ = vid1 \\<or>\n                 Inl uu_\n                 \\<in> Inl `\n                       ({x. \\<exists>xa.\n                               Inl x\n                               \\<in> FVT\n(if xa = vid1 then Var vid1 else Const 0)} \\<union>\n                        {x. x = vid2 \\<or>\n                            (\\<exists>xa.\n                                Inl x\n                                \\<in> FVT\n (if xa = vid1 then Var vid1 else Const 0))}) \\<or>\n                 (\\<exists>x.\n                     Inl uu_\n                     \\<in> FVT (if x = vid1 then Var vid1\n                                else Const 0))}) \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                 (aa, ba));\n        (aa, ba) =\n        mk_v I\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (a, b) (sol t);\n        0 \\<le> t;\n        (sol solves_ode\n         (\\<lambda>a b.\n             \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n         {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OSing vid1\n                       ($f fid1\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))\n                     (a, b) x))};\n        VSagree (sol 0) a\n         {uu_.\n          uu_ = vid1 \\<or>\n          Inl uu_\n          \\<in> Inl `\n                {x. \\<exists>xa.\n                       Inl x\n                       \\<in> FVT (if xa = vid1 then Var vid1\n                                  else Const 0)} \\<or>\n          (\\<exists>x.\n              Inl uu_\n              \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n       \\<Longrightarrow> Predicates I vid2\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then Var vid1 else Const 0)\n                               (mk_v I\n                                 (OSing vid1\n                                   ($f fid1\n                                     (\\<lambda>i.\n   if i = vid1 then Var vid1 else Const 0)))\n                                 (a, b) (sol t)))", "subgoal for I a b aa ba sol t"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "assume good_interp:\"is_interp I\""], ["proof (state)\nthis:\n  is_interp I\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "assume \"\n\\<forall>aa ba. (\\<exists>sol t. (aa, ba) = mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (sol t) \\<and>\n                      0 \\<le> t \\<and>\n                      (sol solves_ode (\\<lambda>a b. \\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0)) {0..t}\n                       {x. Predicates I vid1\n                            (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n                                   (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) x))} \\<and>\n                      VSagree (sol 0) a {uu. uu = vid1 \\<or>\n                            Inl uu \\<in> Inl ` {x. \\<exists>xa. Inl x \\<in> FVT (if xa = vid1 then trm.Var vid1 else Const 0)} \\<or>\n                            (\\<exists>x. Inl uu \\<in> FVT (if x = vid1 then trm.Var vid1 else Const 0))}) \\<longrightarrow>\n             Predicates I vid2 (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) (aa, ba))\""], ["proof (state)\nthis:\n  \\<forall>aa ba.\n     (\\<exists>sol t.\n         (aa, ba) =\n         mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (sol t) \\<and>\n         0 \\<le> t \\<and>\n         (sol solves_ode\n          (\\<lambda>a b.\n              \\<chi>i.\n                 if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n          {0..t}\n          {x. Predicates I vid1\n               (\\<chi>i.\n                   dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                    (mk_v I\n                      (OSing vid1\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      (a, b) x))} \\<and>\n         VSagree (sol 0) a\n          {uu.\n           uu = vid1 \\<or>\n           Inl uu\n           \\<in> Inl `\n                 {x. \\<exists>xa.\n                        Inl x\n                        \\<in> FVT (if xa = vid1 then Var vid1\n                                   else Const 0)} \\<or>\n           (\\<exists>x.\n               Inl uu\n               \\<in> FVT (if x = vid1 then Var vid1\n                          else Const 0))}) \\<longrightarrow>\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "then"], ["proof (chain)\npicking this:\n  \\<forall>aa ba.\n     (\\<exists>sol t.\n         (aa, ba) =\n         mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (sol t) \\<and>\n         0 \\<le> t \\<and>\n         (sol solves_ode\n          (\\<lambda>a b.\n              \\<chi>i.\n                 if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n          {0..t}\n          {x. Predicates I vid1\n               (\\<chi>i.\n                   dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                    (mk_v I\n                      (OSing vid1\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      (a, b) x))} \\<and>\n         VSagree (sol 0) a\n          {uu.\n           uu = vid1 \\<or>\n           Inl uu\n           \\<in> Inl `\n                 {x. \\<exists>xa.\n                        Inl x\n                        \\<in> FVT (if xa = vid1 then Var vid1\n                                   else Const 0)} \\<or>\n           (\\<exists>x.\n               Inl uu\n               \\<in> FVT (if x = vid1 then Var vid1\n                          else Const 0))}) \\<longrightarrow>\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba))", "have \n         bigAll:\"\n\\<And>aa ba. (\\<exists>sol t. (aa, ba) = mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (sol t) \\<and>\n                      0 \\<le> t \\<and>\n                      (sol solves_ode (\\<lambda>a b. \\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0)) {0..t}\n                       {x. Predicates I vid1\n                            (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n                                   (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) x))} \\<and>\n                      VSagree (sol 0) a {uu. uu = vid1 \\<or> (\\<exists>x. Inl uu \\<in> FVT (if x = vid1 then trm.Var vid1 else Const 0))}) \\<longrightarrow>\n             Predicates I vid2 (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) (aa, ba))\""], ["proof (prove)\nusing this:\n  \\<forall>aa ba.\n     (\\<exists>sol t.\n         (aa, ba) =\n         mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (sol t) \\<and>\n         0 \\<le> t \\<and>\n         (sol solves_ode\n          (\\<lambda>a b.\n              \\<chi>i.\n                 if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n          {0..t}\n          {x. Predicates I vid1\n               (\\<chi>i.\n                   dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                    (mk_v I\n                      (OSing vid1\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      (a, b) x))} \\<and>\n         VSagree (sol 0) a\n          {uu.\n           uu = vid1 \\<or>\n           Inl uu\n           \\<in> Inl `\n                 {x. \\<exists>xa.\n                        Inl x\n                        \\<in> FVT (if xa = vid1 then Var vid1\n                                   else Const 0)} \\<or>\n           (\\<exists>x.\n               Inl uu\n               \\<in> FVT (if x = vid1 then Var vid1\n                          else Const 0))}) \\<longrightarrow>\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba))\n\ngoal (1 subgoal):\n 1. \\<And>aa ba.\n       (\\<exists>sol t.\n           (aa, ba) =\n           mk_v I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (a, b) (sol t) \\<and>\n           0 \\<le> t \\<and>\n           (sol solves_ode\n            (\\<lambda>a b.\n                \\<chi>i.\n                   if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n            {0..t}\n            {x. Predicates I vid1\n                 (\\<chi>i.\n                     dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                      (mk_v I\n                        (OSing vid1\n                          ($f fid1\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0)))\n                        (a, b) x))} \\<and>\n           VSagree (sol 0) a\n            {uu.\n             uu = vid1 \\<or>\n             (\\<exists>x.\n                 Inl uu\n                 \\<in> FVT (if x = vid1 then Var vid1\n                            else Const 0))}) \\<longrightarrow>\n       Predicates I vid2\n        (\\<chi>i.\n            dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba))", "by (auto)"], ["proof (state)\nthis:\n  (\\<exists>sol t.\n      (?aa6, ?ba6) =\n      mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (sol t) \\<and>\n      0 \\<le> t \\<and>\n      (sol solves_ode\n       (\\<lambda>a b.\n           \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n       {0..t}\n       {x. Predicates I vid1\n            (\\<chi>i.\n                dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                 (mk_v I\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   (a, b) x))} \\<and>\n      VSagree (sol 0) a\n       {uu.\n        uu = vid1 \\<or>\n        (\\<exists>x.\n            Inl uu\n            \\<in> FVT (if x = vid1 then Var vid1\n                       else Const 0))}) \\<longrightarrow>\n  Predicates I vid2\n   (\\<chi>i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0) (?aa6, ?ba6))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "assume aaba:\"(aa, ba) =\n  mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n           (OSing vid2\n             (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n               ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n   (\\<chi> y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)\""], ["proof (state)\nthis:\n  (aa, ba) =\n  mk_v I\n   (OProd\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (OSing vid2\n       (Plus\n         (Times\n           ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (Var vid2))\n         ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n   (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "assume t:\"0 \\<le> t\""], ["proof (state)\nthis:\n  0 \\<le> t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "assume sol:\"\n     (sol solves_ode\n   (\\<lambda>a b. (\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi> i. if i = vid2 then sterm_sem I (Plus (Times (f1 fid2 vid1) (trm.Var vid2)) (f1 fid3 vid1)) b else 0)))\n   {0..t} {x. Predicates I vid1\n               (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n                      (mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                                    ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n                        (\\<chi> y. if vid2 = y then 0 else fst (a, b) $ y, b) x))}\""], ["proof (state)\nthis:\n  (sol solves_ode\n   (\\<lambda>a b.\n       (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n       (\\<chi>i.\n           if i = vid2\n           then sterm_sem I\n                 (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1)) b\n           else 0)))\n   {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (OSing vid2\n                   (Plus\n                     (Times\n                       ($f fid2\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0))\n                       (Var vid2))\n                     ($f fid3\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))))\n               (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "assume VSag:\"VSagree (sol 0) (\\<chi> y. if vid2 = y then 0 else fst (a, b) $ y)\n     {x. x = vid2 \\<or> x = vid1 \\<or> x = vid2 \\<or> x = vid1 \\<or> Inl x \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or> x = vid1}\""], ["proof (state)\nthis:\n  VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n   {x. x = vid2 \\<or>\n       x = vid1 \\<or>\n       x = vid2 \\<or>\n       x = vid1 \\<or>\n       Inl x \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or> x = vid1}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "let ?sol = \"(\\<lambda>t. \\<chi> i. if i = vid1 then sol t $ vid1 else 0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "let ?aaba' = \"mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (?sol t)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "from bigAll[of \"fst ?aaba'\" \"snd ?aaba'\"]"], ["proof (chain)\npicking this:\n  (\\<exists>sola ta.\n      (fst (mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)),\n       snd (mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))) =\n      mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (sola ta) \\<and>\n      0 \\<le> ta \\<and>\n      (sola solves_ode\n       (\\<lambda>a b.\n           \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n       {0..ta}\n       {x. Predicates I vid1\n            (\\<chi>i.\n                dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                 (mk_v I\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   (a, b) x))} \\<and>\n      VSagree (sola 0) a\n       {uu.\n        uu = vid1 \\<or>\n        (\\<exists>x.\n            Inl uu\n            \\<in> FVT (if x = vid1 then Var vid1\n                       else Const 0))}) \\<longrightarrow>\n  Predicates I vid2\n   (\\<chi>i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (fst (mk_v I\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)),\n         snd (mk_v I\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))))", "have bigEx:\"(\\<exists>sol t. ?aaba' = mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (sol t) \\<and>\n                        0 \\<le> t \\<and>\n                        (sol solves_ode (\\<lambda>a b. \\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0)) {0..t}\n                         {x. Predicates I vid1\n                              (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n                                     (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) x))} \\<and>\n                        VSagree (sol 0) a {uu. uu = vid1 \\<or> (\\<exists>x. Inl uu \\<in> FVT (if x = vid1 then trm.Var vid1 else Const 0))}) \\<longrightarrow>\n               Predicates I vid2 (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) (?aaba'))\""], ["proof (prove)\nusing this:\n  (\\<exists>sola ta.\n      (fst (mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)),\n       snd (mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))) =\n      mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (sola ta) \\<and>\n      0 \\<le> ta \\<and>\n      (sola solves_ode\n       (\\<lambda>a b.\n           \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n       {0..ta}\n       {x. Predicates I vid1\n            (\\<chi>i.\n                dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                 (mk_v I\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   (a, b) x))} \\<and>\n      VSagree (sola 0) a\n       {uu.\n        uu = vid1 \\<or>\n        (\\<exists>x.\n            Inl uu\n            \\<in> FVT (if x = vid1 then Var vid1\n                       else Const 0))}) \\<longrightarrow>\n  Predicates I vid2\n   (\\<chi>i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (fst (mk_v I\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)),\n         snd (mk_v I\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))))\n\ngoal (1 subgoal):\n 1. (\\<exists>sola ta.\n        mk_v I\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) =\n        mk_v I\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (a, b) (sola ta) \\<and>\n        0 \\<le> ta \\<and>\n        (sola solves_ode\n         (\\<lambda>a b.\n             \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n         {0..ta}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OSing vid1\n                       ($f fid1\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))\n                     (a, b) x))} \\<and>\n        VSagree (sola 0) a\n         {uu.\n          uu = vid1 \\<or>\n          (\\<exists>x.\n              Inl uu\n              \\<in> FVT (if x = vid1 then Var vid1\n                         else Const 0))}) \\<longrightarrow>\n    Predicates I vid2\n     (\\<chi>i.\n         dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n          (mk_v I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)))", "by simp"], ["proof (state)\nthis:\n  (\\<exists>sola ta.\n      mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) =\n      mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (sola ta) \\<and>\n      0 \\<le> ta \\<and>\n      (sola solves_ode\n       (\\<lambda>a b.\n           \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n       {0..ta}\n       {x. Predicates I vid1\n            (\\<chi>i.\n                dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                 (mk_v I\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   (a, b) x))} \\<and>\n      VSagree (sola 0) a\n       {uu.\n        uu = vid1 \\<or>\n        (\\<exists>x.\n            Inl uu\n            \\<in> FVT (if x = vid1 then Var vid1\n                       else Const 0))}) \\<longrightarrow>\n  Predicates I vid2\n   (\\<chi>i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have pre1:\"?aaba' = mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (?sol t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) =\n    mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)", "by (rule refl)"], ["proof (state)\nthis:\n  mk_v I\n   (OSing vid1\n     ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n   (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) =\n  mk_v I\n   (OSing vid1\n     ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n   (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have agreeL:\"\\<And>s. fst (mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                   (OSing vid2\n                     (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                       ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n           (\\<chi> y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol s)) $ vid1 = sol s $ vid1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       fst (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol s)) $\n       vid1 =\n       sol s $ vid1", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol s)) $\n    vid1 =\n    sol s $ vid1", "using mk_v_agree[of I \"(OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                   (OSing vid2\n                      (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                        ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\" \"(\\<chi> y. if vid2 = y then 0 else fst (a, b) $ y, b)\" \"(sol s)\"]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol s))\n   (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n   (- semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i.\n                   if i = vid1 then Var vid1 else Const 0)))))) \\<and>\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol s))\n   (mk_xode I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (sol s))\n   (semBV I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3\n             (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))))\n\ngoal (1 subgoal):\n 1. fst (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol s)) $\n    vid1 =\n    sol s $ vid1", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i\n       \\<in> - semBV I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (OSing vid2\n                    (Plus\n                      (Times\n                        ($f fid2\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0))\n                        (Var vid2))\n                      ($f fid3\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1\n                            else Const 0))))) \\<longrightarrow>\n       fst (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol s)) $\n       i =\n       fst (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i\n       \\<in> - semBV I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (OSing vid2\n                    (Plus\n                      (Times\n                        ($f fid2\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0))\n                        (Var vid2))\n                      ($f fid3\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1\n                            else Const 0))))) \\<longrightarrow>\n       snd (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol s)) $\n       i =\n       snd (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i\n      \\<in> semBV I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1\n                         else Const 0))))) \\<longrightarrow>\n      fst (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol s)) $\n      i =\n      fst (mk_xode I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (sol s)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i\n      \\<in> semBV I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1\n                         else Const 0))))) \\<longrightarrow>\n      snd (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol s)) $\n      i =\n      snd (mk_xode I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (sol s)) $\n      i)\n\ngoal (1 subgoal):\n 1. fst (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol s)) $\n    vid1 =\n    sol s $ vid1", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  fst (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (OSing vid2\n            (Plus\n              (Times\n                ($f fid2\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (Var vid2))\n              ($f fid3\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n        (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol ?s9)) $\n  vid1 =\n  sol ?s9 $ vid1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have agreeR:\"\\<And>s. fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (\\<chi> i. if i = vid1 then sol s $ vid1 else 0)) $ vid1 = sol s $ vid1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       fst (mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)) $\n       vid1 =\n       sol s $ vid1", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)) $\n    vid1 =\n    sol s $ vid1", "using mk_v_agree[of \"I\" \"(OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\" \"(a, b)\" \"(\\<chi> i. if i = vid1 then sol s $ vid1 else 0)\"]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol s $ vid1 else 0))\n   (a, b)\n   (- semBV I\n       (OSing vid1\n         ($f fid1\n           (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))) \\<and>\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol s $ vid1 else 0))\n   (mk_xode I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (\\<chi>i. if i = vid1 then sol s $ vid1 else 0))\n   (semBV I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\n\ngoal (1 subgoal):\n 1. fst (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)) $\n    vid1 =\n    sol s $ vid1", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i\n       \\<in> - semBV I\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i.\n                        if i = vid1 then Var vid1\n                        else Const 0))) \\<longrightarrow>\n       fst (mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)) $\n       i =\n       fst (a, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i\n       \\<in> - semBV I\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i.\n                        if i = vid1 then Var vid1\n                        else Const 0))) \\<longrightarrow>\n       snd (mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)) $\n       i =\n       snd (a, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i\n      \\<in> semBV I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i.\n                     if i = vid1 then Var vid1\n                     else Const 0))) \\<longrightarrow>\n      fst (mk_v I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (a, b) (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)) $\n      i =\n      fst (mk_xode I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i\n      \\<in> semBV I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i.\n                     if i = vid1 then Var vid1\n                     else Const 0))) \\<longrightarrow>\n      snd (mk_v I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (a, b) (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)) $\n      i =\n      snd (mk_xode I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)) $\n      i)\n\ngoal (1 subgoal):\n 1. fst (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)) $\n    vid1 =\n    sol s $ vid1", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  fst (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol ?s9 $ vid1 else 0)) $\n  vid1 =\n  sol ?s9 $ vid1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have FV:\"(FVF (p1 vid1 vid1)) = {Inl vid1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FVF (p1 vid1 vid1) = {Inl vid1}", "unfolding p1_def expand_singleton"], ["proof (prove)\ngoal (1 subgoal):\n 1. FVF ($\\<phi> vid1\n          (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) =\n    {Inl vid1}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       x \\<in> FVT (if xa = vid1 then Var vid1\n                    else Const 0) \\<Longrightarrow>\n       x = Inl vid1", "subgoal for x xa"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0) \\<Longrightarrow>\n    x = Inl vid1", "apply(cases \"xa = vid1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n     xa = vid1\\<rbrakk>\n    \\<Longrightarrow> x = Inl vid1\n 2. \\<lbrakk>x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n     xa \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> x = Inl vid1", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  FVF (p1 vid1 vid1) = {Inl vid1}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have agree:\"\\<And>s. Vagree (mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                     (OSing vid2\n                       (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                         ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n             (\\<chi> y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol s)) (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (\\<chi> i. if i = vid1 then sol s $ vid1 else 0)) (FVF (p1 vid1 vid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       Vagree\n        (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol s))\n        (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol s $ vid1 else 0))\n        (FVF (p1 vid1 vid1))", "using agreeR agreeL"], ["proof (prove)\nusing this:\n  fst (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol ?s9 $ vid1 else 0)) $\n  vid1 =\n  sol ?s9 $ vid1\n  fst (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (OSing vid2\n            (Plus\n              (Times\n                ($f fid2\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (Var vid2))\n              ($f fid3\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n        (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol ?s9)) $\n  vid1 =\n  sol ?s9 $ vid1\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       Vagree\n        (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol s))\n        (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol s $ vid1 else 0))\n        (FVF (p1 vid1 vid1))", "unfolding Vagree_def FV"], ["proof (prove)\nusing this:\n  fst (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol ?s9 $ vid1 else 0)) $\n  vid1 =\n  sol ?s9 $ vid1\n  fst (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (OSing vid2\n            (Plus\n              (Times\n                ($f fid2\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (Var vid2))\n              ($f fid3\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n        (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol ?s9)) $\n  vid1 =\n  sol ?s9 $ vid1\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       (\\<forall>i.\n           Inl i \\<in> {Inl vid1} \\<longrightarrow>\n           fst (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   (OSing vid2\n                     (Plus\n                       (Times\n                         ($f fid2\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0))\n                         (Var vid2))\n                       ($f fid3\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))))\n                 (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n                 (sol s)) $\n           i =\n           fst (mk_v I\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (a, b) (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)) $\n           i) \\<and>\n       (\\<forall>i.\n           Inr i \\<in> {Inl vid1} \\<longrightarrow>\n           snd (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   (OSing vid2\n                     (Plus\n                       (Times\n                         ($f fid2\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0))\n                         (Var vid2))\n                       ($f fid3\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))))\n                 (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n                 (sol s)) $\n           i =\n           snd (mk_v I\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (a, b) (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)) $\n           i)", "by auto"], ["proof (state)\nthis:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol ?s9))\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol ?s9 $ vid1 else 0))\n   (FVF (p1 vid1 vid1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "note con_sem_eq = coincidence_formula[OF fsafe Iagree_refl agree]"], ["proof (state)\nthis:\n  (mk_v I\n    (OProd\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (OSing vid2\n        (Plus\n          (Times\n            ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n            (Var vid2))\n          ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n    (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol ?s10)\n   \\<in> fml_sem ?I (p1 vid1 vid1)) =\n  (mk_v I\n    (OSing vid1\n      ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n    (a, b) (\\<chi>i. if i = vid1 then sol ?s10 $ vid1 else 0)\n   \\<in> fml_sem ?I (p1 vid1 vid1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have constraint:\"\\<And>s. 0 \\<le> s \\<and> s \\<le> t \\<Longrightarrow>\n         Predicates I vid1\n         (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n               (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (\\<chi> i. if i = vid1 then sol s $ vid1 else 0)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       0 \\<le> s \\<and> s \\<le> t \\<Longrightarrow>\n       Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (mk_v I\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (a, b) (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)))", "using sol"], ["proof (prove)\nusing this:\n  (sol solves_ode\n   (\\<lambda>a b.\n       (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n       (\\<chi>i.\n           if i = vid2\n           then sterm_sem I\n                 (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1)) b\n           else 0)))\n   {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (OSing vid2\n                   (Plus\n                     (Times\n                       ($f fid2\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0))\n                       (Var vid2))\n                     ($f fid3\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))))\n               (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))}\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       0 \\<le> s \\<and> s \\<le> t \\<Longrightarrow>\n       Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (mk_v I\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (a, b) (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n        (sol solves_ode\n         (\\<lambda>a b.\n             (\\<chi>i.\n                 if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n             (\\<chi>i.\n                 if i = vid2\n                 then sterm_sem I\n                       (Plus (Times (f1 fid2 vid1) (Var vid2))\n                         (f1 fid3 vid1))\n                       b\n                 else 0)))\n         {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       (OSing vid2\n                         (Plus\n                           (Times\n                             ($f fid2\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0))\n                             (Var vid2))\n                           ($f fid3\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))))\n                     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n                     x))}\\<rbrakk>\n       \\<Longrightarrow> Predicates I vid1\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then Var vid1 else Const 0)\n                               (mk_v I\n                                 (OSing vid1\n                                   ($f fid1\n                                     (\\<lambda>i.\n   if i = vid1 then Var vid1 else Const 0)))\n                                 (a, b)\n                                 (\\<chi>i.\n                                     if i = vid1 then sol s $ vid1 else 0)))", "apply(drule solves_odeD(2))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s. 0 \\<le> s \\<and> s \\<le> t \\<Longrightarrow> ?t5 s \\<in> {0..t}\n 2. \\<And>s.\n       \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n        sol (?t5 s)\n        \\<in> {x. Predicates I vid1\n                   (\\<chi>i.\n                       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                        (mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            (OSing vid2\n                              (Plus\n                                (Times\n                                  ($f fid2\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0))\n                                  (Var vid2))\n                                ($f fid3\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))))\n                          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y,\n                           b)\n                          x))}\\<rbrakk>\n       \\<Longrightarrow> Predicates I vid1\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then Var vid1 else Const 0)\n                               (mk_v I\n                                 (OSing vid1\n                                   ($f fid1\n                                     (\\<lambda>i.\n   if i = vid1 then Var vid1 else Const 0)))\n                                 (a, b)\n                                 (\\<chi>i.\n                                     if i = vid1 then sol s $ vid1 else 0)))", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n        sol s\n        \\<in> {x. Predicates I vid1\n                   (\\<chi>i.\n                       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                        (mk_v I\n                          (OProd\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            (OSing vid2\n                              (Plus\n                                (Times\n                                  ($f fid2\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0))\n                                  (Var vid2))\n                                ($f fid3\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))))\n                          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y,\n                           b)\n                          x))}\\<rbrakk>\n       \\<Longrightarrow> Predicates I vid1\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then Var vid1 else Const 0)\n                               (mk_v I\n                                 (OSing vid1\n                                   ($f fid1\n                                     (\\<lambda>i.\n   if i = vid1 then Var vid1 else Const 0)))\n                                 (a, b)\n                                 (\\<chi>i.\n                                     if i = vid1 then sol s $ vid1 else 0)))", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n     sol s\n     \\<in> {x. Predicates I vid1\n                (\\<chi>i.\n                    dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                     (mk_v I\n                       (OProd\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (OSing vid2\n                           (Plus\n                             (Times\n                               ($f fid2\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0))\n                               (Var vid2))\n                             ($f fid3\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1\n                                   else Const 0)))))\n                       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n                       x))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid1\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b)\n                              (\\<chi>i.\n                                  if i = vid1 then sol s $ vid1 else 0)))", "using con_sem_eq"], ["proof (prove)\nusing this:\n  (mk_v I\n    (OProd\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (OSing vid2\n        (Plus\n          (Times\n            ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n            (Var vid2))\n          ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n    (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol ?s10)\n   \\<in> fml_sem ?I (p1 vid1 vid1)) =\n  (mk_v I\n    (OSing vid1\n      ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n    (a, b) (\\<chi>i. if i = vid1 then sol ?s10 $ vid1 else 0)\n   \\<in> fml_sem ?I (p1 vid1 vid1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n     sol s\n     \\<in> {x. Predicates I vid1\n                (\\<chi>i.\n                    dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                     (mk_v I\n                       (OProd\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (OSing vid2\n                           (Plus\n                             (Times\n                               ($f fid2\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0))\n                               (Var vid2))\n                             ($f fid3\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1\n                                   else Const 0)))))\n                       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n                       x))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid1\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b)\n                              (\\<chi>i.\n                                  if i = vid1 then sol s $ vid1 else 0)))", "by (auto simp add: p1_def expand_singleton)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  0 \\<le> ?s9 \\<and> ?s9 \\<le> t \\<Longrightarrow>\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol ?s9 $ vid1 else 0)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have eta:\"sol = (\\<lambda>t. \\<chi> i. sol t $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sol = (\\<lambda>t. \\<chi>i. sol t $ i)", "by (rule ext, rule vec_extensionality, simp)"], ["proof (state)\nthis:\n  sol = (\\<lambda>t. \\<chi>i. sol t $ i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have yet_another_eq:\"\\<And>x. (\\<lambda>xa. xa *\\<^sub>R ((\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol x) else 0) +\n                          (\\<chi> i. if i = vid2 then sterm_sem I (Plus (Times (f1 fid2 vid1) (trm.Var vid2)) (f1 fid3 vid1)) (sol x) else 0)))\n = (\\<lambda>xa. (\\<chi> i. (xa *\\<^sub>R ((\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol x) else 0) +\n                          (\\<chi> i. if i = vid2 then sterm_sem I (Plus (Times (f1 fid2 vid1) (trm.Var vid2)) (f1 fid3 vid1)) (sol x) else 0))) $ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<lambda>xa.\n           xa *\\<^sub>R\n           ((\\<chi>i.\n                if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol x)\n                else 0) +\n            (\\<chi>i.\n                if i = vid2\n                then sterm_sem I\n                      (Plus (Times (f1 fid2 vid1) (Var vid2))\n                        (f1 fid3 vid1))\n                      (sol x)\n                else 0))) =\n       (\\<lambda>xa.\n           \\<chi>i.\n              (xa *\\<^sub>R\n               ((\\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol x)\n                    else 0) +\n                (\\<chi>i.\n                    if i = vid2\n                    then sterm_sem I\n                          (Plus (Times (f1 fid2 vid1) (Var vid2))\n                            (f1 fid3 vid1))\n                          (sol x)\n                    else 0))) $\n              i)", "subgoal for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>xa.\n        xa *\\<^sub>R\n        ((\\<chi>i.\n             if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol x) else 0) +\n         (\\<chi>i.\n             if i = vid2\n             then sterm_sem I\n                   (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                   (sol x)\n             else 0))) =\n    (\\<lambda>xa.\n        \\<chi>i.\n           (xa *\\<^sub>R\n            ((\\<chi>i.\n                 if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol x)\n                 else 0) +\n             (\\<chi>i.\n                 if i = vid2\n                 then sterm_sem I\n                       (Plus (Times (f1 fid2 vid1) (Var vid2))\n                         (f1 fid3 vid1))\n                       (sol x)\n                 else 0))) $\n           i)", "by (rule ext, rule vec_extensionality, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>xa.\n      xa *\\<^sub>R\n      ((\\<chi>i.\n           if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol ?x9) else 0) +\n       (\\<chi>i.\n           if i = vid2\n           then sterm_sem I\n                 (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                 (sol ?x9)\n           else 0))) =\n  (\\<lambda>xa.\n      \\<chi>i.\n         (xa *\\<^sub>R\n          ((\\<chi>i.\n               if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol ?x9)\n               else 0) +\n           (\\<chi>i.\n               if i = vid2\n               then sterm_sem I\n                     (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                     (sol ?x9)\n               else 0))) $\n         i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have sol_deriv:\"\\<And>x. x \\<in>{0..t} \\<Longrightarrow>\n           (sol has_derivative\n            (\\<lambda>xa. xa *\\<^sub>R ((\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol x) else 0) +\n                          (\\<chi> i. if i = vid2 then sterm_sem I (Plus (Times (f1 fid2 vid1) (trm.Var vid2)) (f1 fid3 vid1)) (sol x) else 0))))\n            (at x within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..t} \\<Longrightarrow>\n       (sol has_derivative\n        (\\<lambda>xa.\n            xa *\\<^sub>R\n            ((\\<chi>i.\n                 if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol x)\n                 else 0) +\n             (\\<chi>i.\n                 if i = vid2\n                 then sterm_sem I\n                       (Plus (Times (f1 fid2 vid1) (Var vid2))\n                         (f1 fid3 vid1))\n                       (sol x)\n                 else 0))))\n        (at x within {0..t})", "using sol"], ["proof (prove)\nusing this:\n  (sol solves_ode\n   (\\<lambda>a b.\n       (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n       (\\<chi>i.\n           if i = vid2\n           then sterm_sem I\n                 (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1)) b\n           else 0)))\n   {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (OSing vid2\n                   (Plus\n                     (Times\n                       ($f fid2\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0))\n                       (Var vid2))\n                     ($f fid3\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))))\n               (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..t} \\<Longrightarrow>\n       (sol has_derivative\n        (\\<lambda>xa.\n            xa *\\<^sub>R\n            ((\\<chi>i.\n                 if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol x)\n                 else 0) +\n             (\\<chi>i.\n                 if i = vid2\n                 then sterm_sem I\n                       (Plus (Times (f1 fid2 vid1) (Var vid2))\n                         (f1 fid3 vid1))\n                       (sol x)\n                 else 0))))\n        (at x within {0..t})", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 \\<le> x \\<and> x \\<le> t;\n        (sol solves_ode\n         (\\<lambda>a b.\n             (\\<chi>i.\n                 if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n             (\\<chi>i.\n                 if i = vid2\n                 then sterm_sem I\n                       (Plus (Times (f1 fid2 vid1) (Var vid2))\n                         (f1 fid3 vid1))\n                       b\n                 else 0)))\n         {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OProd\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       (OSing vid2\n                         (Plus\n                           (Times\n                             ($f fid2\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0))\n                             (Var vid2))\n                           ($f fid3\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))))\n                     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n                     x))}\\<rbrakk>\n       \\<Longrightarrow> (sol has_derivative\n                          (\\<lambda>xa.\n                              xa *\\<^sub>R\n                              ((\\<chi>i.\n                                   if i = vid1\n                                   then sterm_sem I (f1 fid1 vid1) (sol x)\n                                   else 0) +\n                               (\\<chi>i.\n                                   if i = vid2\n                                   then sterm_sem I\n   (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1)) (sol x)\n                                   else 0))))\n                          (at x within {0..t})", "apply(drule solves_odeD(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 \\<le> x \\<and> x \\<le> t;\n        (sol has_vderiv_on\n         (\\<lambda>t.\n             (\\<chi>i.\n                 if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol t)\n                 else 0) +\n             (\\<chi>i.\n                 if i = vid2\n                 then sterm_sem I\n                       (Plus (Times (f1 fid2 vid1) (Var vid2))\n                         (f1 fid3 vid1))\n                       (sol t)\n                 else 0)))\n         {0..t}\\<rbrakk>\n       \\<Longrightarrow> (sol has_derivative\n                          (\\<lambda>xa.\n                              xa *\\<^sub>R\n                              ((\\<chi>i.\n                                   if i = vid1\n                                   then sterm_sem I (f1 fid1 vid1) (sol x)\n                                   else 0) +\n                               (\\<chi>i.\n                                   if i = vid2\n                                   then sterm_sem I\n   (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1)) (sol x)\n                                   else 0))))\n                          (at x within {0..t})", "unfolding has_vderiv_on_def has_vector_derivative_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 \\<le> x \\<and> x \\<le> t;\n        \\<forall>x\\<in>{0..t}.\n           (sol has_derivative\n            (\\<lambda>xa.\n                xa *\\<^sub>R\n                ((\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol x)\n                     else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           (sol x)\n                     else 0))))\n            (at x within {0..t})\\<rbrakk>\n       \\<Longrightarrow> (sol has_derivative\n                          (\\<lambda>xa.\n                              xa *\\<^sub>R\n                              ((\\<chi>i.\n                                   if i = vid1\n                                   then sterm_sem I (f1 fid1 vid1) (sol x)\n                                   else 0) +\n                               (\\<chi>i.\n                                   if i = vid2\n                                   then sterm_sem I\n   (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1)) (sol x)\n                                   else 0))))\n                          (at x within {0..t})", "by auto"], ["proof (state)\nthis:\n  ?x9 \\<in> {0..t} \\<Longrightarrow>\n  (sol has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       ((\\<chi>i.\n            if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol ?x9) else 0) +\n        (\\<chi>i.\n            if i = vid2\n            then sterm_sem I\n                  (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                  (sol ?x9)\n            else 0))))\n   (at ?x9 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "then"], ["proof (chain)\npicking this:\n  ?x9 \\<in> {0..t} \\<Longrightarrow>\n  (sol has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       ((\\<chi>i.\n            if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol ?x9) else 0) +\n        (\\<chi>i.\n            if i = vid2\n            then sterm_sem I\n                  (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                  (sol ?x9)\n            else 0))))\n   (at ?x9 within {0..t})", "have sol_deriv:\"\\<And>x. x \\<in> {0..t} \\<Longrightarrow>\n           ((\\<lambda>t. \\<chi> i. sol t $ i) has_derivative\n            (\\<lambda>xa. (\\<chi> i. (xa *\\<^sub>R ((\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol x) else 0) +\n                          (\\<chi> i. if i = vid2 then sterm_sem I (Plus (Times (f1 fid2 vid1) (trm.Var vid2)) (f1 fid3 vid1)) (sol x) else 0))) $ i)))\n            (at x within {0..t})\""], ["proof (prove)\nusing this:\n  ?x9 \\<in> {0..t} \\<Longrightarrow>\n  (sol has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       ((\\<chi>i.\n            if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol ?x9) else 0) +\n        (\\<chi>i.\n            if i = vid2\n            then sterm_sem I\n                  (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                  (sol ?x9)\n            else 0))))\n   (at ?x9 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>t. \\<chi>i. sol t $ i) has_derivative\n        (\\<lambda>xa.\n            \\<chi>i.\n               (xa *\\<^sub>R\n                ((\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol x)\n                     else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           (sol x)\n                     else 0))) $\n               i))\n        (at x within {0..t})", "using yet_another_eq eta"], ["proof (prove)\nusing this:\n  ?x9 \\<in> {0..t} \\<Longrightarrow>\n  (sol has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       ((\\<chi>i.\n            if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol ?x9) else 0) +\n        (\\<chi>i.\n            if i = vid2\n            then sterm_sem I\n                  (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                  (sol ?x9)\n            else 0))))\n   (at ?x9 within {0..t})\n  (\\<lambda>xa.\n      xa *\\<^sub>R\n      ((\\<chi>i.\n           if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol ?x9) else 0) +\n       (\\<chi>i.\n           if i = vid2\n           then sterm_sem I\n                 (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                 (sol ?x9)\n           else 0))) =\n  (\\<lambda>xa.\n      \\<chi>i.\n         (xa *\\<^sub>R\n          ((\\<chi>i.\n               if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol ?x9)\n               else 0) +\n           (\\<chi>i.\n               if i = vid2\n               then sterm_sem I\n                     (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                     (sol ?x9)\n               else 0))) $\n         i)\n  sol = (\\<lambda>t. \\<chi>i. sol t $ i)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>t. \\<chi>i. sol t $ i) has_derivative\n        (\\<lambda>xa.\n            \\<chi>i.\n               (xa *\\<^sub>R\n                ((\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol x)\n                     else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           (sol x)\n                     else 0))) $\n               i))\n        (at x within {0..t})", "by auto"], ["proof (state)\nthis:\n  ?x9 \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t. \\<chi>i. sol t $ i) has_derivative\n   (\\<lambda>xa.\n       \\<chi>i.\n          (xa *\\<^sub>R\n           ((\\<chi>i.\n                if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol ?x9)\n                else 0) +\n            (\\<chi>i.\n                if i = vid2\n                then sterm_sem I\n                      (Plus (Times (f1 fid2 vid1) (Var vid2))\n                        (f1 fid3 vid1))\n                      (sol ?x9)\n                else 0))) $\n          i))\n   (at ?x9 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have sol_deriv1: \"\\<And>x. x \\<in> {0..t} \\<Longrightarrow>\n          ((\\<lambda>t. sol t $ vid1) has_derivative\n           (\\<lambda>xa. (xa *\\<^sub>R ((\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol x) else 0) +\n                         (\\<chi> i. if i = vid2 then sterm_sem I (Plus (Times (f1 fid2 vid1) (trm.Var vid2)) (f1 fid3 vid1)) (sol x) else 0)) $ vid1)))\n           (at x within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>t. sol t $ vid1) has_derivative\n        (\\<lambda>xa.\n            xa *\\<^sub>R\n            ((\\<chi>i.\n                 if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol x)\n                 else 0) +\n             (\\<chi>i.\n                 if i = vid2\n                 then sterm_sem I\n                       (Plus (Times (f1 fid2 vid1) (Var vid2))\n                         (f1 fid3 vid1))\n                       (sol x)\n                 else 0)) $\n            vid1))\n        (at x within {0..t})", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>t. sol t $ vid1) has_derivative\n     (\\<lambda>xa.\n         xa *\\<^sub>R\n         ((\\<chi>i.\n              if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s) else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    (sol s)\n              else 0)) $\n         vid1))\n     (at s within {0..t})", "(* I heard higher-order unification is hard.*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>t. sol t $ vid1) has_derivative\n     (\\<lambda>xa.\n         xa *\\<^sub>R\n         ((\\<chi>i.\n              if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s) else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    (sol s)\n              else 0)) $\n         vid1))\n     (at s within {0..t})", "apply(rule has_derivative_proj[of \"(\\<lambda> i t. sol t $ i)\" \"(\\<lambda>j xa. (xa *\\<^sub>R ((\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s) else 0) +\n                         (\\<chi> i. if i = vid2 then sterm_sem I (Plus (Times (f1 fid2 vid1) (trm.Var vid2)) (f1 fid3 vid1)) (sol s) else 0)) $ j))\" \"at s within {0..t}\"\"vid1\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>t. \\<chi>i. sol t $ i) has_derivative\n     (\\<lambda>xa.\n         \\<chi>i.\n            xa *\\<^sub>R\n            ((\\<chi>i.\n                 if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s)\n                 else 0) +\n             (\\<chi>i.\n                 if i = vid2\n                 then sterm_sem I\n                       (Plus (Times (f1 fid2 vid1) (Var vid2))\n                         (f1 fid3 vid1))\n                       (sol s)\n                 else 0)) $\n            i))\n     (at s within {0..t})", "using sol_deriv[of s]"], ["proof (prove)\nusing this:\n  s \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t. \\<chi>i. sol t $ i) has_derivative\n   (\\<lambda>xa.\n       \\<chi>i.\n          (xa *\\<^sub>R\n           ((\\<chi>i.\n                if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s)\n                else 0) +\n            (\\<chi>i.\n                if i = vid2\n                then sterm_sem I\n                      (Plus (Times (f1 fid2 vid1) (Var vid2))\n                        (f1 fid3 vid1))\n                      (sol s)\n                else 0))) $\n          i))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>t. \\<chi>i. sol t $ i) has_derivative\n     (\\<lambda>xa.\n         \\<chi>i.\n            xa *\\<^sub>R\n            ((\\<chi>i.\n                 if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s)\n                 else 0) +\n             (\\<chi>i.\n                 if i = vid2\n                 then sterm_sem I\n                       (Plus (Times (f1 fid2 vid1) (Var vid2))\n                         (f1 fid3 vid1))\n                       (sol s)\n                 else 0)) $\n            i))\n     (at s within {0..t})", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?x9 \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t. sol t $ vid1) has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       ((\\<chi>i.\n            if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol ?x9) else 0) +\n        (\\<chi>i.\n            if i = vid2\n            then sterm_sem I\n                  (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                  (sol ?x9)\n            else 0)) $\n       vid1))\n   (at ?x9 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have hmm:\"\\<And>s. (\\<chi> i. sterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) (sol s)) = (\\<chi> i. sterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) (\\<chi> i. if i = vid1 then sol s $ vid1 else 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       (\\<chi>i.\n           sterm_sem I (if i = vid1 then Var vid1 else Const 0) (sol s)) =\n       (\\<chi>i.\n           sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (\\<chi>i. if i = vid1 then sol s $ vid1 else 0))", "by(rule vec_extensionality, auto)"], ["proof (state)\nthis:\n  (\\<chi>i.\n      sterm_sem I (if i = vid1 then Var vid1 else Const 0) (sol ?s9)) =\n  (\\<chi>i.\n      sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n       (\\<chi>i. if i = vid1 then sol ?s9 $ vid1 else 0))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have aha:\"\\<And>s. (\\<lambda>xa. xa * sterm_sem I (f1 fid1 vid1) (sol s)) = (\\<lambda>xa. xa * sterm_sem I (f1 fid1 vid1) (\\<chi> i. if i = vid1 then sol s $ vid1 else 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       (\\<lambda>xa. xa * sterm_sem I (f1 fid1 vid1) (sol s)) =\n       (\\<lambda>xa.\n           xa *\n           sterm_sem I (f1 fid1 vid1)\n            (\\<chi>i. if i = vid1 then sol s $ vid1 else 0))", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>xa. xa * sterm_sem I (f1 fid1 vid1) (sol s)) =\n    (\\<lambda>xa.\n        xa *\n        sterm_sem I (f1 fid1 vid1)\n         (\\<chi>i. if i = vid1 then sol s $ vid1 else 0))", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa * sterm_sem I (f1 fid1 vid1) (sol s) =\n       xa *\n       sterm_sem I (f1 fid1 vid1)\n        (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)", "subgoal for xa"], ["proof (prove)\ngoal (1 subgoal):\n 1. xa * sterm_sem I (f1 fid1 vid1) (sol s) =\n    xa *\n    sterm_sem I (f1 fid1 vid1)\n     (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)", "using hmm"], ["proof (prove)\nusing this:\n  (\\<chi>i.\n      sterm_sem I (if i = vid1 then Var vid1 else Const 0) (sol ?s9)) =\n  (\\<chi>i.\n      sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n       (\\<chi>i. if i = vid1 then sol ?s9 $ vid1 else 0))\n\ngoal (1 subgoal):\n 1. xa * sterm_sem I (f1 fid1 vid1) (sol s) =\n    xa *\n    sterm_sem I (f1 fid1 vid1)\n     (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)", "by (auto simp add: f1_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>xa. xa * sterm_sem I (f1 fid1 vid1) (sol ?s9)) =\n  (\\<lambda>xa.\n      xa *\n      sterm_sem I (f1 fid1 vid1)\n       (\\<chi>i. if i = vid1 then sol ?s9 $ vid1 else 0))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "let ?sol' = \"(\\<lambda>s. (\\<lambda>xa. \\<chi> i. if i = vid1 then xa * sterm_sem I (f1 fid1 vid1) (\\<chi> i. if i = vid1 then sol s $ vid1 else 0) else 0))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "let ?project_me_plz = \"(\\<lambda>t. (\\<chi> i. if i = vid1 then ?sol t $ vid1 else 0))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have sol_deriv_eq:\"\\<And>s. s \\<in>{0..t} \\<Longrightarrow>\n     ((\\<lambda>t. (\\<chi> i. if i = vid1 then ?sol t $ vid1 else 0)) has_derivative ?sol' s) (at s within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>t.\n            \\<chi>i.\n               if i = vid1\n               then (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) $ vid1\n               else 0) has_derivative\n        (\\<lambda>xa.\n            \\<chi>i.\n               if i = vid1\n               then xa *\n                    sterm_sem I (f1 fid1 vid1)\n                     (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n               else 0))\n        (at s within {0..t})", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>t.\n         \\<chi>i.\n            if i = vid1\n            then (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) $ vid1\n            else 0) has_derivative\n     (\\<lambda>xa.\n         \\<chi>i.\n            if i = vid1\n            then xa *\n                 sterm_sem I (f1 fid1 vid1)\n                  (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n            else 0))\n     (at s within {0..t})", "apply(rule has_derivative_vec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       s \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>t.\n            if i = vid1\n            then (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) $ vid1\n            else 0) has_derivative\n        (\\<lambda>xa.\n            if i = vid1\n            then xa *\n                 sterm_sem I (f1 fid1 vid1)\n                  (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n            else 0))\n        (at s within {0..t})", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>t.\n         if i = vid1\n         then (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) $ vid1\n         else 0) has_derivative\n     (\\<lambda>xa.\n         if i = vid1\n         then xa *\n              sterm_sem I (f1 fid1 vid1)\n               (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n         else 0))\n     (at s within {0..t})", "apply (cases \"i = vid1\", cases \"i = vid2\", auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>vid2 = vid1; i = vid1; 0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t. sol t $ vid1) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           sterm_sem I (f1 fid1 vid1)\n                            (\\<chi>i.\n                                if i = vid1 then sol s $ vid1 else 0)))\n                       (at s within {0..t})\n 2. \\<lbrakk>i = vid1; vid1 \\<noteq> vid2; 0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t. sol t $ vid1) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           sterm_sem I (f1 fid1 vid1)\n                            (\\<chi>i.\n                                if i = vid1 then sol s $ vid1 else 0)))\n                       (at s within {0..t})", "using vne12"], ["proof (prove)\nusing this:\n  vid1 \\<noteq> vid2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>vid2 = vid1; i = vid1; 0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t. sol t $ vid1) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           sterm_sem I (f1 fid1 vid1)\n                            (\\<chi>i.\n                                if i = vid1 then sol s $ vid1 else 0)))\n                       (at s within {0..t})\n 2. \\<lbrakk>i = vid1; vid1 \\<noteq> vid2; 0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t. sol t $ vid1) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           sterm_sem I (f1 fid1 vid1)\n                            (\\<chi>i.\n                                if i = vid1 then sol s $ vid1 else 0)))\n                       (at s within {0..t})", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i = vid1; vid1 \\<noteq> vid2; 0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t. sol t $ vid1) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           sterm_sem I (f1 fid1 vid1)\n                            (\\<chi>i.\n                                if i = vid1 then sol s $ vid1 else 0)))\n                       (at s within {0..t})", "using sol_deriv1[of s]"], ["proof (prove)\nusing this:\n  s \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t. sol t $ vid1) has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       ((\\<chi>i.\n            if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s) else 0) +\n        (\\<chi>i.\n            if i = vid2\n            then sterm_sem I\n                  (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                  (sol s)\n            else 0)) $\n       vid1))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i = vid1; vid1 \\<noteq> vid2; 0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t. sol t $ vid1) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           sterm_sem I (f1 fid1 vid1)\n                            (\\<chi>i.\n                                if i = vid1 then sol s $ vid1 else 0)))\n                       (at s within {0..t})", "using aha"], ["proof (prove)\nusing this:\n  s \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t. sol t $ vid1) has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       ((\\<chi>i.\n            if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s) else 0) +\n        (\\<chi>i.\n            if i = vid2\n            then sterm_sem I\n                  (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                  (sol s)\n            else 0)) $\n       vid1))\n   (at s within {0..t})\n  (\\<lambda>xa. xa * sterm_sem I (f1 fid1 vid1) (sol ?s9)) =\n  (\\<lambda>xa.\n      xa *\n      sterm_sem I (f1 fid1 vid1)\n       (\\<chi>i. if i = vid1 then sol ?s9 $ vid1 else 0))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i = vid1; vid1 \\<noteq> vid2; 0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t. sol t $ vid1) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           sterm_sem I (f1 fid1 vid1)\n                            (\\<chi>i.\n                                if i = vid1 then sol s $ vid1 else 0)))\n                       (at s within {0..t})", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?s9 \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t.\n       \\<chi>i.\n          if i = vid1\n          then (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) $ vid1\n          else 0) has_derivative\n   (\\<lambda>xa.\n       \\<chi>i.\n          if i = vid1\n          then xa *\n               sterm_sem I (f1 fid1 vid1)\n                (\\<chi>i. if i = vid1 then sol ?s9 $ vid1 else 0)\n          else 0))\n   (at ?s9 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have yup:\"(\\<lambda>t. (\\<chi> i. if i = vid1 then ?sol t $ vid1 else 0) $ vid1) = (\\<lambda>t. sol t $ vid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t.\n        (\\<chi>i.\n            if i = vid1\n            then (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) $ vid1\n            else 0) $\n        vid1) =\n    (\\<lambda>t. sol t $ vid1)", "by(rule ext, auto)"], ["proof (state)\nthis:\n  (\\<lambda>t.\n      (\\<chi>i.\n          if i = vid1\n          then (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) $ vid1\n          else 0) $\n      vid1) =\n  (\\<lambda>t. sol t $ vid1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have maybe:\"\\<And>s. (\\<lambda>xa. xa * sterm_sem I (f1 fid1 vid1) (\\<chi> i. if i = vid1 then sol s $ vid1 else 0)) = (\\<lambda>xa. (\\<chi> i. if i = vid1 then xa * sterm_sem I (f1 fid1 vid1) (\\<chi> i. if i = vid1 then sol s $ vid1 else 0) else 0) $ vid1) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       (\\<lambda>xa.\n           xa *\n           sterm_sem I (f1 fid1 vid1)\n            (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)) =\n       (\\<lambda>xa.\n           (\\<chi>i.\n               if i = vid1\n               then xa *\n                    sterm_sem I (f1 fid1 vid1)\n                     (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n               else 0) $\n           vid1)", "by(rule ext, auto)"], ["proof (state)\nthis:\n  (\\<lambda>xa.\n      xa *\n      sterm_sem I (f1 fid1 vid1)\n       (\\<chi>i. if i = vid1 then sol ?s9 $ vid1 else 0)) =\n  (\\<lambda>xa.\n      (\\<chi>i.\n          if i = vid1\n          then xa *\n               sterm_sem I (f1 fid1 vid1)\n                (\\<chi>i. if i = vid1 then sol ?s9 $ vid1 else 0)\n          else 0) $\n      vid1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have almost:\"(\\<lambda>x. if vid1 = vid1 then (\\<chi> i. if i = vid1 then sol x $ vid1 else 0) $ vid1 else 0) =\n(\\<lambda>x.  (\\<chi> i. if i = vid1 then sol x $ vid1 else 0) $ vid1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        if vid1 = vid1\n        then (\\<chi>i. if i = vid1 then sol x $ vid1 else 0) $ vid1\n        else 0) =\n    (\\<lambda>x. (\\<chi>i. if i = vid1 then sol x $ vid1 else 0) $ vid1)", "by(rule ext, auto)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      if vid1 = vid1\n      then (\\<chi>i. if i = vid1 then sol x $ vid1 else 0) $ vid1 else 0) =\n  (\\<lambda>x. (\\<chi>i. if i = vid1 then sol x $ vid1 else 0) $ vid1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have almost':\"\\<And>s. (\\<lambda>h. if vid1 = vid1 then h * sterm_sem I (f1 fid1 vid1) (\\<chi> i. if i = vid1 then sol s $ vid1 else 0) else 0) = (\\<lambda>h. h * sterm_sem I (f1 fid1 vid1) (\\<chi> i. if i = vid1 then sol s $ vid1 else 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       (\\<lambda>h.\n           if vid1 = vid1\n           then h *\n                sterm_sem I (f1 fid1 vid1)\n                 (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n           else 0) =\n       (\\<lambda>h.\n           h *\n           sterm_sem I (f1 fid1 vid1)\n            (\\<chi>i. if i = vid1 then sol s $ vid1 else 0))", "by(rule ext, auto)"], ["proof (state)\nthis:\n  (\\<lambda>h.\n      if vid1 = vid1\n      then h *\n           sterm_sem I (f1 fid1 vid1)\n            (\\<chi>i. if i = vid1 then sol ?s9 $ vid1 else 0)\n      else 0) =\n  (\\<lambda>h.\n      h *\n      sterm_sem I (f1 fid1 vid1)\n       (\\<chi>i. if i = vid1 then sol ?s9 $ vid1 else 0))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have deriv':\" \\<And>x. x \\<in> {0..t} \\<Longrightarrow>\n     ((\\<lambda>t. \\<chi> i. if i = vid1 then sol t $ vid1 else 0) has_derivative\n      (\\<lambda>xa. (\\<chi> i. xa *\\<^sub>R (if i = vid1 then sterm_sem I (f1 fid1 vid1) (\\<chi> i. if i = vid1 then sol x $ vid1 else 0) else 0))))\n      (at x within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>t.\n            \\<chi>i. if i = vid1 then sol t $ vid1 else 0) has_derivative\n        (\\<lambda>xa.\n            \\<chi>i.\n               xa *\\<^sub>R\n               (if i = vid1\n                then sterm_sem I (f1 fid1 vid1)\n                      (\\<chi>i. if i = vid1 then sol x $ vid1 else 0)\n                else 0)))\n        (at x within {0..t})", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>t.\n         \\<chi>i. if i = vid1 then sol t $ vid1 else 0) has_derivative\n     (\\<lambda>xa.\n         \\<chi>i.\n            xa *\\<^sub>R\n            (if i = vid1\n             then sterm_sem I (f1 fid1 vid1)\n                   (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n             else 0)))\n     (at s within {0..t})", "apply(rule has_derivative_vec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       s \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>t. if i = vid1 then sol t $ vid1 else 0) has_derivative\n        (\\<lambda>xa.\n            xa *\\<^sub>R\n            (if i = vid1\n             then sterm_sem I (f1 fid1 vid1)\n                   (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n             else 0)))\n        (at s within {0..t})", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>t. if i = vid1 then sol t $ vid1 else 0) has_derivative\n     (\\<lambda>xa.\n         xa *\\<^sub>R\n         (if i = vid1\n          then sterm_sem I (f1 fid1 vid1)\n                (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n          else 0)))\n     (at s within {0..t})", "apply(cases \"i = vid1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> {0..t}; i = vid1\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           if i = vid1 then sol t $ vid1\n                           else 0) has_derivative\n                       (\\<lambda>xa.\n                           xa *\\<^sub>R\n                           (if i = vid1\n                            then sterm_sem I (f1 fid1 vid1)\n                                  (\\<chi>i.\nif i = vid1 then sol s $ vid1 else 0)\n                            else 0)))\n                       (at s within {0..t})\n 2. \\<lbrakk>s \\<in> {0..t}; i \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           if i = vid1 then sol t $ vid1\n                           else 0) has_derivative\n                       (\\<lambda>xa.\n                           xa *\\<^sub>R\n                           (if i = vid1\n                            then sterm_sem I (f1 fid1 vid1)\n                                  (\\<chi>i.\nif i = vid1 then sol s $ vid1 else 0)\n                            else 0)))\n                       (at s within {0..t})", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> {0..t}; i \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           if i = vid1 then sol t $ vid1\n                           else 0) has_derivative\n                       (\\<lambda>xa.\n                           xa *\\<^sub>R\n                           (if i = vid1\n                            then sterm_sem I (f1 fid1 vid1)\n                                  (\\<chi>i.\nif i = vid1 then sol s $ vid1 else 0)\n                            else 0)))\n                       (at s within {0..t})\n 2. \\<lbrakk>s \\<in> {0..t}; i = vid1\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           if i = vid1 then sol t $ vid1\n                           else 0) has_derivative\n                       (\\<lambda>xa.\n                           xa *\\<^sub>R\n                           (if i = vid1\n                            then sterm_sem I (f1 fid1 vid1)\n                                  (\\<chi>i.\nif i = vid1 then sol s $ vid1 else 0)\n                            else 0)))\n                       (at s within {0..t})", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> {0..t}; i \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           if i = vid1 then sol t $ vid1\n                           else 0) has_derivative\n                       (\\<lambda>xa.\n                           xa *\\<^sub>R\n                           (if i = vid1\n                            then sterm_sem I (f1 fid1 vid1)\n                                  (\\<chi>i.\nif i = vid1 then sol s $ vid1 else 0)\n                            else 0)))\n                       (at s within {0..t})", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> {0..t}; i = vid1\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           if i = vid1 then sol t $ vid1\n                           else 0) has_derivative\n                       (\\<lambda>xa.\n                           xa *\\<^sub>R\n                           (if i = vid1\n                            then sterm_sem I (f1 fid1 vid1)\n                                  (\\<chi>i.\nif i = vid1 then sol s $ vid1 else 0)\n                            else 0)))\n                       (at s within {0..t})", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i = vid1; 0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t. sol t $ vid1) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           sterm_sem I (f1 fid1 vid1)\n                            (\\<chi>i.\n                                if i = vid1 then sol s $ vid1 else 0)))\n                       (at s within {0..t})", "using has_derivative_proj[OF sol_deriv_eq[of s], of vid1]"], ["proof (prove)\nusing this:\n  s \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>x.\n       if vid1 = vid1\n       then (\\<chi>i. if i = vid1 then sol x $ vid1 else 0) $ vid1\n       else 0) has_derivative\n   (\\<lambda>h.\n       if vid1 = vid1\n       then h *\n            sterm_sem I (f1 fid1 vid1)\n             (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n       else 0))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i = vid1; 0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t. sol t $ vid1) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           sterm_sem I (f1 fid1 vid1)\n                            (\\<chi>i.\n                                if i = vid1 then sol s $ vid1 else 0)))\n                       (at s within {0..t})", "using  yup maybe[of s] almost almost'[of s]"], ["proof (prove)\nusing this:\n  s \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>x.\n       if vid1 = vid1\n       then (\\<chi>i. if i = vid1 then sol x $ vid1 else 0) $ vid1\n       else 0) has_derivative\n   (\\<lambda>h.\n       if vid1 = vid1\n       then h *\n            sterm_sem I (f1 fid1 vid1)\n             (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n       else 0))\n   (at s within {0..t})\n  (\\<lambda>t.\n      (\\<chi>i.\n          if i = vid1\n          then (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) $ vid1\n          else 0) $\n      vid1) =\n  (\\<lambda>t. sol t $ vid1)\n  (\\<lambda>xa.\n      xa *\n      sterm_sem I (f1 fid1 vid1)\n       (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)) =\n  (\\<lambda>xa.\n      (\\<chi>i.\n          if i = vid1\n          then xa *\n               sterm_sem I (f1 fid1 vid1)\n                (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n          else 0) $\n      vid1)\n  (\\<lambda>x.\n      if vid1 = vid1\n      then (\\<chi>i. if i = vid1 then sol x $ vid1 else 0) $ vid1 else 0) =\n  (\\<lambda>x. (\\<chi>i. if i = vid1 then sol x $ vid1 else 0) $ vid1)\n  (\\<lambda>h.\n      if vid1 = vid1\n      then h *\n           sterm_sem I (f1 fid1 vid1)\n            (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n      else 0) =\n  (\\<lambda>h.\n      h *\n      sterm_sem I (f1 fid1 vid1)\n       (\\<chi>i. if i = vid1 then sol s $ vid1 else 0))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i = vid1; 0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t. sol t $ vid1) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           sterm_sem I (f1 fid1 vid1)\n                            (\\<chi>i.\n                                if i = vid1 then sol s $ vid1 else 0)))\n                       (at s within {0..t})", "by fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?x9 \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t.\n       \\<chi>i. if i = vid1 then sol t $ vid1 else 0) has_derivative\n   (\\<lambda>xa.\n       \\<chi>i.\n          xa *\\<^sub>R\n          (if i = vid1\n           then sterm_sem I (f1 fid1 vid1)\n                 (\\<chi>i. if i = vid1 then sol ?x9 $ vid1 else 0)\n           else 0)))\n   (at ?x9 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have derEq:\"\\<And>s. (\\<lambda>xa. (\\<chi> i. xa *\\<^sub>R (if i = vid1 then sterm_sem I (f1 fid1 vid1) (\\<chi> i. if i = vid1 then sol s $ vid1 else 0) else 0)))\n = (\\<lambda>xa. xa *\\<^sub>R (\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (\\<chi> i. if i = vid1 then sol s $ vid1 else 0) else 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       (\\<lambda>xa.\n           \\<chi>i.\n              xa *\\<^sub>R\n              (if i = vid1\n               then sterm_sem I (f1 fid1 vid1)\n                     (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n               else 0)) =\n       (\\<lambda>xa.\n           xa *\\<^sub>R\n           (\\<chi>i.\n               if i = vid1\n               then sterm_sem I (f1 fid1 vid1)\n                     (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n               else 0))", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>xa.\n        \\<chi>i.\n           xa *\\<^sub>R\n           (if i = vid1\n            then sterm_sem I (f1 fid1 vid1)\n                  (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n            else 0)) =\n    (\\<lambda>xa.\n        xa *\\<^sub>R\n        (\\<chi>i.\n            if i = vid1\n            then sterm_sem I (f1 fid1 vid1)\n                  (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n            else 0))", "apply (rule ext, rule vec_extensionality)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa i.\n       (\\<chi>i.\n           xa *\\<^sub>R\n           (if i = vid1\n            then sterm_sem I (f1 fid1 vid1)\n                  (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n            else 0)) $\n       i =\n       (xa *\\<^sub>R\n        (\\<chi>i.\n            if i = vid1\n            then sterm_sem I (f1 fid1 vid1)\n                  (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n            else 0)) $\n       i", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>xa.\n      \\<chi>i.\n         xa *\\<^sub>R\n         (if i = vid1\n          then sterm_sem I (f1 fid1 vid1)\n                (\\<chi>i. if i = vid1 then sol ?s9 $ vid1 else 0)\n          else 0)) =\n  (\\<lambda>xa.\n      xa *\\<^sub>R\n      (\\<chi>i.\n          if i = vid1\n          then sterm_sem I (f1 fid1 vid1)\n                (\\<chi>i. if i = vid1 then sol ?s9 $ vid1 else 0)\n          else 0))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have \"\\<And>x. x \\<in> {0..t} \\<Longrightarrow>\n     ((\\<lambda>t. \\<chi> i. if i = vid1 then sol t $ vid1 else 0) has_derivative\n      (\\<lambda>xa. xa *\\<^sub>R (\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (\\<chi> i. if i = vid1 then sol x $ vid1 else 0) else 0)))\n      (at x within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>t.\n            \\<chi>i. if i = vid1 then sol t $ vid1 else 0) has_derivative\n        (\\<lambda>xa.\n            xa *\\<^sub>R\n            (\\<chi>i.\n                if i = vid1\n                then sterm_sem I (f1 fid1 vid1)\n                      (\\<chi>i. if i = vid1 then sol x $ vid1 else 0)\n                else 0)))\n        (at x within {0..t})", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>t.\n         \\<chi>i. if i = vid1 then sol t $ vid1 else 0) has_derivative\n     (\\<lambda>xa.\n         xa *\\<^sub>R\n         (\\<chi>i.\n             if i = vid1\n             then sterm_sem I (f1 fid1 vid1)\n                   (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n             else 0)))\n     (at s within {0..t})", "using deriv'[of s] derEq[of s]"], ["proof (prove)\nusing this:\n  s \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t.\n       \\<chi>i. if i = vid1 then sol t $ vid1 else 0) has_derivative\n   (\\<lambda>xa.\n       \\<chi>i.\n          xa *\\<^sub>R\n          (if i = vid1\n           then sterm_sem I (f1 fid1 vid1)\n                 (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n           else 0)))\n   (at s within {0..t})\n  (\\<lambda>xa.\n      \\<chi>i.\n         xa *\\<^sub>R\n         (if i = vid1\n          then sterm_sem I (f1 fid1 vid1)\n                (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n          else 0)) =\n  (\\<lambda>xa.\n      xa *\\<^sub>R\n      (\\<chi>i.\n          if i = vid1\n          then sterm_sem I (f1 fid1 vid1)\n                (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n          else 0))\n\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>t.\n         \\<chi>i. if i = vid1 then sol t $ vid1 else 0) has_derivative\n     (\\<lambda>xa.\n         xa *\\<^sub>R\n         (\\<chi>i.\n             if i = vid1\n             then sterm_sem I (f1 fid1 vid1)\n                   (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n             else 0)))\n     (at s within {0..t})", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?x9 \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t.\n       \\<chi>i. if i = vid1 then sol t $ vid1 else 0) has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       (\\<chi>i.\n           if i = vid1\n           then sterm_sem I (f1 fid1 vid1)\n                 (\\<chi>i. if i = vid1 then sol ?x9 $ vid1 else 0)\n           else 0)))\n   (at ?x9 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "then"], ["proof (chain)\npicking this:\n  ?x9 \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t.\n       \\<chi>i. if i = vid1 then sol t $ vid1 else 0) has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       (\\<chi>i.\n           if i = vid1\n           then sterm_sem I (f1 fid1 vid1)\n                 (\\<chi>i. if i = vid1 then sol ?x9 $ vid1 else 0)\n           else 0)))\n   (at ?x9 within {0..t})", "have deriv:\"((\\<lambda>t. \\<chi> i. if i = vid1 then sol t $ vid1 else 0) has_vderiv_on\n        (\\<lambda>t. \\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (\\<chi> i. if i = vid1 then sol t $ vid1 else 0) else 0))\n        {0..t}\""], ["proof (prove)\nusing this:\n  ?x9 \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t.\n       \\<chi>i. if i = vid1 then sol t $ vid1 else 0) has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       (\\<chi>i.\n           if i = vid1\n           then sterm_sem I (f1 fid1 vid1)\n                 (\\<chi>i. if i = vid1 then sol ?x9 $ vid1 else 0)\n           else 0)))\n   (at ?x9 within {0..t})\n\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         \\<chi>i. if i = vid1 then sol t $ vid1 else 0) has_vderiv_on\n     (\\<lambda>t.\n         \\<chi>i.\n            if i = vid1\n            then sterm_sem I (f1 fid1 vid1)\n                  (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)\n            else 0))\n     {0..t}", "unfolding has_vderiv_on_def has_vector_derivative_def"], ["proof (prove)\nusing this:\n  ?x9 \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t.\n       \\<chi>i. if i = vid1 then sol t $ vid1 else 0) has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       (\\<chi>i.\n           if i = vid1\n           then sterm_sem I (f1 fid1 vid1)\n                 (\\<chi>i. if i = vid1 then sol ?x9 $ vid1 else 0)\n           else 0)))\n   (at ?x9 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{0..t}.\n       ((\\<lambda>t.\n            \\<chi>i. if i = vid1 then sol t $ vid1 else 0) has_derivative\n        (\\<lambda>xa.\n            xa *\\<^sub>R\n            (\\<chi>i.\n                if i = vid1\n                then sterm_sem I (f1 fid1 vid1)\n                      (\\<chi>i. if i = vid1 then sol x $ vid1 else 0)\n                else 0)))\n        (at x within {0..t})", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>t. \\<chi>i. if i = vid1 then sol t $ vid1 else 0) has_vderiv_on\n   (\\<lambda>t.\n       \\<chi>i.\n          if i = vid1\n          then sterm_sem I (f1 fid1 vid1)\n                (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)\n          else 0))\n   {0..t}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have pre2:\"(?sol solves_ode (\\<lambda>a b. \\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0)) {0..t}\n     {x. Predicates I vid1\n          (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n                 (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) x))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t. \\<chi>i. if i = vid1 then sol t $ vid1 else 0) solves_ode\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n     {0..t}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (a, b) x))}", "apply(rule solves_odeI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((\\<lambda>t.\n         \\<chi>i. if i = vid1 then sol t $ vid1 else 0) has_vderiv_on\n     (\\<lambda>t.\n         \\<chi>i.\n            if i = vid1\n            then sterm_sem I (f1 fid1 vid1)\n                  (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)\n            else 0))\n     {0..t}\n 2. \\<And>ta.\n       ta \\<in> {0..t} \\<Longrightarrow>\n       (\\<chi>i. if i = vid1 then sol ta $ vid1 else 0)\n       \\<in> {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         \\<chi>i. if i = vid1 then sol t $ vid1 else 0) has_vderiv_on\n     (\\<lambda>t.\n         \\<chi>i.\n            if i = vid1\n            then sterm_sem I (f1 fid1 vid1)\n                  (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)\n            else 0))\n     {0..t}", "by (rule deriv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ta.\n       ta \\<in> {0..t} \\<Longrightarrow>\n       (\\<chi>i. if i = vid1 then sol ta $ vid1 else 0)\n       \\<in> {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))}", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n    \\<in> {x. Predicates I vid1\n               (\\<chi>i.\n                   dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                    (mk_v I\n                      (OSing vid1\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      (a, b) x))}", "using constraint"], ["proof (prove)\nusing this:\n  0 \\<le> ?s9 \\<and> ?s9 \\<le> t \\<Longrightarrow>\n  Predicates I vid1\n   (\\<chi>i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol ?s9 $ vid1 else 0)))\n\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    (\\<chi>i. if i = vid1 then sol s $ vid1 else 0)\n    \\<in> {x. Predicates I vid1\n               (\\<chi>i.\n                   dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                    (mk_v I\n                      (OSing vid1\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      (a, b) x))}", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ((\\<lambda>t. \\<chi>i. if i = vid1 then sol t $ vid1 else 0) solves_ode\n   (\\<lambda>a b.\n       \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n   {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (mk_v I\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (a, b) x))}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have pre3:\"VSagree (?sol 0) a {u. u = vid1 \\<or> (\\<exists>x. Inl u \\<in> FVT (if x = vid1 then trm.Var vid1 else Const 0))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. VSagree (\\<chi>i. if i = vid1 then sol 0 $ vid1 else 0) a\n     {u. u = vid1 \\<or>\n         (\\<exists>x.\n             Inl u \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "using vne12 VSag"], ["proof (prove)\nusing this:\n  vid1 \\<noteq> vid2\n  VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n   {x. x = vid2 \\<or>\n       x = vid1 \\<or>\n       x = vid2 \\<or>\n       x = vid1 \\<or>\n       Inl x \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or> x = vid1}\n\ngoal (1 subgoal):\n 1. VSagree (\\<chi>i. if i = vid1 then sol 0 $ vid1 else 0) a\n     {u. u = vid1 \\<or>\n         (\\<exists>x.\n             Inl u \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "unfolding VSagree_def"], ["proof (prove)\nusing this:\n  vid1 \\<noteq> vid2\n  \\<forall>i\\<in>{x. x = vid2 \\<or>\n                     x = vid1 \\<or>\n                     x = vid2 \\<or>\n                     x = vid1 \\<or>\n                     Inl x \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n                     x = vid1}.\n     sol 0 $ i = (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y) $ i\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{u. u = vid1 \\<or>\n                       (\\<exists>x.\n                           Inl u\n                           \\<in> FVT (if x = vid1 then Var vid1\nelse Const 0))}.\n       (\\<chi>i. if i = vid1 then sol 0 $ vid1 else 0) $ i = a $ i", "by simp"], ["proof (state)\nthis:\n  VSagree (\\<chi>i. if i = vid1 then sol 0 $ vid1 else 0) a\n   {u. u = vid1 \\<or>\n       (\\<exists>x.\n           Inl u \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have bigPre:\"(\\<exists>sol t. ?aaba' = mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))) (a, b) (sol t) \\<and>\n                      0 \\<le> t \\<and>\n                      (sol solves_ode (\\<lambda>a b. \\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0)) {0..t}\n                       {x. Predicates I vid1\n                            (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n                                   (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))) (a, b) x))} \\<and>\n                      VSagree (sol 0) a {u. u = vid1 \\<or> (\\<exists>x. Inl u \\<in> FVT (if x = vid1 then Var vid1 else Const 0))})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>sola ta.\n       mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) =\n       mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (sola ta) \\<and>\n       0 \\<le> ta \\<and>\n       (sola solves_ode\n        (\\<lambda>a b.\n            \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n        {0..ta}\n        {x. Predicates I vid1\n             (\\<chi>i.\n                 dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (mk_v I\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (a, b) x))} \\<and>\n       VSagree (sola 0) a\n        {u. u = vid1 \\<or>\n            (\\<exists>x.\n                Inl u \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "apply(rule exI[where x=\"?sol\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ta.\n       mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) =\n       mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol ta $ vid1 else 0) \\<and>\n       0 \\<le> ta \\<and>\n       ((\\<lambda>t.\n            \\<chi>i. if i = vid1 then sol t $ vid1 else 0) solves_ode\n        (\\<lambda>a b.\n            \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n        {0..ta}\n        {x. Predicates I vid1\n             (\\<chi>i.\n                 dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (mk_v I\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (a, b) x))} \\<and>\n       VSagree (\\<chi>i. if i = vid1 then sol 0 $ vid1 else 0) a\n        {u. u = vid1 \\<or>\n            (\\<exists>x.\n                Inl u \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "apply(rule exI[where x=t])"], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) =\n    mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) \\<and>\n    0 \\<le> t \\<and>\n    ((\\<lambda>t. \\<chi>i. if i = vid1 then sol t $ vid1 else 0) solves_ode\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n     {0..t}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (a, b) x))} \\<and>\n    VSagree (\\<chi>i. if i = vid1 then sol 0 $ vid1 else 0) a\n     {u. u = vid1 \\<or>\n         (\\<exists>x.\n             Inl u \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) =\n    mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)\n 2. 0 \\<le> t \\<and>\n    ((\\<lambda>t. \\<chi>i. if i = vid1 then sol t $ vid1 else 0) solves_ode\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n     {0..t}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (a, b) x))} \\<and>\n    VSagree (\\<chi>i. if i = vid1 then sol 0 $ vid1 else 0) a\n     {u. u = vid1 \\<or>\n         (\\<exists>x.\n             Inl u \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "apply(rule pre1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> t \\<and>\n    ((\\<lambda>t. \\<chi>i. if i = vid1 then sol t $ vid1 else 0) solves_ode\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n     {0..t}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (a, b) x))} \\<and>\n    VSagree (\\<chi>i. if i = vid1 then sol 0 $ vid1 else 0) a\n     {u. u = vid1 \\<or>\n         (\\<exists>x.\n             Inl u \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 \\<le> t\n 2. ((\\<lambda>t. \\<chi>i. if i = vid1 then sol t $ vid1 else 0) solves_ode\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n     {0..t}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (a, b) x))} \\<and>\n    VSagree (\\<chi>i. if i = vid1 then sol 0 $ vid1 else 0) a\n     {u. u = vid1 \\<or>\n         (\\<exists>x.\n             Inl u \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "apply(rule t)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t. \\<chi>i. if i = vid1 then sol t $ vid1 else 0) solves_ode\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n     {0..t}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (a, b) x))} \\<and>\n    VSagree (\\<chi>i. if i = vid1 then sol 0 $ vid1 else 0) a\n     {u. u = vid1 \\<or>\n         (\\<exists>x.\n             Inl u \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((\\<lambda>t. \\<chi>i. if i = vid1 then sol t $ vid1 else 0) solves_ode\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n     {0..t}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (a, b) x))}\n 2. VSagree (\\<chi>i. if i = vid1 then sol 0 $ vid1 else 0) a\n     {u. u = vid1 \\<or>\n         (\\<exists>x.\n             Inl u \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "apply(rule pre2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. VSagree (\\<chi>i. if i = vid1 then sol 0 $ vid1 else 0) a\n     {u. u = vid1 \\<or>\n         (\\<exists>x.\n             Inl u \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "by(rule pre3)"], ["proof (state)\nthis:\n  \\<exists>sola ta.\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sola ta) \\<and>\n     0 \\<le> ta \\<and>\n     (sola solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..ta}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))} \\<and>\n     VSagree (sola 0) a\n      {u. u = vid1 \\<or>\n          (\\<exists>x.\n              Inl u \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have pred2:\"Predicates I vid2 (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) ?aaba')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Predicates I vid2\n     (\\<chi>i.\n         dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n          (mk_v I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)))", "using bigEx bigPre"], ["proof (prove)\nusing this:\n  (\\<exists>sola ta.\n      mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) =\n      mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (sola ta) \\<and>\n      0 \\<le> ta \\<and>\n      (sola solves_ode\n       (\\<lambda>a b.\n           \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n       {0..ta}\n       {x. Predicates I vid1\n            (\\<chi>i.\n                dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                 (mk_v I\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   (a, b) x))} \\<and>\n      VSagree (sola 0) a\n       {uu.\n        uu = vid1 \\<or>\n        (\\<exists>x.\n            Inl uu\n            \\<in> FVT (if x = vid1 then Var vid1\n                       else Const 0))}) \\<longrightarrow>\n  Predicates I vid2\n   (\\<chi>i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)))\n  \\<exists>sola ta.\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sola ta) \\<and>\n     0 \\<le> ta \\<and>\n     (sola solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..ta}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))} \\<and>\n     VSagree (sola 0) a\n      {u. u = vid1 \\<or>\n          (\\<exists>x.\n              Inl u \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\n\ngoal (1 subgoal):\n 1. Predicates I vid2\n     (\\<chi>i.\n         dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n          (mk_v I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)))", "by auto"], ["proof (state)\nthis:\n  Predicates I vid2\n   (\\<chi>i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "then"], ["proof (chain)\npicking this:\n  Predicates I vid2\n   (\\<chi>i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)))", "have pred2':\"?aaba' \\<in> fml_sem I (p1 vid2 vid1)\""], ["proof (prove)\nusing this:\n  Predicates I vid2\n   (\\<chi>i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)))\n\ngoal (1 subgoal):\n 1. mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)\n    \\<in> fml_sem I (p1 vid2 vid1)", "unfolding p1_def expand_singleton"], ["proof (prove)\nusing this:\n  Predicates I vid2\n   (\\<chi>i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)))\n\ngoal (1 subgoal):\n 1. mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)\n    \\<in> fml_sem I\n           ($\\<phi> vid2\n             (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))", "by auto"], ["proof (state)\nthis:\n  mk_v I\n   (OSing vid1\n     ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n   (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)\n  \\<in> fml_sem I (p1 vid2 vid1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "let ?res_state = \"(mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                        ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n            (\\<chi> y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have aabaX:\"(fst ?aaba') $ vid1 = sol t $ vid1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n    vid1 =\n    sol t $ vid1", "using aaba mk_v_agree[of \"I\" \"(OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\"\n \"(a, b)\" \"(?sol t)\"]"], ["proof (prove)\nusing this:\n  (aa, ba) =\n  mk_v I\n   (OProd\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (OSing vid2\n       (Plus\n         (Times\n           ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (Var vid2))\n         ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n   (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (a, b)\n   (- semBV I\n       (OSing vid1\n         ($f fid1\n           (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))) \\<and>\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (mk_xode I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (semBV I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\n\ngoal (1 subgoal):\n 1. fst (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n    vid1 =\n    sol t $ vid1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(aa, ba) =\n             mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     Vagree\n      (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (a, b)\n      (- semBV I\n          (OSing vid1\n            ($f fid1\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))) \\<and>\n     Vagree\n      (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (mk_xode I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (semBV I\n        (OSing vid1\n          ($f fid1\n            (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            (a, b)\n                            (\\<chi>i.\n                                if i = vid1 then sol t $ vid1 else 0)) $\n                      vid1 =\n                      sol t $ vid1", "assume \" Vagree (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (\\<chi> i. if i = vid1 then sol t $ vid1 else 0))\n     (a, b) (- semBV I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))) \\<and>\n   Vagree (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (\\<chi> i. if i = vid1 then sol t $ vid1 else 0))\n     (mk_xode I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (\\<chi> i. if i = vid1 then sol t $ vid1 else 0))\n     (semBV I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))))\""], ["proof (state)\nthis:\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (a, b)\n   (- semBV I\n       (OSing vid1\n         ($f fid1\n           (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))) \\<and>\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (mk_xode I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (semBV I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(aa, ba) =\n             mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     Vagree\n      (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (a, b)\n      (- semBV I\n          (OSing vid1\n            ($f fid1\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))) \\<and>\n     Vagree\n      (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (mk_xode I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (semBV I\n        (OSing vid1\n          ($f fid1\n            (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            (a, b)\n                            (\\<chi>i.\n                                if i = vid1 then sol t $ vid1 else 0)) $\n                      vid1 =\n                      sol t $ vid1", "then"], ["proof (chain)\npicking this:\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (a, b)\n   (- semBV I\n       (OSing vid1\n         ($f fid1\n           (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))) \\<and>\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (mk_xode I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (semBV I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))", "have ag:\" Vagree (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (?sol t))\n   (mk_xode I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (?sol t))\n   (semBV I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))))\""], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (a, b)\n   (- semBV I\n       (OSing vid1\n         ($f fid1\n           (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))) \\<and>\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (mk_xode I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (semBV I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n     (mk_xode I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n     (semBV I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))", "by auto"], ["proof (state)\nthis:\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (mk_xode I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (semBV I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(aa, ba) =\n             mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     Vagree\n      (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (a, b)\n      (- semBV I\n          (OSing vid1\n            ($f fid1\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))) \\<and>\n     Vagree\n      (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (mk_xode I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (semBV I\n        (OSing vid1\n          ($f fid1\n            (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            (a, b)\n                            (\\<chi>i.\n                                if i = vid1 then sol t $ vid1 else 0)) $\n                      vid1 =\n                      sol t $ vid1", "have sembv:\"(semBV I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))) = {Inl vid1, Inr vid1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semBV I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))) =\n    {Inl vid1, Inr vid1}", "by auto"], ["proof (state)\nthis:\n  semBV I\n   (OSing vid1\n     ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))) =\n  {Inl vid1, Inr vid1}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(aa, ba) =\n             mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     Vagree\n      (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (a, b)\n      (- semBV I\n          (OSing vid1\n            ($f fid1\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))) \\<and>\n     Vagree\n      (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (mk_xode I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (semBV I\n        (OSing vid1\n          ($f fid1\n            (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            (a, b)\n                            (\\<chi>i.\n                                if i = vid1 then sol t $ vid1 else 0)) $\n                      vid1 =\n                      sol t $ vid1", "have sub:\"{Inl vid1} \\<subseteq> {Inl vid1, Inr vid1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {Inl vid1} \\<subseteq> {Inl vid1, Inr vid1}", "by auto"], ["proof (state)\nthis:\n  {Inl vid1} \\<subseteq> {Inl vid1, Inr vid1}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(aa, ba) =\n             mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     Vagree\n      (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (a, b)\n      (- semBV I\n          (OSing vid1\n            ($f fid1\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))) \\<and>\n     Vagree\n      (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (mk_xode I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (semBV I\n        (OSing vid1\n          ($f fid1\n            (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            (a, b)\n                            (\\<chi>i.\n                                if i = vid1 then sol t $ vid1 else 0)) $\n                      vid1 =\n                      sol t $ vid1", "have ag':\"Vagree (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (?sol t))\n          (mk_xode I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (?sol t)) {Inl vid1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n     (mk_xode I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n     {Inl vid1}", "using ag agree_sub[OF sub] sembv"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (mk_xode I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (semBV I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\n  Vagree ?\\<nu> ?\\<omega> {Inl vid1, Inr vid1} \\<Longrightarrow>\n  Vagree ?\\<nu> ?\\<omega> {Inl vid1}\n  semBV I\n   (OSing vid1\n     ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))) =\n  {Inl vid1, Inr vid1}\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n     (mk_xode I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n     {Inl vid1}", "by auto"], ["proof (state)\nthis:\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (mk_xode I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   {Inl vid1}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(aa, ba) =\n             mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     Vagree\n      (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (a, b)\n      (- semBV I\n          (OSing vid1\n            ($f fid1\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))) \\<and>\n     Vagree\n      (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (mk_xode I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (semBV I\n        (OSing vid1\n          ($f fid1\n            (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            (a, b)\n                            (\\<chi>i.\n                                if i = vid1 then sol t $ vid1 else 0)) $\n                      vid1 =\n                      sol t $ vid1", "then"], ["proof (chain)\npicking this:\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (mk_xode I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   {Inl vid1}", "have eq1:\"fst (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (?sol t)) $ vid1 \n          = fst (mk_xode I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (?sol t)) $ vid1\""], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (mk_xode I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   {Inl vid1}\n\ngoal (1 subgoal):\n 1. fst (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n    vid1 =\n    fst (mk_xode I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n    vid1", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  (\\<forall>i.\n      Inl i \\<in> {Inl vid1} \\<longrightarrow>\n      fst (mk_v I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n      i =\n      fst (mk_xode I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> {Inl vid1} \\<longrightarrow>\n      snd (mk_v I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n      i =\n      snd (mk_xode I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n      i)\n\ngoal (1 subgoal):\n 1. fst (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n    vid1 =\n    fst (mk_xode I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n    vid1", "by auto"], ["proof (state)\nthis:\n  fst (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n  vid1 =\n  fst (mk_xode I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n  vid1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(aa, ba) =\n             mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     Vagree\n      (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (a, b)\n      (- semBV I\n          (OSing vid1\n            ($f fid1\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))) \\<and>\n     Vagree\n      (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (mk_xode I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (semBV I\n        (OSing vid1\n          ($f fid1\n            (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            (a, b)\n                            (\\<chi>i.\n                                if i = vid1 then sol t $ vid1 else 0)) $\n                      vid1 =\n                      sol t $ vid1", "moreover"], ["proof (state)\nthis:\n  fst (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n  vid1 =\n  fst (mk_xode I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n  vid1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(aa, ba) =\n             mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     Vagree\n      (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (a, b)\n      (- semBV I\n          (OSing vid1\n            ($f fid1\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))) \\<and>\n     Vagree\n      (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (mk_xode I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (semBV I\n        (OSing vid1\n          ($f fid1\n            (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            (a, b)\n                            (\\<chi>i.\n                                if i = vid1 then sol t $ vid1 else 0)) $\n                      vid1 =\n                      sol t $ vid1", "have \"... = sol t $ vid1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (mk_xode I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n    vid1 =\n    sol t $ vid1", "by auto"], ["proof (state)\nthis:\n  fst (mk_xode I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n  vid1 =\n  sol t $ vid1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(aa, ba) =\n             mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     Vagree\n      (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (a, b)\n      (- semBV I\n          (OSing vid1\n            ($f fid1\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))) \\<and>\n     Vagree\n      (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (mk_xode I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n      (semBV I\n        (OSing vid1\n          ($f fid1\n            (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\\<rbrakk>\n    \\<Longrightarrow> fst (mk_v I\n                            (OSing vid1\n                              ($f fid1\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1\n                                    else Const 0)))\n                            (a, b)\n                            (\\<chi>i.\n                                if i = vid1 then sol t $ vid1 else 0)) $\n                      vid1 =\n                      sol t $ vid1", "ultimately"], ["proof (chain)\npicking this:\n  fst (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n  vid1 =\n  fst (mk_xode I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n  vid1\n  fst (mk_xode I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n  vid1 =\n  sol t $ vid1", "show ?thesis"], ["proof (prove)\nusing this:\n  fst (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n  vid1 =\n  fst (mk_xode I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n  vid1\n  fst (mk_xode I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n  vid1 =\n  sol t $ vid1\n\ngoal (1 subgoal):\n 1. fst (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n    vid1 =\n    sol t $ vid1", "by auto"], ["proof (state)\nthis:\n  fst (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n  vid1 =\n  sol t $ vid1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n  vid1 =\n  sol t $ vid1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have res_stateX:\"(fst ?res_state) $ vid1 = sol t $ vid1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n    vid1 =\n    sol t $ vid1", "using mk_v_agree[of I \"(OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                        ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\"\n            \"(\\<chi> y. if vid2 = y then 0 else fst (a, b) $ y, b)\" \"(sol t)\"]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n   (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n   (- semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i.\n                   if i = vid1 then Var vid1 else Const 0)))))) \\<and>\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n   (mk_xode I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (sol t))\n   (semBV I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3\n             (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))))\n\ngoal (1 subgoal):\n 1. fst (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n    vid1 =\n    sol t $ vid1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n     (- semBV I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (OSing vid2\n             (Plus\n               (Times\n                 ($f fid2\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                 (Var vid2))\n               ($f fid3\n                 (\\<lambda>i.\n                     if i = vid1 then Var vid1 else Const 0)))))) \\<and>\n    Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (mk_xode I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (sol t))\n     (semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i.\n                   if i = vid1 then Var vid1\n                   else Const 0)))))) \\<Longrightarrow>\n    fst (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n    vid1 =\n    sol t $ vid1", "assume \"Vagree (mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                     (OSing vid2\n                       (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                         ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n             (\\<chi> y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (\\<chi> y. if vid2 = y then 0 else fst (a, b) $ y, b)\n     (- semBV I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                  (OSing vid2\n                    (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                      ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))) \\<and>\n    Vagree (mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                     (OSing vid2\n                       (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                         ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n             (\\<chi> y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (mk_xode I\n       (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n             ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n       (sol t))\n     (semBV I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                    ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))))))\""], ["proof (state)\nthis:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n   (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n   (- semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i.\n                   if i = vid1 then Var vid1 else Const 0)))))) \\<and>\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n   (mk_xode I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (sol t))\n   (semBV I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3\n             (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))))\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n     (- semBV I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (OSing vid2\n             (Plus\n               (Times\n                 ($f fid2\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                 (Var vid2))\n               ($f fid3\n                 (\\<lambda>i.\n                     if i = vid1 then Var vid1 else Const 0)))))) \\<and>\n    Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (mk_xode I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (sol t))\n     (semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i.\n                   if i = vid1 then Var vid1\n                   else Const 0)))))) \\<Longrightarrow>\n    fst (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n    vid1 =\n    sol t $ vid1", "then"], ["proof (chain)\npicking this:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n   (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n   (- semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i.\n                   if i = vid1 then Var vid1 else Const 0)))))) \\<and>\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n   (mk_xode I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (sol t))\n   (semBV I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3\n             (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))))", "have ag:\" Vagree (mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                 (OSing vid2\n                   (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                     ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n         (\\<chi> y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n (mk_xode I\n   (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n     (OSing vid2\n       (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n         ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n   (sol t))\n (semBV I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))))))\""], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n   (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n   (- semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i.\n                   if i = vid1 then Var vid1 else Const 0)))))) \\<and>\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n   (mk_xode I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (sol t))\n   (semBV I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3\n             (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))))\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (mk_xode I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (sol t))\n     (semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))))", "by auto"], ["proof (state)\nthis:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n   (mk_xode I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (sol t))\n   (semBV I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3\n             (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))))\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n     (- semBV I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (OSing vid2\n             (Plus\n               (Times\n                 ($f fid2\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                 (Var vid2))\n               ($f fid3\n                 (\\<lambda>i.\n                     if i = vid1 then Var vid1 else Const 0)))))) \\<and>\n    Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (mk_xode I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (sol t))\n     (semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i.\n                   if i = vid1 then Var vid1\n                   else Const 0)))))) \\<Longrightarrow>\n    fst (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n    vid1 =\n    sol t $ vid1", "have sembv:\"(semBV I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))) = {Inl vid1, Inr vid1, Inl vid2, Inr vid2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semBV I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3\n             (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))) =\n    {Inl vid1, Inr vid1, Inl vid2, Inr vid2}", "by auto"], ["proof (state)\nthis:\n  semBV I\n   (OProd\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (OSing vid2\n       (Plus\n         (Times\n           ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (Var vid2))\n         ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))) =\n  {Inl vid1, Inr vid1, Inl vid2, Inr vid2}\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n     (- semBV I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (OSing vid2\n             (Plus\n               (Times\n                 ($f fid2\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                 (Var vid2))\n               ($f fid3\n                 (\\<lambda>i.\n                     if i = vid1 then Var vid1 else Const 0)))))) \\<and>\n    Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (mk_xode I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (sol t))\n     (semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i.\n                   if i = vid1 then Var vid1\n                   else Const 0)))))) \\<Longrightarrow>\n    fst (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n    vid1 =\n    sol t $ vid1", "have sub:\"{Inl vid1} \\<subseteq> {Inl vid1, Inr vid1, Inl vid2, Inr vid2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {Inl vid1} \\<subseteq> {Inl vid1, Inr vid1, Inl vid2, Inr vid2}", "by auto"], ["proof (state)\nthis:\n  {Inl vid1} \\<subseteq> {Inl vid1, Inr vid1, Inl vid2, Inr vid2}\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n     (- semBV I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (OSing vid2\n             (Plus\n               (Times\n                 ($f fid2\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                 (Var vid2))\n               ($f fid3\n                 (\\<lambda>i.\n                     if i = vid1 then Var vid1 else Const 0)))))) \\<and>\n    Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (mk_xode I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (sol t))\n     (semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i.\n                   if i = vid1 then Var vid1\n                   else Const 0)))))) \\<Longrightarrow>\n    fst (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n    vid1 =\n    sol t $ vid1", "have ag':\"Vagree (mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                 (OSing vid2\n                   (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                     ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n         (\\<chi> y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n   (mk_xode I\n     (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n     (sol t)) {Inl vid1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (mk_xode I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (sol t))\n     {Inl vid1}", "using ag sembv agree_sub[OF sub]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n   (mk_xode I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (sol t))\n   (semBV I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3\n             (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))))\n  semBV I\n   (OProd\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (OSing vid2\n       (Plus\n         (Times\n           ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (Var vid2))\n         ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))) =\n  {Inl vid1, Inr vid1, Inl vid2, Inr vid2}\n  Vagree ?\\<nu> ?\\<omega>\n   {Inl vid1, Inr vid1, Inl vid2, Inr vid2} \\<Longrightarrow>\n  Vagree ?\\<nu> ?\\<omega> {Inl vid1}\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (mk_xode I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (sol t))\n     {Inl vid1}", "by auto"], ["proof (state)\nthis:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n   (mk_xode I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (sol t))\n   {Inl vid1}\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n     (- semBV I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (OSing vid2\n             (Plus\n               (Times\n                 ($f fid2\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                 (Var vid2))\n               ($f fid3\n                 (\\<lambda>i.\n                     if i = vid1 then Var vid1 else Const 0)))))) \\<and>\n    Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (mk_xode I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (sol t))\n     (semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i.\n                   if i = vid1 then Var vid1\n                   else Const 0)))))) \\<Longrightarrow>\n    fst (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n    vid1 =\n    sol t $ vid1", "then"], ["proof (chain)\npicking this:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n   (mk_xode I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (sol t))\n   {Inl vid1}", "have \"fst ?res_state $ vid1 = fst ((mk_xode I\n     (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n     (sol t))) $ vid1\""], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n   (mk_xode I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (sol t))\n   {Inl vid1}\n\ngoal (1 subgoal):\n 1. fst (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n    vid1 =\n    fst (mk_xode I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (sol t)) $\n    vid1", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  (\\<forall>i.\n      Inl i \\<in> {Inl vid1} \\<longrightarrow>\n      fst (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n      i =\n      fst (mk_xode I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (sol t)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i \\<in> {Inl vid1} \\<longrightarrow>\n      snd (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n      i =\n      snd (mk_xode I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (sol t)) $\n      i)\n\ngoal (1 subgoal):\n 1. fst (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n    vid1 =\n    fst (mk_xode I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (sol t)) $\n    vid1", "by blast"], ["proof (state)\nthis:\n  fst (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (OSing vid2\n            (Plus\n              (Times\n                ($f fid2\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (Var vid2))\n              ($f fid3\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n        (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n  vid1 =\n  fst (mk_xode I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (OSing vid2\n            (Plus\n              (Times\n                ($f fid2\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (Var vid2))\n              ($f fid3\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n        (sol t)) $\n  vid1\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n     (- semBV I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (OSing vid2\n             (Plus\n               (Times\n                 ($f fid2\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                 (Var vid2))\n               ($f fid3\n                 (\\<lambda>i.\n                     if i = vid1 then Var vid1 else Const 0)))))) \\<and>\n    Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (mk_xode I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (sol t))\n     (semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i.\n                   if i = vid1 then Var vid1\n                   else Const 0)))))) \\<Longrightarrow>\n    fst (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n    vid1 =\n    sol t $ vid1", "moreover"], ["proof (state)\nthis:\n  fst (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (OSing vid2\n            (Plus\n              (Times\n                ($f fid2\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (Var vid2))\n              ($f fid3\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n        (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n  vid1 =\n  fst (mk_xode I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (OSing vid2\n            (Plus\n              (Times\n                ($f fid2\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (Var vid2))\n              ($f fid3\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n        (sol t)) $\n  vid1\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n     (- semBV I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (OSing vid2\n             (Plus\n               (Times\n                 ($f fid2\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                 (Var vid2))\n               ($f fid3\n                 (\\<lambda>i.\n                     if i = vid1 then Var vid1 else Const 0)))))) \\<and>\n    Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (mk_xode I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (sol t))\n     (semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i.\n                   if i = vid1 then Var vid1\n                   else Const 0)))))) \\<Longrightarrow>\n    fst (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n    vid1 =\n    sol t $ vid1", "have \"... = sol t $ vid1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (mk_xode I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (sol t)) $\n    vid1 =\n    sol t $ vid1", "by auto"], ["proof (state)\nthis:\n  fst (mk_xode I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (OSing vid2\n            (Plus\n              (Times\n                ($f fid2\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (Var vid2))\n              ($f fid3\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n        (sol t)) $\n  vid1 =\n  sol t $ vid1\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n     (- semBV I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (OSing vid2\n             (Plus\n               (Times\n                 ($f fid2\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                 (Var vid2))\n               ($f fid3\n                 (\\<lambda>i.\n                     if i = vid1 then Var vid1 else Const 0)))))) \\<and>\n    Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (mk_xode I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (sol t))\n     (semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i.\n                   if i = vid1 then Var vid1\n                   else Const 0)))))) \\<Longrightarrow>\n    fst (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n    vid1 =\n    sol t $ vid1", "ultimately"], ["proof (chain)\npicking this:\n  fst (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (OSing vid2\n            (Plus\n              (Times\n                ($f fid2\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (Var vid2))\n              ($f fid3\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n        (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n  vid1 =\n  fst (mk_xode I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (OSing vid2\n            (Plus\n              (Times\n                ($f fid2\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (Var vid2))\n              ($f fid3\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n        (sol t)) $\n  vid1\n  fst (mk_xode I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (OSing vid2\n            (Plus\n              (Times\n                ($f fid2\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (Var vid2))\n              ($f fid3\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n        (sol t)) $\n  vid1 =\n  sol t $ vid1", "show \"?thesis\""], ["proof (prove)\nusing this:\n  fst (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (OSing vid2\n            (Plus\n              (Times\n                ($f fid2\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (Var vid2))\n              ($f fid3\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n        (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n  vid1 =\n  fst (mk_xode I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (OSing vid2\n            (Plus\n              (Times\n                ($f fid2\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (Var vid2))\n              ($f fid3\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n        (sol t)) $\n  vid1\n  fst (mk_xode I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (OSing vid2\n            (Plus\n              (Times\n                ($f fid2\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (Var vid2))\n              ($f fid3\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n        (sol t)) $\n  vid1 =\n  sol t $ vid1\n\ngoal (1 subgoal):\n 1. fst (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n    vid1 =\n    sol t $ vid1", "by linarith"], ["proof (state)\nthis:\n  fst (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (OSing vid2\n            (Plus\n              (Times\n                ($f fid2\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (Var vid2))\n              ($f fid3\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n        (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n  vid1 =\n  sol t $ vid1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (OSing vid2\n            (Plus\n              (Times\n                ($f fid2\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (Var vid2))\n              ($f fid3\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n        (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n  vid1 =\n  sol t $ vid1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have agree:\"Vagree ?aaba' (?res_state) (FVF (p1 vid2 vid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n     (FVF (p1 vid2 vid1))", "unfolding p1_def Vagree_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i\n        \\<in> FVF ($\\<phi> vid2 (singleton (Var vid1))) \\<longrightarrow>\n        fst (mk_v I\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n        i =\n        fst (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n              (sol t)) $\n        i) \\<and>\n    (\\<forall>i.\n        Inr i\n        \\<in> FVF ($\\<phi> vid2 (singleton (Var vid1))) \\<longrightarrow>\n        snd (mk_v I\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n        i =\n        snd (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n              (sol t)) $\n        i)", "using aabaX res_stateX"], ["proof (prove)\nusing this:\n  fst (mk_v I\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n  vid1 =\n  sol t $ vid1\n  fst (mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (OSing vid2\n            (Plus\n              (Times\n                ($f fid2\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (Var vid2))\n              ($f fid3\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n        (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)) $\n  vid1 =\n  sol t $ vid1\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i\n        \\<in> FVF ($\\<phi> vid2 (singleton (Var vid1))) \\<longrightarrow>\n        fst (mk_v I\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n        i =\n        fst (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n              (sol t)) $\n        i) \\<and>\n    (\\<forall>i.\n        Inr i\n        \\<in> FVF ($\\<phi> vid2 (singleton (Var vid1))) \\<longrightarrow>\n        snd (mk_v I\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)) $\n        i =\n        snd (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b)\n              (sol t)) $\n        i)", "by auto"], ["proof (state)\nthis:\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0))\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t))\n   (FVF (p1 vid2 vid1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "have fml_sem_eq:\"(?res_state \\<in> fml_sem I (p1 vid2 vid1)) = (?aaba' \\<in> fml_sem I (p1 vid2 vid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)\n     \\<in> fml_sem I (p1 vid2 vid1)) =\n    (mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)\n     \\<in> fml_sem I (p1 vid2 vid1))", "using coincidence_formula[OF p2safe Iagree_refl agree, of I]"], ["proof (prove)\nusing this:\n  (mk_v I\n    (OSing vid1\n      ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n    (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)\n   \\<in> fml_sem I (p1 vid2 vid1)) =\n  (mk_v I\n    (OProd\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (OSing vid2\n        (Plus\n          (Times\n            ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n            (Var vid2))\n          ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n    (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)\n   \\<in> fml_sem I (p1 vid2 vid1))\n\ngoal (1 subgoal):\n 1. (mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)\n     \\<in> fml_sem I (p1 vid2 vid1)) =\n    (mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)\n     \\<in> fml_sem I (p1 vid2 vid1))", "by auto"], ["proof (state)\nthis:\n  (mk_v I\n    (OProd\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (OSing vid2\n        (Plus\n          (Times\n            ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n            (Var vid2))\n          ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n    (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)\n   \\<in> fml_sem I (p1 vid2 vid1)) =\n  (mk_v I\n    (OSing vid1\n      ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n    (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)\n   \\<in> fml_sem I (p1 vid2 vid1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 \\<chi>i.\n                    if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OSing vid1\n                           ($f fid1\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0)))\n                         (a, b) x))} \\<and>\n            VSagree (sol 0) a\n             {uu_.\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    {x. \\<exists>xa.\n                           Inl x\n                           \\<in> FVT (if xa = vid1 then Var vid1\nelse Const 0)} \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) x))};\n     VSagree (sol 0) (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y)\n      {uu_.\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       uu_ = vid2 \\<or>\n       uu_ = vid1 \\<or>\n       Inl uu_ \\<in> Inl ` {x. x = vid2 \\<or> x = vid1} \\<or>\n       uu_ = vid1}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then 0 else fst (a, b) $ y,\n                               b)\n                              (sol t)))", "then"], ["proof (chain)\npicking this:\n  (mk_v I\n    (OProd\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (OSing vid2\n        (Plus\n          (Times\n            ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n            (Var vid2))\n          ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n    (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)\n   \\<in> fml_sem I (p1 vid2 vid1)) =\n  (mk_v I\n    (OSing vid1\n      ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n    (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)\n   \\<in> fml_sem I (p1 vid2 vid1))", "show \"Predicates I vid2\n     (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n            (mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                      (OSing vid2\n                        (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                          ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n              (\\<chi> y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)))\""], ["proof (prove)\nusing this:\n  (mk_v I\n    (OProd\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (OSing vid2\n        (Plus\n          (Times\n            ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n            (Var vid2))\n          ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n    (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)\n   \\<in> fml_sem I (p1 vid2 vid1)) =\n  (mk_v I\n    (OSing vid1\n      ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n    (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)\n   \\<in> fml_sem I (p1 vid2 vid1))\n\ngoal (1 subgoal):\n 1. Predicates I vid2\n     (\\<chi>i.\n         dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n          (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)))", "using pred2"], ["proof (prove)\nusing this:\n  (mk_v I\n    (OProd\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (OSing vid2\n        (Plus\n          (Times\n            ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n            (Var vid2))\n          ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n    (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)\n   \\<in> fml_sem I (p1 vid2 vid1)) =\n  (mk_v I\n    (OSing vid1\n      ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n    (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)\n   \\<in> fml_sem I (p1 vid2 vid1))\n  Predicates I vid2\n   (\\<chi>i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)))\n\ngoal (1 subgoal):\n 1. Predicates I vid2\n     (\\<chi>i.\n         dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n          (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)))", "unfolding p1_def expand_singleton"], ["proof (prove)\nusing this:\n  (mk_v I\n    (OProd\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (OSing vid2\n        (Plus\n          (Times\n            ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n            (Var vid2))\n          ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n    (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)\n   \\<in> fml_sem I\n          ($\\<phi> vid2\n            (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))) =\n  (mk_v I\n    (OSing vid1\n      ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n    (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)\n   \\<in> fml_sem I\n          ($\\<phi> vid2\n            (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n  Predicates I vid2\n   (\\<chi>i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (\\<chi>i. if i = vid1 then sol t $ vid1 else 0)))\n\ngoal (1 subgoal):\n 1. Predicates I vid2\n     (\\<chi>i.\n         dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n          (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)))", "by auto"], ["proof (state)\nthis:\n  Predicates I vid2\n   (\\<chi>i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then 0 else fst (a, b) $ y, b) (sol t)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I a b r aa ba sol t.\n       \\<lbrakk>is_interp I;\n        \\<forall>aa ba.\n           (\\<exists>sol t.\n               (aa, ba) =\n               mk_v I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (OSing vid2\n                    (Plus\n                      (Times\n                        ($f fid2\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0))\n                        (Var vid2))\n                      ($f fid3\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))))\n                (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n                (sol t) \\<and>\n               0 \\<le> t \\<and>\n               (sol solves_ode\n                (\\<lambda>a b.\n                    (\\<chi>i.\n                        if i = vid1 then sterm_sem I (f1 fid1 vid1) b\n                        else 0) +\n                    (\\<chi>i.\n                        if i = vid2\n                        then sterm_sem I\n                              (Plus (Times (f1 fid2 vid1) (Var vid2))\n                                (f1 fid3 vid1))\n                              b\n                        else 0)))\n                {0..t}\n                {x. Predicates I vid1\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (OSing vid2\n                                (Plus\n                                  (Times\n                                    ($f fid2\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                                    (Var vid2))\n                                  ($f fid3\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))))\n                            (\\<chi>y.\n                                if vid2 = y then r else fst (a, b) $ y,\n                             b)\n                            x))} \\<and>\n               VSagree (sol 0)\n                (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n                {uu_.\n                 uu_ = vid2 \\<or>\n                 uu_ = vid1 \\<or>\n                 uu_ = vid2 \\<or>\n                 uu_ = vid1 \\<or>\n                 Inl uu_\n                 \\<in> Inl `\n                       ({x. \\<exists>xa.\n                               Inl x\n                               \\<in> FVT\n(if xa = vid1 then Var vid1 else Const 0)} \\<union>\n                        {x. x = vid2 \\<or>\n                            (\\<exists>xa.\n                                Inl x\n                                \\<in> FVT\n (if xa = vid1 then Var vid1 else Const 0))}) \\<or>\n                 (\\<exists>x.\n                     Inl uu_\n                     \\<in> FVT (if x = vid1 then Var vid1\n                                else Const 0))}) \\<longrightarrow>\n           Predicates I vid2\n            (\\<chi>i.\n                dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                 (aa, ba));\n        (aa, ba) =\n        mk_v I\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (a, b) (sol t);\n        0 \\<le> t;\n        (sol solves_ode\n         (\\<lambda>a b.\n             \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n         {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OSing vid1\n                       ($f fid1\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))\n                     (a, b) x))};\n        VSagree (sol 0) a\n         {uu_.\n          uu_ = vid1 \\<or>\n          Inl uu_\n          \\<in> Inl `\n                {x. \\<exists>xa.\n                       Inl x\n                       \\<in> FVT (if xa = vid1 then Var vid1\n                                  else Const 0)} \\<or>\n          (\\<exists>x.\n              Inl uu_\n              \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n       \\<Longrightarrow> Predicates I vid2\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then Var vid1 else Const 0)\n                               (mk_v I\n                                 (OSing vid1\n                                   ($f fid1\n                                     (\\<lambda>i.\n   if i = vid1 then Var vid1 else Const 0)))\n                                 (a, b) (sol t)))", "subgoal for I a b r aa ba sol t"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "assume good_interp:\"is_interp I\""], ["proof (state)\nthis:\n  is_interp I\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "assume bigAll:\"    \\<forall>aa ba. (\\<exists>sol t. (aa, ba) =\n                     mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                              (OSing vid2\n                                (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                                  ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n                      (\\<chi> y. if vid2 = y then r else fst (a, b) $ y, b) (sol t) \\<and>\n                     0 \\<le> t \\<and>\n                     (sol solves_ode\n                      (\\<lambda>a b. (\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                             (\\<chi> i. if i = vid2 then sterm_sem I (Plus (Times (f1 fid2 vid1) (trm.Var vid2)) (f1 fid3 vid1)) b else 0)))\n                      {0..t} {x. Predicates I vid1\n                                  (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n                                         (mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                                                   (OSing vid2\n                                                     (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                                                       ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n                                           (\\<chi> y. if vid2 = y then r else fst (a, b) $ y, b) x))} \\<and>\n                     VSagree (sol 0) (\\<chi> y. if vid2 = y then r else fst (a, b) $ y)\n                      {uu. uu = vid2 \\<or>\n                            uu = vid1 \\<or>\n                            uu = vid2 \\<or>\n                            uu = vid1 \\<or>\n                            Inl uu\n                            \\<in> Inl ` ({x. \\<exists>xa. Inl x \\<in> FVT (if xa = vid1 then trm.Var vid1 else Const 0)} \\<union>\n                                      {x. x = vid2 \\<or> (\\<exists>xa. Inl x \\<in> FVT (if xa = vid1 then trm.Var vid1 else Const 0))}) \\<or>\n                            (\\<exists>x. Inl uu \\<in> FVT (if x = vid1 then trm.Var vid1 else Const 0))}) \\<longrightarrow>\n            Predicates I vid2 (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) (aa, ba))\""], ["proof (state)\nthis:\n  \\<forall>aa ba.\n     (\\<exists>sol t.\n         (aa, ba) =\n         mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n          (sol t) \\<and>\n         0 \\<le> t \\<and>\n         (sol solves_ode\n          (\\<lambda>a b.\n              (\\<chi>i.\n                  if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n              (\\<chi>i.\n                  if i = vid2\n                  then sterm_sem I\n                        (Plus (Times (f1 fid2 vid1) (Var vid2))\n                          (f1 fid3 vid1))\n                        b\n                  else 0)))\n          {0..t}\n          {x. Predicates I vid1\n               (\\<chi>i.\n                   dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                    (mk_v I\n                      (OProd\n                        (OSing vid1\n                          ($f fid1\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0)))\n                        (OSing vid2\n                          (Plus\n                            (Times\n                              ($f fid2\n                                (\\<lambda>i.\n                                    if i = vid1 then Var vid1 else Const 0))\n                              (Var vid2))\n                            ($f fid3\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1\n                                  else Const 0)))))\n                      (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n                      x))} \\<and>\n         VSagree (sol 0) (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n          {uu.\n           uu = vid2 \\<or>\n           uu = vid1 \\<or>\n           uu = vid2 \\<or>\n           uu = vid1 \\<or>\n           Inl uu\n           \\<in> Inl `\n                 ({x. \\<exists>xa.\n                         Inl x\n                         \\<in> FVT (if xa = vid1 then Var vid1\n                                    else Const 0)} \\<union>\n                  {x. x = vid2 \\<or>\n                      (\\<exists>xa.\n                          Inl x\n                          \\<in> FVT (if xa = vid1 then Var vid1\n                                     else Const 0))}) \\<or>\n           (\\<exists>x.\n               Inl uu\n               \\<in> FVT (if x = vid1 then Var vid1\n                          else Const 0))}) \\<longrightarrow>\n     Predicates I vid2\n      (\\<chi>i.\n          dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "assume aaba:\"(aa, ba) = mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (sol t)\""], ["proof (state)\nthis:\n  (aa, ba) =\n  mk_v I\n   (OSing vid1\n     ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n   (a, b) (sol t)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "assume t:\"0 \\<le> t\""], ["proof (state)\nthis:\n  0 \\<le> t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "assume sol:\"(sol solves_ode (\\<lambda>a b. \\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0)) {0..t}\n     {x. Predicates I vid1\n          (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n                 (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) x))}\""], ["proof (state)\nthis:\n  (sol solves_ode\n   (\\<lambda>a b.\n       \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n   {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (mk_v I\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (a, b) x))}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "assume VSA:\"VSagree (sol 0) a\n     {uu. uu = vid1 \\<or>\n           Inl uu \\<in> Inl ` {x. \\<exists>xa. Inl x \\<in> FVT (if xa = vid1 then trm.Var vid1 else Const 0)} \\<or>\n           (\\<exists>x. Inl uu \\<in> FVT (if x = vid1 then trm.Var vid1 else Const 0))}\""], ["proof (state)\nthis:\n  VSagree (sol 0) a\n   {uu.\n    uu = vid1 \\<or>\n    Inl uu\n    \\<in> Inl `\n          {x. \\<exists>xa.\n                 Inl x\n                 \\<in> FVT (if xa = vid1 then Var vid1 else Const 0)} \\<or>\n    (\\<exists>x. Inl uu \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "let ?xode = \"(\\<lambda>a b. \\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "let ?xconstraint = UNIV"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "let ?ivl = \"ll_on_open.existence_ivl {0 .. t} ?xode ?xconstraint 0 (sol 0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have freef1:\"dfree ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))", "by(auto simp add: dfree_Fun dfree_Const)"], ["proof (state)\nthis:\n  dfree ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have simple_term_inverse':\"\\<And>\\<theta>. dfree \\<theta> \\<Longrightarrow> raw_term (simple_term \\<theta>) = \\<theta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<theta>.\n       dfree \\<theta> \\<Longrightarrow>\n       raw_term (simple_term \\<theta>) = \\<theta>", "using simple_term_inverse"], ["proof (prove)\nusing this:\n  ?y \\<in> {\\<theta>. dfree \\<theta>} \\<Longrightarrow>\n  raw_term (simple_term ?y) = ?y\n\ngoal (1 subgoal):\n 1. \\<And>\\<theta>.\n       dfree \\<theta> \\<Longrightarrow>\n       raw_term (simple_term \\<theta>) = \\<theta>", "by auto"], ["proof (state)\nthis:\n  dfree ?\\<theta>9 \\<Longrightarrow>\n  raw_term (simple_term ?\\<theta>9) = ?\\<theta>9\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have old_lipschitz:\"local_lipschitz (UNIV::real set) UNIV (\\<lambda>a b. \\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local_lipschitz UNIV UNIV\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0)", "apply(rule c1_implies_local_lipschitz[where f'=\"(\\<lambda> (t,b). blinfun_vec(\\<lambda> i. if i = vid1 then blin_frechet (good_interp I) (simple_term (Function fid1 (\\<lambda> i. if i = vid1 then Var vid1 else Const 0))) b else Blinfun(\\<lambda> _. 0)))\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t x.\n       \\<lbrakk>t \\<in> UNIV; x \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>b.\n                              \\<chi>i.\n                                 if i = vid1\n                                 then sterm_sem I (f1 fid1 vid1) b\n                                 else 0) has_derivative\n                          blinfun_apply\n                           (case (t, x) of\n                            (t, b) \\<Rightarrow>\n                              blinfun_vec\n                               (\\<lambda>i.\n                                   if i = vid1\n                                   then blin_frechet (good_interp I)\n   (simple_term\n     ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n   b\n                                   else Blinfun (\\<lambda>_. 0))))\n                          (at x)\n 2. continuous_on (UNIV \\<times> UNIV)\n     (\\<lambda>(t, b).\n         blinfun_vec\n          (\\<lambda>i.\n              if i = vid1\n              then blin_frechet (good_interp I)\n                    (simple_term\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    b\n              else Blinfun (\\<lambda>_. 0)))\n 3. open UNIV\n 4. open UNIV", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       ((\\<lambda>b.\n            \\<chi>i.\n               if i = vid1 then sterm_sem I (f1 fid1 vid1) b\n               else 0) has_derivative\n        (\\<lambda>xa.\n            \\<chi>i.\n               blinfun_apply\n                (if i = vid1\n                 then blin_frechet (good_interp I)\n                       (simple_term\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       x\n                 else Blinfun (\\<lambda>_. 0))\n                xa))\n        (at x)\n 2. continuous_on UNIV\n     (\\<lambda>x.\n         case x of\n         (t, b) \\<Rightarrow>\n           blinfun_vec\n            (\\<lambda>i.\n                if i = vid1\n                then blin_frechet (good_interp I)\n                      (simple_term\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      b\n                else Blinfun (\\<lambda>_. 0)))", "subgoal for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>b.\n         \\<chi>i.\n            if i = vid1 then sterm_sem I (f1 fid1 vid1) b\n            else 0) has_derivative\n     (\\<lambda>xa.\n         \\<chi>i.\n            blinfun_apply\n             (if i = vid1\n              then blin_frechet (good_interp I)\n                    (simple_term\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    x\n              else Blinfun (\\<lambda>_. 0))\n             xa))\n     (at x)", "apply(rule has_derivative_vec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       ((\\<lambda>b.\n            if i = vid1 then sterm_sem I (f1 fid1 vid1) b\n            else 0) has_derivative\n        blinfun_apply\n         (if i = vid1\n          then blin_frechet (good_interp I)\n                (simple_term\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                x\n          else Blinfun (\\<lambda>_. 0)))\n        (at x)", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>b.\n         if i = vid1 then sterm_sem I (f1 fid1 vid1) b\n         else 0) has_derivative\n     blinfun_apply\n      (if i = vid1\n       then blin_frechet (good_interp I)\n             (simple_term\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             x\n       else Blinfun (\\<lambda>_. 0)))\n     (at x)", "apply(auto simp add:  bounded_linear_Blinfun_apply good_interp_inverse good_interp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i = vid1 \\<Longrightarrow>\n    (sterm_sem I (f1 fid1 vid1) has_derivative\n     frechet I\n      (raw_term\n        (simple_term\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\n      x)\n     (at x)", "apply(auto simp add: simple_term_inverse'[OF freef1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. i = vid1 \\<Longrightarrow>\n    (sterm_sem I (f1 fid1 vid1) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x v')))\n     (at x)", "apply(cases \"i = vid1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i = vid1; i = vid1\\<rbrakk>\n    \\<Longrightarrow> (sterm_sem I (f1 fid1 vid1) has_derivative\n                       (\\<lambda>v'.\n                           (THE f'.\n                               \\<forall>x.\n                                  (Functions I fid1 has_derivative f' x)\n                                   (at x))\n                            (\\<chi>i.\n                                sterm_sem I\n                                 (if i = vid1 then Var vid1 else Const 0) x)\n                            (\\<chi>i.\n                                frechet I\n                                 (if i = vid1 then Var vid1 else Const 0) x\n                                 v')))\n                       (at x)\n 2. \\<lbrakk>i = vid1; i \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> (sterm_sem I (f1 fid1 vid1) has_derivative\n                       (\\<lambda>v'.\n                           (THE f'.\n                               \\<forall>x.\n                                  (Functions I fid1 has_derivative f' x)\n                                   (at x))\n                            (\\<chi>i.\n                                sterm_sem I\n                                 (if i = vid1 then Var vid1 else Const 0) x)\n                            (\\<chi>i.\n                                frechet I\n                                 (if i = vid1 then Var vid1 else Const 0) x\n                                 v')))\n                       (at x)", "apply(auto simp add: f1_def expand_singleton)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i = vid1 \\<Longrightarrow>\n    (sterm_sem I\n      ($f fid1\n        (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x v')))\n     (at x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i = vid1 \\<Longrightarrow>\n    (sterm_sem I\n      ($f fid1\n        (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x v')))\n     (at x)", "let ?h = \"(\\<lambda>b. Functions I fid1 (\\<chi> i. sterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) b))\""], ["proof (state)\ngoal (1 subgoal):\n 1. i = vid1 \\<Longrightarrow>\n    (sterm_sem I\n      ($f fid1\n        (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x v')))\n     (at x)", "let ?h' = \"(\\<lambda>b'. FunctionFrechet I fid1 (\\<chi> i. sterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) x) (\\<chi> i. frechet I (if i = vid1 then trm.Var vid1 else Const 0) x b'))\""], ["proof (state)\ngoal (1 subgoal):\n 1. i = vid1 \\<Longrightarrow>\n    (sterm_sem I\n      ($f fid1\n        (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x v')))\n     (at x)", "let ?f = \"(\\<lambda> b. (\\<chi> i. sterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) b))\""], ["proof (state)\ngoal (1 subgoal):\n 1. i = vid1 \\<Longrightarrow>\n    (sterm_sem I\n      ($f fid1\n        (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x v')))\n     (at x)", "let ?f' = \"(\\<lambda> b'. (\\<chi> i. frechet I (if i = vid1 then trm.Var vid1 else Const 0) x b'))\""], ["proof (state)\ngoal (1 subgoal):\n 1. i = vid1 \\<Longrightarrow>\n    (sterm_sem I\n      ($f fid1\n        (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x v')))\n     (at x)", "let ?g = \"Functions I fid1\""], ["proof (state)\ngoal (1 subgoal):\n 1. i = vid1 \\<Longrightarrow>\n    (sterm_sem I\n      ($f fid1\n        (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x v')))\n     (at x)", "let ?g'= \"FunctionFrechet I fid1 (?f x)\""], ["proof (state)\ngoal (1 subgoal):\n 1. i = vid1 \\<Longrightarrow>\n    (sterm_sem I\n      ($f fid1\n        (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x v')))\n     (at x)", "have heq:\"?h = ?g \\<circ> ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>b.\n        Functions I fid1\n         (\\<chi>i.\n             sterm_sem I (if i = vid1 then Var vid1 else Const 0) b)) =\n    Functions I fid1 \\<circ>\n    (\\<lambda>b.\n        \\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) b)", "by(rule ext, auto)"], ["proof (state)\nthis:\n  (\\<lambda>b.\n      Functions I fid1\n       (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) b)) =\n  Functions I fid1 \\<circ>\n  (\\<lambda>b.\n      \\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) b)\n\ngoal (1 subgoal):\n 1. i = vid1 \\<Longrightarrow>\n    (sterm_sem I\n      ($f fid1\n        (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x v')))\n     (at x)", "have heq':\"?h' = ?g' \\<circ> ?f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>b'.\n        FunctionFrechet I fid1\n         (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n         (\\<chi>i.\n             frechet I (if i = vid1 then Var vid1 else Const 0) x b')) =\n    FunctionFrechet I fid1\n     (\\<chi>i.\n         sterm_sem I (if i = vid1 then Var vid1 else Const 0) x) \\<circ>\n    (\\<lambda>b'.\n        \\<chi>i. frechet I (if i = vid1 then Var vid1 else Const 0) x b')", "by(rule ext, auto)"], ["proof (state)\nthis:\n  (\\<lambda>b'.\n      FunctionFrechet I fid1\n       (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n       (\\<chi>i. frechet I (if i = vid1 then Var vid1 else Const 0) x b')) =\n  FunctionFrechet I fid1\n   (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x) \\<circ>\n  (\\<lambda>b'.\n      \\<chi>i. frechet I (if i = vid1 then Var vid1 else Const 0) x b')\n\ngoal (1 subgoal):\n 1. i = vid1 \\<Longrightarrow>\n    (sterm_sem I\n      ($f fid1\n        (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x v')))\n     (at x)", "have fderiv:\"(?f has_derivative ?f') (at x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>b.\n         \\<chi>i.\n            sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             b) has_derivative\n     (\\<lambda>b'.\n         \\<chi>i. frechet I (if i = vid1 then Var vid1 else Const 0) x b'))\n     (at x)", "apply(rule has_derivative_vec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (sterm_sem I (if i = vid1 then Var vid1 else Const 0) has_derivative\n        frechet I (if i = vid1 then Var vid1 else Const 0) x)\n        (at x)", "by (auto simp add: svar_deriv axis_def)"], ["proof (state)\nthis:\n  ((\\<lambda>b.\n       \\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           b) has_derivative\n   (\\<lambda>b'.\n       \\<chi>i. frechet I (if i = vid1 then Var vid1 else Const 0) x b'))\n   (at x)\n\ngoal (1 subgoal):\n 1. i = vid1 \\<Longrightarrow>\n    (sterm_sem I\n      ($f fid1\n        (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x v')))\n     (at x)", "have gderiv:\"(?g has_derivative ?g') (at (?f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Functions I fid1 has_derivative\n     FunctionFrechet I fid1\n      (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x))\n     (at (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x))", "using good_interp"], ["proof (prove)\nusing this:\n  is_interp I\n\ngoal (1 subgoal):\n 1. (Functions I fid1 has_derivative\n     FunctionFrechet I fid1\n      (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x))\n     (at (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x))", "unfolding is_interp_def"], ["proof (prove)\nusing this:\n  \\<forall>x i.\n     (Functions I i has_derivative FunctionFrechet I i x) (at x) \\<and>\n     continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet I i x))\n\ngoal (1 subgoal):\n 1. (Functions I fid1 has_derivative\n     FunctionFrechet I fid1\n      (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x))\n     (at (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x))", "by blast"], ["proof (state)\nthis:\n  (Functions I fid1 has_derivative\n   FunctionFrechet I fid1\n    (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x))\n   (at (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x))\n\ngoal (1 subgoal):\n 1. i = vid1 \\<Longrightarrow>\n    (sterm_sem I\n      ($f fid1\n        (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x v')))\n     (at x)", "have gfderiv: \"((?g \\<circ> ?f) has_derivative(?g' \\<circ> ?f')) (at x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Functions I fid1 \\<circ>\n     (\\<lambda>b.\n         \\<chi>i.\n            sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             b) has_derivative\n     FunctionFrechet I fid1\n      (\\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0) x) \\<circ>\n     (\\<lambda>b'.\n         \\<chi>i. frechet I (if i = vid1 then Var vid1 else Const 0) x b'))\n     (at x)", "using fderiv gderiv diff_chain_at"], ["proof (prove)\nusing this:\n  ((\\<lambda>b.\n       \\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           b) has_derivative\n   (\\<lambda>b'.\n       \\<chi>i. frechet I (if i = vid1 then Var vid1 else Const 0) x b'))\n   (at x)\n  (Functions I fid1 has_derivative\n   FunctionFrechet I fid1\n    (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x))\n   (at (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x))\n  \\<lbrakk>(?f has_derivative ?f') (at ?x);\n   (?g has_derivative ?g') (at (?f ?x))\\<rbrakk>\n  \\<Longrightarrow> (?g \\<circ> ?f has_derivative ?g' \\<circ> ?f') (at ?x)\n\ngoal (1 subgoal):\n 1. (Functions I fid1 \\<circ>\n     (\\<lambda>b.\n         \\<chi>i.\n            sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             b) has_derivative\n     FunctionFrechet I fid1\n      (\\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0) x) \\<circ>\n     (\\<lambda>b'.\n         \\<chi>i. frechet I (if i = vid1 then Var vid1 else Const 0) x b'))\n     (at x)", "by blast"], ["proof (state)\nthis:\n  (Functions I fid1 \\<circ>\n   (\\<lambda>b.\n       \\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           b) has_derivative\n   FunctionFrechet I fid1\n    (\\<chi>i.\n        sterm_sem I (if i = vid1 then Var vid1 else Const 0) x) \\<circ>\n   (\\<lambda>b'.\n       \\<chi>i. frechet I (if i = vid1 then Var vid1 else Const 0) x b'))\n   (at x)\n\ngoal (1 subgoal):\n 1. i = vid1 \\<Longrightarrow>\n    (sterm_sem I\n      ($f fid1\n        (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x v')))\n     (at x)", "have boring_eq:\"(\\<lambda>b. Functions I fid1 (\\<chi> i. sterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) b)) =\n             sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>b.\n        Functions I fid1\n         (\\<chi>i.\n             sterm_sem I (if i = vid1 then Var vid1 else Const 0) b)) =\n    sterm_sem I\n     ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))", "by(rule ext, auto)"], ["proof (state)\nthis:\n  (\\<lambda>b.\n      Functions I fid1\n       (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) b)) =\n  sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n\ngoal (1 subgoal):\n 1. i = vid1 \\<Longrightarrow>\n    (sterm_sem I\n      ($f fid1\n        (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x v')))\n     (at x)", "have \"(?h has_derivative ?h') (at x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>b.\n         Functions I fid1\n          (\\<chi>i.\n              sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               b)) has_derivative\n     (\\<lambda>b'.\n         FunctionFrechet I fid1\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x b')))\n     (at x)", "using gfderiv heq heq'"], ["proof (prove)\nusing this:\n  (Functions I fid1 \\<circ>\n   (\\<lambda>b.\n       \\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           b) has_derivative\n   FunctionFrechet I fid1\n    (\\<chi>i.\n        sterm_sem I (if i = vid1 then Var vid1 else Const 0) x) \\<circ>\n   (\\<lambda>b'.\n       \\<chi>i. frechet I (if i = vid1 then Var vid1 else Const 0) x b'))\n   (at x)\n  (\\<lambda>b.\n      Functions I fid1\n       (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) b)) =\n  Functions I fid1 \\<circ>\n  (\\<lambda>b.\n      \\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) b)\n  (\\<lambda>b'.\n      FunctionFrechet I fid1\n       (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n       (\\<chi>i. frechet I (if i = vid1 then Var vid1 else Const 0) x b')) =\n  FunctionFrechet I fid1\n   (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x) \\<circ>\n  (\\<lambda>b'.\n      \\<chi>i. frechet I (if i = vid1 then Var vid1 else Const 0) x b')\n\ngoal (1 subgoal):\n 1. ((\\<lambda>b.\n         Functions I fid1\n          (\\<chi>i.\n              sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               b)) has_derivative\n     (\\<lambda>b'.\n         FunctionFrechet I fid1\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x b')))\n     (at x)", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>b.\n       Functions I fid1\n        (\\<chi>i.\n            sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             b)) has_derivative\n   (\\<lambda>b'.\n       FunctionFrechet I fid1\n        (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n        (\\<chi>i. frechet I (if i = vid1 then Var vid1 else Const 0) x b')))\n   (at x)\n\ngoal (1 subgoal):\n 1. i = vid1 \\<Longrightarrow>\n    (sterm_sem I\n      ($f fid1\n        (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x v')))\n     (at x)", "then"], ["proof (chain)\npicking this:\n  ((\\<lambda>b.\n       Functions I fid1\n        (\\<chi>i.\n            sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             b)) has_derivative\n   (\\<lambda>b'.\n       FunctionFrechet I fid1\n        (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n        (\\<chi>i. frechet I (if i = vid1 then Var vid1 else Const 0) x b')))\n   (at x)", "show \"(sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) has_derivative\n (\\<lambda>v'. (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x)) (\\<chi> i. sterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) x)\n        (\\<chi> i. frechet I (if i = vid1 then trm.Var vid1 else Const 0) x v')))\n (at x)\""], ["proof (prove)\nusing this:\n  ((\\<lambda>b.\n       Functions I fid1\n        (\\<chi>i.\n            sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             b)) has_derivative\n   (\\<lambda>b'.\n       FunctionFrechet I fid1\n        (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n        (\\<chi>i. frechet I (if i = vid1 then Var vid1 else Const 0) x b')))\n   (at x)\n\ngoal (1 subgoal):\n 1. (sterm_sem I\n      ($f fid1\n        (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x v')))\n     (at x)", "using boring_eq"], ["proof (prove)\nusing this:\n  ((\\<lambda>b.\n       Functions I fid1\n        (\\<chi>i.\n            sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             b)) has_derivative\n   (\\<lambda>b'.\n       FunctionFrechet I fid1\n        (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n        (\\<chi>i. frechet I (if i = vid1 then Var vid1 else Const 0) x b')))\n   (at x)\n  (\\<lambda>b.\n      Functions I fid1\n       (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) b)) =\n  sterm_sem I ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n\ngoal (1 subgoal):\n 1. (sterm_sem I\n      ($f fid1\n        (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n          (\\<chi>i.\n              frechet I (if i = vid1 then Var vid1 else Const 0) x v')))\n     (at x)", "by auto"], ["proof (state)\nthis:\n  (sterm_sem I\n    ($f fid1\n      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) has_derivative\n   (\\<lambda>v'.\n       (THE f'. \\<forall>x. (Functions I fid1 has_derivative f' x) (at x))\n        (\\<chi>i. sterm_sem I (if i = vid1 then Var vid1 else Const 0) x)\n        (\\<chi>i. frechet I (if i = vid1 then Var vid1 else Const 0) x v')))\n   (at x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         case x of\n         (t, b) \\<Rightarrow>\n           blinfun_vec\n            (\\<lambda>i.\n                if i = vid1\n                then blin_frechet (good_interp I)\n                      (simple_term\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      b\n                else Blinfun (\\<lambda>_. 0)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         case x of\n         (t, b) \\<Rightarrow>\n           blinfun_vec\n            (\\<lambda>i.\n                if i = vid1\n                then blin_frechet (good_interp I)\n                      (simple_term\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      b\n                else Blinfun (\\<lambda>_. 0)))", "have the_thing:\"continuous_on (UNIV::('sz Rvec set)) \n        (\\<lambda>b.\n          blinfun_vec\n           (\\<lambda>i. if i = vid1 then blin_frechet (good_interp I) (simple_term ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) b\n                else Blinfun (\\<lambda>_. 0)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>b.\n         blinfun_vec\n          (\\<lambda>i.\n              if i = vid1\n              then blin_frechet (good_interp I)\n                    (simple_term\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    b\n              else Blinfun (\\<lambda>_. 0)))", "apply(rule continuous_blinfun_vec')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       continuous_on UNIV\n        (\\<lambda>x.\n            if i = vid1\n            then blin_frechet (good_interp I)\n                  (simple_term\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  x\n            else Blinfun (\\<lambda>_. 0))", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         if i = vid1\n         then blin_frechet (good_interp I)\n               (simple_term\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               x\n         else Blinfun (\\<lambda>_. 0))", "apply(cases \"i = vid1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. i = vid1 \\<Longrightarrow>\n    continuous_on UNIV\n     (\\<lambda>x.\n         if i = vid1\n         then blin_frechet (good_interp I)\n               (simple_term\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               x\n         else Blinfun (\\<lambda>_. 0))\n 2. i \\<noteq> vid1 \\<Longrightarrow>\n    continuous_on UNIV\n     (\\<lambda>x.\n         if i = vid1\n         then blin_frechet (good_interp I)\n               (simple_term\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               x\n         else Blinfun (\\<lambda>_. 0))", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i = vid1 \\<Longrightarrow>\n    continuous_on UNIV\n     (blin_frechet (good_interp I)\n       (simple_term\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))", "using frechet_continuous[OF good_interp freef1]"], ["proof (prove)\nusing this:\n  continuous_on UNIV\n   (blin_frechet (good_interp I)\n     (simple_term\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\n\ngoal (1 subgoal):\n 1. i = vid1 \\<Longrightarrow>\n    continuous_on UNIV\n     (blin_frechet (good_interp I)\n       (simple_term\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))", "by (auto simp add: continuous_on_const)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  continuous_on UNIV\n   (\\<lambda>b.\n       blinfun_vec\n        (\\<lambda>i.\n            if i = vid1\n            then blin_frechet (good_interp I)\n                  (simple_term\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  b\n            else Blinfun (\\<lambda>_. 0)))\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         case x of\n         (t, b) \\<Rightarrow>\n           blinfun_vec\n            (\\<lambda>i.\n                if i = vid1\n                then blin_frechet (good_interp I)\n                      (simple_term\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      b\n                else Blinfun (\\<lambda>_. 0)))", "have another_cont:\"continuous_on (UNIV) \n        (\\<lambda>x.\n          blinfun_vec\n           (\\<lambda>i. if i = vid1 then blin_frechet (good_interp I) (simple_term ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (snd x)\n                else Blinfun (\\<lambda>_. 0)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         blinfun_vec\n          (\\<lambda>i.\n              if i = vid1\n              then blin_frechet (good_interp I)\n                    (simple_term\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (snd x)\n              else Blinfun (\\<lambda>_. 0)))", "apply(rule continuous_on_compose2[of UNIV \"(\\<lambda>b. blinfun_vec\n           (\\<lambda>i. if i = vid1 then blin_frechet (good_interp I) (simple_term ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) b\n                else Blinfun (\\<lambda>_. 0)))\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. continuous_on UNIV\n     (\\<lambda>b.\n         blinfun_vec\n          (\\<lambda>i.\n              if i = vid1\n              then blin_frechet (good_interp I)\n                    (simple_term\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    b\n              else Blinfun (\\<lambda>_. 0)))\n 2. continuous_on UNIV snd\n 3. range snd \\<subseteq> UNIV", "apply(rule the_thing)"], ["proof (prove)\ngoal (2 subgoals):\n 1. continuous_on UNIV snd\n 2. range snd \\<subseteq> UNIV", "by (auto intro!: continuous_intros)"], ["proof (state)\nthis:\n  continuous_on UNIV\n   (\\<lambda>x.\n       blinfun_vec\n        (\\<lambda>i.\n            if i = vid1\n            then blin_frechet (good_interp I)\n                  (simple_term\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (snd x)\n            else Blinfun (\\<lambda>_. 0)))\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         case x of\n         (t, b) \\<Rightarrow>\n           blinfun_vec\n            (\\<lambda>i.\n                if i = vid1\n                then blin_frechet (good_interp I)\n                      (simple_term\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      b\n                else Blinfun (\\<lambda>_. 0)))", "have ext:\"(\\<lambda>x. case x of\n        (t, b) \\<Rightarrow>\n          blinfun_vec\n           (\\<lambda>i. if i = vid1 then blin_frechet (good_interp I) (simple_term ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) b\n                else Blinfun (\\<lambda>_. 0))) =(\\<lambda>x.\n          blinfun_vec\n           (\\<lambda>i. if i = vid1 then blin_frechet (good_interp I) (simple_term ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (snd x)\n           else Blinfun (\\<lambda>_. 0))) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        case x of\n        (t, b) \\<Rightarrow>\n          blinfun_vec\n           (\\<lambda>i.\n               if i = vid1\n               then blin_frechet (good_interp I)\n                     (simple_term\n                       ($f fid1\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))\n                     b\n               else Blinfun (\\<lambda>_. 0))) =\n    (\\<lambda>x.\n        blinfun_vec\n         (\\<lambda>i.\n             if i = vid1\n             then blin_frechet (good_interp I)\n                   (simple_term\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   (snd x)\n             else Blinfun (\\<lambda>_. 0)))", "apply(rule ext, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       blinfun_vec\n        (\\<lambda>i.\n            if i = vid1\n            then blin_frechet (good_interp I)\n                  (simple_term\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  b\n            else Blinfun (\\<lambda>_. 0)) =\n       blinfun_vec\n        (\\<lambda>i.\n            if i = vid1\n            then blin_frechet (good_interp I)\n                  (simple_term\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (snd (a, b))\n            else Blinfun (\\<lambda>_. 0))", "by (metis snd_conv)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      case x of\n      (t, b) \\<Rightarrow>\n        blinfun_vec\n         (\\<lambda>i.\n             if i = vid1\n             then blin_frechet (good_interp I)\n                   (simple_term\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   b\n             else Blinfun (\\<lambda>_. 0))) =\n  (\\<lambda>x.\n      blinfun_vec\n       (\\<lambda>i.\n           if i = vid1\n           then blin_frechet (good_interp I)\n                 (simple_term\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (snd x)\n           else Blinfun (\\<lambda>_. 0)))\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         case x of\n         (t, b) \\<Rightarrow>\n           blinfun_vec\n            (\\<lambda>i.\n                if i = vid1\n                then blin_frechet (good_interp I)\n                      (simple_term\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      b\n                else Blinfun (\\<lambda>_. 0)))", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      case x of\n      (t, b) \\<Rightarrow>\n        blinfun_vec\n         (\\<lambda>i.\n             if i = vid1\n             then blin_frechet (good_interp I)\n                   (simple_term\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   b\n             else Blinfun (\\<lambda>_. 0))) =\n  (\\<lambda>x.\n      blinfun_vec\n       (\\<lambda>i.\n           if i = vid1\n           then blin_frechet (good_interp I)\n                 (simple_term\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (snd x)\n           else Blinfun (\\<lambda>_. 0)))", "show  \"continuous_on (UNIV) \n        (\\<lambda>x. case x of\n        (t, b) \\<Rightarrow>\n          blinfun_vec\n           (\\<lambda>i. if i = vid1 then blin_frechet (good_interp I) (simple_term ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) b\n                else Blinfun (\\<lambda>_. 0)))\""], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      case x of\n      (t, b) \\<Rightarrow>\n        blinfun_vec\n         (\\<lambda>i.\n             if i = vid1\n             then blin_frechet (good_interp I)\n                   (simple_term\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   b\n             else Blinfun (\\<lambda>_. 0))) =\n  (\\<lambda>x.\n      blinfun_vec\n       (\\<lambda>i.\n           if i = vid1\n           then blin_frechet (good_interp I)\n                 (simple_term\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (snd x)\n           else Blinfun (\\<lambda>_. 0)))\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         case x of\n         (t, b) \\<Rightarrow>\n           blinfun_vec\n            (\\<lambda>i.\n                if i = vid1\n                then blin_frechet (good_interp I)\n                      (simple_term\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      b\n                else Blinfun (\\<lambda>_. 0)))", "using another_cont"], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      case x of\n      (t, b) \\<Rightarrow>\n        blinfun_vec\n         (\\<lambda>i.\n             if i = vid1\n             then blin_frechet (good_interp I)\n                   (simple_term\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   b\n             else Blinfun (\\<lambda>_. 0))) =\n  (\\<lambda>x.\n      blinfun_vec\n       (\\<lambda>i.\n           if i = vid1\n           then blin_frechet (good_interp I)\n                 (simple_term\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (snd x)\n           else Blinfun (\\<lambda>_. 0)))\n  continuous_on UNIV\n   (\\<lambda>x.\n       blinfun_vec\n        (\\<lambda>i.\n            if i = vid1\n            then blin_frechet (good_interp I)\n                  (simple_term\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (snd x)\n            else Blinfun (\\<lambda>_. 0)))\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         case x of\n         (t, b) \\<Rightarrow>\n           blinfun_vec\n            (\\<lambda>i.\n                if i = vid1\n                then blin_frechet (good_interp I)\n                      (simple_term\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      b\n                else Blinfun (\\<lambda>_. 0)))", "by (simp add: another_cont local.ext)"], ["proof (state)\nthis:\n  continuous_on UNIV\n   (\\<lambda>x.\n       case x of\n       (t, b) \\<Rightarrow>\n         blinfun_vec\n          (\\<lambda>i.\n              if i = vid1\n              then blin_frechet (good_interp I)\n                    (simple_term\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    b\n              else Blinfun (\\<lambda>_. 0)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local_lipschitz UNIV UNIV\n   (\\<lambda>a b.\n       \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have old_continuous:\" \\<And>x. x \\<in> UNIV \\<Longrightarrow> continuous_on UNIV (\\<lambda>t. \\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) x else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       continuous_on UNIV\n        (\\<lambda>t.\n            \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) x else 0)", "by(rule continuous_on_const)"], ["proof (state)\nthis:\n  ?x10 \\<in> UNIV \\<Longrightarrow>\n  continuous_on UNIV\n   (\\<lambda>t.\n       \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) ?x10 else 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "interpret ll_old: ll_on_open_it \"UNIV\" ?xode ?xconstraint 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. ll_on_open_it UNIV\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0)\n     UNIV", "apply(standard)"], ["proof (prove)\ngoal (5 subgoals):\n 1. is_interval UNIV\n 2. local_lipschitz UNIV UNIV\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0)\n 3. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       continuous_on UNIV\n        (\\<lambda>t.\n            \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) x else 0)\n 4. open UNIV\n 5. open UNIV", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_interval UNIV", "by auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. local_lipschitz UNIV UNIV\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0)\n 2. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       continuous_on UNIV\n        (\\<lambda>t.\n            \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) x else 0)\n 3. open UNIV\n 4. open UNIV", "prefer 3"], ["proof (prove)\ngoal (4 subgoals):\n 1. open UNIV\n 2. local_lipschitz UNIV UNIV\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0)\n 3. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       continuous_on UNIV\n        (\\<lambda>t.\n            \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) x else 0)\n 4. open UNIV", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. open UNIV", "by auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. local_lipschitz UNIV UNIV\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0)\n 2. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       continuous_on UNIV\n        (\\<lambda>t.\n            \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) x else 0)\n 3. open UNIV", "prefer 3"], ["proof (prove)\ngoal (3 subgoals):\n 1. open UNIV\n 2. local_lipschitz UNIV UNIV\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0)\n 3. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       continuous_on UNIV\n        (\\<lambda>t.\n            \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) x else 0)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. open UNIV", "by auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. local_lipschitz UNIV UNIV\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0)\n 2. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       continuous_on UNIV\n        (\\<lambda>t.\n            \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) x else 0)", "apply(rule old_lipschitz)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       continuous_on UNIV\n        (\\<lambda>t.\n            \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) x else 0)", "by (rule old_continuous)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "let ?ivl = \"(ll_old.existence_ivl 0 (sol 0))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "let ?flow = \"ll_old.flow 0 (sol 0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have tclosed:\"{0..t} = {0--t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..t} = {0--t}", "using t real_Icc_closed_segment"], ["proof (prove)\nusing this:\n  0 \\<le> t\n  ?a \\<le> ?b \\<Longrightarrow> {?a..?b} = {?a--?b}\n\ngoal (1 subgoal):\n 1. {0..t} = {0--t}", "by auto"], ["proof (state)\nthis:\n  {0..t} = {0--t}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have \"(sol  solves_ode (\\<lambda>a b. \\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0)) {0..t} UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sol solves_ode\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n     {0..t} UNIV", "apply(rule solves_ode_supset_range)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (sol solves_ode\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n     {0..t} ?X\n 2. ?X \\<subseteq> UNIV", "apply(rule sol)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. Predicates I vid1\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n              (mk_v I\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (a, b) x))}\n    \\<subseteq> UNIV", "by auto"], ["proof (state)\nthis:\n  (sol solves_ode\n   (\\<lambda>a b.\n       \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n   {0..t} UNIV\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "then"], ["proof (chain)\npicking this:\n  (sol solves_ode\n   (\\<lambda>a b.\n       \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n   {0..t} UNIV", "have sol':\"(sol  solves_ode (\\<lambda>a b. \\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0)) {0--t} UNIV\""], ["proof (prove)\nusing this:\n  (sol solves_ode\n   (\\<lambda>a b.\n       \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n   {0..t} UNIV\n\ngoal (1 subgoal):\n 1. (sol solves_ode\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n     {0--t} UNIV", "using tclosed"], ["proof (prove)\nusing this:\n  (sol solves_ode\n   (\\<lambda>a b.\n       \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n   {0..t} UNIV\n  {0..t} = {0--t}\n\ngoal (1 subgoal):\n 1. (sol solves_ode\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n     {0--t} UNIV", "by auto"], ["proof (state)\nthis:\n  (sol solves_ode\n   (\\<lambda>a b.\n       \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n   {0--t} UNIV\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sub:\"{0--t} \\<subseteq> ll_old.existence_ivl 0 (sol 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0--t} \\<subseteq> ll_old.existence_ivl 0 (sol 0)", "apply(rule ll_old.closed_segment_subset_existence_ivl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> ll_old.existence_ivl 0 (sol 0)", "apply(rule ll_old.existence_ivl_maximal_segment)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (?x2 solves_ode\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n     {0--t} UNIV\n 2. ?x2 0 = sol 0\n 3. {0--t} \\<subseteq> UNIV", "apply(rule sol')"], ["proof (prove)\ngoal (2 subgoals):\n 1. sol 0 = sol 0\n 2. {0--t} \\<subseteq> UNIV", "apply(rule refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {0--t} \\<subseteq> UNIV", "by auto"], ["proof (state)\nthis:\n  {0--t} \\<subseteq> ll_old.existence_ivl 0 (sol 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have usol_old:\"(?flow  usolves_ode ?xode from 0) ?ivl UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ll_old.flow 0\n      (sol 0) usolves_ode (\\<lambda>a b.\n                              \\<chi>i.\n                                 if i = vid1\n                                 then sterm_sem I (f1 fid1 vid1) b\n                                 else 0) from 0)\n     (ll_old.existence_ivl 0 (sol 0)) UNIV", "by(rule ll_old.flow_usolves_ode, auto)"], ["proof (state)\nthis:\n  (ll_old.flow 0\n    (sol 0) usolves_ode (\\<lambda>a b.\n                            \\<chi>i.\n                               if i = vid1 then sterm_sem I (f1 fid1 vid1) b\n                               else 0) from 0)\n   (ll_old.existence_ivl 0 (sol 0)) UNIV\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sol_old:\"(ll_old.flow 0 (sol 0) solves_ode ?xode) ?ivl UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ll_old.flow 0 (sol 0) solves_ode\n     (\\<lambda>a b.\n         \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n     (ll_old.existence_ivl 0 (sol 0)) UNIV", "by(rule ll_old.flow_solves_ode, auto)"], ["proof (state)\nthis:\n  (ll_old.flow 0 (sol 0) solves_ode\n   (\\<lambda>a b.\n       \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n   (ll_old.existence_ivl 0 (sol 0)) UNIV\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have another_sub:\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow> {s--0} \\<subseteq> {0..t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s. s \\<in> {0..t} \\<Longrightarrow> {s--0} \\<subseteq> {0..t}", "unfolding closed_segment_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       {(1 - u) *\\<^sub>R s + u *\\<^sub>R 0 |u. 0 \\<le> u \\<and> u \\<le> 1}\n       \\<subseteq> {0..t}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s u.\n       \\<lbrakk>0 \\<le> s; s \\<le> t; 0 \\<le> u; u \\<le> 1\\<rbrakk>\n       \\<Longrightarrow> (1 - u) * s \\<le> t", "by (metis diff_0_right diff_left_mono mult.commute mult_left_le order.trans)"], ["proof (state)\nthis:\n  ?s11 \\<in> {0..t} \\<Longrightarrow> {?s11--0} \\<subseteq> {0..t}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sol_eq_flow:\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow> sol s = ?flow s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow> sol s = ll_old.flow 0 (sol 0) s", "using usol_old"], ["proof (prove)\nusing this:\n  (ll_old.flow 0\n    (sol 0) usolves_ode (\\<lambda>a b.\n                            \\<chi>i.\n                               if i = vid1 then sterm_sem I (f1 fid1 vid1) b\n                               else 0) from 0)\n   (ll_old.existence_ivl 0 (sol 0)) UNIV\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow> sol s = ll_old.flow 0 (sol 0) s", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n        (ll_old.flow 0\n          (sol 0) usolves_ode (\\<lambda>t y.\n                                  \\<chi>i.\n                                     if i = vid1\n                                     then sterm_sem I (f1 fid1 vid1) y\n                                     else 0) from 0)\n         (ll_old.existence_ivl 0 (sol 0)) UNIV\\<rbrakk>\n       \\<Longrightarrow> sol s = ll_old.flow 0 (sol 0) s", "apply(drule usolves_odeD(4))"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>s. 0 \\<le> s \\<and> s \\<le> t \\<Longrightarrow> 0 \\<in> ?T'6 s\n 2. \\<And>s.\n       0 \\<le> s \\<and> s \\<le> t \\<Longrightarrow> is_interval (?T'6 s)\n 3. \\<And>s.\n       0 \\<le> s \\<and> s \\<le> t \\<Longrightarrow>\n       ?T'6 s \\<subseteq> ll_old.existence_ivl 0 (sol 0)\n 4. \\<And>s.\n       0 \\<le> s \\<and> s \\<le> t \\<Longrightarrow>\n       (?z6 s solves_ode\n        (\\<lambda>t y.\n            \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) y else 0))\n        (?T'6 s) UNIV\n 5. \\<And>s.\n       0 \\<le> s \\<and> s \\<le> t \\<Longrightarrow>\n       ?z6 s 0 = ll_old.flow 0 (sol 0) 0\n 6. \\<And>s. 0 \\<le> s \\<and> s \\<le> t \\<Longrightarrow> ?t6 s \\<in> ?T'6 s\n 7. \\<And>s.\n       \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n        ?z6 s (?t6 s) = ll_old.flow 0 (sol 0) (?t6 s)\\<rbrakk>\n       \\<Longrightarrow> sol s = ll_old.flow 0 (sol 0) s", "(* 7 subgoals*)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>s. 0 \\<le> s \\<and> s \\<le> t \\<Longrightarrow> 0 \\<in> ?T'6 s\n 2. \\<And>s.\n       0 \\<le> s \\<and> s \\<le> t \\<Longrightarrow> is_interval (?T'6 s)\n 3. \\<And>s.\n       0 \\<le> s \\<and> s \\<le> t \\<Longrightarrow>\n       ?T'6 s \\<subseteq> ll_old.existence_ivl 0 (sol 0)\n 4. \\<And>s.\n       0 \\<le> s \\<and> s \\<le> t \\<Longrightarrow>\n       (?z6 s solves_ode\n        (\\<lambda>t y.\n            \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) y else 0))\n        (?T'6 s) UNIV\n 5. \\<And>s.\n       0 \\<le> s \\<and> s \\<le> t \\<Longrightarrow>\n       ?z6 s 0 = ll_old.flow 0 (sol 0) 0\n 6. \\<And>s. 0 \\<le> s \\<and> s \\<le> t \\<Longrightarrow> ?t6 s \\<in> ?T'6 s\n 7. \\<And>s.\n       \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n        ?z6 s (?t6 s) = ll_old.flow 0 (sol 0) (?t6 s)\\<rbrakk>\n       \\<Longrightarrow> sol s = ll_old.flow 0 (sol 0) s", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s x.\n       \\<lbrakk>x \\<in> {s--0}; 0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> x \\<in> ll_old.existence_ivl 0 (sol 0)\n 2. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> (sol solves_ode\n                          (\\<lambda>t y.\n                              \\<chi>i.\n                                 if i = vid1\n                                 then sterm_sem I (f1 fid1 vid1) y else 0))\n                          {s--0} UNIV", "subgoal for s x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> {s--0}; 0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> x \\<in> ll_old.existence_ivl 0 (sol 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> {s--0}; 0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> x \\<in> ll_old.existence_ivl 0 (sol 0)", "assume xs0:\"x \\<in> {s--0}\""], ["proof (state)\nthis:\n  x \\<in> {s--0}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> {s--0}; 0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> x \\<in> ll_old.existence_ivl 0 (sol 0)", "assume s0:\"0 \\<le> s\" and st: \"s \\<le> t\""], ["proof (state)\nthis:\n  0 \\<le> s\n  s \\<le> t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> {s--0}; 0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> x \\<in> ll_old.existence_ivl 0 (sol 0)", "have \"{s--0} \\<subseteq> {0..t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s--0} \\<subseteq> {0..t}", "using another_sub[of s] s0 st"], ["proof (prove)\nusing this:\n  s \\<in> {0..t} \\<Longrightarrow> {s--0} \\<subseteq> {0..t}\n  0 \\<le> s\n  s \\<le> t\n\ngoal (1 subgoal):\n 1. {s--0} \\<subseteq> {0..t}", "by auto"], ["proof (state)\nthis:\n  {s--0} \\<subseteq> {0..t}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> {s--0}; 0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> x \\<in> ll_old.existence_ivl 0 (sol 0)", "then"], ["proof (chain)\npicking this:\n  {s--0} \\<subseteq> {0..t}", "have \"x \\<in> {0..t}\""], ["proof (prove)\nusing this:\n  {s--0} \\<subseteq> {0..t}\n\ngoal (1 subgoal):\n 1. x \\<in> {0..t}", "using xs0"], ["proof (prove)\nusing this:\n  {s--0} \\<subseteq> {0..t}\n  x \\<in> {s--0}\n\ngoal (1 subgoal):\n 1. x \\<in> {0..t}", "by auto"], ["proof (state)\nthis:\n  x \\<in> {0..t}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> {s--0}; 0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> x \\<in> ll_old.existence_ivl 0 (sol 0)", "then"], ["proof (chain)\npicking this:\n  x \\<in> {0..t}", "have \"x \\<in> {0--t}\""], ["proof (prove)\nusing this:\n  x \\<in> {0..t}\n\ngoal (1 subgoal):\n 1. x \\<in> {0--t}", "using tclosed"], ["proof (prove)\nusing this:\n  x \\<in> {0..t}\n  {0..t} = {0--t}\n\ngoal (1 subgoal):\n 1. x \\<in> {0--t}", "by auto"], ["proof (state)\nthis:\n  x \\<in> {0--t}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> {s--0}; 0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> x \\<in> ll_old.existence_ivl 0 (sol 0)", "then"], ["proof (chain)\npicking this:\n  x \\<in> {0--t}", "show \"x \\<in> ll_old.existence_ivl 0 (sol 0)\""], ["proof (prove)\nusing this:\n  x \\<in> {0--t}\n\ngoal (1 subgoal):\n 1. x \\<in> ll_old.existence_ivl 0 (sol 0)", "using sub"], ["proof (prove)\nusing this:\n  x \\<in> {0--t}\n  {0--t} \\<subseteq> ll_old.existence_ivl 0 (sol 0)\n\ngoal (1 subgoal):\n 1. x \\<in> ll_old.existence_ivl 0 (sol 0)", "by auto"], ["proof (state)\nthis:\n  x \\<in> ll_old.existence_ivl 0 (sol 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> (sol solves_ode\n                          (\\<lambda>t y.\n                              \\<chi>i.\n                                 if i = vid1\n                                 then sterm_sem I (f1 fid1 vid1) y else 0))\n                          {s--0} UNIV", "apply(rule solves_ode_subset)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> (sol solves_ode\n                          (\\<lambda>t y.\n                              \\<chi>i.\n                                 if i = vid1\n                                 then sterm_sem I (f1 fid1 vid1) y else 0))\n                          (?T32 s) UNIV\n 2. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> {s--0} \\<subseteq> ?T32 s", "using sol'"], ["proof (prove)\nusing this:\n  (sol solves_ode\n   (\\<lambda>a b.\n       \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n   {0--t} UNIV\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> (sol solves_ode\n                          (\\<lambda>t y.\n                              \\<chi>i.\n                                 if i = vid1\n                                 then sterm_sem I (f1 fid1 vid1) y else 0))\n                          (?T32 s) UNIV\n 2. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> {s--0} \\<subseteq> ?T32 s", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> {s--0} \\<subseteq> {0--t}", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> {s--0} \\<subseteq> {0--t}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> {s--0} \\<subseteq> {0--t}", "assume s0:\"0 \\<le> s\" and st:\"s \\<le> t\""], ["proof (state)\nthis:\n  0 \\<le> s\n  s \\<le> t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> {s--0} \\<subseteq> {0--t}", "show \"{s--0} \\<subseteq> {0--t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s--0} \\<subseteq> {0--t}", "using tclosed"], ["proof (prove)\nusing this:\n  {0..t} = {0--t}\n\ngoal (1 subgoal):\n 1. {s--0} \\<subseteq> {0--t}", "unfolding closed_segment"], ["proof (prove)\nusing this:\n  {0..t} = {0--t}\n\ngoal (1 subgoal):\n 1. {s--0} \\<subseteq> {0--t}", "using s0 st"], ["proof (prove)\nusing this:\n  {0..t} = {0--t}\n  0 \\<le> s\n  s \\<le> t\n\ngoal (1 subgoal):\n 1. {s--0} \\<subseteq> {0--t}", "using another_sub intervalE"], ["proof (prove)\nusing this:\n  {0..t} = {0--t}\n  0 \\<le> s\n  s \\<le> t\n  ?s11 \\<in> {0..t} \\<Longrightarrow> {?s11--0} \\<subseteq> {0..t}\n  \\<lbrakk>?a \\<le> ?x \\<and> ?x \\<le> ?b;\n   ?x \\<in> {?a..?b} \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. {s--0} \\<subseteq> {0--t}", "by blast"], ["proof (state)\nthis:\n  {s--0} \\<subseteq> {0--t}\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?s11 \\<in> {0..t} \\<Longrightarrow> sol ?s11 = ll_old.flow 0 (sol 0) ?s11\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sol_deriv_orig:\"\\<And>s. s\\<in>?ivl \\<Longrightarrow>  (?flow has_derivative (\\<lambda>xa. xa *\\<^sub>R (\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (?flow s) else 0))) (at s within ?ivl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       (ll_old.flow 0 (sol 0) has_derivative\n        (\\<lambda>xa.\n            xa *\\<^sub>R\n            (\\<chi>i.\n                if i = vid1\n                then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n                else 0)))\n        (at s within ll_old.existence_ivl 0 (sol 0))", "using sol_old"], ["proof (prove)\nusing this:\n  (ll_old.flow 0 (sol 0) solves_ode\n   (\\<lambda>a b.\n       \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n   (ll_old.existence_ivl 0 (sol 0)) UNIV\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       (ll_old.flow 0 (sol 0) has_derivative\n        (\\<lambda>xa.\n            xa *\\<^sub>R\n            (\\<chi>i.\n                if i = vid1\n                then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n                else 0)))\n        (at s within ll_old.existence_ivl 0 (sol 0))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>s \\<in> ll_old.existence_ivl 0 (sol 0);\n        (ll_old.flow 0 (sol 0) solves_ode\n         (\\<lambda>a b.\n             \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n         (ll_old.existence_ivl 0 (sol 0)) UNIV\\<rbrakk>\n       \\<Longrightarrow> (ll_old.flow 0 (sol 0) has_derivative\n                          (\\<lambda>xa.\n                              xa *\\<^sub>R\n                              (\\<chi>i.\n                                  if i = vid1\n                                  then sterm_sem I (f1 fid1 vid1)\n  (ll_old.flow 0 (sol 0) s)\n                                  else 0)))\n                          (at s within ll_old.existence_ivl 0 (sol 0))", "apply(drule solves_odeD(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>s \\<in> ll_old.existence_ivl 0 (sol 0);\n        (ll_old.flow 0 (sol 0) has_vderiv_on\n         (\\<lambda>t.\n             \\<chi>i.\n                if i = vid1\n                then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) t)\n                else 0))\n         (ll_old.existence_ivl 0 (sol 0))\\<rbrakk>\n       \\<Longrightarrow> (ll_old.flow 0 (sol 0) has_derivative\n                          (\\<lambda>xa.\n                              xa *\\<^sub>R\n                              (\\<chi>i.\n                                  if i = vid1\n                                  then sterm_sem I (f1 fid1 vid1)\n  (ll_old.flow 0 (sol 0) s)\n                                  else 0)))\n                          (at s within ll_old.existence_ivl 0 (sol 0))", "by (auto simp add: has_vderiv_on_def has_vector_derivative_def)"], ["proof (state)\nthis:\n  ?s11 \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n  (ll_old.flow 0 (sol 0) has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       (\\<chi>i.\n           if i = vid1\n           then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) ?s11)\n           else 0)))\n   (at ?s11 within ll_old.existence_ivl 0 (sol 0))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sol_eta:\"(\\<lambda>t. \\<chi> i. ?flow t $ i) = ?flow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t. \\<chi>i. ll_old.flow 0 (sol 0) t $ i) =\n    ll_old.flow 0 (sol 0)", "by(rule ext, rule vec_extensionality, auto)"], ["proof (state)\nthis:\n  (\\<lambda>t. \\<chi>i. ll_old.flow 0 (sol 0) t $ i) = ll_old.flow 0 (sol 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sol_deriv_eq1:\"\\<And>s i. (\\<lambda>xa. xa *\\<^sub>R (\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (?flow s) else 0)) = (\\<lambda>xa. \\<chi> i. xa * (if i = vid1 then sterm_sem I (f1 fid1 vid1) (?flow s) else 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s i.\n       (\\<lambda>xa.\n           xa *\\<^sub>R\n           (\\<chi>i.\n               if i = vid1\n               then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n               else 0)) =\n       (\\<lambda>xa.\n           \\<chi>i.\n              xa *\n              (if i = vid1\n               then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n               else 0))", "by(rule ext, rule vec_extensionality, auto)"], ["proof (state)\nthis:\n  (\\<lambda>xa.\n      xa *\\<^sub>R\n      (\\<chi>i.\n          if i = vid1\n          then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) ?s11)\n          else 0)) =\n  (\\<lambda>xa.\n      \\<chi>i.\n         xa *\n         (if i = vid1\n          then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) ?s11)\n          else 0))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sol_deriv_proj:\"\\<And>s i. s\\<in>?ivl \\<Longrightarrow>  ((\\<lambda>t. ?flow t $ i) has_derivative (\\<lambda>xa. (xa *\\<^sub>R (\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (?flow s) else 0)) $ i)) (at s within ?ivl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s i.\n       s \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>t. ll_old.flow 0 (sol 0) t $ i) has_derivative\n        (\\<lambda>xa.\n            (xa *\\<^sub>R\n             (\\<chi>i.\n                 if i = vid1\n                 then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n                 else 0)) $\n            i))\n        (at s within ll_old.existence_ivl 0 (sol 0))", "subgoal for s i"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n    ((\\<lambda>t. ll_old.flow 0 (sol 0) t $ i) has_derivative\n     (\\<lambda>xa.\n         (xa *\\<^sub>R\n          (\\<chi>i.\n              if i = vid1\n              then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n              else 0)) $\n         i))\n     (at s within ll_old.existence_ivl 0 (sol 0))", "apply(rule has_derivative_proj[of \"(\\<lambda> i t. ?flow t $ i)\" \"(\\<lambda> i t'. (t' *\\<^sub>R (\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (?flow s) else 0)) $ i)\" \"(at s within ?ivl)\" \"i\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n    ((\\<lambda>t. \\<chi>i. ll_old.flow 0 (sol 0) t $ i) has_derivative\n     (\\<lambda>xa.\n         \\<chi>i.\n            (xa *\\<^sub>R\n             (\\<chi>i.\n                 if i = vid1\n                 then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n                 else 0)) $\n            i))\n     (at s within ll_old.existence_ivl 0 (sol 0))", "using sol_deriv_orig[of s] sol_eta sol_deriv_eq1"], ["proof (prove)\nusing this:\n  s \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n  (ll_old.flow 0 (sol 0) has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       (\\<chi>i.\n           if i = vid1\n           then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n           else 0)))\n   (at s within ll_old.existence_ivl 0 (sol 0))\n  (\\<lambda>t. \\<chi>i. ll_old.flow 0 (sol 0) t $ i) = ll_old.flow 0 (sol 0)\n  (\\<lambda>xa.\n      xa *\\<^sub>R\n      (\\<chi>i.\n          if i = vid1\n          then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) ?s11)\n          else 0)) =\n  (\\<lambda>xa.\n      \\<chi>i.\n         xa *\n         (if i = vid1\n          then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) ?s11)\n          else 0))\n\ngoal (1 subgoal):\n 1. s \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n    ((\\<lambda>t. \\<chi>i. ll_old.flow 0 (sol 0) t $ i) has_derivative\n     (\\<lambda>xa.\n         \\<chi>i.\n            (xa *\\<^sub>R\n             (\\<chi>i.\n                 if i = vid1\n                 then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n                 else 0)) $\n            i))\n     (at s within ll_old.existence_ivl 0 (sol 0))", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?s12 \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n  ((\\<lambda>t. ll_old.flow 0 (sol 0) t $ ?i12) has_derivative\n   (\\<lambda>xa.\n       (xa *\\<^sub>R\n        (\\<chi>i.\n            if i = vid1\n            then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) ?s12)\n            else 0)) $\n       ?i12))\n   (at ?s12 within ll_old.existence_ivl 0 (sol 0))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sol_deriv_eq2:\"\\<And>s i. (\\<lambda>xa. xa * (if i = vid1 then sterm_sem I (f1 fid1 vid1) (?flow s) else 0)) = (\\<lambda>xa. (xa *\\<^sub>R (\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (?flow s) else 0)) $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s i.\n       (\\<lambda>xa.\n           xa *\n           (if i = vid1\n            then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n            else 0)) =\n       (\\<lambda>xa.\n           (xa *\\<^sub>R\n            (\\<chi>i.\n                if i = vid1\n                then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n                else 0)) $\n           i)", "by(rule ext, auto)"], ["proof (state)\nthis:\n  (\\<lambda>xa.\n      xa *\n      (if ?i12 = vid1\n       then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) ?s12)\n       else 0)) =\n  (\\<lambda>xa.\n      (xa *\\<^sub>R\n       (\\<chi>i.\n           if i = vid1\n           then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) ?s12)\n           else 0)) $\n      ?i12)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sol_deriv_proj':\"\\<And>s i. s\\<in>?ivl \\<Longrightarrow>  ((\\<lambda>t. ?flow t $ i) has_derivative (\\<lambda>xa. xa * (if i = vid1 then sterm_sem I (f1 fid1 vid1) (?flow s) else 0))) (at s within ?ivl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s i.\n       s \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>t. ll_old.flow 0 (sol 0) t $ i) has_derivative\n        (\\<lambda>xa.\n            xa *\n            (if i = vid1\n             then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n             else 0)))\n        (at s within ll_old.existence_ivl 0 (sol 0))", "subgoal for s i"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n    ((\\<lambda>t. ll_old.flow 0 (sol 0) t $ i) has_derivative\n     (\\<lambda>xa.\n         xa *\n         (if i = vid1\n          then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n          else 0)))\n     (at s within ll_old.existence_ivl 0 (sol 0))", "using sol_deriv_proj[of s i] sol_deriv_eq2[of i s]"], ["proof (prove)\nusing this:\n  s \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n  ((\\<lambda>t. ll_old.flow 0 (sol 0) t $ i) has_derivative\n   (\\<lambda>xa.\n       (xa *\\<^sub>R\n        (\\<chi>i.\n            if i = vid1\n            then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n            else 0)) $\n       i))\n   (at s within ll_old.existence_ivl 0 (sol 0))\n  (\\<lambda>xa.\n      xa *\n      (if i = vid1 then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n       else 0)) =\n  (\\<lambda>xa.\n      (xa *\\<^sub>R\n       (\\<chi>i.\n           if i = vid1\n           then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n           else 0)) $\n      i)\n\ngoal (1 subgoal):\n 1. s \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n    ((\\<lambda>t. ll_old.flow 0 (sol 0) t $ i) has_derivative\n     (\\<lambda>xa.\n         xa *\n         (if i = vid1\n          then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n          else 0)))\n     (at s within ll_old.existence_ivl 0 (sol 0))", "by metis"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?s12 \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n  ((\\<lambda>t. ll_old.flow 0 (sol 0) t $ ?i12) has_derivative\n   (\\<lambda>xa.\n       xa *\n       (if ?i12 = vid1\n        then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) ?s12)\n        else 0)))\n   (at ?s12 within ll_old.existence_ivl 0 (sol 0))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sol_deriv_proj_vid1:\"\\<And>s. s\\<in>?ivl \\<Longrightarrow>  ((\\<lambda>t. ?flow t $ vid1) has_derivative (\\<lambda>xa. xa * (sterm_sem I (f1 fid1 vid1) (?flow s)))) (at s within ?ivl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>t. ll_old.flow 0 (sol 0) t $ vid1) has_derivative\n        (\\<lambda>xa.\n            xa * sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)))\n        (at s within ll_old.existence_ivl 0 (sol 0))", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n    ((\\<lambda>t. ll_old.flow 0 (sol 0) t $ vid1) has_derivative\n     (\\<lambda>xa.\n         xa * sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)))\n     (at s within ll_old.existence_ivl 0 (sol 0))", "using sol_deriv_proj'[of s vid1]"], ["proof (prove)\nusing this:\n  s \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n  ((\\<lambda>t. ll_old.flow 0 (sol 0) t $ vid1) has_derivative\n   (\\<lambda>xa.\n       xa *\n       (if vid1 = vid1\n        then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s) else 0)))\n   (at s within ll_old.existence_ivl 0 (sol 0))\n\ngoal (1 subgoal):\n 1. s \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n    ((\\<lambda>t. ll_old.flow 0 (sol 0) t $ vid1) has_derivative\n     (\\<lambda>xa.\n         xa * sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)))\n     (at s within ll_old.existence_ivl 0 (sol 0))", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?s12 \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n  ((\\<lambda>t. ll_old.flow 0 (sol 0) t $ vid1) has_derivative\n   (\\<lambda>xa.\n       xa * sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) ?s12)))\n   (at ?s12 within ll_old.existence_ivl 0 (sol 0))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have deriv1_args:\"\\<And>s. s \\<in> ?ivl \\<Longrightarrow> ((\\<lambda> t. (\\<chi> i. sterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) (?flow t))) has_derivative ((\\<lambda> t'. \\<chi> i . t' * (if i = vid1 then sterm_sem I (f1 fid1 vid1) (?flow s) else 0)))) (at s within ?ivl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>t.\n            \\<chi>i.\n               sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (ll_old.flow 0 (sol 0) t)) has_derivative\n        (\\<lambda>t'.\n            \\<chi>i.\n               t' *\n               (if i = vid1\n                then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n                else 0)))\n        (at s within ll_old.existence_ivl 0 (sol 0))", "apply(rule has_derivative_vec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s i.\n       s \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>t.\n            sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (ll_old.flow 0 (sol 0) t)) has_derivative\n        (\\<lambda>t'.\n            t' *\n            (if i = vid1\n             then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n             else 0)))\n        (at s within ll_old.existence_ivl 0 (sol 0))", "by (auto simp add: sol_deriv_proj_vid1)"], ["proof (state)\nthis:\n  ?s12 \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n  ((\\<lambda>t.\n       \\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (ll_old.flow 0 (sol 0) t)) has_derivative\n   (\\<lambda>t'.\n       \\<chi>i.\n          t' *\n          (if i = vid1\n           then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) ?s12)\n           else 0)))\n   (at ?s12 within ll_old.existence_ivl 0 (sol 0))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have con_fid:\"\\<And>fid. continuous_on ?ivl (\\<lambda>x. sterm_sem I (f1 fid vid1) (?flow x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fid.\n       continuous_on (ll_old.existence_ivl 0 (sol 0))\n        (\\<lambda>x. sterm_sem I (f1 fid vid1) (ll_old.flow 0 (sol 0) x))", "subgoal for fid"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (ll_old.existence_ivl 0 (sol 0))\n     (\\<lambda>x. sterm_sem I (f1 fid vid1) (ll_old.flow 0 (sol 0) x))", "apply(rule has_derivative_continuous_on[of \"?ivl\" \"(\\<lambda>x. sterm_sem I (f1 fid vid1) (?flow x))\"\n          \"(\\<lambda>t t'.  FunctionFrechet I fid (\\<chi> i. sterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) (?flow t)) (\\<chi> i . t' * (if i = vid1 then sterm_sem I (f1 fid1 vid1) (?flow t) else 0)))\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>x.\n            sterm_sem I (f1 fid vid1)\n             (ll_old.flow 0 (sol 0) x)) has_derivative\n        (\\<lambda>t'.\n            FunctionFrechet I fid\n             (\\<chi>i.\n                 sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (ll_old.flow 0 (sol 0) x))\n             (\\<chi>i.\n                 t' *\n                 (if i = vid1\n                  then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) x)\n                  else 0))))\n        (at x within ll_old.existence_ivl 0 (sol 0))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>x.\n            sterm_sem I (f1 fid vid1)\n             (ll_old.flow 0 (sol 0) x)) has_derivative\n        (\\<lambda>t'.\n            FunctionFrechet I fid\n             (\\<chi>i.\n                 sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (ll_old.flow 0 (sol 0) x))\n             (\\<chi>i.\n                 t' *\n                 (if i = vid1\n                  then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) x)\n                  else 0))))\n        (at x within ll_old.existence_ivl 0 (sol 0))", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>x.\n            sterm_sem I (f1 fid vid1)\n             (ll_old.flow 0 (sol 0) x)) has_derivative\n        (\\<lambda>t'.\n            FunctionFrechet I fid\n             (\\<chi>i.\n                 sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (ll_old.flow 0 (sol 0) x))\n             (\\<chi>i.\n                 t' *\n                 (if i = vid1\n                  then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) x)\n                  else 0))))\n        (at x within ll_old.existence_ivl 0 (sol 0))", "assume ivl:\"s \\<in> ?ivl\""], ["proof (state)\nthis:\n  s \\<in> ll_old.existence_ivl 0 (sol 0)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>x.\n            sterm_sem I (f1 fid vid1)\n             (ll_old.flow 0 (sol 0) x)) has_derivative\n        (\\<lambda>t'.\n            FunctionFrechet I fid\n             (\\<chi>i.\n                 sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (ll_old.flow 0 (sol 0) x))\n             (\\<chi>i.\n                 t' *\n                 (if i = vid1\n                  then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) x)\n                  else 0))))\n        (at x within ll_old.existence_ivl 0 (sol 0))", "let ?h = \"(\\<lambda>x. sterm_sem I (f1 fid vid1) (?flow x))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>x.\n            sterm_sem I (f1 fid vid1)\n             (ll_old.flow 0 (sol 0) x)) has_derivative\n        (\\<lambda>t'.\n            FunctionFrechet I fid\n             (\\<chi>i.\n                 sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (ll_old.flow 0 (sol 0) x))\n             (\\<chi>i.\n                 t' *\n                 (if i = vid1\n                  then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) x)\n                  else 0))))\n        (at x within ll_old.existence_ivl 0 (sol 0))", "let ?g = \"Functions I fid\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>x.\n            sterm_sem I (f1 fid vid1)\n             (ll_old.flow 0 (sol 0) x)) has_derivative\n        (\\<lambda>t'.\n            FunctionFrechet I fid\n             (\\<chi>i.\n                 sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (ll_old.flow 0 (sol 0) x))\n             (\\<chi>i.\n                 t' *\n                 (if i = vid1\n                  then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) x)\n                  else 0))))\n        (at x within ll_old.existence_ivl 0 (sol 0))", "let ?f = \"(\\<lambda>x. (\\<chi> i. sterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) (?flow x)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>x.\n            sterm_sem I (f1 fid vid1)\n             (ll_old.flow 0 (sol 0) x)) has_derivative\n        (\\<lambda>t'.\n            FunctionFrechet I fid\n             (\\<chi>i.\n                 sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (ll_old.flow 0 (sol 0) x))\n             (\\<chi>i.\n                 t' *\n                 (if i = vid1\n                  then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) x)\n                  else 0))))\n        (at x within ll_old.existence_ivl 0 (sol 0))", "let ?h' = \"(\\<lambda>t'. FunctionFrechet I fid (\\<chi> i. sterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) (?flow s))\n              (\\<chi> i. t' * (if i = vid1 then sterm_sem I (f1 fid1 vid1) (?flow s) else 0)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>x.\n            sterm_sem I (f1 fid vid1)\n             (ll_old.flow 0 (sol 0) x)) has_derivative\n        (\\<lambda>t'.\n            FunctionFrechet I fid\n             (\\<chi>i.\n                 sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (ll_old.flow 0 (sol 0) x))\n             (\\<chi>i.\n                 t' *\n                 (if i = vid1\n                  then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) x)\n                  else 0))))\n        (at x within ll_old.existence_ivl 0 (sol 0))", "let ?g' = \"FunctionFrechet I fid (?f s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>x.\n            sterm_sem I (f1 fid vid1)\n             (ll_old.flow 0 (sol 0) x)) has_derivative\n        (\\<lambda>t'.\n            FunctionFrechet I fid\n             (\\<chi>i.\n                 sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (ll_old.flow 0 (sol 0) x))\n             (\\<chi>i.\n                 t' *\n                 (if i = vid1\n                  then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) x)\n                  else 0))))\n        (at x within ll_old.existence_ivl 0 (sol 0))", "let ?f' = \"(\\<lambda> t'. \\<chi> i . t' * (if i = vid1 then sterm_sem I (f1 fid1 vid1) (?flow s) else 0))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>x.\n            sterm_sem I (f1 fid vid1)\n             (ll_old.flow 0 (sol 0) x)) has_derivative\n        (\\<lambda>t'.\n            FunctionFrechet I fid\n             (\\<chi>i.\n                 sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (ll_old.flow 0 (sol 0) x))\n             (\\<chi>i.\n                 t' *\n                 (if i = vid1\n                  then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) x)\n                  else 0))))\n        (at x within ll_old.existence_ivl 0 (sol 0))", "have heq:\"?h = ?g \\<circ> ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. sterm_sem I (f1 fid vid1) (ll_old.flow 0 (sol 0) x)) =\n    Functions I fid \\<circ>\n    (\\<lambda>x.\n        \\<chi>i.\n           sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (ll_old.flow 0 (sol 0) x))", "unfolding comp_def f1_def expand_singleton"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        sterm_sem I\n         ($f fid (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n         (ll_on_open.flow UNIV\n           (\\<lambda>a b.\n               \\<chi>i.\n                  if i = vid1\n                  then sterm_sem I\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0))\n                        b\n                  else 0)\n           UNIV 0 (sol 0) x)) =\n    (\\<lambda>x.\n        Functions I fid\n         (\\<chi>i.\n             sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n              (ll_on_open.flow UNIV\n                (\\<lambda>a b.\n                    \\<chi>i.\n                       if i = vid1\n                       then sterm_sem I\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0))\n                             b\n                       else 0)\n                UNIV 0 (sol 0) x)))", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. sterm_sem I (f1 fid vid1) (ll_old.flow 0 (sol 0) x)) =\n  Functions I fid \\<circ>\n  (\\<lambda>x.\n      \\<chi>i.\n         sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n          (ll_old.flow 0 (sol 0) x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>x.\n            sterm_sem I (f1 fid vid1)\n             (ll_old.flow 0 (sol 0) x)) has_derivative\n        (\\<lambda>t'.\n            FunctionFrechet I fid\n             (\\<chi>i.\n                 sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (ll_old.flow 0 (sol 0) x))\n             (\\<chi>i.\n                 t' *\n                 (if i = vid1\n                  then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) x)\n                  else 0))))\n        (at x within ll_old.existence_ivl 0 (sol 0))", "have heq':\"?h' = ?g' \\<circ> ?f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t'.\n        FunctionFrechet I fid\n         (\\<chi>i.\n             sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n              (ll_old.flow 0 (sol 0) s))\n         (\\<chi>i.\n             t' *\n             (if i = vid1\n              then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n              else 0))) =\n    FunctionFrechet I fid\n     (\\<chi>i.\n         sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n          (ll_old.flow 0 (sol 0) s)) \\<circ>\n    (\\<lambda>t'.\n        \\<chi>i.\n           t' *\n           (if i = vid1\n            then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n            else 0))", "unfolding comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t'.\n        FunctionFrechet I fid\n         (\\<chi>i.\n             sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n              (ll_old.flow 0 (sol 0) s))\n         (\\<chi>i.\n             t' *\n             (if i = vid1\n              then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n              else 0))) =\n    (\\<lambda>x.\n        FunctionFrechet I fid\n         (\\<chi>i.\n             sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n              (ll_old.flow 0 (sol 0) s))\n         (\\<chi>i.\n             x *\n             (if i = vid1\n              then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n              else 0)))", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>t'.\n      FunctionFrechet I fid\n       (\\<chi>i.\n           sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (ll_old.flow 0 (sol 0) s))\n       (\\<chi>i.\n           t' *\n           (if i = vid1\n            then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n            else 0))) =\n  FunctionFrechet I fid\n   (\\<chi>i.\n       sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (ll_old.flow 0 (sol 0) s)) \\<circ>\n  (\\<lambda>t'.\n      \\<chi>i.\n         t' *\n         (if i = vid1\n          then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s) else 0))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>x.\n            sterm_sem I (f1 fid vid1)\n             (ll_old.flow 0 (sol 0) x)) has_derivative\n        (\\<lambda>t'.\n            FunctionFrechet I fid\n             (\\<chi>i.\n                 sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (ll_old.flow 0 (sol 0) x))\n             (\\<chi>i.\n                 t' *\n                 (if i = vid1\n                  then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) x)\n                  else 0))))\n        (at x within ll_old.existence_ivl 0 (sol 0))", "have fderiv:\"(?f has_derivative ?f') (at s within ?ivl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         \\<chi>i.\n            sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (ll_old.flow 0 (sol 0) x)) has_derivative\n     (\\<lambda>t'.\n         \\<chi>i.\n            t' *\n            (if i = vid1\n             then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n             else 0)))\n     (at s within ll_old.existence_ivl 0 (sol 0))", "using deriv1_args[OF ivl]"], ["proof (prove)\nusing this:\n  ((\\<lambda>t.\n       \\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (ll_old.flow 0 (sol 0) t)) has_derivative\n   (\\<lambda>t'.\n       \\<chi>i.\n          t' *\n          (if i = vid1\n           then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n           else 0)))\n   (at s within ll_old.existence_ivl 0 (sol 0))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         \\<chi>i.\n            sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (ll_old.flow 0 (sol 0) x)) has_derivative\n     (\\<lambda>t'.\n         \\<chi>i.\n            t' *\n            (if i = vid1\n             then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n             else 0)))\n     (at s within ll_old.existence_ivl 0 (sol 0))", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       \\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (ll_old.flow 0 (sol 0) x)) has_derivative\n   (\\<lambda>t'.\n       \\<chi>i.\n          t' *\n          (if i = vid1\n           then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n           else 0)))\n   (at s within ll_old.existence_ivl 0 (sol 0))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>x.\n            sterm_sem I (f1 fid vid1)\n             (ll_old.flow 0 (sol 0) x)) has_derivative\n        (\\<lambda>t'.\n            FunctionFrechet I fid\n             (\\<chi>i.\n                 sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (ll_old.flow 0 (sol 0) x))\n             (\\<chi>i.\n                 t' *\n                 (if i = vid1\n                  then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) x)\n                  else 0))))\n        (at x within ll_old.existence_ivl 0 (sol 0))", "have gderiv:\"(?g has_derivative ?g') (at (?f s) within (?f ` ?ivl))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Functions I fid has_derivative\n     FunctionFrechet I fid\n      (\\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (ll_old.flow 0 (sol 0) s)))\n     (at (\\<chi>i.\n             sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n              (ll_old.flow 0 (sol 0) s))\n      within (\\<lambda>x.\n                 \\<chi>i.\n                    sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                     (ll_old.flow 0 (sol 0) x)) `\n             ll_old.existence_ivl 0 (sol 0))", "using good_interp"], ["proof (prove)\nusing this:\n  is_interp I\n\ngoal (1 subgoal):\n 1. (Functions I fid has_derivative\n     FunctionFrechet I fid\n      (\\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (ll_old.flow 0 (sol 0) s)))\n     (at (\\<chi>i.\n             sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n              (ll_old.flow 0 (sol 0) s))\n      within (\\<lambda>x.\n                 \\<chi>i.\n                    sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                     (ll_old.flow 0 (sol 0) x)) `\n             ll_old.existence_ivl 0 (sol 0))", "unfolding is_interp_def"], ["proof (prove)\nusing this:\n  \\<forall>x i.\n     (Functions I i has_derivative FunctionFrechet I i x) (at x) \\<and>\n     continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet I i x))\n\ngoal (1 subgoal):\n 1. (Functions I fid has_derivative\n     FunctionFrechet I fid\n      (\\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (ll_old.flow 0 (sol 0) s)))\n     (at (\\<chi>i.\n             sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n              (ll_old.flow 0 (sol 0) s))\n      within (\\<lambda>x.\n                 \\<chi>i.\n                    sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                     (ll_old.flow 0 (sol 0) x)) `\n             ll_old.existence_ivl 0 (sol 0))", "using  has_derivative_subset"], ["proof (prove)\nusing this:\n  \\<forall>x i.\n     (Functions I i has_derivative FunctionFrechet I i x) (at x) \\<and>\n     continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet I i x))\n  \\<lbrakk>(?f has_derivative ?f') (at ?x within ?s);\n   ?t \\<subseteq> ?s\\<rbrakk>\n  \\<Longrightarrow> (?f has_derivative ?f') (at ?x within ?t)\n\ngoal (1 subgoal):\n 1. (Functions I fid has_derivative\n     FunctionFrechet I fid\n      (\\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (ll_old.flow 0 (sol 0) s)))\n     (at (\\<chi>i.\n             sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n              (ll_old.flow 0 (sol 0) s))\n      within (\\<lambda>x.\n                 \\<chi>i.\n                    sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                     (ll_old.flow 0 (sol 0) x)) `\n             ll_old.existence_ivl 0 (sol 0))", "by blast"], ["proof (state)\nthis:\n  (Functions I fid has_derivative\n   FunctionFrechet I fid\n    (\\<chi>i.\n        sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (ll_old.flow 0 (sol 0) s)))\n   (at (\\<chi>i.\n           sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (ll_old.flow 0 (sol 0) s))\n    within (\\<lambda>x.\n               \\<chi>i.\n                  sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (ll_old.flow 0 (sol 0) x)) `\n           ll_old.existence_ivl 0 (sol 0))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>x.\n            sterm_sem I (f1 fid vid1)\n             (ll_old.flow 0 (sol 0) x)) has_derivative\n        (\\<lambda>t'.\n            FunctionFrechet I fid\n             (\\<chi>i.\n                 sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (ll_old.flow 0 (sol 0) x))\n             (\\<chi>i.\n                 t' *\n                 (if i = vid1\n                  then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) x)\n                  else 0))))\n        (at x within ll_old.existence_ivl 0 (sol 0))", "have gfderiv:\"((?g \\<circ> ?f) has_derivative (?g' \\<circ> ?f')) (at s within ?ivl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Functions I fid \\<circ>\n     (\\<lambda>x.\n         \\<chi>i.\n            sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (ll_old.flow 0 (sol 0) x)) has_derivative\n     FunctionFrechet I fid\n      (\\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (ll_old.flow 0 (sol 0) s)) \\<circ>\n     (\\<lambda>t'.\n         \\<chi>i.\n            t' *\n            (if i = vid1\n             then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n             else 0)))\n     (at s within ll_old.existence_ivl 0 (sol 0))", "using fderiv gderiv diff_chain_within"], ["proof (prove)\nusing this:\n  ((\\<lambda>x.\n       \\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (ll_old.flow 0 (sol 0) x)) has_derivative\n   (\\<lambda>t'.\n       \\<chi>i.\n          t' *\n          (if i = vid1\n           then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n           else 0)))\n   (at s within ll_old.existence_ivl 0 (sol 0))\n  (Functions I fid has_derivative\n   FunctionFrechet I fid\n    (\\<chi>i.\n        sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (ll_old.flow 0 (sol 0) s)))\n   (at (\\<chi>i.\n           sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (ll_old.flow 0 (sol 0) s))\n    within (\\<lambda>x.\n               \\<chi>i.\n                  sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (ll_old.flow 0 (sol 0) x)) `\n           ll_old.existence_ivl 0 (sol 0))\n  \\<lbrakk>(?f has_derivative ?f') (at ?x within ?s);\n   (?g has_derivative ?g') (at (?f ?x) within ?f ` ?s)\\<rbrakk>\n  \\<Longrightarrow> (?g \\<circ> ?f has_derivative ?g' \\<circ> ?f')\n                     (at ?x within ?s)\n\ngoal (1 subgoal):\n 1. (Functions I fid \\<circ>\n     (\\<lambda>x.\n         \\<chi>i.\n            sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (ll_old.flow 0 (sol 0) x)) has_derivative\n     FunctionFrechet I fid\n      (\\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (ll_old.flow 0 (sol 0) s)) \\<circ>\n     (\\<lambda>t'.\n         \\<chi>i.\n            t' *\n            (if i = vid1\n             then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n             else 0)))\n     (at s within ll_old.existence_ivl 0 (sol 0))", "by blast"], ["proof (state)\nthis:\n  (Functions I fid \\<circ>\n   (\\<lambda>x.\n       \\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (ll_old.flow 0 (sol 0) x)) has_derivative\n   FunctionFrechet I fid\n    (\\<chi>i.\n        sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (ll_old.flow 0 (sol 0) s)) \\<circ>\n   (\\<lambda>t'.\n       \\<chi>i.\n          t' *\n          (if i = vid1\n           then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n           else 0)))\n   (at s within ll_old.existence_ivl 0 (sol 0))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>x.\n            sterm_sem I (f1 fid vid1)\n             (ll_old.flow 0 (sol 0) x)) has_derivative\n        (\\<lambda>t'.\n            FunctionFrechet I fid\n             (\\<chi>i.\n                 sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (ll_old.flow 0 (sol 0) x))\n             (\\<chi>i.\n                 t' *\n                 (if i = vid1\n                  then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) x)\n                  else 0))))\n        (at x within ll_old.existence_ivl 0 (sol 0))", "show \"((\\<lambda>x. sterm_sem I (f1 fid vid1) (?flow x)) has_derivative\n       (\\<lambda>t'. FunctionFrechet I fid (\\<chi> i. sterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) (?flow s))\n              (\\<chi> i. t' * (if i = vid1 then sterm_sem I (f1 fid1 vid1) (?flow s) else 0))))\n       (at s within ?ivl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         sterm_sem I (f1 fid vid1) (ll_old.flow 0 (sol 0) x)) has_derivative\n     (\\<lambda>t'.\n         FunctionFrechet I fid\n          (\\<chi>i.\n              sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (ll_old.flow 0 (sol 0) s))\n          (\\<chi>i.\n              t' *\n              (if i = vid1\n               then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n               else 0))))\n     (at s within ll_old.existence_ivl 0 (sol 0))", "using heq heq' gfderiv"], ["proof (prove)\nusing this:\n  (\\<lambda>x. sterm_sem I (f1 fid vid1) (ll_old.flow 0 (sol 0) x)) =\n  Functions I fid \\<circ>\n  (\\<lambda>x.\n      \\<chi>i.\n         sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n          (ll_old.flow 0 (sol 0) x))\n  (\\<lambda>t'.\n      FunctionFrechet I fid\n       (\\<chi>i.\n           sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (ll_old.flow 0 (sol 0) s))\n       (\\<chi>i.\n           t' *\n           (if i = vid1\n            then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n            else 0))) =\n  FunctionFrechet I fid\n   (\\<chi>i.\n       sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (ll_old.flow 0 (sol 0) s)) \\<circ>\n  (\\<lambda>t'.\n      \\<chi>i.\n         t' *\n         (if i = vid1\n          then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s) else 0))\n  (Functions I fid \\<circ>\n   (\\<lambda>x.\n       \\<chi>i.\n          sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (ll_old.flow 0 (sol 0) x)) has_derivative\n   FunctionFrechet I fid\n    (\\<chi>i.\n        sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (ll_old.flow 0 (sol 0) s)) \\<circ>\n   (\\<lambda>t'.\n       \\<chi>i.\n          t' *\n          (if i = vid1\n           then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n           else 0)))\n   (at s within ll_old.existence_ivl 0 (sol 0))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         sterm_sem I (f1 fid vid1) (ll_old.flow 0 (sol 0) x)) has_derivative\n     (\\<lambda>t'.\n         FunctionFrechet I fid\n          (\\<chi>i.\n              sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (ll_old.flow 0 (sol 0) s))\n          (\\<chi>i.\n              t' *\n              (if i = vid1\n               then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n               else 0))))\n     (at s within ll_old.existence_ivl 0 (sol 0))", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       sterm_sem I (f1 fid vid1) (ll_old.flow 0 (sol 0) x)) has_derivative\n   (\\<lambda>t'.\n       FunctionFrechet I fid\n        (\\<chi>i.\n            sterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (ll_old.flow 0 (sol 0) s))\n        (\\<chi>i.\n            t' *\n            (if i = vid1\n             then sterm_sem I (f1 fid1 vid1) (ll_old.flow 0 (sol 0) s)\n             else 0))))\n   (at s within ll_old.existence_ivl 0 (sol 0))\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  continuous_on (ll_old.existence_ivl 0 (sol 0))\n   (\\<lambda>x. sterm_sem I (f1 ?fid12 vid1) (ll_old.flow 0 (sol 0) x))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have con:\"\\<And>x. continuous_on (?ivl) (\\<lambda>t. x * sterm_sem I (f1 fid2 vid1) (?flow t) + sterm_sem I (f1 fid3 vid1) (?flow t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       continuous_on (ll_old.existence_ivl 0 (sol 0))\n        (\\<lambda>t.\n            x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n            sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t))", "apply(rule continuous_on_add)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       continuous_on (ll_old.existence_ivl 0 (sol 0))\n        (\\<lambda>xa.\n            x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) xa))\n 2. \\<And>x.\n       continuous_on (ll_old.existence_ivl 0 (sol 0))\n        (\\<lambda>x. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) x))", "apply(rule continuous_on_mult_left)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       continuous_on (ll_old.existence_ivl 0 (sol 0))\n        (\\<lambda>x. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) x))\n 2. \\<And>x.\n       continuous_on (ll_old.existence_ivl 0 (sol 0))\n        (\\<lambda>x. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) x))", "apply(rule con_fid[of fid2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       continuous_on (ll_old.existence_ivl 0 (sol 0))\n        (\\<lambda>x. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) x))", "by(rule con_fid[of fid3])"], ["proof (state)\nthis:\n  continuous_on (ll_old.existence_ivl 0 (sol 0))\n   (\\<lambda>t.\n       ?x12 * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n       sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "let ?axis = \"(\\<lambda> i. Blinfun(axis i))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have bounded_linear_deriv:\"\\<And>t. bounded_linear (\\<lambda>y' . y' *\\<^sub>R  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       bounded_linear\n        (\\<lambda>y'.\n            y' *\\<^sub>R\n            sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t))", "using bounded_linear_scaleR_left"], ["proof (prove)\nusing this:\n  bounded_linear (\\<lambda>r. r *\\<^sub>R ?x)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       bounded_linear\n        (\\<lambda>y'.\n            y' *\\<^sub>R\n            sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t))", "by blast"], ["proof (state)\nthis:\n  bounded_linear\n   (\\<lambda>y'.\n       y' *\\<^sub>R sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) ?t13))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have ll:\"local_lipschitz (ll_old.existence_ivl 0 (sol 0)) UNIV (\\<lambda>t y. y * sterm_sem I (f1 fid2 vid1) (?flow t) + sterm_sem I (f1 fid3 vid1) (?flow t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local_lipschitz (ll_old.existence_ivl 0 (sol 0)) UNIV\n     (\\<lambda>t y.\n         y * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n         sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t))", "apply(rule c1_implies_local_lipschitz[where f'=\"(\\<lambda> (t,y). Blinfun(\\<lambda>y' . y' *\\<^sub>R  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)))\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t x.\n       \\<lbrakk>t \\<in> ll_old.existence_ivl 0 (sol 0);\n        x \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>y.\n                              y *\n                              sterm_sem I (f1 fid2 vid1)\n                               (ll_old.flow 0 (sol 0) t) +\n                              sterm_sem I (f1 fid3 vid1)\n                               (ll_old.flow 0 (sol 0) t)) has_derivative\n                          blinfun_apply\n                           (case (t, x) of\n                            (t, y) \\<Rightarrow>\n                              Blinfun\n                               (\\<lambda>y'.\n                                   y' *\\<^sub>R\n                                   sterm_sem I (f1 fid2 vid1)\n                                    (ll_old.flow 0 (sol 0) t))))\n                          (at x)\n 2. continuous_on (ll_old.existence_ivl 0 (sol 0) \\<times> UNIV)\n     (\\<lambda>(t, y).\n         Blinfun\n          (\\<lambda>y'.\n              y' *\\<^sub>R\n              sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)))\n 3. open (ll_old.existence_ivl 0 (sol 0))\n 4. open UNIV", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t x.\n       t \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n       ((\\<lambda>y.\n            y * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n            sterm_sem I (f1 fid3 vid1)\n             (ll_old.flow 0 (sol 0) t)) has_derivative\n        blinfun_apply\n         (Blinfun\n           (\\<lambda>y'.\n               y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t))))\n        (at x)\n 2. continuous_on (ll_old.existence_ivl 0 (sol 0) \\<times> UNIV)\n     (\\<lambda>x.\n         case x of\n         (t, y) \\<Rightarrow>\n           Blinfun\n            (\\<lambda>y'.\n                y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)))", "subgoal for t x"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n    ((\\<lambda>y.\n         y * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n         sterm_sem I (f1 fid3 vid1)\n          (ll_old.flow 0 (sol 0) t)) has_derivative\n     blinfun_apply\n      (Blinfun\n        (\\<lambda>y'.\n            y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t))))\n     (at x)", "apply(rule has_derivative_add_const)"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n    ((\\<lambda>x.\n         x *\n         sterm_sem I (f1 fid2 vid1)\n          (ll_old.flow 0 (sol 0) t)) has_derivative\n     blinfun_apply\n      (Blinfun\n        (\\<lambda>y'.\n            y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t))))\n     (at x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n    ((\\<lambda>x.\n         x *\n         sterm_sem I (f1 fid2 vid1)\n          (ll_old.flow 0 (sol 0) t)) has_derivative\n     blinfun_apply\n      (Blinfun\n        (\\<lambda>y'.\n            y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t))))\n     (at x)", "have deriv:\"((\\<lambda>x. x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) has_derivative (\\<lambda>x. x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t))) (at x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         x *\n         sterm_sem I (f1 fid2 vid1)\n          (ll_old.flow 0 (sol 0) t)) has_derivative\n     (\\<lambda>x. x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)))\n     (at x)", "by(auto intro: derivative_eq_intros)"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       x *\n       sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) has_derivative\n   (\\<lambda>x. x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)))\n   (at x)\n\ngoal (1 subgoal):\n 1. t \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n    ((\\<lambda>x.\n         x *\n         sterm_sem I (f1 fid2 vid1)\n          (ll_old.flow 0 (sol 0) t)) has_derivative\n     blinfun_apply\n      (Blinfun\n        (\\<lambda>y'.\n            y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t))))\n     (at x)", "have eq:\"(\\<lambda>x. x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) = blinfun_apply (Blinfun (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) =\n    blinfun_apply\n     (Blinfun\n       (\\<lambda>y'.\n           y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)))", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) =\n       blinfun_apply\n        (Blinfun\n          (\\<lambda>y'.\n              y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)))\n        x", "using bounded_linear_deriv[of t]"], ["proof (prove)\nusing this:\n  bounded_linear\n   (\\<lambda>y'.\n       y' *\\<^sub>R sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) =\n       blinfun_apply\n        (Blinfun\n          (\\<lambda>y'.\n              y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)))\n        x", "by (auto simp add:  bounded_linear_Blinfun_apply)"], ["proof (state)\nthis:\n  (\\<lambda>x. x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) =\n  blinfun_apply\n   (Blinfun\n     (\\<lambda>y'.\n         y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)))\n\ngoal (1 subgoal):\n 1. t \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n    ((\\<lambda>x.\n         x *\n         sterm_sem I (f1 fid2 vid1)\n          (ll_old.flow 0 (sol 0) t)) has_derivative\n     blinfun_apply\n      (Blinfun\n        (\\<lambda>y'.\n            y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t))))\n     (at x)", "show \"((\\<lambda>x. x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) has_derivative\n              blinfun_apply (Blinfun (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t))))\n              (at x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         x *\n         sterm_sem I (f1 fid2 vid1)\n          (ll_old.flow 0 (sol 0) t)) has_derivative\n     blinfun_apply\n      (Blinfun\n        (\\<lambda>y'.\n            y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t))))\n     (at x)", "using deriv eq"], ["proof (prove)\nusing this:\n  ((\\<lambda>x.\n       x *\n       sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) has_derivative\n   (\\<lambda>x. x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)))\n   (at x)\n  (\\<lambda>x. x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) =\n  blinfun_apply\n   (Blinfun\n     (\\<lambda>y'.\n         y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x.\n         x *\n         sterm_sem I (f1 fid2 vid1)\n          (ll_old.flow 0 (sol 0) t)) has_derivative\n     blinfun_apply\n      (Blinfun\n        (\\<lambda>y'.\n            y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t))))\n     (at x)", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>x.\n       x *\n       sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) has_derivative\n   blinfun_apply\n    (Blinfun\n      (\\<lambda>y'.\n          y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t))))\n   (at x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (ll_old.existence_ivl 0 (sol 0) \\<times> UNIV)\n     (\\<lambda>x.\n         case x of\n         (t, y) \\<Rightarrow>\n           Blinfun\n            (\\<lambda>y'.\n                y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)))", "apply(auto intro: continuous_intros simp add: split_beta')"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (ll_old.existence_ivl 0 (sol 0) \\<times> UNIV)\n     (\\<lambda>x.\n         Blinfun\n          (\\<lambda>y'.\n              y' *\n              sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) (fst x))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on (ll_old.existence_ivl 0 (sol 0) \\<times> UNIV)\n     (\\<lambda>x.\n         Blinfun\n          (\\<lambda>y'.\n              y' *\n              sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) (fst x))))", "have bounded_linear:\"\\<And>x. bounded_linear (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. bounded_linear (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) x)", "by (simp add: bounded_linear_mult_left)"], ["proof (state)\nthis:\n  bounded_linear (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) ?x13)\n\ngoal (1 subgoal):\n 1. continuous_on (ll_old.existence_ivl 0 (sol 0) \\<times> UNIV)\n     (\\<lambda>x.\n         Blinfun\n          (\\<lambda>y'.\n              y' *\n              sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) (fst x))))", "have eq:\"(\\<lambda>x. Blinfun (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) x)) = (\\<lambda>x. (sterm_sem I (f1 fid2 vid1) x) *\\<^sub>R id_blinfun)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. Blinfun (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) x)) =\n    (\\<lambda>x. sterm_sem I (f1 fid2 vid1) x *\\<^sub>R 1\\<^sub>L)", "apply(rule ext, rule blinfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x i.\n       blinfun_apply\n        (Blinfun (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) x)) i =\n       blinfun_apply (sterm_sem I (f1 fid2 vid1) x *\\<^sub>R 1\\<^sub>L) i", "subgoal for x i"], ["proof (prove)\ngoal (1 subgoal):\n 1. blinfun_apply (Blinfun (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) x))\n     i =\n    blinfun_apply (sterm_sem I (f1 fid2 vid1) x *\\<^sub>R 1\\<^sub>L) i", "using bounded_linear[of x]"], ["proof (prove)\nusing this:\n  bounded_linear (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) x)\n\ngoal (1 subgoal):\n 1. blinfun_apply (Blinfun (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) x))\n     i =\n    blinfun_apply (sterm_sem I (f1 fid2 vid1) x *\\<^sub>R 1\\<^sub>L) i", "apply(auto simp add: bounded_linear_Blinfun_apply)"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_linear\n     (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) x) \\<Longrightarrow>\n    i * sterm_sem I (f1 fid2 vid1) x =\n    blinfun_apply (sterm_sem I (f1 fid2 vid1) x *\\<^sub>R 1\\<^sub>L) i", "by (simp add: blinfun.scaleR_left)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>x. Blinfun (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) x)) =\n  (\\<lambda>x. sterm_sem I (f1 fid2 vid1) x *\\<^sub>R 1\\<^sub>L)\n\ngoal (1 subgoal):\n 1. continuous_on (ll_old.existence_ivl 0 (sol 0) \\<times> UNIV)\n     (\\<lambda>x.\n         Blinfun\n          (\\<lambda>y'.\n              y' *\n              sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) (fst x))))", "have conFlow:\"continuous_on (ll_old.existence_ivl 0 (sol 0)) (ll_old.flow 0 (sol 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (ll_old.existence_ivl 0 (sol 0)) (ll_old.flow 0 (sol 0))", "using ll_old.general.flow_continuous_on"], ["proof (prove)\nusing this:\n  continuous_on (ll_old.existence_ivl ?t0.0 ?x0.0) (ll_old.flow ?t0.0 ?x0.0)\n\ngoal (1 subgoal):\n 1. continuous_on (ll_old.existence_ivl 0 (sol 0)) (ll_old.flow 0 (sol 0))", "by blast"], ["proof (state)\nthis:\n  continuous_on (ll_old.existence_ivl 0 (sol 0)) (ll_old.flow 0 (sol 0))\n\ngoal (1 subgoal):\n 1. continuous_on (ll_old.existence_ivl 0 (sol 0) \\<times> UNIV)\n     (\\<lambda>x.\n         Blinfun\n          (\\<lambda>y'.\n              y' *\n              sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) (fst x))))", "have conF':\"continuous_on (ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0)) \n            (\\<lambda>x. (sterm_sem I (f1 fid2 vid1) x) *\\<^sub>R id_blinfun)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0))\n     (\\<lambda>x. sterm_sem I (f1 fid2 vid1) x *\\<^sub>R 1\\<^sub>L)", "apply(rule continuous_on_scaleR)"], ["proof (prove)\ngoal (2 subgoals):\n 1. continuous_on (ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0))\n     (sterm_sem I (f1 fid2 vid1))\n 2. continuous_on (ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0))\n     (\\<lambda>x. 1\\<^sub>L)", "apply(auto intro: continuous_intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0))\n     (sterm_sem I (f1 fid2 vid1))", "apply(rule sterm_continuous')"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_interp I\n 2. dfree (f1 fid2 vid1)", "apply(rule good_interp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree (f1 fid2 vid1)", "by(auto simp add: f1_def intro: dfree.intros)"], ["proof (state)\nthis:\n  continuous_on (ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0))\n   (\\<lambda>x. sterm_sem I (f1 fid2 vid1) x *\\<^sub>R 1\\<^sub>L)\n\ngoal (1 subgoal):\n 1. continuous_on (ll_old.existence_ivl 0 (sol 0) \\<times> UNIV)\n     (\\<lambda>x.\n         Blinfun\n          (\\<lambda>y'.\n              y' *\n              sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) (fst x))))", "have conF:\"continuous_on (ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0)) \n            (\\<lambda>x. Blinfun (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0))\n     (\\<lambda>x. Blinfun (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) x))", "apply(rule continuous_on_compose2[of \"UNIV\" \"(\\<lambda>x. Blinfun (\\<lambda>y'. y' * x))\" \"(ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0))\" \"sterm_sem I (f1 fid2 vid1)\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. continuous_on UNIV (\\<lambda>x. Blinfun (\\<lambda>y'. y' * x))\n 2. continuous_on (ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0))\n     (sterm_sem I (f1 fid2 vid1))\n 3. sterm_sem I (f1 fid2 vid1) `\n    ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0)\n    \\<subseteq> UNIV", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV (\\<lambda>x. Blinfun (\\<lambda>y'. y' * x))", "by (metis blinfun_mult_left.abs_eq bounded_linear_blinfun_mult_left continuous_on_eq linear_continuous_on)"], ["proof (prove)\ngoal (2 subgoals):\n 1. continuous_on (ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0))\n     (sterm_sem I (f1 fid2 vid1))\n 2. sterm_sem I (f1 fid2 vid1) `\n    ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0)\n    \\<subseteq> UNIV", "apply(rule sterm_continuous')"], ["proof (prove)\ngoal (3 subgoals):\n 1. is_interp I\n 2. dfree (f1 fid2 vid1)\n 3. sterm_sem I (f1 fid2 vid1) `\n    ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0)\n    \\<subseteq> UNIV", "apply(rule good_interp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. dfree (f1 fid2 vid1)\n 2. sterm_sem I (f1 fid2 vid1) `\n    ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0)\n    \\<subseteq> UNIV", "by(auto simp add: f1_def intro: dfree.intros)"], ["proof (state)\nthis:\n  continuous_on (ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0))\n   (\\<lambda>x. Blinfun (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) x))\n\ngoal (1 subgoal):\n 1. continuous_on (ll_old.existence_ivl 0 (sol 0) \\<times> UNIV)\n     (\\<lambda>x.\n         Blinfun\n          (\\<lambda>y'.\n              y' *\n              sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) (fst x))))", "show \"continuous_on (ll_old.existence_ivl 0 (sol 0) \\<times> UNIV) (\\<lambda>x. Blinfun (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) (fst x))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (ll_old.existence_ivl 0 (sol 0) \\<times> UNIV)\n     (\\<lambda>x.\n         Blinfun\n          (\\<lambda>y'.\n              y' *\n              sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) (fst x))))", "apply(rule continuous_on_compose2[of \"ll_old.existence_ivl 0 (sol 0)\" \"(\\<lambda>x. Blinfun (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) x)))\" \"(ll_old.existence_ivl 0 (sol 0) \\<times> UNIV)\" \"fst\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. continuous_on (ll_old.existence_ivl 0 (sol 0))\n     (\\<lambda>x.\n         Blinfun\n          (\\<lambda>y'.\n              y' * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) x)))\n 2. continuous_on (ll_old.existence_ivl 0 (sol 0) \\<times> UNIV) fst\n 3. fst ` (ll_old.existence_ivl 0 (sol 0) \\<times> UNIV)\n    \\<subseteq> ll_old.existence_ivl 0 (sol 0)", "apply(rule continuous_on_compose2[of \"(ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0))\" \"(\\<lambda>x. Blinfun (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) x))\" \n                \"(ll_old.existence_ivl 0 (sol 0))\" \"(ll_old.flow 0 (sol 0))\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. continuous_on (ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0))\n     (\\<lambda>x. Blinfun (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) x))\n 2. continuous_on (ll_old.existence_ivl 0 (sol 0)) (ll_old.flow 0 (sol 0))\n 3. ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0)\n    \\<subseteq> ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0)\n 4. continuous_on (ll_old.existence_ivl 0 (sol 0) \\<times> UNIV) fst\n 5. fst ` (ll_old.existence_ivl 0 (sol 0) \\<times> UNIV)\n    \\<subseteq> ll_old.existence_ivl 0 (sol 0)", "using conF conFlow"], ["proof (prove)\nusing this:\n  continuous_on (ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0))\n   (\\<lambda>x. Blinfun (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) x))\n  continuous_on (ll_old.existence_ivl 0 (sol 0)) (ll_old.flow 0 (sol 0))\n\ngoal (5 subgoals):\n 1. continuous_on (ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0))\n     (\\<lambda>x. Blinfun (\\<lambda>y'. y' * sterm_sem I (f1 fid2 vid1) x))\n 2. continuous_on (ll_old.existence_ivl 0 (sol 0)) (ll_old.flow 0 (sol 0))\n 3. ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0)\n    \\<subseteq> ll_old.flow 0 (sol 0) ` ll_old.existence_ivl 0 (sol 0)\n 4. continuous_on (ll_old.existence_ivl 0 (sol 0) \\<times> UNIV) fst\n 5. fst ` (ll_old.existence_ivl 0 (sol 0) \\<times> UNIV)\n    \\<subseteq> ll_old.existence_ivl 0 (sol 0)", "by (auto intro!: continuous_intros)"], ["proof (state)\nthis:\n  continuous_on (ll_old.existence_ivl 0 (sol 0) \\<times> UNIV)\n   (\\<lambda>x.\n       Blinfun\n        (\\<lambda>y'.\n            y' *\n            sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) (fst x))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local_lipschitz (ll_old.existence_ivl 0 (sol 0)) UNIV\n   (\\<lambda>t y.\n       y * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n       sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "let ?ivl = \"ll_old.existence_ivl 0 (sol 0)\"\n    \\<comment> \\<open>Construct solution to ODE for \\<open>y'\\<close> here:\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "let ?yode = \"(\\<lambda>t y. y * sterm_sem I (f1 fid2 vid1) (?flow t) + sterm_sem I (f1 fid3 vid1) (?flow t))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "let ?ysol0 = r"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "interpret ll_new: ll_on_open_it \"?ivl\" \"?yode\" \"UNIV\" 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. ll_on_open_it (ll_old.existence_ivl 0 (sol 0))\n     (\\<lambda>t y.\n         y * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n         sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t))\n     UNIV", "apply(standard)"], ["proof (prove)\ngoal (5 subgoals):\n 1. is_interval (ll_old.existence_ivl 0 (sol 0))\n 2. local_lipschitz (ll_old.existence_ivl 0 (sol 0)) UNIV\n     (\\<lambda>t y.\n         y * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n         sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t))\n 3. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       continuous_on (ll_old.existence_ivl 0 (sol 0))\n        (\\<lambda>t.\n            x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n            sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t))\n 4. open (ll_old.existence_ivl 0 (sol 0))\n 5. open UNIV", "apply(auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. local_lipschitz (ll_old.existence_ivl 0 (sol 0)) UNIV\n     (\\<lambda>t y.\n         y * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n         sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t))\n 2. \\<And>x.\n       continuous_on (ll_old.existence_ivl 0 (sol 0))\n        (\\<lambda>t.\n            x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n            sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t))", "apply(rule ll)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       continuous_on (ll_old.existence_ivl 0 (sol 0))\n        (\\<lambda>t.\n            x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n            sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t))", "by(rule con)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sol_new:\"(ll_new.flow 0 r solves_ode ?yode) (ll_new.existence_ivl 0 r) UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ll_new.flow 0 r solves_ode\n     (\\<lambda>t y.\n         y * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n         sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)))\n     (ll_new.existence_ivl 0 r) UNIV", "by(rule ll_new.flow_solves_ode, auto)"], ["proof (state)\nthis:\n  (ll_new.flow 0 r solves_ode\n   (\\<lambda>t y.\n       y * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n       sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)))\n   (ll_new.existence_ivl 0 r) UNIV\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have more_lipschitz:\"\\<And>tm tM. tm \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n         tM \\<in> ll_old.existence_ivl 0 (sol 0) \\<Longrightarrow>\n         \\<exists>M L. \\<forall>t\\<in>{tm..tM}. \\<forall>x. \\<bar>x * sterm_sem I (f1 fid2 vid1) (?flow t) + sterm_sem I (f1 fid3 vid1) (?flow t)\\<bar> \\<le> M + L * \\<bar>x\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "fix tm tM"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "assume tm:\"tm \\<in> ll_old.existence_ivl 0 (sol 0)\""], ["proof (state)\nthis:\n  tm \\<in> ll_old.existence_ivl 0 (sol 0)\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "assume tM:\"tM \\<in> ll_old.existence_ivl 0 (sol 0)\""], ["proof (state)\nthis:\n  tM \\<in> ll_old.existence_ivl 0 (sol 0)\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "let ?f2 = \"(\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "let ?f3 = \"(\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "let ?boundLP = \"(\\<lambda>L t . (tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow> \\<bar>?f2 t\\<bar> \\<le> L))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "let ?boundL = \"(SOME L. (\\<forall>t. ?boundLP L t))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "have compactT:\"compact {tm..tM}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. compact {tm..tM}", "by auto"], ["proof (state)\nthis:\n  compact {tm..tM}\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "have sub:\"{tm..tM} \\<subseteq> ll_old.existence_ivl 0 (sol 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {tm..tM} \\<subseteq> ll_old.existence_ivl 0 (sol 0)", "by (metis atLeastatMost_empty_iff empty_subsetI ll_old.general.segment_subset_existence_ivl real_Icc_closed_segment tM tm)"], ["proof (state)\nthis:\n  {tm..tM} \\<subseteq> ll_old.existence_ivl 0 (sol 0)\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "let ?f2abs = \"(\\<lambda>x. abs(?f2 x))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "have neg_compact:\"\\<And>S::real set. compact S \\<Longrightarrow> compact ((\\<lambda>x. -x) ` S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S. compact S \\<Longrightarrow> compact (uminus ` S)", "by(rule compact_continuous_image, auto intro: continuous_intros)"], ["proof (state)\nthis:\n  compact ?S13 \\<Longrightarrow> compact (uminus ` ?S13)\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "have compactf2:\"compact (?f2 ` {tm..tM})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. compact\n     ((\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "apply(rule compact_continuous_image)"], ["proof (prove)\ngoal (2 subgoals):\n 1. continuous_on {tm..tM}\n     (\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t))\n 2. compact {tm..tM}", "apply(rule continuous_on_compose2[of UNIV \"sterm_sem I (f1 fid2 vid1)\" \"{tm..tM}\" \"ll_old.flow 0 (sol 0)\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. continuous_on UNIV (sterm_sem I (f1 fid2 vid1))\n 2. continuous_on {tm..tM} (ll_old.flow 0 (sol 0))\n 3. ll_old.flow 0 (sol 0) ` {tm..tM} \\<subseteq> UNIV\n 4. compact {tm..tM}", "apply(rule sterm_continuous)"], ["proof (prove)\ngoal (5 subgoals):\n 1. is_interp I\n 2. dfree (f1 fid2 vid1)\n 3. continuous_on {tm..tM} (ll_old.flow 0 (sol 0))\n 4. ll_old.flow 0 (sol 0) ` {tm..tM} \\<subseteq> UNIV\n 5. compact {tm..tM}", "apply(rule good_interp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. dfree (f1 fid2 vid1)\n 2. continuous_on {tm..tM} (ll_old.flow 0 (sol 0))\n 3. ll_old.flow 0 (sol 0) ` {tm..tM} \\<subseteq> UNIV\n 4. compact {tm..tM}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree (f1 fid2 vid1)", "by (auto intro: dfree.intros simp add: f1_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. continuous_on {tm..tM} (ll_old.flow 0 (sol 0))\n 2. ll_old.flow 0 (sol 0) ` {tm..tM} \\<subseteq> UNIV\n 3. compact {tm..tM}", "apply(rule continuous_on_subset)"], ["proof (prove)\ngoal (4 subgoals):\n 1. continuous_on ?s10 (ll_old.flow 0 (sol 0))\n 2. {tm..tM} \\<subseteq> ?s10\n 3. ll_old.flow 0 (sol 0) ` {tm..tM} \\<subseteq> UNIV\n 4. compact {tm..tM}", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. {tm..tM} \\<subseteq> ?s10\n 2. continuous_on ?s10 (ll_old.flow 0 (sol 0))\n 3. ll_old.flow 0 (sol 0) ` {tm..tM} \\<subseteq> UNIV\n 4. compact {tm..tM}", "apply (rule sub)"], ["proof (prove)\ngoal (3 subgoals):\n 1. continuous_on (ll_old.existence_ivl 0 (sol 0)) (ll_old.flow 0 (sol 0))\n 2. ll_old.flow 0 (sol 0) ` {tm..tM} \\<subseteq> UNIV\n 3. compact {tm..tM}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (ll_old.existence_ivl 0 (sol 0)) (ll_old.flow 0 (sol 0))", "using ll_old.general.flow_continuous_on"], ["proof (prove)\nusing this:\n  continuous_on (ll_old.existence_ivl ?t0.0 ?x0.0) (ll_old.flow ?t0.0 ?x0.0)\n\ngoal (1 subgoal):\n 1. continuous_on (ll_old.existence_ivl 0 (sol 0)) (ll_old.flow 0 (sol 0))", "by blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. ll_old.flow 0 (sol 0) ` {tm..tM} \\<subseteq> UNIV\n 2. compact {tm..tM}", "by auto"], ["proof (state)\nthis:\n  compact\n   ((\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "then"], ["proof (chain)\npicking this:\n  compact\n   ((\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})", "have boundedf2:\"bounded (?f2 ` {tm..tM})\""], ["proof (prove)\nusing this:\n  compact\n   ((\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. bounded\n     ((\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "using compact_imp_bounded"], ["proof (prove)\nusing this:\n  compact\n   ((\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n  compact ?U \\<Longrightarrow> bounded ?U\n\ngoal (1 subgoal):\n 1. bounded\n     ((\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "by auto"], ["proof (state)\nthis:\n  bounded\n   ((\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "then"], ["proof (chain)\npicking this:\n  bounded\n   ((\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})", "have boundedf2neg:\"bounded ((\\<lambda>x. -x) ` ?f2 ` {tm..tM})\""], ["proof (prove)\nusing this:\n  bounded\n   ((\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. bounded\n     (uminus `\n      (\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "using compact_imp_bounded neg_compact"], ["proof (prove)\nusing this:\n  bounded\n   ((\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n  compact ?U \\<Longrightarrow> bounded ?U\n  compact ?S13 \\<Longrightarrow> compact (uminus ` ?S13)\n\ngoal (1 subgoal):\n 1. bounded\n     (uminus `\n      (\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "by auto"], ["proof (state)\nthis:\n  bounded\n   (uminus `\n    (\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "then"], ["proof (chain)\npicking this:\n  bounded\n   (uminus `\n    (\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})", "have bdd_above_f2neg:\"bdd_above ((\\<lambda>x. -x) ` ?f2 ` {tm..tM})\""], ["proof (prove)\nusing this:\n  bounded\n   (uminus `\n    (\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. bdd_above\n     (uminus `\n      (\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "by (rule bounded_imp_bdd_above)"], ["proof (state)\nthis:\n  bdd_above\n   (uminus `\n    (\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "then"], ["proof (chain)\npicking this:\n  bdd_above\n   (uminus `\n    (\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})", "have bdd_above_f2:\"bdd_above ( ?f2 ` {tm..tM})\""], ["proof (prove)\nusing this:\n  bdd_above\n   (uminus `\n    (\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. bdd_above\n     ((\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "using bounded_imp_bdd_above boundedf2"], ["proof (prove)\nusing this:\n  bdd_above\n   (uminus `\n    (\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n  bounded ?S \\<Longrightarrow> bdd_above ?S\n  bounded\n   ((\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. bdd_above\n     ((\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "by auto"], ["proof (state)\nthis:\n  bdd_above\n   ((\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "have bdd_above_f2_abs:\"bdd_above (abs ` ?f2 ` {tm..tM})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_above\n     (abs `\n      (\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "using bdd_above_f2neg bdd_above_f2"], ["proof (prove)\nusing this:\n  bdd_above\n   (uminus `\n    (\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n  bdd_above\n   ((\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. bdd_above\n     (abs `\n      (\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "unfolding bdd_above_def"], ["proof (prove)\nusing this:\n  \\<exists>M.\n     \\<forall>x\\<in>uminus `\n                    (\\<lambda>t.\n                        sterm_sem I (f1 fid2 vid1)\n                         (ll_old.flow 0 (sol 0) t)) `\n                    {tm..tM}.\n        x \\<le> M\n  \\<exists>M.\n     \\<forall>x\\<in>(\\<lambda>t.\n                        sterm_sem I (f1 fid2 vid1)\n                         (ll_old.flow 0 (sol 0) t)) `\n                    {tm..tM}.\n        x \\<le> M\n\ngoal (1 subgoal):\n 1. \\<exists>M.\n       \\<forall>x\\<in>abs `\n                      (\\<lambda>t.\n                          sterm_sem I (f1 fid2 vid1)\n                           (ll_old.flow 0 (sol 0) t)) `\n                      {tm..tM}.\n          x \\<le> M", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M Ma.\n       \\<lbrakk>\\<forall>x\\<in>{tm..tM}.\n                   - sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) x)\n                   \\<le> M;\n        \\<forall>x\\<in>{tm..tM}.\n           sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) x)\n           \\<le> Ma\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M.\n                            \\<forall>x\\<in>{tm..tM}.\n                               \\<bar>sterm_sem I (f1 fid2 vid1)\n(ll_old.flow 0 (sol 0) x)\\<bar>\n                               \\<le> M", "subgoal for M1 M2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>{tm..tM}.\n                - sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) x)\n                \\<le> M1;\n     \\<forall>x\\<in>{tm..tM}.\n        sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) x)\n        \\<le> M2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>M.\n                         \\<forall>x\\<in>{tm..tM}.\n                            \\<bar>sterm_sem I (f1 fid2 vid1)\n                                   (ll_old.flow 0 (sol 0) x)\\<bar>\n                            \\<le> M", "apply(rule exI[where x=\"max M1 M2\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>{tm..tM}.\n                - sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) x)\n                \\<le> M1;\n     \\<forall>x\\<in>{tm..tM}.\n        sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) x)\n        \\<le> M2\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>{tm..tM}.\n                         \\<bar>sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) x)\\<bar>\n                         \\<le> max M1 M2", "by fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  bdd_above\n   (abs `\n    (\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "then"], ["proof (chain)\npicking this:\n  bdd_above\n   (abs `\n    (\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})", "have theBound:\"\\<exists>L. (\\<forall>t. ?boundLP L t)\""], ["proof (prove)\nusing this:\n  bdd_above\n   (abs `\n    (\\<lambda>t. sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. \\<exists>L.\n       \\<forall>t.\n          tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n          \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n          \\<le> L", "unfolding bdd_above_def norm_conv_dist"], ["proof (prove)\nusing this:\n  \\<exists>M.\n     \\<forall>x\\<in>abs `\n                    (\\<lambda>t.\n                        sterm_sem I (f1 fid2 vid1)\n                         (ll_old.flow 0 (sol 0) t)) `\n                    {tm..tM}.\n        x \\<le> M\n\ngoal (1 subgoal):\n 1. \\<exists>L.\n       \\<forall>t.\n          tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n          \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n          \\<le> L", "by (auto simp add: Ball_def Bex_def norm_conv_dist image_iff norm_bcontfun_def dist_blinfun_def)"], ["proof (state)\nthis:\n  \\<exists>L.\n     \\<forall>t.\n        tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n        \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n        \\<le> L\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "then"], ["proof (chain)\npicking this:\n  \\<exists>L.\n     \\<forall>t.\n        tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n        \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n        \\<le> L", "have boundLP:\"\\<forall>t. ?boundLP (?boundL) t\""], ["proof (prove)\nusing this:\n  \\<exists>L.\n     \\<forall>t.\n        tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n        \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n        \\<le> L\n\ngoal (1 subgoal):\n 1. \\<forall>t.\n       tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n       \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n       \\<le> (SOME L.\n                 \\<forall>t.\n                    tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                    \\<bar>sterm_sem I (f1 fid2 vid1)\n                           (ll_old.flow 0 (sol 0) t)\\<bar>\n                    \\<le> L)", "using someI[of \"(\\<lambda> L. \\<forall>t. ?boundLP L t)\"]"], ["proof (prove)\nusing this:\n  \\<exists>L.\n     \\<forall>t.\n        tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n        \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n        \\<le> L\n  \\<forall>t.\n     tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n     \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n     \\<le> ?x \\<Longrightarrow>\n  \\<forall>t.\n     tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n     \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n     \\<le> (SOME L.\n               \\<forall>t.\n                  tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                  \\<bar>sterm_sem I (f1 fid2 vid1)\n                         (ll_old.flow 0 (sol 0) t)\\<bar>\n                  \\<le> L)\n\ngoal (1 subgoal):\n 1. \\<forall>t.\n       tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n       \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n       \\<le> (SOME L.\n                 \\<forall>t.\n                    tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                    \\<bar>sterm_sem I (f1 fid2 vid1)\n                           (ll_old.flow 0 (sol 0) t)\\<bar>\n                    \\<le> L)", "by blast"], ["proof (state)\nthis:\n  \\<forall>t.\n     tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n     \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n     \\<le> (SOME L.\n               \\<forall>t.\n                  tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                  \\<bar>sterm_sem I (f1 fid2 vid1)\n                         (ll_old.flow 0 (sol 0) t)\\<bar>\n                  \\<le> L)\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "let ?boundMP = \"(\\<lambda>M t. (tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow> \\<bar>?f3 t\\<bar> \\<le> M))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "let ?boundM = \"(SOME M. (\\<forall>t. ?boundMP M t))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "have compactf3:\"compact (?f3 ` {tm..tM})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. compact\n     ((\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "apply(rule compact_continuous_image)"], ["proof (prove)\ngoal (2 subgoals):\n 1. continuous_on {tm..tM}\n     (\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t))\n 2. compact {tm..tM}", "apply(rule continuous_on_compose2[of UNIV \"sterm_sem I (f1 fid3 vid1)\" \"{tm..tM}\" \"ll_old.flow 0 (sol 0)\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. continuous_on UNIV (sterm_sem I (f1 fid3 vid1))\n 2. continuous_on {tm..tM} (ll_old.flow 0 (sol 0))\n 3. ll_old.flow 0 (sol 0) ` {tm..tM} \\<subseteq> UNIV\n 4. compact {tm..tM}", "apply(rule sterm_continuous)"], ["proof (prove)\ngoal (5 subgoals):\n 1. is_interp I\n 2. dfree (f1 fid3 vid1)\n 3. continuous_on {tm..tM} (ll_old.flow 0 (sol 0))\n 4. ll_old.flow 0 (sol 0) ` {tm..tM} \\<subseteq> UNIV\n 5. compact {tm..tM}", "apply(rule good_interp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. dfree (f1 fid3 vid1)\n 2. continuous_on {tm..tM} (ll_old.flow 0 (sol 0))\n 3. ll_old.flow 0 (sol 0) ` {tm..tM} \\<subseteq> UNIV\n 4. compact {tm..tM}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree (f1 fid3 vid1)", "by (auto intro: dfree.intros simp add: f1_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. continuous_on {tm..tM} (ll_old.flow 0 (sol 0))\n 2. ll_old.flow 0 (sol 0) ` {tm..tM} \\<subseteq> UNIV\n 3. compact {tm..tM}", "apply(rule continuous_on_subset)"], ["proof (prove)\ngoal (4 subgoals):\n 1. continuous_on ?s10 (ll_old.flow 0 (sol 0))\n 2. {tm..tM} \\<subseteq> ?s10\n 3. ll_old.flow 0 (sol 0) ` {tm..tM} \\<subseteq> UNIV\n 4. compact {tm..tM}", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. {tm..tM} \\<subseteq> ?s10\n 2. continuous_on ?s10 (ll_old.flow 0 (sol 0))\n 3. ll_old.flow 0 (sol 0) ` {tm..tM} \\<subseteq> UNIV\n 4. compact {tm..tM}", "apply (rule sub)"], ["proof (prove)\ngoal (3 subgoals):\n 1. continuous_on (ll_old.existence_ivl 0 (sol 0)) (ll_old.flow 0 (sol 0))\n 2. ll_old.flow 0 (sol 0) ` {tm..tM} \\<subseteq> UNIV\n 3. compact {tm..tM}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (ll_old.existence_ivl 0 (sol 0)) (ll_old.flow 0 (sol 0))", "using ll_old.general.flow_continuous_on"], ["proof (prove)\nusing this:\n  continuous_on (ll_old.existence_ivl ?t0.0 ?x0.0) (ll_old.flow ?t0.0 ?x0.0)\n\ngoal (1 subgoal):\n 1. continuous_on (ll_old.existence_ivl 0 (sol 0)) (ll_old.flow 0 (sol 0))", "by blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. ll_old.flow 0 (sol 0) ` {tm..tM} \\<subseteq> UNIV\n 2. compact {tm..tM}", "by auto"], ["proof (state)\nthis:\n  compact\n   ((\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "then"], ["proof (chain)\npicking this:\n  compact\n   ((\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})", "have boundedf3:\"bounded (?f3 ` {tm..tM})\""], ["proof (prove)\nusing this:\n  compact\n   ((\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. bounded\n     ((\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "using compact_imp_bounded"], ["proof (prove)\nusing this:\n  compact\n   ((\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n  compact ?U \\<Longrightarrow> bounded ?U\n\ngoal (1 subgoal):\n 1. bounded\n     ((\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "by auto"], ["proof (state)\nthis:\n  bounded\n   ((\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "then"], ["proof (chain)\npicking this:\n  bounded\n   ((\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})", "have boundedf3neg:\"bounded ((\\<lambda>x. -x) ` ?f3 ` {tm..tM})\""], ["proof (prove)\nusing this:\n  bounded\n   ((\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. bounded\n     (uminus `\n      (\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "using compact_imp_bounded neg_compact"], ["proof (prove)\nusing this:\n  bounded\n   ((\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n  compact ?U \\<Longrightarrow> bounded ?U\n  compact ?S13 \\<Longrightarrow> compact (uminus ` ?S13)\n\ngoal (1 subgoal):\n 1. bounded\n     (uminus `\n      (\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "by auto"], ["proof (state)\nthis:\n  bounded\n   (uminus `\n    (\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "then"], ["proof (chain)\npicking this:\n  bounded\n   (uminus `\n    (\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})", "have bdd_above_f3neg:\"bdd_above ((\\<lambda>x. -x) ` ?f3 ` {tm..tM})\""], ["proof (prove)\nusing this:\n  bounded\n   (uminus `\n    (\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. bdd_above\n     (uminus `\n      (\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "by (rule bounded_imp_bdd_above)"], ["proof (state)\nthis:\n  bdd_above\n   (uminus `\n    (\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "then"], ["proof (chain)\npicking this:\n  bdd_above\n   (uminus `\n    (\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})", "have bdd_above_f3:\"bdd_above ( ?f3 ` {tm..tM})\""], ["proof (prove)\nusing this:\n  bdd_above\n   (uminus `\n    (\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. bdd_above\n     ((\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "using bounded_imp_bdd_above boundedf3"], ["proof (prove)\nusing this:\n  bdd_above\n   (uminus `\n    (\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n  bounded ?S \\<Longrightarrow> bdd_above ?S\n  bounded\n   ((\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. bdd_above\n     ((\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "by auto"], ["proof (state)\nthis:\n  bdd_above\n   ((\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "have bdd_above_f3_abs:\"bdd_above (abs ` ?f3 ` {tm..tM})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_above\n     (abs `\n      (\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "using bdd_above_f3neg bdd_above_f3"], ["proof (prove)\nusing this:\n  bdd_above\n   (uminus `\n    (\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n  bdd_above\n   ((\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. bdd_above\n     (abs `\n      (\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n      {tm..tM})", "unfolding bdd_above_def"], ["proof (prove)\nusing this:\n  \\<exists>M.\n     \\<forall>x\\<in>uminus `\n                    (\\<lambda>t.\n                        sterm_sem I (f1 fid3 vid1)\n                         (ll_old.flow 0 (sol 0) t)) `\n                    {tm..tM}.\n        x \\<le> M\n  \\<exists>M.\n     \\<forall>x\\<in>(\\<lambda>t.\n                        sterm_sem I (f1 fid3 vid1)\n                         (ll_old.flow 0 (sol 0) t)) `\n                    {tm..tM}.\n        x \\<le> M\n\ngoal (1 subgoal):\n 1. \\<exists>M.\n       \\<forall>x\\<in>abs `\n                      (\\<lambda>t.\n                          sterm_sem I (f1 fid3 vid1)\n                           (ll_old.flow 0 (sol 0) t)) `\n                      {tm..tM}.\n          x \\<le> M", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>M Ma.\n       \\<lbrakk>\\<forall>x\\<in>{tm..tM}.\n                   - sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) x)\n                   \\<le> M;\n        \\<forall>x\\<in>{tm..tM}.\n           sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) x)\n           \\<le> Ma\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M.\n                            \\<forall>x\\<in>{tm..tM}.\n                               \\<bar>sterm_sem I (f1 fid3 vid1)\n(ll_old.flow 0 (sol 0) x)\\<bar>\n                               \\<le> M", "subgoal for M1 M2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>{tm..tM}.\n                - sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) x)\n                \\<le> M1;\n     \\<forall>x\\<in>{tm..tM}.\n        sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) x)\n        \\<le> M2\\<rbrakk>\n    \\<Longrightarrow> \\<exists>M.\n                         \\<forall>x\\<in>{tm..tM}.\n                            \\<bar>sterm_sem I (f1 fid3 vid1)\n                                   (ll_old.flow 0 (sol 0) x)\\<bar>\n                            \\<le> M", "apply(rule exI[where x=\"max M1 M2\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>{tm..tM}.\n                - sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) x)\n                \\<le> M1;\n     \\<forall>x\\<in>{tm..tM}.\n        sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) x)\n        \\<le> M2\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>{tm..tM}.\n                         \\<bar>sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) x)\\<bar>\n                         \\<le> max M1 M2", "by fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  bdd_above\n   (abs `\n    (\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "then"], ["proof (chain)\npicking this:\n  bdd_above\n   (abs `\n    (\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})", "have theBound:\"\\<exists>L. (\\<forall>t. ?boundMP L t)\""], ["proof (prove)\nusing this:\n  bdd_above\n   (abs `\n    (\\<lambda>t. sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)) `\n    {tm..tM})\n\ngoal (1 subgoal):\n 1. \\<exists>L.\n       \\<forall>t.\n          tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n          \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n          \\<le> L", "unfolding bdd_above_def norm_conv_dist"], ["proof (prove)\nusing this:\n  \\<exists>M.\n     \\<forall>x\\<in>abs `\n                    (\\<lambda>t.\n                        sterm_sem I (f1 fid3 vid1)\n                         (ll_old.flow 0 (sol 0) t)) `\n                    {tm..tM}.\n        x \\<le> M\n\ngoal (1 subgoal):\n 1. \\<exists>L.\n       \\<forall>t.\n          tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n          \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n          \\<le> L", "by (auto simp add: Ball_def Bex_def norm_conv_dist image_iff norm_bcontfun_def dist_blinfun_def)"], ["proof (state)\nthis:\n  \\<exists>L.\n     \\<forall>t.\n        tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n        \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n        \\<le> L\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "then"], ["proof (chain)\npicking this:\n  \\<exists>L.\n     \\<forall>t.\n        tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n        \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n        \\<le> L", "have boundMP:\"\\<forall>t. ?boundMP (?boundM) t\""], ["proof (prove)\nusing this:\n  \\<exists>L.\n     \\<forall>t.\n        tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n        \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n        \\<le> L\n\ngoal (1 subgoal):\n 1. \\<forall>t.\n       tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n       \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n       \\<le> (SOME M.\n                 \\<forall>t.\n                    tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                    \\<bar>sterm_sem I (f1 fid3 vid1)\n                           (ll_old.flow 0 (sol 0) t)\\<bar>\n                    \\<le> M)", "using someI[of \"(\\<lambda> M. \\<forall>t. ?boundMP M t)\"]"], ["proof (prove)\nusing this:\n  \\<exists>L.\n     \\<forall>t.\n        tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n        \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n        \\<le> L\n  \\<forall>t.\n     tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n     \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n     \\<le> ?x \\<Longrightarrow>\n  \\<forall>t.\n     tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n     \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n     \\<le> (SOME M.\n               \\<forall>t.\n                  tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                  \\<bar>sterm_sem I (f1 fid3 vid1)\n                         (ll_old.flow 0 (sol 0) t)\\<bar>\n                  \\<le> M)\n\ngoal (1 subgoal):\n 1. \\<forall>t.\n       tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n       \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n       \\<le> (SOME M.\n                 \\<forall>t.\n                    tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                    \\<bar>sterm_sem I (f1 fid3 vid1)\n                           (ll_old.flow 0 (sol 0) t)\\<bar>\n                    \\<le> M)", "by blast"], ["proof (state)\nthis:\n  \\<forall>t.\n     tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n     \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n     \\<le> (SOME M.\n               \\<forall>t.\n                  tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                  \\<bar>sterm_sem I (f1 fid3 vid1)\n                         (ll_old.flow 0 (sol 0) t)\\<bar>\n                  \\<le> M)\n\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "show \"\\<exists>M L. \\<forall>t\\<in>{tm..tM}. \\<forall>x. \\<bar>x * ?f2 t + ?f3 t\\<bar> \\<le> M + L * \\<bar>x\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>M L.\n       \\<forall>t\\<in>{tm..tM}.\n          \\<forall>x.\n             \\<bar>x *\n                   sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n                   sterm_sem I (f1 fid3 vid1)\n                    (ll_old.flow 0 (sol 0) t)\\<bar>\n             \\<le> M + L * \\<bar>x\\<bar>", "apply(rule exI[where x=\"?boundM\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>L.\n       \\<forall>t\\<in>{tm..tM}.\n          \\<forall>x.\n             \\<bar>x *\n                   sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n                   sterm_sem I (f1 fid3 vid1)\n                    (ll_old.flow 0 (sol 0) t)\\<bar>\n             \\<le> (SOME M.\n                       \\<forall>t.\n                          tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                          \\<bar>sterm_sem I (f1 fid3 vid1)\n                                 (ll_old.flow 0 (sol 0) t)\\<bar>\n                          \\<le> M) +\n                   L * \\<bar>x\\<bar>", "apply(rule exI[where x=\"?boundL\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>{tm..tM}.\n       \\<forall>x.\n          \\<bar>x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n                sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n          \\<le> (SOME M.\n                    \\<forall>t.\n                       tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                       \\<bar>sterm_sem I (f1 fid3 vid1)\n                              (ll_old.flow 0 (sol 0) t)\\<bar>\n                       \\<le> M) +\n                (SOME L.\n                    \\<forall>t.\n                       tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                       \\<bar>sterm_sem I (f1 fid2 vid1)\n                              (ll_old.flow 0 (sol 0) t)\\<bar>\n                       \\<le> L) *\n                \\<bar>x\\<bar>", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t x.\n       \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n       \\<Longrightarrow> \\<bar>x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) t) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) t)\\<bar>\n                         \\<le> (SOME M.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> M) +\n                               (SOME L.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> L) *\n                               \\<bar>x\\<bar>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t x.\n       \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n       \\<Longrightarrow> \\<bar>x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) t) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) t)\\<bar>\n                         \\<le> (SOME M.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> M) +\n                               (SOME L.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> L) *\n                               \\<bar>x\\<bar>", "fix t and x :: real"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t x.\n       \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n       \\<Longrightarrow> \\<bar>x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) t) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) t)\\<bar>\n                         \\<le> (SOME M.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> M) +\n                               (SOME L.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> L) *\n                               \\<bar>x\\<bar>", "assume ttm:\"tm \\<le> t\""], ["proof (state)\nthis:\n  tm \\<le> t\n\ngoal (1 subgoal):\n 1. \\<And>t x.\n       \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n       \\<Longrightarrow> \\<bar>x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) t) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) t)\\<bar>\n                         \\<le> (SOME M.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> M) +\n                               (SOME L.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> L) *\n                               \\<bar>x\\<bar>", "assume ttM:\"t \\<le> tM\""], ["proof (state)\nthis:\n  t \\<le> tM\n\ngoal (1 subgoal):\n 1. \\<And>t x.\n       \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n       \\<Longrightarrow> \\<bar>x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) t) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) t)\\<bar>\n                         \\<le> (SOME M.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> M) +\n                               (SOME L.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> L) *\n                               \\<bar>x\\<bar>", "from ttm ttM"], ["proof (chain)\npicking this:\n  tm \\<le> t\n  t \\<le> tM", "have ttmM:\"tm \\<le> t \\<and> t \\<le> tM\""], ["proof (prove)\nusing this:\n  tm \\<le> t\n  t \\<le> tM\n\ngoal (1 subgoal):\n 1. tm \\<le> t \\<and> t \\<le> tM", "by auto"], ["proof (state)\nthis:\n  tm \\<le> t \\<and> t \\<le> tM\n\ngoal (1 subgoal):\n 1. \\<And>t x.\n       \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n       \\<Longrightarrow> \\<bar>x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) t) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) t)\\<bar>\n                         \\<le> (SOME M.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> M) +\n                               (SOME L.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> L) *\n                               \\<bar>x\\<bar>", "have leqf3:\"\\<bar>?f3 t\\<bar> \\<le> ?boundM\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n    \\<le> (SOME M.\n              \\<forall>t.\n                 tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                 \\<bar>sterm_sem I (f1 fid3 vid1)\n                        (ll_old.flow 0 (sol 0) t)\\<bar>\n                 \\<le> M)", "using boundMP ttmM"], ["proof (prove)\nusing this:\n  \\<forall>t.\n     tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n     \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n     \\<le> (SOME M.\n               \\<forall>t.\n                  tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                  \\<bar>sterm_sem I (f1 fid3 vid1)\n                         (ll_old.flow 0 (sol 0) t)\\<bar>\n                  \\<le> M)\n  tm \\<le> t \\<and> t \\<le> tM\n\ngoal (1 subgoal):\n 1. \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n    \\<le> (SOME M.\n              \\<forall>t.\n                 tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                 \\<bar>sterm_sem I (f1 fid3 vid1)\n                        (ll_old.flow 0 (sol 0) t)\\<bar>\n                 \\<le> M)", "by auto"], ["proof (state)\nthis:\n  \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n  \\<le> (SOME M.\n            \\<forall>t.\n               tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n               \\<bar>sterm_sem I (f1 fid3 vid1)\n                      (ll_old.flow 0 (sol 0) t)\\<bar>\n               \\<le> M)\n\ngoal (1 subgoal):\n 1. \\<And>t x.\n       \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n       \\<Longrightarrow> \\<bar>x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) t) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) t)\\<bar>\n                         \\<le> (SOME M.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> M) +\n                               (SOME L.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> L) *\n                               \\<bar>x\\<bar>", "have leqf2:\"\\<bar>?f2 t\\<bar> \\<le> ?boundL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n    \\<le> (SOME L.\n              \\<forall>t.\n                 tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                 \\<bar>sterm_sem I (f1 fid2 vid1)\n                        (ll_old.flow 0 (sol 0) t)\\<bar>\n                 \\<le> L)", "using boundLP ttmM"], ["proof (prove)\nusing this:\n  \\<forall>t.\n     tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n     \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n     \\<le> (SOME L.\n               \\<forall>t.\n                  tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                  \\<bar>sterm_sem I (f1 fid2 vid1)\n                         (ll_old.flow 0 (sol 0) t)\\<bar>\n                  \\<le> L)\n  tm \\<le> t \\<and> t \\<le> tM\n\ngoal (1 subgoal):\n 1. \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n    \\<le> (SOME L.\n              \\<forall>t.\n                 tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                 \\<bar>sterm_sem I (f1 fid2 vid1)\n                        (ll_old.flow 0 (sol 0) t)\\<bar>\n                 \\<le> L)", "by auto"], ["proof (state)\nthis:\n  \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n  \\<le> (SOME L.\n            \\<forall>t.\n               tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n               \\<bar>sterm_sem I (f1 fid2 vid1)\n                      (ll_old.flow 0 (sol 0) t)\\<bar>\n               \\<le> L)\n\ngoal (1 subgoal):\n 1. \\<And>t x.\n       \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n       \\<Longrightarrow> \\<bar>x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) t) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) t)\\<bar>\n                         \\<le> (SOME M.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> M) +\n                               (SOME L.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> L) *\n                               \\<bar>x\\<bar>", "have gr0:\" \\<bar>x\\<bar> \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> \\<bar>x\\<bar>", "by auto"], ["proof (state)\nthis:\n  0 \\<le> \\<bar>x\\<bar>\n\ngoal (1 subgoal):\n 1. \\<And>t x.\n       \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n       \\<Longrightarrow> \\<bar>x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) t) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) t)\\<bar>\n                         \\<le> (SOME M.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> M) +\n                               (SOME L.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> L) *\n                               \\<bar>x\\<bar>", "have leqf2x:\"\\<bar>?f2 t\\<bar> * \\<bar>x\\<bar> \\<le> ?boundL * \\<bar>x\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n    \\<bar>x\\<bar>\n    \\<le> (SOME L.\n              \\<forall>t.\n                 tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                 \\<bar>sterm_sem I (f1 fid2 vid1)\n                        (ll_old.flow 0 (sol 0) t)\\<bar>\n                 \\<le> L) *\n          \\<bar>x\\<bar>", "using gr0 leqf2"], ["proof (prove)\nusing this:\n  0 \\<le> \\<bar>x\\<bar>\n  \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n  \\<le> (SOME L.\n            \\<forall>t.\n               tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n               \\<bar>sterm_sem I (f1 fid2 vid1)\n                      (ll_old.flow 0 (sol 0) t)\\<bar>\n               \\<le> L)\n\ngoal (1 subgoal):\n 1. \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n    \\<bar>x\\<bar>\n    \\<le> (SOME L.\n              \\<forall>t.\n                 tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                 \\<bar>sterm_sem I (f1 fid2 vid1)\n                        (ll_old.flow 0 (sol 0) t)\\<bar>\n                 \\<le> L) *\n          \\<bar>x\\<bar>", "by (metis (no_types, lifting) real_scaleR_def scaleR_right_mono)"], ["proof (state)\nthis:\n  \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n  \\<bar>x\\<bar>\n  \\<le> (SOME L.\n            \\<forall>t.\n               tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n               \\<bar>sterm_sem I (f1 fid2 vid1)\n                      (ll_old.flow 0 (sol 0) t)\\<bar>\n               \\<le> L) *\n        \\<bar>x\\<bar>\n\ngoal (1 subgoal):\n 1. \\<And>t x.\n       \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n       \\<Longrightarrow> \\<bar>x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) t) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) t)\\<bar>\n                         \\<le> (SOME M.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> M) +\n                               (SOME L.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> L) *\n                               \\<bar>x\\<bar>", "have \"\\<bar>x * ?f2 t + ?f3 t\\<bar> \\<le> \\<bar>x\\<bar> * \\<bar>?f2 t\\<bar> + \\<bar>?f3 t\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n          sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n    \\<le> \\<bar>x\\<bar> *\n          \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n          \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<bar>x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n          sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n    \\<le> \\<bar>x\\<bar> *\n          \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n          \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>", "have f1: \"\\<And>r ra. \\<bar>r::real\\<bar> * \\<bar>ra\\<bar> = \\<bar>r * ra\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r ra. \\<bar>r\\<bar> * \\<bar>ra\\<bar> = \\<bar>r * ra\\<bar>", "by (metis norm_scaleR real_norm_def real_scaleR_def)"], ["proof (state)\nthis:\n  \\<bar>?r13\\<bar> * \\<bar>?ra13\\<bar> = \\<bar>?r13 * ?ra13\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n          sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n    \\<le> \\<bar>x\\<bar> *\n          \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n          \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>", "have \"\\<And>r ra. \\<bar>(r::real) + ra\\<bar> \\<le> \\<bar>r\\<bar> + \\<bar>ra\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r ra. \\<bar>r + ra\\<bar> \\<le> \\<bar>r\\<bar> + \\<bar>ra\\<bar>", "by (metis norm_triangle_ineq real_norm_def)"], ["proof (state)\nthis:\n  \\<bar>?r13 + ?ra13\\<bar> \\<le> \\<bar>?r13\\<bar> + \\<bar>?ra13\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n          sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n    \\<le> \\<bar>x\\<bar> *\n          \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n          \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>", "then"], ["proof (chain)\npicking this:\n  \\<bar>?r13 + ?ra13\\<bar> \\<le> \\<bar>?r13\\<bar> + \\<bar>?ra13\\<bar>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<bar>?r13 + ?ra13\\<bar> \\<le> \\<bar>?r13\\<bar> + \\<bar>?ra13\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n          sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n    \\<le> \\<bar>x\\<bar> *\n          \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n          \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>", "using f1"], ["proof (prove)\nusing this:\n  \\<bar>?r13 + ?ra13\\<bar> \\<le> \\<bar>?r13\\<bar> + \\<bar>?ra13\\<bar>\n  \\<bar>?r13\\<bar> * \\<bar>?ra13\\<bar> = \\<bar>?r13 * ?ra13\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n          sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n    \\<le> \\<bar>x\\<bar> *\n          \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n          \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>", "by presburger"], ["proof (state)\nthis:\n  \\<bar>x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n        sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n  \\<le> \\<bar>x\\<bar> *\n        \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n        \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<bar>x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n        sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n  \\<le> \\<bar>x\\<bar> *\n        \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n        \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n\ngoal (1 subgoal):\n 1. \\<And>t x.\n       \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n       \\<Longrightarrow> \\<bar>x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) t) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) t)\\<bar>\n                         \\<le> (SOME M.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> M) +\n                               (SOME L.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> L) *\n                               \\<bar>x\\<bar>", "moreover"], ["proof (state)\nthis:\n  \\<bar>x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n        sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n  \\<le> \\<bar>x\\<bar> *\n        \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n        \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n\ngoal (1 subgoal):\n 1. \\<And>t x.\n       \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n       \\<Longrightarrow> \\<bar>x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) t) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) t)\\<bar>\n                         \\<le> (SOME M.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> M) +\n                               (SOME L.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> L) *\n                               \\<bar>x\\<bar>", "have \"... = \\<bar>?f3 t\\<bar> + \\<bar>?f2 t\\<bar> * \\<bar>x\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>x\\<bar> *\n    \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n    \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> =\n    \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n    \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n    \\<bar>x\\<bar>", "by auto"], ["proof (state)\nthis:\n  \\<bar>x\\<bar> *\n  \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n  \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> =\n  \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n  \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n  \\<bar>x\\<bar>\n\ngoal (1 subgoal):\n 1. \\<And>t x.\n       \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n       \\<Longrightarrow> \\<bar>x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) t) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) t)\\<bar>\n                         \\<le> (SOME M.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> M) +\n                               (SOME L.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> L) *\n                               \\<bar>x\\<bar>", "moreover"], ["proof (state)\nthis:\n  \\<bar>x\\<bar> *\n  \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n  \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> =\n  \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n  \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n  \\<bar>x\\<bar>\n\ngoal (1 subgoal):\n 1. \\<And>t x.\n       \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n       \\<Longrightarrow> \\<bar>x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) t) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) t)\\<bar>\n                         \\<le> (SOME M.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> M) +\n                               (SOME L.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> L) *\n                               \\<bar>x\\<bar>", "have \"... \\<le> ?boundM + \\<bar>?f2 t\\<bar> * \\<bar>x\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n    \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n    \\<bar>x\\<bar>\n    \\<le> (SOME M.\n              \\<forall>t.\n                 tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                 \\<bar>sterm_sem I (f1 fid3 vid1)\n                        (ll_old.flow 0 (sol 0) t)\\<bar>\n                 \\<le> M) +\n          \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n          \\<bar>x\\<bar>", "using leqf3"], ["proof (prove)\nusing this:\n  \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n  \\<le> (SOME M.\n            \\<forall>t.\n               tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n               \\<bar>sterm_sem I (f1 fid3 vid1)\n                      (ll_old.flow 0 (sol 0) t)\\<bar>\n               \\<le> M)\n\ngoal (1 subgoal):\n 1. \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n    \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n    \\<bar>x\\<bar>\n    \\<le> (SOME M.\n              \\<forall>t.\n                 tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                 \\<bar>sterm_sem I (f1 fid3 vid1)\n                        (ll_old.flow 0 (sol 0) t)\\<bar>\n                 \\<le> M) +\n          \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n          \\<bar>x\\<bar>", "by linarith"], ["proof (state)\nthis:\n  \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n  \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n  \\<bar>x\\<bar>\n  \\<le> (SOME M.\n            \\<forall>t.\n               tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n               \\<bar>sterm_sem I (f1 fid3 vid1)\n                      (ll_old.flow 0 (sol 0) t)\\<bar>\n               \\<le> M) +\n        \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n        \\<bar>x\\<bar>\n\ngoal (1 subgoal):\n 1. \\<And>t x.\n       \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n       \\<Longrightarrow> \\<bar>x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) t) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) t)\\<bar>\n                         \\<le> (SOME M.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> M) +\n                               (SOME L.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> L) *\n                               \\<bar>x\\<bar>", "moreover"], ["proof (state)\nthis:\n  \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n  \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n  \\<bar>x\\<bar>\n  \\<le> (SOME M.\n            \\<forall>t.\n               tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n               \\<bar>sterm_sem I (f1 fid3 vid1)\n                      (ll_old.flow 0 (sol 0) t)\\<bar>\n               \\<le> M) +\n        \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n        \\<bar>x\\<bar>\n\ngoal (1 subgoal):\n 1. \\<And>t x.\n       \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n       \\<Longrightarrow> \\<bar>x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) t) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) t)\\<bar>\n                         \\<le> (SOME M.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> M) +\n                               (SOME L.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> L) *\n                               \\<bar>x\\<bar>", "have \"... \\<le> ?boundM + ?boundL * \\<bar>x\\<bar>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SOME M.\n        \\<forall>t.\n           tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n           \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n           \\<le> M) +\n    \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n    \\<bar>x\\<bar>\n    \\<le> (SOME M.\n              \\<forall>t.\n                 tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                 \\<bar>sterm_sem I (f1 fid3 vid1)\n                        (ll_old.flow 0 (sol 0) t)\\<bar>\n                 \\<le> M) +\n          (SOME L.\n              \\<forall>t.\n                 tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                 \\<bar>sterm_sem I (f1 fid2 vid1)\n                        (ll_old.flow 0 (sol 0) t)\\<bar>\n                 \\<le> L) *\n          \\<bar>x\\<bar>", "using leqf2x"], ["proof (prove)\nusing this:\n  \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n  \\<bar>x\\<bar>\n  \\<le> (SOME L.\n            \\<forall>t.\n               tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n               \\<bar>sterm_sem I (f1 fid2 vid1)\n                      (ll_old.flow 0 (sol 0) t)\\<bar>\n               \\<le> L) *\n        \\<bar>x\\<bar>\n\ngoal (1 subgoal):\n 1. (SOME M.\n        \\<forall>t.\n           tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n           \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n           \\<le> M) +\n    \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n    \\<bar>x\\<bar>\n    \\<le> (SOME M.\n              \\<forall>t.\n                 tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                 \\<bar>sterm_sem I (f1 fid3 vid1)\n                        (ll_old.flow 0 (sol 0) t)\\<bar>\n                 \\<le> M) +\n          (SOME L.\n              \\<forall>t.\n                 tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                 \\<bar>sterm_sem I (f1 fid2 vid1)\n                        (ll_old.flow 0 (sol 0) t)\\<bar>\n                 \\<le> L) *\n          \\<bar>x\\<bar>", "by linarith"], ["proof (state)\nthis:\n  (SOME M.\n      \\<forall>t.\n         tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n         \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n         \\<le> M) +\n  \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n  \\<bar>x\\<bar>\n  \\<le> (SOME M.\n            \\<forall>t.\n               tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n               \\<bar>sterm_sem I (f1 fid3 vid1)\n                      (ll_old.flow 0 (sol 0) t)\\<bar>\n               \\<le> M) +\n        (SOME L.\n            \\<forall>t.\n               tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n               \\<bar>sterm_sem I (f1 fid2 vid1)\n                      (ll_old.flow 0 (sol 0) t)\\<bar>\n               \\<le> L) *\n        \\<bar>x\\<bar>\n\ngoal (1 subgoal):\n 1. \\<And>t x.\n       \\<lbrakk>tm \\<le> t; t \\<le> tM\\<rbrakk>\n       \\<Longrightarrow> \\<bar>x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) t) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) t)\\<bar>\n                         \\<le> (SOME M.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> M) +\n                               (SOME L.\n                                   \\<forall>t.\ntm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n\\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> \\<le> L) *\n                               \\<bar>x\\<bar>", "ultimately"], ["proof (chain)\npicking this:\n  \\<bar>x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n        sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n  \\<le> \\<bar>x\\<bar> *\n        \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n        \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n  \\<bar>x\\<bar> *\n  \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n  \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> =\n  \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n  \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n  \\<bar>x\\<bar>\n  \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n  \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n  \\<bar>x\\<bar>\n  \\<le> (SOME M.\n            \\<forall>t.\n               tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n               \\<bar>sterm_sem I (f1 fid3 vid1)\n                      (ll_old.flow 0 (sol 0) t)\\<bar>\n               \\<le> M) +\n        \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n        \\<bar>x\\<bar>\n  (SOME M.\n      \\<forall>t.\n         tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n         \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n         \\<le> M) +\n  \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n  \\<bar>x\\<bar>\n  \\<le> (SOME M.\n            \\<forall>t.\n               tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n               \\<bar>sterm_sem I (f1 fid3 vid1)\n                      (ll_old.flow 0 (sol 0) t)\\<bar>\n               \\<le> M) +\n        (SOME L.\n            \\<forall>t.\n               tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n               \\<bar>sterm_sem I (f1 fid2 vid1)\n                      (ll_old.flow 0 (sol 0) t)\\<bar>\n               \\<le> L) *\n        \\<bar>x\\<bar>", "show \"\\<bar>x * ?f2 t + ?f3 t\\<bar> \\<le> ?boundM + ?boundL * \\<bar>x\\<bar>\""], ["proof (prove)\nusing this:\n  \\<bar>x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n        sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n  \\<le> \\<bar>x\\<bar> *\n        \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n        \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n  \\<bar>x\\<bar> *\n  \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n  \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> =\n  \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n  \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n  \\<bar>x\\<bar>\n  \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> +\n  \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n  \\<bar>x\\<bar>\n  \\<le> (SOME M.\n            \\<forall>t.\n               tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n               \\<bar>sterm_sem I (f1 fid3 vid1)\n                      (ll_old.flow 0 (sol 0) t)\\<bar>\n               \\<le> M) +\n        \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n        \\<bar>x\\<bar>\n  (SOME M.\n      \\<forall>t.\n         tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n         \\<bar>sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n         \\<le> M) +\n  \\<bar>sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t)\\<bar> *\n  \\<bar>x\\<bar>\n  \\<le> (SOME M.\n            \\<forall>t.\n               tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n               \\<bar>sterm_sem I (f1 fid3 vid1)\n                      (ll_old.flow 0 (sol 0) t)\\<bar>\n               \\<le> M) +\n        (SOME L.\n            \\<forall>t.\n               tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n               \\<bar>sterm_sem I (f1 fid2 vid1)\n                      (ll_old.flow 0 (sol 0) t)\\<bar>\n               \\<le> L) *\n        \\<bar>x\\<bar>\n\ngoal (1 subgoal):\n 1. \\<bar>x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n          sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n    \\<le> (SOME M.\n              \\<forall>t.\n                 tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                 \\<bar>sterm_sem I (f1 fid3 vid1)\n                        (ll_old.flow 0 (sol 0) t)\\<bar>\n                 \\<le> M) +\n          (SOME L.\n              \\<forall>t.\n                 tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n                 \\<bar>sterm_sem I (f1 fid2 vid1)\n                        (ll_old.flow 0 (sol 0) t)\\<bar>\n                 \\<le> L) *\n          \\<bar>x\\<bar>", "by linarith"], ["proof (state)\nthis:\n  \\<bar>x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n        sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n  \\<le> (SOME M.\n            \\<forall>t.\n               tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n               \\<bar>sterm_sem I (f1 fid3 vid1)\n                      (ll_old.flow 0 (sol 0) t)\\<bar>\n               \\<le> M) +\n        (SOME L.\n            \\<forall>t.\n               tm \\<le> t \\<and> t \\<le> tM \\<longrightarrow>\n               \\<bar>sterm_sem I (f1 fid2 vid1)\n                      (ll_old.flow 0 (sol 0) t)\\<bar>\n               \\<le> L) *\n        \\<bar>x\\<bar>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>M L.\n     \\<forall>t\\<in>{tm..tM}.\n        \\<forall>x.\n           \\<bar>x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n                 sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n           \\<le> M + L * \\<bar>x\\<bar>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?tm13 \\<in> ll_old.existence_ivl 0 (sol 0);\n   ?tM13 \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>M L.\n                       \\<forall>t\\<in>{?tm13..?tM13}.\n                          \\<forall>x.\n                             \\<bar>x *\n                                   sterm_sem I (f1 fid2 vid1)\n                                    (ll_old.flow 0 (sol 0) t) +\n                                   sterm_sem I (f1 fid3 vid1)\n                                    (ll_old.flow 0 (sol 0) t)\\<bar>\n                             \\<le> M + L * \\<bar>x\\<bar>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have ivls_eq:\"(ll_new.existence_ivl 0 r) = (ll_old.existence_ivl 0 (sol 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ll_new.existence_ivl 0 r = ll_old.existence_ivl 0 (sol 0)", "apply(rule ll_new.existence_ivl_eq_domain)"], ["proof (prove)\ngoal (5 subgoals):\n 1. 0 \\<in> ll_old.existence_ivl 0 (sol 0)\n 2. r \\<in> UNIV\n 3. \\<And>tm tM t x.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x\\<in>UNIV.\n                                  norm\n                                   (x *\n                                    sterm_sem I (f1 fid2 vid1)\n                                     (ll_old.flow 0 (sol 0) t) +\n                                    sterm_sem I (f1 fid3 vid1)\n                                     (ll_old.flow 0 (sol 0) t))\n                                  \\<le> M + L * norm x\n 4. is_interval (ll_old.existence_ivl 0 (sol 0))\n 5. UNIV = UNIV", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>M L.\n                            \\<forall>t\\<in>{tm..tM}.\n                               \\<forall>x.\n                                  \\<bar>x *\n  sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)\\<bar>\n                                  \\<le> M + L * \\<bar>x\\<bar>", "apply (rule more_lipschitz)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> tm \\<in> ll_old.existence_ivl 0 (sol 0)\n 2. \\<And>tm tM.\n       \\<lbrakk>tm \\<in> ll_old.existence_ivl 0 (sol 0);\n        tM \\<in> ll_old.existence_ivl 0 (sol 0)\\<rbrakk>\n       \\<Longrightarrow> tM \\<in> ll_old.existence_ivl 0 (sol 0)", "by auto"], ["proof (state)\nthis:\n  ll_new.existence_ivl 0 r = ll_old.existence_ivl 0 (sol 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sub':\"{0--t} \\<subseteq> ll_new.existence_ivl 0 r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0--t} \\<subseteq> ll_new.existence_ivl 0 r", "using sub ivls_eq"], ["proof (prove)\nusing this:\n  {0--t} \\<subseteq> ll_old.existence_ivl 0 (sol 0)\n  ll_new.existence_ivl 0 r = ll_old.existence_ivl 0 (sol 0)\n\ngoal (1 subgoal):\n 1. {0--t} \\<subseteq> ll_new.existence_ivl 0 r", "by auto"], ["proof (state)\nthis:\n  {0--t} \\<subseteq> ll_new.existence_ivl 0 r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sol_new':\"(ll_new.flow 0 r solves_ode ?yode) {0--t} UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ll_new.flow 0 r solves_ode\n     (\\<lambda>t y.\n         y * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n         sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)))\n     {0--t} UNIV", "by(rule solves_ode_subset, rule sol_new, rule sub')"], ["proof (state)\nthis:\n  (ll_new.flow 0 r solves_ode\n   (\\<lambda>t y.\n       y * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n       sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)))\n   {0--t} UNIV\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "let ?soly = \"ll_new.flow 0 r\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "let ?sol' = \"(\\<lambda>t. \\<chi> i. if i = vid2 then ?soly t else sol t $ i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "let ?aaba' = \"mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                             (OSing vid2\n                               (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                                 ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n                         (\\<chi> y. if vid2 = y then r else fst (a, b) $ y, b)\n                         (?sol' t)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have duh:\"(fst ?aaba', snd ?aaba') = ?aaba'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (OSing vid2\n               (Plus\n                 (Times\n                   ($f fid2\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                   (Var vid2))\n                 ($f fid3\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n           (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n           (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)),\n     snd (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (OSing vid2\n               (Plus\n                 (Times\n                   ($f fid2\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                   (Var vid2))\n                 ($f fid3\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n           (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n           (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))) =\n    mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)", "by auto"], ["proof (state)\nthis:\n  (fst (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (OSing vid2\n             (Plus\n               (Times\n                 ($f fid2\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                 (Var vid2))\n               ($f fid3\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n         (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)),\n   snd (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (OSing vid2\n             (Plus\n               (Times\n                 ($f fid2\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                 (Var vid2))\n               ($f fid3\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n         (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))) =\n  mk_v I\n   (OProd\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (OSing vid2\n       (Plus\n         (Times\n           ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n           (Var vid2))\n         ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n   (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n   (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "note bigEx = spec[OF spec[OF bigAll, where x=\"fst ?aaba'\"], where x=\"snd ?aaba'\"]"], ["proof (state)\nthis:\n  (\\<exists>sola ta.\n      (fst (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)),\n       snd (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (\\<chi>i.\n                 if i = vid2 then ll_new.flow 0 r t else sol t $ i))) =\n      mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) (sola ta) \\<and>\n      0 \\<le> ta \\<and>\n      (sola solves_ode\n       (\\<lambda>a b.\n           (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n           (\\<chi>i.\n               if i = vid2\n               then sterm_sem I\n                     (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                     b\n               else 0)))\n       {0..ta}\n       {x. Predicates I vid1\n            (\\<chi>i.\n                dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                 (mk_v I\n                   (OProd\n                     (OSing vid1\n                       ($f fid1\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))\n                     (OSing vid2\n                       (Plus\n                         (Times\n                           ($f fid2\n                             (\\<lambda>i.\n                                 if i = vid1 then Var vid1 else Const 0))\n                           (Var vid2))\n                         ($f fid3\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))))\n                   (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n                   x))} \\<and>\n      VSagree (sola 0) (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n       {uu.\n        uu = vid2 \\<or>\n        uu = vid1 \\<or>\n        uu = vid2 \\<or>\n        uu = vid1 \\<or>\n        Inl uu\n        \\<in> Inl `\n              ({x. \\<exists>xa.\n                      Inl x\n                      \\<in> FVT (if xa = vid1 then Var vid1\n                                 else Const 0)} \\<union>\n               {x. x = vid2 \\<or>\n                   (\\<exists>xa.\n                       Inl x\n                       \\<in> FVT (if xa = vid1 then Var vid1\n                                  else Const 0))}) \\<or>\n        (\\<exists>x.\n            Inl uu\n            \\<in> FVT (if x = vid1 then Var vid1\n                       else Const 0))}) \\<longrightarrow>\n  Predicates I vid2\n   (\\<chi>i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (fst (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (OSing vid2\n                   (Plus\n                     (Times\n                       ($f fid2\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0))\n                       (Var vid2))\n                     ($f fid3\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))))\n               (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n               (\\<chi>i.\n                   if i = vid2 then ll_new.flow 0 r t else sol t $ i)),\n         snd (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (OSing vid2\n                   (Plus\n                     (Times\n                       ($f fid2\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0))\n                       (Var vid2))\n                     ($f fid3\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))))\n               (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n               (\\<chi>i.\n                   if i = vid2 then ll_new.flow 0 r t else sol t $ i))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sol_deriv:\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow> (sol has_derivative (\\<lambda>xa. xa *\\<^sub>R (\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s) else 0))) (at s within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       (sol has_derivative\n        (\\<lambda>xa.\n            xa *\\<^sub>R\n            (\\<chi>i.\n                if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s)\n                else 0)))\n        (at s within {0..t})", "using sol"], ["proof (prove)\nusing this:\n  (sol solves_ode\n   (\\<lambda>a b.\n       \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n   {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (mk_v I\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (a, b) x))}\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       (sol has_derivative\n        (\\<lambda>xa.\n            xa *\\<^sub>R\n            (\\<chi>i.\n                if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s)\n                else 0)))\n        (at s within {0..t})", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s \\<and> s \\<le> t;\n        (sol solves_ode\n         (\\<lambda>a b.\n             \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n         {0..t}\n         {x. Predicates I vid1\n              (\\<chi>i.\n                  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                   (mk_v I\n                     (OSing vid1\n                       ($f fid1\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))\n                     (a, b) x))}\\<rbrakk>\n       \\<Longrightarrow> (sol has_derivative\n                          (\\<lambda>xa.\n                              xa *\\<^sub>R\n                              (\\<chi>i.\n                                  if i = vid1\n                                  then sterm_sem I (f1 fid1 vid1) (sol s)\n                                  else 0)))\n                          (at s within {0..t})", "by(drule solves_odeD(1), auto simp add: has_vderiv_on_def has_vector_derivative_def)"], ["proof (state)\nthis:\n  ?s13 \\<in> {0..t} \\<Longrightarrow>\n  (sol has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       (\\<chi>i.\n           if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol ?s13) else 0)))\n   (at ?s13 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have silly_eq1:\"(\\<lambda>t. \\<chi> i. sol t $ i) = sol\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t. \\<chi>i. sol t $ i) = sol", "by(rule ext, rule vec_extensionality, auto)"], ["proof (state)\nthis:\n  (\\<lambda>t. \\<chi>i. sol t $ i) = sol\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have silly_eq2:\"\\<And>s. (\\<lambda>xa. \\<chi> i. (xa *\\<^sub>R (\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s) else 0)) $ i) = (\\<lambda>xa. xa *\\<^sub>R (\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s) else 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       (\\<lambda>xa.\n           \\<chi>i.\n              (xa *\\<^sub>R\n               (\\<chi>i.\n                   if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s)\n                   else 0)) $\n              i) =\n       (\\<lambda>xa.\n           xa *\\<^sub>R\n           (\\<chi>i.\n               if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s) else 0))", "by(rule ext, rule vec_extensionality, auto)"], ["proof (state)\nthis:\n  (\\<lambda>xa.\n      \\<chi>i.\n         (xa *\\<^sub>R\n          (\\<chi>i.\n              if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol ?s13)\n              else 0)) $\n         i) =\n  (\\<lambda>xa.\n      xa *\\<^sub>R\n      (\\<chi>i.\n          if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol ?s13) else 0))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sol_proj_deriv:\"\\<And>s i. s \\<in> {0..t} \\<Longrightarrow> ((\\<lambda> t. sol t $ i) has_derivative (\\<lambda>xa. (xa *\\<^sub>R (\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s) else 0)) $ i)) (at s within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s i.\n       s \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>t. sol t $ i) has_derivative\n        (\\<lambda>xa.\n            (xa *\\<^sub>R\n             (\\<chi>i.\n                 if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s)\n                 else 0)) $\n            i))\n        (at s within {0..t})", "subgoal for s i"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>t. sol t $ i) has_derivative\n     (\\<lambda>xa.\n         (xa *\\<^sub>R\n          (\\<chi>i.\n              if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s) else 0)) $\n         i))\n     (at s within {0..t})", "apply(rule has_derivative_proj)"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>t. \\<chi>i. sol t $ i) has_derivative\n     (\\<lambda>xa.\n         \\<chi>i.\n            (xa *\\<^sub>R\n             (\\<chi>i.\n                 if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s)\n                 else 0)) $\n            i))\n     (at s within {0..t})", "using sol_deriv[of s] silly_eq1 silly_eq2[of s]"], ["proof (prove)\nusing this:\n  s \\<in> {0..t} \\<Longrightarrow>\n  (sol has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       (\\<chi>i.\n           if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s) else 0)))\n   (at s within {0..t})\n  (\\<lambda>t. \\<chi>i. sol t $ i) = sol\n  (\\<lambda>xa.\n      \\<chi>i.\n         (xa *\\<^sub>R\n          (\\<chi>i.\n              if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s) else 0)) $\n         i) =\n  (\\<lambda>xa.\n      xa *\\<^sub>R\n      (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s) else 0))\n\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>t. \\<chi>i. sol t $ i) has_derivative\n     (\\<lambda>xa.\n         \\<chi>i.\n            (xa *\\<^sub>R\n             (\\<chi>i.\n                 if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s)\n                 else 0)) $\n            i))\n     (at s within {0..t})", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?s13 \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t. sol t $ ?i13) has_derivative\n   (\\<lambda>xa.\n       (xa *\\<^sub>R\n        (\\<chi>i.\n            if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol ?s13)\n            else 0)) $\n       ?i13))\n   (at ?s13 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sol_proj_deriv_vid1:\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow> ((\\<lambda> t. sol t $ vid1) has_derivative (\\<lambda>xa. xa * sterm_sem I (f1 fid1 vid1) (sol s))) (at s within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>t. sol t $ vid1) has_derivative\n        (\\<lambda>xa. xa * sterm_sem I (f1 fid1 vid1) (sol s)))\n        (at s within {0..t})", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>t. sol t $ vid1) has_derivative\n     (\\<lambda>xa. xa * sterm_sem I (f1 fid1 vid1) (sol s)))\n     (at s within {0..t})", "using sol_proj_deriv[of s vid1]"], ["proof (prove)\nusing this:\n  s \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t. sol t $ vid1) has_derivative\n   (\\<lambda>xa.\n       (xa *\\<^sub>R\n        (\\<chi>i.\n            if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s) else 0)) $\n       vid1))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>t. sol t $ vid1) has_derivative\n     (\\<lambda>xa. xa * sterm_sem I (f1 fid1 vid1) (sol s)))\n     (at s within {0..t})", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?s13 \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t. sol t $ vid1) has_derivative\n   (\\<lambda>xa. xa * sterm_sem I (f1 fid1 vid1) (sol ?s13)))\n   (at ?s13 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sol_proj_deriv_other:\"\\<And>s i. s \\<in> {0..t} \\<Longrightarrow> i \\<noteq> vid1 \\<Longrightarrow> ((\\<lambda> t. sol t $ i) has_derivative (\\<lambda>xa. 0)) (at s within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s i.\n       \\<lbrakk>s \\<in> {0..t}; i \\<noteq> vid1\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>t. sol t $ i) has_derivative\n                          (\\<lambda>xa. 0))\n                          (at s within {0..t})", "subgoal for s i"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> {0..t}; i \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t. sol t $ i) has_derivative\n                       (\\<lambda>xa. 0))\n                       (at s within {0..t})", "using sol_proj_deriv[of s i]"], ["proof (prove)\nusing this:\n  s \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t. sol t $ i) has_derivative\n   (\\<lambda>xa.\n       (xa *\\<^sub>R\n        (\\<chi>i.\n            if i = vid1 then sterm_sem I (f1 fid1 vid1) (sol s) else 0)) $\n       i))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> {0..t}; i \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t. sol t $ i) has_derivative\n                       (\\<lambda>xa. 0))\n                       (at s within {0..t})", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>?s13 \\<in> {0..t}; ?i13 \\<noteq> vid1\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t. sol t $ ?i13) has_derivative\n                     (\\<lambda>xa. 0))\n                     (at ?s13 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have fact:\"\\<And>x. x \\<in>{0..t} \\<Longrightarrow>\n   (ll_new.flow 0 r has_derivative\n    (\\<lambda>xa. xa *\\<^sub>R (ll_new.flow 0 r x * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) x) +\n                  sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) x))))\n    (at x within {0 .. t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..t} \\<Longrightarrow>\n       (ll_new.flow 0 r has_derivative\n        (\\<lambda>xa.\n            xa *\\<^sub>R\n            (ll_new.flow 0 r x *\n             sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) x) +\n             sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) x))))\n        (at x within {0..t})", "using sol_new'"], ["proof (prove)\nusing this:\n  (ll_new.flow 0 r solves_ode\n   (\\<lambda>t y.\n       y * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n       sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)))\n   {0--t} UNIV\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..t} \\<Longrightarrow>\n       (ll_new.flow 0 r has_derivative\n        (\\<lambda>xa.\n            xa *\\<^sub>R\n            (ll_new.flow 0 r x *\n             sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) x) +\n             sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) x))))\n        (at x within {0..t})", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 \\<le> x \\<and> x \\<le> t;\n        (ll_new.flow 0 r solves_ode\n         (\\<lambda>a b.\n             b * sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) a) +\n             sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) a)))\n         {0--t} UNIV\\<rbrakk>\n       \\<Longrightarrow> (ll_new.flow 0 r has_derivative\n                          (\\<lambda>xa.\n                              xa *\n                              (ll_new.flow 0 r x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) x) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) x))))\n                          (at x within {0..t})", "apply(drule solves_odeD(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 \\<le> x \\<and> x \\<le> t;\n        (ll_new.flow 0 r has_vderiv_on\n         (\\<lambda>t.\n             ll_new.flow 0 r t *\n             sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n             sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)))\n         {0--t}\\<rbrakk>\n       \\<Longrightarrow> (ll_new.flow 0 r has_derivative\n                          (\\<lambda>xa.\n                              xa *\n                              (ll_new.flow 0 r x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) x) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) x))))\n                          (at x within {0..t})", "using tclosed"], ["proof (prove)\nusing this:\n  {0..t} = {0--t}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 \\<le> x \\<and> x \\<le> t;\n        (ll_new.flow 0 r has_vderiv_on\n         (\\<lambda>t.\n             ll_new.flow 0 r t *\n             sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) t) +\n             sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) t)))\n         {0--t}\\<rbrakk>\n       \\<Longrightarrow> (ll_new.flow 0 r has_derivative\n                          (\\<lambda>xa.\n                              xa *\n                              (ll_new.flow 0 r x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) x) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) x))))\n                          (at x within {0..t})", "unfolding has_vderiv_on_def has_vector_derivative_def"], ["proof (prove)\nusing this:\n  {0..t} = {0--t}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 \\<le> x \\<and> x \\<le> t;\n        \\<forall>x\\<in>{0--t}.\n           (ll_new.flow 0 r has_derivative\n            (\\<lambda>xa.\n                xa *\\<^sub>R\n                (ll_new.flow 0 r x *\n                 sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) x) +\n                 sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) x))))\n            (at x within {0--t})\\<rbrakk>\n       \\<Longrightarrow> (ll_new.flow 0 r has_derivative\n                          (\\<lambda>xa.\n                              xa *\n                              (ll_new.flow 0 r x *\n                               sterm_sem I (f1 fid2 vid1)\n                                (ll_old.flow 0 (sol 0) x) +\n                               sterm_sem I (f1 fid3 vid1)\n                                (ll_old.flow 0 (sol 0) x))))\n                          (at x within {0..t})", "by auto"], ["proof (state)\nthis:\n  ?x13 \\<in> {0..t} \\<Longrightarrow>\n  (ll_new.flow 0 r has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       (ll_new.flow 0 r ?x13 *\n        sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) ?x13) +\n        sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) ?x13))))\n   (at ?x13 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have new_sol_deriv:\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow> (ll_new.flow 0 r has_derivative\n      (\\<lambda>xa. xa *\\<^sub>R (ll_new.flow 0 r s * sterm_sem I (f1 fid2 vid1) (sol s) + sterm_sem I (f1 fid3 vid1) (sol s))))\n      (at s within {0.. t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       (ll_new.flow 0 r has_derivative\n        (\\<lambda>xa.\n            xa *\\<^sub>R\n            (ll_new.flow 0 r s * sterm_sem I (f1 fid2 vid1) (sol s) +\n             sterm_sem I (f1 fid3 vid1) (sol s))))\n        (at s within {0..t})", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    (ll_new.flow 0 r has_derivative\n     (\\<lambda>xa.\n         xa *\\<^sub>R\n         (ll_new.flow 0 r s * sterm_sem I (f1 fid2 vid1) (sol s) +\n          sterm_sem I (f1 fid3 vid1) (sol s))))\n     (at s within {0..t})", "using fact[of s] tclosed sol_eq_flow[of s]"], ["proof (prove)\nusing this:\n  s \\<in> {0..t} \\<Longrightarrow>\n  (ll_new.flow 0 r has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       (ll_new.flow 0 r s *\n        sterm_sem I (f1 fid2 vid1) (ll_old.flow 0 (sol 0) s) +\n        sterm_sem I (f1 fid3 vid1) (ll_old.flow 0 (sol 0) s))))\n   (at s within {0..t})\n  {0..t} = {0--t}\n  s \\<in> {0..t} \\<Longrightarrow> sol s = ll_old.flow 0 (sol 0) s\n\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    (ll_new.flow 0 r has_derivative\n     (\\<lambda>xa.\n         xa *\\<^sub>R\n         (ll_new.flow 0 r s * sterm_sem I (f1 fid2 vid1) (sol s) +\n          sterm_sem I (f1 fid3 vid1) (sol s))))\n     (at s within {0..t})", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?s13 \\<in> {0..t} \\<Longrightarrow>\n  (ll_new.flow 0 r has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       (ll_new.flow 0 r ?s13 * sterm_sem I (f1 fid2 vid1) (sol ?s13) +\n        sterm_sem I (f1 fid3 vid1) (sol ?s13))))\n   (at ?s13 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sterm_agree:\"\\<And>s. Vagree (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i, undefined) (sol s, undefined) {Inl vid1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       Vagree\n        (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i,\n         undefined)\n        (sol s, undefined) {Inl vid1}", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i, undefined)\n     (sol s, undefined) {Inl vid1}", "unfolding Vagree_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i \\<in> {Inl vid1} \\<longrightarrow>\n        fst (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i,\n             undefined) $\n        i =\n        fst (sol s, undefined) $ i) \\<and>\n    (\\<forall>i.\n        Inr i \\<in> {Inl vid1} \\<longrightarrow>\n        snd (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i,\n             undefined) $\n        i =\n        snd (sol s, undefined) $ i)", "using vne12"], ["proof (prove)\nusing this:\n  vid1 \\<noteq> vid2\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i \\<in> {Inl vid1} \\<longrightarrow>\n        fst (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i,\n             undefined) $\n        i =\n        fst (sol s, undefined) $ i) \\<and>\n    (\\<forall>i.\n        Inr i \\<in> {Inl vid1} \\<longrightarrow>\n        snd (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i,\n             undefined) $\n        i =\n        snd (sol s, undefined) $ i)", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Vagree\n   (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s13 else sol ?s13 $ i,\n    undefined)\n   (sol ?s13, undefined) {Inl vid1}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have FVF:\"(FVT (f1 fid2 vid1)) = {Inl vid1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FVT (f1 fid2 vid1) = {Inl vid1}", "unfolding f1_def expand_singleton"], ["proof (prove)\ngoal (1 subgoal):\n 1. FVT ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) =\n    {Inl vid1}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       x \\<in> FVT (if xa = vid1 then Var vid1\n                    else Const 0) \\<Longrightarrow>\n       x = Inl vid1", "subgoal for x xa"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0) \\<Longrightarrow>\n    x = Inl vid1", "by (cases \"xa = vid1\", auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  FVT (f1 fid2 vid1) = {Inl vid1}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have FVF2:\"(FVT (f1 fid3 vid1)) = {Inl vid1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FVT (f1 fid3 vid1) = {Inl vid1}", "unfolding f1_def expand_singleton"], ["proof (prove)\ngoal (1 subgoal):\n 1. FVT ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) =\n    {Inl vid1}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       x \\<in> FVT (if xa = vid1 then Var vid1\n                    else Const 0) \\<Longrightarrow>\n       x = Inl vid1", "subgoal for x xa"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0) \\<Longrightarrow>\n    x = Inl vid1", "by (cases \"xa = vid1\", auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  FVT (f1 fid3 vid1) = {Inl vid1}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sterm_agree_FVF:\"\\<And>s. Vagree (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i, undefined) (sol s, undefined) (FVT (f1 fid2 vid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       Vagree\n        (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i,\n         undefined)\n        (sol s, undefined) (FVT (f1 fid2 vid1))", "using sterm_agree FVF"], ["proof (prove)\nusing this:\n  Vagree\n   (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s13 else sol ?s13 $ i,\n    undefined)\n   (sol ?s13, undefined) {Inl vid1}\n  FVT (f1 fid2 vid1) = {Inl vid1}\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       Vagree\n        (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i,\n         undefined)\n        (sol s, undefined) (FVT (f1 fid2 vid1))", "by auto"], ["proof (state)\nthis:\n  Vagree\n   (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s13 else sol ?s13 $ i,\n    undefined)\n   (sol ?s13, undefined) (FVT (f1 fid2 vid1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sterm_agree_FVF2:\"\\<And>s. Vagree (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i, undefined) (sol s, undefined) (FVT (f1 fid3 vid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       Vagree\n        (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i,\n         undefined)\n        (sol s, undefined) (FVT (f1 fid3 vid1))", "using sterm_agree FVF2"], ["proof (prove)\nusing this:\n  Vagree\n   (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s13 else sol ?s13 $ i,\n    undefined)\n   (sol ?s13, undefined) {Inl vid1}\n  FVT (f1 fid3 vid1) = {Inl vid1}\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       Vagree\n        (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i,\n         undefined)\n        (sol s, undefined) (FVT (f1 fid3 vid1))", "by auto"], ["proof (state)\nthis:\n  Vagree\n   (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s13 else sol ?s13 $ i,\n    undefined)\n   (sol ?s13, undefined) (FVT (f1 fid3 vid1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have y_component_sem_eq2:\"\\<And>s. sterm_sem I (f1 fid2 vid1) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n        = sterm_sem I (f1 fid2 vid1) (sol s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       sterm_sem I (f1 fid2 vid1)\n        (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i) =\n       sterm_sem I (f1 fid2 vid1) (sol s)", "using coincidence_sterm[OF sterm_agree_FVF, of I]"], ["proof (prove)\nusing this:\n  sterm_sem I (f1 fid2 vid1)\n   (fst (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s14 else sol ?s14 $ i,\n         undefined)) =\n  sterm_sem I (f1 fid2 vid1) (fst (sol ?s14, undefined))\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       sterm_sem I (f1 fid2 vid1)\n        (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i) =\n       sterm_sem I (f1 fid2 vid1) (sol s)", "by auto"], ["proof (state)\nthis:\n  sterm_sem I (f1 fid2 vid1)\n   (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s13 else sol ?s13 $ i) =\n  sterm_sem I (f1 fid2 vid1) (sol ?s13)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have y_component_sem_eq3:\"\\<And>s. sterm_sem I (f1 fid3 vid1) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n        = sterm_sem I (f1 fid3 vid1) (sol s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       sterm_sem I (f1 fid3 vid1)\n        (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i) =\n       sterm_sem I (f1 fid3 vid1) (sol s)", "using coincidence_sterm[OF sterm_agree_FVF2, of I]"], ["proof (prove)\nusing this:\n  sterm_sem I (f1 fid3 vid1)\n   (fst (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s14 else sol ?s14 $ i,\n         undefined)) =\n  sterm_sem I (f1 fid3 vid1) (fst (sol ?s14, undefined))\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       sterm_sem I (f1 fid3 vid1)\n        (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i) =\n       sterm_sem I (f1 fid3 vid1) (sol s)", "by auto"], ["proof (state)\nthis:\n  sterm_sem I (f1 fid3 vid1)\n   (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s13 else sol ?s13 $ i) =\n  sterm_sem I (f1 fid3 vid1) (sol ?s13)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have y_component_ode_eq:\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow> \n       (\\<lambda>xa. xa * (ll_new.flow 0 r s * sterm_sem I (f1 fid2 vid1) (sol s) + sterm_sem I (f1 fid3 vid1) (sol s)))\n     = (\\<lambda>xa. xa * (sterm_sem I (f1 fid2 vid1) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i) * ll_new.flow 0 r s +\n             sterm_sem I (f1 fid3 vid1) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       (\\<lambda>xa.\n           xa *\n           (ll_new.flow 0 r s * sterm_sem I (f1 fid2 vid1) (sol s) +\n            sterm_sem I (f1 fid3 vid1) (sol s))) =\n       (\\<lambda>xa.\n           xa *\n           (sterm_sem I (f1 fid2 vid1)\n             (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i) *\n            ll_new.flow 0 r s +\n            sterm_sem I (f1 fid3 vid1)\n             (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)))", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    (\\<lambda>xa.\n        xa *\n        (ll_new.flow 0 r s * sterm_sem I (f1 fid2 vid1) (sol s) +\n         sterm_sem I (f1 fid3 vid1) (sol s))) =\n    (\\<lambda>xa.\n        xa *\n        (sterm_sem I (f1 fid2 vid1)\n          (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i) *\n         ll_new.flow 0 r s +\n         sterm_sem I (f1 fid3 vid1)\n          (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)))", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       s \\<in> {0..t} \\<Longrightarrow>\n       xa *\n       (ll_new.flow 0 r s * sterm_sem I (f1 fid2 vid1) (sol s) +\n        sterm_sem I (f1 fid3 vid1) (sol s)) =\n       xa *\n       (sterm_sem I (f1 fid2 vid1)\n         (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i) *\n        ll_new.flow 0 r s +\n        sterm_sem I (f1 fid3 vid1)\n         (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))", "subgoal for xa"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    xa *\n    (ll_new.flow 0 r s * sterm_sem I (f1 fid2 vid1) (sol s) +\n     sterm_sem I (f1 fid3 vid1) (sol s)) =\n    xa *\n    (sterm_sem I (f1 fid2 vid1)\n      (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i) *\n     ll_new.flow 0 r s +\n     sterm_sem I (f1 fid3 vid1)\n      (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))", "using y_component_sem_eq2 y_component_sem_eq3"], ["proof (prove)\nusing this:\n  sterm_sem I (f1 fid2 vid1)\n   (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s13 else sol ?s13 $ i) =\n  sterm_sem I (f1 fid2 vid1) (sol ?s13)\n  sterm_sem I (f1 fid3 vid1)\n   (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s13 else sol ?s13 $ i) =\n  sterm_sem I (f1 fid3 vid1) (sol ?s13)\n\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    xa *\n    (ll_new.flow 0 r s * sterm_sem I (f1 fid2 vid1) (sol s) +\n     sterm_sem I (f1 fid3 vid1) (sol s)) =\n    xa *\n    (sterm_sem I (f1 fid2 vid1)\n      (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i) *\n     ll_new.flow 0 r s +\n     sterm_sem I (f1 fid3 vid1)\n      (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?s13 \\<in> {0..t} \\<Longrightarrow>\n  (\\<lambda>xa.\n      xa *\n      (ll_new.flow 0 r ?s13 * sterm_sem I (f1 fid2 vid1) (sol ?s13) +\n       sterm_sem I (f1 fid3 vid1) (sol ?s13))) =\n  (\\<lambda>xa.\n      xa *\n      (sterm_sem I (f1 fid2 vid1)\n        (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s13 else sol ?s13 $ i) *\n       ll_new.flow 0 r ?s13 +\n       sterm_sem I (f1 fid3 vid1)\n        (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s13 else sol ?s13 $ i)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have agree_vid1:\"\\<And>s. Vagree (sol s, undefined) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i, undefined) {Inl vid1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       Vagree (sol s, undefined)\n        (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i,\n         undefined)\n        {Inl vid1}", "unfolding Vagree_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       (\\<forall>i.\n           Inl i \\<in> {Inl vid1} \\<longrightarrow>\n           fst (sol s, undefined) $ i =\n           fst (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i,\n                undefined) $\n           i) \\<and>\n       (\\<forall>i.\n           Inr i \\<in> {Inl vid1} \\<longrightarrow>\n           snd (sol s, undefined) $ i =\n           snd (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i,\n                undefined) $\n           i)", "using vne12"], ["proof (prove)\nusing this:\n  vid1 \\<noteq> vid2\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       (\\<forall>i.\n           Inl i \\<in> {Inl vid1} \\<longrightarrow>\n           fst (sol s, undefined) $ i =\n           fst (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i,\n                undefined) $\n           i) \\<and>\n       (\\<forall>i.\n           Inr i \\<in> {Inl vid1} \\<longrightarrow>\n           snd (sol s, undefined) $ i =\n           snd (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i,\n                undefined) $\n           i)", "by auto"], ["proof (state)\nthis:\n  Vagree (sol ?s13, undefined)\n   (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s13 else sol ?s13 $ i,\n    undefined)\n   {Inl vid1}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have FVT_vid1:\"FVT(f1 fid1 vid1) = {Inl vid1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FVT (f1 fid1 vid1) = {Inl vid1}", "apply(auto simp add: f1_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       x \\<in> FVT (if xa = vid1 then Var vid1\n                    else Const 0) \\<Longrightarrow>\n       x = Inl vid1", "subgoal for x xa"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0) \\<Longrightarrow>\n    x = Inl vid1", "apply(cases \"xa = vid1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n     xa = vid1\\<rbrakk>\n    \\<Longrightarrow> x = Inl vid1\n 2. \\<lbrakk>x \\<in> FVT (if xa = vid1 then Var vid1 else Const 0);\n     xa \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> x = Inl vid1", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  FVT (f1 fid1 vid1) = {Inl vid1}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have agree_vid1_FVT:\"\\<And>s. Vagree (sol s, undefined) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i, undefined) (FVT (f1 fid1 vid1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       Vagree (sol s, undefined)\n        (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i,\n         undefined)\n        (FVT (f1 fid1 vid1))", "using FVT_vid1 agree_vid1"], ["proof (prove)\nusing this:\n  FVT (f1 fid1 vid1) = {Inl vid1}\n  Vagree (sol ?s13, undefined)\n   (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s13 else sol ?s13 $ i,\n    undefined)\n   {Inl vid1}\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       Vagree (sol s, undefined)\n        (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i,\n         undefined)\n        (FVT (f1 fid1 vid1))", "by auto"], ["proof (state)\nthis:\n  Vagree (sol ?s13, undefined)\n   (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s13 else sol ?s13 $ i,\n    undefined)\n   (FVT (f1 fid1 vid1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sterm_eq_vid1:\"\\<And>s. sterm_sem I (f1 fid1 vid1) (sol s) = sterm_sem I (f1 fid1 vid1) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       sterm_sem I (f1 fid1 vid1) (sol s) =\n       sterm_sem I (f1 fid1 vid1)\n        (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)", "subgoal for  s"], ["proof (prove)\ngoal (1 subgoal):\n 1. sterm_sem I (f1 fid1 vid1) (sol s) =\n    sterm_sem I (f1 fid1 vid1)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)", "using coincidence_sterm[OF agree_vid1_FVT[of s], of I]"], ["proof (prove)\nusing this:\n  sterm_sem I (f1 fid1 vid1) (fst (sol s, undefined)) =\n  sterm_sem I (f1 fid1 vid1)\n   (fst (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i,\n         undefined))\n\ngoal (1 subgoal):\n 1. sterm_sem I (f1 fid1 vid1) (sol s) =\n    sterm_sem I (f1 fid1 vid1)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  sterm_sem I (f1 fid1 vid1) (sol ?s13) =\n  sterm_sem I (f1 fid1 vid1)\n   (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s13 else sol ?s13 $ i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have vid1_deriv_eq:\"\\<And>s. (\\<lambda>xa. xa * sterm_sem I (f1 fid1 vid1) (sol s)) =\n       (\\<lambda>xa. xa * sterm_sem I (f1 fid1 vid1) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       (\\<lambda>xa. xa * sterm_sem I (f1 fid1 vid1) (sol s)) =\n       (\\<lambda>xa.\n           xa *\n           sterm_sem I (f1 fid1 vid1)\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>xa. xa * sterm_sem I (f1 fid1 vid1) (sol s)) =\n    (\\<lambda>xa.\n        xa *\n        sterm_sem I (f1 fid1 vid1)\n         (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa * sterm_sem I (f1 fid1 vid1) (sol s) =\n       xa *\n       sterm_sem I (f1 fid1 vid1)\n        (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)", "subgoal for x'"], ["proof (prove)\ngoal (1 subgoal):\n 1. x' * sterm_sem I (f1 fid1 vid1) (sol s) =\n    x' *\n    sterm_sem I (f1 fid1 vid1)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)", "using sterm_eq_vid1[of s]"], ["proof (prove)\nusing this:\n  sterm_sem I (f1 fid1 vid1) (sol s) =\n  sterm_sem I (f1 fid1 vid1)\n   (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n\ngoal (1 subgoal):\n 1. x' * sterm_sem I (f1 fid1 vid1) (sol s) =\n    x' *\n    sterm_sem I (f1 fid1 vid1)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>xa. xa * sterm_sem I (f1 fid1 vid1) (sol ?s13)) =\n  (\\<lambda>xa.\n      xa *\n      sterm_sem I (f1 fid1 vid1)\n       (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s13 else sol ?s13 $ i))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have inner_deriv:\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow>\n   ((\\<lambda>t. \\<chi> i. if i = vid2 then ll_new.flow 0 r t else sol t $ i) has_derivative (\\<lambda>xa. (\\<chi> i. xa * (if i = vid1 then sterm_sem I (f1 fid1 vid1) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i) else\n                                         if i = vid2 then sterm_sem I (Plus (Times (f1 fid2 vid1) (trm.Var vid2)) (f1 fid3 vid1)) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i) else 0))))\n                                         (at s within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>t.\n            \\<chi>i.\n               if i = vid2 then ll_new.flow 0 r t\n               else sol t $ i) has_derivative\n        (\\<lambda>xa.\n            \\<chi>i.\n               xa *\n               (if i = vid1\n                then sterm_sem I (f1 fid1 vid1)\n                      (\\<chi>i.\n                          if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                else if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           (\\<chi>i.\n                               if i = vid2 then ll_new.flow 0 r s\n                               else sol s $ i)\n                     else 0)))\n        (at s within {0..t})", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>t.\n         \\<chi>i.\n            if i = vid2 then ll_new.flow 0 r t\n            else sol t $ i) has_derivative\n     (\\<lambda>xa.\n         \\<chi>i.\n            xa *\n            (if i = vid1\n             then sterm_sem I (f1 fid1 vid1)\n                   (\\<chi>i.\n                       if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n             else if i = vid2\n                  then sterm_sem I\n                        (Plus (Times (f1 fid2 vid1) (Var vid2))\n                          (f1 fid3 vid1))\n                        (\\<chi>i.\n                            if i = vid2 then ll_new.flow 0 r s\n                            else sol s $ i)\n                  else 0)))\n     (at s within {0..t})", "apply(rule has_derivative_vec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       s \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>t.\n            if i = vid2 then ll_new.flow 0 r t\n            else sol t $ i) has_derivative\n        (\\<lambda>xa.\n            xa *\n            (if i = vid1\n             then sterm_sem I (f1 fid1 vid1)\n                   (\\<chi>i.\n                       if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n             else if i = vid2\n                  then sterm_sem I\n                        (Plus (Times (f1 fid2 vid1) (Var vid2))\n                          (f1 fid3 vid1))\n                        (\\<chi>i.\n                            if i = vid2 then ll_new.flow 0 r s\n                            else sol s $ i)\n                  else 0)))\n        (at s within {0..t})", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>t.\n         if i = vid2 then ll_new.flow 0 r t else sol t $ i) has_derivative\n     (\\<lambda>xa.\n         xa *\n         (if i = vid1\n          then sterm_sem I (f1 fid1 vid1)\n                (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n          else if i = vid2\n               then sterm_sem I\n                     (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                     (\\<chi>i.\n                         if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n               else 0)))\n     (at s within {0..t})", "apply(cases \"i = vid2\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> {0..t}; i = vid2\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           if i = vid2 then ll_new.flow 0 r t\n                           else sol t $ i) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           (if i = vid1\n                            then sterm_sem I (f1 fid1 vid1)\n                                  (\\<chi>i.\nif i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                            else if i = vid2\n                                 then sterm_sem I\n (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                                 else 0)))\n                       (at s within {0..t})\n 2. \\<lbrakk>s \\<in> {0..t}; i \\<noteq> vid2\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           if i = vid2 then ll_new.flow 0 r t\n                           else sol t $ i) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           (if i = vid1\n                            then sterm_sem I (f1 fid1 vid1)\n                                  (\\<chi>i.\nif i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                            else if i = vid2\n                                 then sterm_sem I\n (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                                 else 0)))\n                       (at s within {0..t})", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> {0..t}; i = vid2\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           if i = vid2 then ll_new.flow 0 r t\n                           else sol t $ i) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           (if i = vid1\n                            then sterm_sem I (f1 fid1 vid1)\n                                  (\\<chi>i.\nif i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                            else if i = vid2\n                                 then sterm_sem I\n (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                                 else 0)))\n                       (at s within {0..t})", "using vne12"], ["proof (prove)\nusing this:\n  vid1 \\<noteq> vid2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> {0..t}; i = vid2\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           if i = vid2 then ll_new.flow 0 r t\n                           else sol t $ i) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           (if i = vid1\n                            then sterm_sem I (f1 fid1 vid1)\n                                  (\\<chi>i.\nif i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                            else if i = vid2\n                                 then sterm_sem I\n (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                                 else 0)))\n                       (at s within {0..t})", "using new_sol_deriv[of s]"], ["proof (prove)\nusing this:\n  vid1 \\<noteq> vid2\n  s \\<in> {0..t} \\<Longrightarrow>\n  (ll_new.flow 0 r has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       (ll_new.flow 0 r s * sterm_sem I (f1 fid2 vid1) (sol s) +\n        sterm_sem I (f1 fid3 vid1) (sol s))))\n   (at s within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> {0..t}; i = vid2\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           if i = vid2 then ll_new.flow 0 r t\n                           else sol t $ i) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           (if i = vid1\n                            then sterm_sem I (f1 fid1 vid1)\n                                  (\\<chi>i.\nif i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                            else if i = vid2\n                                 then sterm_sem I\n (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                                 else 0)))\n                       (at s within {0..t})", "using y_component_ode_eq"], ["proof (prove)\nusing this:\n  vid1 \\<noteq> vid2\n  s \\<in> {0..t} \\<Longrightarrow>\n  (ll_new.flow 0 r has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       (ll_new.flow 0 r s * sterm_sem I (f1 fid2 vid1) (sol s) +\n        sterm_sem I (f1 fid3 vid1) (sol s))))\n   (at s within {0..t})\n  ?s13 \\<in> {0..t} \\<Longrightarrow>\n  (\\<lambda>xa.\n      xa *\n      (ll_new.flow 0 r ?s13 * sterm_sem I (f1 fid2 vid1) (sol ?s13) +\n       sterm_sem I (f1 fid3 vid1) (sol ?s13))) =\n  (\\<lambda>xa.\n      xa *\n      (sterm_sem I (f1 fid2 vid1)\n        (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s13 else sol ?s13 $ i) *\n       ll_new.flow 0 r ?s13 +\n       sterm_sem I (f1 fid3 vid1)\n        (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s13 else sol ?s13 $ i)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> {0..t}; i = vid2\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           if i = vid2 then ll_new.flow 0 r t\n                           else sol t $ i) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           (if i = vid1\n                            then sterm_sem I (f1 fid1 vid1)\n                                  (\\<chi>i.\nif i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                            else if i = vid2\n                                 then sterm_sem I\n (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                                 else 0)))\n                       (at s within {0..t})", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> {0..t}; i \\<noteq> vid2\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           if i = vid2 then ll_new.flow 0 r t\n                           else sol t $ i) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           (if i = vid1\n                            then sterm_sem I (f1 fid1 vid1)\n                                  (\\<chi>i.\nif i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                            else if i = vid2\n                                 then sterm_sem I\n (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                                 else 0)))\n                       (at s within {0..t})", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> {0..t}; i \\<noteq> vid2\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           if i = vid2 then ll_new.flow 0 r t\n                           else sol t $ i) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           (if i = vid1\n                            then sterm_sem I (f1 fid1 vid1)\n                                  (\\<chi>i.\nif i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                            else if i = vid2\n                                 then sterm_sem I\n (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                                 else 0)))\n                       (at s within {0..t})", "apply(cases \"i = vid1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> {0..t}; i \\<noteq> vid2; i = vid1\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           if i = vid2 then ll_new.flow 0 r t\n                           else sol t $ i) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           (if i = vid1\n                            then sterm_sem I (f1 fid1 vid1)\n                                  (\\<chi>i.\nif i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                            else if i = vid2\n                                 then sterm_sem I\n (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                                 else 0)))\n                       (at s within {0..t})\n 2. \\<lbrakk>s \\<in> {0..t}; i \\<noteq> vid2; i \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           if i = vid2 then ll_new.flow 0 r t\n                           else sol t $ i) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           (if i = vid1\n                            then sterm_sem I (f1 fid1 vid1)\n                                  (\\<chi>i.\nif i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                            else if i = vid2\n                                 then sterm_sem I\n (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                                 else 0)))\n                       (at s within {0..t})", "using sol_proj_deriv_vid1[of s] vid1_deriv_eq[of s] sol_proj_deriv_other[of s i]"], ["proof (prove)\nusing this:\n  s \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t. sol t $ vid1) has_derivative\n   (\\<lambda>xa. xa * sterm_sem I (f1 fid1 vid1) (sol s)))\n   (at s within {0..t})\n  (\\<lambda>xa. xa * sterm_sem I (f1 fid1 vid1) (sol s)) =\n  (\\<lambda>xa.\n      xa *\n      sterm_sem I (f1 fid1 vid1)\n       (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))\n  \\<lbrakk>s \\<in> {0..t}; i \\<noteq> vid1\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>t. sol t $ i) has_derivative\n                     (\\<lambda>xa. 0))\n                     (at s within {0..t})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>s \\<in> {0..t}; i \\<noteq> vid2; i = vid1\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           if i = vid2 then ll_new.flow 0 r t\n                           else sol t $ i) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           (if i = vid1\n                            then sterm_sem I (f1 fid1 vid1)\n                                  (\\<chi>i.\nif i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                            else if i = vid2\n                                 then sterm_sem I\n (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                                 else 0)))\n                       (at s within {0..t})\n 2. \\<lbrakk>s \\<in> {0..t}; i \\<noteq> vid2; i \\<noteq> vid1\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>t.\n                           if i = vid2 then ll_new.flow 0 r t\n                           else sol t $ i) has_derivative\n                       (\\<lambda>xa.\n                           xa *\n                           (if i = vid1\n                            then sterm_sem I (f1 fid1 vid1)\n                                  (\\<chi>i.\nif i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                            else if i = vid2\n                                 then sterm_sem I\n (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                                 else 0)))\n                       (at s within {0..t})", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?s13 \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t.\n       \\<chi>i.\n          if i = vid2 then ll_new.flow 0 r t else sol t $ i) has_derivative\n   (\\<lambda>xa.\n       \\<chi>i.\n          xa *\n          (if i = vid1\n           then sterm_sem I (f1 fid1 vid1)\n                 (\\<chi>i.\n                     if i = vid2 then ll_new.flow 0 r ?s13\n                     else sol ?s13 $ i)\n           else if i = vid2\n                then sterm_sem I\n                      (Plus (Times (f1 fid2 vid1) (Var vid2))\n                        (f1 fid3 vid1))\n                      (\\<chi>i.\n                          if i = vid2 then ll_new.flow 0 r ?s13\n                          else sol ?s13 $ i)\n                else 0)))\n   (at ?s13 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have deriv_eta:\"\\<And>s. (\\<lambda>xa. xa *\\<^sub>R ((\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i) else 0) +\n               (\\<chi> i. if i = vid2\n                     then sterm_sem I (Plus (Times (f1 fid2 vid1) (trm.Var vid2)) (f1 fid3 vid1))\n                           (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                     else 0)))\n                     = (\\<lambda>xa. (\\<chi> i. xa * (if i = vid1 then sterm_sem I (f1 fid1 vid1) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i) else\n                                         if i = vid2 then sterm_sem I (Plus (Times (f1 fid2 vid1) (trm.Var vid2)) (f1 fid3 vid1)) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i) else 0))) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       (\\<lambda>xa.\n           xa *\\<^sub>R\n           ((\\<chi>i.\n                if i = vid1\n                then sterm_sem I (f1 fid1 vid1)\n                      (\\<chi>i.\n                          if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                else 0) +\n            (\\<chi>i.\n                if i = vid2\n                then sterm_sem I\n                      (Plus (Times (f1 fid2 vid1) (Var vid2))\n                        (f1 fid3 vid1))\n                      (\\<chi>i.\n                          if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                else 0))) =\n       (\\<lambda>xa.\n           \\<chi>i.\n              xa *\n              (if i = vid1\n               then sterm_sem I (f1 fid1 vid1)\n                     (\\<chi>i.\n                         if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n               else if i = vid2\n                    then sterm_sem I\n                          (Plus (Times (f1 fid2 vid1) (Var vid2))\n                            (f1 fid3 vid1))\n                          (\\<chi>i.\n                              if i = vid2 then ll_new.flow 0 r s\n                              else sol s $ i)\n                    else 0))", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>xa.\n        xa *\\<^sub>R\n        ((\\<chi>i.\n             if i = vid1\n             then sterm_sem I (f1 fid1 vid1)\n                   (\\<chi>i.\n                       if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n             else 0) +\n         (\\<chi>i.\n             if i = vid2\n             then sterm_sem I\n                   (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                   (\\<chi>i.\n                       if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n             else 0))) =\n    (\\<lambda>xa.\n        \\<chi>i.\n           xa *\n           (if i = vid1\n            then sterm_sem I (f1 fid1 vid1)\n                  (\\<chi>i.\n                      if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n            else if i = vid2\n                 then sterm_sem I\n                       (Plus (Times (f1 fid2 vid1) (Var vid2))\n                         (f1 fid3 vid1))\n                       (\\<chi>i.\n                           if i = vid2 then ll_new.flow 0 r s\n                           else sol s $ i)\n                 else 0))", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa *\\<^sub>R\n       ((\\<chi>i.\n            if i = vid1\n            then sterm_sem I (f1 fid1 vid1)\n                  (\\<chi>i.\n                      if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n            else 0) +\n        (\\<chi>i.\n            if i = vid2\n            then sterm_sem I\n                  (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                  (\\<chi>i.\n                      if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n            else 0)) =\n       (\\<chi>i.\n           xa *\n           (if i = vid1\n            then sterm_sem I (f1 fid1 vid1)\n                  (\\<chi>i.\n                      if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n            else if i = vid2\n                 then sterm_sem I\n                       (Plus (Times (f1 fid2 vid1) (Var vid2))\n                         (f1 fid3 vid1))\n                       (\\<chi>i.\n                           if i = vid2 then ll_new.flow 0 r s\n                           else sol s $ i)\n                 else 0))", "apply(rule vec_extensionality)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa i.\n       (xa *\\<^sub>R\n        ((\\<chi>i.\n             if i = vid1\n             then sterm_sem I (f1 fid1 vid1)\n                   (\\<chi>i.\n                       if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n             else 0) +\n         (\\<chi>i.\n             if i = vid2\n             then sterm_sem I\n                   (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                   (\\<chi>i.\n                       if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n             else 0))) $\n       i =\n       (\\<chi>i.\n           xa *\n           (if i = vid1\n            then sterm_sem I (f1 fid1 vid1)\n                  (\\<chi>i.\n                      if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n            else if i = vid2\n                 then sterm_sem I\n                       (Plus (Times (f1 fid2 vid1) (Var vid2))\n                         (f1 fid3 vid1))\n                       (\\<chi>i.\n                           if i = vid2 then ll_new.flow 0 r s\n                           else sol s $ i)\n                 else 0)) $\n       i", "using vne12"], ["proof (prove)\nusing this:\n  vid1 \\<noteq> vid2\n\ngoal (1 subgoal):\n 1. \\<And>xa i.\n       (xa *\\<^sub>R\n        ((\\<chi>i.\n             if i = vid1\n             then sterm_sem I (f1 fid1 vid1)\n                   (\\<chi>i.\n                       if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n             else 0) +\n         (\\<chi>i.\n             if i = vid2\n             then sterm_sem I\n                   (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                   (\\<chi>i.\n                       if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n             else 0))) $\n       i =\n       (\\<chi>i.\n           xa *\n           (if i = vid1\n            then sterm_sem I (f1 fid1 vid1)\n                  (\\<chi>i.\n                      if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n            else if i = vid2\n                 then sterm_sem I\n                       (Plus (Times (f1 fid2 vid1) (Var vid2))\n                         (f1 fid3 vid1))\n                       (\\<chi>i.\n                           if i = vid2 then ll_new.flow 0 r s\n                           else sol s $ i)\n                 else 0)) $\n       i", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>xa.\n      xa *\\<^sub>R\n      ((\\<chi>i.\n           if i = vid1\n           then sterm_sem I (f1 fid1 vid1)\n                 (\\<chi>i.\n                     if i = vid2 then ll_new.flow 0 r ?s13\n                     else sol ?s13 $ i)\n           else 0) +\n       (\\<chi>i.\n           if i = vid2\n           then sterm_sem I\n                 (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                 (\\<chi>i.\n                     if i = vid2 then ll_new.flow 0 r ?s13\n                     else sol ?s13 $ i)\n           else 0))) =\n  (\\<lambda>xa.\n      \\<chi>i.\n         xa *\n         (if i = vid1\n          then sterm_sem I (f1 fid1 vid1)\n                (\\<chi>i.\n                    if i = vid2 then ll_new.flow 0 r ?s13 else sol ?s13 $ i)\n          else if i = vid2\n               then sterm_sem I\n                     (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                     (\\<chi>i.\n                         if i = vid2 then ll_new.flow 0 r ?s13\n                         else sol ?s13 $ i)\n               else 0))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sol'_deriv:\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow>\n   ((\\<lambda>t. \\<chi> i. if i = vid2 then ll_new.flow 0 r t else sol t $ i) has_derivative\n    (\\<lambda>xa. xa *\\<^sub>R ((\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i) else 0) +\n                  (\\<chi> i. if i = vid2\n                        then sterm_sem I (Plus (Times (f1 fid2 vid1) (trm.Var vid2)) (f1 fid3 vid1))\n                              (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                        else 0))))\n    (at s within {0..t})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       s \\<in> {0..t} \\<Longrightarrow>\n       ((\\<lambda>t.\n            \\<chi>i.\n               if i = vid2 then ll_new.flow 0 r t\n               else sol t $ i) has_derivative\n        (\\<lambda>xa.\n            xa *\\<^sub>R\n            ((\\<chi>i.\n                 if i = vid1\n                 then sterm_sem I (f1 fid1 vid1)\n                       (\\<chi>i.\n                           if i = vid2 then ll_new.flow 0 r s\n                           else sol s $ i)\n                 else 0) +\n             (\\<chi>i.\n                 if i = vid2\n                 then sterm_sem I\n                       (Plus (Times (f1 fid2 vid1) (Var vid2))\n                         (f1 fid3 vid1))\n                       (\\<chi>i.\n                           if i = vid2 then ll_new.flow 0 r s\n                           else sol s $ i)\n                 else 0))))\n        (at s within {0..t})", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>t.\n         \\<chi>i.\n            if i = vid2 then ll_new.flow 0 r t\n            else sol t $ i) has_derivative\n     (\\<lambda>xa.\n         xa *\\<^sub>R\n         ((\\<chi>i.\n              if i = vid1\n              then sterm_sem I (f1 fid1 vid1)\n                    (\\<chi>i.\n                        if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n              else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    (\\<chi>i.\n                        if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n              else 0))))\n     (at s within {0..t})", "using inner_deriv[of s] deriv_eta[of s]"], ["proof (prove)\nusing this:\n  s \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t.\n       \\<chi>i.\n          if i = vid2 then ll_new.flow 0 r t else sol t $ i) has_derivative\n   (\\<lambda>xa.\n       \\<chi>i.\n          xa *\n          (if i = vid1\n           then sterm_sem I (f1 fid1 vid1)\n                 (\\<chi>i.\n                     if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n           else if i = vid2\n                then sterm_sem I\n                      (Plus (Times (f1 fid2 vid1) (Var vid2))\n                        (f1 fid3 vid1))\n                      (\\<chi>i.\n                          if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n                else 0)))\n   (at s within {0..t})\n  (\\<lambda>xa.\n      xa *\\<^sub>R\n      ((\\<chi>i.\n           if i = vid1\n           then sterm_sem I (f1 fid1 vid1)\n                 (\\<chi>i.\n                     if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n           else 0) +\n       (\\<chi>i.\n           if i = vid2\n           then sterm_sem I\n                 (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                 (\\<chi>i.\n                     if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n           else 0))) =\n  (\\<lambda>xa.\n      \\<chi>i.\n         xa *\n         (if i = vid1\n          then sterm_sem I (f1 fid1 vid1)\n                (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n          else if i = vid2\n               then sterm_sem I\n                     (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                     (\\<chi>i.\n                         if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n               else 0))\n\ngoal (1 subgoal):\n 1. s \\<in> {0..t} \\<Longrightarrow>\n    ((\\<lambda>t.\n         \\<chi>i.\n            if i = vid2 then ll_new.flow 0 r t\n            else sol t $ i) has_derivative\n     (\\<lambda>xa.\n         xa *\\<^sub>R\n         ((\\<chi>i.\n              if i = vid1\n              then sterm_sem I (f1 fid1 vid1)\n                    (\\<chi>i.\n                        if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n              else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    (\\<chi>i.\n                        if i = vid2 then ll_new.flow 0 r s else sol s $ i)\n              else 0))))\n     (at s within {0..t})", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?s13 \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t.\n       \\<chi>i.\n          if i = vid2 then ll_new.flow 0 r t else sol t $ i) has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       ((\\<chi>i.\n            if i = vid1\n            then sterm_sem I (f1 fid1 vid1)\n                  (\\<chi>i.\n                      if i = vid2 then ll_new.flow 0 r ?s13\n                      else sol ?s13 $ i)\n            else 0) +\n        (\\<chi>i.\n            if i = vid2\n            then sterm_sem I\n                  (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                  (\\<chi>i.\n                      if i = vid2 then ll_new.flow 0 r ?s13\n                      else sol ?s13 $ i)\n            else 0))))\n   (at ?s13 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have FVT:\"\\<And>i. FVT (if i = vid1 then trm.Var vid1 else Const 0) \\<subseteq> {Inl vid1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       FVT (if i = vid1 then Var vid1 else Const 0) \\<subseteq> {Inl vid1}", "by auto"], ["proof (state)\nthis:\n  FVT (if ?i13 = vid1 then Var vid1 else Const 0) \\<subseteq> {Inl vid1}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have agree:\"\\<And>s. Vagree (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (sol s)) (mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                  (OSing vid2\n                    (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                      ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n          (\\<chi> y. if vid2 = y then r else fst (a, b) $ y, b) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)) {Inl vid1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       Vagree\n        (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (sol s))\n        (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n          (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))\n        {Inl vid1}", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (sol s))\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n       (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))\n     {Inl vid1}", "using mk_v_agree [of \"I\" \"(OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\" \"(a, b)\" \"(sol s)\"]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (sol s))\n   (a, b)\n   (- semBV I\n       (OSing vid1\n         ($f fid1\n           (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))) \\<and>\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (sol s))\n   (mk_xode I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (sol s))\n   (semBV I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (sol s))\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n       (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))\n     {Inl vid1}", "using mk_v_agree [of I \"(OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                  (OSing vid2\n                    (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                      ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\" \"(\\<chi> y. if vid2 = y then r else fst (a, b) $ y, b)\" \"(\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)\"]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (sol s))\n   (a, b)\n   (- semBV I\n       (OSing vid1\n         ($f fid1\n           (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))) \\<and>\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (sol s))\n   (mk_xode I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (sol s))\n   (semBV I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))\n   (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n   (- semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i.\n                   if i = vid1 then Var vid1 else Const 0)))))) \\<and>\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))\n   (mk_xode I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))\n   (semBV I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3\n             (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))))\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (sol s))\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n       (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))\n     {Inl vid1}", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i\n       \\<in> - semBV I\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i.\n                        if i = vid1 then Var vid1\n                        else Const 0))) \\<longrightarrow>\n       fst (mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol s)) $\n       i =\n       fst (a, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i\n       \\<in> - semBV I\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i.\n                        if i = vid1 then Var vid1\n                        else Const 0))) \\<longrightarrow>\n       snd (mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol s)) $\n       i =\n       snd (a, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i\n      \\<in> semBV I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i.\n                     if i = vid1 then Var vid1\n                     else Const 0))) \\<longrightarrow>\n      fst (mk_v I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (a, b) (sol s)) $\n      i =\n      fst (mk_xode I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (sol s)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i\n      \\<in> semBV I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i.\n                     if i = vid1 then Var vid1\n                     else Const 0))) \\<longrightarrow>\n      snd (mk_v I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (a, b) (sol s)) $\n      i =\n      snd (mk_xode I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (sol s)) $\n      i)\n  ((\\<forall>i.\n       Inl i\n       \\<in> - semBV I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (OSing vid2\n                    (Plus\n                      (Times\n                        ($f fid2\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0))\n                        (Var vid2))\n                      ($f fid3\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1\n                            else Const 0))))) \\<longrightarrow>\n       fst (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)) $\n       i =\n       fst (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i\n       \\<in> - semBV I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (OSing vid2\n                    (Plus\n                      (Times\n                        ($f fid2\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0))\n                        (Var vid2))\n                      ($f fid3\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1\n                            else Const 0))))) \\<longrightarrow>\n       snd (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)) $\n       i =\n       snd (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i\n      \\<in> semBV I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1\n                         else Const 0))))) \\<longrightarrow>\n      fst (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)) $\n      i =\n      fst (mk_xode I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i\n      \\<in> semBV I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1\n                         else Const 0))))) \\<longrightarrow>\n      snd (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)) $\n      i =\n      snd (mk_xode I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)) $\n      i)\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i \\<in> {Inl vid1} \\<longrightarrow>\n        fst (mk_v I\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (a, b) (sol s)) $\n        i =\n        fst (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n              (\\<chi>i.\n                  if i = vid2 then ll_new.flow 0 r s else sol s $ i)) $\n        i) \\<and>\n    (\\<forall>i.\n        Inr i \\<in> {Inl vid1} \\<longrightarrow>\n        snd (mk_v I\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (a, b) (sol s)) $\n        i =\n        snd (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n              (\\<chi>i.\n                  if i = vid2 then ll_new.flow 0 r s else sol s $ i)) $\n        i)", "using vne12"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i\n       \\<in> - semBV I\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i.\n                        if i = vid1 then Var vid1\n                        else Const 0))) \\<longrightarrow>\n       fst (mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol s)) $\n       i =\n       fst (a, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i\n       \\<in> - semBV I\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i.\n                        if i = vid1 then Var vid1\n                        else Const 0))) \\<longrightarrow>\n       snd (mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol s)) $\n       i =\n       snd (a, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i\n      \\<in> semBV I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i.\n                     if i = vid1 then Var vid1\n                     else Const 0))) \\<longrightarrow>\n      fst (mk_v I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (a, b) (sol s)) $\n      i =\n      fst (mk_xode I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (sol s)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i\n      \\<in> semBV I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i.\n                     if i = vid1 then Var vid1\n                     else Const 0))) \\<longrightarrow>\n      snd (mk_v I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (a, b) (sol s)) $\n      i =\n      snd (mk_xode I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (sol s)) $\n      i)\n  ((\\<forall>i.\n       Inl i\n       \\<in> - semBV I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (OSing vid2\n                    (Plus\n                      (Times\n                        ($f fid2\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0))\n                        (Var vid2))\n                      ($f fid3\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1\n                            else Const 0))))) \\<longrightarrow>\n       fst (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)) $\n       i =\n       fst (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i\n       \\<in> - semBV I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (OSing vid2\n                    (Plus\n                      (Times\n                        ($f fid2\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0))\n                        (Var vid2))\n                      ($f fid3\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1\n                            else Const 0))))) \\<longrightarrow>\n       snd (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)) $\n       i =\n       snd (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i\n      \\<in> semBV I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1\n                         else Const 0))))) \\<longrightarrow>\n      fst (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)) $\n      i =\n      fst (mk_xode I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i\n      \\<in> semBV I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1\n                         else Const 0))))) \\<longrightarrow>\n      snd (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)) $\n      i =\n      snd (mk_xode I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)) $\n      i)\n  vid1 \\<noteq> vid2\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i \\<in> {Inl vid1} \\<longrightarrow>\n        fst (mk_v I\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (a, b) (sol s)) $\n        i =\n        fst (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n              (\\<chi>i.\n                  if i = vid2 then ll_new.flow 0 r s else sol s $ i)) $\n        i) \\<and>\n    (\\<forall>i.\n        Inr i \\<in> {Inl vid1} \\<longrightarrow>\n        snd (mk_v I\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (a, b) (sol s)) $\n        i =\n        snd (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n              (\\<chi>i.\n                  if i = vid2 then ll_new.flow 0 r s else sol s $ i)) $\n        i)", "by simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (sol ?s14))\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s14 else sol ?s14 $ i))\n   {Inl vid1}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have agree':\"\\<And>s i. Vagree (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (sol s)) (mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                  (OSing vid2\n                    (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                      ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n          (\\<chi> y. if vid2 = y then r else fst (a, b) $ y, b) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)) (FVT (if i = vid1 then trm.Var vid1 else Const 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s i.\n       Vagree\n        (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (sol s))\n        (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n          (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))\n        (FVT (if i = vid1 then Var vid1 else Const 0))", "subgoal for s i"], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (sol s))\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n       (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))\n     (FVT (if i = vid1 then Var vid1 else Const 0))", "using agree_sub[OF FVT[of i] agree[of s]]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (sol s))\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))\n   (FVT (if i = vid1 then Var vid1 else Const 0))\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (sol s))\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n       (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))\n     (FVT (if i = vid1 then Var vid1 else Const 0))", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (sol ?s14))\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s14 else sol ?s14 $ i))\n   (FVT (if ?i14 = vid1 then Var vid1 else Const 0))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have safe:\"\\<And>i. dsafe (if i = vid1 then trm.Var vid1 else Const 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. dsafe (if i = vid1 then Var vid1 else Const 0)", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. dsafe (if i = vid1 then Var vid1 else Const 0)", "apply(cases \"i = vid1\", auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  dsafe (if ?i15 = vid1 then Var vid1 else Const 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have dterm_sem_eq:\"\\<And>s i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (sol s)) \n       = dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n       (mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                  (OSing vid2\n                    (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                      ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n          (\\<chi> y. if vid2 = y then r else fst (a, b) $ y, b) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (sol s)) =\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n          (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))", "subgoal for s i"], ["proof (prove)\ngoal (1 subgoal):\n 1. dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n     (mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (sol s)) =\n    dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n       (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))", "using coincidence_dterm[OF safe[of i] agree'[of s i], of I]"], ["proof (prove)\nusing this:\n  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (sol s)) =\n  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))\n\ngoal (1 subgoal):\n 1. dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n     (mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (sol s)) =\n    dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n       (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  dterm_sem I (if ?i16 = vid1 then Var vid1 else Const 0)\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (sol ?s16)) =\n  dterm_sem I (if ?i16 = vid1 then Var vid1 else Const 0)\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r ?s16 else sol ?s16 $ i))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have dterm_vec_eq:\"\\<And>s. (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (sol s)))\n       = (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n       (mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                  (OSing vid2\n                    (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                      ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n          (\\<chi> y. if vid2 = y then r else fst (a, b) $ y, b) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       (\\<chi>i.\n           dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (mk_v I\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (a, b) (sol s))) =\n       (\\<chi>i.\n           dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n              (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)))", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (mk_v I\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (a, b) (sol s))) =\n    (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (OSing vid2\n               (Plus\n                 (Times\n                   ($f fid2\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                   (Var vid2))\n                 ($f fid3\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n           (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n           (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)))", "apply(rule vec_extensionality)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<chi>i.\n           dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (mk_v I\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (a, b) (sol s))) $\n       i =\n       (\\<chi>i.\n           dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n              (\\<chi>i.\n                  if i = vid2 then ll_new.flow 0 r s else sol s $ i))) $\n       i", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (mk_v I\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (a, b) (sol s))) $\n    i =\n    (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (OSing vid2\n               (Plus\n                 (Times\n                   ($f fid2\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                   (Var vid2))\n                 ($f fid3\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n           (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n           (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))) $\n    i", "using dterm_sem_eq[of i s]"], ["proof (prove)\nusing this:\n  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (sol s)) =\n  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))\n\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (mk_v I\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (a, b) (sol s))) $\n    i =\n    (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (OSing vid2\n               (Plus\n                 (Times\n                   ($f fid2\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                   (Var vid2))\n                 ($f fid3\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n           (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n           (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i))) $\n    i", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<chi>i.\n      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n       (mk_v I\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (a, b) (sol ?s16))) =\n  (\\<chi>i.\n      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (OSing vid2\n             (Plus\n               (Times\n                 ($f fid2\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                 (Var vid2))\n               ($f fid3\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n         (\\<chi>i.\n             if i = vid2 then ll_new.flow 0 r ?s16 else sol ?s16 $ i)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have pred_same:\"\\<And>s. s \\<in> {0..t} \\<Longrightarrow> Predicates I vid1\n        (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n               (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (sol s))) \\<Longrightarrow>\nPredicates I vid1\n (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n        (mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                  (OSing vid2\n                    (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                      ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n          (\\<chi> y. if vid2 = y then r else fst (a, b) $ y, b) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>s \\<in> {0..t};\n        Predicates I vid1\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n              (mk_v I\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (a, b) (sol s)))\\<rbrakk>\n       \\<Longrightarrow> Predicates I vid1\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then Var vid1 else Const 0)\n                               (mk_v I\n                                 (OProd\n                                   (OSing vid1\n                                     ($f fid1\n (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                                   (OSing vid2\n                                     (Plus\n (Times ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (Var vid2))\n ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                                 (\\<chi>y.\n                                     if vid2 = y then r else fst (a, b) $ y,\n                                  b)\n                                 (\\<chi>i.\n                                     if i = vid2 then ll_new.flow 0 r s\n                                     else sol s $ i)))", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> {0..t};\n     Predicates I vid1\n      (\\<chi>i.\n          dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol s)))\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid1\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then r else fst (a, b) $ y,\n                               b)\n                              (\\<chi>i.\n                                  if i = vid2 then ll_new.flow 0 r s\n                                  else sol s $ i)))", "using dterm_vec_eq[of s]"], ["proof (prove)\nusing this:\n  (\\<chi>i.\n      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n       (mk_v I\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (a, b) (sol s))) =\n  (\\<chi>i.\n      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (OSing vid2\n             (Plus\n               (Times\n                 ($f fid2\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                 (Var vid2))\n               ($f fid3\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n         (\\<chi>i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> {0..t};\n     Predicates I vid1\n      (\\<chi>i.\n          dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n           (mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol s)))\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid1\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then r else fst (a, b) $ y,\n                               b)\n                              (\\<chi>i.\n                                  if i = vid2 then ll_new.flow 0 r s\n                                  else sol s $ i)))", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>?s16 \\<in> {0..t};\n   Predicates I vid1\n    (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (mk_v I\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (a, b) (sol ?s16)))\\<rbrakk>\n  \\<Longrightarrow> Predicates I vid1\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (OSing vid2\n                                (Plus\n                                  (Times\n                                    ($f fid2\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                                    (Var vid2))\n                                  ($f fid3\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))))\n                            (\\<chi>y.\n                                if vid2 = y then r else fst (a, b) $ y,\n                             b)\n                            (\\<chi>i.\n                                if i = vid2 then ll_new.flow 0 r ?s16\n                                else sol ?s16 $ i)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sol'_domain:\"\\<And>s. 0 \\<le> s \\<Longrightarrow>\n  s \\<le> t \\<Longrightarrow>\n  Predicates I vid1\n   (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n          (mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                        ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n                        (\\<chi> y. if vid2 = y then r else fst (a, b) $ y, b) (\\<chi> i. if i = vid2 then ll_new.flow 0 r s else sol s $ i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n       \\<Longrightarrow> Predicates I vid1\n                          (\\<chi>i.\n                              dterm_sem I\n                               (if i = vid1 then Var vid1 else Const 0)\n                               (mk_v I\n                                 (OProd\n                                   (OSing vid1\n                                     ($f fid1\n (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                                   (OSing vid2\n                                     (Plus\n (Times ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n   (Var vid2))\n ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                                 (\\<chi>y.\n                                     if vid2 = y then r else fst (a, b) $ y,\n                                  b)\n                                 (\\<chi>i.\n                                     if i = vid2 then ll_new.flow 0 r s\n                                     else sol s $ i)))", "subgoal for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid1\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then r else fst (a, b) $ y,\n                               b)\n                              (\\<chi>i.\n                                  if i = vid2 then ll_new.flow 0 r s\n                                  else sol s $ i)))", "using sol"], ["proof (prove)\nusing this:\n  (sol solves_ode\n   (\\<lambda>a b.\n       \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n   {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (mk_v I\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (a, b) x))}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid1\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then r else fst (a, b) $ y,\n                               b)\n                              (\\<chi>i.\n                                  if i = vid2 then ll_new.flow 0 r s\n                                  else sol s $ i)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid1\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then r else fst (a, b) $ y,\n                               b)\n                              (\\<chi>i.\n                                  if i = vid2 then ll_new.flow 0 r s\n                                  else sol s $ i)))", "apply(drule solves_odeD(2))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> ?t5 \\<in> {0..t}\n 2. \\<lbrakk>0 \\<le> s; s \\<le> t;\n     sol ?t5\n     \\<in> {x. Predicates I vid1\n                (\\<chi>i.\n                    dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                     (mk_v I\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       (a, b) x))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid1\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then r else fst (a, b) $ y,\n                               b)\n                              (\\<chi>i.\n                                  if i = vid2 then ll_new.flow 0 r s\n                                  else sol s $ i)))", "using pred_same[of s]"], ["proof (prove)\nusing this:\n  \\<lbrakk>s \\<in> {0..t};\n   Predicates I vid1\n    (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (mk_v I\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (a, b) (sol s)))\\<rbrakk>\n  \\<Longrightarrow> Predicates I vid1\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (OSing vid2\n                                (Plus\n                                  (Times\n                                    ($f fid2\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                                    (Var vid2))\n                                  ($f fid3\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))))\n                            (\\<chi>y.\n                                if vid2 = y then r else fst (a, b) $ y,\n                             b)\n                            (\\<chi>i.\n                                if i = vid2 then ll_new.flow 0 r s\n                                else sol s $ i)))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 \\<le> s; s \\<le> t\\<rbrakk>\n    \\<Longrightarrow> ?t5 \\<in> {0..t}\n 2. \\<lbrakk>0 \\<le> s; s \\<le> t;\n     sol ?t5\n     \\<in> {x. Predicates I vid1\n                (\\<chi>i.\n                    dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                     (mk_v I\n                       (OSing vid1\n                         ($f fid1\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0)))\n                       (a, b) x))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid1\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OProd\n                                (OSing vid1\n                                  ($f fid1\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))\n                                (OSing vid2\n                                  (Plus\n                                    (Times\n($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)) (Var vid2))\n                                    ($f fid3\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n                              (\\<chi>y.\n                                  if vid2 = y then r else fst (a, b) $ y,\n                               b)\n                              (\\<chi>i.\n                                  if i = vid2 then ll_new.flow 0 r s\n                                  else sol s $ i)))", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>0 \\<le> ?s16; ?s16 \\<le> t\\<rbrakk>\n  \\<Longrightarrow> Predicates I vid1\n                     (\\<chi>i.\n                         dterm_sem I\n                          (if i = vid1 then Var vid1 else Const 0)\n                          (mk_v I\n                            (OProd\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (OSing vid2\n                                (Plus\n                                  (Times\n                                    ($f fid2\n(\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                                    (Var vid2))\n                                  ($f fid3\n                                    (\\<lambda>i.\n  if i = vid1 then Var vid1 else Const 0)))))\n                            (\\<chi>y.\n                                if vid2 = y then r else fst (a, b) $ y,\n                             b)\n                            (\\<chi>i.\n                                if i = vid2 then ll_new.flow 0 r ?s16\n                                else sol ?s16 $ i)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sol':\"(?sol' solves_ode\n (\\<lambda>a b. (\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n        (\\<chi> i. if i = vid2 then sterm_sem I (Plus (Times (f1 fid2 vid1) (trm.Var vid2)) (f1 fid3 vid1)) b else 0)))\n {0..t} {x. Predicates I vid1\n             (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n                    (mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                              (OSing vid2\n                                (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                                  ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n                      (\\<chi> y. if vid2 = y then r else fst (a, b) $ y, b) x))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         \\<chi>i.\n            if i = vid2 then ll_new.flow 0 r t else sol t $ i) solves_ode\n     (\\<lambda>a b.\n         (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n         (\\<chi>i.\n             if i = vid2\n             then sterm_sem I\n                   (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1)) b\n             else 0)))\n     {0..t}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   (OSing vid2\n                     (Plus\n                       (Times\n                         ($f fid2\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0))\n                         (Var vid2))\n                       ($f fid3\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))))\n                 (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) x))}", "apply(rule solves_odeI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((\\<lambda>t.\n         \\<chi>i.\n            if i = vid2 then ll_new.flow 0 r t else sol t $ i) has_vderiv_on\n     (\\<lambda>t.\n         (\\<chi>i.\n             if i = vid1\n             then sterm_sem I (f1 fid1 vid1)\n                   (\\<chi>i.\n                       if i = vid2 then ll_new.flow 0 r t else sol t $ i)\n             else 0) +\n         (\\<chi>i.\n             if i = vid2\n             then sterm_sem I\n                   (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                   (\\<chi>i.\n                       if i = vid2 then ll_new.flow 0 r t else sol t $ i)\n             else 0)))\n     {0..t}\n 2. \\<And>ta.\n       ta \\<in> {0..t} \\<Longrightarrow>\n       (\\<chi>i. if i = vid2 then ll_new.flow 0 r ta else sol ta $ i)\n       \\<in> {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         \\<chi>i.\n            if i = vid2 then ll_new.flow 0 r t else sol t $ i) has_vderiv_on\n     (\\<lambda>t.\n         (\\<chi>i.\n             if i = vid1\n             then sterm_sem I (f1 fid1 vid1)\n                   (\\<chi>i.\n                       if i = vid2 then ll_new.flow 0 r t else sol t $ i)\n             else 0) +\n         (\\<chi>i.\n             if i = vid2\n             then sterm_sem I\n                   (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                   (\\<chi>i.\n                       if i = vid2 then ll_new.flow 0 r t else sol t $ i)\n             else 0)))\n     {0..t}", "unfolding has_vderiv_on_def has_vector_derivative_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{0..t}.\n       ((\\<lambda>t.\n            \\<chi>i.\n               if i = vid2 then ll_new.flow 0 r t\n               else sol t $ i) has_derivative\n        (\\<lambda>xa.\n            xa *\\<^sub>R\n            ((\\<chi>i.\n                 if i = vid1\n                 then sterm_sem I (f1 fid1 vid1)\n                       (\\<chi>i.\n                           if i = vid2 then ll_new.flow 0 r x\n                           else sol x $ i)\n                 else 0) +\n             (\\<chi>i.\n                 if i = vid2\n                 then sterm_sem I\n                       (Plus (Times (f1 fid2 vid1) (Var vid2))\n                         (f1 fid3 vid1))\n                       (\\<chi>i.\n                           if i = vid2 then ll_new.flow 0 r x\n                           else sol x $ i)\n                 else 0))))\n        (at x within {0..t})", "using sol'_deriv"], ["proof (prove)\nusing this:\n  ?s13 \\<in> {0..t} \\<Longrightarrow>\n  ((\\<lambda>t.\n       \\<chi>i.\n          if i = vid2 then ll_new.flow 0 r t else sol t $ i) has_derivative\n   (\\<lambda>xa.\n       xa *\\<^sub>R\n       ((\\<chi>i.\n            if i = vid1\n            then sterm_sem I (f1 fid1 vid1)\n                  (\\<chi>i.\n                      if i = vid2 then ll_new.flow 0 r ?s13\n                      else sol ?s13 $ i)\n            else 0) +\n        (\\<chi>i.\n            if i = vid2\n            then sterm_sem I\n                  (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                  (\\<chi>i.\n                      if i = vid2 then ll_new.flow 0 r ?s13\n                      else sol ?s13 $ i)\n            else 0))))\n   (at ?s13 within {0..t})\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{0..t}.\n       ((\\<lambda>t.\n            \\<chi>i.\n               if i = vid2 then ll_new.flow 0 r t\n               else sol t $ i) has_derivative\n        (\\<lambda>xa.\n            xa *\\<^sub>R\n            ((\\<chi>i.\n                 if i = vid1\n                 then sterm_sem I (f1 fid1 vid1)\n                       (\\<chi>i.\n                           if i = vid2 then ll_new.flow 0 r x\n                           else sol x $ i)\n                 else 0) +\n             (\\<chi>i.\n                 if i = vid2\n                 then sterm_sem I\n                       (Plus (Times (f1 fid2 vid1) (Var vid2))\n                         (f1 fid3 vid1))\n                       (\\<chi>i.\n                           if i = vid2 then ll_new.flow 0 r x\n                           else sol x $ i)\n                 else 0))))\n        (at x within {0..t})", "by auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ta.\n       ta \\<in> {0..t} \\<Longrightarrow>\n       (\\<chi>i. if i = vid2 then ll_new.flow 0 r ta else sol ta $ i)\n       \\<in> {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))}", "by(auto, rule sol'_domain, auto)"], ["proof (state)\nthis:\n  ((\\<lambda>t.\n       \\<chi>i.\n          if i = vid2 then ll_new.flow 0 r t else sol t $ i) solves_ode\n   (\\<lambda>a b.\n       (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n       (\\<chi>i.\n           if i = vid2\n           then sterm_sem I\n                 (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1)) b\n           else 0)))\n   {0..t}\n   {x. Predicates I vid1\n        (\\<chi>i.\n            dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n             (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (OSing vid2\n                   (Plus\n                     (Times\n                       ($f fid2\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0))\n                       (Var vid2))\n                     ($f fid3\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))))\n               (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) x))}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have set_eq:\"{y. y = vid2 \\<or> y = vid1 \\<or> y = vid2 \\<or> y = vid1 \\<or> (\\<exists>x. Inl y \\<in> FVT (if x = vid1 then trm.Var vid1 else Const 0))} = {vid1, vid2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. y = vid2 \\<or>\n        y = vid1 \\<or>\n        y = vid2 \\<or>\n        y = vid1 \\<or>\n        (\\<exists>x.\n            Inl y \\<in> FVT (if x = vid1 then Var vid1 else Const 0))} =\n    {vid1, vid2}", "by auto"], ["proof (state)\nthis:\n  {y. y = vid2 \\<or>\n      y = vid1 \\<or>\n      y = vid2 \\<or>\n      y = vid1 \\<or>\n      (\\<exists>x.\n          Inl y \\<in> FVT (if x = vid1 then Var vid1 else Const 0))} =\n  {vid1, vid2}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have \"VSagree (?sol' 0) (\\<chi> y. if vid2 = y then r else fst (a, b) $ y) {vid1, vid2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. VSagree (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i)\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y) {vid1, vid2}", "using VSA"], ["proof (prove)\nusing this:\n  VSagree (sol 0) a\n   {uu.\n    uu = vid1 \\<or>\n    Inl uu\n    \\<in> Inl `\n          {x. \\<exists>xa.\n                 Inl x\n                 \\<in> FVT (if xa = vid1 then Var vid1 else Const 0)} \\<or>\n    (\\<exists>x. Inl uu \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\n\ngoal (1 subgoal):\n 1. VSagree (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i)\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y) {vid1, vid2}", "unfolding VSagree_def"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>{uu.\n                  uu = vid1 \\<or>\n                  Inl uu\n                  \\<in> Inl `\n                        {x. \\<exists>xa.\n                               Inl x\n                               \\<in> FVT\n(if xa = vid1 then Var vid1 else Const 0)} \\<or>\n                  (\\<exists>x.\n                      Inl uu\n                      \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}.\n     sol 0 $ i = a $ i\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{vid1, vid2}.\n       (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i) $ i =\n       (\\<chi>y. if vid2 = y then r else fst (a, b) $ y) $ i", "by simp"], ["proof (state)\nthis:\n  VSagree (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i)\n   (\\<chi>y. if vid2 = y then r else fst (a, b) $ y) {vid1, vid2}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "then"], ["proof (chain)\npicking this:\n  VSagree (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i)\n   (\\<chi>y. if vid2 = y then r else fst (a, b) $ y) {vid1, vid2}", "have VSA':\" VSagree (?sol' 0) (\\<chi> y. if vid2 = y then r else fst (a, b) $ y)\n       \n {y. y = vid2 \\<or> y = vid1 \\<or> y = vid2 \\<or> y = vid1 \\<or> (\\<exists>x. Inl y \\<in> FVT (if x = vid1 then trm.Var vid1 else Const 0))} \""], ["proof (prove)\nusing this:\n  VSagree (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i)\n   (\\<chi>y. if vid2 = y then r else fst (a, b) $ y) {vid1, vid2}\n\ngoal (1 subgoal):\n 1. VSagree (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i)\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n     {y. y = vid2 \\<or>\n         y = vid1 \\<or>\n         y = vid2 \\<or>\n         y = vid1 \\<or>\n         (\\<exists>x.\n             Inl y \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "by (auto simp add: set_eq)"], ["proof (state)\nthis:\n  VSagree (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i)\n   (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n   {y. y = vid2 \\<or>\n       y = vid1 \\<or>\n       y = vid2 \\<or>\n       y = vid1 \\<or>\n       (\\<exists>x.\n           Inl y \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have bigPre:\"(\\<exists>sol t. (fst ?aaba', snd ?aaba') =\n                    mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                             (OSing vid2\n                               (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                                 ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n                     ((\\<chi> y. if vid2 = y then r else fst (a,b) $ y), b) (sol t) \\<and>\n                    0 \\<le> t \\<and>\n                    (sol solves_ode\n                     (\\<lambda>a b. (\\<chi> i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                            (\\<chi> i. if i = vid2 then sterm_sem I (Plus (Times (f1 fid2 vid1) (trm.Var vid2)) (f1 fid3 vid1)) b else 0)))\n                     {0..t} {x. Predicates I vid1\n                                 (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n                                        (mk_v I (OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                                                  (OSing vid2\n                                                    (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                                                      ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\n                                          ((\\<chi> y. if vid2 = y then r else (fst (a,b)) $ y), b) x))} \\<and>\n                    VSagree (sol 0) (\\<chi> y. if vid2 = y then r else fst (a,b) $ y)\n                     {uu. uu = vid2 \\<or>\n                    uu = vid1 \\<or>\n                    uu = vid2 \\<or>\n                    uu = vid1 \\<or>\n                    Inl uu \\<in> Inl ` ({x. \\<exists>xa. Inl x \\<in> FVT (if xa = vid1 then trm.Var vid1 else Const 0)} \\<union>\n                                     {x. x = vid2 \\<or> (\\<exists>xa. Inl x \\<in> FVT (if xa = vid1 then trm.Var vid1 else Const 0))}) \\<or>\n                    (\\<exists>x. Inl uu \\<in> FVT (if x = vid1 then trm.Var vid1 else Const 0))})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>sola ta.\n       (fst (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n              (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)),\n        snd (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n              (\\<chi>i.\n                  if i = vid2 then ll_new.flow 0 r t else sol t $ i))) =\n       mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (OSing vid2\n            (Plus\n              (Times\n                ($f fid2\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (Var vid2))\n              ($f fid3\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n        (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n        (sola ta) \\<and>\n       0 \\<le> ta \\<and>\n       (sola solves_ode\n        (\\<lambda>a b.\n            (\\<chi>i.\n                if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n            (\\<chi>i.\n                if i = vid2\n                then sterm_sem I\n                      (Plus (Times (f1 fid2 vid1) (Var vid2))\n                        (f1 fid3 vid1))\n                      b\n                else 0)))\n        {0..ta}\n        {x. Predicates I vid1\n             (\\<chi>i.\n                 dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (mk_v I\n                    (OProd\n                      (OSing vid1\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      (OSing vid2\n                        (Plus\n                          (Times\n                            ($f fid2\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (Var vid2))\n                          ($f fid3\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0)))))\n                    (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n                    x))} \\<and>\n       VSagree (sola 0) (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n        {uu.\n         uu = vid2 \\<or>\n         uu = vid1 \\<or>\n         uu = vid2 \\<or>\n         uu = vid1 \\<or>\n         Inl uu\n         \\<in> Inl `\n               ({x. \\<exists>xa.\n                       Inl x\n                       \\<in> FVT (if xa = vid1 then Var vid1\n                                  else Const 0)} \\<union>\n                {x. x = vid2 \\<or>\n                    (\\<exists>xa.\n                        Inl x\n                        \\<in> FVT (if xa = vid1 then Var vid1\n                                   else Const 0))}) \\<or>\n         (\\<exists>x.\n             Inl uu \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "apply(rule exI[where x=\"?sol'\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ta.\n       (fst (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n              (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)),\n        snd (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n              (\\<chi>i.\n                  if i = vid2 then ll_new.flow 0 r t else sol t $ i))) =\n       mk_v I\n        (OProd\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (OSing vid2\n            (Plus\n              (Times\n                ($f fid2\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                (Var vid2))\n              ($f fid3\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n        (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n        (\\<chi>i.\n            if i = vid2 then ll_new.flow 0 r ta else sol ta $ i) \\<and>\n       0 \\<le> ta \\<and>\n       ((\\<lambda>t.\n            \\<chi>i.\n               if i = vid2 then ll_new.flow 0 r t else sol t $ i) solves_ode\n        (\\<lambda>a b.\n            (\\<chi>i.\n                if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n            (\\<chi>i.\n                if i = vid2\n                then sterm_sem I\n                      (Plus (Times (f1 fid2 vid1) (Var vid2))\n                        (f1 fid3 vid1))\n                      b\n                else 0)))\n        {0..ta}\n        {x. Predicates I vid1\n             (\\<chi>i.\n                 dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                  (mk_v I\n                    (OProd\n                      (OSing vid1\n                        ($f fid1\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))\n                      (OSing vid2\n                        (Plus\n                          (Times\n                            ($f fid2\n                              (\\<lambda>i.\n                                  if i = vid1 then Var vid1 else Const 0))\n                            (Var vid2))\n                          ($f fid3\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0)))))\n                    (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n                    x))} \\<and>\n       VSagree (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i)\n        (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n        {uu.\n         uu = vid2 \\<or>\n         uu = vid1 \\<or>\n         uu = vid2 \\<or>\n         uu = vid1 \\<or>\n         Inl uu\n         \\<in> Inl `\n               ({x. \\<exists>xa.\n                       Inl x\n                       \\<in> FVT (if xa = vid1 then Var vid1\n                                  else Const 0)} \\<union>\n                {x. x = vid2 \\<or>\n                    (\\<exists>xa.\n                        Inl x\n                        \\<in> FVT (if xa = vid1 then Var vid1\n                                   else Const 0))}) \\<or>\n         (\\<exists>x.\n             Inl uu \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "apply(rule exI[where x=t])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (OSing vid2\n               (Plus\n                 (Times\n                   ($f fid2\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                   (Var vid2))\n                 ($f fid3\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n           (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n           (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)),\n     snd (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (OSing vid2\n               (Plus\n                 (Times\n                   ($f fid2\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                   (Var vid2))\n                 ($f fid3\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n           (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n           (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))) =\n    mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i) \\<and>\n    0 \\<le> t \\<and>\n    ((\\<lambda>t.\n         \\<chi>i.\n            if i = vid2 then ll_new.flow 0 r t else sol t $ i) solves_ode\n     (\\<lambda>a b.\n         (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n         (\\<chi>i.\n             if i = vid2\n             then sterm_sem I\n                   (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1)) b\n             else 0)))\n     {0..t}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   (OSing vid2\n                     (Plus\n                       (Times\n                         ($f fid2\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0))\n                         (Var vid2))\n                       ($f fid3\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))))\n                 (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n                 x))} \\<and>\n    VSagree (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i)\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n     {uu.\n      uu = vid2 \\<or>\n      uu = vid1 \\<or>\n      uu = vid2 \\<or>\n      uu = vid1 \\<or>\n      Inl uu\n      \\<in> Inl `\n            ({x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<union>\n             {x. x = vid2 \\<or>\n                 (\\<exists>xa.\n                     Inl x\n                     \\<in> FVT (if xa = vid1 then Var vid1\n                                else Const 0))}) \\<or>\n      (\\<exists>x.\n          Inl uu \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (fst (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (OSing vid2\n               (Plus\n                 (Times\n                   ($f fid2\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                   (Var vid2))\n                 ($f fid3\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n           (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n           (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)),\n     snd (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (OSing vid2\n               (Plus\n                 (Times\n                   ($f fid2\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                   (Var vid2))\n                 ($f fid3\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n           (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n           (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))) =\n    mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)\n 2. 0 \\<le> t \\<and>\n    ((\\<lambda>t.\n         \\<chi>i.\n            if i = vid2 then ll_new.flow 0 r t else sol t $ i) solves_ode\n     (\\<lambda>a b.\n         (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n         (\\<chi>i.\n             if i = vid2\n             then sterm_sem I\n                   (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1)) b\n             else 0)))\n     {0..t}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   (OSing vid2\n                     (Plus\n                       (Times\n                         ($f fid2\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0))\n                         (Var vid2))\n                       ($f fid3\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))))\n                 (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n                 x))} \\<and>\n    VSagree (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i)\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n     {uu.\n      uu = vid2 \\<or>\n      uu = vid1 \\<or>\n      uu = vid2 \\<or>\n      uu = vid1 \\<or>\n      Inl uu\n      \\<in> Inl `\n            ({x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<union>\n             {x. x = vid2 \\<or>\n                 (\\<exists>xa.\n                     Inl x\n                     \\<in> FVT (if xa = vid1 then Var vid1\n                                else Const 0))}) \\<or>\n      (\\<exists>x.\n          Inl uu \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (OSing vid2\n               (Plus\n                 (Times\n                   ($f fid2\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                   (Var vid2))\n                 ($f fid3\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n           (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n           (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)),\n     snd (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (OSing vid2\n               (Plus\n                 (Times\n                   ($f fid2\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                   (Var vid2))\n                 ($f fid3\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n           (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n           (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))) =\n    mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)", "by simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> t \\<and>\n    ((\\<lambda>t.\n         \\<chi>i.\n            if i = vid2 then ll_new.flow 0 r t else sol t $ i) solves_ode\n     (\\<lambda>a b.\n         (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n         (\\<chi>i.\n             if i = vid2\n             then sterm_sem I\n                   (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1)) b\n             else 0)))\n     {0..t}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   (OSing vid2\n                     (Plus\n                       (Times\n                         ($f fid2\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0))\n                         (Var vid2))\n                       ($f fid3\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))))\n                 (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n                 x))} \\<and>\n    VSagree (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i)\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n     {uu.\n      uu = vid2 \\<or>\n      uu = vid1 \\<or>\n      uu = vid2 \\<or>\n      uu = vid1 \\<or>\n      Inl uu\n      \\<in> Inl `\n            ({x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<union>\n             {x. x = vid2 \\<or>\n                 (\\<exists>xa.\n                     Inl x\n                     \\<in> FVT (if xa = vid1 then Var vid1\n                                else Const 0))}) \\<or>\n      (\\<exists>x.\n          Inl uu \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. 0 \\<le> t\n 2. ((\\<lambda>t.\n         \\<chi>i.\n            if i = vid2 then ll_new.flow 0 r t else sol t $ i) solves_ode\n     (\\<lambda>a b.\n         (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n         (\\<chi>i.\n             if i = vid2\n             then sterm_sem I\n                   (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1)) b\n             else 0)))\n     {0..t}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   (OSing vid2\n                     (Plus\n                       (Times\n                         ($f fid2\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0))\n                         (Var vid2))\n                       ($f fid3\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))))\n                 (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n                 x))} \\<and>\n    VSagree (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i)\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n     {uu.\n      uu = vid2 \\<or>\n      uu = vid1 \\<or>\n      uu = vid2 \\<or>\n      uu = vid1 \\<or>\n      Inl uu\n      \\<in> Inl `\n            ({x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<union>\n             {x. x = vid2 \\<or>\n                 (\\<exists>xa.\n                     Inl x\n                     \\<in> FVT (if xa = vid1 then Var vid1\n                                else Const 0))}) \\<or>\n      (\\<exists>x.\n          Inl uu \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> t", "by (rule t)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         \\<chi>i.\n            if i = vid2 then ll_new.flow 0 r t else sol t $ i) solves_ode\n     (\\<lambda>a b.\n         (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n         (\\<chi>i.\n             if i = vid2\n             then sterm_sem I\n                   (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1)) b\n             else 0)))\n     {0..t}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   (OSing vid2\n                     (Plus\n                       (Times\n                         ($f fid2\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0))\n                         (Var vid2))\n                       ($f fid3\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))))\n                 (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n                 x))} \\<and>\n    VSagree (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i)\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n     {uu.\n      uu = vid2 \\<or>\n      uu = vid1 \\<or>\n      uu = vid2 \\<or>\n      uu = vid1 \\<or>\n      Inl uu\n      \\<in> Inl `\n            ({x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<union>\n             {x. x = vid2 \\<or>\n                 (\\<exists>xa.\n                     Inl x\n                     \\<in> FVT (if xa = vid1 then Var vid1\n                                else Const 0))}) \\<or>\n      (\\<exists>x.\n          Inl uu \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((\\<lambda>t.\n         \\<chi>i.\n            if i = vid2 then ll_new.flow 0 r t else sol t $ i) solves_ode\n     (\\<lambda>a b.\n         (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n         (\\<chi>i.\n             if i = vid2\n             then sterm_sem I\n                   (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1)) b\n             else 0)))\n     {0..t}\n     {x. Predicates I vid1\n          (\\<chi>i.\n              dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n               (mk_v I\n                 (OProd\n                   (OSing vid1\n                     ($f fid1\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))\n                   (OSing vid2\n                     (Plus\n                       (Times\n                         ($f fid2\n                           (\\<lambda>i.\n                               if i = vid1 then Var vid1 else Const 0))\n                         (Var vid2))\n                       ($f fid3\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0)))))\n                 (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) x))}\n 2. VSagree (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i)\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n     {uu.\n      uu = vid2 \\<or>\n      uu = vid1 \\<or>\n      uu = vid2 \\<or>\n      uu = vid1 \\<or>\n      Inl uu\n      \\<in> Inl `\n            ({x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<union>\n             {x. x = vid2 \\<or>\n                 (\\<exists>xa.\n                     Inl x\n                     \\<in> FVT (if xa = vid1 then Var vid1\n                                else Const 0))}) \\<or>\n      (\\<exists>x.\n          Inl uu \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "apply(rule sol')"], ["proof (prove)\ngoal (1 subgoal):\n 1. VSagree (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i)\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n     {uu.\n      uu = vid2 \\<or>\n      uu = vid1 \\<or>\n      uu = vid2 \\<or>\n      uu = vid1 \\<or>\n      Inl uu\n      \\<in> Inl `\n            ({x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<union>\n             {x. x = vid2 \\<or>\n                 (\\<exists>xa.\n                     Inl x\n                     \\<in> FVT (if xa = vid1 then Var vid1\n                                else Const 0))}) \\<or>\n      (\\<exists>x.\n          Inl uu \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "using VSA'"], ["proof (prove)\nusing this:\n  VSagree (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i)\n   (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n   {y. y = vid2 \\<or>\n       y = vid1 \\<or>\n       y = vid2 \\<or>\n       y = vid1 \\<or>\n       (\\<exists>x.\n           Inl y \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\n\ngoal (1 subgoal):\n 1. VSagree (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i)\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n     {uu.\n      uu = vid2 \\<or>\n      uu = vid1 \\<or>\n      uu = vid2 \\<or>\n      uu = vid1 \\<or>\n      Inl uu\n      \\<in> Inl `\n            ({x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<union>\n             {x. x = vid2 \\<or>\n                 (\\<exists>xa.\n                     Inl x\n                     \\<in> FVT (if xa = vid1 then Var vid1\n                                else Const 0))}) \\<or>\n      (\\<exists>x.\n          Inl uu \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}", "unfolding VSagree_def"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>{y. y = vid2 \\<or>\n                     y = vid1 \\<or>\n                     y = vid2 \\<or>\n                     y = vid1 \\<or>\n                     (\\<exists>x.\n                         Inl y\n                         \\<in> FVT (if x = vid1 then Var vid1\n                                    else Const 0))}.\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i) $ i =\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y) $ i\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{uu.\n                    uu = vid2 \\<or>\n                    uu = vid1 \\<or>\n                    uu = vid2 \\<or>\n                    uu = vid1 \\<or>\n                    Inl uu\n                    \\<in> Inl `\n                          ({x. \\<exists>xa.\n                                  Inl x\n                                  \\<in> FVT\n   (if xa = vid1 then Var vid1 else Const 0)} \\<union>\n                           {x. x = vid2 \\<or>\n                               (\\<exists>xa.\n                                   Inl x\n                                   \\<in> FVT\n    (if xa = vid1 then Var vid1 else Const 0))}) \\<or>\n                    (\\<exists>x.\n                        Inl uu\n                        \\<in> FVT (if x = vid1 then Var vid1\n                                   else Const 0))}.\n       (\\<chi>i. if i = vid2 then ll_new.flow 0 r 0 else sol 0 $ i) $ i =\n       (\\<chi>y. if vid2 = y then r else fst (a, b) $ y) $ i", "by auto"], ["proof (state)\nthis:\n  \\<exists>sola ta.\n     (fst (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)),\n      snd (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))) =\n     mk_v I\n      (OProd\n        (OSing vid1\n          ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n        (OSing vid2\n          (Plus\n            (Times\n              ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n              (Var vid2))\n            ($f fid3\n              (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n      (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) (sola ta) \\<and>\n     0 \\<le> ta \\<and>\n     (sola solves_ode\n      (\\<lambda>a b.\n          (\\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n          (\\<chi>i.\n              if i = vid2\n              then sterm_sem I\n                    (Plus (Times (f1 fid2 vid1) (Var vid2)) (f1 fid3 vid1))\n                    b\n              else 0)))\n      {0..ta}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OProd\n                    (OSing vid1\n                      ($f fid1\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0)))\n                    (OSing vid2\n                      (Plus\n                        (Times\n                          ($f fid2\n                            (\\<lambda>i.\n                                if i = vid1 then Var vid1 else Const 0))\n                          (Var vid2))\n                        ($f fid3\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0)))))\n                  (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n                  x))} \\<and>\n     VSagree (sola 0) (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n      {uu.\n       uu = vid2 \\<or>\n       uu = vid1 \\<or>\n       uu = vid2 \\<or>\n       uu = vid1 \\<or>\n       Inl uu\n       \\<in> Inl `\n             ({x. \\<exists>xa.\n                     Inl x\n                     \\<in> FVT (if xa = vid1 then Var vid1\n                                else Const 0)} \\<union>\n              {x. x = vid2 \\<or>\n                  (\\<exists>xa.\n                      Inl x\n                      \\<in> FVT (if xa = vid1 then Var vid1\n                                 else Const 0))}) \\<or>\n       (\\<exists>x.\n           Inl uu \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have pred_sem:\"Predicates I vid2 (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) ?aaba')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Predicates I vid2\n     (\\<chi>i.\n         dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n          (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)))", "using mp[OF bigEx bigPre]"], ["proof (prove)\nusing this:\n  Predicates I vid2\n   (\\<chi>i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (fst (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (OSing vid2\n                   (Plus\n                     (Times\n                       ($f fid2\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0))\n                       (Var vid2))\n                     ($f fid3\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))))\n               (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n               (\\<chi>i.\n                   if i = vid2 then ll_new.flow 0 r t else sol t $ i)),\n         snd (mk_v I\n               (OProd\n                 (OSing vid1\n                   ($f fid1\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                 (OSing vid2\n                   (Plus\n                     (Times\n                       ($f fid2\n                         (\\<lambda>i.\n                             if i = vid1 then Var vid1 else Const 0))\n                       (Var vid2))\n                     ($f fid3\n                       (\\<lambda>i.\n                           if i = vid1 then Var vid1 else Const 0)))))\n               (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n               (\\<chi>i.\n                   if i = vid2 then ll_new.flow 0 r t else sol t $ i))))\n\ngoal (1 subgoal):\n 1. Predicates I vid2\n     (\\<chi>i.\n         dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n          (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)))", "by auto"], ["proof (state)\nthis:\n  Predicates I vid2\n   (\\<chi>i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n          (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "let ?other_state = \"(mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (sol t))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have agree:\"Vagree (?aaba') (?other_state) {Inl vid1} \""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n       (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))\n     (mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (sol t))\n     {Inl vid1}", "using mk_v_agree [of \"I\" \"(OProd (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\n                 (OSing vid2\n                   (Plus (Times ($f fid2 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)) (trm.Var vid2))\n                     ($f fid3 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))))\"\n         \"(\\<chi> y. if vid2 = y then r else fst (a, b) $ y, b)\" \"(?sol' t)\"]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))\n   (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n   (- semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i.\n                   if i = vid1 then Var vid1 else Const 0)))))) \\<and>\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))\n   (mk_xode I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))\n   (semBV I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3\n             (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))))\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n       (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))\n     (mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (sol t))\n     {Inl vid1}", "using mk_v_agree [of \"I\" \"(OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0)))\" \"(a, b)\" \"(sol t)\"]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))\n   (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n   (- semBV I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i.\n                   if i = vid1 then Var vid1 else Const 0)))))) \\<and>\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))\n   (mk_xode I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))\n   (semBV I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3\n             (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))))\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (sol t))\n   (a, b)\n   (- semBV I\n       (OSing vid1\n         ($f fid1\n           (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))) \\<and>\n  Vagree\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (sol t))\n   (mk_xode I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (sol t))\n   (semBV I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))))\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n       (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))\n     (mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (sol t))\n     {Inl vid1}", "unfolding Vagree_def"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i\n       \\<in> - semBV I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (OSing vid2\n                    (Plus\n                      (Times\n                        ($f fid2\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0))\n                        (Var vid2))\n                      ($f fid3\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1\n                            else Const 0))))) \\<longrightarrow>\n       fst (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)) $\n       i =\n       fst (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i\n       \\<in> - semBV I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (OSing vid2\n                    (Plus\n                      (Times\n                        ($f fid2\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0))\n                        (Var vid2))\n                      ($f fid3\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1\n                            else Const 0))))) \\<longrightarrow>\n       snd (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)) $\n       i =\n       snd (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i\n      \\<in> semBV I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1\n                         else Const 0))))) \\<longrightarrow>\n      fst (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)) $\n      i =\n      fst (mk_xode I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i\n      \\<in> semBV I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1\n                         else Const 0))))) \\<longrightarrow>\n      snd (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)) $\n      i =\n      snd (mk_xode I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)) $\n      i)\n  ((\\<forall>i.\n       Inl i\n       \\<in> - semBV I\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i.\n                        if i = vid1 then Var vid1\n                        else Const 0))) \\<longrightarrow>\n       fst (mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t)) $\n       i =\n       fst (a, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i\n       \\<in> - semBV I\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i.\n                        if i = vid1 then Var vid1\n                        else Const 0))) \\<longrightarrow>\n       snd (mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t)) $\n       i =\n       snd (a, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i\n      \\<in> semBV I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i.\n                     if i = vid1 then Var vid1\n                     else Const 0))) \\<longrightarrow>\n      fst (mk_v I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (a, b) (sol t)) $\n      i =\n      fst (mk_xode I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (sol t)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i\n      \\<in> semBV I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i.\n                     if i = vid1 then Var vid1\n                     else Const 0))) \\<longrightarrow>\n      snd (mk_v I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (a, b) (sol t)) $\n      i =\n      snd (mk_xode I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (sol t)) $\n      i)\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i \\<in> {Inl vid1} \\<longrightarrow>\n        fst (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n              (\\<chi>i.\n                  if i = vid2 then ll_new.flow 0 r t else sol t $ i)) $\n        i =\n        fst (mk_v I\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (a, b) (sol t)) $\n        i) \\<and>\n    (\\<forall>i.\n        Inr i \\<in> {Inl vid1} \\<longrightarrow>\n        snd (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n              (\\<chi>i.\n                  if i = vid2 then ll_new.flow 0 r t else sol t $ i)) $\n        i =\n        snd (mk_v I\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (a, b) (sol t)) $\n        i)", "using vne12"], ["proof (prove)\nusing this:\n  ((\\<forall>i.\n       Inl i\n       \\<in> - semBV I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (OSing vid2\n                    (Plus\n                      (Times\n                        ($f fid2\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0))\n                        (Var vid2))\n                      ($f fid3\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1\n                            else Const 0))))) \\<longrightarrow>\n       fst (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)) $\n       i =\n       fst (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i\n       \\<in> - semBV I\n                (OProd\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (OSing vid2\n                    (Plus\n                      (Times\n                        ($f fid2\n                          (\\<lambda>i.\n                              if i = vid1 then Var vid1 else Const 0))\n                        (Var vid2))\n                      ($f fid3\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1\n                            else Const 0))))) \\<longrightarrow>\n       snd (mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)) $\n       i =\n       snd (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i\n      \\<in> semBV I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1\n                         else Const 0))))) \\<longrightarrow>\n      fst (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)) $\n      i =\n      fst (mk_xode I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i\n      \\<in> semBV I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1\n                         else Const 0))))) \\<longrightarrow>\n      snd (mk_v I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)) $\n      i =\n      snd (mk_xode I\n            (OProd\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (OSing vid2\n                (Plus\n                  (Times\n                    ($f fid2\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                    (Var vid2))\n                  ($f fid3\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n            (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)) $\n      i)\n  ((\\<forall>i.\n       Inl i\n       \\<in> - semBV I\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i.\n                        if i = vid1 then Var vid1\n                        else Const 0))) \\<longrightarrow>\n       fst (mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t)) $\n       i =\n       fst (a, b) $ i) \\<and>\n   (\\<forall>i.\n       Inr i\n       \\<in> - semBV I\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i.\n                        if i = vid1 then Var vid1\n                        else Const 0))) \\<longrightarrow>\n       snd (mk_v I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (a, b) (sol t)) $\n       i =\n       snd (a, b) $ i)) \\<and>\n  (\\<forall>i.\n      Inl i\n      \\<in> semBV I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i.\n                     if i = vid1 then Var vid1\n                     else Const 0))) \\<longrightarrow>\n      fst (mk_v I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (a, b) (sol t)) $\n      i =\n      fst (mk_xode I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (sol t)) $\n      i) \\<and>\n  (\\<forall>i.\n      Inr i\n      \\<in> semBV I\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i.\n                     if i = vid1 then Var vid1\n                     else Const 0))) \\<longrightarrow>\n      snd (mk_v I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (a, b) (sol t)) $\n      i =\n      snd (mk_xode I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (sol t)) $\n      i)\n  vid1 \\<noteq> vid2\n\ngoal (1 subgoal):\n 1. (\\<forall>i.\n        Inl i \\<in> {Inl vid1} \\<longrightarrow>\n        fst (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n              (\\<chi>i.\n                  if i = vid2 then ll_new.flow 0 r t else sol t $ i)) $\n        i =\n        fst (mk_v I\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (a, b) (sol t)) $\n        i) \\<and>\n    (\\<forall>i.\n        Inr i \\<in> {Inl vid1} \\<longrightarrow>\n        snd (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n              (\\<chi>i.\n                  if i = vid2 then ll_new.flow 0 r t else sol t $ i)) $\n        i =\n        snd (mk_v I\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (a, b) (sol t)) $\n        i)", "by simp"], ["proof (state)\nthis:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (sol t))\n   {Inl vid1}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have sub:\"\\<And>i. FVT (if i = vid1 then trm.Var vid1 else Const 0) \\<subseteq> {Inl vid1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       FVT (if i = vid1 then Var vid1 else Const 0) \\<subseteq> {Inl vid1}", "by auto"], ["proof (state)\nthis:\n  FVT (if ?i19 = vid1 then Var vid1 else Const 0) \\<subseteq> {Inl vid1}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have agree':\"\\<And>i. Vagree (?aaba') (?other_state) (FVT (if i = vid1 then trm.Var vid1 else Const 0)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       Vagree\n        (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n          (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))\n        (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (sol t))\n        (FVT (if i = vid1 then Var vid1 else Const 0))", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n       (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))\n     (mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (sol t))\n     (FVT (if i = vid1 then Var vid1 else Const 0))", "using agree_sub[OF sub[of i] agree]"], ["proof (prove)\nusing this:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (sol t))\n   (FVT (if i = vid1 then Var vid1 else Const 0))\n\ngoal (1 subgoal):\n 1. Vagree\n     (mk_v I\n       (OProd\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (OSing vid2\n           (Plus\n             (Times\n               ($f fid2\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n               (Var vid2))\n             ($f fid3\n               (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n       (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n       (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))\n     (mk_v I\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (a, b) (sol t))\n     (FVT (if i = vid1 then Var vid1 else Const 0))", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Vagree\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (sol t))\n   (FVT (if ?i20 = vid1 then Var vid1 else Const 0))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have silly_safe:\"\\<And>i. dsafe (if i = vid1 then trm.Var vid1 else Const 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. dsafe (if i = vid1 then Var vid1 else Const 0)", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. dsafe (if i = vid1 then Var vid1 else Const 0)", "apply(cases \"i = vid1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. i = vid1 \\<Longrightarrow>\n    dsafe (if i = vid1 then Var vid1 else Const 0)\n 2. i \\<noteq> vid1 \\<Longrightarrow>\n    dsafe (if i = vid1 then Var vid1 else Const 0)", "by (auto simp add: dsafe_Var dsafe_Const)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  dsafe (if ?i21 = vid1 then Var vid1 else Const 0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "have dsem_eq:\"(\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) ?aaba')  = \n        (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0) ?other_state)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (OSing vid2\n               (Plus\n                 (Times\n                   ($f fid2\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                   (Var vid2))\n                 ($f fid3\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n           (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n           (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))) =\n    (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (mk_v I\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (a, b) (sol t)))", "apply(rule vec_extensionality)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (\\<chi>i.\n           dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (mk_v I\n              (OProd\n                (OSing vid1\n                  ($f fid1\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                (OSing vid2\n                  (Plus\n                    (Times\n                      ($f fid2\n                        (\\<lambda>i.\n                            if i = vid1 then Var vid1 else Const 0))\n                      (Var vid2))\n                    ($f fid3\n                      (\\<lambda>i.\n                          if i = vid1 then Var vid1 else Const 0)))))\n              (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n              (\\<chi>i.\n                  if i = vid2 then ll_new.flow 0 r t else sol t $ i))) $\n       i =\n       (\\<chi>i.\n           dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n            (mk_v I\n              (OSing vid1\n                ($f fid1\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n              (a, b) (sol t))) $\n       i", "subgoal for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (OSing vid2\n               (Plus\n                 (Times\n                   ($f fid2\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                   (Var vid2))\n                 ($f fid3\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n           (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n           (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))) $\n    i =\n    (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (mk_v I\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (a, b) (sol t))) $\n    i", "using coincidence_dterm[OF silly_safe[of i] agree'[of i], of I]"], ["proof (prove)\nusing this:\n  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n   (mk_v I\n     (OProd\n       (OSing vid1\n         ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n       (OSing vid2\n         (Plus\n           (Times\n             ($f fid2 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n             (Var vid2))\n           ($f fid3 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n     (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n     (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)) =\n  dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n   (mk_v I\n     (OSing vid1\n       ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n     (a, b) (sol t))\n\ngoal (1 subgoal):\n 1. (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (mk_v I\n           (OProd\n             (OSing vid1\n               ($f fid1\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n             (OSing vid2\n               (Plus\n                 (Times\n                   ($f fid2\n                     (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                   (Var vid2))\n                 ($f fid3\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n           (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n           (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))) $\n    i =\n    (\\<chi>i.\n        dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n         (mk_v I\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (a, b) (sol t))) $\n    i", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<chi>i.\n      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (OSing vid2\n             (Plus\n               (Times\n                 ($f fid2\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                 (Var vid2))\n               ($f fid3\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n         (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))) =\n  (\\<chi>i.\n      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n       (mk_v I\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (a, b) (sol t)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<forall>aa ba.\n        (\\<exists>sol t.\n            (aa, ba) =\n            mk_v I\n             (OProd\n               (OSing vid1\n                 ($f fid1\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n               (OSing vid2\n                 (Plus\n                   (Times\n                     ($f fid2\n                       (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                     (Var vid2))\n                   ($f fid3\n                     (\\<lambda>i.\n                         if i = vid1 then Var vid1 else Const 0)))))\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n             (sol t) \\<and>\n            0 \\<le> t \\<and>\n            (sol solves_ode\n             (\\<lambda>a b.\n                 (\\<chi>i.\n                     if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0) +\n                 (\\<chi>i.\n                     if i = vid2\n                     then sterm_sem I\n                           (Plus (Times (f1 fid2 vid1) (Var vid2))\n                             (f1 fid3 vid1))\n                           b\n                     else 0)))\n             {0..t}\n             {x. Predicates I vid1\n                  (\\<chi>i.\n                      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                       (mk_v I\n                         (OProd\n                           (OSing vid1\n                             ($f fid1\n                               (\\<lambda>i.\n                                   if i = vid1 then Var vid1 else Const 0)))\n                           (OSing vid2\n                             (Plus\n                               (Times\n                                 ($f fid2\n                                   (\\<lambda>i.\n if i = vid1 then Var vid1 else Const 0))\n                                 (Var vid2))\n                               ($f fid3\n                                 (\\<lambda>i.\n                                     if i = vid1 then Var vid1\n                                     else Const 0)))))\n                         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y,\n                          b)\n                         x))} \\<and>\n            VSagree (sol 0)\n             (\\<chi>y. if vid2 = y then r else fst (a, b) $ y)\n             {uu_.\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              uu_ = vid2 \\<or>\n              uu_ = vid1 \\<or>\n              Inl uu_\n              \\<in> Inl `\n                    ({x. \\<exists>xa.\n                            Inl x\n                            \\<in> FVT (if xa = vid1 then Var vid1\n else Const 0)} \\<union>\n                     {x. x = vid2 \\<or>\n                         (\\<exists>xa.\n                             Inl x\n                             \\<in> FVT (if xa = vid1 then Var vid1\n  else Const 0))}) \\<or>\n              (\\<exists>x.\n                  Inl uu_\n                  \\<in> FVT (if x = vid1 then Var vid1\n                             else Const 0))}) \\<longrightarrow>\n        Predicates I vid2\n         (\\<chi>i.\n             dterm_sem I (if i = vid1 then Var vid1 else Const 0) (aa, ba));\n     (aa, ba) =\n     mk_v I\n      (OSing vid1\n        ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n      (a, b) (sol t);\n     0 \\<le> t;\n     (sol solves_ode\n      (\\<lambda>a b.\n          \\<chi>i. if i = vid1 then sterm_sem I (f1 fid1 vid1) b else 0))\n      {0..t}\n      {x. Predicates I vid1\n           (\\<chi>i.\n               dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n                (mk_v I\n                  (OSing vid1\n                    ($f fid1\n                      (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n                  (a, b) x))};\n     VSagree (sol 0) a\n      {uu_.\n       uu_ = vid1 \\<or>\n       Inl uu_\n       \\<in> Inl `\n             {x. \\<exists>xa.\n                    Inl x\n                    \\<in> FVT (if xa = vid1 then Var vid1\n                               else Const 0)} \\<or>\n       (\\<exists>x.\n           Inl uu_\n           \\<in> FVT (if x = vid1 then Var vid1 else Const 0))}\\<rbrakk>\n    \\<Longrightarrow> Predicates I vid2\n                       (\\<chi>i.\n                           dterm_sem I\n                            (if i = vid1 then Var vid1 else Const 0)\n                            (mk_v I\n                              (OSing vid1\n                                ($f fid1\n                                  (\\<lambda>i.\nif i = vid1 then Var vid1 else Const 0)))\n                              (a, b) (sol t)))", "show\n    \"Predicates I vid2\n     (\\<chi> i. dterm_sem I (if i = vid1 then trm.Var vid1 else Const 0)\n            (mk_v I (OSing vid1 ($f fid1 (\\<lambda>i. if i = vid1 then trm.Var vid1 else Const 0))) (a, b) (sol t)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Predicates I vid2\n     (\\<chi>i.\n         dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n          (mk_v I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (a, b) (sol t)))", "using pred_sem dsem_eq"], ["proof (prove)\nusing this:\n  Predicates I vid2\n   (\\<chi>i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (mk_v I\n          (OProd\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (OSing vid2\n              (Plus\n                (Times\n                  ($f fid2\n                    (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                  (Var vid2))\n                ($f fid3\n                  (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n          (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n          (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i)))\n  (\\<chi>i.\n      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n       (mk_v I\n         (OProd\n           (OSing vid1\n             ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n           (OSing vid2\n             (Plus\n               (Times\n                 ($f fid2\n                   (\\<lambda>i. if i = vid1 then Var vid1 else Const 0))\n                 (Var vid2))\n               ($f fid3\n                 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))))\n         (\\<chi>y. if vid2 = y then r else fst (a, b) $ y, b)\n         (\\<chi>i. if i = vid2 then ll_new.flow 0 r t else sol t $ i))) =\n  (\\<chi>i.\n      dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n       (mk_v I\n         (OSing vid1\n           ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n         (a, b) (sol t)))\n\ngoal (1 subgoal):\n 1. Predicates I vid2\n     (\\<chi>i.\n         dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n          (mk_v I\n            (OSing vid1\n              ($f fid1\n                (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n            (a, b) (sol t)))", "by auto"], ["proof (state)\nthis:\n  Predicates I vid2\n   (\\<chi>i.\n       dterm_sem I (if i = vid1 then Var vid1 else Const 0)\n        (mk_v I\n          (OSing vid1\n            ($f fid1 (\\<lambda>i. if i = vid1 then Var vid1 else Const 0)))\n          (a, b) (sol t)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  valid DGaxiom\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}