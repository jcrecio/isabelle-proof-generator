{"file_name": "/home/qj213/afp-2021-10-22/thys/Differential_Dynamic_Logic/Frechet_Correctness.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Differential_Dynamic_Logic", "problem_names": ["lemma inner_prod_eq:\n  fixes i::\"'a::finite\"\n  shows \"(\\<lambda>(v::'a Rvec). v \\<bullet> axis i 1) = (\\<lambda>(v::'a Rvec). v $ i)\"", "theorem svar_deriv:\n  fixes x:: \"'sv::finite\" and \\<nu>:: \"'sv Rvec\" and F::\"real filter\"\n  shows \"((\\<lambda>v. v $ x) has_derivative (\\<lambda>v'. v' \\<bullet> (\\<chi> i. if i = x then 1 else 0))) (at \\<nu>)\"", "lemma function_case_inner:\n  assumes good_interp:\n    \"(\\<forall>x i. (Functions I i has_derivative FunctionFrechet I i x) (at x))\"\n  assumes IH:\"((\\<lambda>v. \\<chi> i. sterm_sem I (args i) v)\n             has_derivative (\\<lambda> v. (\\<chi> i. frechet I (args i) \\<nu> v))) (at \\<nu>)\"\n  shows  \"((\\<lambda>v. Functions I f (\\<chi> i. sterm_sem I (args i) v))\n            has_derivative (\\<lambda>v. frechet I ($f f args) \\<nu> v)) (at \\<nu>)\"", "lemma func_lemma2:\"(\\<forall>x i. (Functions I i has_derivative (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x) (at x) \\<and>\n          continuous_on UNIV (\\<lambda>x. Blinfun ((THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x))) \\<Longrightarrow>\n    (\\<And>\\<theta>. \\<theta> \\<in> range args \\<Longrightarrow> (sterm_sem I \\<theta> has_derivative frechet I \\<theta> \\<nu>) (at \\<nu>)) \\<Longrightarrow>\n    ((\\<lambda>v. Functions I f (vec_lambda(\\<lambda>i. sterm_sem I (args i) v))) has_derivative (\\<lambda>v'. (THE f'. \\<forall>x. (Functions I f has_derivative f' x) (at x)) (\\<chi> i. sterm_sem I (args i) \\<nu>) (\\<chi> i. frechet I (args i) \\<nu> v'))) (at \\<nu>)\"", "lemma func_lemma:\n  \"is_interp I \\<Longrightarrow>\n  (\\<And>\\<theta> :: ('a::finite, 'c::finite) trm. \\<theta> \\<in> range args \\<Longrightarrow> (sterm_sem I \\<theta> has_derivative frechet I \\<theta> \\<nu>) (at \\<nu>)) \\<Longrightarrow>\n  (sterm_sem I ($f f args) has_derivative frechet I ($f f args) \\<nu>) (at \\<nu>)\"", "lemma frechet_correctness:\n  fixes I :: \"('a::finite, 'b::finite, 'c::finite) interp\" and \\<nu>\n  assumes good_interp: \"is_interp I\"\n  shows \"dfree \\<theta> \\<Longrightarrow> FDERIV (sterm_sem I \\<theta>) \\<nu> :> (frechet I \\<theta> \\<nu>)\"", "lemma sterm_determines_frechet:\n  fixes I ::\"('a1::finite, 'b1::finite, 'c::finite) interp\"\n    and J ::\"('a2::finite, 'b2::finite, 'c::finite) interp\"\n    and \\<theta>1 :: \"('a1::finite, 'c::finite) trm\"\n    and \\<theta>2 :: \"('a2::finite, 'c::finite) trm\"\n    and \\<nu> \n  assumes good_interp1:\"is_interp I\"\n  assumes good_interp2:\"is_interp J\"\n  assumes free1:\"dfree \\<theta>1\"\n  assumes free2:\"dfree \\<theta>2\"\n  assumes sem:\"sterm_sem I \\<theta>1 = sterm_sem J \\<theta>2\"\n  shows \"frechet I \\<theta>1 (fst \\<nu>) (snd \\<nu>) = frechet J \\<theta>2 (fst \\<nu>) (snd \\<nu>)\"", "lemma the_deriv:\n  assumes deriv:\"(f has_derivative F) (at x)\"\n  shows \"(THE G. (f has_derivative G) (at x)) = F\"", "lemma the_all_deriv:\n  assumes deriv:\"\\<forall>x. (f has_derivative F x) (at x)\"\n  shows \"(THE G. \\<forall> x. (f has_derivative G x) (at x)) = F\"", "lemma frechet_linear: \n  assumes good_interp:\"is_interp I\"\n  fixes v \\<theta>\n  shows \" dfree \\<theta> \\<Longrightarrow> bounded_linear (frechet I \\<theta> v)\"", "lemmas [simp] = blin_frechet.rep_eq", "lemma frechet_blin:\"is_interp I \\<Longrightarrow> dfree \\<theta> \\<Longrightarrow> (\\<lambda>v. Blinfun (\\<lambda>v'. frechet I \\<theta> v v')) = blin_frechet (good_interp I) (simple_term \\<theta>)\"", "lemma sterm_continuous:\n  assumes good_interp:\"is_interp I\"\n  shows \"dfree \\<theta> \\<Longrightarrow> continuous_on UNIV (sterm_sem I \\<theta>)\"", "lemma sterm_continuous':\n  assumes good_interp:\"is_interp I\"\n  shows \"dfree \\<theta> \\<Longrightarrow> continuous_on S (sterm_sem I \\<theta>)\"", "lemma frechet_continuous:\n  fixes I :: \"('sf, 'sc, 'sz) interp\"\n  assumes good_interp:\"is_interp I\"\n  shows \"dfree \\<theta> \\<Longrightarrow> continuous_on UNIV (blin_frechet (good_interp I) (simple_term \\<theta>))\""], "translations": [["", "lemma inner_prod_eq:\n  fixes i::\"'a::finite\"\n  shows \"(\\<lambda>(v::'a Rvec). v \\<bullet> axis i 1) = (\\<lambda>(v::'a Rvec). v $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>v. v \\<bullet> axis i 1) = (\\<lambda>v. v $ i)", "unfolding cart_eq_inner_axis axis_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>v. v \\<bullet> (\\<chi>ia. if ia = i then 1 else 0)) =\n    (\\<lambda>v. v \\<bullet> (\\<chi>ia. if ia = i then 1 else 0))", "by (simp add: eq_commute)"], ["", "theorem svar_deriv:\n  fixes x:: \"'sv::finite\" and \\<nu>:: \"'sv Rvec\" and F::\"real filter\"\n  shows \"((\\<lambda>v. v $ x) has_derivative (\\<lambda>v'. v' \\<bullet> (\\<chi> i. if i = x then 1 else 0))) (at \\<nu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>v. v $ x) has_derivative\n     (\\<lambda>v'. v' \\<bullet> (\\<chi>i. if i = x then 1 else 0)))\n     (at \\<nu>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>v. v $ x) has_derivative\n     (\\<lambda>v'. v' \\<bullet> (\\<chi>i. if i = x then 1 else 0)))\n     (at \\<nu>)", "let ?f = \"(\\<lambda>v. v)\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>v. v $ x) has_derivative\n     (\\<lambda>v'. v' \\<bullet> (\\<chi>i. if i = x then 1 else 0)))\n     (at \\<nu>)", "let ?f' = \"(\\<lambda>v'. v')\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>v. v $ x) has_derivative\n     (\\<lambda>v'. v' \\<bullet> (\\<chi>i. if i = x then 1 else 0)))\n     (at \\<nu>)", "let ?g = \"(\\<lambda>v. axis x 1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>v. v $ x) has_derivative\n     (\\<lambda>v'. v' \\<bullet> (\\<chi>i. if i = x then 1 else 0)))\n     (at \\<nu>)", "let ?g' = \"(\\<lambda>v. 0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>v. v $ x) has_derivative\n     (\\<lambda>v'. v' \\<bullet> (\\<chi>i. if i = x then 1 else 0)))\n     (at \\<nu>)", "have id_deriv: \"(?f has_derivative ?f') (at \\<nu>) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>v. v) has_derivative (\\<lambda>v'. v')) (at \\<nu>)", "by (rule has_derivative_ident)"], ["proof (state)\nthis:\n  ((\\<lambda>v. v) has_derivative (\\<lambda>v'. v')) (at \\<nu>)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>v. v $ x) has_derivative\n     (\\<lambda>v'. v' \\<bullet> (\\<chi>i. if i = x then 1 else 0)))\n     (at \\<nu>)", "have const_deriv: \"(?g has_derivative ?g') (at \\<nu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>v. axis x (1::'a)) has_derivative (\\<lambda>v. 0)) (at \\<nu>)", "by (rule has_derivative_const)"], ["proof (state)\nthis:\n  ((\\<lambda>v. axis x (1::?'a10)) has_derivative (\\<lambda>v. 0))\n   (at \\<nu>)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>v. v $ x) has_derivative\n     (\\<lambda>v'. v' \\<bullet> (\\<chi>i. if i = x then 1 else 0)))\n     (at \\<nu>)", "have inner_deriv:\"((\\<lambda>x. inner (?f x) (?g x)) has_derivative\n                     (\\<lambda>h. inner (?f \\<nu>) (?g' h) + inner (?f' h) (?g \\<nu>))) (at \\<nu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>xa. xa \\<bullet> axis x 1) has_derivative\n     (\\<lambda>h. \\<nu> \\<bullet> 0 + h \\<bullet> axis x 1))\n     (at \\<nu>)", "by (intro has_derivative_inner [OF id_deriv const_deriv])"], ["proof (state)\nthis:\n  ((\\<lambda>xa. xa \\<bullet> axis x 1) has_derivative\n   (\\<lambda>h. \\<nu> \\<bullet> 0 + h \\<bullet> axis x 1))\n   (at \\<nu>)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>v. v $ x) has_derivative\n     (\\<lambda>v'. v' \\<bullet> (\\<chi>i. if i = x then 1 else 0)))\n     (at \\<nu>)", "from inner_prod_eq"], ["proof (chain)\npicking this:\n  (\\<lambda>v. v \\<bullet> axis ?i 1) = (\\<lambda>v. v $ ?i)", "have left_eq: \"(\\<lambda>x. inner (?f x) (?g x)) = (\\<lambda>v. vec_nth v x)\""], ["proof (prove)\nusing this:\n  (\\<lambda>v. v \\<bullet> axis ?i 1) = (\\<lambda>v. v $ ?i)\n\ngoal (1 subgoal):\n 1. (\\<lambda>xa. xa \\<bullet> axis x 1) = (\\<lambda>v. v $ x)", "by (auto)"], ["proof (state)\nthis:\n  (\\<lambda>xa. xa \\<bullet> axis x 1) = (\\<lambda>v. v $ x)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>v. v $ x) has_derivative\n     (\\<lambda>v'. v' \\<bullet> (\\<chi>i. if i = x then 1 else 0)))\n     (at \\<nu>)", "from inner_deriv and inner_prod_eq"], ["proof (chain)\npicking this:\n  ((\\<lambda>xa. xa \\<bullet> axis x 1) has_derivative\n   (\\<lambda>h. \\<nu> \\<bullet> 0 + h \\<bullet> axis x 1))\n   (at \\<nu>)\n  (\\<lambda>v. v \\<bullet> axis ?i 1) = (\\<lambda>v. v $ ?i)", "have better_deriv:\"((\\<lambda>v. vec_nth v x) has_derivative\n                     (\\<lambda>h. inner (?f \\<nu>) (?g' h) + inner (?f' h) (?g \\<nu>))) (at \\<nu>)\""], ["proof (prove)\nusing this:\n  ((\\<lambda>xa. xa \\<bullet> axis x 1) has_derivative\n   (\\<lambda>h. \\<nu> \\<bullet> 0 + h \\<bullet> axis x 1))\n   (at \\<nu>)\n  (\\<lambda>v. v \\<bullet> axis ?i 1) = (\\<lambda>v. v $ ?i)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>v. v $ x) has_derivative\n     (\\<lambda>h. \\<nu> \\<bullet> 0 + h \\<bullet> axis x 1))\n     (at \\<nu>)", "by (metis (no_types, lifting) UNIV_I has_derivative_transform)"], ["proof (state)\nthis:\n  ((\\<lambda>v. v $ x) has_derivative\n   (\\<lambda>h. \\<nu> \\<bullet> 0 + h \\<bullet> axis x 1))\n   (at \\<nu>)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>v. v $ x) has_derivative\n     (\\<lambda>v'. v' \\<bullet> (\\<chi>i. if i = x then 1 else 0)))\n     (at \\<nu>)", "have vec_eq:\"(\\<chi> i. if i = x then 1 else 0) = (\\<chi> i. if x = i then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi>i. if i = x then 1::'a else (0::'a)) =\n    (\\<chi>i. if x = i then 1::'a else (0::'a))", "by(rule vec_extensionality, auto)"], ["proof (state)\nthis:\n  (\\<chi>i. if i = x then 1::?'a11 else (0::?'a11)) =\n  (\\<chi>i. if x = i then 1::?'a11 else (0::?'a11))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>v. v $ x) has_derivative\n     (\\<lambda>v'. v' \\<bullet> (\\<chi>i. if i = x then 1 else 0)))\n     (at \\<nu>)", "have deriv_eq:\"(\\<lambda>h. \\<nu> \\<bullet> 0 + h \\<bullet> axis x 1) = (\\<lambda>v'. v' \\<bullet> (\\<chi> i. if i = x then 1 else 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>h. \\<nu> \\<bullet> 0 + h \\<bullet> axis x (1::'a)) =\n    (\\<lambda>v'. v' \\<bullet> (\\<chi>i. if i = x then 1::'a else (0::'a)))", "by(rule ext, auto simp add: axis_def vec_eq)"], ["proof (state)\nthis:\n  (\\<lambda>h. \\<nu> \\<bullet> 0 + h \\<bullet> axis x (1::?'a12)) =\n  (\\<lambda>v'.\n      v' \\<bullet> (\\<chi>i. if i = x then 1::?'a12 else (0::?'a12)))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>v. v $ x) has_derivative\n     (\\<lambda>v'. v' \\<bullet> (\\<chi>i. if i = x then 1 else 0)))\n     (at \\<nu>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>v. v $ x) has_derivative\n     (\\<lambda>v'. v' \\<bullet> (\\<chi>i. if i = x then 1 else 0)))\n     (at \\<nu>)", "apply(rule has_derivative_eq_rhs[where f'= \"(\\<lambda>h. \\<nu> \\<bullet> 0 + h \\<bullet> axis x 1)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((\\<lambda>v. v $ x) has_derivative\n     (\\<lambda>h. \\<nu> \\<bullet> 0 + h \\<bullet> axis x 1))\n     (at \\<nu>)\n 2. (\\<lambda>h. \\<nu> \\<bullet> 0 + h \\<bullet> axis x 1) =\n    (\\<lambda>v'. v' \\<bullet> (\\<chi>i. if i = x then 1 else 0))", "using better_deriv deriv_eq"], ["proof (prove)\nusing this:\n  ((\\<lambda>v. v $ x) has_derivative\n   (\\<lambda>h. \\<nu> \\<bullet> 0 + h \\<bullet> axis x 1))\n   (at \\<nu>)\n  (\\<lambda>h. \\<nu> \\<bullet> 0 + h \\<bullet> axis x (1::?'a12)) =\n  (\\<lambda>v'.\n      v' \\<bullet> (\\<chi>i. if i = x then 1::?'a12 else (0::?'a12)))\n\ngoal (2 subgoals):\n 1. ((\\<lambda>v. v $ x) has_derivative\n     (\\<lambda>h. \\<nu> \\<bullet> 0 + h \\<bullet> axis x 1))\n     (at \\<nu>)\n 2. (\\<lambda>h. \\<nu> \\<bullet> 0 + h \\<bullet> axis x 1) =\n    (\\<lambda>v'. v' \\<bullet> (\\<chi>i. if i = x then 1 else 0))", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>v. v $ x) has_derivative\n   (\\<lambda>v'. v' \\<bullet> (\\<chi>i. if i = x then 1 else 0)))\n   (at \\<nu>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma function_case_inner:\n  assumes good_interp:\n    \"(\\<forall>x i. (Functions I i has_derivative FunctionFrechet I i x) (at x))\"\n  assumes IH:\"((\\<lambda>v. \\<chi> i. sterm_sem I (args i) v)\n             has_derivative (\\<lambda> v. (\\<chi> i. frechet I (args i) \\<nu> v))) (at \\<nu>)\"\n  shows  \"((\\<lambda>v. Functions I f (\\<chi> i. sterm_sem I (args i) v))\n            has_derivative (\\<lambda>v. frechet I ($f f args) \\<nu> v)) (at \\<nu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>v.\n         Functions I f (\\<chi>i. sterm_sem I (args i) v)) has_derivative\n     frechet I ($f f args) \\<nu>)\n     (at \\<nu>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>v.\n         Functions I f (\\<chi>i. sterm_sem I (args i) v)) has_derivative\n     frechet I ($f f args) \\<nu>)\n     (at \\<nu>)", "let ?h = \"(\\<lambda>v. Functions I f (\\<chi> i. sterm_sem I (args i) v))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>v.\n         Functions I f (\\<chi>i. sterm_sem I (args i) v)) has_derivative\n     frechet I ($f f args) \\<nu>)\n     (at \\<nu>)", "let ?h' = \"frechet I ($f f args) \\<nu>\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>v.\n         Functions I f (\\<chi>i. sterm_sem I (args i) v)) has_derivative\n     frechet I ($f f args) \\<nu>)\n     (at \\<nu>)", "let ?g = \"(\\<lambda>v. \\<chi> i. sterm_sem I (args i) v)\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>v.\n         Functions I f (\\<chi>i. sterm_sem I (args i) v)) has_derivative\n     frechet I ($f f args) \\<nu>)\n     (at \\<nu>)", "let ?g' = \"(\\<lambda>v. \\<chi> i. frechet I (args i) \\<nu> v)\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>v.\n         Functions I f (\\<chi>i. sterm_sem I (args i) v)) has_derivative\n     frechet I ($f f args) \\<nu>)\n     (at \\<nu>)", "let ?f = \"(\\<lambda>y. Functions I f y)\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>v.\n         Functions I f (\\<chi>i. sterm_sem I (args i) v)) has_derivative\n     frechet I ($f f args) \\<nu>)\n     (at \\<nu>)", "let ?f' = \"FunctionFrechet I f (?g \\<nu>)\""], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>v.\n         Functions I f (\\<chi>i. sterm_sem I (args i) v)) has_derivative\n     frechet I ($f f args) \\<nu>)\n     (at \\<nu>)", "have hEqFG:  \"?h  = ?f  o ?g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>v. Functions I f (\\<chi>i. sterm_sem I (args i) v)) =\n    Functions I f \\<circ> (\\<lambda>v. \\<chi>i. sterm_sem I (args i) v)", "by (auto)"], ["proof (state)\nthis:\n  (\\<lambda>v. Functions I f (\\<chi>i. sterm_sem I (args i) v)) =\n  Functions I f \\<circ> (\\<lambda>v. \\<chi>i. sterm_sem I (args i) v)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>v.\n         Functions I f (\\<chi>i. sterm_sem I (args i) v)) has_derivative\n     frechet I ($f f args) \\<nu>)\n     (at \\<nu>)", "have hEqFG': \"?h' = ?f' o ?g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. frechet I ($f f args) \\<nu> =\n    FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>) \\<circ>\n    (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. frechet I ($f f args) \\<nu> =\n    FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>) \\<circ>\n    (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v)", "have frechet_def:\"frechet I (Function f args) \\<nu>\n        = (\\<lambda>v'. FunctionFrechet I f (?g \\<nu>) (\\<chi> i. frechet I (args i) \\<nu> v'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. frechet I ($f f args) \\<nu> =\n    (\\<lambda>v'.\n        FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>)\n         (\\<chi>i. frechet I (args i) \\<nu> v'))", "by (auto)"], ["proof (state)\nthis:\n  frechet I ($f f args) \\<nu> =\n  (\\<lambda>v'.\n      FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>)\n       (\\<chi>i. frechet I (args i) \\<nu> v'))\n\ngoal (1 subgoal):\n 1. frechet I ($f f args) \\<nu> =\n    FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>) \\<circ>\n    (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v)", "have composition:\n      \"(\\<lambda>v'. FunctionFrechet I f (?g \\<nu>) (\\<chi> i. frechet I (args i) \\<nu> v'))\n       = (FunctionFrechet I f (?g \\<nu>)) o (\\<lambda> v'. \\<chi> i. frechet I (args i) \\<nu> v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>v'.\n        FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>)\n         (\\<chi>i. frechet I (args i) \\<nu> v')) =\n    FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>) \\<circ>\n    (\\<lambda>v'. \\<chi>i. frechet I (args i) \\<nu> v')", "by (auto)"], ["proof (state)\nthis:\n  (\\<lambda>v'.\n      FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>)\n       (\\<chi>i. frechet I (args i) \\<nu> v')) =\n  FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>) \\<circ>\n  (\\<lambda>v'. \\<chi>i. frechet I (args i) \\<nu> v')\n\ngoal (1 subgoal):\n 1. frechet I ($f f args) \\<nu> =\n    FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>) \\<circ>\n    (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v)", "from frechet_def and composition"], ["proof (chain)\npicking this:\n  frechet I ($f f args) \\<nu> =\n  (\\<lambda>v'.\n      FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>)\n       (\\<chi>i. frechet I (args i) \\<nu> v'))\n  (\\<lambda>v'.\n      FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>)\n       (\\<chi>i. frechet I (args i) \\<nu> v')) =\n  FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>) \\<circ>\n  (\\<lambda>v'. \\<chi>i. frechet I (args i) \\<nu> v')", "show ?thesis"], ["proof (prove)\nusing this:\n  frechet I ($f f args) \\<nu> =\n  (\\<lambda>v'.\n      FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>)\n       (\\<chi>i. frechet I (args i) \\<nu> v'))\n  (\\<lambda>v'.\n      FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>)\n       (\\<chi>i. frechet I (args i) \\<nu> v')) =\n  FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>) \\<circ>\n  (\\<lambda>v'. \\<chi>i. frechet I (args i) \\<nu> v')\n\ngoal (1 subgoal):\n 1. frechet I ($f f args) \\<nu> =\n    FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>) \\<circ>\n    (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v)", "by (auto)"], ["proof (state)\nthis:\n  frechet I ($f f args) \\<nu> =\n  FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>) \\<circ>\n  (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  frechet I ($f f args) \\<nu> =\n  FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>) \\<circ>\n  (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>v.\n         Functions I f (\\<chi>i. sterm_sem I (args i) v)) has_derivative\n     frechet I ($f f args) \\<nu>)\n     (at \\<nu>)", "have fDeriv: \"(?f has_derivative ?f') (at (?g \\<nu>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Functions I f has_derivative\n     FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>))\n     (at (\\<chi>i. sterm_sem I (args i) \\<nu>))", "using good_interp is_interp_def"], ["proof (prove)\nusing this:\n  \\<forall>x i. (Functions I i has_derivative FunctionFrechet I i x) (at x)\n  is_interp ?I \\<equiv>\n  \\<forall>x i.\n     (Functions ?I i has_derivative FunctionFrechet ?I i x) (at x) \\<and>\n     continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet ?I i x))\n\ngoal (1 subgoal):\n 1. (Functions I f has_derivative\n     FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>))\n     (at (\\<chi>i. sterm_sem I (args i) \\<nu>))", "by blast"], ["proof (state)\nthis:\n  (Functions I f has_derivative\n   FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>))\n   (at (\\<chi>i. sterm_sem I (args i) \\<nu>))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>v.\n         Functions I f (\\<chi>i. sterm_sem I (args i) v)) has_derivative\n     frechet I ($f f args) \\<nu>)\n     (at \\<nu>)", "from IH"], ["proof (chain)\npicking this:\n  ((\\<lambda>v. \\<chi>i. sterm_sem I (args i) v) has_derivative\n   (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v))\n   (at \\<nu>)", "have gDeriv: \"(?g has_derivative ?g') (at \\<nu>)\""], ["proof (prove)\nusing this:\n  ((\\<lambda>v. \\<chi>i. sterm_sem I (args i) v) has_derivative\n   (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v))\n   (at \\<nu>)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>v. \\<chi>i. sterm_sem I (args i) v) has_derivative\n     (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v))\n     (at \\<nu>)", "by (auto)"], ["proof (state)\nthis:\n  ((\\<lambda>v. \\<chi>i. sterm_sem I (args i) v) has_derivative\n   (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v))\n   (at \\<nu>)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>v.\n         Functions I f (\\<chi>i. sterm_sem I (args i) v)) has_derivative\n     frechet I ($f f args) \\<nu>)\n     (at \\<nu>)", "from fDeriv and gDeriv"], ["proof (chain)\npicking this:\n  (Functions I f has_derivative\n   FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>))\n   (at (\\<chi>i. sterm_sem I (args i) \\<nu>))\n  ((\\<lambda>v. \\<chi>i. sterm_sem I (args i) v) has_derivative\n   (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v))\n   (at \\<nu>)", "have composeDeriv: \"((?f o ?g) has_derivative (?f' o ?g')) (at \\<nu>)\""], ["proof (prove)\nusing this:\n  (Functions I f has_derivative\n   FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>))\n   (at (\\<chi>i. sterm_sem I (args i) \\<nu>))\n  ((\\<lambda>v. \\<chi>i. sterm_sem I (args i) v) has_derivative\n   (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v))\n   (at \\<nu>)\n\ngoal (1 subgoal):\n 1. (Functions I f \\<circ>\n     (\\<lambda>v. \\<chi>i. sterm_sem I (args i) v) has_derivative\n     FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>) \\<circ>\n     (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v))\n     (at \\<nu>)", "using diff_chain_at good_interp"], ["proof (prove)\nusing this:\n  (Functions I f has_derivative\n   FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>))\n   (at (\\<chi>i. sterm_sem I (args i) \\<nu>))\n  ((\\<lambda>v. \\<chi>i. sterm_sem I (args i) v) has_derivative\n   (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v))\n   (at \\<nu>)\n  \\<lbrakk>(?f has_derivative ?f') (at ?x);\n   (?g has_derivative ?g') (at (?f ?x))\\<rbrakk>\n  \\<Longrightarrow> (?g \\<circ> ?f has_derivative ?g' \\<circ> ?f') (at ?x)\n  \\<forall>x i. (Functions I i has_derivative FunctionFrechet I i x) (at x)\n\ngoal (1 subgoal):\n 1. (Functions I f \\<circ>\n     (\\<lambda>v. \\<chi>i. sterm_sem I (args i) v) has_derivative\n     FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>) \\<circ>\n     (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v))\n     (at \\<nu>)", "by blast"], ["proof (state)\nthis:\n  (Functions I f \\<circ>\n   (\\<lambda>v. \\<chi>i. sterm_sem I (args i) v) has_derivative\n   FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>) \\<circ>\n   (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v))\n   (at \\<nu>)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>v.\n         Functions I f (\\<chi>i. sterm_sem I (args i) v)) has_derivative\n     frechet I ($f f args) \\<nu>)\n     (at \\<nu>)", "from hEqFG hEqFG' composeDeriv"], ["proof (chain)\npicking this:\n  (\\<lambda>v. Functions I f (\\<chi>i. sterm_sem I (args i) v)) =\n  Functions I f \\<circ> (\\<lambda>v. \\<chi>i. sterm_sem I (args i) v)\n  frechet I ($f f args) \\<nu> =\n  FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>) \\<circ>\n  (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v)\n  (Functions I f \\<circ>\n   (\\<lambda>v. \\<chi>i. sterm_sem I (args i) v) has_derivative\n   FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>) \\<circ>\n   (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v))\n   (at \\<nu>)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>v. Functions I f (\\<chi>i. sterm_sem I (args i) v)) =\n  Functions I f \\<circ> (\\<lambda>v. \\<chi>i. sterm_sem I (args i) v)\n  frechet I ($f f args) \\<nu> =\n  FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>) \\<circ>\n  (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v)\n  (Functions I f \\<circ>\n   (\\<lambda>v. \\<chi>i. sterm_sem I (args i) v) has_derivative\n   FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) \\<nu>) \\<circ>\n   (\\<lambda>v. \\<chi>i. frechet I (args i) \\<nu> v))\n   (at \\<nu>)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>v.\n         Functions I f (\\<chi>i. sterm_sem I (args i) v)) has_derivative\n     frechet I ($f f args) \\<nu>)\n     (at \\<nu>)", "by (auto)"], ["proof (state)\nthis:\n  ((\\<lambda>v.\n       Functions I f (\\<chi>i. sterm_sem I (args i) v)) has_derivative\n   frechet I ($f f args) \\<nu>)\n   (at \\<nu>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma func_lemma2:\"(\\<forall>x i. (Functions I i has_derivative (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x) (at x) \\<and>\n          continuous_on UNIV (\\<lambda>x. Blinfun ((THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x))) \\<Longrightarrow>\n    (\\<And>\\<theta>. \\<theta> \\<in> range args \\<Longrightarrow> (sterm_sem I \\<theta> has_derivative frechet I \\<theta> \\<nu>) (at \\<nu>)) \\<Longrightarrow>\n    ((\\<lambda>v. Functions I f (vec_lambda(\\<lambda>i. sterm_sem I (args i) v))) has_derivative (\\<lambda>v'. (THE f'. \\<forall>x. (Functions I f has_derivative f' x) (at x)) (\\<chi> i. sterm_sem I (args i) \\<nu>) (\\<chi> i. frechet I (args i) \\<nu> v'))) (at \\<nu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x i.\n                (Functions I i has_derivative\n                 (THE f'.\n                     \\<forall>x. (Functions I i has_derivative f' x) (at x))\n                  x)\n                 (at x) \\<and>\n                continuous_on UNIV\n                 (\\<lambda>x.\n                     Blinfun\n                      ((THE f'.\n                           \\<forall>x.\n                              (Functions I i has_derivative f' x) (at x))\n                        x));\n     \\<And>\\<theta>.\n        \\<theta> \\<in> range args \\<Longrightarrow>\n        (sterm_sem I \\<theta> has_derivative frechet I \\<theta> \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>v.\n                           Functions I f\n                            (\\<chi>i.\n                                sterm_sem I (args i) v)) has_derivative\n                       (\\<lambda>v'.\n                           (THE f'.\n                               \\<forall>x.\n                                  (Functions I f has_derivative f' x)\n                                   (at x))\n                            (\\<chi>i. sterm_sem I (args i) \\<nu>)\n                            (\\<chi>i. frechet I (args i) \\<nu> v')))\n                       (at \\<nu>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x i.\n                (Functions I i has_derivative\n                 (THE f'.\n                     \\<forall>x. (Functions I i has_derivative f' x) (at x))\n                  x)\n                 (at x) \\<and>\n                continuous_on UNIV\n                 (\\<lambda>x.\n                     Blinfun\n                      ((THE f'.\n                           \\<forall>x.\n                              (Functions I i has_derivative f' x) (at x))\n                        x));\n     \\<And>\\<theta>.\n        \\<theta> \\<in> range args \\<Longrightarrow>\n        (sterm_sem I \\<theta> has_derivative frechet I \\<theta> \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>v.\n                           Functions I f\n                            (\\<chi>i.\n                                sterm_sem I (args i) v)) has_derivative\n                       (\\<lambda>v'.\n                           (THE f'.\n                               \\<forall>x.\n                                  (Functions I f has_derivative f' x)\n                                   (at x))\n                            (\\<chi>i. sterm_sem I (args i) \\<nu>)\n                            (\\<chi>i. frechet I (args i) \\<nu> v')))\n                       (at \\<nu>)", "assume a1: \"\\<forall>x i. (Functions I i has_derivative (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x) (at x) \\<and>\n          continuous_on UNIV (\\<lambda>x. Blinfun ((THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x))\""], ["proof (state)\nthis:\n  \\<forall>x i.\n     (Functions I i has_derivative\n      (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x)\n      (at x) \\<and>\n     continuous_on UNIV\n      (\\<lambda>x.\n          Blinfun\n           ((THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x))\n             x))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x i.\n                (Functions I i has_derivative\n                 (THE f'.\n                     \\<forall>x. (Functions I i has_derivative f' x) (at x))\n                  x)\n                 (at x) \\<and>\n                continuous_on UNIV\n                 (\\<lambda>x.\n                     Blinfun\n                      ((THE f'.\n                           \\<forall>x.\n                              (Functions I i has_derivative f' x) (at x))\n                        x));\n     \\<And>\\<theta>.\n        \\<theta> \\<in> range args \\<Longrightarrow>\n        (sterm_sem I \\<theta> has_derivative frechet I \\<theta> \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>v.\n                           Functions I f\n                            (\\<chi>i.\n                                sterm_sem I (args i) v)) has_derivative\n                       (\\<lambda>v'.\n                           (THE f'.\n                               \\<forall>x.\n                                  (Functions I f has_derivative f' x)\n                                   (at x))\n                            (\\<chi>i. sterm_sem I (args i) \\<nu>)\n                            (\\<chi>i. frechet I (args i) \\<nu> v')))\n                       (at \\<nu>)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x i.\n     (Functions I i has_derivative\n      (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x)\n      (at x) \\<and>\n     continuous_on UNIV\n      (\\<lambda>x.\n          Blinfun\n           ((THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x))\n             x))", "have a1':\"\\<forall>x i. (Functions I i has_derivative (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x) (at x)\""], ["proof (prove)\nusing this:\n  \\<forall>x i.\n     (Functions I i has_derivative\n      (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x)\n      (at x) \\<and>\n     continuous_on UNIV\n      (\\<lambda>x.\n          Blinfun\n           ((THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x))\n             x))\n\ngoal (1 subgoal):\n 1. \\<forall>x i.\n       (Functions I i has_derivative\n        (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x)\n        (at x)", "by auto"], ["proof (state)\nthis:\n  \\<forall>x i.\n     (Functions I i has_derivative\n      (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x)\n      (at x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x i.\n                (Functions I i has_derivative\n                 (THE f'.\n                     \\<forall>x. (Functions I i has_derivative f' x) (at x))\n                  x)\n                 (at x) \\<and>\n                continuous_on UNIV\n                 (\\<lambda>x.\n                     Blinfun\n                      ((THE f'.\n                           \\<forall>x.\n                              (Functions I i has_derivative f' x) (at x))\n                        x));\n     \\<And>\\<theta>.\n        \\<theta> \\<in> range args \\<Longrightarrow>\n        (sterm_sem I \\<theta> has_derivative frechet I \\<theta> \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>v.\n                           Functions I f\n                            (\\<chi>i.\n                                sterm_sem I (args i) v)) has_derivative\n                       (\\<lambda>v'.\n                           (THE f'.\n                               \\<forall>x.\n                                  (Functions I f has_derivative f' x)\n                                   (at x))\n                            (\\<chi>i. sterm_sem I (args i) \\<nu>)\n                            (\\<chi>i. frechet I (args i) \\<nu> v')))\n                       (at \\<nu>)", "assume a2: \"\\<And>\\<theta>. \\<theta> \\<in> range args \\<Longrightarrow> (sterm_sem I \\<theta> has_derivative frechet I \\<theta> \\<nu>) (at \\<nu>)\""], ["proof (state)\nthis:\n  ?\\<theta>5 \\<in> range args \\<Longrightarrow>\n  (sterm_sem I ?\\<theta>5 has_derivative frechet I ?\\<theta>5 \\<nu>)\n   (at \\<nu>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x i.\n                (Functions I i has_derivative\n                 (THE f'.\n                     \\<forall>x. (Functions I i has_derivative f' x) (at x))\n                  x)\n                 (at x) \\<and>\n                continuous_on UNIV\n                 (\\<lambda>x.\n                     Blinfun\n                      ((THE f'.\n                           \\<forall>x.\n                              (Functions I i has_derivative f' x) (at x))\n                        x));\n     \\<And>\\<theta>.\n        \\<theta> \\<in> range args \\<Longrightarrow>\n        (sterm_sem I \\<theta> has_derivative frechet I \\<theta> \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>v.\n                           Functions I f\n                            (\\<chi>i.\n                                sterm_sem I (args i) v)) has_derivative\n                       (\\<lambda>v'.\n                           (THE f'.\n                               \\<forall>x.\n                                  (Functions I f has_derivative f' x)\n                                   (at x))\n                            (\\<chi>i. sterm_sem I (args i) \\<nu>)\n                            (\\<chi>i. frechet I (args i) \\<nu> v')))\n                       (at \\<nu>)", "have \"\\<forall>f fa v. (\\<exists>fb. \\<not> (f (fb::'a) has_derivative fa fb (v::(real, 'a) vec)) (at v)) \\<or> ((\\<lambda>v. (\\<chi> fa. (f fa v::real))) has_derivative (\\<lambda>va. (\\<chi> f. fa f v va))) (at v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f fa v.\n       (\\<exists>fb. \\<not> (f fb has_derivative fa fb v) (at v)) \\<or>\n       ((\\<lambda>v. \\<chi>fa. f fa v) has_derivative\n        (\\<lambda>va. \\<chi>f. fa f v va))\n        (at v)", "using has_derivative_vec"], ["proof (prove)\nusing this:\n  (\\<And>i. (?f i has_derivative ?f' i) ?F) \\<Longrightarrow>\n  ((\\<lambda>x. \\<chi>i. ?f i x) has_derivative\n   (\\<lambda>h. \\<chi>i. ?f' i h))\n   ?F\n\ngoal (1 subgoal):\n 1. \\<forall>f fa v.\n       (\\<exists>fb. \\<not> (f fb has_derivative fa fb v) (at v)) \\<or>\n       ((\\<lambda>v. \\<chi>fa. f fa v) has_derivative\n        (\\<lambda>va. \\<chi>f. fa f v va))\n        (at v)", "by force"], ["proof (state)\nthis:\n  \\<forall>f fa v.\n     (\\<exists>fb. \\<not> (f fb has_derivative fa fb v) (at v)) \\<or>\n     ((\\<lambda>v. \\<chi>fa. f fa v) has_derivative\n      (\\<lambda>va. \\<chi>f. fa f v va))\n      (at v)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x i.\n                (Functions I i has_derivative\n                 (THE f'.\n                     \\<forall>x. (Functions I i has_derivative f' x) (at x))\n                  x)\n                 (at x) \\<and>\n                continuous_on UNIV\n                 (\\<lambda>x.\n                     Blinfun\n                      ((THE f'.\n                           \\<forall>x.\n                              (Functions I i has_derivative f' x) (at x))\n                        x));\n     \\<And>\\<theta>.\n        \\<theta> \\<in> range args \\<Longrightarrow>\n        (sterm_sem I \\<theta> has_derivative frechet I \\<theta> \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>v.\n                           Functions I f\n                            (\\<chi>i.\n                                sterm_sem I (args i) v)) has_derivative\n                       (\\<lambda>v'.\n                           (THE f'.\n                               \\<forall>x.\n                                  (Functions I f has_derivative f' x)\n                                   (at x))\n                            (\\<chi>i. sterm_sem I (args i) \\<nu>)\n                            (\\<chi>i. frechet I (args i) \\<nu> v')))\n                       (at \\<nu>)", "then"], ["proof (chain)\npicking this:\n  \\<forall>f fa v.\n     (\\<exists>fb. \\<not> (f fb has_derivative fa fb v) (at v)) \\<or>\n     ((\\<lambda>v. \\<chi>fa. f fa v) has_derivative\n      (\\<lambda>va. \\<chi>f. fa f v va))\n      (at v)", "have \"((\\<lambda>v. \\<chi> f. sterm_sem I (args f) v) has_derivative (\\<lambda>v. \\<chi> f. frechet I (args f) \\<nu> v)) (at \\<nu>)\""], ["proof (prove)\nusing this:\n  \\<forall>f fa v.\n     (\\<exists>fb. \\<not> (f fb has_derivative fa fb v) (at v)) \\<or>\n     ((\\<lambda>v. \\<chi>fa. f fa v) has_derivative\n      (\\<lambda>va. \\<chi>f. fa f v va))\n      (at v)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>v. \\<chi>f. sterm_sem I (args f) v) has_derivative\n     (\\<lambda>v. \\<chi>f. frechet I (args f) \\<nu> v))\n     (at \\<nu>)", "by (auto simp add: a2 has_derivative_vec)"], ["proof (state)\nthis:\n  ((\\<lambda>v. \\<chi>f. sterm_sem I (args f) v) has_derivative\n   (\\<lambda>v. \\<chi>f. frechet I (args f) \\<nu> v))\n   (at \\<nu>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x i.\n                (Functions I i has_derivative\n                 (THE f'.\n                     \\<forall>x. (Functions I i has_derivative f' x) (at x))\n                  x)\n                 (at x) \\<and>\n                continuous_on UNIV\n                 (\\<lambda>x.\n                     Blinfun\n                      ((THE f'.\n                           \\<forall>x.\n                              (Functions I i has_derivative f' x) (at x))\n                        x));\n     \\<And>\\<theta>.\n        \\<theta> \\<in> range args \\<Longrightarrow>\n        (sterm_sem I \\<theta> has_derivative frechet I \\<theta> \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>v.\n                           Functions I f\n                            (\\<chi>i.\n                                sterm_sem I (args i) v)) has_derivative\n                       (\\<lambda>v'.\n                           (THE f'.\n                               \\<forall>x.\n                                  (Functions I f has_derivative f' x)\n                                   (at x))\n                            (\\<chi>i. sterm_sem I (args i) \\<nu>)\n                            (\\<chi>i. frechet I (args i) \\<nu> v')))\n                       (at \\<nu>)", "then"], ["proof (chain)\npicking this:\n  ((\\<lambda>v. \\<chi>f. sterm_sem I (args f) v) has_derivative\n   (\\<lambda>v. \\<chi>f. frechet I (args f) \\<nu> v))\n   (at \\<nu>)", "show \"((\\<lambda>v. Functions I f (vec_lambda(\\<lambda>f. sterm_sem I (args f) v))) has_derivative (\\<lambda>v'. (THE f'. \\<forall>x. (Functions I f has_derivative f' x) (at x)) (\\<chi> i. sterm_sem I (args i) \\<nu>) (\\<chi> i. frechet I (args i) \\<nu> v'))) (at \\<nu>)\""], ["proof (prove)\nusing this:\n  ((\\<lambda>v. \\<chi>f. sterm_sem I (args f) v) has_derivative\n   (\\<lambda>v. \\<chi>f. frechet I (args f) \\<nu> v))\n   (at \\<nu>)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>v.\n         Functions I f (\\<chi>f. sterm_sem I (args f) v)) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I f has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (args i) \\<nu>)\n          (\\<chi>i. frechet I (args i) \\<nu> v')))\n     (at \\<nu>)", "using a1' function_case_inner"], ["proof (prove)\nusing this:\n  ((\\<lambda>v. \\<chi>f. sterm_sem I (args f) v) has_derivative\n   (\\<lambda>v. \\<chi>f. frechet I (args f) \\<nu> v))\n   (at \\<nu>)\n  \\<forall>x i.\n     (Functions I i has_derivative\n      (THE f'. \\<forall>x. (Functions I i has_derivative f' x) (at x)) x)\n      (at x)\n  \\<lbrakk>\\<forall>x i.\n              (Functions ?I i has_derivative FunctionFrechet ?I i x) (at x);\n   ((\\<lambda>v. \\<chi>i. sterm_sem ?I (?args i) v) has_derivative\n    (\\<lambda>v. \\<chi>i. frechet ?I (?args i) ?\\<nu> v))\n    (at ?\\<nu>)\\<rbrakk>\n  \\<Longrightarrow> ((\\<lambda>v.\n                         Functions ?I ?f\n                          (\\<chi>i.\n                              sterm_sem ?I (?args i) v)) has_derivative\n                     frechet ?I ($f ?f ?args) ?\\<nu>)\n                     (at ?\\<nu>)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>v.\n         Functions I f (\\<chi>f. sterm_sem I (args f) v)) has_derivative\n     (\\<lambda>v'.\n         (THE f'. \\<forall>x. (Functions I f has_derivative f' x) (at x))\n          (\\<chi>i. sterm_sem I (args i) \\<nu>)\n          (\\<chi>i. frechet I (args i) \\<nu> v')))\n     (at \\<nu>)", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>v.\n       Functions I f (\\<chi>f. sterm_sem I (args f) v)) has_derivative\n   (\\<lambda>v'.\n       (THE f'. \\<forall>x. (Functions I f has_derivative f' x) (at x))\n        (\\<chi>i. sterm_sem I (args i) \\<nu>)\n        (\\<chi>i. frechet I (args i) \\<nu> v')))\n   (at \\<nu>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma func_lemma:\n  \"is_interp I \\<Longrightarrow>\n  (\\<And>\\<theta> :: ('a::finite, 'c::finite) trm. \\<theta> \\<in> range args \\<Longrightarrow> (sterm_sem I \\<theta> has_derivative frechet I \\<theta> \\<nu>) (at \\<nu>)) \\<Longrightarrow>\n  (sterm_sem I ($f f args) has_derivative frechet I ($f f args) \\<nu>) (at \\<nu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I;\n     \\<And>\\<theta>.\n        \\<theta> \\<in> range args \\<Longrightarrow>\n        (sterm_sem I \\<theta> has_derivative frechet I \\<theta> \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n    \\<Longrightarrow> (sterm_sem I ($f f args) has_derivative\n                       frechet I ($f f args) \\<nu>)\n                       (at \\<nu>)", "apply(auto simp add: sfunction_case is_interp_def function_case_inner)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x i.\n                (Functions I i has_derivative\n                 (THE f'.\n                     \\<forall>x. (Functions I i has_derivative f' x) (at x))\n                  x)\n                 (at x) \\<and>\n                continuous_on UNIV\n                 (\\<lambda>x.\n                     Blinfun\n                      ((THE f'.\n                           \\<forall>x.\n                              (Functions I i has_derivative f' x) (at x))\n                        x));\n     \\<And>\\<theta>.\n        \\<theta> \\<in> range args \\<Longrightarrow>\n        (sterm_sem I \\<theta> has_derivative frechet I \\<theta> \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n    \\<Longrightarrow> ((\\<lambda>v.\n                           Functions I f\n                            (\\<chi>i.\n                                sterm_sem I (args i) v)) has_derivative\n                       (\\<lambda>v'.\n                           (THE f'.\n                               \\<forall>x.\n                                  (Functions I f has_derivative f' x)\n                                   (at x))\n                            (\\<chi>i. sterm_sem I (args i) \\<nu>)\n                            (\\<chi>i. frechet I (args i) \\<nu> v')))\n                       (at \\<nu>)", "apply(erule func_lemma2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<theta>.\n       \\<lbrakk>\\<And>\\<theta>.\n                   \\<theta> \\<in> range args \\<Longrightarrow>\n                   (sterm_sem I \\<theta> has_derivative\n                    frechet I \\<theta> \\<nu>)\n                    (at \\<nu>);\n        \\<theta> \\<in> range args\\<rbrakk>\n       \\<Longrightarrow> (sterm_sem I \\<theta> has_derivative\n                          frechet I \\<theta> \\<nu>)\n                          (at \\<nu>)", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open> The syntactic definition of term derivatives agrees with the semantic definition.\n  Since the syntactic definition of derivative is total, this gives us that derivatives are \"decidable\" for\n  terms (modulo computations on reals) and that they obey all the expected identities, which gives\n  us the axioms we want for differential terms essentially for free.\n \\<close>"], ["", "lemma frechet_correctness:\n  fixes I :: \"('a::finite, 'b::finite, 'c::finite) interp\" and \\<nu>\n  assumes good_interp: \"is_interp I\"\n  shows \"dfree \\<theta> \\<Longrightarrow> FDERIV (sterm_sem I \\<theta>) \\<nu> :> (frechet I \\<theta> \\<nu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree \\<theta> \\<Longrightarrow>\n    (sterm_sem I \\<theta> has_derivative frechet I \\<theta> \\<nu>)\n     (at \\<nu>)", "proof (induct rule: dfree.induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i.\n       (sterm_sem I (Var i) has_derivative frechet I (Var i) \\<nu>)\n        (at \\<nu>)\n 2. \\<And>r.\n       (sterm_sem I (Const r) has_derivative frechet I (Const r) \\<nu>)\n        (at \\<nu>)\n 3. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           (sterm_sem I (args i) has_derivative frechet I (args i) \\<nu>)\n            (at \\<nu>)\\<rbrakk>\n       \\<Longrightarrow> (sterm_sem I ($f i args) has_derivative\n                          frechet I ($f i args) \\<nu>)\n                          (at \\<nu>)\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        (sterm_sem I \\<theta>\\<^sub>1 has_derivative\n         frechet I \\<theta>\\<^sub>1 \\<nu>)\n         (at \\<nu>);\n        dfree \\<theta>\\<^sub>2;\n        (sterm_sem I \\<theta>\\<^sub>2 has_derivative\n         frechet I \\<theta>\\<^sub>2 \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n       \\<Longrightarrow> (sterm_sem I\n                           (Plus \\<theta>\\<^sub>1\n                             \\<theta>\\<^sub>2) has_derivative\n                          frechet I (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)\n                           \\<nu>)\n                          (at \\<nu>)\n 5. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        (sterm_sem I \\<theta>\\<^sub>1 has_derivative\n         frechet I \\<theta>\\<^sub>1 \\<nu>)\n         (at \\<nu>);\n        dfree \\<theta>\\<^sub>2;\n        (sterm_sem I \\<theta>\\<^sub>2 has_derivative\n         frechet I \\<theta>\\<^sub>2 \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n       \\<Longrightarrow> (sterm_sem I\n                           (Times \\<theta>\\<^sub>1\n                             \\<theta>\\<^sub>2) has_derivative\n                          frechet I\n                           (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) \\<nu>)\n                          (at \\<nu>)", "case (dfree_Var i)"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>i.\n       (sterm_sem I (Var i) has_derivative frechet I (Var i) \\<nu>)\n        (at \\<nu>)\n 2. \\<And>r.\n       (sterm_sem I (Const r) has_derivative frechet I (Const r) \\<nu>)\n        (at \\<nu>)\n 3. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           (sterm_sem I (args i) has_derivative frechet I (args i) \\<nu>)\n            (at \\<nu>)\\<rbrakk>\n       \\<Longrightarrow> (sterm_sem I ($f i args) has_derivative\n                          frechet I ($f i args) \\<nu>)\n                          (at \\<nu>)\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        (sterm_sem I \\<theta>\\<^sub>1 has_derivative\n         frechet I \\<theta>\\<^sub>1 \\<nu>)\n         (at \\<nu>);\n        dfree \\<theta>\\<^sub>2;\n        (sterm_sem I \\<theta>\\<^sub>2 has_derivative\n         frechet I \\<theta>\\<^sub>2 \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n       \\<Longrightarrow> (sterm_sem I\n                           (Plus \\<theta>\\<^sub>1\n                             \\<theta>\\<^sub>2) has_derivative\n                          frechet I (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)\n                           \\<nu>)\n                          (at \\<nu>)\n 5. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        (sterm_sem I \\<theta>\\<^sub>1 has_derivative\n         frechet I \\<theta>\\<^sub>1 \\<nu>)\n         (at \\<nu>);\n        dfree \\<theta>\\<^sub>2;\n        (sterm_sem I \\<theta>\\<^sub>2 has_derivative\n         frechet I \\<theta>\\<^sub>2 \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n       \\<Longrightarrow> (sterm_sem I\n                           (Times \\<theta>\\<^sub>1\n                             \\<theta>\\<^sub>2) has_derivative\n                          frechet I\n                           (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) \\<nu>)\n                          (at \\<nu>)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (sterm_sem I (Var i) has_derivative frechet I (Var i) \\<nu>) (at \\<nu>)", "by (auto simp add: svar_case svar_deriv axis_def)"], ["proof (state)\nthis:\n  (sterm_sem I (Var i) has_derivative frechet I (Var i) \\<nu>) (at \\<nu>)\n\ngoal (4 subgoals):\n 1. \\<And>r.\n       (sterm_sem I (Const r) has_derivative frechet I (Const r) \\<nu>)\n        (at \\<nu>)\n 2. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           (sterm_sem I (args i) has_derivative frechet I (args i) \\<nu>)\n            (at \\<nu>)\\<rbrakk>\n       \\<Longrightarrow> (sterm_sem I ($f i args) has_derivative\n                          frechet I ($f i args) \\<nu>)\n                          (at \\<nu>)\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        (sterm_sem I \\<theta>\\<^sub>1 has_derivative\n         frechet I \\<theta>\\<^sub>1 \\<nu>)\n         (at \\<nu>);\n        dfree \\<theta>\\<^sub>2;\n        (sterm_sem I \\<theta>\\<^sub>2 has_derivative\n         frechet I \\<theta>\\<^sub>2 \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n       \\<Longrightarrow> (sterm_sem I\n                           (Plus \\<theta>\\<^sub>1\n                             \\<theta>\\<^sub>2) has_derivative\n                          frechet I (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)\n                           \\<nu>)\n                          (at \\<nu>)\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        (sterm_sem I \\<theta>\\<^sub>1 has_derivative\n         frechet I \\<theta>\\<^sub>1 \\<nu>)\n         (at \\<nu>);\n        dfree \\<theta>\\<^sub>2;\n        (sterm_sem I \\<theta>\\<^sub>2 has_derivative\n         frechet I \\<theta>\\<^sub>2 \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n       \\<Longrightarrow> (sterm_sem I\n                           (Times \\<theta>\\<^sub>1\n                             \\<theta>\\<^sub>2) has_derivative\n                          frechet I\n                           (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) \\<nu>)\n                          (at \\<nu>)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>r.\n       (sterm_sem I (Const r) has_derivative frechet I (Const r) \\<nu>)\n        (at \\<nu>)\n 2. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           (sterm_sem I (args i) has_derivative frechet I (args i) \\<nu>)\n            (at \\<nu>)\\<rbrakk>\n       \\<Longrightarrow> (sterm_sem I ($f i args) has_derivative\n                          frechet I ($f i args) \\<nu>)\n                          (at \\<nu>)\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        (sterm_sem I \\<theta>\\<^sub>1 has_derivative\n         frechet I \\<theta>\\<^sub>1 \\<nu>)\n         (at \\<nu>);\n        dfree \\<theta>\\<^sub>2;\n        (sterm_sem I \\<theta>\\<^sub>2 has_derivative\n         frechet I \\<theta>\\<^sub>2 \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n       \\<Longrightarrow> (sterm_sem I\n                           (Plus \\<theta>\\<^sub>1\n                             \\<theta>\\<^sub>2) has_derivative\n                          frechet I (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)\n                           \\<nu>)\n                          (at \\<nu>)\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        (sterm_sem I \\<theta>\\<^sub>1 has_derivative\n         frechet I \\<theta>\\<^sub>1 \\<nu>)\n         (at \\<nu>);\n        dfree \\<theta>\\<^sub>2;\n        (sterm_sem I \\<theta>\\<^sub>2 has_derivative\n         frechet I \\<theta>\\<^sub>2 \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n       \\<Longrightarrow> (sterm_sem I\n                           (Times \\<theta>\\<^sub>1\n                             \\<theta>\\<^sub>2) has_derivative\n                          frechet I\n                           (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) \\<nu>)\n                          (at \\<nu>)", "case (dfree_Fun args i)"], ["proof (state)\nthis:\n  dfree (args ?i5)\n  (sterm_sem I (args ?i5) has_derivative frechet I (args ?i5) \\<nu>)\n   (at \\<nu>)\n\ngoal (4 subgoals):\n 1. \\<And>r.\n       (sterm_sem I (Const r) has_derivative frechet I (Const r) \\<nu>)\n        (at \\<nu>)\n 2. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           (sterm_sem I (args i) has_derivative frechet I (args i) \\<nu>)\n            (at \\<nu>)\\<rbrakk>\n       \\<Longrightarrow> (sterm_sem I ($f i args) has_derivative\n                          frechet I ($f i args) \\<nu>)\n                          (at \\<nu>)\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        (sterm_sem I \\<theta>\\<^sub>1 has_derivative\n         frechet I \\<theta>\\<^sub>1 \\<nu>)\n         (at \\<nu>);\n        dfree \\<theta>\\<^sub>2;\n        (sterm_sem I \\<theta>\\<^sub>2 has_derivative\n         frechet I \\<theta>\\<^sub>2 \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n       \\<Longrightarrow> (sterm_sem I\n                           (Plus \\<theta>\\<^sub>1\n                             \\<theta>\\<^sub>2) has_derivative\n                          frechet I (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)\n                           \\<nu>)\n                          (at \\<nu>)\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        (sterm_sem I \\<theta>\\<^sub>1 has_derivative\n         frechet I \\<theta>\\<^sub>1 \\<nu>)\n         (at \\<nu>);\n        dfree \\<theta>\\<^sub>2;\n        (sterm_sem I \\<theta>\\<^sub>2 has_derivative\n         frechet I \\<theta>\\<^sub>2 \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n       \\<Longrightarrow> (sterm_sem I\n                           (Times \\<theta>\\<^sub>1\n                             \\<theta>\\<^sub>2) has_derivative\n                          frechet I\n                           (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) \\<nu>)\n                          (at \\<nu>)", "with good_interp"], ["proof (chain)\npicking this:\n  is_interp I\n  dfree (args ?i5)\n  (sterm_sem I (args ?i5) has_derivative frechet I (args ?i5) \\<nu>)\n   (at \\<nu>)", "show ?case"], ["proof (prove)\nusing this:\n  is_interp I\n  dfree (args ?i5)\n  (sterm_sem I (args ?i5) has_derivative frechet I (args ?i5) \\<nu>)\n   (at \\<nu>)\n\ngoal (1 subgoal):\n 1. (sterm_sem I ($f i args) has_derivative frechet I ($f i args) \\<nu>)\n     (at \\<nu>)", "by (intro func_lemma) auto"], ["proof (state)\nthis:\n  (sterm_sem I ($f i args) has_derivative frechet I ($f i args) \\<nu>)\n   (at \\<nu>)\n\ngoal (3 subgoals):\n 1. \\<And>r.\n       (sterm_sem I (Const r) has_derivative frechet I (Const r) \\<nu>)\n        (at \\<nu>)\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        (sterm_sem I \\<theta>\\<^sub>1 has_derivative\n         frechet I \\<theta>\\<^sub>1 \\<nu>)\n         (at \\<nu>);\n        dfree \\<theta>\\<^sub>2;\n        (sterm_sem I \\<theta>\\<^sub>2 has_derivative\n         frechet I \\<theta>\\<^sub>2 \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n       \\<Longrightarrow> (sterm_sem I\n                           (Plus \\<theta>\\<^sub>1\n                             \\<theta>\\<^sub>2) has_derivative\n                          frechet I (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)\n                           \\<nu>)\n                          (at \\<nu>)\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        (sterm_sem I \\<theta>\\<^sub>1 has_derivative\n         frechet I \\<theta>\\<^sub>1 \\<nu>)\n         (at \\<nu>);\n        dfree \\<theta>\\<^sub>2;\n        (sterm_sem I \\<theta>\\<^sub>2 has_derivative\n         frechet I \\<theta>\\<^sub>2 \\<nu>)\n         (at \\<nu>)\\<rbrakk>\n       \\<Longrightarrow> (sterm_sem I\n                           (Times \\<theta>\\<^sub>1\n                             \\<theta>\\<^sub>2) has_derivative\n                          frechet I\n                           (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) \\<nu>)\n                          (at \\<nu>)", "qed auto"], ["", "text \\<open>If terms are semantically equivalent in all states, so are their derivatives\\<close>"], ["", "lemma sterm_determines_frechet:\n  fixes I ::\"('a1::finite, 'b1::finite, 'c::finite) interp\"\n    and J ::\"('a2::finite, 'b2::finite, 'c::finite) interp\"\n    and \\<theta>1 :: \"('a1::finite, 'c::finite) trm\"\n    and \\<theta>2 :: \"('a2::finite, 'c::finite) trm\"\n    and \\<nu> \n  assumes good_interp1:\"is_interp I\"\n  assumes good_interp2:\"is_interp J\"\n  assumes free1:\"dfree \\<theta>1\"\n  assumes free2:\"dfree \\<theta>2\"\n  assumes sem:\"sterm_sem I \\<theta>1 = sterm_sem J \\<theta>2\"\n  shows \"frechet I \\<theta>1 (fst \\<nu>) (snd \\<nu>) = frechet J \\<theta>2 (fst \\<nu>) (snd \\<nu>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. frechet I \\<theta>1 (fst \\<nu>) (snd \\<nu>) =\n    frechet J \\<theta>2 (fst \\<nu>) (snd \\<nu>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. frechet I \\<theta>1 (fst \\<nu>) (snd \\<nu>) =\n    frechet J \\<theta>2 (fst \\<nu>) (snd \\<nu>)", "have d1:\"(sterm_sem I \\<theta>1 has_derivative (frechet I \\<theta>1 (fst \\<nu>))) (at (fst \\<nu>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sterm_sem I \\<theta>1 has_derivative frechet I \\<theta>1 (fst \\<nu>))\n     (at (fst \\<nu>))", "using frechet_correctness[OF good_interp1 free1]"], ["proof (prove)\nusing this:\n  (sterm_sem I \\<theta>1 has_derivative frechet I \\<theta>1 ?\\<nu>)\n   (at ?\\<nu>)\n\ngoal (1 subgoal):\n 1. (sterm_sem I \\<theta>1 has_derivative frechet I \\<theta>1 (fst \\<nu>))\n     (at (fst \\<nu>))", "by auto"], ["proof (state)\nthis:\n  (sterm_sem I \\<theta>1 has_derivative frechet I \\<theta>1 (fst \\<nu>))\n   (at (fst \\<nu>))\n\ngoal (1 subgoal):\n 1. frechet I \\<theta>1 (fst \\<nu>) (snd \\<nu>) =\n    frechet J \\<theta>2 (fst \\<nu>) (snd \\<nu>)", "have d2:\"(sterm_sem J \\<theta>2 has_derivative (frechet J \\<theta>2 (fst \\<nu>))) (at (fst \\<nu>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sterm_sem J \\<theta>2 has_derivative frechet J \\<theta>2 (fst \\<nu>))\n     (at (fst \\<nu>))", "using frechet_correctness[OF good_interp2 free2]"], ["proof (prove)\nusing this:\n  (sterm_sem J \\<theta>2 has_derivative frechet J \\<theta>2 ?\\<nu>)\n   (at ?\\<nu>)\n\ngoal (1 subgoal):\n 1. (sterm_sem J \\<theta>2 has_derivative frechet J \\<theta>2 (fst \\<nu>))\n     (at (fst \\<nu>))", "by auto"], ["proof (state)\nthis:\n  (sterm_sem J \\<theta>2 has_derivative frechet J \\<theta>2 (fst \\<nu>))\n   (at (fst \\<nu>))\n\ngoal (1 subgoal):\n 1. frechet I \\<theta>1 (fst \\<nu>) (snd \\<nu>) =\n    frechet J \\<theta>2 (fst \\<nu>) (snd \\<nu>)", "then"], ["proof (chain)\npicking this:\n  (sterm_sem J \\<theta>2 has_derivative frechet J \\<theta>2 (fst \\<nu>))\n   (at (fst \\<nu>))", "have d1':\"(sterm_sem I \\<theta>1 has_derivative (frechet J \\<theta>2 (fst \\<nu>))) (at (fst \\<nu>))\""], ["proof (prove)\nusing this:\n  (sterm_sem J \\<theta>2 has_derivative frechet J \\<theta>2 (fst \\<nu>))\n   (at (fst \\<nu>))\n\ngoal (1 subgoal):\n 1. (sterm_sem I \\<theta>1 has_derivative frechet J \\<theta>2 (fst \\<nu>))\n     (at (fst \\<nu>))", "using sem"], ["proof (prove)\nusing this:\n  (sterm_sem J \\<theta>2 has_derivative frechet J \\<theta>2 (fst \\<nu>))\n   (at (fst \\<nu>))\n  sterm_sem I \\<theta>1 = sterm_sem J \\<theta>2\n\ngoal (1 subgoal):\n 1. (sterm_sem I \\<theta>1 has_derivative frechet J \\<theta>2 (fst \\<nu>))\n     (at (fst \\<nu>))", "by auto"], ["proof (state)\nthis:\n  (sterm_sem I \\<theta>1 has_derivative frechet J \\<theta>2 (fst \\<nu>))\n   (at (fst \\<nu>))\n\ngoal (1 subgoal):\n 1. frechet I \\<theta>1 (fst \\<nu>) (snd \\<nu>) =\n    frechet J \\<theta>2 (fst \\<nu>) (snd \\<nu>)", "thus \"?thesis\""], ["proof (prove)\nusing this:\n  (sterm_sem I \\<theta>1 has_derivative frechet J \\<theta>2 (fst \\<nu>))\n   (at (fst \\<nu>))\n\ngoal (1 subgoal):\n 1. frechet I \\<theta>1 (fst \\<nu>) (snd \\<nu>) =\n    frechet J \\<theta>2 (fst \\<nu>) (snd \\<nu>)", "using has_derivative_unique d1 d1'"], ["proof (prove)\nusing this:\n  (sterm_sem I \\<theta>1 has_derivative frechet J \\<theta>2 (fst \\<nu>))\n   (at (fst \\<nu>))\n  \\<lbrakk>(?f has_derivative ?F) (at ?x);\n   (?f has_derivative ?F') (at ?x)\\<rbrakk>\n  \\<Longrightarrow> ?F = ?F'\n  (sterm_sem I \\<theta>1 has_derivative frechet I \\<theta>1 (fst \\<nu>))\n   (at (fst \\<nu>))\n  (sterm_sem I \\<theta>1 has_derivative frechet J \\<theta>2 (fst \\<nu>))\n   (at (fst \\<nu>))\n\ngoal (1 subgoal):\n 1. frechet I \\<theta>1 (fst \\<nu>) (snd \\<nu>) =\n    frechet J \\<theta>2 (fst \\<nu>) (snd \\<nu>)", "by metis"], ["proof (state)\nthis:\n  frechet I \\<theta>1 (fst \\<nu>) (snd \\<nu>) =\n  frechet J \\<theta>2 (fst \\<nu>) (snd \\<nu>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma the_deriv:\n  assumes deriv:\"(f has_derivative F) (at x)\"\n  shows \"(THE G. (f has_derivative G) (at x)) = F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE G. (f has_derivative G) (at x)) = F", "apply(rule the_equality)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (f has_derivative F) (at x)\n 2. \\<And>G. (f has_derivative G) (at x) \\<Longrightarrow> G = F", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f has_derivative F) (at x)", "by (rule deriv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G. (f has_derivative G) (at x) \\<Longrightarrow> G = F", "subgoal for G"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f has_derivative G) (at x) \\<Longrightarrow> G = F", "by (auto simp add: deriv has_derivative_unique)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma the_all_deriv:\n  assumes deriv:\"\\<forall>x. (f has_derivative F x) (at x)\"\n  shows \"(THE G. \\<forall> x. (f has_derivative G x) (at x)) = F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE G. \\<forall>x. (f has_derivative G x) (at x)) = F", "apply(rule the_equality)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>x. (f has_derivative F x) (at x)\n 2. \\<And>G.\n       \\<forall>x. (f has_derivative G x) (at x) \\<Longrightarrow> G = F", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. (f has_derivative F x) (at x)", "by (rule deriv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>G.\n       \\<forall>x. (f has_derivative G x) (at x) \\<Longrightarrow> G = F", "subgoal for G"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. (f has_derivative G x) (at x) \\<Longrightarrow> G = F", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>x. (f has_derivative G x) (at x) \\<Longrightarrow> G x = F x", "subgoal for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. (f has_derivative G x) (at x) \\<Longrightarrow> G x = F x", "apply(erule allE[where x=x])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f has_derivative G x) (at x) \\<Longrightarrow> G x = F x", "by (auto simp add: deriv has_derivative_unique)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "typedef ('a, 'c) strm = \"{\\<theta>:: ('a,'c) trm. dfree \\<theta>}\"\n  morphisms raw_term simple_term"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {\\<theta>. dfree \\<theta>}", "by(rule exI[where x= \"Const 0\"], auto simp add: dfree_Const)"], ["", "typedef ('a, 'b, 'c) good_interp = \"{I::('a::finite,'b::finite,'c::finite) interp. is_interp I}\"\n  morphisms raw_interp good_interp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {I. is_interp I}", "apply(rule exI[where x=\"\\<lparr> Functions = (\\<lambda>f x. 0), Predicates = (\\<lambda>p x. True), Contexts = (\\<lambda>C S. S), Programs = (\\<lambda>a. {}), ODEs = (\\<lambda>c v. (\\<chi> i. 0)), ODEBV = \\<lambda>c. {}\\<rparr>\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>Functions = \\<lambda>f x. 0, Predicates = \\<lambda>p x. True,\n       Contexts = \\<lambda>C S. S, Programs = \\<lambda>a. {},\n       ODEs = \\<lambda>c v. \\<chi>i. 0, ODEBV = \\<lambda>c. {}\\<rparr>\n    \\<in> {I. is_interp I}", "apply(auto simp add: is_interp_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       ((\\<lambda>x. 0) has_derivative\n        (THE f'. \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x))\n         x)\n        (at x)\n 2. continuous_on UNIV\n     (\\<lambda>x.\n         Blinfun\n          ((THE f'.\n               \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x))\n            x))", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       ((\\<lambda>x. 0) has_derivative\n        (THE f'. \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x))\n         x)\n        (at x)\n 2. continuous_on UNIV\n     (\\<lambda>x.\n         Blinfun\n          ((THE f'.\n               \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x))\n            x))", "fix x ::real"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       ((\\<lambda>x. 0) has_derivative\n        (THE f'. \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x))\n         x)\n        (at x)\n 2. continuous_on UNIV\n     (\\<lambda>x.\n         Blinfun\n          ((THE f'.\n               \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x))\n            x))", "have eq:\"(THE f'. \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x)) = (\\<lambda>_ _. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE f'. \\<forall>x. ((\\<lambda>x. 0::'e) has_derivative f' x) (at x)) =\n    (\\<lambda>_ _. 0::'e)", "by(rule the_all_deriv, auto)"], ["proof (state)\nthis:\n  (THE f'. \\<forall>x. ((\\<lambda>x. 0::?'e6) has_derivative f' x) (at x)) =\n  (\\<lambda>_ _. 0::?'e6)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       ((\\<lambda>x. 0) has_derivative\n        (THE f'. \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x))\n         x)\n        (at x)\n 2. continuous_on UNIV\n     (\\<lambda>x.\n         Blinfun\n          ((THE f'.\n               \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x))\n            x))", "have eq':\"(THE f'. \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x)) x = (\\<lambda>_. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE f'. \\<forall>x. ((\\<lambda>x. 0::'d) has_derivative f' x) (at x))\n     x =\n    (\\<lambda>_. 0::'d)", "by (simp add: eq)"], ["proof (state)\nthis:\n  (THE f'. \\<forall>x. ((\\<lambda>x. 0::?'d7) has_derivative f' x) (at x))\n   x =\n  (\\<lambda>_. 0::?'d7)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       ((\\<lambda>x. 0) has_derivative\n        (THE f'. \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x))\n         x)\n        (at x)\n 2. continuous_on UNIV\n     (\\<lambda>x.\n         Blinfun\n          ((THE f'.\n               \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x))\n            x))", "have deriv:\"((\\<lambda>x.0) has_derivative (\\<lambda>x. 0)) (at x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. 0::'d) has_derivative (\\<lambda>x. 0::'d)) (at x)", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>x. 0::?'d8) has_derivative (\\<lambda>x. 0::?'d8)) (at x)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       ((\\<lambda>x. 0) has_derivative\n        (THE f'. \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x))\n         x)\n        (at x)\n 2. continuous_on UNIV\n     (\\<lambda>x.\n         Blinfun\n          ((THE f'.\n               \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x))\n            x))", "then"], ["proof (chain)\npicking this:\n  ((\\<lambda>x. 0::?'d8) has_derivative (\\<lambda>x. 0::?'d8)) (at x)", "show \"\\<And>x. ((\\<lambda>x. 0) has_derivative (THE f'. \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x)) x) (at x)\""], ["proof (prove)\nusing this:\n  ((\\<lambda>x. 0::?'d8) has_derivative (\\<lambda>x. 0::?'d8)) (at x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       ((\\<lambda>x. 0::'e) has_derivative\n        (THE f'.\n            \\<forall>x. ((\\<lambda>x. 0::'e) has_derivative f' x) (at x))\n         x)\n        (at x)", "by (auto simp add: eq eq' deriv)"], ["proof (state)\nthis:\n  ((\\<lambda>x. 0::?'e9) has_derivative\n   (THE f'. \\<forall>x. ((\\<lambda>x. 0::?'e9) has_derivative f' x) (at x))\n    ?x8)\n   (at ?x8)\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         Blinfun\n          ((THE f'.\n               \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x))\n            x))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         Blinfun\n          ((THE f'.\n               \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x))\n            x))", "have eq:\"(THE f'. \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x)) = (\\<lambda>_ _. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE f'. \\<forall>x. ((\\<lambda>x. 0::'e) has_derivative f' x) (at x)) =\n    (\\<lambda>_ _. 0::'e)", "by(rule the_all_deriv, auto)"], ["proof (state)\nthis:\n  (THE f'. \\<forall>x. ((\\<lambda>x. 0::?'e6) has_derivative f' x) (at x)) =\n  (\\<lambda>_ _. 0::?'e6)\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         Blinfun\n          ((THE f'.\n               \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x))\n            x))", "have eq':\"\\<forall>x. (THE f'. \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x)) x = (\\<lambda>_. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (THE f'.\n           \\<forall>x. ((\\<lambda>x. 0::'e) has_derivative f' x) (at x))\n        x =\n       (\\<lambda>_. 0::'e)", "by (simp add: eq)"], ["proof (state)\nthis:\n  \\<forall>x.\n     (THE f'.\n         \\<forall>x. ((\\<lambda>x. 0::?'e7) has_derivative f' x) (at x))\n      x =\n     (\\<lambda>_. 0::?'e7)\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         Blinfun\n          ((THE f'.\n               \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x))\n            x))", "have deriv:\"\\<And>x. ((\\<lambda>x.0) has_derivative (\\<lambda>x. 0)) (at x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. ((\\<lambda>x. 0::'e) has_derivative (\\<lambda>x. 0::'e)) (at x)", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>x. 0::?'e8) has_derivative (\\<lambda>x. 0::?'e8)) (at ?x7)\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         Blinfun\n          ((THE f'.\n               \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x))\n            x))", "have blin:\"\\<And>x. bounded_linear ((THE f'. \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x)) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       bounded_linear\n        ((THE f'.\n             \\<forall>x. ((\\<lambda>x. 0::'e) has_derivative f' x) (at x))\n          x)", "by (simp add: eq')"], ["proof (state)\nthis:\n  bounded_linear\n   ((THE f'. \\<forall>x. ((\\<lambda>x. 0::?'e9) has_derivative f' x) (at x))\n     ?x8)\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         Blinfun\n          ((THE f'.\n               \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x))\n            x))", "show \" continuous_on UNIV (\\<lambda>x. Blinfun ((THE f'. \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x)) x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         Blinfun\n          ((THE f'.\n               \\<forall>x. ((\\<lambda>x. 0::'e) has_derivative f' x) (at x))\n            x))", "apply(clarsimp simp add: continuous_on_topological[of UNIV \"(\\<lambda>x. Blinfun ((THE f'. \\<forall>x. ((\\<lambda>x. 0) has_derivative f' x) (at x)) x))\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x B.\n       \\<lbrakk>open B;\n        Blinfun\n         ((THE f'.\n              \\<forall>x. ((\\<lambda>x. 0::'e) has_derivative f' x) (at x))\n           x)\n        \\<in> B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>A.\n                            open A \\<and>\n                            x \\<in> A \\<and>\n                            (\\<forall>y.\n                                y \\<in> A \\<longrightarrow>\n                                Blinfun\n                                 ((THE f'.\n\\<forall>x. ((\\<lambda>x. 0::'e) has_derivative f' x) (at x))\n                                   y)\n                                \\<in> B)", "apply(rule exI[where x = UNIV])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x B.\n       \\<lbrakk>open B;\n        Blinfun\n         ((THE f'.\n              \\<forall>x. ((\\<lambda>x. 0::'e) has_derivative f' x) (at x))\n           x)\n        \\<in> B\\<rbrakk>\n       \\<Longrightarrow> open UNIV \\<and>\n                         x \\<in> UNIV \\<and>\n                         (\\<forall>y.\n                             y \\<in> UNIV \\<longrightarrow>\n                             Blinfun\n                              ((THE f'.\n                                   \\<forall>x.\n((\\<lambda>x. 0::'e) has_derivative f' x) (at x))\n                                y)\n                             \\<in> B)", "by(auto simp add: eq' blin)"], ["proof (state)\nthis:\n  continuous_on UNIV\n   (\\<lambda>x.\n       Blinfun\n        ((THE f'.\n             \\<forall>x.\n                ((\\<lambda>x. 0::?'e10) has_derivative f' x) (at x))\n          x))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma frechet_linear: \n  assumes good_interp:\"is_interp I\"\n  fixes v \\<theta>\n  shows \" dfree \\<theta> \\<Longrightarrow> bounded_linear (frechet I \\<theta> v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree \\<theta> \\<Longrightarrow> bounded_linear (frechet I \\<theta> v)", "proof(induction rule: dfree.induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i. bounded_linear (frechet I (Var i) v)\n 2. \\<And>r. bounded_linear (frechet I (Const r) v)\n 3. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i. bounded_linear (frechet I (args i) v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear (frechet I ($f i args) v)\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)\n 5. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)", "case (dfree_Var i)"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>i. bounded_linear (frechet I (Var i) v)\n 2. \\<And>r. bounded_linear (frechet I (Const r) v)\n 3. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i. bounded_linear (frechet I (args i) v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear (frechet I ($f i args) v)\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)\n 5. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_linear (frechet I (Var i) v)", "by(auto)"], ["proof (state)\nthis:\n  bounded_linear (frechet I (Var i) v)\n\ngoal (4 subgoals):\n 1. \\<And>r. bounded_linear (frechet I (Const r) v)\n 2. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i. bounded_linear (frechet I (args i) v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear (frechet I ($f i args) v)\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>r. bounded_linear (frechet I (Const r) v)\n 2. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i. bounded_linear (frechet I (args i) v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear (frechet I ($f i args) v)\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)", "case (dfree_Const r)"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>r. bounded_linear (frechet I (Const r) v)\n 2. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i. bounded_linear (frechet I (args i) v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear (frechet I ($f i args) v)\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_linear (frechet I (Const r) v)", "by auto"], ["proof (state)\nthis:\n  bounded_linear (frechet I (Const r) v)\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i. bounded_linear (frechet I (args i) v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear (frechet I ($f i args) v)\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i. bounded_linear (frechet I (args i) v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear (frechet I ($f i args) v)\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)", "case (dfree_Fun args i)"], ["proof (state)\nthis:\n  dfree (args ?i5)\n  bounded_linear (frechet I (args ?i5) v)\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i. bounded_linear (frechet I (args i) v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear (frechet I ($f i args) v)\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)", "have blin1:\"\\<And>x. bounded_linear(FunctionFrechet I i x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. bounded_linear (FunctionFrechet I i x)", "using good_interp"], ["proof (prove)\nusing this:\n  is_interp I\n\ngoal (1 subgoal):\n 1. \\<And>x. bounded_linear (FunctionFrechet I i x)", "unfolding is_interp_def"], ["proof (prove)\nusing this:\n  \\<forall>x i.\n     (Functions I i has_derivative FunctionFrechet I i x) (at x) \\<and>\n     continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet I i x))\n\ngoal (1 subgoal):\n 1. \\<And>x. bounded_linear (FunctionFrechet I i x)", "using has_derivative_bounded_linear"], ["proof (prove)\nusing this:\n  \\<forall>x i.\n     (Functions I i has_derivative FunctionFrechet I i x) (at x) \\<and>\n     continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet I i x))\n  (?f has_derivative ?f') ?F \\<Longrightarrow> bounded_linear ?f'\n\ngoal (1 subgoal):\n 1. \\<And>x. bounded_linear (FunctionFrechet I i x)", "by blast"], ["proof (state)\nthis:\n  bounded_linear (FunctionFrechet I i ?x5)\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i. bounded_linear (frechet I (args i) v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear (frechet I ($f i args) v)\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)", "have blin2:\"bounded_linear (\\<lambda> a. (\\<chi> i. frechet I (args i) v a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_linear (\\<lambda>a. \\<chi>i. frechet I (args i) v a)", "using dfree_Fun.IH"], ["proof (prove)\nusing this:\n  bounded_linear (frechet I (args ?i5) v)\n\ngoal (1 subgoal):\n 1. bounded_linear (\\<lambda>a. \\<chi>i. frechet I (args i) v a)", "by(rule bounded_linear_vec)"], ["proof (state)\nthis:\n  bounded_linear (\\<lambda>a. \\<chi>i. frechet I (args i) v a)\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i. bounded_linear (frechet I (args i) v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear (frechet I ($f i args) v)\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)", "then"], ["proof (chain)\npicking this:\n  bounded_linear (\\<lambda>a. \\<chi>i. frechet I (args i) v a)", "show ?case"], ["proof (prove)\nusing this:\n  bounded_linear (\\<lambda>a. \\<chi>i. frechet I (args i) v a)\n\ngoal (1 subgoal):\n 1. bounded_linear (frechet I ($f i args) v)", "using bounded_linear_compose[of \"FunctionFrechet I i (\\<chi> i. sterm_sem I (args i) v)\" \"(\\<lambda>a. (\\<chi> i. frechet I (args i) v a))\", OF blin1 blin2]"], ["proof (prove)\nusing this:\n  bounded_linear (\\<lambda>a. \\<chi>i. frechet I (args i) v a)\n  bounded_linear\n   (\\<lambda>x.\n       FunctionFrechet I i (\\<chi>i. sterm_sem I (args i) v)\n        (\\<chi>i. frechet I (args i) v x))\n\ngoal (1 subgoal):\n 1. bounded_linear (frechet I ($f i args) v)", "by auto"], ["proof (state)\nthis:\n  bounded_linear (frechet I ($f i args) v)\n\ngoal (2 subgoals):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)", "case (dfree_Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)"], ["proof (state)\nthis:\n  dfree \\<theta>\\<^sub>1\n  dfree \\<theta>\\<^sub>2\n  bounded_linear (frechet I \\<theta>\\<^sub>1 v)\n  bounded_linear (frechet I \\<theta>\\<^sub>2 v)\n\ngoal (2 subgoals):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)", "then"], ["proof (chain)\npicking this:\n  dfree \\<theta>\\<^sub>1\n  dfree \\<theta>\\<^sub>2\n  bounded_linear (frechet I \\<theta>\\<^sub>1 v)\n  bounded_linear (frechet I \\<theta>\\<^sub>2 v)", "show ?case"], ["proof (prove)\nusing this:\n  dfree \\<theta>\\<^sub>1\n  dfree \\<theta>\\<^sub>2\n  bounded_linear (frechet I \\<theta>\\<^sub>1 v)\n  bounded_linear (frechet I \\<theta>\\<^sub>2 v)\n\ngoal (1 subgoal):\n 1. bounded_linear (frechet I (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dfree \\<theta>\\<^sub>1; dfree \\<theta>\\<^sub>2;\n     bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n     bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n    \\<Longrightarrow> bounded_linear\n                       (\\<lambda>a.\n                           frechet I \\<theta>\\<^sub>1 v a +\n                           frechet I \\<theta>\\<^sub>2 v a)", "using bounded_linear_add"], ["proof (prove)\nusing this:\n  \\<lbrakk>bounded_linear ?f; bounded_linear ?g\\<rbrakk>\n  \\<Longrightarrow> bounded_linear (\\<lambda>x. ?f x + ?g x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>dfree \\<theta>\\<^sub>1; dfree \\<theta>\\<^sub>2;\n     bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n     bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n    \\<Longrightarrow> bounded_linear\n                       (\\<lambda>a.\n                           frechet I \\<theta>\\<^sub>1 v a +\n                           frechet I \\<theta>\\<^sub>2 v a)", "by (blast)"], ["proof (state)\nthis:\n  bounded_linear (frechet I (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)\n\ngoal (1 subgoal):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)", "case (dfree_Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)"], ["proof (state)\nthis:\n  dfree \\<theta>\\<^sub>1\n  dfree \\<theta>\\<^sub>2\n  bounded_linear (frechet I \\<theta>\\<^sub>1 v)\n  bounded_linear (frechet I \\<theta>\\<^sub>2 v)\n\ngoal (1 subgoal):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n        dfree \\<theta>\\<^sub>2;\n        bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<rbrakk>\n       \\<Longrightarrow> bounded_linear\n                          (frechet I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)", "then"], ["proof (chain)\npicking this:\n  dfree \\<theta>\\<^sub>1\n  dfree \\<theta>\\<^sub>2\n  bounded_linear (frechet I \\<theta>\\<^sub>1 v)\n  bounded_linear (frechet I \\<theta>\\<^sub>2 v)", "show ?case"], ["proof (prove)\nusing this:\n  dfree \\<theta>\\<^sub>1\n  dfree \\<theta>\\<^sub>2\n  bounded_linear (frechet I \\<theta>\\<^sub>1 v)\n  bounded_linear (frechet I \\<theta>\\<^sub>2 v)\n\ngoal (1 subgoal):\n 1. bounded_linear (frechet I (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)", "by (auto simp add: bounded_linear_add bounded_linear_const_mult bounded_linear_mult_const)"], ["proof (state)\nthis:\n  bounded_linear (frechet I (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)\n\ngoal:\nNo subgoals!", "qed"], ["", "setup_lifting type_definition_good_interp"], ["", "setup_lifting type_definition_strm"], ["", "lift_definition blin_frechet::\"('sf, 'sc, 'sz) good_interp \\<Rightarrow> ('sf,'sz) strm \\<Rightarrow> (real, 'sz) vec  \\<Rightarrow> (real, 'sz) vec \\<Rightarrow>\\<^sub>L real\" is \"frechet\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>interp_ext trm vec.\n       \\<lbrakk>is_interp interp_ext; dfree trm\\<rbrakk>\n       \\<Longrightarrow> bounded_linear (frechet interp_ext trm vec)", "using frechet_linear"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_interp ?I; dfree ?\\<theta>\\<rbrakk>\n  \\<Longrightarrow> bounded_linear (frechet ?I ?\\<theta> ?v)\n\ngoal (1 subgoal):\n 1. \\<And>interp_ext trm vec.\n       \\<lbrakk>is_interp interp_ext; dfree trm\\<rbrakk>\n       \\<Longrightarrow> bounded_linear (frechet interp_ext trm vec)", "by auto"], ["", "lemmas [simp] = blin_frechet.rep_eq"], ["", "lemma frechet_blin:\"is_interp I \\<Longrightarrow> dfree \\<theta> \\<Longrightarrow> (\\<lambda>v. Blinfun (\\<lambda>v'. frechet I \\<theta> v v')) = blin_frechet (good_interp I) (simple_term \\<theta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_interp I; dfree \\<theta>\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>v. Blinfun (frechet I \\<theta> v)) =\n                      blin_frechet (good_interp I) (simple_term \\<theta>)", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>is_interp I; dfree \\<theta>\\<rbrakk>\n       \\<Longrightarrow> Blinfun (frechet I \\<theta> v) =\n                         blin_frechet (good_interp I) (simple_term \\<theta>)\n                          v", "apply(rule blinfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v i.\n       \\<lbrakk>is_interp I; dfree \\<theta>\\<rbrakk>\n       \\<Longrightarrow> blinfun_apply (Blinfun (frechet I \\<theta> v)) i =\n                         blinfun_apply\n                          (blin_frechet (good_interp I)\n                            (simple_term \\<theta>) v)\n                          i", "by (simp add: bounded_linear_Blinfun_apply frechet_linear good_interp_inverse simple_term_inverse)"], ["", "lemma sterm_continuous:\n  assumes good_interp:\"is_interp I\"\n  shows \"dfree \\<theta> \\<Longrightarrow> continuous_on UNIV (sterm_sem I \\<theta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree \\<theta> \\<Longrightarrow>\n    continuous_on UNIV (sterm_sem I \\<theta>)", "proof(induction rule: dfree.induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i. continuous_on UNIV (sterm_sem I (Var i))\n 2. \\<And>r. continuous_on UNIV (sterm_sem I (Const r))\n 3. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i. continuous_on UNIV (sterm_sem I (args i))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV (sterm_sem I ($f i args))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>1);\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (sterm_sem I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))\n 5. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>1);\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (sterm_sem I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))", "case (dfree_Fun args i)"], ["proof (state)\nthis:\n  dfree (args ?i5)\n  continuous_on UNIV (sterm_sem I (args ?i5))\n\ngoal (5 subgoals):\n 1. \\<And>i. continuous_on UNIV (sterm_sem I (Var i))\n 2. \\<And>r. continuous_on UNIV (sterm_sem I (Const r))\n 3. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i. continuous_on UNIV (sterm_sem I (args i))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV (sterm_sem I ($f i args))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>1);\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (sterm_sem I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))\n 5. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>1);\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (sterm_sem I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))", "assume IH:\"\\<And>i. continuous_on UNIV (sterm_sem I (args i))\""], ["proof (state)\nthis:\n  continuous_on UNIV (sterm_sem I (args ?i5))\n\ngoal (5 subgoals):\n 1. \\<And>i. continuous_on UNIV (sterm_sem I (Var i))\n 2. \\<And>r. continuous_on UNIV (sterm_sem I (Const r))\n 3. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i. continuous_on UNIV (sterm_sem I (args i))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV (sterm_sem I ($f i args))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>1);\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (sterm_sem I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))\n 5. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>1);\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (sterm_sem I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))", "have con1:\"continuous_on UNIV (Functions I i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV (Functions I i)", "using good_interp"], ["proof (prove)\nusing this:\n  is_interp I\n\ngoal (1 subgoal):\n 1. continuous_on UNIV (Functions I i)", "unfolding is_interp_def"], ["proof (prove)\nusing this:\n  \\<forall>x i.\n     (Functions I i has_derivative FunctionFrechet I i x) (at x) \\<and>\n     continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet I i x))\n\ngoal (1 subgoal):\n 1. continuous_on UNIV (Functions I i)", "using continuous_on_eq_continuous_within has_derivative_continuous"], ["proof (prove)\nusing this:\n  \\<forall>x i.\n     (Functions I i has_derivative FunctionFrechet I i x) (at x) \\<and>\n     continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet I i x))\n  continuous_on ?s ?f = (\\<forall>x\\<in>?s. continuous (at x within ?s) ?f)\n  (?f has_derivative ?f') (at ?x within ?s) \\<Longrightarrow>\n  continuous (at ?x within ?s) ?f\n\ngoal (1 subgoal):\n 1. continuous_on UNIV (Functions I i)", "by blast"], ["proof (state)\nthis:\n  continuous_on UNIV (Functions I i)\n\ngoal (5 subgoals):\n 1. \\<And>i. continuous_on UNIV (sterm_sem I (Var i))\n 2. \\<And>r. continuous_on UNIV (sterm_sem I (Const r))\n 3. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i. continuous_on UNIV (sterm_sem I (args i))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV (sterm_sem I ($f i args))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>1);\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (sterm_sem I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))\n 5. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>1);\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (sterm_sem I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))", "have con2:\"continuous_on UNIV (\\<lambda> x. (\\<chi> i. sterm_sem I (args i) x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x)", "apply(rule continuous_on_vec_lambda)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. continuous_on UNIV (sterm_sem I (args i))", "using IH"], ["proof (prove)\nusing this:\n  continuous_on UNIV (sterm_sem I (args ?i5))\n\ngoal (1 subgoal):\n 1. \\<And>i. continuous_on UNIV (sterm_sem I (args i))", "by auto"], ["proof (state)\nthis:\n  continuous_on UNIV (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x)\n\ngoal (5 subgoals):\n 1. \\<And>i. continuous_on UNIV (sterm_sem I (Var i))\n 2. \\<And>r. continuous_on UNIV (sterm_sem I (Const r))\n 3. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i. continuous_on UNIV (sterm_sem I (args i))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV (sterm_sem I ($f i args))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>1);\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (sterm_sem I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))\n 5. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>1);\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (sterm_sem I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))", "have con:\"continuous_on UNIV ((Functions I i) \\<circ> (\\<lambda>x.  (\\<chi> i. sterm_sem I (args i) x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (Functions I i \\<circ> (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x))", "apply(rule continuous_on_compose)"], ["proof (prove)\ngoal (2 subgoals):\n 1. continuous_on UNIV (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x)\n 2. continuous_on (range (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x))\n     (Functions I i)", "using con1 con2"], ["proof (prove)\nusing this:\n  continuous_on UNIV (Functions I i)\n  continuous_on UNIV (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x)\n\ngoal (2 subgoals):\n 1. continuous_on UNIV (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x)\n 2. continuous_on (range (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x))\n     (Functions I i)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>continuous_on UNIV (Functions I i);\n     continuous_on UNIV\n      (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x)\\<rbrakk>\n    \\<Longrightarrow> continuous_on\n                       (range (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x))\n                       (Functions I i)", "using continuous_on_subset"], ["proof (prove)\nusing this:\n  \\<lbrakk>continuous_on ?s ?f; ?t \\<subseteq> ?s\\<rbrakk>\n  \\<Longrightarrow> continuous_on ?t ?f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>continuous_on UNIV (Functions I i);\n     continuous_on UNIV\n      (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x)\\<rbrakk>\n    \\<Longrightarrow> continuous_on\n                       (range (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x))\n                       (Functions I i)", "by blast"], ["proof (state)\nthis:\n  continuous_on UNIV\n   (Functions I i \\<circ> (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x))\n\ngoal (5 subgoals):\n 1. \\<And>i. continuous_on UNIV (sterm_sem I (Var i))\n 2. \\<And>r. continuous_on UNIV (sterm_sem I (Const r))\n 3. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i. continuous_on UNIV (sterm_sem I (args i))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV (sterm_sem I ($f i args))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>1);\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (sterm_sem I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))\n 5. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>1);\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (sterm_sem I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV (sterm_sem I ($f i args))", "using con comp_def"], ["proof (prove)\nusing this:\n  continuous_on UNIV\n   (Functions I i \\<circ> (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x))\n  ?f \\<circ> ?g = (\\<lambda>x. ?f (?g x))\n\ngoal (1 subgoal):\n 1. continuous_on UNIV (sterm_sem I ($f i args))", "by(simp)"], ["proof (state)\nthis:\n  continuous_on UNIV (sterm_sem I ($f i args))\n\ngoal (4 subgoals):\n 1. \\<And>i. continuous_on UNIV (sterm_sem I (Var i))\n 2. \\<And>r. continuous_on UNIV (sterm_sem I (Const r))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>1);\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (sterm_sem I\n                            (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>1);\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (sterm_sem I\n                            (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))", "qed (auto intro: continuous_intros)"], ["", "lemma sterm_continuous':\n  assumes good_interp:\"is_interp I\"\n  shows \"dfree \\<theta> \\<Longrightarrow> continuous_on S (sterm_sem I \\<theta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree \\<theta> \\<Longrightarrow> continuous_on S (sterm_sem I \\<theta>)", "using sterm_continuous continuous_on_subset good_interp"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_interp ?I; dfree ?\\<theta>\\<rbrakk>\n  \\<Longrightarrow> continuous_on UNIV (sterm_sem ?I ?\\<theta>)\n  \\<lbrakk>continuous_on ?s ?f; ?t \\<subseteq> ?s\\<rbrakk>\n  \\<Longrightarrow> continuous_on ?t ?f\n  is_interp I\n\ngoal (1 subgoal):\n 1. dfree \\<theta> \\<Longrightarrow> continuous_on S (sterm_sem I \\<theta>)", "by blast"], ["", "lemma frechet_continuous:\n  fixes I :: \"('sf, 'sc, 'sz) interp\"\n  assumes good_interp:\"is_interp I\"\n  shows \"dfree \\<theta> \\<Longrightarrow> continuous_on UNIV (blin_frechet (good_interp I) (simple_term \\<theta>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree \\<theta> \\<Longrightarrow>\n    continuous_on UNIV (blin_frechet (good_interp I) (simple_term \\<theta>))", "proof (induction rule: dfree.induct)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Var i)))\n 2. \\<And>r.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Const r)))\n 3. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 5. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "case (dfree_Var i)"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>i.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Var i)))\n 2. \\<And>r.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Const r)))\n 3. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 5. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have free:\"dfree (Var i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree (Var i)", "by (rule dfree_Var)"], ["proof (state)\nthis:\n  dfree (Var i)\n\ngoal (5 subgoals):\n 1. \\<And>i.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Var i)))\n 2. \\<And>r.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Const r)))\n 3. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 5. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have bounded_linear:\"bounded_linear (\\<lambda> \\<nu>'. \\<nu>' \\<bullet> axis i 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_linear (\\<lambda>\\<nu>'. \\<nu>' \\<bullet> axis i (1::'a))", "by (auto simp add: bounded_linear_vec_nth)"], ["proof (state)\nthis:\n  bounded_linear (\\<lambda>\\<nu>'. \\<nu>' \\<bullet> axis i (1::?'a7))\n\ngoal (5 subgoals):\n 1. \\<And>i.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Var i)))\n 2. \\<And>r.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Const r)))\n 3. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 5. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have cont:\"continuous_on UNIV (\\<lambda>\\<nu>. Blinfun(\\<lambda> \\<nu>'. \\<nu>' \\<bullet> axis i 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>\\<nu>.\n         Blinfun (\\<lambda>\\<nu>'. \\<nu>' \\<bullet> axis i (1::'b)))", "using continuous_on_const"], ["proof (prove)\nusing this:\n  continuous_on ?s (\\<lambda>x. ?c)\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>\\<nu>.\n         Blinfun (\\<lambda>\\<nu>'. \\<nu>' \\<bullet> axis i (1::'b)))", "by blast"], ["proof (state)\nthis:\n  continuous_on UNIV\n   (\\<lambda>\\<nu>.\n       Blinfun (\\<lambda>\\<nu>'. \\<nu>' \\<bullet> axis i (1::?'b8)))\n\ngoal (5 subgoals):\n 1. \\<And>i.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Var i)))\n 2. \\<And>r.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Const r)))\n 3. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 5. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have eq:\"\\<And>\\<nu> \\<nu>'. (\\<lambda>\\<nu>. Blinfun(\\<lambda> \\<nu>'. \\<nu>' \\<bullet> axis i 1)) \\<nu> \\<nu>' = (blin_frechet (good_interp I) (simple_term (Var i))) \\<nu> \\<nu>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<nu> \\<nu>'.\n       blinfun_apply (Blinfun (\\<lambda>\\<nu>'. \\<nu>' \\<bullet> axis i 1))\n        \\<nu>' =\n       blinfun_apply\n        (blin_frechet (good_interp I) (simple_term (Var i)) \\<nu>) \\<nu>'", "unfolding axis_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<nu> \\<nu>'.\n       blinfun_apply\n        (Blinfun\n          (\\<lambda>\\<nu>'.\n              \\<nu>' \\<bullet> (\\<chi>ia. if ia = i then 1 else 0)))\n        \\<nu>' =\n       blinfun_apply\n        (blin_frechet (good_interp I) (simple_term (Var i)) \\<nu>) \\<nu>'", "apply(auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<nu> \\<nu>'.\n       blinfun_apply\n        (Blinfun\n          (\\<lambda>\\<nu>'.\n              \\<nu>' \\<bullet> (\\<chi>ia. if ia = i then 1 else 0)))\n        \\<nu>' =\n       frechet (raw_interp (good_interp I)) (raw_term (simple_term (Var i)))\n        \\<nu> \\<nu>'", "by (metis (no_types) axis_def blinfun_inner_left.abs_eq blinfun_inner_left.rep_eq dfree_Var_simps frechet.simps(1) mem_Collect_eq simple_term_inverse)"], ["proof (state)\nthis:\n  blinfun_apply (Blinfun (\\<lambda>\\<nu>'. \\<nu>' \\<bullet> axis i 1))\n   ?\\<nu>'8 =\n  blinfun_apply (blin_frechet (good_interp I) (simple_term (Var i)) ?\\<nu>8)\n   ?\\<nu>'8\n\ngoal (5 subgoals):\n 1. \\<And>i.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Var i)))\n 2. \\<And>r.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Const r)))\n 3. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 5. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have eq':\"(\\<lambda>\\<nu>. Blinfun(\\<lambda> \\<nu>'. \\<nu>' \\<bullet> axis i 1)) = (blin_frechet (good_interp I) (simple_term (Var i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<nu>. Blinfun (\\<lambda>\\<nu>'. \\<nu>' \\<bullet> axis i 1)) =\n    blin_frechet (good_interp I) (simple_term (Var i))", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<nu>.\n       Blinfun (\\<lambda>\\<nu>'. \\<nu>' \\<bullet> axis i 1) =\n       blin_frechet (good_interp I) (simple_term (Var i)) \\<nu>", "apply(rule blinfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<nu> ia.\n       blinfun_apply (Blinfun (\\<lambda>\\<nu>'. \\<nu>' \\<bullet> axis i 1))\n        ia =\n       blinfun_apply\n        (blin_frechet (good_interp I) (simple_term (Var i)) \\<nu>) ia", "using eq"], ["proof (prove)\nusing this:\n  blinfun_apply (Blinfun (\\<lambda>\\<nu>'. \\<nu>' \\<bullet> axis i 1))\n   ?\\<nu>'8 =\n  blinfun_apply (blin_frechet (good_interp I) (simple_term (Var i)) ?\\<nu>8)\n   ?\\<nu>'8\n\ngoal (1 subgoal):\n 1. \\<And>\\<nu> ia.\n       blinfun_apply (Blinfun (\\<lambda>\\<nu>'. \\<nu>' \\<bullet> axis i 1))\n        ia =\n       blinfun_apply\n        (blin_frechet (good_interp I) (simple_term (Var i)) \\<nu>) ia", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>\\<nu>. Blinfun (\\<lambda>\\<nu>'. \\<nu>' \\<bullet> axis i 1)) =\n  blin_frechet (good_interp I) (simple_term (Var i))\n\ngoal (5 subgoals):\n 1. \\<And>i.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Var i)))\n 2. \\<And>r.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Const r)))\n 3. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 5. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>\\<nu>. Blinfun (\\<lambda>\\<nu>'. \\<nu>' \\<bullet> axis i 1)) =\n  blin_frechet (good_interp I) (simple_term (Var i))", "show ?case"], ["proof (prove)\nusing this:\n  (\\<lambda>\\<nu>. Blinfun (\\<lambda>\\<nu>'. \\<nu>' \\<bullet> axis i 1)) =\n  blin_frechet (good_interp I) (simple_term (Var i))\n\ngoal (1 subgoal):\n 1. continuous_on UNIV (blin_frechet (good_interp I) (simple_term (Var i)))", "by (metis cont)"], ["proof (state)\nthis:\n  continuous_on UNIV (blin_frechet (good_interp I) (simple_term (Var i)))\n\ngoal (4 subgoals):\n 1. \\<And>r.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Const r)))\n 2. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>r.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Const r)))\n 2. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "case (dfree_Const r)"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>r.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Const r)))\n 2. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have free:\"dfree (Const r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree (Const r)", "by (rule dfree_Const)"], ["proof (state)\nthis:\n  dfree (Const r)\n\ngoal (4 subgoals):\n 1. \\<And>r.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Const r)))\n 2. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have bounded_linear:\"bounded_linear (\\<lambda> \\<nu>'. 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_linear (\\<lambda>\\<nu>'. 0::'b)", "by (simp)"], ["proof (state)\nthis:\n  bounded_linear (\\<lambda>\\<nu>'. 0::?'b7)\n\ngoal (4 subgoals):\n 1. \\<And>r.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Const r)))\n 2. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have cont:\"continuous_on UNIV (\\<lambda>\\<nu>. Blinfun(\\<lambda> \\<nu>'. 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV (\\<lambda>\\<nu>. Blinfun (\\<lambda>\\<nu>'. 0::'c))", "using continuous_on_const"], ["proof (prove)\nusing this:\n  continuous_on ?s (\\<lambda>x. ?c)\n\ngoal (1 subgoal):\n 1. continuous_on UNIV (\\<lambda>\\<nu>. Blinfun (\\<lambda>\\<nu>'. 0::'c))", "by blast"], ["proof (state)\nthis:\n  continuous_on UNIV (\\<lambda>\\<nu>. Blinfun (\\<lambda>\\<nu>'. 0::?'c8))\n\ngoal (4 subgoals):\n 1. \\<And>r.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Const r)))\n 2. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have eq':\"(\\<lambda>\\<nu>. Blinfun(\\<lambda> \\<nu>'. 0)) = (blin_frechet (good_interp I) (simple_term (Const r)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<nu>. Blinfun (\\<lambda>\\<nu>'. 0)) =\n    blin_frechet (good_interp I) (simple_term (Const r))", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<nu>.\n       Blinfun (\\<lambda>\\<nu>'. 0) =\n       blin_frechet (good_interp I) (simple_term (Const r)) \\<nu>", "apply(rule blinfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<nu> i.\n       blinfun_apply (Blinfun (\\<lambda>\\<nu>'. 0)) i =\n       blinfun_apply\n        (blin_frechet (good_interp I) (simple_term (Const r)) \\<nu>) i", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<nu> i.\n       blinfun_apply (Blinfun (\\<lambda>\\<nu>'. 0)) i =\n       frechet (raw_interp (good_interp I))\n        (raw_term (simple_term (Const r))) \\<nu> i", "using zero_blinfun.abs_eq zero_blinfun.rep_eq free"], ["proof (prove)\nusing this:\n  0 = Blinfun (\\<lambda>x. 0::?'b)\n  blinfun_apply 0 = (\\<lambda>x. 0::?'b)\n  dfree (Const r)\n\ngoal (1 subgoal):\n 1. \\<And>\\<nu> i.\n       blinfun_apply (Blinfun (\\<lambda>\\<nu>'. 0)) i =\n       frechet (raw_interp (good_interp I))\n        (raw_term (simple_term (Const r))) \\<nu> i", "by (metis frechet.simps(5) mem_Collect_eq simple_term_inverse)"], ["proof (state)\nthis:\n  (\\<lambda>\\<nu>. Blinfun (\\<lambda>\\<nu>'. 0)) =\n  blin_frechet (good_interp I) (simple_term (Const r))\n\ngoal (4 subgoals):\n 1. \\<And>r.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (Const r)))\n 2. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 4. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>\\<nu>. Blinfun (\\<lambda>\\<nu>'. 0)) =\n  blin_frechet (good_interp I) (simple_term (Const r))", "show ?case"], ["proof (prove)\nusing this:\n  (\\<lambda>\\<nu>. Blinfun (\\<lambda>\\<nu>'. 0)) =\n  blin_frechet (good_interp I) (simple_term (Const r))\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (blin_frechet (good_interp I) (simple_term (Const r)))", "by (metis cont)"], ["proof (state)\nthis:\n  continuous_on UNIV (blin_frechet (good_interp I) (simple_term (Const r)))\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "case (dfree_Fun args f)"], ["proof (state)\nthis:\n  dfree (args ?i5)\n  continuous_on UNIV (blin_frechet (good_interp I) (simple_term (args ?i5)))\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "assume IH:\"\\<And>i. continuous_on UNIV (blin_frechet (good_interp I) (simple_term (args i)))\""], ["proof (state)\nthis:\n  continuous_on UNIV (blin_frechet (good_interp I) (simple_term (args ?i5)))\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "assume frees:\"(\\<And>i. dfree (args i))\""], ["proof (state)\nthis:\n  dfree (args ?i5)\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "then"], ["proof (chain)\npicking this:\n  dfree (args ?i5)", "have free:\"dfree ($f f args)\""], ["proof (prove)\nusing this:\n  dfree (args ?i5)\n\ngoal (1 subgoal):\n 1. dfree ($f f args)", "by (auto)"], ["proof (state)\nthis:\n  dfree ($f f args)\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have great_interp:\"\\<And>f. continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet I f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet I f x))", "using good_interp"], ["proof (prove)\nusing this:\n  is_interp I\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet I f x))", "unfolding is_interp_def"], ["proof (prove)\nusing this:\n  \\<forall>x i.\n     (Functions I i has_derivative FunctionFrechet I i x) (at x) \\<and>\n     continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet I i x))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet I f x))", "by auto"], ["proof (state)\nthis:\n  continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet I ?f5 x))\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have cont1:\"\\<And>v. continuous_on UNIV (\\<lambda>v'. (\\<chi> i. frechet I (args i) v v'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       continuous_on UNIV (\\<lambda>v'. \\<chi>i. frechet I (args i) v v')", "apply(rule continuous_on_vec_lambda)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v i. continuous_on UNIV (frechet I (args i) v)", "using IH"], ["proof (prove)\nusing this:\n  continuous_on UNIV (blin_frechet (good_interp I) (simple_term (args ?i5)))\n\ngoal (1 subgoal):\n 1. \\<And>v i. continuous_on UNIV (frechet I (args i) v)", "by (simp add: frechet_linear frees good_interp linear_continuous_on)"], ["proof (state)\nthis:\n  continuous_on UNIV (\\<lambda>v'. \\<chi>i. frechet I (args i) ?v5 v')\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have eq:\"(\\<lambda>v. Blinfun(\\<lambda>v'. FunctionFrechet I f (\\<chi> i. sterm_sem I (args i) v) (\\<chi> i. frechet I (args i) v v'))) \n    = (blin_frechet (good_interp I) (simple_term (Function f args)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>v.\n        Blinfun\n         (\\<lambda>v'.\n             FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) v)\n              (\\<chi>i. frechet I (args i) v v'))) =\n    blin_frechet (good_interp I) (simple_term ($f f args))", "using frechet_blin[OF good_interp free]"], ["proof (prove)\nusing this:\n  (\\<lambda>v. Blinfun (frechet I ($f f args) v)) =\n  blin_frechet (good_interp I) (simple_term ($f f args))\n\ngoal (1 subgoal):\n 1. (\\<lambda>v.\n        Blinfun\n         (\\<lambda>v'.\n             FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) v)\n              (\\<chi>i. frechet I (args i) v v'))) =\n    blin_frechet (good_interp I) (simple_term ($f f args))", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>v.\n      Blinfun\n       (\\<lambda>v'.\n           FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) v)\n            (\\<chi>i. frechet I (args i) v v'))) =\n  blin_frechet (good_interp I) (simple_term ($f f args))\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have bounded_linears:\"\\<And>x. bounded_linear (FunctionFrechet I f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. bounded_linear (FunctionFrechet I f x)", "using good_interp"], ["proof (prove)\nusing this:\n  is_interp I\n\ngoal (1 subgoal):\n 1. \\<And>x. bounded_linear (FunctionFrechet I f x)", "unfolding is_interp_def"], ["proof (prove)\nusing this:\n  \\<forall>x i.\n     (Functions I i has_derivative FunctionFrechet I i x) (at x) \\<and>\n     continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet I i x))\n\ngoal (1 subgoal):\n 1. \\<And>x. bounded_linear (FunctionFrechet I f x)", "by blast"], ["proof (state)\nthis:\n  bounded_linear (FunctionFrechet I f ?x5)\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "let ?blin_ff =\"(\\<lambda>x. Blinfun (FunctionFrechet I f x))\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have some_eq:\"(\\<lambda>x. Blinfun (FunctionFrechet I f (\\<chi> i. sterm_sem I (args i) x))) = \n                ((?blin_ff) \\<circ> (\\<lambda>x. (\\<chi> i. sterm_sem I (args i) x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        Blinfun (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) x))) =\n    (\\<lambda>x. Blinfun (FunctionFrechet I f x)) \\<circ>\n    (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x)", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       Blinfun (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) x)) =\n       ((\\<lambda>x. Blinfun (FunctionFrechet I f x)) \\<circ>\n        (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x))\n        x", "apply(rule blinfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x i.\n       blinfun_apply\n        (Blinfun (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) x)))\n        i =\n       blinfun_apply\n        (((\\<lambda>x. Blinfun (FunctionFrechet I f x)) \\<circ>\n          (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x))\n          x)\n        i", "unfolding comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x i.\n       blinfun_apply\n        (Blinfun (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) x)))\n        i =\n       blinfun_apply\n        (Blinfun (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) x))) i", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      Blinfun (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) x))) =\n  (\\<lambda>x. Blinfun (FunctionFrechet I f x)) \\<circ>\n  (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x)\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have sub_cont:\"continuous_on UNIV ((?blin_ff) \\<circ> (\\<lambda>x. (\\<chi> i. sterm_sem I (args i) x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     ((\\<lambda>x. Blinfun (FunctionFrechet I f x)) \\<circ>\n      (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x))", "apply(rule continuous_intros)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i. continuous_on UNIV (sterm_sem I (args i))\n 2. continuous_on (range (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x))\n     (\\<lambda>x. Blinfun (FunctionFrechet I f x))", "apply (simp add: frees good_interp sterm_continuous')"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on (range (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x))\n     (\\<lambda>x. Blinfun (FunctionFrechet I f x))", "using continuous_on_subset great_interp"], ["proof (prove)\nusing this:\n  \\<lbrakk>continuous_on ?s ?f; ?t \\<subseteq> ?s\\<rbrakk>\n  \\<Longrightarrow> continuous_on ?t ?f\n  continuous_on UNIV (\\<lambda>x. Blinfun (FunctionFrechet I ?f5 x))\n\ngoal (1 subgoal):\n 1. continuous_on (range (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x))\n     (\\<lambda>x. Blinfun (FunctionFrechet I f x))", "by blast"], ["proof (state)\nthis:\n  continuous_on UNIV\n   ((\\<lambda>x. Blinfun (FunctionFrechet I f x)) \\<circ>\n    (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x))\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have blin_frech_vec:\"\\<And>x. bounded_linear (\\<lambda>v'. \\<chi> i. frechet I (args i) x v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. bounded_linear (\\<lambda>v'. \\<chi>i. frechet I (args i) x v')", "by (simp add: bounded_linear_vec frechet_linear frees good_interp)"], ["proof (state)\nthis:\n  bounded_linear (\\<lambda>v'. \\<chi>i. frechet I (args i) ?x5 v')\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have frech_vec_eq:\"(\\<lambda>x. Blinfun (\\<lambda>v'. \\<chi> i. frechet I (args i) x v')) = (\\<lambda>x. blinfun_vec (\\<lambda> i. blin_frechet (good_interp I) (simple_term (args i)) x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) x v')) =\n    (\\<lambda>x.\n        blinfun_vec\n         (\\<lambda>i.\n             blin_frechet (good_interp I) (simple_term (args i)) x))", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) x v') =\n       blinfun_vec\n        (\\<lambda>i. blin_frechet (good_interp I) (simple_term (args i)) x)", "apply(rule blinfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x i.\n       blinfun_apply\n        (Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) x v')) i =\n       blinfun_apply\n        (blinfun_vec\n          (\\<lambda>i.\n              blin_frechet (good_interp I) (simple_term (args i)) x))\n        i", "apply(rule vec_extensionality)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x i ia.\n       blinfun_apply\n        (Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) x v')) i $\n       ia =\n       blinfun_apply\n        (blinfun_vec\n          (\\<lambda>i.\n              blin_frechet (good_interp I) (simple_term (args i)) x))\n        i $\n       ia", "subgoal for x i j"], ["proof (prove)\ngoal (1 subgoal):\n 1. blinfun_apply (Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) x v'))\n     i $\n    j =\n    blinfun_apply\n     (blinfun_vec\n       (\\<lambda>i. blin_frechet (good_interp I) (simple_term (args i)) x))\n     i $\n    j", "using blin_frech_vec[of x]"], ["proof (prove)\nusing this:\n  bounded_linear (\\<lambda>v'. \\<chi>i. frechet I (args i) x v')\n\ngoal (1 subgoal):\n 1. blinfun_apply (Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) x v'))\n     i $\n    j =\n    blinfun_apply\n     (blinfun_vec\n       (\\<lambda>i. blin_frechet (good_interp I) (simple_term (args i)) x))\n     i $\n    j", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_linear\n     (\\<lambda>v'. \\<chi>i. frechet I (args i) x v') \\<Longrightarrow>\n    blinfun_apply (Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) x v'))\n     i $\n    j =\n    frechet (raw_interp (good_interp I)) (raw_term (simple_term (args j))) x\n     i", "by (metis (no_types, lifting) blin_frechet.rep_eq bounded_linear_Blinfun_apply frechet_blin frechet_linear frees good_interp vec_lambda_beta)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>x. Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) x v')) =\n  (\\<lambda>x.\n      blinfun_vec\n       (\\<lambda>i. blin_frechet (good_interp I) (simple_term (args i)) x))\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have cont_frech_vec:\"continuous_on UNIV (\\<lambda>x. blinfun_vec (\\<lambda> i. blin_frechet (good_interp I) (simple_term (args i)) x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         blinfun_vec\n          (\\<lambda>i.\n              blin_frechet (good_interp I) (simple_term (args i)) x))", "apply(rule continuous_blinfun_vec')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (args i)))", "using IH"], ["proof (prove)\nusing this:\n  continuous_on UNIV (blin_frechet (good_interp I) (simple_term (args ?i5)))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       continuous_on UNIV\n        (blin_frechet (good_interp I) (simple_term (args i)))", "by blast"], ["proof (state)\nthis:\n  continuous_on UNIV\n   (\\<lambda>x.\n       blinfun_vec\n        (\\<lambda>i. blin_frechet (good_interp I) (simple_term (args i)) x))\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have cont_intro:\"\\<And> s f g. continuous_on s f \\<Longrightarrow> continuous_on s g \\<Longrightarrow> continuous_on s (\\<lambda>x. f x o\\<^sub>L g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s f g.\n       \\<lbrakk>continuous_on s f; continuous_on s g\\<rbrakk>\n       \\<Longrightarrow> continuous_on s (\\<lambda>x. f x o\\<^sub>L g x)", "by (auto intro: continuous_intros)"], ["proof (state)\nthis:\n  \\<lbrakk>continuous_on ?s5 ?f5; continuous_on ?s5 ?g5\\<rbrakk>\n  \\<Longrightarrow> continuous_on ?s5 (\\<lambda>x. ?f5 x o\\<^sub>L ?g5 x)\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have cont:\"continuous_on UNIV (\\<lambda>v. blinfun_compose (Blinfun (FunctionFrechet I f (\\<chi> i. sterm_sem I (args i) v))) (Blinfun(\\<lambda>v'.  (\\<chi> i. frechet I (args i) v v'))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>v.\n         Blinfun\n          (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) v)) o\\<^sub>L\n         Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) v v'))", "apply(rule cont_intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         Blinfun (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) x)))\n 2. continuous_on UNIV\n     (\\<lambda>x. Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) x v'))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         Blinfun (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) x)))", "using  sub_cont"], ["proof (prove)\nusing this:\n  continuous_on UNIV\n   ((\\<lambda>x. Blinfun (FunctionFrechet I f x)) \\<circ>\n    (\\<lambda>x. \\<chi>i. sterm_sem I (args i) x))\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         Blinfun (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) x)))", "by simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x. Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) x v'))", "using frech_vec_eq cont_frech_vec"], ["proof (prove)\nusing this:\n  (\\<lambda>x. Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) x v')) =\n  (\\<lambda>x.\n      blinfun_vec\n       (\\<lambda>i. blin_frechet (good_interp I) (simple_term (args i)) x))\n  continuous_on UNIV\n   (\\<lambda>x.\n       blinfun_vec\n        (\\<lambda>i. blin_frechet (good_interp I) (simple_term (args i)) x))\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x. Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) x v'))", "by presburger"], ["proof (state)\nthis:\n  continuous_on UNIV\n   (\\<lambda>v.\n       Blinfun\n        (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) v)) o\\<^sub>L\n       Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) v v'))\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have best_eq:\"(blin_frechet (good_interp I) (simple_term ($f f args))) = (\\<lambda>v. blinfun_compose (Blinfun (FunctionFrechet I f (\\<chi> i. sterm_sem I (args i) v))) (Blinfun(\\<lambda>v'.  (\\<chi> i. frechet I (args i) v v')))) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. blin_frechet (good_interp I) (simple_term ($f f args)) =\n    (\\<lambda>v.\n        Blinfun\n         (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) v)) o\\<^sub>L\n        Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) v v'))", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       blin_frechet (good_interp I) (simple_term ($f f args)) v =\n       Blinfun\n        (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) v)) o\\<^sub>L\n       Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) v v')", "apply(rule blinfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v i.\n       blinfun_apply\n        (blin_frechet (good_interp I) (simple_term ($f f args)) v) i =\n       blinfun_apply\n        (Blinfun\n          (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) v)) o\\<^sub>L\n         Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) v v'))\n        i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v i.\n       blinfun_apply\n        (blin_frechet (good_interp I) (simple_term ($f f args)) v) i =\n       blinfun_apply\n        (Blinfun\n          (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) v)) o\\<^sub>L\n         Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) v v'))\n        i", "fix v :: \"(real, 'sz) vec\" and i :: \"(real, 'sz) vec\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v i.\n       blinfun_apply\n        (blin_frechet (good_interp I) (simple_term ($f f args)) v) i =\n       blinfun_apply\n        (Blinfun\n          (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) v)) o\\<^sub>L\n         Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) v v'))\n        i", "have \"frechet I ($f f args) v i = blinfun_apply (blin_frechet (good_interp I) (simple_term ($f f args)) v) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. frechet I ($f f args) v i =\n    blinfun_apply (blin_frechet (good_interp I) (simple_term ($f f args)) v)\n     i", "by (metis (no_types) bounded_linear_Blinfun_apply dfree_Fun_simps frechet_blin frechet_linear frees good_interp)"], ["proof (state)\nthis:\n  frechet I ($f f args) v i =\n  blinfun_apply (blin_frechet (good_interp I) (simple_term ($f f args)) v) i\n\ngoal (1 subgoal):\n 1. \\<And>v i.\n       blinfun_apply\n        (blin_frechet (good_interp I) (simple_term ($f f args)) v) i =\n       blinfun_apply\n        (Blinfun\n          (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) v)) o\\<^sub>L\n         Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) v v'))\n        i", "then"], ["proof (chain)\npicking this:\n  frechet I ($f f args) v i =\n  blinfun_apply (blin_frechet (good_interp I) (simple_term ($f f args)) v) i", "have \"FunctionFrechet I f (\\<chi> s. sterm_sem I (args s) v) (blinfun_apply (Blinfun (\\<lambda>va. \\<chi> s. frechet I (args s) v va)) i) = blinfun_apply (blin_frechet (good_interp I) (simple_term ($f f args)) v) i\""], ["proof (prove)\nusing this:\n  frechet I ($f f args) v i =\n  blinfun_apply (blin_frechet (good_interp I) (simple_term ($f f args)) v) i\n\ngoal (1 subgoal):\n 1. FunctionFrechet I f (\\<chi>s. sterm_sem I (args s) v)\n     (blinfun_apply\n       (Blinfun (\\<lambda>va. \\<chi>s. frechet I (args s) v va)) i) =\n    blinfun_apply (blin_frechet (good_interp I) (simple_term ($f f args)) v)\n     i", "by (simp add: blin_frech_vec bounded_linear_Blinfun_apply)"], ["proof (state)\nthis:\n  FunctionFrechet I f (\\<chi>s. sterm_sem I (args s) v)\n   (blinfun_apply (Blinfun (\\<lambda>va. \\<chi>s. frechet I (args s) v va))\n     i) =\n  blinfun_apply (blin_frechet (good_interp I) (simple_term ($f f args)) v) i\n\ngoal (1 subgoal):\n 1. \\<And>v i.\n       blinfun_apply\n        (blin_frechet (good_interp I) (simple_term ($f f args)) v) i =\n       blinfun_apply\n        (Blinfun\n          (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) v)) o\\<^sub>L\n         Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) v v'))\n        i", "then"], ["proof (chain)\npicking this:\n  FunctionFrechet I f (\\<chi>s. sterm_sem I (args s) v)\n   (blinfun_apply (Blinfun (\\<lambda>va. \\<chi>s. frechet I (args s) v va))\n     i) =\n  blinfun_apply (blin_frechet (good_interp I) (simple_term ($f f args)) v) i", "show \"blinfun_apply (blin_frechet (good_interp I) (simple_term ($f f args)) v) i = blinfun_apply (Blinfun (FunctionFrechet I f (\\<chi> s. sterm_sem I (args s) v)) o\\<^sub>L Blinfun (\\<lambda>va. \\<chi> s. frechet I (args s) v va)) i\""], ["proof (prove)\nusing this:\n  FunctionFrechet I f (\\<chi>s. sterm_sem I (args s) v)\n   (blinfun_apply (Blinfun (\\<lambda>va. \\<chi>s. frechet I (args s) v va))\n     i) =\n  blinfun_apply (blin_frechet (good_interp I) (simple_term ($f f args)) v) i\n\ngoal (1 subgoal):\n 1. blinfun_apply (blin_frechet (good_interp I) (simple_term ($f f args)) v)\n     i =\n    blinfun_apply\n     (Blinfun\n       (FunctionFrechet I f (\\<chi>s. sterm_sem I (args s) v)) o\\<^sub>L\n      Blinfun (\\<lambda>va. \\<chi>s. frechet I (args s) v va))\n     i", "by (metis (no_types) blinfun_apply_blinfun_compose bounded_linear_Blinfun_apply bounded_linears)"], ["proof (state)\nthis:\n  blinfun_apply (blin_frechet (good_interp I) (simple_term ($f f args)) v)\n   i =\n  blinfun_apply\n   (Blinfun\n     (FunctionFrechet I f (\\<chi>s. sterm_sem I (args s) v)) o\\<^sub>L\n    Blinfun (\\<lambda>va. \\<chi>s. frechet I (args s) v va))\n   i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  blin_frechet (good_interp I) (simple_term ($f f args)) =\n  (\\<lambda>v.\n      Blinfun\n       (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) v)) o\\<^sub>L\n      Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) v v'))\n\ngoal (3 subgoals):\n 1. \\<And>args i.\n       \\<lbrakk>\\<And>i. dfree (args i);\n        \\<And>i.\n           continuous_on UNIV\n            (blin_frechet (good_interp I) (simple_term (args i)))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term ($f i args)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 3. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "then"], ["proof (chain)\npicking this:\n  blin_frechet (good_interp I) (simple_term ($f f args)) =\n  (\\<lambda>v.\n      Blinfun\n       (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) v)) o\\<^sub>L\n      Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) v v'))", "show ?case"], ["proof (prove)\nusing this:\n  blin_frechet (good_interp I) (simple_term ($f f args)) =\n  (\\<lambda>v.\n      Blinfun\n       (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) v)) o\\<^sub>L\n      Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) v v'))\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (blin_frechet (good_interp I) (simple_term ($f f args)))", "using cont best_eq"], ["proof (prove)\nusing this:\n  blin_frechet (good_interp I) (simple_term ($f f args)) =\n  (\\<lambda>v.\n      Blinfun\n       (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) v)) o\\<^sub>L\n      Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) v v'))\n  continuous_on UNIV\n   (\\<lambda>v.\n       Blinfun\n        (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) v)) o\\<^sub>L\n       Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) v v'))\n  blin_frechet (good_interp I) (simple_term ($f f args)) =\n  (\\<lambda>v.\n      Blinfun\n       (FunctionFrechet I f (\\<chi>i. sterm_sem I (args i) v)) o\\<^sub>L\n      Blinfun (\\<lambda>v'. \\<chi>i. frechet I (args i) v v'))\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (blin_frechet (good_interp I) (simple_term ($f f args)))", "by auto"], ["proof (state)\nthis:\n  continuous_on UNIV\n   (blin_frechet (good_interp I) (simple_term ($f f args)))\n\ngoal (2 subgoals):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "case (dfree_Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)"], ["proof (state)\nthis:\n  dfree \\<theta>\\<^sub>1\n  dfree \\<theta>\\<^sub>2\n  continuous_on UNIV\n   (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1))\n  continuous_on UNIV\n   (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2))\n\ngoal (2 subgoals):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "assume IH1:\"continuous_on UNIV (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1))\""], ["proof (state)\nthis:\n  continuous_on UNIV\n   (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1))\n\ngoal (2 subgoals):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "assume IH2:\"continuous_on UNIV (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2))\""], ["proof (state)\nthis:\n  continuous_on UNIV\n   (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2))\n\ngoal (2 subgoals):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "assume free1:\"dfree \\<theta>\\<^sub>1\""], ["proof (state)\nthis:\n  dfree \\<theta>\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "assume free2:\"dfree \\<theta>\\<^sub>2\""], ["proof (state)\nthis:\n  dfree \\<theta>\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have free:\"dfree (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)", "using free1 free2"], ["proof (prove)\nusing this:\n  dfree \\<theta>\\<^sub>1\n  dfree \\<theta>\\<^sub>2\n\ngoal (1 subgoal):\n 1. dfree (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)", "by auto"], ["proof (state)\nthis:\n  dfree (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)\n\ngoal (2 subgoals):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have bounded_linear:\"\\<And>v. bounded_linear (\\<lambda>v'. frechet I \\<theta>\\<^sub>1 v v' + frechet I \\<theta>\\<^sub>2 v v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       bounded_linear\n        (\\<lambda>v'.\n            frechet I \\<theta>\\<^sub>1 v v' +\n            frechet I \\<theta>\\<^sub>2 v v')", "subgoal for v"], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_linear\n     (\\<lambda>v'.\n         frechet I \\<theta>\\<^sub>1 v v' + frechet I \\<theta>\\<^sub>2 v v')", "using frechet_linear[OF good_interp free]"], ["proof (prove)\nusing this:\n  bounded_linear (frechet I (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) ?v)\n\ngoal (1 subgoal):\n 1. bounded_linear\n     (\\<lambda>v'.\n         frechet I \\<theta>\\<^sub>1 v v' + frechet I \\<theta>\\<^sub>2 v v')", "by auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  bounded_linear\n   (\\<lambda>v'.\n       frechet I \\<theta>\\<^sub>1 ?v5 v' +\n       frechet I \\<theta>\\<^sub>2 ?v5 v')\n\ngoal (2 subgoals):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have eq2:\"(\\<lambda>v. blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v + blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v) = blin_frechet (good_interp I) (simple_term (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>v.\n        blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v +\n        blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v) =\n    blin_frechet (good_interp I)\n     (simple_term (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v +\n       blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v =\n       blin_frechet (good_interp I)\n        (simple_term (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)) v", "apply(rule blinfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v i.\n       blinfun_apply\n        (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v +\n         blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v)\n        i =\n       blinfun_apply\n        (blin_frechet (good_interp I)\n          (simple_term (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)) v)\n        i", "by (simp add: blinfun.add_left free1 free2 simple_term_inverse)"], ["proof (state)\nthis:\n  (\\<lambda>v.\n      blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v +\n      blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v) =\n  blin_frechet (good_interp I)\n   (simple_term (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))\n\ngoal (2 subgoals):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have cont:\"continuous_on UNIV (\\<lambda>v. blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v + blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>v.\n         blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v +\n         blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v)", "using continuous_on_add dfree_Plus.IH(1) dfree_Plus.IH(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>continuous_on ?s ?f; continuous_on ?s ?g\\<rbrakk>\n  \\<Longrightarrow> continuous_on ?s (\\<lambda>x. ?f x + ?g x)\n  continuous_on UNIV\n   (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1))\n  continuous_on UNIV\n   (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>v.\n         blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v +\n         blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v)", "by blast"], ["proof (state)\nthis:\n  continuous_on UNIV\n   (\\<lambda>v.\n       blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v +\n       blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v)\n\ngoal (2 subgoals):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n 2. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "then"], ["proof (chain)\npicking this:\n  continuous_on UNIV\n   (\\<lambda>v.\n       blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v +\n       blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v)", "show ?case"], ["proof (prove)\nusing this:\n  continuous_on UNIV\n   (\\<lambda>v.\n       blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v +\n       blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v)\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (blin_frechet (good_interp I)\n       (simple_term (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "using cont eq2"], ["proof (prove)\nusing this:\n  continuous_on UNIV\n   (\\<lambda>v.\n       blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v +\n       blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v)\n  continuous_on UNIV\n   (\\<lambda>v.\n       blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v +\n       blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v)\n  (\\<lambda>v.\n      blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v +\n      blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v) =\n  blin_frechet (good_interp I)\n   (simple_term (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (blin_frechet (good_interp I)\n       (simple_term (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "by metis"], ["proof (state)\nthis:\n  continuous_on UNIV\n   (blin_frechet (good_interp I)\n     (simple_term (Plus \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n\ngoal (1 subgoal):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "case (dfree_Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)"], ["proof (state)\nthis:\n  dfree \\<theta>\\<^sub>1\n  dfree \\<theta>\\<^sub>2\n  continuous_on UNIV\n   (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1))\n  continuous_on UNIV\n   (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "assume IH1:\"continuous_on UNIV (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1))\""], ["proof (state)\nthis:\n  continuous_on UNIV\n   (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "assume IH2:\"continuous_on UNIV (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2))\""], ["proof (state)\nthis:\n  continuous_on UNIV\n   (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "assume free1:\"dfree \\<theta>\\<^sub>1\""], ["proof (state)\nthis:\n  dfree \\<theta>\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "assume free2:\"dfree \\<theta>\\<^sub>2\""], ["proof (state)\nthis:\n  dfree \\<theta>\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have free:\"dfree (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dfree (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)", "using free1 free2"], ["proof (prove)\nusing this:\n  dfree \\<theta>\\<^sub>1\n  dfree \\<theta>\\<^sub>2\n\ngoal (1 subgoal):\n 1. dfree (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)", "by auto"], ["proof (state)\nthis:\n  dfree (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have bounded_linear:\"\\<And>v. bounded_linear (\\<lambda>v'. sterm_sem I \\<theta>\\<^sub>1 v * frechet I \\<theta>\\<^sub>2 v v' + frechet I \\<theta>\\<^sub>1 v v' * sterm_sem I \\<theta>\\<^sub>2 v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       bounded_linear\n        (\\<lambda>v'.\n            sterm_sem I \\<theta>\\<^sub>1 v *\n            frechet I \\<theta>\\<^sub>2 v v' +\n            frechet I \\<theta>\\<^sub>1 v v' *\n            sterm_sem I \\<theta>\\<^sub>2 v)", "apply(rule bounded_linear_add)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v.\n       bounded_linear\n        (\\<lambda>x.\n            sterm_sem I \\<theta>\\<^sub>1 v * frechet I \\<theta>\\<^sub>2 v x)\n 2. \\<And>v.\n       bounded_linear\n        (\\<lambda>x.\n            frechet I \\<theta>\\<^sub>1 v x * sterm_sem I \\<theta>\\<^sub>2 v)", "apply(rule bounded_linear_const_mult)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v. bounded_linear (frechet I \\<theta>\\<^sub>2 v)\n 2. \\<And>v.\n       bounded_linear\n        (\\<lambda>x.\n            frechet I \\<theta>\\<^sub>1 v x * sterm_sem I \\<theta>\\<^sub>2 v)", "using frechet_linear[OF good_interp free2]"], ["proof (prove)\nusing this:\n  bounded_linear (frechet I \\<theta>\\<^sub>2 ?v)\n\ngoal (2 subgoals):\n 1. \\<And>v. bounded_linear (frechet I \\<theta>\\<^sub>2 v)\n 2. \\<And>v.\n       bounded_linear\n        (\\<lambda>x.\n            frechet I \\<theta>\\<^sub>1 v x * sterm_sem I \\<theta>\\<^sub>2 v)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       (\\<And>v.\n           bounded_linear (frechet I \\<theta>\\<^sub>2 v)) \\<Longrightarrow>\n       bounded_linear\n        (\\<lambda>x.\n            frechet I \\<theta>\\<^sub>1 v x * sterm_sem I \\<theta>\\<^sub>2 v)", "apply(rule bounded_linear_mult_const)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       (\\<And>v.\n           bounded_linear (frechet I \\<theta>\\<^sub>2 v)) \\<Longrightarrow>\n       bounded_linear (frechet I \\<theta>\\<^sub>1 v)", "using frechet_linear[OF good_interp free1]"], ["proof (prove)\nusing this:\n  bounded_linear (frechet I \\<theta>\\<^sub>1 ?v)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       (\\<And>v.\n           bounded_linear (frechet I \\<theta>\\<^sub>2 v)) \\<Longrightarrow>\n       bounded_linear (frechet I \\<theta>\\<^sub>1 v)", "by auto"], ["proof (state)\nthis:\n  bounded_linear\n   (\\<lambda>v'.\n       sterm_sem I \\<theta>\\<^sub>1 ?v5 *\n       frechet I \\<theta>\\<^sub>2 ?v5 v' +\n       frechet I \\<theta>\\<^sub>1 ?v5 v' * sterm_sem I \\<theta>\\<^sub>2 ?v5)\n\ngoal (1 subgoal):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "then"], ["proof (chain)\npicking this:\n  bounded_linear\n   (\\<lambda>v'.\n       sterm_sem I \\<theta>\\<^sub>1 ?v5 *\n       frechet I \\<theta>\\<^sub>2 ?v5 v' +\n       frechet I \\<theta>\\<^sub>1 ?v5 v' * sterm_sem I \\<theta>\\<^sub>2 ?v5)", "have blin':\"\\<And>v. (\\<lambda>v'. sterm_sem I \\<theta>\\<^sub>1 v * frechet I \\<theta>\\<^sub>2 v v' + frechet I \\<theta>\\<^sub>1 v v' * sterm_sem I \\<theta>\\<^sub>2 v) \\<in> {f. bounded_linear f}\""], ["proof (prove)\nusing this:\n  bounded_linear\n   (\\<lambda>v'.\n       sterm_sem I \\<theta>\\<^sub>1 ?v5 *\n       frechet I \\<theta>\\<^sub>2 ?v5 v' +\n       frechet I \\<theta>\\<^sub>1 ?v5 v' * sterm_sem I \\<theta>\\<^sub>2 ?v5)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       (\\<lambda>v'.\n           sterm_sem I \\<theta>\\<^sub>1 v *\n           frechet I \\<theta>\\<^sub>2 v v' +\n           frechet I \\<theta>\\<^sub>1 v v' * sterm_sem I \\<theta>\\<^sub>2 v)\n       \\<in> {f. bounded_linear f}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>v'.\n      sterm_sem I \\<theta>\\<^sub>1 ?v5 * frechet I \\<theta>\\<^sub>2 ?v5 v' +\n      frechet I \\<theta>\\<^sub>1 ?v5 v' * sterm_sem I \\<theta>\\<^sub>2 ?v5)\n  \\<in> {f. bounded_linear f}\n\ngoal (1 subgoal):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have blinfun_eq:\"\\<And>v. Blinfun (\\<lambda>v'. sterm_sem I \\<theta>\\<^sub>1 v * frechet I \\<theta>\\<^sub>2 v v' + frechet I \\<theta>\\<^sub>1 v v' * sterm_sem I \\<theta>\\<^sub>2 v) \n    =  scaleR (sterm_sem I \\<theta>\\<^sub>1 v) (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v) + scaleR (sterm_sem I \\<theta>\\<^sub>2 v) (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       Blinfun\n        (\\<lambda>v'.\n            sterm_sem I \\<theta>\\<^sub>1 v *\n            frechet I \\<theta>\\<^sub>2 v v' +\n            frechet I \\<theta>\\<^sub>1 v v' *\n            sterm_sem I \\<theta>\\<^sub>2 v) =\n       sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n       blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v +\n       sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n       blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v", "apply(rule blinfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v i.\n       blinfun_apply\n        (Blinfun\n          (\\<lambda>v'.\n              sterm_sem I \\<theta>\\<^sub>1 v *\n              frechet I \\<theta>\\<^sub>2 v v' +\n              frechet I \\<theta>\\<^sub>1 v v' *\n              sterm_sem I \\<theta>\\<^sub>2 v))\n        i =\n       blinfun_apply\n        (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n         blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v +\n         sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n         blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n        i", "subgoal for v i"], ["proof (prove)\ngoal (1 subgoal):\n 1. blinfun_apply\n     (Blinfun\n       (\\<lambda>v'.\n           sterm_sem I \\<theta>\\<^sub>1 v *\n           frechet I \\<theta>\\<^sub>2 v v' +\n           frechet I \\<theta>\\<^sub>1 v v' *\n           sterm_sem I \\<theta>\\<^sub>2 v))\n     i =\n    blinfun_apply\n     (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n      blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v +\n      sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n      blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n     i", "using Blinfun_inverse[OF blin', of v]"], ["proof (prove)\nusing this:\n  blinfun_apply\n   (Blinfun\n     (\\<lambda>v'.\n         sterm_sem I \\<theta>\\<^sub>1 v * frechet I \\<theta>\\<^sub>2 v v' +\n         frechet I \\<theta>\\<^sub>1 v v' *\n         sterm_sem I \\<theta>\\<^sub>2 v)) =\n  (\\<lambda>v'.\n      sterm_sem I \\<theta>\\<^sub>1 v * frechet I \\<theta>\\<^sub>2 v v' +\n      frechet I \\<theta>\\<^sub>1 v v' * sterm_sem I \\<theta>\\<^sub>2 v)\n\ngoal (1 subgoal):\n 1. blinfun_apply\n     (Blinfun\n       (\\<lambda>v'.\n           sterm_sem I \\<theta>\\<^sub>1 v *\n           frechet I \\<theta>\\<^sub>2 v v' +\n           frechet I \\<theta>\\<^sub>1 v v' *\n           sterm_sem I \\<theta>\\<^sub>2 v))\n     i =\n    blinfun_apply\n     (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n      blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v +\n      sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n      blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n     i", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. blinfun_apply\n     (Blinfun\n       (\\<lambda>v'.\n           sterm_sem I \\<theta>\\<^sub>1 v *\n           frechet I \\<theta>\\<^sub>2 v v' +\n           frechet I \\<theta>\\<^sub>1 v v' *\n           sterm_sem I \\<theta>\\<^sub>2 v)) =\n    (\\<lambda>v'.\n        sterm_sem I \\<theta>\\<^sub>1 v * frechet I \\<theta>\\<^sub>2 v v' +\n        frechet I \\<theta>\\<^sub>1 v v' *\n        sterm_sem I \\<theta>\\<^sub>2 v) \\<Longrightarrow>\n    sterm_sem I \\<theta>\\<^sub>1 v * frechet I \\<theta>\\<^sub>2 v i +\n    frechet I \\<theta>\\<^sub>1 v i * sterm_sem I \\<theta>\\<^sub>2 v =\n    blinfun_apply\n     (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n      blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v +\n      sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n      blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n     i", "using blinfun.add_left[of \"sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v\" \"sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v\"]\n        blinfun.scaleR_left[of \"sterm_sem I \\<theta>\\<^sub>1 v\" \"blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v\"]\n        blinfun.scaleR_left[of \"sterm_sem I \\<theta>\\<^sub>2 v\" \"blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v\"]\n        bounded_linear_Blinfun_apply\n        frechet_blin[OF good_interp free1]\n        frechet_blin[OF good_interp free2]\n        frechet_linear[OF good_interp free1]\n        frechet_linear[OF good_interp free2]\n        mult.commute \n        real_scaleR_def"], ["proof (prove)\nusing this:\n  blinfun_apply\n   (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n    blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v +\n    sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n    blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n   ?b =\n  blinfun_apply\n   (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n    blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v)\n   ?b +\n  blinfun_apply\n   (sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n    blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n   ?b\n  blinfun_apply\n   (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n    blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v)\n   ?b =\n  sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n  blinfun_apply\n   (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v) ?b\n  blinfun_apply\n   (sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n    blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n   ?b =\n  sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n  blinfun_apply\n   (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v) ?b\n  bounded_linear ?f \\<Longrightarrow> blinfun_apply (Blinfun ?f) = ?f\n  (\\<lambda>v. Blinfun (frechet I \\<theta>\\<^sub>1 v)) =\n  blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1)\n  (\\<lambda>v. Blinfun (frechet I \\<theta>\\<^sub>2 v)) =\n  blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2)\n  bounded_linear (frechet I \\<theta>\\<^sub>1 ?v)\n  bounded_linear (frechet I \\<theta>\\<^sub>2 ?v)\n  ?a * ?b = ?b * ?a\n  ?a *\\<^sub>R ?x = ?a * ?x\n\ngoal (1 subgoal):\n 1. blinfun_apply\n     (Blinfun\n       (\\<lambda>v'.\n           sterm_sem I \\<theta>\\<^sub>1 v *\n           frechet I \\<theta>\\<^sub>2 v v' +\n           frechet I \\<theta>\\<^sub>1 v v' *\n           sterm_sem I \\<theta>\\<^sub>2 v)) =\n    (\\<lambda>v'.\n        sterm_sem I \\<theta>\\<^sub>1 v * frechet I \\<theta>\\<^sub>2 v v' +\n        frechet I \\<theta>\\<^sub>1 v v' *\n        sterm_sem I \\<theta>\\<^sub>2 v) \\<Longrightarrow>\n    sterm_sem I \\<theta>\\<^sub>1 v * frechet I \\<theta>\\<^sub>2 v i +\n    frechet I \\<theta>\\<^sub>1 v i * sterm_sem I \\<theta>\\<^sub>2 v =\n    blinfun_apply\n     (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n      blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v +\n      sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n      blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n     i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>blinfun_apply\n              (Blinfun\n                (\\<lambda>v'.\n                    sterm_sem I \\<theta>\\<^sub>1 v *\n                    frechet I \\<theta>\\<^sub>2 v v' +\n                    frechet I \\<theta>\\<^sub>1 v v' *\n                    sterm_sem I \\<theta>\\<^sub>2 v)) =\n             (\\<lambda>v'.\n                 sterm_sem I \\<theta>\\<^sub>1 v *\n                 frechet I \\<theta>\\<^sub>2 v v' +\n                 frechet I \\<theta>\\<^sub>1 v v' *\n                 sterm_sem I \\<theta>\\<^sub>2 v);\n     \\<And>b.\n        blinfun_apply\n         (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n          blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v +\n          sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n          blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n         b =\n        blinfun_apply\n         (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n          blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v)\n         b +\n        blinfun_apply\n         (sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n          blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n         b;\n     \\<And>b.\n        blinfun_apply\n         (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n          blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v)\n         b =\n        sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n        blinfun_apply\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v) b;\n     \\<And>b.\n        blinfun_apply\n         (sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n          blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n         b =\n        sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n        blinfun_apply\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v) b;\n     \\<And>f.\n        bounded_linear f \\<Longrightarrow> blinfun_apply (Blinfun f) = f;\n     (\\<lambda>v. Blinfun (frechet I \\<theta>\\<^sub>1 v)) =\n     blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1);\n     (\\<lambda>v. Blinfun (frechet I \\<theta>\\<^sub>2 v)) =\n     blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2);\n     \\<And>v. bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n     \\<And>v. bounded_linear (frechet I \\<theta>\\<^sub>2 v);\n     \\<And>a b. a * b = b * a; \\<And>a x. a *\\<^sub>R x = a * x\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I \\<theta>\\<^sub>1 v *\n                      frechet I \\<theta>\\<^sub>2 v i +\n                      frechet I \\<theta>\\<^sub>1 v i *\n                      sterm_sem I \\<theta>\\<^sub>2 v =\n                      blinfun_apply\n                       (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n                        blin_frechet (good_interp I)\n                         (simple_term \\<theta>\\<^sub>2) v +\n                        sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n                        blin_frechet (good_interp I)\n                         (simple_term \\<theta>\\<^sub>1) v)\n                       i", "have f1: \"\\<And>v. blinfun_apply (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v) = frechet I \\<theta>\\<^sub>1 v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       blinfun_apply\n        (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v) =\n       frechet I \\<theta>\\<^sub>1 v", "by (metis (no_types) \\<open>(\\<lambda>v. Blinfun (frechet I \\<theta>\\<^sub>1 v)) = blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1)\\<close> \\<open>\\<And>v. bounded_linear (frechet I \\<theta>\\<^sub>1 v)\\<close> bounded_linear_Blinfun_apply)"], ["proof (state)\nthis:\n  blinfun_apply\n   (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) ?v5) =\n  frechet I \\<theta>\\<^sub>1 ?v5\n\ngoal (1 subgoal):\n 1. \\<lbrakk>blinfun_apply\n              (Blinfun\n                (\\<lambda>v'.\n                    sterm_sem I \\<theta>\\<^sub>1 v *\n                    frechet I \\<theta>\\<^sub>2 v v' +\n                    frechet I \\<theta>\\<^sub>1 v v' *\n                    sterm_sem I \\<theta>\\<^sub>2 v)) =\n             (\\<lambda>v'.\n                 sterm_sem I \\<theta>\\<^sub>1 v *\n                 frechet I \\<theta>\\<^sub>2 v v' +\n                 frechet I \\<theta>\\<^sub>1 v v' *\n                 sterm_sem I \\<theta>\\<^sub>2 v);\n     \\<And>b.\n        blinfun_apply\n         (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n          blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v +\n          sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n          blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n         b =\n        blinfun_apply\n         (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n          blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v)\n         b +\n        blinfun_apply\n         (sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n          blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n         b;\n     \\<And>b.\n        blinfun_apply\n         (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n          blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v)\n         b =\n        sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n        blinfun_apply\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v) b;\n     \\<And>b.\n        blinfun_apply\n         (sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n          blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n         b =\n        sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n        blinfun_apply\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v) b;\n     \\<And>f.\n        bounded_linear f \\<Longrightarrow> blinfun_apply (Blinfun f) = f;\n     (\\<lambda>v. Blinfun (frechet I \\<theta>\\<^sub>1 v)) =\n     blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1);\n     (\\<lambda>v. Blinfun (frechet I \\<theta>\\<^sub>2 v)) =\n     blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2);\n     \\<And>v. bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n     \\<And>v. bounded_linear (frechet I \\<theta>\\<^sub>2 v);\n     \\<And>a b. a * b = b * a; \\<And>a x. a *\\<^sub>R x = a * x\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I \\<theta>\\<^sub>1 v *\n                      frechet I \\<theta>\\<^sub>2 v i +\n                      frechet I \\<theta>\\<^sub>1 v i *\n                      sterm_sem I \\<theta>\\<^sub>2 v =\n                      blinfun_apply\n                       (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n                        blin_frechet (good_interp I)\n                         (simple_term \\<theta>\\<^sub>2) v +\n                        sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n                        blin_frechet (good_interp I)\n                         (simple_term \\<theta>\\<^sub>1) v)\n                       i", "have \"\\<And>v. blinfun_apply (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v) = frechet I \\<theta>\\<^sub>2 v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       blinfun_apply\n        (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v) =\n       frechet I \\<theta>\\<^sub>2 v", "by (metis (no_types) \\<open>(\\<lambda>v. Blinfun (frechet I \\<theta>\\<^sub>2 v)) = blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2)\\<close> \\<open>\\<And>v. bounded_linear (frechet I \\<theta>\\<^sub>2 v)\\<close> bounded_linear_Blinfun_apply)"], ["proof (state)\nthis:\n  blinfun_apply\n   (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) ?v5) =\n  frechet I \\<theta>\\<^sub>2 ?v5\n\ngoal (1 subgoal):\n 1. \\<lbrakk>blinfun_apply\n              (Blinfun\n                (\\<lambda>v'.\n                    sterm_sem I \\<theta>\\<^sub>1 v *\n                    frechet I \\<theta>\\<^sub>2 v v' +\n                    frechet I \\<theta>\\<^sub>1 v v' *\n                    sterm_sem I \\<theta>\\<^sub>2 v)) =\n             (\\<lambda>v'.\n                 sterm_sem I \\<theta>\\<^sub>1 v *\n                 frechet I \\<theta>\\<^sub>2 v v' +\n                 frechet I \\<theta>\\<^sub>1 v v' *\n                 sterm_sem I \\<theta>\\<^sub>2 v);\n     \\<And>b.\n        blinfun_apply\n         (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n          blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v +\n          sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n          blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n         b =\n        blinfun_apply\n         (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n          blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v)\n         b +\n        blinfun_apply\n         (sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n          blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n         b;\n     \\<And>b.\n        blinfun_apply\n         (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n          blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v)\n         b =\n        sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n        blinfun_apply\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v) b;\n     \\<And>b.\n        blinfun_apply\n         (sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n          blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n         b =\n        sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n        blinfun_apply\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v) b;\n     \\<And>f.\n        bounded_linear f \\<Longrightarrow> blinfun_apply (Blinfun f) = f;\n     (\\<lambda>v. Blinfun (frechet I \\<theta>\\<^sub>1 v)) =\n     blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1);\n     (\\<lambda>v. Blinfun (frechet I \\<theta>\\<^sub>2 v)) =\n     blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2);\n     \\<And>v. bounded_linear (frechet I \\<theta>\\<^sub>1 v);\n     \\<And>v. bounded_linear (frechet I \\<theta>\\<^sub>2 v);\n     \\<And>a b. a * b = b * a; \\<And>a x. a *\\<^sub>R x = a * x\\<rbrakk>\n    \\<Longrightarrow> sterm_sem I \\<theta>\\<^sub>1 v *\n                      frechet I \\<theta>\\<^sub>2 v i +\n                      frechet I \\<theta>\\<^sub>1 v i *\n                      sterm_sem I \\<theta>\\<^sub>2 v =\n                      blinfun_apply\n                       (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n                        blin_frechet (good_interp I)\n                         (simple_term \\<theta>\\<^sub>2) v +\n                        sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n                        blin_frechet (good_interp I)\n                         (simple_term \\<theta>\\<^sub>1) v)\n                       i", "then"], ["proof (chain)\npicking this:\n  blinfun_apply\n   (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) ?v5) =\n  frechet I \\<theta>\\<^sub>2 ?v5", "show \"sterm_sem I \\<theta>\\<^sub>1 v * frechet I \\<theta>\\<^sub>2 v i + frechet I \\<theta>\\<^sub>1 v i * sterm_sem I \\<theta>\\<^sub>2 v = blinfun_apply (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v + sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v) i\""], ["proof (prove)\nusing this:\n  blinfun_apply\n   (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) ?v5) =\n  frechet I \\<theta>\\<^sub>2 ?v5\n\ngoal (1 subgoal):\n 1. sterm_sem I \\<theta>\\<^sub>1 v * frechet I \\<theta>\\<^sub>2 v i +\n    frechet I \\<theta>\\<^sub>1 v i * sterm_sem I \\<theta>\\<^sub>2 v =\n    blinfun_apply\n     (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n      blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v +\n      sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n      blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n     i", "using f1"], ["proof (prove)\nusing this:\n  blinfun_apply\n   (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) ?v5) =\n  frechet I \\<theta>\\<^sub>2 ?v5\n  blinfun_apply\n   (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) ?v5) =\n  frechet I \\<theta>\\<^sub>1 ?v5\n\ngoal (1 subgoal):\n 1. sterm_sem I \\<theta>\\<^sub>1 v * frechet I \\<theta>\\<^sub>2 v i +\n    frechet I \\<theta>\\<^sub>1 v i * sterm_sem I \\<theta>\\<^sub>2 v =\n    blinfun_apply\n     (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n      blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v +\n      sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n      blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n     i", "by (simp add: \\<open>\\<And>b. blinfun_apply (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v + sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v) b = blinfun_apply (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v) b + blinfun_apply (sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v) b\\<close> \\<open>\\<And>b. blinfun_apply (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v) b = sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R blinfun_apply (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v) b\\<close> \\<open>\\<And>b. blinfun_apply (sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v) b = sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R blinfun_apply (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v) b\\<close>)"], ["proof (state)\nthis:\n  sterm_sem I \\<theta>\\<^sub>1 v * frechet I \\<theta>\\<^sub>2 v i +\n  frechet I \\<theta>\\<^sub>1 v i * sterm_sem I \\<theta>\\<^sub>2 v =\n  blinfun_apply\n   (sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n    blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v +\n    sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n    blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n   i\n\ngoal:\nNo subgoals!", "qed"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Blinfun\n   (\\<lambda>v'.\n       sterm_sem I \\<theta>\\<^sub>1 ?v5 *\n       frechet I \\<theta>\\<^sub>2 ?v5 v' +\n       frechet I \\<theta>\\<^sub>1 ?v5 v' *\n       sterm_sem I \\<theta>\\<^sub>2 ?v5) =\n  sterm_sem I \\<theta>\\<^sub>1 ?v5 *\\<^sub>R\n  blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) ?v5 +\n  sterm_sem I \\<theta>\\<^sub>2 ?v5 *\\<^sub>R\n  blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) ?v5\n\ngoal (1 subgoal):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have cont':\"continuous_on UNIV \n    (\\<lambda>v. scaleR (sterm_sem I \\<theta>\\<^sub>1 v) (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v) \n       + scaleR (sterm_sem I \\<theta>\\<^sub>2 v) (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>v.\n         sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n         blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v +\n         sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n         blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)", "apply(rule continuous_on_add)"], ["proof (prove)\ngoal (2 subgoals):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         sterm_sem I \\<theta>\\<^sub>1 x *\\<^sub>R\n         blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) x)\n 2. continuous_on UNIV\n     (\\<lambda>x.\n         sterm_sem I \\<theta>\\<^sub>2 x *\\<^sub>R\n         blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) x)", "apply(rule continuous_on_scaleR)"], ["proof (prove)\ngoal (3 subgoals):\n 1. continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>1)\n 2. continuous_on UNIV\n     (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2))\n 3. continuous_on UNIV\n     (\\<lambda>x.\n         sterm_sem I \\<theta>\\<^sub>2 x *\\<^sub>R\n         blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) x)", "apply(rule sterm_continuous[OF good_interp free1])"], ["proof (prove)\ngoal (2 subgoals):\n 1. continuous_on UNIV\n     (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2))\n 2. continuous_on UNIV\n     (\\<lambda>x.\n         sterm_sem I \\<theta>\\<^sub>2 x *\\<^sub>R\n         blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) x)", "apply(rule IH2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>x.\n         sterm_sem I \\<theta>\\<^sub>2 x *\\<^sub>R\n         blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) x)", "apply(rule continuous_on_scaleR)"], ["proof (prove)\ngoal (2 subgoals):\n 1. continuous_on UNIV (sterm_sem I \\<theta>\\<^sub>2)\n 2. continuous_on UNIV\n     (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1))", "apply(rule sterm_continuous[OF good_interp free2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1))", "by(rule IH1)"], ["proof (state)\nthis:\n  continuous_on UNIV\n   (\\<lambda>v.\n       sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n       blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v +\n       sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n       blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n\ngoal (1 subgoal):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have cont:\"continuous_on UNIV (\\<lambda>v. Blinfun (\\<lambda>v'. sterm_sem I \\<theta>\\<^sub>1 v * frechet I \\<theta>\\<^sub>2 v v' + frechet I \\<theta>\\<^sub>1 v v' * sterm_sem I \\<theta>\\<^sub>2 v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>v.\n         Blinfun\n          (\\<lambda>v'.\n              sterm_sem I \\<theta>\\<^sub>1 v *\n              frechet I \\<theta>\\<^sub>2 v v' +\n              frechet I \\<theta>\\<^sub>1 v v' *\n              sterm_sem I \\<theta>\\<^sub>2 v))", "using cont' blinfun_eq"], ["proof (prove)\nusing this:\n  continuous_on UNIV\n   (\\<lambda>v.\n       sterm_sem I \\<theta>\\<^sub>1 v *\\<^sub>R\n       blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) v +\n       sterm_sem I \\<theta>\\<^sub>2 v *\\<^sub>R\n       blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) v)\n  Blinfun\n   (\\<lambda>v'.\n       sterm_sem I \\<theta>\\<^sub>1 ?v5 *\n       frechet I \\<theta>\\<^sub>2 ?v5 v' +\n       frechet I \\<theta>\\<^sub>1 ?v5 v' *\n       sterm_sem I \\<theta>\\<^sub>2 ?v5) =\n  sterm_sem I \\<theta>\\<^sub>1 ?v5 *\\<^sub>R\n  blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>2) ?v5 +\n  sterm_sem I \\<theta>\\<^sub>2 ?v5 *\\<^sub>R\n  blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1) ?v5\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (\\<lambda>v.\n         Blinfun\n          (\\<lambda>v'.\n              sterm_sem I \\<theta>\\<^sub>1 v *\n              frechet I \\<theta>\\<^sub>2 v v' +\n              frechet I \\<theta>\\<^sub>1 v v' *\n              sterm_sem I \\<theta>\\<^sub>2 v))", "by auto"], ["proof (state)\nthis:\n  continuous_on UNIV\n   (\\<lambda>v.\n       Blinfun\n        (\\<lambda>v'.\n            sterm_sem I \\<theta>\\<^sub>1 v *\n            frechet I \\<theta>\\<^sub>2 v v' +\n            frechet I \\<theta>\\<^sub>1 v v' *\n            sterm_sem I \\<theta>\\<^sub>2 v))\n\ngoal (1 subgoal):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "have eq:\"(\\<lambda>v. Blinfun (\\<lambda>v'. sterm_sem I \\<theta>\\<^sub>1 v * frechet I \\<theta>\\<^sub>2 v v' + frechet I \\<theta>\\<^sub>1 v v' * sterm_sem I \\<theta>\\<^sub>2 v)) = blin_frechet (good_interp I) (simple_term (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>v.\n        Blinfun\n         (\\<lambda>v'.\n             sterm_sem I \\<theta>\\<^sub>1 v *\n             frechet I \\<theta>\\<^sub>2 v v' +\n             frechet I \\<theta>\\<^sub>1 v v' *\n             sterm_sem I \\<theta>\\<^sub>2 v)) =\n    blin_frechet (good_interp I)\n     (simple_term (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))", "using frechet_blin[OF good_interp free]"], ["proof (prove)\nusing this:\n  (\\<lambda>v.\n      Blinfun (frechet I (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2) v)) =\n  blin_frechet (good_interp I)\n   (simple_term (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. (\\<lambda>v.\n        Blinfun\n         (\\<lambda>v'.\n             sterm_sem I \\<theta>\\<^sub>1 v *\n             frechet I \\<theta>\\<^sub>2 v v' +\n             frechet I \\<theta>\\<^sub>1 v v' *\n             sterm_sem I \\<theta>\\<^sub>2 v)) =\n    blin_frechet (good_interp I)\n     (simple_term (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>v.\n      Blinfun\n       (\\<lambda>v'.\n           sterm_sem I \\<theta>\\<^sub>1 v *\n           frechet I \\<theta>\\<^sub>2 v v' +\n           frechet I \\<theta>\\<^sub>1 v v' *\n           sterm_sem I \\<theta>\\<^sub>2 v)) =\n  blin_frechet (good_interp I)\n   (simple_term (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<And>\\<theta>\\<^sub>1 \\<theta>\\<^sub>2.\n       \\<lbrakk>dfree \\<theta>\\<^sub>1;\n        continuous_on UNIV\n         (blin_frechet (good_interp I) (simple_term \\<theta>\\<^sub>1));\n        dfree \\<theta>\\<^sub>2;\n        continuous_on UNIV\n         (blin_frechet (good_interp I)\n           (simple_term \\<theta>\\<^sub>2))\\<rbrakk>\n       \\<Longrightarrow> continuous_on UNIV\n                          (blin_frechet (good_interp I)\n                            (simple_term\n                              (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>v.\n      Blinfun\n       (\\<lambda>v'.\n           sterm_sem I \\<theta>\\<^sub>1 v *\n           frechet I \\<theta>\\<^sub>2 v v' +\n           frechet I \\<theta>\\<^sub>1 v v' *\n           sterm_sem I \\<theta>\\<^sub>2 v)) =\n  blin_frechet (good_interp I)\n   (simple_term (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))", "show ?case"], ["proof (prove)\nusing this:\n  (\\<lambda>v.\n      Blinfun\n       (\\<lambda>v'.\n           sterm_sem I \\<theta>\\<^sub>1 v *\n           frechet I \\<theta>\\<^sub>2 v v' +\n           frechet I \\<theta>\\<^sub>1 v v' *\n           sterm_sem I \\<theta>\\<^sub>2 v)) =\n  blin_frechet (good_interp I)\n   (simple_term (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2))\n\ngoal (1 subgoal):\n 1. continuous_on UNIV\n     (blin_frechet (good_interp I)\n       (simple_term (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))", "by (metis cont)"], ["proof (state)\nthis:\n  continuous_on UNIV\n   (blin_frechet (good_interp I)\n     (simple_term (Times \\<theta>\\<^sub>1 \\<theta>\\<^sub>2)))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}