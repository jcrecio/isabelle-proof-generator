{"file_name": "/home/qj213/afp-2021-10-22/thys/Linear_Inequalities/Missing_VS_Connect.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Linear_Inequalities", "problem_names": ["lemma span_diff: assumes A: \"A \\<subseteq> carrier_vec n\"\n  and a: \"a \\<in> span A\" and b: \"b \\<in> span A\"\nshows \"a - b \\<in> span A\"", "lemma finsum_scalar_prod_sum':\n  assumes f: \"f \\<in> U \\<rightarrow> carrier_vec n\"\n    and w: \"w \\<in> carrier_vec n\"\n  shows \"w \\<bullet> finsum V f U = sum (\\<lambda>u. w \\<bullet> f u) U\"", "lemma lincomb_scalar_prod_left: assumes \"W \\<subseteq> carrier_vec n\" \"v \\<in> carrier_vec n\"\n  shows \"lincomb a W \\<bullet> v = (\\<Sum>w\\<in>W. a w * (w \\<bullet> v))\"", "lemma lincomb_scalar_prod_right: assumes \"W \\<subseteq> carrier_vec n\" \"v \\<in> carrier_vec n\"\n  shows \"v \\<bullet> lincomb a W = (\\<Sum>w\\<in>W. a w * (v \\<bullet> w))\"", "lemma lin_indpt_empty[simp]: \"lin_indpt {}\"", "lemma span_carrier_lin_indpt_card_n:\n  assumes \"W \\<subseteq> carrier_vec n\" \"card W = n\" \"lin_indpt W\"\n  shows \"span W = carrier_vec n\"", "lemma ortho_span: assumes W: \"W \\<subseteq> carrier_vec n\"\n  and X: \"X \\<subseteq> carrier_vec n\"\n  and ortho: \"\\<And> w x. w \\<in> W \\<Longrightarrow> x \\<in> X \\<Longrightarrow> w \\<bullet> x = 0\"\n  and w: \"w \\<in> span W\" and x: \"x \\<in> X\"\nshows \"w \\<bullet> x = 0\"", "lemma ortho_span': assumes W: \"W \\<subseteq> carrier_vec n\"\n  and X: \"X \\<subseteq> carrier_vec n\"\n  and ortho: \"\\<And> w x. w \\<in> W \\<Longrightarrow> x \\<in> X \\<Longrightarrow> x \\<bullet> w = 0\"\n  and w: \"w \\<in> span W\" and x: \"x \\<in> X\"\nshows \"x \\<bullet> w = 0\"", "lemma ortho_span_span: assumes W: \"W \\<subseteq> carrier_vec n\"\n  and X: \"X \\<subseteq> carrier_vec n\"\n  and ortho: \"\\<And> w x. w \\<in> W \\<Longrightarrow> x \\<in> X \\<Longrightarrow> w \\<bullet> x = 0\"\n  and w: \"w \\<in> span W\" and x: \"x \\<in> span X\"\nshows \"w \\<bullet> x = 0\"", "lemma lincomb_in_span[intro]:\n  assumes X: \"X\\<subseteq> carrier_vec n\"\n  shows \"lincomb a X \\<in> span X\"", "lemma generating_card_n_basis: assumes X: \"X \\<subseteq> carrier_vec n\"\n  and span: \"carrier_vec n \\<subseteq> span X\"\n  and card: \"card X = n\"\nshows \"basis X\"", "lemma lincomb_list_append:\n  assumes Ws: \"set Ws \\<subseteq> carrier_vec n\"\n  shows \"set Vs \\<subseteq> carrier_vec n \\<Longrightarrow> lincomb_list f (Vs @ Ws) =\n    lincomb_list f Vs + lincomb_list (\\<lambda> i. f (i + length Vs)) Ws\"", "lemma lincomb_list_snoc[simp]:\n  shows \"set Vs \\<subseteq> carrier_vec n \\<Longrightarrow> x \\<in> carrier_vec n \\<Longrightarrow>\n          lincomb_list f (Vs @ [x]) = lincomb_list f Vs + f (length Vs) \\<cdot>\\<^sub>v x\"", "lemma lincomb_list_smult:\n  \"set Vs \\<subseteq> carrier_vec n \\<Longrightarrow> lincomb_list (\\<lambda> i. a * c i) Vs = a \\<cdot>\\<^sub>v lincomb_list c Vs\"", "lemma lincomb_list_index:\n  assumes i: \"i < n\"\n  shows \"set Xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n         lincomb_list c Xs $ i = sum (\\<lambda> j. c j * (Xs ! j) $ i) {0..<length Xs}\""], "translations": [["", "lemma span_diff: assumes A: \"A \\<subseteq> carrier_vec n\"\n  and a: \"a \\<in> span A\" and b: \"b \\<in> span A\"\nshows \"a - b \\<in> span A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a - b \\<in> local.span A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a - b \\<in> local.span A", "from A a"], ["proof (chain)\npicking this:\n  A \\<subseteq> carrier_vec n\n  a \\<in> local.span A", "have an: \"a \\<in> carrier_vec n\""], ["proof (prove)\nusing this:\n  A \\<subseteq> carrier_vec n\n  a \\<in> local.span A\n\ngoal (1 subgoal):\n 1. a \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  a \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. a - b \\<in> local.span A", "from A b"], ["proof (chain)\npicking this:\n  A \\<subseteq> carrier_vec n\n  b \\<in> local.span A", "have bn: \"b \\<in> carrier_vec n\""], ["proof (prove)\nusing this:\n  A \\<subseteq> carrier_vec n\n  b \\<in> local.span A\n\ngoal (1 subgoal):\n 1. b \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  b \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. a - b \\<in> local.span A", "have \"a + (-1 \\<cdot>\\<^sub>v b) \\<in> span A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a + - (1::'a) \\<cdot>\\<^sub>v b \\<in> local.span A", "by (rule span_add1[OF A a], insert b A, auto)"], ["proof (state)\nthis:\n  a + - (1::'a) \\<cdot>\\<^sub>v b \\<in> local.span A\n\ngoal (1 subgoal):\n 1. a - b \\<in> local.span A", "also"], ["proof (state)\nthis:\n  a + - (1::'a) \\<cdot>\\<^sub>v b \\<in> local.span A\n\ngoal (1 subgoal):\n 1. a - b \\<in> local.span A", "have \"a + (-1 \\<cdot>\\<^sub>v b) = a - b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a + - (1::'a) \\<cdot>\\<^sub>v b = a - b", "using an bn"], ["proof (prove)\nusing this:\n  a \\<in> carrier_vec n\n  b \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. a + - (1::'a) \\<cdot>\\<^sub>v b = a - b", "by auto"], ["proof (state)\nthis:\n  a + - (1::'a) \\<cdot>\\<^sub>v b = a - b\n\ngoal (1 subgoal):\n 1. a - b \\<in> local.span A", "finally"], ["proof (chain)\npicking this:\n  a - b \\<in> local.span A", "show ?thesis"], ["proof (prove)\nusing this:\n  a - b \\<in> local.span A\n\ngoal (1 subgoal):\n 1. a - b \\<in> local.span A", "by auto"], ["proof (state)\nthis:\n  a - b \\<in> local.span A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finsum_scalar_prod_sum':\n  assumes f: \"f \\<in> U \\<rightarrow> carrier_vec n\"\n    and w: \"w \\<in> carrier_vec n\"\n  shows \"w \\<bullet> finsum V f U = sum (\\<lambda>u. w \\<bullet> f u) U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<bullet> finsum V f U = (\\<Sum>u\\<in>U. w \\<bullet> f u)", "by (subst comm_scalar_prod[OF w], (insert f, auto)[1],\n      subst finsum_scalar_prod_sum[OF f w],\n      insert f, intro sum.cong[OF refl] comm_scalar_prod[OF _ w], auto)"], ["", "lemma lincomb_scalar_prod_left: assumes \"W \\<subseteq> carrier_vec n\" \"v \\<in> carrier_vec n\"\n  shows \"lincomb a W \\<bullet> v = (\\<Sum>w\\<in>W. a w * (w \\<bullet> v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb a W \\<bullet> v = (\\<Sum>w\\<in>W. a w * (w \\<bullet> v))", "unfolding lincomb_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>W. a v \\<cdot>\\<^sub>v v) \\<bullet> v =\n    (\\<Sum>w\\<in>W. a w * (w \\<bullet> v))", "by (subst finsum_scalar_prod_sum, insert assms, auto intro!: sum.cong)"], ["", "lemma lincomb_scalar_prod_right: assumes \"W \\<subseteq> carrier_vec n\" \"v \\<in> carrier_vec n\"\n  shows \"v \\<bullet> lincomb a W = (\\<Sum>w\\<in>W. a w * (v \\<bullet> w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<bullet> lincomb a W = (\\<Sum>w\\<in>W. a w * (v \\<bullet> w))", "unfolding lincomb_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<bullet> (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>W. a v \\<cdot>\\<^sub>v v) =\n    (\\<Sum>w\\<in>W. a w * (v \\<bullet> w))", "by (subst finsum_scalar_prod_sum', insert assms, auto intro!: sum.cong)"], ["", "lemma lin_indpt_empty[simp]: \"lin_indpt {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lin_indpt {}", "using lin_dep_def"], ["proof (prove)\nusing this:\n  lin_dep ?S =\n  (\\<exists>A a v.\n      finite A \\<and>\n      A \\<subseteq> ?S \\<and>\n      True \\<and>\n      lincomb a A = 0\\<^sub>v n \\<and>\n      v \\<in> A \\<and> a v \\<noteq> (0::'a))\n\ngoal (1 subgoal):\n 1. lin_indpt {}", "by auto"], ["", "lemma span_carrier_lin_indpt_card_n:\n  assumes \"W \\<subseteq> carrier_vec n\" \"card W = n\" \"lin_indpt W\"\n  shows \"span W = carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.span W = carrier_vec n", "using assms basis_def dim_is_n dim_li_is_basis fin_dim_li_fin"], ["proof (prove)\nusing this:\n  W \\<subseteq> carrier_vec n\n  card W = n\n  lin_indpt W\n  basis ?A =\n  (lin_indpt ?A \\<and>\n   local.span ?A = carrier_vec n \\<and> ?A \\<subseteq> carrier_vec n)\n  local.dim = n\n  \\<lbrakk>fin_dim; finite ?A; ?A \\<subseteq> carrier_vec n; lin_indpt ?A;\n   local.dim \\<le> card ?A\\<rbrakk>\n  \\<Longrightarrow> basis ?A\n  \\<lbrakk>fin_dim; lin_indpt ?A; ?A \\<subseteq> carrier_vec n\\<rbrakk>\n  \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. local.span W = carrier_vec n", "by simp"], ["", "lemma ortho_span: assumes W: \"W \\<subseteq> carrier_vec n\"\n  and X: \"X \\<subseteq> carrier_vec n\"\n  and ortho: \"\\<And> w x. w \\<in> W \\<Longrightarrow> x \\<in> X \\<Longrightarrow> w \\<bullet> x = 0\"\n  and w: \"w \\<in> span W\" and x: \"x \\<in> X\"\nshows \"w \\<bullet> x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<bullet> x = (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. w \\<bullet> x = (0::'a)", "from w W"], ["proof (chain)\npicking this:\n  w \\<in> local.span W\n  W \\<subseteq> carrier_vec n", "obtain c V where \"finite V\" and VW: \"V \\<subseteq> W\" and w: \"w = lincomb c V\""], ["proof (prove)\nusing this:\n  w \\<in> local.span W\n  W \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. (\\<And>V c.\n        \\<lbrakk>finite V; V \\<subseteq> W; w = lincomb c V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson in_spanE)"], ["proof (state)\nthis:\n  finite V\n  V \\<subseteq> W\n  w = lincomb c V\n\ngoal (1 subgoal):\n 1. w \\<bullet> x = (0::'a)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<bullet> x = (0::'a)", "unfolding w"], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb c V \\<bullet> x = (0::'a)", "by (subst lincomb_scalar_prod_left, insert W VW X x ortho, auto intro!: sum.neutral)"], ["proof (state)\nthis:\n  w \\<bullet> x = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ortho_span': assumes W: \"W \\<subseteq> carrier_vec n\"\n  and X: \"X \\<subseteq> carrier_vec n\"\n  and ortho: \"\\<And> w x. w \\<in> W \\<Longrightarrow> x \\<in> X \\<Longrightarrow> x \\<bullet> w = 0\"\n  and w: \"w \\<in> span W\" and x: \"x \\<in> X\"\nshows \"x \\<bullet> w = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<bullet> w = (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<bullet> w = (0::'a)", "from w W"], ["proof (chain)\npicking this:\n  w \\<in> local.span W\n  W \\<subseteq> carrier_vec n", "obtain c V where \"finite V\" and VW: \"V \\<subseteq> W\" and w: \"w = lincomb c V\""], ["proof (prove)\nusing this:\n  w \\<in> local.span W\n  W \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. (\\<And>V c.\n        \\<lbrakk>finite V; V \\<subseteq> W; w = lincomb c V\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson in_spanE)"], ["proof (state)\nthis:\n  finite V\n  V \\<subseteq> W\n  w = lincomb c V\n\ngoal (1 subgoal):\n 1. x \\<bullet> w = (0::'a)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<bullet> w = (0::'a)", "unfolding w"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<bullet> lincomb c V = (0::'a)", "by (subst lincomb_scalar_prod_right, insert W VW X x ortho, auto intro!: sum.neutral)"], ["proof (state)\nthis:\n  x \\<bullet> w = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ortho_span_span: assumes W: \"W \\<subseteq> carrier_vec n\"\n  and X: \"X \\<subseteq> carrier_vec n\"\n  and ortho: \"\\<And> w x. w \\<in> W \\<Longrightarrow> x \\<in> X \\<Longrightarrow> w \\<bullet> x = 0\"\n  and w: \"w \\<in> span W\" and x: \"x \\<in> span X\"\nshows \"w \\<bullet> x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<bullet> x = (0::'a)", "by (rule ortho_span[OF W _ ortho_span'[OF X W _ _] w x], insert W X ortho, auto)"], ["", "lemma lincomb_in_span[intro]:\n  assumes X: \"X\\<subseteq> carrier_vec n\"\n  shows \"lincomb a X \\<in> span X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb a X \\<in> local.span X", "proof(cases \"finite X\")"], ["proof (state)\ngoal (2 subgoals):\n 1. finite X \\<Longrightarrow> lincomb a X \\<in> local.span X\n 2. infinite X \\<Longrightarrow> lincomb a X \\<in> local.span X", "case False"], ["proof (state)\nthis:\n  infinite X\n\ngoal (2 subgoals):\n 1. finite X \\<Longrightarrow> lincomb a X \\<in> local.span X\n 2. infinite X \\<Longrightarrow> lincomb a X \\<in> local.span X", "hence \"lincomb a X = 0\\<^sub>v n\""], ["proof (prove)\nusing this:\n  infinite X\n\ngoal (1 subgoal):\n 1. lincomb a X = 0\\<^sub>v n", "using X"], ["proof (prove)\nusing this:\n  infinite X\n  X \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. lincomb a X = 0\\<^sub>v n", "by (simp add: lincomb_def)"], ["proof (state)\nthis:\n  lincomb a X = 0\\<^sub>v n\n\ngoal (2 subgoals):\n 1. finite X \\<Longrightarrow> lincomb a X \\<in> local.span X\n 2. infinite X \\<Longrightarrow> lincomb a X \\<in> local.span X", "thus ?thesis"], ["proof (prove)\nusing this:\n  lincomb a X = 0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. lincomb a X \\<in> local.span X", "using X"], ["proof (prove)\nusing this:\n  lincomb a X = 0\\<^sub>v n\n  X \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. lincomb a X \\<in> local.span X", "by force"], ["proof (state)\nthis:\n  lincomb a X \\<in> local.span X\n\ngoal (1 subgoal):\n 1. finite X \\<Longrightarrow> lincomb a X \\<in> local.span X", "qed (insert X, auto)"], ["", "lemma generating_card_n_basis: assumes X: \"X \\<subseteq> carrier_vec n\"\n  and span: \"carrier_vec n \\<subseteq> span X\"\n  and card: \"card X = n\"\nshows \"basis X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. basis X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. basis X", "have fin: \"finite X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite X", "proof (cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> finite X\n 2. n \\<noteq> 0 \\<Longrightarrow> finite X", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> finite X\n 2. n \\<noteq> 0 \\<Longrightarrow> finite X", "with card"], ["proof (chain)\npicking this:\n  card X = n\n  n \\<noteq> 0", "show \"finite X\""], ["proof (prove)\nusing this:\n  card X = n\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. finite X", "by (meson card.infinite)"], ["proof (state)\nthis:\n  finite X\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> finite X", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> finite X", "case True"], ["proof (state)\nthis:\n  n = 0\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> finite X", "with X"], ["proof (chain)\npicking this:\n  X \\<subseteq> carrier_vec n\n  n = 0", "have \"X \\<subseteq> carrier_vec 0\""], ["proof (prove)\nusing this:\n  X \\<subseteq> carrier_vec n\n  n = 0\n\ngoal (1 subgoal):\n 1. X \\<subseteq> carrier_vec 0", "by auto"], ["proof (state)\nthis:\n  X \\<subseteq> carrier_vec 0\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> finite X", "also"], ["proof (state)\nthis:\n  X \\<subseteq> carrier_vec 0\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> finite X", "have \"\\<dots> = {0\\<^sub>v 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier_vec 0 = {0\\<^sub>v 0}", "by auto"], ["proof (state)\nthis:\n  carrier_vec 0 = {0\\<^sub>v 0}\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> finite X", "finally"], ["proof (chain)\npicking this:\n  X \\<subseteq> {0\\<^sub>v 0}", "have \"X \\<subseteq> {0\\<^sub>v 0}\""], ["proof (prove)\nusing this:\n  X \\<subseteq> {0\\<^sub>v 0}\n\ngoal (1 subgoal):\n 1. X \\<subseteq> {0\\<^sub>v 0}", "."], ["proof (state)\nthis:\n  X \\<subseteq> {0\\<^sub>v 0}\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> finite X", "from finite_subset[OF this]"], ["proof (chain)\npicking this:\n  finite {0\\<^sub>v 0} \\<Longrightarrow> finite X", "show \"finite X\""], ["proof (prove)\nusing this:\n  finite {0\\<^sub>v 0} \\<Longrightarrow> finite X\n\ngoal (1 subgoal):\n 1. finite X", "by auto"], ["proof (state)\nthis:\n  finite X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite X\n\ngoal (1 subgoal):\n 1. basis X", "from X"], ["proof (chain)\npicking this:\n  X \\<subseteq> carrier_vec n", "have \"span X \\<subseteq> carrier_vec n\""], ["proof (prove)\nusing this:\n  X \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. local.span X \\<subseteq> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  local.span X \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. basis X", "with span"], ["proof (chain)\npicking this:\n  carrier_vec n \\<subseteq> local.span X\n  local.span X \\<subseteq> carrier_vec n", "have span: \"span X = carrier_vec n\""], ["proof (prove)\nusing this:\n  carrier_vec n \\<subseteq> local.span X\n  local.span X \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. local.span X = carrier_vec n", "by auto"], ["proof (state)\nthis:\n  local.span X = carrier_vec n\n\ngoal (1 subgoal):\n 1. basis X", "from dim_is_n card"], ["proof (chain)\npicking this:\n  local.dim = n\n  card X = n", "have card: \"card X \\<le> dim\""], ["proof (prove)\nusing this:\n  local.dim = n\n  card X = n\n\ngoal (1 subgoal):\n 1. card X \\<le> local.dim", "by auto"], ["proof (state)\nthis:\n  card X \\<le> local.dim\n\ngoal (1 subgoal):\n 1. basis X", "from dim_gen_is_basis[OF fin X span card]"], ["proof (chain)\npicking this:\n  basis X", "show \"basis X\""], ["proof (prove)\nusing this:\n  basis X\n\ngoal (1 subgoal):\n 1. basis X", "."], ["proof (state)\nthis:\n  basis X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lincomb_list_append:\n  assumes Ws: \"set Ws \\<subseteq> carrier_vec n\"\n  shows \"set Vs \\<subseteq> carrier_vec n \\<Longrightarrow> lincomb_list f (Vs @ Ws) =\n    lincomb_list f Vs + lincomb_list (\\<lambda> i. f (i + length Vs)) Ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list f (Vs @ Ws) =\n    lincomb_list f Vs + lincomb_list (\\<lambda>i. f (i + length Vs)) Ws", "proof (induction Vs arbitrary: f)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f.\n       set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n       lincomb_list f ([] @ Ws) =\n       lincomb_list f [] + lincomb_list (\\<lambda>i. f (i + length [])) Ws\n 2. \\<And>a Vs f.\n       \\<lbrakk>\\<And>f.\n                   set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                   lincomb_list f (Vs @ Ws) =\n                   lincomb_list f Vs +\n                   lincomb_list (\\<lambda>i. f (i + length Vs)) Ws;\n        set (a # Vs) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list f ((a # Vs) @ Ws) =\n                         lincomb_list f (a # Vs) +\n                         lincomb_list (\\<lambda>i. f (i + length (a # Vs)))\n                          Ws", "case Nil"], ["proof (state)\nthis:\n  set [] \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n       lincomb_list f ([] @ Ws) =\n       lincomb_list f [] + lincomb_list (\\<lambda>i. f (i + length [])) Ws\n 2. \\<And>a Vs f.\n       \\<lbrakk>\\<And>f.\n                   set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                   lincomb_list f (Vs @ Ws) =\n                   lincomb_list f Vs +\n                   lincomb_list (\\<lambda>i. f (i + length Vs)) Ws;\n        set (a # Vs) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list f ((a # Vs) @ Ws) =\n                         lincomb_list f (a # Vs) +\n                         lincomb_list (\\<lambda>i. f (i + length (a # Vs)))\n                          Ws", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list f ([] @ Ws) =\n    lincomb_list f [] + lincomb_list (\\<lambda>i. f (i + length [])) Ws", "by(simp add: lincomb_list_carrier[OF Ws])"], ["proof (state)\nthis:\n  lincomb_list f ([] @ Ws) =\n  lincomb_list f [] + lincomb_list (\\<lambda>i. f (i + length [])) Ws\n\ngoal (1 subgoal):\n 1. \\<And>a Vs f.\n       \\<lbrakk>\\<And>f.\n                   set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                   lincomb_list f (Vs @ Ws) =\n                   lincomb_list f Vs +\n                   lincomb_list (\\<lambda>i. f (i + length Vs)) Ws;\n        set (a # Vs) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list f ((a # Vs) @ Ws) =\n                         lincomb_list f (a # Vs) +\n                         lincomb_list (\\<lambda>i. f (i + length (a # Vs)))\n                          Ws", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a Vs f.\n       \\<lbrakk>\\<And>f.\n                   set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                   lincomb_list f (Vs @ Ws) =\n                   lincomb_list f Vs +\n                   lincomb_list (\\<lambda>i. f (i + length Vs)) Ws;\n        set (a # Vs) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list f ((a # Vs) @ Ws) =\n                         lincomb_list f (a # Vs) +\n                         lincomb_list (\\<lambda>i. f (i + length (a # Vs)))\n                          Ws", "case (Cons x Vs)"], ["proof (state)\nthis:\n  set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n  lincomb_list ?f1 (Vs @ Ws) =\n  lincomb_list ?f1 Vs + lincomb_list (\\<lambda>i. ?f1 (i + length Vs)) Ws\n  set (x # Vs) \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>a Vs f.\n       \\<lbrakk>\\<And>f.\n                   set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                   lincomb_list f (Vs @ Ws) =\n                   lincomb_list f Vs +\n                   lincomb_list (\\<lambda>i. f (i + length Vs)) Ws;\n        set (a # Vs) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list f ((a # Vs) @ Ws) =\n                         lincomb_list f (a # Vs) +\n                         lincomb_list (\\<lambda>i. f (i + length (a # Vs)))\n                          Ws", "have \"lincomb_list f (x # (Vs @ Ws)) = f 0 \\<cdot>\\<^sub>v x + lincomb_list (f \\<circ> Suc) (Vs @ Ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list f (x # Vs @ Ws) =\n    f 0 \\<cdot>\\<^sub>v x + lincomb_list (f \\<circ> Suc) (Vs @ Ws)", "by (rule lincomb_list_Cons)"], ["proof (state)\nthis:\n  lincomb_list f (x # Vs @ Ws) =\n  f 0 \\<cdot>\\<^sub>v x + lincomb_list (f \\<circ> Suc) (Vs @ Ws)\n\ngoal (1 subgoal):\n 1. \\<And>a Vs f.\n       \\<lbrakk>\\<And>f.\n                   set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                   lincomb_list f (Vs @ Ws) =\n                   lincomb_list f Vs +\n                   lincomb_list (\\<lambda>i. f (i + length Vs)) Ws;\n        set (a # Vs) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list f ((a # Vs) @ Ws) =\n                         lincomb_list f (a # Vs) +\n                         lincomb_list (\\<lambda>i. f (i + length (a # Vs)))\n                          Ws", "also"], ["proof (state)\nthis:\n  lincomb_list f (x # Vs @ Ws) =\n  f 0 \\<cdot>\\<^sub>v x + lincomb_list (f \\<circ> Suc) (Vs @ Ws)\n\ngoal (1 subgoal):\n 1. \\<And>a Vs f.\n       \\<lbrakk>\\<And>f.\n                   set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                   lincomb_list f (Vs @ Ws) =\n                   lincomb_list f Vs +\n                   lincomb_list (\\<lambda>i. f (i + length Vs)) Ws;\n        set (a # Vs) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list f ((a # Vs) @ Ws) =\n                         lincomb_list f (a # Vs) +\n                         lincomb_list (\\<lambda>i. f (i + length (a # Vs)))\n                          Ws", "have \"lincomb_list (f \\<circ> Suc) (Vs @ Ws) =\n             lincomb_list (f \\<circ> Suc) Vs + lincomb_list (\\<lambda> i. (f \\<circ> Suc) (i + length Vs)) Ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list (f \\<circ> Suc) (Vs @ Ws) =\n    lincomb_list (f \\<circ> Suc) Vs +\n    lincomb_list (\\<lambda>i. (f \\<circ> Suc) (i + length Vs)) Ws", "using Cons"], ["proof (prove)\nusing this:\n  set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n  lincomb_list ?f1 (Vs @ Ws) =\n  lincomb_list ?f1 Vs + lincomb_list (\\<lambda>i. ?f1 (i + length Vs)) Ws\n  set (x # Vs) \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. lincomb_list (f \\<circ> Suc) (Vs @ Ws) =\n    lincomb_list (f \\<circ> Suc) Vs +\n    lincomb_list (\\<lambda>i. (f \\<circ> Suc) (i + length Vs)) Ws", "by auto"], ["proof (state)\nthis:\n  lincomb_list (f \\<circ> Suc) (Vs @ Ws) =\n  lincomb_list (f \\<circ> Suc) Vs +\n  lincomb_list (\\<lambda>i. (f \\<circ> Suc) (i + length Vs)) Ws\n\ngoal (1 subgoal):\n 1. \\<And>a Vs f.\n       \\<lbrakk>\\<And>f.\n                   set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                   lincomb_list f (Vs @ Ws) =\n                   lincomb_list f Vs +\n                   lincomb_list (\\<lambda>i. f (i + length Vs)) Ws;\n        set (a # Vs) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list f ((a # Vs) @ Ws) =\n                         lincomb_list f (a # Vs) +\n                         lincomb_list (\\<lambda>i. f (i + length (a # Vs)))\n                          Ws", "also"], ["proof (state)\nthis:\n  lincomb_list (f \\<circ> Suc) (Vs @ Ws) =\n  lincomb_list (f \\<circ> Suc) Vs +\n  lincomb_list (\\<lambda>i. (f \\<circ> Suc) (i + length Vs)) Ws\n\ngoal (1 subgoal):\n 1. \\<And>a Vs f.\n       \\<lbrakk>\\<And>f.\n                   set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                   lincomb_list f (Vs @ Ws) =\n                   lincomb_list f Vs +\n                   lincomb_list (\\<lambda>i. f (i + length Vs)) Ws;\n        set (a # Vs) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list f ((a # Vs) @ Ws) =\n                         lincomb_list f (a # Vs) +\n                         lincomb_list (\\<lambda>i. f (i + length (a # Vs)))\n                          Ws", "have \"(\\<lambda> i. (f \\<circ> Suc) (i + length Vs)) = (\\<lambda> i. f (i + length (x # Vs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i. (f \\<circ> Suc) (i + length Vs)) =\n    (\\<lambda>i. f (i + length (x # Vs)))", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>i. (f \\<circ> Suc) (i + length Vs)) =\n  (\\<lambda>i. f (i + length (x # Vs)))\n\ngoal (1 subgoal):\n 1. \\<And>a Vs f.\n       \\<lbrakk>\\<And>f.\n                   set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                   lincomb_list f (Vs @ Ws) =\n                   lincomb_list f Vs +\n                   lincomb_list (\\<lambda>i. f (i + length Vs)) Ws;\n        set (a # Vs) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list f ((a # Vs) @ Ws) =\n                         lincomb_list f (a # Vs) +\n                         lincomb_list (\\<lambda>i. f (i + length (a # Vs)))\n                          Ws", "also"], ["proof (state)\nthis:\n  (\\<lambda>i. (f \\<circ> Suc) (i + length Vs)) =\n  (\\<lambda>i. f (i + length (x # Vs)))\n\ngoal (1 subgoal):\n 1. \\<And>a Vs f.\n       \\<lbrakk>\\<And>f.\n                   set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                   lincomb_list f (Vs @ Ws) =\n                   lincomb_list f Vs +\n                   lincomb_list (\\<lambda>i. f (i + length Vs)) Ws;\n        set (a # Vs) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list f ((a # Vs) @ Ws) =\n                         lincomb_list f (a # Vs) +\n                         lincomb_list (\\<lambda>i. f (i + length (a # Vs)))\n                          Ws", "have \"f 0 \\<cdot>\\<^sub>v x + ((lincomb_list (f \\<circ> Suc) Vs) + lincomb_list \\<dots> Ws) =\n             (f 0 \\<cdot>\\<^sub>v x + (lincomb_list (f \\<circ> Suc) Vs)) + lincomb_list \\<dots> Ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 0 \\<cdot>\\<^sub>v x +\n    (lincomb_list (f \\<circ> Suc) Vs +\n     lincomb_list (\\<lambda>i. f (i + length (x # Vs))) Ws) =\n    f 0 \\<cdot>\\<^sub>v x + lincomb_list (f \\<circ> Suc) Vs +\n    lincomb_list (\\<lambda>i. f (i + length (x # Vs))) Ws", "using assoc_add_vec Cons.prems Ws lincomb_list_carrier"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v\\<^sub>1 \\<in> carrier_vec ?n; ?v\\<^sub>2 \\<in> carrier_vec ?n;\n   ?v\\<^sub>3 \\<in> carrier_vec ?n\\<rbrakk>\n  \\<Longrightarrow> ?v\\<^sub>1 + ?v\\<^sub>2 + ?v\\<^sub>3 =\n                    ?v\\<^sub>1 + (?v\\<^sub>2 + ?v\\<^sub>3)\n  set (x # Vs) \\<subseteq> carrier_vec n\n  set Ws \\<subseteq> carrier_vec n\n  set ?vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n  lincomb_list ?c ?vs \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. f 0 \\<cdot>\\<^sub>v x +\n    (lincomb_list (f \\<circ> Suc) Vs +\n     lincomb_list (\\<lambda>i. f (i + length (x # Vs))) Ws) =\n    f 0 \\<cdot>\\<^sub>v x + lincomb_list (f \\<circ> Suc) Vs +\n    lincomb_list (\\<lambda>i. f (i + length (x # Vs))) Ws", "by auto"], ["proof (state)\nthis:\n  f 0 \\<cdot>\\<^sub>v x +\n  (lincomb_list (f \\<circ> Suc) Vs +\n   lincomb_list (\\<lambda>i. f (i + length (x # Vs))) Ws) =\n  f 0 \\<cdot>\\<^sub>v x + lincomb_list (f \\<circ> Suc) Vs +\n  lincomb_list (\\<lambda>i. f (i + length (x # Vs))) Ws\n\ngoal (1 subgoal):\n 1. \\<And>a Vs f.\n       \\<lbrakk>\\<And>f.\n                   set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                   lincomb_list f (Vs @ Ws) =\n                   lincomb_list f Vs +\n                   lincomb_list (\\<lambda>i. f (i + length Vs)) Ws;\n        set (a # Vs) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list f ((a # Vs) @ Ws) =\n                         lincomb_list f (a # Vs) +\n                         lincomb_list (\\<lambda>i. f (i + length (a # Vs)))\n                          Ws", "finally"], ["proof (chain)\npicking this:\n  lincomb_list f (x # Vs @ Ws) =\n  f 0 \\<cdot>\\<^sub>v x + lincomb_list (f \\<circ> Suc) Vs +\n  lincomb_list (\\<lambda>i. f (i + length (x # Vs))) Ws", "show ?case"], ["proof (prove)\nusing this:\n  lincomb_list f (x # Vs @ Ws) =\n  f 0 \\<cdot>\\<^sub>v x + lincomb_list (f \\<circ> Suc) Vs +\n  lincomb_list (\\<lambda>i. f (i + length (x # Vs))) Ws\n\ngoal (1 subgoal):\n 1. lincomb_list f ((x # Vs) @ Ws) =\n    lincomb_list f (x # Vs) +\n    lincomb_list (\\<lambda>i. f (i + length (x # Vs))) Ws", "using lincomb_list_Cons"], ["proof (prove)\nusing this:\n  lincomb_list f (x # Vs @ Ws) =\n  f 0 \\<cdot>\\<^sub>v x + lincomb_list (f \\<circ> Suc) Vs +\n  lincomb_list (\\<lambda>i. f (i + length (x # Vs))) Ws\n  lincomb_list ?c (?v # ?vs) =\n  ?c 0 \\<cdot>\\<^sub>v ?v + lincomb_list (?c \\<circ> Suc) ?vs\n\ngoal (1 subgoal):\n 1. lincomb_list f ((x # Vs) @ Ws) =\n    lincomb_list f (x # Vs) +\n    lincomb_list (\\<lambda>i. f (i + length (x # Vs))) Ws", "by auto"], ["proof (state)\nthis:\n  lincomb_list f ((x # Vs) @ Ws) =\n  lincomb_list f (x # Vs) +\n  lincomb_list (\\<lambda>i. f (i + length (x # Vs))) Ws\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lincomb_list_snoc[simp]:\n  shows \"set Vs \\<subseteq> carrier_vec n \\<Longrightarrow> x \\<in> carrier_vec n \\<Longrightarrow>\n          lincomb_list f (Vs @ [x]) = lincomb_list f Vs + f (length Vs) \\<cdot>\\<^sub>v x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set Vs \\<subseteq> carrier_vec n;\n     x \\<in> carrier_vec n\\<rbrakk>\n    \\<Longrightarrow> lincomb_list f (Vs @ [x]) =\n                      lincomb_list f Vs + f (length Vs) \\<cdot>\\<^sub>v x", "using lincomb_list_append"], ["proof (prove)\nusing this:\n  \\<lbrakk>set ?Ws \\<subseteq> carrier_vec n;\n   set ?Vs \\<subseteq> carrier_vec n\\<rbrakk>\n  \\<Longrightarrow> lincomb_list ?f (?Vs @ ?Ws) =\n                    lincomb_list ?f ?Vs +\n                    lincomb_list (\\<lambda>i. ?f (i + length ?Vs)) ?Ws\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set Vs \\<subseteq> carrier_vec n;\n     x \\<in> carrier_vec n\\<rbrakk>\n    \\<Longrightarrow> lincomb_list f (Vs @ [x]) =\n                      lincomb_list f Vs + f (length Vs) \\<cdot>\\<^sub>v x", "by auto"], ["", "lemma lincomb_list_smult:\n  \"set Vs \\<subseteq> carrier_vec n \\<Longrightarrow> lincomb_list (\\<lambda> i. a * c i) Vs = a \\<cdot>\\<^sub>v lincomb_list c Vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. a * c i) Vs =\n    a \\<cdot>\\<^sub>v lincomb_list c Vs", "proof (induction Vs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. a * c i) [] =\n    a \\<cdot>\\<^sub>v lincomb_list c []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. a * c i) xs =\n                a \\<cdot>\\<^sub>v lincomb_list c xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list (\\<lambda>i. a * c i) (xs @ [x]) =\n                         a \\<cdot>\\<^sub>v lincomb_list c (xs @ [x])", "case (snoc x Vs)"], ["proof (state)\nthis:\n  set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n  lincomb_list (\\<lambda>i. a * c i) Vs =\n  a \\<cdot>\\<^sub>v lincomb_list c Vs\n  set (Vs @ [x]) \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. a * c i) [] =\n    a \\<cdot>\\<^sub>v lincomb_list c []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. a * c i) xs =\n                a \\<cdot>\\<^sub>v lincomb_list c xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list (\\<lambda>i. a * c i) (xs @ [x]) =\n                         a \\<cdot>\\<^sub>v lincomb_list c (xs @ [x])", "have x: \"x \\<in> carrier_vec n\" and Vs: \"set Vs \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier_vec n &&& set Vs \\<subseteq> carrier_vec n", "using snoc.prems"], ["proof (prove)\nusing this:\n  set (Vs @ [x]) \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. x \\<in> carrier_vec n &&& set Vs \\<subseteq> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  x \\<in> carrier_vec n\n  set Vs \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. a * c i) [] =\n    a \\<cdot>\\<^sub>v lincomb_list c []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. a * c i) xs =\n                a \\<cdot>\\<^sub>v lincomb_list c xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list (\\<lambda>i. a * c i) (xs @ [x]) =\n                         a \\<cdot>\\<^sub>v lincomb_list c (xs @ [x])", "have \"lincomb_list (\\<lambda> i. a * c i) (Vs @ [x]) =\n        lincomb_list (\\<lambda> i. a * c i) Vs + (a * c (length Vs)) \\<cdot>\\<^sub>v x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>i. a * c i) (Vs @ [x]) =\n    lincomb_list (\\<lambda>i. a * c i) Vs +\n    a * c (length Vs) \\<cdot>\\<^sub>v x", "using x Vs"], ["proof (prove)\nusing this:\n  x \\<in> carrier_vec n\n  set Vs \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>i. a * c i) (Vs @ [x]) =\n    lincomb_list (\\<lambda>i. a * c i) Vs +\n    a * c (length Vs) \\<cdot>\\<^sub>v x", "by auto"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>i. a * c i) (Vs @ [x]) =\n  lincomb_list (\\<lambda>i. a * c i) Vs +\n  a * c (length Vs) \\<cdot>\\<^sub>v x\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. a * c i) [] =\n    a \\<cdot>\\<^sub>v lincomb_list c []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. a * c i) xs =\n                a \\<cdot>\\<^sub>v lincomb_list c xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list (\\<lambda>i. a * c i) (xs @ [x]) =\n                         a \\<cdot>\\<^sub>v lincomb_list c (xs @ [x])", "also"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>i. a * c i) (Vs @ [x]) =\n  lincomb_list (\\<lambda>i. a * c i) Vs +\n  a * c (length Vs) \\<cdot>\\<^sub>v x\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. a * c i) [] =\n    a \\<cdot>\\<^sub>v lincomb_list c []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. a * c i) xs =\n                a \\<cdot>\\<^sub>v lincomb_list c xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list (\\<lambda>i. a * c i) (xs @ [x]) =\n                         a \\<cdot>\\<^sub>v lincomb_list c (xs @ [x])", "have \"lincomb_list (\\<lambda> i. a * c i) Vs = a \\<cdot>\\<^sub>v lincomb_list c Vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>i. a * c i) Vs =\n    a \\<cdot>\\<^sub>v lincomb_list c Vs", "by(rule snoc.IH[OF Vs])"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>i. a * c i) Vs =\n  a \\<cdot>\\<^sub>v lincomb_list c Vs\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. a * c i) [] =\n    a \\<cdot>\\<^sub>v lincomb_list c []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. a * c i) xs =\n                a \\<cdot>\\<^sub>v lincomb_list c xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list (\\<lambda>i. a * c i) (xs @ [x]) =\n                         a \\<cdot>\\<^sub>v lincomb_list c (xs @ [x])", "also"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>i. a * c i) Vs =\n  a \\<cdot>\\<^sub>v lincomb_list c Vs\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. a * c i) [] =\n    a \\<cdot>\\<^sub>v lincomb_list c []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. a * c i) xs =\n                a \\<cdot>\\<^sub>v lincomb_list c xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list (\\<lambda>i. a * c i) (xs @ [x]) =\n                         a \\<cdot>\\<^sub>v lincomb_list c (xs @ [x])", "have \"(a * c (length Vs)) \\<cdot>\\<^sub>v x = a \\<cdot>\\<^sub>v (c (length Vs) \\<cdot>\\<^sub>v x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a * c (length Vs) \\<cdot>\\<^sub>v x =\n    a \\<cdot>\\<^sub>v (c (length Vs) \\<cdot>\\<^sub>v x)", "using smult_smult_assoc x"], ["proof (prove)\nusing this:\n  ?a \\<cdot>\\<^sub>v (?b \\<cdot>\\<^sub>v ?v) = ?a * ?b \\<cdot>\\<^sub>v ?v\n  x \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. a * c (length Vs) \\<cdot>\\<^sub>v x =\n    a \\<cdot>\\<^sub>v (c (length Vs) \\<cdot>\\<^sub>v x)", "by auto"], ["proof (state)\nthis:\n  a * c (length Vs) \\<cdot>\\<^sub>v x =\n  a \\<cdot>\\<^sub>v (c (length Vs) \\<cdot>\\<^sub>v x)\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. a * c i) [] =\n    a \\<cdot>\\<^sub>v lincomb_list c []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. a * c i) xs =\n                a \\<cdot>\\<^sub>v lincomb_list c xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list (\\<lambda>i. a * c i) (xs @ [x]) =\n                         a \\<cdot>\\<^sub>v lincomb_list c (xs @ [x])", "also"], ["proof (state)\nthis:\n  a * c (length Vs) \\<cdot>\\<^sub>v x =\n  a \\<cdot>\\<^sub>v (c (length Vs) \\<cdot>\\<^sub>v x)\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. a * c i) [] =\n    a \\<cdot>\\<^sub>v lincomb_list c []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. a * c i) xs =\n                a \\<cdot>\\<^sub>v lincomb_list c xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list (\\<lambda>i. a * c i) (xs @ [x]) =\n                         a \\<cdot>\\<^sub>v lincomb_list c (xs @ [x])", "have \"a \\<cdot>\\<^sub>v lincomb_list c Vs + \\<dots> = a \\<cdot>\\<^sub>v (lincomb_list c Vs + c (length Vs) \\<cdot>\\<^sub>v x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v lincomb_list c Vs +\n    a \\<cdot>\\<^sub>v (c (length Vs) \\<cdot>\\<^sub>v x) =\n    a \\<cdot>\\<^sub>v (lincomb_list c Vs + c (length Vs) \\<cdot>\\<^sub>v x)", "using smult_add_distrib_vec[of _ n _ a] lincomb_list_carrier[OF Vs] x"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> carrier_vec n; ?w \\<in> carrier_vec n\\<rbrakk>\n  \\<Longrightarrow> a \\<cdot>\\<^sub>v (?v + ?w) =\n                    a \\<cdot>\\<^sub>v ?v + a \\<cdot>\\<^sub>v ?w\n  lincomb_list ?c Vs \\<in> carrier_vec n\n  x \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v lincomb_list c Vs +\n    a \\<cdot>\\<^sub>v (c (length Vs) \\<cdot>\\<^sub>v x) =\n    a \\<cdot>\\<^sub>v (lincomb_list c Vs + c (length Vs) \\<cdot>\\<^sub>v x)", "by simp"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>v lincomb_list c Vs +\n  a \\<cdot>\\<^sub>v (c (length Vs) \\<cdot>\\<^sub>v x) =\n  a \\<cdot>\\<^sub>v (lincomb_list c Vs + c (length Vs) \\<cdot>\\<^sub>v x)\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. a * c i) [] =\n    a \\<cdot>\\<^sub>v lincomb_list c []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. a * c i) xs =\n                a \\<cdot>\\<^sub>v lincomb_list c xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list (\\<lambda>i. a * c i) (xs @ [x]) =\n                         a \\<cdot>\\<^sub>v lincomb_list c (xs @ [x])", "also"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>v lincomb_list c Vs +\n  a \\<cdot>\\<^sub>v (c (length Vs) \\<cdot>\\<^sub>v x) =\n  a \\<cdot>\\<^sub>v (lincomb_list c Vs + c (length Vs) \\<cdot>\\<^sub>v x)\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. a * c i) [] =\n    a \\<cdot>\\<^sub>v lincomb_list c []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. a * c i) xs =\n                a \\<cdot>\\<^sub>v lincomb_list c xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list (\\<lambda>i. a * c i) (xs @ [x]) =\n                         a \\<cdot>\\<^sub>v lincomb_list c (xs @ [x])", "have \"lincomb_list c Vs + c (length Vs) \\<cdot>\\<^sub>v x = lincomb_list c (Vs @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list c Vs + c (length Vs) \\<cdot>\\<^sub>v x =\n    lincomb_list c (Vs @ [x])", "using Vs x"], ["proof (prove)\nusing this:\n  set Vs \\<subseteq> carrier_vec n\n  x \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. lincomb_list c Vs + c (length Vs) \\<cdot>\\<^sub>v x =\n    lincomb_list c (Vs @ [x])", "by auto"], ["proof (state)\nthis:\n  lincomb_list c Vs + c (length Vs) \\<cdot>\\<^sub>v x =\n  lincomb_list c (Vs @ [x])\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. a * c i) [] =\n    a \\<cdot>\\<^sub>v lincomb_list c []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. a * c i) xs =\n                a \\<cdot>\\<^sub>v lincomb_list c xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list (\\<lambda>i. a * c i) (xs @ [x]) =\n                         a \\<cdot>\\<^sub>v lincomb_list c (xs @ [x])", "finally"], ["proof (chain)\npicking this:\n  lincomb_list (\\<lambda>i. a * c i) (Vs @ [x]) =\n  a \\<cdot>\\<^sub>v lincomb_list c (Vs @ [x])", "show ?case"], ["proof (prove)\nusing this:\n  lincomb_list (\\<lambda>i. a * c i) (Vs @ [x]) =\n  a \\<cdot>\\<^sub>v lincomb_list c (Vs @ [x])\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>i. a * c i) (Vs @ [x]) =\n    a \\<cdot>\\<^sub>v lincomb_list c (Vs @ [x])", "by auto"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>i. a * c i) (Vs @ [x]) =\n  a \\<cdot>\\<^sub>v lincomb_list c (Vs @ [x])\n\ngoal (1 subgoal):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. a * c i) [] =\n    a \\<cdot>\\<^sub>v lincomb_list c []", "qed simp"], ["", "lemma lincomb_list_index:\n  assumes i: \"i < n\"\n  shows \"set Xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n         lincomb_list c Xs $ i = sum (\\<lambda> j. c j * (Xs ! j) $ i) {0..<length Xs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set Xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list c Xs $ i = (\\<Sum>j = 0..<length Xs. c j * Xs ! j $ i)", "proof (induction Xs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list c [] $ i = (\\<Sum>j = 0..<length []. c j * [] ! j $ i)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list c xs $ i =\n                (\\<Sum>j = 0..<length xs. c j * xs ! j $ i);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list c (xs @ [x]) $ i =\n                         (\\<Sum>j = 0..<length (xs @ [x]).\n                             c j * (xs @ [x]) ! j $ i)", "case (snoc x Xs)"], ["proof (state)\nthis:\n  set Xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n  lincomb_list c Xs $ i = (\\<Sum>j = 0..<length Xs. c j * Xs ! j $ i)\n  set (Xs @ [x]) \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list c [] $ i = (\\<Sum>j = 0..<length []. c j * [] ! j $ i)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list c xs $ i =\n                (\\<Sum>j = 0..<length xs. c j * xs ! j $ i);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list c (xs @ [x]) $ i =\n                         (\\<Sum>j = 0..<length (xs @ [x]).\n                             c j * (xs @ [x]) ! j $ i)", "hence x: \"x \\<in> carrier_vec n\" and Xs: \"set Xs \\<subseteq> carrier_vec n\""], ["proof (prove)\nusing this:\n  set Xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n  lincomb_list c Xs $ i = (\\<Sum>j = 0..<length Xs. c j * Xs ! j $ i)\n  set (Xs @ [x]) \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. x \\<in> carrier_vec n &&& set Xs \\<subseteq> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  x \\<in> carrier_vec n\n  set Xs \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list c [] $ i = (\\<Sum>j = 0..<length []. c j * [] ! j $ i)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list c xs $ i =\n                (\\<Sum>j = 0..<length xs. c j * xs ! j $ i);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list c (xs @ [x]) $ i =\n                         (\\<Sum>j = 0..<length (xs @ [x]).\n                             c j * (xs @ [x]) ! j $ i)", "hence \"lincomb_list c (Xs @ [x]) = lincomb_list c Xs + c (length Xs) \\<cdot>\\<^sub>v x\""], ["proof (prove)\nusing this:\n  x \\<in> carrier_vec n\n  set Xs \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. lincomb_list c (Xs @ [x]) =\n    lincomb_list c Xs + c (length Xs) \\<cdot>\\<^sub>v x", "by auto"], ["proof (state)\nthis:\n  lincomb_list c (Xs @ [x]) =\n  lincomb_list c Xs + c (length Xs) \\<cdot>\\<^sub>v x\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list c [] $ i = (\\<Sum>j = 0..<length []. c j * [] ! j $ i)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list c xs $ i =\n                (\\<Sum>j = 0..<length xs. c j * xs ! j $ i);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list c (xs @ [x]) $ i =\n                         (\\<Sum>j = 0..<length (xs @ [x]).\n                             c j * (xs @ [x]) ! j $ i)", "also"], ["proof (state)\nthis:\n  lincomb_list c (Xs @ [x]) =\n  lincomb_list c Xs + c (length Xs) \\<cdot>\\<^sub>v x\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list c [] $ i = (\\<Sum>j = 0..<length []. c j * [] ! j $ i)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list c xs $ i =\n                (\\<Sum>j = 0..<length xs. c j * xs ! j $ i);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list c (xs @ [x]) $ i =\n                         (\\<Sum>j = 0..<length (xs @ [x]).\n                             c j * (xs @ [x]) ! j $ i)", "have \"\\<dots> $ i = lincomb_list c Xs $ i + (c (length Xs) \\<cdot>\\<^sub>v x) $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lincomb_list c Xs + c (length Xs) \\<cdot>\\<^sub>v x) $ i =\n    lincomb_list c Xs $ i + (c (length Xs) \\<cdot>\\<^sub>v x) $ i", "using i index_add_vec(1) x"], ["proof (prove)\nusing this:\n  i < n\n  ?i < dim_vec ?v\\<^sub>2 \\<Longrightarrow>\n  (?v\\<^sub>1 + ?v\\<^sub>2) $ ?i = ?v\\<^sub>1 $ ?i + ?v\\<^sub>2 $ ?i\n  x \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. (lincomb_list c Xs + c (length Xs) \\<cdot>\\<^sub>v x) $ i =\n    lincomb_list c Xs $ i + (c (length Xs) \\<cdot>\\<^sub>v x) $ i", "by simp"], ["proof (state)\nthis:\n  (lincomb_list c Xs + c (length Xs) \\<cdot>\\<^sub>v x) $ i =\n  lincomb_list c Xs $ i + (c (length Xs) \\<cdot>\\<^sub>v x) $ i\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list c [] $ i = (\\<Sum>j = 0..<length []. c j * [] ! j $ i)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list c xs $ i =\n                (\\<Sum>j = 0..<length xs. c j * xs ! j $ i);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list c (xs @ [x]) $ i =\n                         (\\<Sum>j = 0..<length (xs @ [x]).\n                             c j * (xs @ [x]) ! j $ i)", "also"], ["proof (state)\nthis:\n  (lincomb_list c Xs + c (length Xs) \\<cdot>\\<^sub>v x) $ i =\n  lincomb_list c Xs $ i + (c (length Xs) \\<cdot>\\<^sub>v x) $ i\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list c [] $ i = (\\<Sum>j = 0..<length []. c j * [] ! j $ i)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list c xs $ i =\n                (\\<Sum>j = 0..<length xs. c j * xs ! j $ i);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list c (xs @ [x]) $ i =\n                         (\\<Sum>j = 0..<length (xs @ [x]).\n                             c j * (xs @ [x]) ! j $ i)", "have \"(c (length Xs) \\<cdot>\\<^sub>v x) $ i = c (length Xs) * x $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (c (length Xs) \\<cdot>\\<^sub>v x) $ i = c (length Xs) * x $ i", "using i x"], ["proof (prove)\nusing this:\n  i < n\n  x \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. (c (length Xs) \\<cdot>\\<^sub>v x) $ i = c (length Xs) * x $ i", "by simp"], ["proof (state)\nthis:\n  (c (length Xs) \\<cdot>\\<^sub>v x) $ i = c (length Xs) * x $ i\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list c [] $ i = (\\<Sum>j = 0..<length []. c j * [] ! j $ i)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list c xs $ i =\n                (\\<Sum>j = 0..<length xs. c j * xs ! j $ i);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list c (xs @ [x]) $ i =\n                         (\\<Sum>j = 0..<length (xs @ [x]).\n                             c j * (xs @ [x]) ! j $ i)", "also"], ["proof (state)\nthis:\n  (c (length Xs) \\<cdot>\\<^sub>v x) $ i = c (length Xs) * x $ i\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list c [] $ i = (\\<Sum>j = 0..<length []. c j * [] ! j $ i)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list c xs $ i =\n                (\\<Sum>j = 0..<length xs. c j * xs ! j $ i);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list c (xs @ [x]) $ i =\n                         (\\<Sum>j = 0..<length (xs @ [x]).\n                             c j * (xs @ [x]) ! j $ i)", "have \"x $ i= (Xs @ [x]) ! (length Xs) $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x $ i = (Xs @ [x]) ! length Xs $ i", "by simp"], ["proof (state)\nthis:\n  x $ i = (Xs @ [x]) ! length Xs $ i\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list c [] $ i = (\\<Sum>j = 0..<length []. c j * [] ! j $ i)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list c xs $ i =\n                (\\<Sum>j = 0..<length xs. c j * xs ! j $ i);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list c (xs @ [x]) $ i =\n                         (\\<Sum>j = 0..<length (xs @ [x]).\n                             c j * (xs @ [x]) ! j $ i)", "also"], ["proof (state)\nthis:\n  x $ i = (Xs @ [x]) ! length Xs $ i\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list c [] $ i = (\\<Sum>j = 0..<length []. c j * [] ! j $ i)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list c xs $ i =\n                (\\<Sum>j = 0..<length xs. c j * xs ! j $ i);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list c (xs @ [x]) $ i =\n                         (\\<Sum>j = 0..<length (xs @ [x]).\n                             c j * (xs @ [x]) ! j $ i)", "have \"lincomb_list c Xs $ i = (\\<Sum>j = 0..<length Xs. c j * Xs ! j $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list c Xs $ i = (\\<Sum>j = 0..<length Xs. c j * Xs ! j $ i)", "by (rule snoc.IH[OF Xs])"], ["proof (state)\nthis:\n  lincomb_list c Xs $ i = (\\<Sum>j = 0..<length Xs. c j * Xs ! j $ i)\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list c [] $ i = (\\<Sum>j = 0..<length []. c j * [] ! j $ i)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list c xs $ i =\n                (\\<Sum>j = 0..<length xs. c j * xs ! j $ i);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list c (xs @ [x]) $ i =\n                         (\\<Sum>j = 0..<length (xs @ [x]).\n                             c j * (xs @ [x]) ! j $ i)", "also"], ["proof (state)\nthis:\n  lincomb_list c Xs $ i = (\\<Sum>j = 0..<length Xs. c j * Xs ! j $ i)\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list c [] $ i = (\\<Sum>j = 0..<length []. c j * [] ! j $ i)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list c xs $ i =\n                (\\<Sum>j = 0..<length xs. c j * xs ! j $ i);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list c (xs @ [x]) $ i =\n                         (\\<Sum>j = 0..<length (xs @ [x]).\n                             c j * (xs @ [x]) ! j $ i)", "have \"\\<dots> =  (\\<Sum>j = 0..<length Xs. c j * (Xs @ [x]) ! j $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>j = 0..<length Xs. c j * Xs ! j $ i) =\n    (\\<Sum>j = 0..<length Xs. c j * (Xs @ [x]) ! j $ i)", "by (rule R.finsum_restrict, force, rule restrict_ext, auto simp: append_Cons_nth_left)"], ["proof (state)\nthis:\n  (\\<Sum>j = 0..<length Xs. c j * Xs ! j $ i) =\n  (\\<Sum>j = 0..<length Xs. c j * (Xs @ [x]) ! j $ i)\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list c [] $ i = (\\<Sum>j = 0..<length []. c j * [] ! j $ i)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list c xs $ i =\n                (\\<Sum>j = 0..<length xs. c j * xs ! j $ i);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list c (xs @ [x]) $ i =\n                         (\\<Sum>j = 0..<length (xs @ [x]).\n                             c j * (xs @ [x]) ! j $ i)", "finally"], ["proof (chain)\npicking this:\n  lincomb_list c (Xs @ [x]) $ i =\n  (\\<Sum>j = 0..<length Xs. c j * (Xs @ [x]) ! j $ i) +\n  c (length Xs) * (Xs @ [x]) ! length Xs $ i", "show ?case"], ["proof (prove)\nusing this:\n  lincomb_list c (Xs @ [x]) $ i =\n  (\\<Sum>j = 0..<length Xs. c j * (Xs @ [x]) ! j $ i) +\n  c (length Xs) * (Xs @ [x]) ! length Xs $ i\n\ngoal (1 subgoal):\n 1. lincomb_list c (Xs @ [x]) $ i =\n    (\\<Sum>j = 0..<length (Xs @ [x]). c j * (Xs @ [x]) ! j $ i)", "using sum.atLeast0_lessThan_Suc[of \"\\<lambda> j. c j * (Xs @ [x]) ! j $ i\" \"length Xs\"]"], ["proof (prove)\nusing this:\n  lincomb_list c (Xs @ [x]) $ i =\n  (\\<Sum>j = 0..<length Xs. c j * (Xs @ [x]) ! j $ i) +\n  c (length Xs) * (Xs @ [x]) ! length Xs $ i\n  (\\<Sum>j = 0..<Suc (length Xs). c j * (Xs @ [x]) ! j $ i) =\n  (\\<Sum>j = 0..<length Xs. c j * (Xs @ [x]) ! j $ i) +\n  c (length Xs) * (Xs @ [x]) ! length Xs $ i\n\ngoal (1 subgoal):\n 1. lincomb_list c (Xs @ [x]) $ i =\n    (\\<Sum>j = 0..<length (Xs @ [x]). c j * (Xs @ [x]) ! j $ i)", "by fastforce"], ["proof (state)\nthis:\n  lincomb_list c (Xs @ [x]) $ i =\n  (\\<Sum>j = 0..<length (Xs @ [x]). c j * (Xs @ [x]) ! j $ i)\n\ngoal (1 subgoal):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list c [] $ i = (\\<Sum>j = 0..<length []. c j * [] ! j $ i)", "qed (simp add: i)"], ["", "end"], ["", "end"]]}