{"file_name": "/home/qj213/afp-2021-10-22/thys/Linear_Inequalities/Convex_Hull.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Linear_Inequalities", "problem_names": ["lemma convex_hull_carrier[intro]: \"Vs \\<subseteq> carrier_vec n \\<Longrightarrow> convex_hull Vs \\<subseteq> carrier_vec n\"", "lemma convex_hull_mono: \"Vs \\<subseteq> Ws \\<Longrightarrow> convex_hull Vs \\<subseteq> convex_hull Ws\"", "lemma convex_lincomb_empty[simp]: \"\\<not> (convex_lincomb c {} x)\"", "lemma set_in_convex_hull:\n  assumes \"A \\<subseteq> carrier_vec n\"\n  shows \"A \\<subseteq> convex_hull A\"", "lemma convex_hull_empty[simp]:\n  \"convex_hull {} = {}\"\n  \"A \\<subseteq> carrier_vec n \\<Longrightarrow> convex_hull A = {} \\<longleftrightarrow> A = {}\"", "lemma convex_hull_bound: assumes XBnd: \"X \\<subseteq> Bounded_vec Bnd\"\n  and X: \"X \\<subseteq> carrier_vec n\"\nshows \"convex_hull X \\<subseteq> Bounded_vec Bnd\"", "lemma lincomb_list_elem:\n  \"set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n   lincomb_list (\\<lambda> j. if i=j then 1 else 0) Vs = (if i < length Vs then Vs ! i else 0\\<^sub>v n)\"", "lemma set_in_convex_hull_list: fixes Vs :: \"'a vec list\"\n  assumes \"set Vs \\<subseteq> carrier_vec n\"\n  shows \"set Vs \\<subseteq> convex_hull_list Vs\"", "lemma convex_hull_list_combination:\n  assumes Vs: \"set Vs \\<subseteq> carrier_vec n\"\n    and x: \"x \\<in> convex_hull_list Vs\"\n    and y: \"y \\<in> convex_hull_list Vs\"\n    and l0: \"0 \\<le> l\" and l1: \"l \\<le> 1\"\n  shows \"l \\<cdot>\\<^sub>v x + (1 - l) \\<cdot>\\<^sub>v y \\<in> convex_hull_list Vs\"", "lemma convex_hull_list_mono:\n  assumes \"set Ws \\<subseteq> carrier_vec n\"\n  shows \"set Vs \\<subseteq> set Ws \\<Longrightarrow> convex_hull_list Vs \\<subseteq> convex_hull_list Ws\"", "lemma convex_hull_list_eq_set:\n  \"set Vs \\<subseteq> carrier_vec n \\<Longrightarrow> set Vs = set Ws \\<Longrightarrow> convex_hull_list Vs = convex_hull_list Ws\"", "lemma find_indices_empty: \"(find_indices x Vs = []) = (x \\<notin> set Vs)\"", "lemma distinct_list_find_indices:\n  shows \"\\<lbrakk> i < length Vs; Vs ! i = x; distinct Vs \\<rbrakk> \\<Longrightarrow> find_indices x Vs = [i]\"", "lemma finite_convex_hull_iff_convex_hull_list: assumes Vs: \"Vs \\<subseteq> carrier_vec n\"\n  and id': \"Vs = set Vsl'\"\nshows \"convex_hull Vs = convex_hull_list Vsl'\"", "lemma convex_convex_hull: \"convex S \\<Longrightarrow> convex_hull S = S\"", "lemma convex_hull_convex_hull_listD: assumes A: \"A \\<subseteq> carrier_vec n\"\n  and x: \"x \\<in> convex_hull A\"\nshows \"\\<exists> as. set as \\<subseteq> A \\<and> x \\<in> convex_hull_list as\"", "lemma convex_hull_convex_sum: assumes A: \"A \\<subseteq> carrier_vec n\"\n  and x: \"x \\<in> convex_hull A\"\n  and y: \"y \\<in> convex_hull A\"\n  and a: \"0 \\<le> a\" \"a \\<le> 1\"\nshows \"a \\<cdot>\\<^sub>v x + (1 - a) \\<cdot>\\<^sub>v y \\<in> convex_hull A\"", "lemma convexI: assumes S: \"S \\<subseteq> carrier_vec n\"\n  and step: \"\\<And> a x y. x \\<in> S \\<Longrightarrow> y \\<in> S \\<Longrightarrow> 0 \\<le> a \\<Longrightarrow> a \\<le> 1 \\<Longrightarrow> a \\<cdot>\\<^sub>v x + (1 - a) \\<cdot>\\<^sub>v y \\<in> S\"\nshows \"convex S\"", "lemma convex_hulls_are_convex: assumes \"A \\<subseteq> carrier_vec n\"\n  shows \"convex (convex_hull A)\"", "lemma convex_hull_sum: assumes A: \"A \\<subseteq> carrier_vec n\" and B: \"B \\<subseteq> carrier_vec n\"\n  shows \"convex_hull (A + B) = convex_hull A + convex_hull B\"", "lemma convex_hull_in_cone:\n  \"convex_hull C \\<subseteq> cone C\"", "lemma convex_cone:\n  assumes C: \"C \\<subseteq> carrier_vec n\"\n  shows \"convex (cone C)\""], "translations": [["", "lemma convex_hull_carrier[intro]: \"Vs \\<subseteq> carrier_vec n \\<Longrightarrow> convex_hull Vs \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n    convex_hull Vs \\<subseteq> carrier_vec n", "unfolding convex_hull_def convex_lincomb_def nonneg_lincomb_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n    {x. \\<exists>Ws c.\n           finite Ws \\<and>\n           Ws \\<subseteq> Vs \\<and>\n           (lincomb c Ws = x \\<and>\n            c ` Ws \\<subseteq> Collect ((\\<le>) (0::'a))) \\<and>\n           sum c Ws = (1::'a)}\n    \\<subseteq> carrier_vec n", "by auto"], ["", "lemma convex_hull_mono: \"Vs \\<subseteq> Ws \\<Longrightarrow> convex_hull Vs \\<subseteq> convex_hull Ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Vs \\<subseteq> Ws \\<Longrightarrow>\n    convex_hull Vs \\<subseteq> convex_hull Ws", "unfolding convex_hull_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Vs \\<subseteq> Ws \\<Longrightarrow>\n    {x. \\<exists>Ws c.\n           finite Ws \\<and> Ws \\<subseteq> Vs \\<and> convex_lincomb c Ws x}\n    \\<subseteq> {x. \\<exists>Wsa c.\n                       finite Wsa \\<and>\n                       Wsa \\<subseteq> Ws \\<and> convex_lincomb c Wsa x}", "by auto"], ["", "lemma convex_lincomb_empty[simp]: \"\\<not> (convex_lincomb c {} x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> convex_lincomb c {} x", "unfolding convex_lincomb_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (nonneg_lincomb c {} x \\<and> sum c {} = (1::'a))", "by simp"], ["", "lemma set_in_convex_hull:\n  assumes \"A \\<subseteq> carrier_vec n\"\n  shows \"A \\<subseteq> convex_hull A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> convex_hull A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> convex_hull A", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> convex_hull A", "assume \"a \\<in> A\""], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> convex_hull A", "hence acarr: \"a \\<in> carrier_vec n\""], ["proof (prove)\nusing this:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. a \\<in> carrier_vec n", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> A\n  A \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. a \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  a \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> convex_hull A", "hence \"convex_lincomb (\\<lambda> x. 1) {a} a \""], ["proof (prove)\nusing this:\n  a \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. convex_lincomb (\\<lambda>x. 1::'a) {a} a", "unfolding convex_lincomb_def"], ["proof (prove)\nusing this:\n  a \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. nonneg_lincomb (\\<lambda>x. 1::'a) {a} a \\<and>\n    (\\<Sum>x\\<in>{a}. (1::'a)) = (1::'a)", "by (auto simp: nonneg_lincomb_def lincomb_def)"], ["proof (state)\nthis:\n  convex_lincomb (\\<lambda>x. 1::'a) {a} a\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> A \\<Longrightarrow> x \\<in> convex_hull A", "then"], ["proof (chain)\npicking this:\n  convex_lincomb (\\<lambda>x. 1::'a) {a} a", "show \"a \\<in> convex_hull A\""], ["proof (prove)\nusing this:\n  convex_lincomb (\\<lambda>x. 1::'a) {a} a\n\ngoal (1 subgoal):\n 1. a \\<in> convex_hull A", "using \\<open>a \\<in> A\\<close>"], ["proof (prove)\nusing this:\n  convex_lincomb (\\<lambda>x. 1::'a) {a} a\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. a \\<in> convex_hull A", "unfolding convex_hull_def"], ["proof (prove)\nusing this:\n  convex_lincomb (\\<lambda>x. 1::'a) {a} a\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. a \\<in> {x. \\<exists>Ws c.\n                   finite Ws \\<and>\n                   Ws \\<subseteq> A \\<and> convex_lincomb c Ws x}", "by auto"], ["proof (state)\nthis:\n  a \\<in> convex_hull A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma convex_hull_empty[simp]:\n  \"convex_hull {} = {}\"\n  \"A \\<subseteq> carrier_vec n \\<Longrightarrow> convex_hull A = {} \\<longleftrightarrow> A = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex_hull {} = {} &&&\n    (A \\<subseteq> carrier_vec n \\<Longrightarrow>\n     (convex_hull A = {}) = (A = {}))", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. convex_hull {} = {}\n 2. A \\<subseteq> carrier_vec n \\<Longrightarrow>\n    (convex_hull A = {}) = (A = {})", "show \"convex_hull {} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex_hull {} = {}", "unfolding convex_hull_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<exists>Ws c.\n           finite Ws \\<and>\n           Ws \\<subseteq> {} \\<and> convex_lincomb c Ws x} =\n    {}", "by auto"], ["proof (state)\nthis:\n  convex_hull {} = {}\n\ngoal (1 subgoal):\n 1. A \\<subseteq> carrier_vec n \\<Longrightarrow>\n    (convex_hull A = {}) = (A = {})", "then"], ["proof (chain)\npicking this:\n  convex_hull {} = {}", "show \"A \\<subseteq> carrier_vec n \\<Longrightarrow> convex_hull A = {} \\<longleftrightarrow> A = {}\""], ["proof (prove)\nusing this:\n  convex_hull {} = {}\n\ngoal (1 subgoal):\n 1. A \\<subseteq> carrier_vec n \\<Longrightarrow>\n    (convex_hull A = {}) = (A = {})", "using set_in_convex_hull[of A]"], ["proof (prove)\nusing this:\n  convex_hull {} = {}\n  A \\<subseteq> carrier_vec n \\<Longrightarrow> A \\<subseteq> convex_hull A\n\ngoal (1 subgoal):\n 1. A \\<subseteq> carrier_vec n \\<Longrightarrow>\n    (convex_hull A = {}) = (A = {})", "by auto"], ["proof (state)\nthis:\n  A \\<subseteq> carrier_vec n \\<Longrightarrow>\n  (convex_hull A = {}) = (A = {})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma convex_hull_bound: assumes XBnd: \"X \\<subseteq> Bounded_vec Bnd\"\n  and X: \"X \\<subseteq> carrier_vec n\"\nshows \"convex_hull X \\<subseteq> Bounded_vec Bnd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex_hull X \\<subseteq> Bounded_vec Bnd", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> convex_hull X \\<Longrightarrow> x \\<in> Bounded_vec Bnd", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> convex_hull X \\<Longrightarrow> x \\<in> Bounded_vec Bnd", "assume \"x \\<in> convex_hull X\""], ["proof (state)\nthis:\n  x \\<in> convex_hull X\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> convex_hull X \\<Longrightarrow> x \\<in> Bounded_vec Bnd", "from this[unfolded convex_hull_def]"], ["proof (chain)\npicking this:\n  x \\<in> {x. \\<exists>Ws c.\n                 finite Ws \\<and>\n                 Ws \\<subseteq> X \\<and> convex_lincomb c Ws x}", "obtain Y c where fin: \"finite Y\" and YX: \"Y \\<subseteq> X\" and cx: \"convex_lincomb c Y x\""], ["proof (prove)\nusing this:\n  x \\<in> {x. \\<exists>Ws c.\n                 finite Ws \\<and>\n                 Ws \\<subseteq> X \\<and> convex_lincomb c Ws x}\n\ngoal (1 subgoal):\n 1. (\\<And>Y c.\n        \\<lbrakk>finite Y; Y \\<subseteq> X; convex_lincomb c Y x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  finite Y\n  Y \\<subseteq> X\n  convex_lincomb c Y x\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> convex_hull X \\<Longrightarrow> x \\<in> Bounded_vec Bnd", "from cx[unfolded convex_lincomb_def nonneg_lincomb_def]"], ["proof (chain)\npicking this:\n  (lincomb c Y = x \\<and>\n   c ` Y \\<subseteq> Collect ((\\<le>) (0::'a))) \\<and>\n  sum c Y = (1::'a)", "have x: \"x = lincomb c Y\" and sum: \"sum c Y = 1\" and c0: \"\\<And> y. y \\<in> Y \\<Longrightarrow> c y \\<ge> 0\""], ["proof (prove)\nusing this:\n  (lincomb c Y = x \\<and>\n   c ` Y \\<subseteq> Collect ((\\<le>) (0::'a))) \\<and>\n  sum c Y = (1::'a)\n\ngoal (1 subgoal):\n 1. x = lincomb c Y &&&\n    sum c Y = (1::'a) &&&\n    (\\<And>y. y \\<in> Y \\<Longrightarrow> (0::'a) \\<le> c y)", "by auto"], ["proof (state)\nthis:\n  x = lincomb c Y\n  sum c Y = (1::'a)\n  ?y3 \\<in> Y \\<Longrightarrow> (0::'a) \\<le> c ?y3\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> convex_hull X \\<Longrightarrow> x \\<in> Bounded_vec Bnd", "from YX X XBnd"], ["proof (chain)\npicking this:\n  Y \\<subseteq> X\n  X \\<subseteq> carrier_vec n\n  X \\<subseteq> Bounded_vec Bnd", "have Y: \"Y \\<subseteq> carrier_vec n\" and YBnd: \"Y \\<subseteq> Bounded_vec Bnd\""], ["proof (prove)\nusing this:\n  Y \\<subseteq> X\n  X \\<subseteq> carrier_vec n\n  X \\<subseteq> Bounded_vec Bnd\n\ngoal (1 subgoal):\n 1. Y \\<subseteq> carrier_vec n &&& Y \\<subseteq> Bounded_vec Bnd", "by auto"], ["proof (state)\nthis:\n  Y \\<subseteq> carrier_vec n\n  Y \\<subseteq> Bounded_vec Bnd\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> convex_hull X \\<Longrightarrow> x \\<in> Bounded_vec Bnd", "from x Y"], ["proof (chain)\npicking this:\n  x = lincomb c Y\n  Y \\<subseteq> carrier_vec n", "have dim: \"dim_vec x = n\""], ["proof (prove)\nusing this:\n  x = lincomb c Y\n  Y \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. dim_vec x = n", "by auto"], ["proof (state)\nthis:\n  dim_vec x = n\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> convex_hull X \\<Longrightarrow> x \\<in> Bounded_vec Bnd", "show \"x \\<in> Bounded_vec Bnd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Bounded_vec Bnd", "unfolding Bounded_vec_def mem_Collect_eq dim"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<n. \\<bar>x $ i\\<bar> \\<le> Bnd", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i < n \\<Longrightarrow> \\<bar>x $ i\\<bar> \\<le> Bnd", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i < n \\<Longrightarrow> \\<bar>x $ i\\<bar> \\<le> Bnd", "assume i: \"i < n\""], ["proof (state)\nthis:\n  i < n\n\ngoal (1 subgoal):\n 1. \\<And>i. i < n \\<Longrightarrow> \\<bar>x $ i\\<bar> \\<le> Bnd", "have \"abs (x $ i) = abs (\\<Sum>x\\<in>Y. c x * x $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>x $ i\\<bar> = \\<bar>\\<Sum>x\\<in>Y. c x * x $ i\\<bar>", "unfolding x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>lincomb c Y $ i\\<bar> = \\<bar>\\<Sum>x\\<in>Y. c x * x $ i\\<bar>", "by (subst lincomb_index[OF i Y], auto)"], ["proof (state)\nthis:\n  \\<bar>x $ i\\<bar> = \\<bar>\\<Sum>x\\<in>Y. c x * x $ i\\<bar>\n\ngoal (1 subgoal):\n 1. \\<And>i. i < n \\<Longrightarrow> \\<bar>x $ i\\<bar> \\<le> Bnd", "also"], ["proof (state)\nthis:\n  \\<bar>x $ i\\<bar> = \\<bar>\\<Sum>x\\<in>Y. c x * x $ i\\<bar>\n\ngoal (1 subgoal):\n 1. \\<And>i. i < n \\<Longrightarrow> \\<bar>x $ i\\<bar> \\<le> Bnd", "have \"\\<dots> \\<le> (\\<Sum>x\\<in>Y. abs (c x * x $ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bar>\\<Sum>x\\<in>Y. c x * x $ i\\<bar>\n    \\<le> (\\<Sum>x\\<in>Y. \\<bar>c x * x $ i\\<bar>)", "by auto"], ["proof (state)\nthis:\n  \\<bar>\\<Sum>x\\<in>Y. c x * x $ i\\<bar>\n  \\<le> (\\<Sum>x\\<in>Y. \\<bar>c x * x $ i\\<bar>)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < n \\<Longrightarrow> \\<bar>x $ i\\<bar> \\<le> Bnd", "also"], ["proof (state)\nthis:\n  \\<bar>\\<Sum>x\\<in>Y. c x * x $ i\\<bar>\n  \\<le> (\\<Sum>x\\<in>Y. \\<bar>c x * x $ i\\<bar>)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < n \\<Longrightarrow> \\<bar>x $ i\\<bar> \\<le> Bnd", "have \"\\<dots> = (\\<Sum>x\\<in>Y. abs (c x) * abs (x $ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>Y. \\<bar>c x * x $ i\\<bar>) =\n    (\\<Sum>x\\<in>Y. \\<bar>c x\\<bar> * \\<bar>x $ i\\<bar>)", "by (simp add: abs_mult)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>Y. \\<bar>c x * x $ i\\<bar>) =\n  (\\<Sum>x\\<in>Y. \\<bar>c x\\<bar> * \\<bar>x $ i\\<bar>)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < n \\<Longrightarrow> \\<bar>x $ i\\<bar> \\<le> Bnd", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>Y. \\<bar>c x * x $ i\\<bar>) =\n  (\\<Sum>x\\<in>Y. \\<bar>c x\\<bar> * \\<bar>x $ i\\<bar>)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < n \\<Longrightarrow> \\<bar>x $ i\\<bar> \\<le> Bnd", "have \"\\<dots> \\<le> (\\<Sum>x\\<in>Y. abs (c x) * Bnd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>Y. \\<bar>c x\\<bar> * \\<bar>x $ i\\<bar>)\n    \\<le> (\\<Sum>x\\<in>Y. \\<bar>c x\\<bar> * Bnd)", "by (intro sum_mono mult_left_mono, insert YBnd[unfolded Bounded_vec_def] i Y, force+)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>Y. \\<bar>c x\\<bar> * \\<bar>x $ i\\<bar>)\n  \\<le> (\\<Sum>x\\<in>Y. \\<bar>c x\\<bar> * Bnd)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < n \\<Longrightarrow> \\<bar>x $ i\\<bar> \\<le> Bnd", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>Y. \\<bar>c x\\<bar> * \\<bar>x $ i\\<bar>)\n  \\<le> (\\<Sum>x\\<in>Y. \\<bar>c x\\<bar> * Bnd)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < n \\<Longrightarrow> \\<bar>x $ i\\<bar> \\<le> Bnd", "have \"\\<dots> = (\\<Sum>x\\<in>Y. abs (c x)) * Bnd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>Y. \\<bar>c x\\<bar> * Bnd) =\n    (\\<Sum>x\\<in>Y. \\<bar>c x\\<bar>) * Bnd", "by (simp add: sum_distrib_right)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>Y. \\<bar>c x\\<bar> * Bnd) =\n  (\\<Sum>x\\<in>Y. \\<bar>c x\\<bar>) * Bnd\n\ngoal (1 subgoal):\n 1. \\<And>i. i < n \\<Longrightarrow> \\<bar>x $ i\\<bar> \\<le> Bnd", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>Y. \\<bar>c x\\<bar> * Bnd) =\n  (\\<Sum>x\\<in>Y. \\<bar>c x\\<bar>) * Bnd\n\ngoal (1 subgoal):\n 1. \\<And>i. i < n \\<Longrightarrow> \\<bar>x $ i\\<bar> \\<le> Bnd", "have \"(\\<Sum>x\\<in>Y. abs (c x)) = (\\<Sum>x\\<in>Y. c x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>Y. \\<bar>c x\\<bar>) = sum c Y", "by (rule sum.cong, insert c0, auto)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>Y. \\<bar>c x\\<bar>) = sum c Y\n\ngoal (1 subgoal):\n 1. \\<And>i. i < n \\<Longrightarrow> \\<bar>x $ i\\<bar> \\<le> Bnd", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>Y. \\<bar>c x\\<bar>) = sum c Y\n\ngoal (1 subgoal):\n 1. \\<And>i. i < n \\<Longrightarrow> \\<bar>x $ i\\<bar> \\<le> Bnd", "have \"\\<dots> = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum c Y = (1::'a)", "by fact"], ["proof (state)\nthis:\n  sum c Y = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < n \\<Longrightarrow> \\<bar>x $ i\\<bar> \\<le> Bnd", "finally"], ["proof (chain)\npicking this:\n  \\<bar>x $ i\\<bar> \\<le> (1::'a) * Bnd", "show \"\\<bar>x $ i\\<bar> \\<le> Bnd\""], ["proof (prove)\nusing this:\n  \\<bar>x $ i\\<bar> \\<le> (1::'a) * Bnd\n\ngoal (1 subgoal):\n 1. \\<bar>x $ i\\<bar> \\<le> Bnd", "by auto"], ["proof (state)\nthis:\n  \\<bar>x $ i\\<bar> \\<le> Bnd\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> Bounded_vec Bnd\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"convex_hull_list Vs = {x. \\<exists> c. convex_lincomb_list c Vs x}\""], ["", "lemma lincomb_list_elem:\n  \"set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n   lincomb_list (\\<lambda> j. if i=j then 1 else 0) Vs = (if i < length Vs then Vs ! i else 0\\<^sub>v n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs =\n    (if i < length Vs then Vs ! i else 0\\<^sub>v n)", "proof (induction Vs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) [] =\n    (if i < length [] then [] ! i else 0\\<^sub>v n)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a))\n                 xs =\n                (if i < length xs then xs ! i else 0\\<^sub>v n);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list\n                          (\\<lambda>j. if i = j then 1::'a else (0::'a))\n                          (xs @ [x]) =\n                         (if i < length (xs @ [x]) then (xs @ [x]) ! i\n                          else 0\\<^sub>v n)", "case (snoc x Vs)"], ["proof (state)\nthis:\n  set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs =\n  (if i < length Vs then Vs ! i else 0\\<^sub>v n)\n  set (Vs @ [x]) \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) [] =\n    (if i < length [] then [] ! i else 0\\<^sub>v n)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a))\n                 xs =\n                (if i < length xs then xs ! i else 0\\<^sub>v n);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list\n                          (\\<lambda>j. if i = j then 1::'a else (0::'a))\n                          (xs @ [x]) =\n                         (if i < length (xs @ [x]) then (xs @ [x]) ! i\n                          else 0\\<^sub>v n)", "have x: \"x \\<in> carrier_vec n\" and Vs: \"set Vs \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> carrier_vec n &&& set Vs \\<subseteq> carrier_vec n", "using snoc.prems"], ["proof (prove)\nusing this:\n  set (Vs @ [x]) \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. x \\<in> carrier_vec n &&& set Vs \\<subseteq> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  x \\<in> carrier_vec n\n  set Vs \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) [] =\n    (if i < length [] then [] ! i else 0\\<^sub>v n)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a))\n                 xs =\n                (if i < length xs then xs ! i else 0\\<^sub>v n);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list\n                          (\\<lambda>j. if i = j then 1::'a else (0::'a))\n                          (xs @ [x]) =\n                         (if i < length (xs @ [x]) then (xs @ [x]) ! i\n                          else 0\\<^sub>v n)", "let ?f = \"\\<lambda> j. if i = j then 1 else 0\""], ["proof (state)\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) [] =\n    (if i < length [] then [] ! i else 0\\<^sub>v n)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a))\n                 xs =\n                (if i < length xs then xs ! i else 0\\<^sub>v n);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list\n                          (\\<lambda>j. if i = j then 1::'a else (0::'a))\n                          (xs @ [x]) =\n                         (if i < length (xs @ [x]) then (xs @ [x]) ! i\n                          else 0\\<^sub>v n)", "have \"lincomb_list ?f (Vs @ [x]) = lincomb_list ?f Vs + ?f (length Vs) \\<cdot>\\<^sub>v x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) (Vs @ [x]) =\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x", "using x Vs"], ["proof (prove)\nusing this:\n  x \\<in> carrier_vec n\n  set Vs \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) (Vs @ [x]) =\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x", "by simp"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) (Vs @ [x]) =\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) [] =\n    (if i < length [] then [] ! i else 0\\<^sub>v n)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a))\n                 xs =\n                (if i < length xs then xs ! i else 0\\<^sub>v n);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list\n                          (\\<lambda>j. if i = j then 1::'a else (0::'a))\n                          (xs @ [x]) =\n                         (if i < length (xs @ [x]) then (xs @ [x]) ! i\n                          else 0\\<^sub>v n)", "also"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) (Vs @ [x]) =\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) [] =\n    (if i < length [] then [] ! i else 0\\<^sub>v n)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a))\n                 xs =\n                (if i < length xs then xs ! i else 0\\<^sub>v n);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list\n                          (\\<lambda>j. if i = j then 1::'a else (0::'a))\n                          (xs @ [x]) =\n                         (if i < length (xs @ [x]) then (xs @ [x]) ! i\n                          else 0\\<^sub>v n)", "have \"\\<dots> = (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\" (is ?goal)"], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "using less_linear[of i \"length Vs\"]"], ["proof (prove)\nusing this:\n  i < length Vs \\<or> i = length Vs \\<or> length Vs < i\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "proof (elim disjE)"], ["proof (state)\ngoal (3 subgoals):\n 1. i < length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 2. i = length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 3. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "assume i: \"i < length Vs\""], ["proof (state)\nthis:\n  i < length Vs\n\ngoal (3 subgoals):\n 1. i < length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 2. i = length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 3. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "have \"lincomb_list (\\<lambda>j. if i = j then 1 else 0) Vs = Vs ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs = Vs ! i", "using snoc.IH[OF Vs] i"], ["proof (prove)\nusing this:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs =\n  (if i < length Vs then Vs ! i else 0\\<^sub>v n)\n  i < length Vs\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs = Vs ! i", "by auto"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs = Vs ! i\n\ngoal (3 subgoals):\n 1. i < length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 2. i = length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 3. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "moreover"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs = Vs ! i\n\ngoal (3 subgoals):\n 1. i < length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 2. i = length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 3. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "have \"(if i = length Vs then 1 else 0) \\<cdot>\\<^sub>v x = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    0\\<^sub>v n", "using i x"], ["proof (prove)\nusing this:\n  i < length Vs\n  x \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    0\\<^sub>v n", "by auto"], ["proof (state)\nthis:\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x = 0\\<^sub>v n\n\ngoal (3 subgoals):\n 1. i < length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 2. i = length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 3. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "moreover"], ["proof (state)\nthis:\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x = 0\\<^sub>v n\n\ngoal (3 subgoals):\n 1. i < length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 2. i = length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 3. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "have \"(if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) = Vs ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) = Vs ! i", "using i append_Cons_nth_left"], ["proof (prove)\nusing this:\n  i < length Vs\n  ?i < length ?xs \\<Longrightarrow> (?xs @ ?u # ?ys) ! ?i = ?xs ! ?i\n\ngoal (1 subgoal):\n 1. (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) = Vs ! i", "by fastforce"], ["proof (state)\nthis:\n  (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) = Vs ! i\n\ngoal (3 subgoals):\n 1. i < length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 2. i = length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 3. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "ultimately"], ["proof (chain)\npicking this:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs = Vs ! i\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x = 0\\<^sub>v n\n  (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) = Vs ! i", "show ?goal"], ["proof (prove)\nusing this:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs = Vs ! i\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x = 0\\<^sub>v n\n  (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) = Vs ! i\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "using Vs i lincomb_list_carrier M.r_zero"], ["proof (prove)\nusing this:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs = Vs ! i\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x = 0\\<^sub>v n\n  (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) = Vs ! i\n  set Vs \\<subseteq> carrier_vec n\n  i < length Vs\n  set ?vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n  lincomb_list ?c ?vs \\<in> carrier_vec n\n  ?x \\<in> carrier_vec n \\<Longrightarrow> ?x + 0\\<^sub>v n = ?x\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "by metis"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n  (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n\ngoal (2 subgoals):\n 1. i = length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 2. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. i = length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 2. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "assume i: \"i = length Vs\""], ["proof (state)\nthis:\n  i = length Vs\n\ngoal (2 subgoals):\n 1. i = length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 2. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "have \"lincomb_list (\\<lambda>j. if i = j then 1 else 0) Vs = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs =\n    0\\<^sub>v n", "using snoc.IH[OF Vs] i"], ["proof (prove)\nusing this:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs =\n  (if i < length Vs then Vs ! i else 0\\<^sub>v n)\n  i = length Vs\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs =\n    0\\<^sub>v n", "by auto"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs =\n  0\\<^sub>v n\n\ngoal (2 subgoals):\n 1. i = length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 2. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "moreover"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs =\n  0\\<^sub>v n\n\ngoal (2 subgoals):\n 1. i = length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 2. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "have \"(if i = length Vs then 1 else 0) \\<cdot>\\<^sub>v x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x = x", "using i x"], ["proof (prove)\nusing this:\n  i = length Vs\n  x \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x = x", "by auto"], ["proof (state)\nthis:\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x = x\n\ngoal (2 subgoals):\n 1. i = length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 2. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "moreover"], ["proof (state)\nthis:\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x = x\n\ngoal (2 subgoals):\n 1. i = length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 2. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "have \"(if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) = x", "using i append_Cons_nth_left"], ["proof (prove)\nusing this:\n  i = length Vs\n  ?i < length ?xs \\<Longrightarrow> (?xs @ ?u # ?ys) ! ?i = ?xs ! ?i\n\ngoal (1 subgoal):\n 1. (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) = x", "by simp"], ["proof (state)\nthis:\n  (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) = x\n\ngoal (2 subgoals):\n 1. i = length Vs \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n 2. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "ultimately"], ["proof (chain)\npicking this:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs =\n  0\\<^sub>v n\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x = x\n  (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) = x", "show ?goal"], ["proof (prove)\nusing this:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs =\n  0\\<^sub>v n\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x = x\n  (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) = x\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "using x"], ["proof (prove)\nusing this:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs =\n  0\\<^sub>v n\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x = x\n  (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) = x\n  x \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "by simp"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n  (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n\ngoal (1 subgoal):\n 1. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "assume i: \"i > length Vs\""], ["proof (state)\nthis:\n  length Vs < i\n\ngoal (1 subgoal):\n 1. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "have \"lincomb_list (\\<lambda>j. if i = j then 1 else 0) Vs = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs =\n    0\\<^sub>v n", "using snoc.IH[OF Vs] i"], ["proof (prove)\nusing this:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs =\n  (if i < length Vs then Vs ! i else 0\\<^sub>v n)\n  length Vs < i\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs =\n    0\\<^sub>v n", "by auto"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs =\n  0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "moreover"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs =\n  0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "have \"(if i = length Vs then 1 else 0) \\<cdot>\\<^sub>v x = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    0\\<^sub>v n", "using i x"], ["proof (prove)\nusing this:\n  length Vs < i\n  x \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    0\\<^sub>v n", "by auto"], ["proof (state)\nthis:\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x = 0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "moreover"], ["proof (state)\nthis:\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x = 0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "have \"(if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) =\n    0\\<^sub>v n", "using i"], ["proof (prove)\nusing this:\n  length Vs < i\n\ngoal (1 subgoal):\n 1. (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) =\n    0\\<^sub>v n", "by simp"], ["proof (state)\nthis:\n  (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) =\n  0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. length Vs < i \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "ultimately"], ["proof (chain)\npicking this:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs =\n  0\\<^sub>v n\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x = 0\\<^sub>v n\n  (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) =\n  0\\<^sub>v n", "show ?goal"], ["proof (prove)\nusing this:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs =\n  0\\<^sub>v n\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x = 0\\<^sub>v n\n  (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n) =\n  0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n    (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "by simp"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n  (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs +\n  (if i = length Vs then 1::'a else (0::'a)) \\<cdot>\\<^sub>v x =\n  (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) [] =\n    (if i < length [] then [] ! i else 0\\<^sub>v n)\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a))\n                 xs =\n                (if i < length xs then xs ! i else 0\\<^sub>v n);\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list\n                          (\\<lambda>j. if i = j then 1::'a else (0::'a))\n                          (xs @ [x]) =\n                         (if i < length (xs @ [x]) then (xs @ [x]) ! i\n                          else 0\\<^sub>v n)", "finally"], ["proof (chain)\npicking this:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) (Vs @ [x]) =\n  (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "show ?case"], ["proof (prove)\nusing this:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) (Vs @ [x]) =\n  (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) (Vs @ [x]) =\n    (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)", "by auto"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) (Vs @ [x]) =\n  (if i < length (Vs @ [x]) then (Vs @ [x]) ! i else 0\\<^sub>v n)\n\ngoal (1 subgoal):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) [] =\n    (if i < length [] then [] ! i else 0\\<^sub>v n)", "qed simp"], ["", "lemma set_in_convex_hull_list: fixes Vs :: \"'a vec list\"\n  assumes \"set Vs \\<subseteq> carrier_vec n\"\n  shows \"set Vs \\<subseteq> convex_hull_list Vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set Vs \\<subseteq> convex_hull_list Vs", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Vs \\<Longrightarrow> x \\<in> convex_hull_list Vs", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Vs \\<Longrightarrow> x \\<in> convex_hull_list Vs", "assume \"x \\<in> set Vs\""], ["proof (state)\nthis:\n  x \\<in> set Vs\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Vs \\<Longrightarrow> x \\<in> convex_hull_list Vs", "then"], ["proof (chain)\npicking this:\n  x \\<in> set Vs", "obtain i where i: \"i < length Vs\"\n    and x: \"x = Vs ! i\""], ["proof (prove)\nusing this:\n  x \\<in> set Vs\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length Vs; x = Vs ! i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using set_conv_nth[of Vs]"], ["proof (prove)\nusing this:\n  x \\<in> set Vs\n  set Vs = {Vs ! i |i. i < length Vs}\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length Vs; x = Vs ! i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i < length Vs\n  x = Vs ! i\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Vs \\<Longrightarrow> x \\<in> convex_hull_list Vs", "let ?f = \"\\<lambda> j. if i = j then 1 else 0 :: 'a\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Vs \\<Longrightarrow> x \\<in> convex_hull_list Vs", "have \"lincomb_list ?f Vs = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs = x", "using i x lincomb_list_elem[OF assms]"], ["proof (prove)\nusing this:\n  i < length Vs\n  x = Vs ! i\n  lincomb_list (\\<lambda>j. if ?i = j then 1::'a else (0::'a)) Vs =\n  (if ?i < length Vs then Vs ! ?i else 0\\<^sub>v n)\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs = x", "by auto"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs = x\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Vs \\<Longrightarrow> x \\<in> convex_hull_list Vs", "moreover"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs = x\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Vs \\<Longrightarrow> x \\<in> convex_hull_list Vs", "have \"\\<forall> j < length Vs. ?f j \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<length Vs. (0::'a) \\<le> (if i = j then 1::'a else (0::'a))", "by auto"], ["proof (state)\nthis:\n  \\<forall>j<length Vs. (0::'a) \\<le> (if i = j then 1::'a else (0::'a))\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Vs \\<Longrightarrow> x \\<in> convex_hull_list Vs", "moreover"], ["proof (state)\nthis:\n  \\<forall>j<length Vs. (0::'a) \\<le> (if i = j then 1::'a else (0::'a))\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Vs \\<Longrightarrow> x \\<in> convex_hull_list Vs", "have \"sum ?f {0..<length Vs} = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>j = 0..<length Vs. if i = j then 1::'a else (0::'a)) = (1::'a)", "using i"], ["proof (prove)\nusing this:\n  i < length Vs\n\ngoal (1 subgoal):\n 1. (\\<Sum>j = 0..<length Vs. if i = j then 1::'a else (0::'a)) = (1::'a)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>j = 0..<length Vs. if i = j then 1::'a else (0::'a)) = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set Vs \\<Longrightarrow> x \\<in> convex_hull_list Vs", "ultimately"], ["proof (chain)\npicking this:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs = x\n  \\<forall>j<length Vs. (0::'a) \\<le> (if i = j then 1::'a else (0::'a))\n  (\\<Sum>j = 0..<length Vs. if i = j then 1::'a else (0::'a)) = (1::'a)", "show \"x \\<in> convex_hull_list Vs\""], ["proof (prove)\nusing this:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs = x\n  \\<forall>j<length Vs. (0::'a) \\<le> (if i = j then 1::'a else (0::'a))\n  (\\<Sum>j = 0..<length Vs. if i = j then 1::'a else (0::'a)) = (1::'a)\n\ngoal (1 subgoal):\n 1. x \\<in> convex_hull_list Vs", "unfolding convex_hull_list_def convex_lincomb_list_def nonneg_lincomb_list_def"], ["proof (prove)\nusing this:\n  lincomb_list (\\<lambda>j. if i = j then 1::'a else (0::'a)) Vs = x\n  \\<forall>j<length Vs. (0::'a) \\<le> (if i = j then 1::'a else (0::'a))\n  (\\<Sum>j = 0..<length Vs. if i = j then 1::'a else (0::'a)) = (1::'a)\n\ngoal (1 subgoal):\n 1. x \\<in> {x. \\<exists>c.\n                   (lincomb_list c Vs = x \\<and>\n                    (\\<forall>i<length Vs. (0::'a) \\<le> c i)) \\<and>\n                   sum c {0..<length Vs} = (1::'a)}", "by auto"], ["proof (state)\nthis:\n  x \\<in> convex_hull_list Vs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma convex_hull_list_combination:\n  assumes Vs: \"set Vs \\<subseteq> carrier_vec n\"\n    and x: \"x \\<in> convex_hull_list Vs\"\n    and y: \"y \\<in> convex_hull_list Vs\"\n    and l0: \"0 \\<le> l\" and l1: \"l \\<le> 1\"\n  shows \"l \\<cdot>\\<^sub>v x + (1 - l) \\<cdot>\\<^sub>v y \\<in> convex_hull_list Vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull_list Vs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull_list Vs", "from x"], ["proof (chain)\npicking this:\n  x \\<in> convex_hull_list Vs", "obtain cx where x: \"lincomb_list cx Vs = x\" and cx0: \"\\<forall> i < length Vs. cx i \\<ge> 0\"\n    and cx1: \"sum cx {0..<length Vs} = 1\""], ["proof (prove)\nusing this:\n  x \\<in> convex_hull_list Vs\n\ngoal (1 subgoal):\n 1. (\\<And>cx.\n        \\<lbrakk>lincomb_list cx Vs = x;\n         \\<forall>i<length Vs. (0::'a) \\<le> cx i;\n         sum cx {0..<length Vs} = (1::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding convex_hull_list_def convex_lincomb_list_def nonneg_lincomb_list_def"], ["proof (prove)\nusing this:\n  x \\<in> {x. \\<exists>c.\n                 (lincomb_list c Vs = x \\<and>\n                  (\\<forall>i<length Vs. (0::'a) \\<le> c i)) \\<and>\n                 sum c {0..<length Vs} = (1::'a)}\n\ngoal (1 subgoal):\n 1. (\\<And>cx.\n        \\<lbrakk>lincomb_list cx Vs = x;\n         \\<forall>i<length Vs. (0::'a) \\<le> cx i;\n         sum cx {0..<length Vs} = (1::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lincomb_list cx Vs = x\n  \\<forall>i<length Vs. (0::'a) \\<le> cx i\n  sum cx {0..<length Vs} = (1::'a)\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull_list Vs", "from y"], ["proof (chain)\npicking this:\n  y \\<in> convex_hull_list Vs", "obtain cy where y: \"lincomb_list cy Vs = y\" and cy0: \"\\<forall> i < length Vs. cy i \\<ge> 0\"\n    and cy1: \"sum cy {0..<length Vs} = 1\""], ["proof (prove)\nusing this:\n  y \\<in> convex_hull_list Vs\n\ngoal (1 subgoal):\n 1. (\\<And>cy.\n        \\<lbrakk>lincomb_list cy Vs = y;\n         \\<forall>i<length Vs. (0::'a) \\<le> cy i;\n         sum cy {0..<length Vs} = (1::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding convex_hull_list_def convex_lincomb_list_def nonneg_lincomb_list_def"], ["proof (prove)\nusing this:\n  y \\<in> {x. \\<exists>c.\n                 (lincomb_list c Vs = x \\<and>\n                  (\\<forall>i<length Vs. (0::'a) \\<le> c i)) \\<and>\n                 sum c {0..<length Vs} = (1::'a)}\n\ngoal (1 subgoal):\n 1. (\\<And>cy.\n        \\<lbrakk>lincomb_list cy Vs = y;\n         \\<forall>i<length Vs. (0::'a) \\<le> cy i;\n         sum cy {0..<length Vs} = (1::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lincomb_list cy Vs = y\n  \\<forall>i<length Vs. (0::'a) \\<le> cy i\n  sum cy {0..<length Vs} = (1::'a)\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull_list Vs", "let ?c = \"\\<lambda> i. l * cx i + (1 - l) * cy i\""], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull_list Vs", "have \"set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n        lincomb_list ?c Vs = l \\<cdot>\\<^sub>v lincomb_list cx Vs + (1 - l) \\<cdot>\\<^sub>v lincomb_list cy Vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) Vs =\n    l \\<cdot>\\<^sub>v lincomb_list cx Vs +\n    ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy Vs", "proof (induction Vs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) [] =\n    l \\<cdot>\\<^sub>v lincomb_list cx [] +\n    ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                 xs =\n                l \\<cdot>\\<^sub>v lincomb_list cx xs +\n                ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list\n                          (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                          (xs @ [x]) =\n                         l \\<cdot>\\<^sub>v lincomb_list cx (xs @ [x]) +\n                         ((1::'a) - l) \\<cdot>\\<^sub>v\n                         lincomb_list cy (xs @ [x])", "case (snoc v Vs)"], ["proof (state)\nthis:\n  set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n  lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) Vs =\n  l \\<cdot>\\<^sub>v lincomb_list cx Vs +\n  ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy Vs\n  set (Vs @ [v]) \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) [] =\n    l \\<cdot>\\<^sub>v lincomb_list cx [] +\n    ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                 xs =\n                l \\<cdot>\\<^sub>v lincomb_list cx xs +\n                ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list\n                          (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                          (xs @ [x]) =\n                         l \\<cdot>\\<^sub>v lincomb_list cx (xs @ [x]) +\n                         ((1::'a) - l) \\<cdot>\\<^sub>v\n                         lincomb_list cy (xs @ [x])", "have v: \"v \\<in> carrier_vec n\" and Vs: \"set Vs \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n &&& set Vs \\<subseteq> carrier_vec n", "using snoc.prems"], ["proof (prove)\nusing this:\n  set (Vs @ [v]) \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n &&& set Vs \\<subseteq> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  v \\<in> carrier_vec n\n  set Vs \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) [] =\n    l \\<cdot>\\<^sub>v lincomb_list cx [] +\n    ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                 xs =\n                l \\<cdot>\\<^sub>v lincomb_list cx xs +\n                ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list\n                          (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                          (xs @ [x]) =\n                         l \\<cdot>\\<^sub>v lincomb_list cx (xs @ [x]) +\n                         ((1::'a) - l) \\<cdot>\\<^sub>v\n                         lincomb_list cy (xs @ [x])", "have \"lincomb_list ?c (Vs @ [v]) = lincomb_list ?c Vs + ?c (length Vs) \\<cdot>\\<^sub>v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) (Vs @ [v]) =\n    lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) Vs +\n    (l * cx (length Vs) + ((1::'a) - l) * cy (length Vs)) \\<cdot>\\<^sub>v v", "using snoc.prems"], ["proof (prove)\nusing this:\n  set (Vs @ [v]) \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) (Vs @ [v]) =\n    lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) Vs +\n    (l * cx (length Vs) + ((1::'a) - l) * cy (length Vs)) \\<cdot>\\<^sub>v v", "by auto"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) (Vs @ [v]) =\n  lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) Vs +\n  (l * cx (length Vs) + ((1::'a) - l) * cy (length Vs)) \\<cdot>\\<^sub>v v\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) [] =\n    l \\<cdot>\\<^sub>v lincomb_list cx [] +\n    ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                 xs =\n                l \\<cdot>\\<^sub>v lincomb_list cx xs +\n                ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list\n                          (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                          (xs @ [x]) =\n                         l \\<cdot>\\<^sub>v lincomb_list cx (xs @ [x]) +\n                         ((1::'a) - l) \\<cdot>\\<^sub>v\n                         lincomb_list cy (xs @ [x])", "also"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) (Vs @ [v]) =\n  lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) Vs +\n  (l * cx (length Vs) + ((1::'a) - l) * cy (length Vs)) \\<cdot>\\<^sub>v v\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) [] =\n    l \\<cdot>\\<^sub>v lincomb_list cx [] +\n    ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                 xs =\n                l \\<cdot>\\<^sub>v lincomb_list cx xs +\n                ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list\n                          (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                          (xs @ [x]) =\n                         l \\<cdot>\\<^sub>v lincomb_list cx (xs @ [x]) +\n                         ((1::'a) - l) \\<cdot>\\<^sub>v\n                         lincomb_list cy (xs @ [x])", "have \"lincomb_list ?c Vs =\n               l \\<cdot>\\<^sub>v lincomb_list cx Vs + (1 - l) \\<cdot>\\<^sub>v lincomb_list cy Vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) Vs =\n    l \\<cdot>\\<^sub>v lincomb_list cx Vs +\n    ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy Vs", "by (rule snoc.IH[OF Vs])"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) Vs =\n  l \\<cdot>\\<^sub>v lincomb_list cx Vs +\n  ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy Vs\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) [] =\n    l \\<cdot>\\<^sub>v lincomb_list cx [] +\n    ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                 xs =\n                l \\<cdot>\\<^sub>v lincomb_list cx xs +\n                ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list\n                          (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                          (xs @ [x]) =\n                         l \\<cdot>\\<^sub>v lincomb_list cx (xs @ [x]) +\n                         ((1::'a) - l) \\<cdot>\\<^sub>v\n                         lincomb_list cy (xs @ [x])", "also"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) Vs =\n  l \\<cdot>\\<^sub>v lincomb_list cx Vs +\n  ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy Vs\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) [] =\n    l \\<cdot>\\<^sub>v lincomb_list cx [] +\n    ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                 xs =\n                l \\<cdot>\\<^sub>v lincomb_list cx xs +\n                ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list\n                          (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                          (xs @ [x]) =\n                         l \\<cdot>\\<^sub>v lincomb_list cx (xs @ [x]) +\n                         ((1::'a) - l) \\<cdot>\\<^sub>v\n                         lincomb_list cy (xs @ [x])", "have \"?c (length Vs) \\<cdot>\\<^sub>v v =\n               l \\<cdot>\\<^sub>v (cx (length Vs) \\<cdot>\\<^sub>v v) + (1 - l) \\<cdot>\\<^sub>v (cy (length Vs) \\<cdot>\\<^sub>v v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l * cx (length Vs) + ((1::'a) - l) * cy (length Vs)) \\<cdot>\\<^sub>v\n    v =\n    l \\<cdot>\\<^sub>v (cx (length Vs) \\<cdot>\\<^sub>v v) +\n    ((1::'a) - l) \\<cdot>\\<^sub>v (cy (length Vs) \\<cdot>\\<^sub>v v)", "using add_smult_distrib_vec smult_smult_assoc"], ["proof (prove)\nusing this:\n  (?a + ?b) \\<cdot>\\<^sub>v ?v =\n  ?a \\<cdot>\\<^sub>v ?v + ?b \\<cdot>\\<^sub>v ?v\n  ?a \\<cdot>\\<^sub>v (?b \\<cdot>\\<^sub>v ?v) = ?a * ?b \\<cdot>\\<^sub>v ?v\n\ngoal (1 subgoal):\n 1. (l * cx (length Vs) + ((1::'a) - l) * cy (length Vs)) \\<cdot>\\<^sub>v\n    v =\n    l \\<cdot>\\<^sub>v (cx (length Vs) \\<cdot>\\<^sub>v v) +\n    ((1::'a) - l) \\<cdot>\\<^sub>v (cy (length Vs) \\<cdot>\\<^sub>v v)", "by metis"], ["proof (state)\nthis:\n  (l * cx (length Vs) + ((1::'a) - l) * cy (length Vs)) \\<cdot>\\<^sub>v v =\n  l \\<cdot>\\<^sub>v (cx (length Vs) \\<cdot>\\<^sub>v v) +\n  ((1::'a) - l) \\<cdot>\\<^sub>v (cy (length Vs) \\<cdot>\\<^sub>v v)\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) [] =\n    l \\<cdot>\\<^sub>v lincomb_list cx [] +\n    ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                 xs =\n                l \\<cdot>\\<^sub>v lincomb_list cx xs +\n                ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list\n                          (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                          (xs @ [x]) =\n                         l \\<cdot>\\<^sub>v lincomb_list cx (xs @ [x]) +\n                         ((1::'a) - l) \\<cdot>\\<^sub>v\n                         lincomb_list cy (xs @ [x])", "also"], ["proof (state)\nthis:\n  (l * cx (length Vs) + ((1::'a) - l) * cy (length Vs)) \\<cdot>\\<^sub>v v =\n  l \\<cdot>\\<^sub>v (cx (length Vs) \\<cdot>\\<^sub>v v) +\n  ((1::'a) - l) \\<cdot>\\<^sub>v (cy (length Vs) \\<cdot>\\<^sub>v v)\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) [] =\n    l \\<cdot>\\<^sub>v lincomb_list cx [] +\n    ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                 xs =\n                l \\<cdot>\\<^sub>v lincomb_list cx xs +\n                ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list\n                          (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                          (xs @ [x]) =\n                         l \\<cdot>\\<^sub>v lincomb_list cx (xs @ [x]) +\n                         ((1::'a) - l) \\<cdot>\\<^sub>v\n                         lincomb_list cy (xs @ [x])", "have \"l \\<cdot>\\<^sub>v lincomb_list cx Vs + (1 - l) \\<cdot>\\<^sub>v lincomb_list cy Vs + \\<dots> =\n                  l \\<cdot>\\<^sub>v (lincomb_list cx Vs + cx (length Vs) \\<cdot>\\<^sub>v v) +\n                  (1 - l) \\<cdot>\\<^sub>v (lincomb_list cy Vs + cy (length Vs) \\<cdot>\\<^sub>v v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>v lincomb_list cx Vs +\n    ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy Vs +\n    (l \\<cdot>\\<^sub>v (cx (length Vs) \\<cdot>\\<^sub>v v) +\n     ((1::'a) - l) \\<cdot>\\<^sub>v (cy (length Vs) \\<cdot>\\<^sub>v v)) =\n    l \\<cdot>\\<^sub>v\n    (lincomb_list cx Vs + cx (length Vs) \\<cdot>\\<^sub>v v) +\n    ((1::'a) - l) \\<cdot>\\<^sub>v\n    (lincomb_list cy Vs + cy (length Vs) \\<cdot>\\<^sub>v v)", "using lincomb_list_carrier[OF Vs] v"], ["proof (prove)\nusing this:\n  lincomb_list ?c Vs \\<in> carrier_vec n\n  v \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>v lincomb_list cx Vs +\n    ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy Vs +\n    (l \\<cdot>\\<^sub>v (cx (length Vs) \\<cdot>\\<^sub>v v) +\n     ((1::'a) - l) \\<cdot>\\<^sub>v (cy (length Vs) \\<cdot>\\<^sub>v v)) =\n    l \\<cdot>\\<^sub>v\n    (lincomb_list cx Vs + cx (length Vs) \\<cdot>\\<^sub>v v) +\n    ((1::'a) - l) \\<cdot>\\<^sub>v\n    (lincomb_list cy Vs + cy (length Vs) \\<cdot>\\<^sub>v v)", "by (simp add: M.add.m_assoc M.add.m_lcomm smult_r_distr)"], ["proof (state)\nthis:\n  l \\<cdot>\\<^sub>v lincomb_list cx Vs +\n  ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy Vs +\n  (l \\<cdot>\\<^sub>v (cx (length Vs) \\<cdot>\\<^sub>v v) +\n   ((1::'a) - l) \\<cdot>\\<^sub>v (cy (length Vs) \\<cdot>\\<^sub>v v)) =\n  l \\<cdot>\\<^sub>v\n  (lincomb_list cx Vs + cx (length Vs) \\<cdot>\\<^sub>v v) +\n  ((1::'a) - l) \\<cdot>\\<^sub>v\n  (lincomb_list cy Vs + cy (length Vs) \\<cdot>\\<^sub>v v)\n\ngoal (2 subgoals):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) [] =\n    l \\<cdot>\\<^sub>v lincomb_list cx [] +\n    ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy []\n 2. \\<And>x xs.\n       \\<lbrakk>set xs \\<subseteq> carrier_vec n \\<Longrightarrow>\n                lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                 xs =\n                l \\<cdot>\\<^sub>v lincomb_list cx xs +\n                ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy xs;\n        set (xs @ [x]) \\<subseteq> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> lincomb_list\n                          (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i)\n                          (xs @ [x]) =\n                         l \\<cdot>\\<^sub>v lincomb_list cx (xs @ [x]) +\n                         ((1::'a) - l) \\<cdot>\\<^sub>v\n                         lincomb_list cy (xs @ [x])", "finally"], ["proof (chain)\npicking this:\n  lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) (Vs @ [v]) =\n  l \\<cdot>\\<^sub>v\n  (lincomb_list cx Vs + cx (length Vs) \\<cdot>\\<^sub>v v) +\n  ((1::'a) - l) \\<cdot>\\<^sub>v\n  (lincomb_list cy Vs + cy (length Vs) \\<cdot>\\<^sub>v v)", "show ?case"], ["proof (prove)\nusing this:\n  lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) (Vs @ [v]) =\n  l \\<cdot>\\<^sub>v\n  (lincomb_list cx Vs + cx (length Vs) \\<cdot>\\<^sub>v v) +\n  ((1::'a) - l) \\<cdot>\\<^sub>v\n  (lincomb_list cy Vs + cy (length Vs) \\<cdot>\\<^sub>v v)\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) (Vs @ [v]) =\n    l \\<cdot>\\<^sub>v lincomb_list cx (Vs @ [v]) +\n    ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy (Vs @ [v])", "using Vs v"], ["proof (prove)\nusing this:\n  lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) (Vs @ [v]) =\n  l \\<cdot>\\<^sub>v\n  (lincomb_list cx Vs + cx (length Vs) \\<cdot>\\<^sub>v v) +\n  ((1::'a) - l) \\<cdot>\\<^sub>v\n  (lincomb_list cy Vs + cy (length Vs) \\<cdot>\\<^sub>v v)\n  set Vs \\<subseteq> carrier_vec n\n  v \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) (Vs @ [v]) =\n    l \\<cdot>\\<^sub>v lincomb_list cx (Vs @ [v]) +\n    ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy (Vs @ [v])", "by simp"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) (Vs @ [v]) =\n  l \\<cdot>\\<^sub>v lincomb_list cx (Vs @ [v]) +\n  ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy (Vs @ [v])\n\ngoal (1 subgoal):\n 1. set [] \\<subseteq> carrier_vec n \\<Longrightarrow>\n    lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) [] =\n    l \\<cdot>\\<^sub>v lincomb_list cx [] +\n    ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy []", "qed simp"], ["proof (state)\nthis:\n  set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n  lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) Vs =\n  l \\<cdot>\\<^sub>v lincomb_list cx Vs +\n  ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy Vs\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull_list Vs", "hence \"lincomb_list ?c Vs = l \\<cdot>\\<^sub>v x + (1 - l) \\<cdot>\\<^sub>v y\""], ["proof (prove)\nusing this:\n  set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n  lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) Vs =\n  l \\<cdot>\\<^sub>v lincomb_list cx Vs +\n  ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy Vs\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) Vs =\n    l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y", "using Vs x y"], ["proof (prove)\nusing this:\n  set Vs \\<subseteq> carrier_vec n \\<Longrightarrow>\n  lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) Vs =\n  l \\<cdot>\\<^sub>v lincomb_list cx Vs +\n  ((1::'a) - l) \\<cdot>\\<^sub>v lincomb_list cy Vs\n  set Vs \\<subseteq> carrier_vec n\n  lincomb_list cx Vs = x\n  lincomb_list cy Vs = y\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) Vs =\n    l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y", "by simp"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) Vs =\n  l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull_list Vs", "moreover"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) Vs =\n  l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull_list Vs", "have \"\\<forall> i < length Vs. ?c i \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length Vs. (0::'a) \\<le> l * cx i + ((1::'a) - l) * cy i", "using cx0 cy0 l0 l1"], ["proof (prove)\nusing this:\n  \\<forall>i<length Vs. (0::'a) \\<le> cx i\n  \\<forall>i<length Vs. (0::'a) \\<le> cy i\n  (0::'a) \\<le> l\n  l \\<le> (1::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>i<length Vs. (0::'a) \\<le> l * cx i + ((1::'a) - l) * cy i", "by simp"], ["proof (state)\nthis:\n  \\<forall>i<length Vs. (0::'a) \\<le> l * cx i + ((1::'a) - l) * cy i\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull_list Vs", "moreover"], ["proof (state)\nthis:\n  \\<forall>i<length Vs. (0::'a) \\<le> l * cx i + ((1::'a) - l) * cy i\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull_list Vs", "have \"sum ?c {0..<length Vs} = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length Vs. l * cx i + ((1::'a) - l) * cy i) = (1::'a)", "proof(simp add: sum.distrib)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length Vs. l * cx i) +\n    (\\<Sum>i = 0..<length Vs. ((1::'a) - l) * cy i) =\n    (1::'a)", "have \"(\\<Sum>i = 0..<length Vs. (1 - l) * cy i) = (1 - l) * sum cy {0..<length Vs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length Vs. ((1::'a) - l) * cy i) =\n    ((1::'a) - l) * sum cy {0..<length Vs}", "using sum_distrib_left"], ["proof (prove)\nusing this:\n  ?r * sum ?f ?A = (\\<Sum>n\\<in>?A. ?r * ?f n)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length Vs. ((1::'a) - l) * cy i) =\n    ((1::'a) - l) * sum cy {0..<length Vs}", "by metis"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<length Vs. ((1::'a) - l) * cy i) =\n  ((1::'a) - l) * sum cy {0..<length Vs}\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length Vs. l * cx i) +\n    (\\<Sum>i = 0..<length Vs. ((1::'a) - l) * cy i) =\n    (1::'a)", "moreover"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<length Vs. ((1::'a) - l) * cy i) =\n  ((1::'a) - l) * sum cy {0..<length Vs}\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length Vs. l * cx i) +\n    (\\<Sum>i = 0..<length Vs. ((1::'a) - l) * cy i) =\n    (1::'a)", "have \"(\\<Sum>i = 0..<length Vs. l * cx i) = l * sum cx {0..<length Vs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length Vs. l * cx i) = l * sum cx {0..<length Vs}", "using sum_distrib_left"], ["proof (prove)\nusing this:\n  ?r * sum ?f ?A = (\\<Sum>n\\<in>?A. ?r * ?f n)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length Vs. l * cx i) = l * sum cx {0..<length Vs}", "by metis"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<length Vs. l * cx i) = l * sum cx {0..<length Vs}\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length Vs. l * cx i) +\n    (\\<Sum>i = 0..<length Vs. ((1::'a) - l) * cy i) =\n    (1::'a)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<Sum>i = 0..<length Vs. ((1::'a) - l) * cy i) =\n  ((1::'a) - l) * sum cy {0..<length Vs}\n  (\\<Sum>i = 0..<length Vs. l * cx i) = l * sum cx {0..<length Vs}", "show \"(\\<Sum>i = 0..<length Vs. l * cx i) + (\\<Sum>i = 0..<length Vs. (1 - l) * cy i) = 1\""], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<length Vs. ((1::'a) - l) * cy i) =\n  ((1::'a) - l) * sum cy {0..<length Vs}\n  (\\<Sum>i = 0..<length Vs. l * cx i) = l * sum cx {0..<length Vs}\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length Vs. l * cx i) +\n    (\\<Sum>i = 0..<length Vs. ((1::'a) - l) * cy i) =\n    (1::'a)", "using cx1 cy1"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<length Vs. ((1::'a) - l) * cy i) =\n  ((1::'a) - l) * sum cy {0..<length Vs}\n  (\\<Sum>i = 0..<length Vs. l * cx i) = l * sum cx {0..<length Vs}\n  sum cx {0..<length Vs} = (1::'a)\n  sum cy {0..<length Vs} = (1::'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length Vs. l * cx i) +\n    (\\<Sum>i = 0..<length Vs. ((1::'a) - l) * cy i) =\n    (1::'a)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<length Vs. l * cx i) +\n  (\\<Sum>i = 0..<length Vs. ((1::'a) - l) * cy i) =\n  (1::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<length Vs. l * cx i + ((1::'a) - l) * cy i) = (1::'a)\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull_list Vs", "ultimately"], ["proof (chain)\npicking this:\n  lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) Vs =\n  l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y\n  \\<forall>i<length Vs. (0::'a) \\<le> l * cx i + ((1::'a) - l) * cy i\n  (\\<Sum>i = 0..<length Vs. l * cx i + ((1::'a) - l) * cy i) = (1::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) Vs =\n  l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y\n  \\<forall>i<length Vs. (0::'a) \\<le> l * cx i + ((1::'a) - l) * cy i\n  (\\<Sum>i = 0..<length Vs. l * cx i + ((1::'a) - l) * cy i) = (1::'a)\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull_list Vs", "unfolding convex_hull_list_def convex_lincomb_list_def nonneg_lincomb_list_def"], ["proof (prove)\nusing this:\n  lincomb_list (\\<lambda>i. l * cx i + ((1::'a) - l) * cy i) Vs =\n  l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y\n  \\<forall>i<length Vs. (0::'a) \\<le> l * cx i + ((1::'a) - l) * cy i\n  (\\<Sum>i = 0..<length Vs. l * cx i + ((1::'a) - l) * cy i) = (1::'a)\n\ngoal (1 subgoal):\n 1. l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y\n    \\<in> {x. \\<exists>c.\n                 (lincomb_list c Vs = x \\<and>\n                  (\\<forall>i<length Vs. (0::'a) \\<le> c i)) \\<and>\n                 sum c {0..<length Vs} = (1::'a)}", "by auto"], ["proof (state)\nthis:\n  l \\<cdot>\\<^sub>v x + ((1::'a) - l) \\<cdot>\\<^sub>v y\n  \\<in> convex_hull_list Vs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma convex_hull_list_mono:\n  assumes \"set Ws \\<subseteq> carrier_vec n\"\n  shows \"set Vs \\<subseteq> set Ws \\<Longrightarrow> convex_hull_list Vs \\<subseteq> convex_hull_list Ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set Vs \\<subseteq> set Ws \\<Longrightarrow>\n    convex_hull_list Vs \\<subseteq> convex_hull_list Ws", "proof (standard, induction Vs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>set [] \\<subseteq> set Ws;\n        x \\<in> convex_hull_list []\\<rbrakk>\n       \\<Longrightarrow> x \\<in> convex_hull_list Ws\n 2. \\<And>a Vs x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>set Vs \\<subseteq> set Ws;\n                    x \\<in> convex_hull_list Vs\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> convex_hull_list Ws;\n        set (a # Vs) \\<subseteq> set Ws;\n        x \\<in> convex_hull_list (a # Vs)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> convex_hull_list Ws", "case Nil"], ["proof (state)\nthis:\n  set [] \\<subseteq> set Ws\n  x \\<in> convex_hull_list []\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>set [] \\<subseteq> set Ws;\n        x \\<in> convex_hull_list []\\<rbrakk>\n       \\<Longrightarrow> x \\<in> convex_hull_list Ws\n 2. \\<And>a Vs x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>set Vs \\<subseteq> set Ws;\n                    x \\<in> convex_hull_list Vs\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> convex_hull_list Ws;\n        set (a # Vs) \\<subseteq> set Ws;\n        x \\<in> convex_hull_list (a # Vs)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> convex_hull_list Ws", "from Nil(2)"], ["proof (chain)\npicking this:\n  x \\<in> convex_hull_list []", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> convex_hull_list []\n\ngoal (1 subgoal):\n 1. x \\<in> convex_hull_list Ws", "unfolding convex_hull_list_def convex_lincomb_list_def"], ["proof (prove)\nusing this:\n  x \\<in> {x. \\<exists>c.\n                 nonneg_lincomb_list c [] x \\<and>\n                 sum c {0..<length []} = (1::'a)}\n\ngoal (1 subgoal):\n 1. x \\<in> {x. \\<exists>c.\n                   nonneg_lincomb_list c Ws x \\<and>\n                   sum c {0..<length Ws} = (1::'a)}", "by auto"], ["proof (state)\nthis:\n  x \\<in> convex_hull_list Ws\n\ngoal (1 subgoal):\n 1. \\<And>a Vs x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>set Vs \\<subseteq> set Ws;\n                    x \\<in> convex_hull_list Vs\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> convex_hull_list Ws;\n        set (a # Vs) \\<subseteq> set Ws;\n        x \\<in> convex_hull_list (a # Vs)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> convex_hull_list Ws", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a Vs x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>set Vs \\<subseteq> set Ws;\n                    x \\<in> convex_hull_list Vs\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> convex_hull_list Ws;\n        set (a # Vs) \\<subseteq> set Ws;\n        x \\<in> convex_hull_list (a # Vs)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> convex_hull_list Ws", "case (Cons v Vs)"], ["proof (state)\nthis:\n  \\<lbrakk>set Vs \\<subseteq> set Ws; ?x3 \\<in> convex_hull_list Vs\\<rbrakk>\n  \\<Longrightarrow> ?x3 \\<in> convex_hull_list Ws\n  set (v # Vs) \\<subseteq> set Ws\n  x \\<in> convex_hull_list (v # Vs)\n\ngoal (1 subgoal):\n 1. \\<And>a Vs x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>set Vs \\<subseteq> set Ws;\n                    x \\<in> convex_hull_list Vs\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> convex_hull_list Ws;\n        set (a # Vs) \\<subseteq> set Ws;\n        x \\<in> convex_hull_list (a # Vs)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> convex_hull_list Ws", "have v: \"v \\<in> set Ws\" and Vs: \"set Vs \\<subseteq> set Ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> set Ws &&& set Vs \\<subseteq> set Ws", "using Cons.prems(1)"], ["proof (prove)\nusing this:\n  set (v # Vs) \\<subseteq> set Ws\n\ngoal (1 subgoal):\n 1. v \\<in> set Ws &&& set Vs \\<subseteq> set Ws", "by auto"], ["proof (state)\nthis:\n  v \\<in> set Ws\n  set Vs \\<subseteq> set Ws\n\ngoal (1 subgoal):\n 1. \\<And>a Vs x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>set Vs \\<subseteq> set Ws;\n                    x \\<in> convex_hull_list Vs\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> convex_hull_list Ws;\n        set (a # Vs) \\<subseteq> set Ws;\n        x \\<in> convex_hull_list (a # Vs)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> convex_hull_list Ws", "hence v1: \"v \\<in> convex_hull_list Ws\""], ["proof (prove)\nusing this:\n  v \\<in> set Ws\n  set Vs \\<subseteq> set Ws\n\ngoal (1 subgoal):\n 1. v \\<in> convex_hull_list Ws", "using set_in_convex_hull_list[OF assms]"], ["proof (prove)\nusing this:\n  v \\<in> set Ws\n  set Vs \\<subseteq> set Ws\n  set Ws \\<subseteq> convex_hull_list Ws\n\ngoal (1 subgoal):\n 1. v \\<in> convex_hull_list Ws", "by auto"], ["proof (state)\nthis:\n  v \\<in> convex_hull_list Ws\n\ngoal (1 subgoal):\n 1. \\<And>a Vs x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>set Vs \\<subseteq> set Ws;\n                    x \\<in> convex_hull_list Vs\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> convex_hull_list Ws;\n        set (a # Vs) \\<subseteq> set Ws;\n        x \\<in> convex_hull_list (a # Vs)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> convex_hull_list Ws", "from Cons.prems(2)"], ["proof (chain)\npicking this:\n  x \\<in> convex_hull_list (v # Vs)", "obtain c\n    where x: \"lincomb_list c (v # Vs) = x\" and c0: \"\\<forall> i < length Vs + 1. c i \\<ge> 0\"\n      and c1: \"sum c {0..<length Vs + 1} = 1\""], ["proof (prove)\nusing this:\n  x \\<in> convex_hull_list (v # Vs)\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>lincomb_list c (v # Vs) = x;\n         \\<forall>i<length Vs + 1. (0::'a) \\<le> c i;\n         sum c {0..<length Vs + 1} = (1::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding convex_hull_list_def convex_lincomb_list_def nonneg_lincomb_list_def"], ["proof (prove)\nusing this:\n  x \\<in> {x. \\<exists>c.\n                 (lincomb_list c (v # Vs) = x \\<and>\n                  (\\<forall>i<length (v # Vs). (0::'a) \\<le> c i)) \\<and>\n                 sum c {0..<length (v # Vs)} = (1::'a)}\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>lincomb_list c (v # Vs) = x;\n         \\<forall>i<length Vs + 1. (0::'a) \\<le> c i;\n         sum c {0..<length Vs + 1} = (1::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lincomb_list c (v # Vs) = x\n  \\<forall>i<length Vs + 1. (0::'a) \\<le> c i\n  sum c {0..<length Vs + 1} = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a Vs x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>set Vs \\<subseteq> set Ws;\n                    x \\<in> convex_hull_list Vs\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> convex_hull_list Ws;\n        set (a # Vs) \\<subseteq> set Ws;\n        x \\<in> convex_hull_list (a # Vs)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> convex_hull_list Ws", "have x: \"x = c 0 \\<cdot>\\<^sub>v v + lincomb_list (c \\<circ> Suc) Vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = c 0 \\<cdot>\\<^sub>v v + lincomb_list (c \\<circ> Suc) Vs", "using Vs v assms x"], ["proof (prove)\nusing this:\n  set Vs \\<subseteq> set Ws\n  v \\<in> set Ws\n  set Ws \\<subseteq> carrier_vec n\n  lincomb_list c (v # Vs) = x\n\ngoal (1 subgoal):\n 1. x = c 0 \\<cdot>\\<^sub>v v + lincomb_list (c \\<circ> Suc) Vs", "by auto"], ["proof (state)\nthis:\n  x = c 0 \\<cdot>\\<^sub>v v + lincomb_list (c \\<circ> Suc) Vs\n\ngoal (1 subgoal):\n 1. \\<And>a Vs x.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>set Vs \\<subseteq> set Ws;\n                    x \\<in> convex_hull_list Vs\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> convex_hull_list Ws;\n        set (a # Vs) \\<subseteq> set Ws;\n        x \\<in> convex_hull_list (a # Vs)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> convex_hull_list Ws", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> convex_hull_list Ws", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x \\<in> convex_hull_list Ws\n 2. \\<not> ?P \\<Longrightarrow> x \\<in> convex_hull_list Ws", "assume P: \"c 0 = 1\""], ["proof (state)\nthis:\n  c 0 = (1::'a)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x \\<in> convex_hull_list Ws\n 2. \\<not> ?P \\<Longrightarrow> x \\<in> convex_hull_list Ws", "hence \"sum (c \\<circ> Suc) {0..<length Vs} = 0\""], ["proof (prove)\nusing this:\n  c 0 = (1::'a)\n\ngoal (1 subgoal):\n 1. sum (c \\<circ> Suc) {0..<length Vs} = (0::'a)", "using sum.atLeast0_lessThan_Suc_shift c1"], ["proof (prove)\nusing this:\n  c 0 = (1::'a)\n  sum ?g {0..<Suc ?n} = ?g 0 + sum (?g \\<circ> Suc) {0..<?n}\n  sum c {0..<length Vs + 1} = (1::'a)\n\ngoal (1 subgoal):\n 1. sum (c \\<circ> Suc) {0..<length Vs} = (0::'a)", "by (metis One_nat_def R.show_r_zero add.right_neutral add_Suc_right)"], ["proof (state)\nthis:\n  sum (c \\<circ> Suc) {0..<length Vs} = (0::'a)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x \\<in> convex_hull_list Ws\n 2. \\<not> ?P \\<Longrightarrow> x \\<in> convex_hull_list Ws", "moreover"], ["proof (state)\nthis:\n  sum (c \\<circ> Suc) {0..<length Vs} = (0::'a)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x \\<in> convex_hull_list Ws\n 2. \\<not> ?P \\<Longrightarrow> x \\<in> convex_hull_list Ws", "have \"\\<And> i. i \\<in> {0..<length Vs} \\<Longrightarrow> (c \\<circ> Suc) i \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> {0..<length Vs} \\<Longrightarrow>\n       (0::'a) \\<le> (c \\<circ> Suc) i", "using c0"], ["proof (prove)\nusing this:\n  \\<forall>i<length Vs + 1. (0::'a) \\<le> c i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> {0..<length Vs} \\<Longrightarrow>\n       (0::'a) \\<le> (c \\<circ> Suc) i", "by simp"], ["proof (state)\nthis:\n  ?i3 \\<in> {0..<length Vs} \\<Longrightarrow>\n  (0::'a) \\<le> (c \\<circ> Suc) ?i3\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x \\<in> convex_hull_list Ws\n 2. \\<not> ?P \\<Longrightarrow> x \\<in> convex_hull_list Ws", "ultimately"], ["proof (chain)\npicking this:\n  sum (c \\<circ> Suc) {0..<length Vs} = (0::'a)\n  ?i3 \\<in> {0..<length Vs} \\<Longrightarrow>\n  (0::'a) \\<le> (c \\<circ> Suc) ?i3", "have \"\\<forall> i \\<in> {0..<length Vs}. (c \\<circ> Suc) i = 0\""], ["proof (prove)\nusing this:\n  sum (c \\<circ> Suc) {0..<length Vs} = (0::'a)\n  ?i3 \\<in> {0..<length Vs} \\<Longrightarrow>\n  (0::'a) \\<le> (c \\<circ> Suc) ?i3\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{0..<length Vs}. (c \\<circ> Suc) i = (0::'a)", "using sum_nonneg_eq_0_iff"], ["proof (prove)\nusing this:\n  sum (c \\<circ> Suc) {0..<length Vs} = (0::'a)\n  ?i3 \\<in> {0..<length Vs} \\<Longrightarrow>\n  (0::'a) \\<le> (c \\<circ> Suc) ?i3\n  \\<lbrakk>finite ?A;\n   \\<And>x. x \\<in> ?A \\<Longrightarrow> (0::?'a) \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> (sum ?f ?A = (0::?'a)) =\n                    (\\<forall>x\\<in>?A. ?f x = (0::?'a))\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>{0..<length Vs}. (c \\<circ> Suc) i = (0::'a)", "by blast"], ["proof (state)\nthis:\n  \\<forall>i\\<in>{0..<length Vs}. (c \\<circ> Suc) i = (0::'a)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x \\<in> convex_hull_list Ws\n 2. \\<not> ?P \\<Longrightarrow> x \\<in> convex_hull_list Ws", "hence \"\\<And> i. i < length Vs \\<Longrightarrow> (c \\<circ> Suc) i \\<cdot>\\<^sub>v Vs ! i = 0\\<^sub>v n\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>{0..<length Vs}. (c \\<circ> Suc) i = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length Vs \\<Longrightarrow>\n       (c \\<circ> Suc) i \\<cdot>\\<^sub>v Vs ! i = 0\\<^sub>v n", "using Vs assms"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>{0..<length Vs}. (c \\<circ> Suc) i = (0::'a)\n  set Vs \\<subseteq> set Ws\n  set Ws \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length Vs \\<Longrightarrow>\n       (c \\<circ> Suc) i \\<cdot>\\<^sub>v Vs ! i = 0\\<^sub>v n", "by (simp add: subset_code(1))"], ["proof (state)\nthis:\n  ?i3 < length Vs \\<Longrightarrow>\n  (c \\<circ> Suc) ?i3 \\<cdot>\\<^sub>v Vs ! ?i3 = 0\\<^sub>v n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x \\<in> convex_hull_list Ws\n 2. \\<not> ?P \\<Longrightarrow> x \\<in> convex_hull_list Ws", "hence \"lincomb_list (c \\<circ> Suc) Vs = 0\\<^sub>v n\""], ["proof (prove)\nusing this:\n  ?i3 < length Vs \\<Longrightarrow>\n  (c \\<circ> Suc) ?i3 \\<cdot>\\<^sub>v Vs ! ?i3 = 0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. lincomb_list (c \\<circ> Suc) Vs = 0\\<^sub>v n", "using lincomb_list_eq_0"], ["proof (prove)\nusing this:\n  ?i3 < length Vs \\<Longrightarrow>\n  (c \\<circ> Suc) ?i3 \\<cdot>\\<^sub>v Vs ! ?i3 = 0\\<^sub>v n\n  (\\<And>i.\n      i < length ?vs \\<Longrightarrow>\n      ?c i \\<cdot>\\<^sub>v ?vs ! i = 0\\<^sub>v n) \\<Longrightarrow>\n  lincomb_list ?c ?vs = 0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. lincomb_list (c \\<circ> Suc) Vs = 0\\<^sub>v n", "by simp"], ["proof (state)\nthis:\n  lincomb_list (c \\<circ> Suc) Vs = 0\\<^sub>v n\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x \\<in> convex_hull_list Ws\n 2. \\<not> ?P \\<Longrightarrow> x \\<in> convex_hull_list Ws", "hence \"x = v\""], ["proof (prove)\nusing this:\n  lincomb_list (c \\<circ> Suc) Vs = 0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. x = v", "using P x v assms"], ["proof (prove)\nusing this:\n  lincomb_list (c \\<circ> Suc) Vs = 0\\<^sub>v n\n  c 0 = (1::'a)\n  x = c 0 \\<cdot>\\<^sub>v v + lincomb_list (c \\<circ> Suc) Vs\n  v \\<in> set Ws\n  set Ws \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. x = v", "by auto"], ["proof (state)\nthis:\n  x = v\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> x \\<in> convex_hull_list Ws\n 2. \\<not> ?P \\<Longrightarrow> x \\<in> convex_hull_list Ws", "thus ?case"], ["proof (prove)\nusing this:\n  x = v\n\ngoal (1 subgoal):\n 1. x \\<in> convex_hull_list Ws", "using v1"], ["proof (prove)\nusing this:\n  x = v\n  v \\<in> convex_hull_list Ws\n\ngoal (1 subgoal):\n 1. x \\<in> convex_hull_list Ws", "by auto"], ["proof (state)\nthis:\n  x \\<in> convex_hull_list Ws\n\ngoal (1 subgoal):\n 1. c 0 \\<noteq> (1::'a) \\<Longrightarrow> x \\<in> convex_hull_list Ws", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c 0 \\<noteq> (1::'a) \\<Longrightarrow> x \\<in> convex_hull_list Ws", "assume P: \"c 0 \\<noteq> 1\""], ["proof (state)\nthis:\n  c 0 \\<noteq> (1::'a)\n\ngoal (1 subgoal):\n 1. c 0 \\<noteq> (1::'a) \\<Longrightarrow> x \\<in> convex_hull_list Ws", "have c1: \"c 0 + sum (c \\<circ> Suc) {0..<length Vs} = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c 0 + sum (c \\<circ> Suc) {0..<length Vs} = (1::'a)", "using sum.atLeast0_lessThan_Suc_shift[of c] c1"], ["proof (prove)\nusing this:\n  sum c {0..<Suc ?n} = c 0 + sum (c \\<circ> Suc) {0..<?n}\n  sum c {0..<length Vs + 1} = (1::'a)\n\ngoal (1 subgoal):\n 1. c 0 + sum (c \\<circ> Suc) {0..<length Vs} = (1::'a)", "by simp"], ["proof (state)\nthis:\n  c 0 + sum (c \\<circ> Suc) {0..<length Vs} = (1::'a)\n\ngoal (1 subgoal):\n 1. c 0 \\<noteq> (1::'a) \\<Longrightarrow> x \\<in> convex_hull_list Ws", "have \"sum (c \\<circ> Suc) {0..<length Vs} \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> sum (c \\<circ> Suc) {0..<length Vs}", "by (rule sum_nonneg, insert c0, simp)"], ["proof (state)\nthis:\n  (0::'a) \\<le> sum (c \\<circ> Suc) {0..<length Vs}\n\ngoal (1 subgoal):\n 1. c 0 \\<noteq> (1::'a) \\<Longrightarrow> x \\<in> convex_hull_list Ws", "hence \"c 0 < 1\""], ["proof (prove)\nusing this:\n  (0::'a) \\<le> sum (c \\<circ> Suc) {0..<length Vs}\n\ngoal (1 subgoal):\n 1. c 0 < (1::'a)", "using P c1"], ["proof (prove)\nusing this:\n  (0::'a) \\<le> sum (c \\<circ> Suc) {0..<length Vs}\n  c 0 \\<noteq> (1::'a)\n  c 0 + sum (c \\<circ> Suc) {0..<length Vs} = (1::'a)\n\ngoal (1 subgoal):\n 1. c 0 < (1::'a)", "by auto"], ["proof (state)\nthis:\n  c 0 < (1::'a)\n\ngoal (1 subgoal):\n 1. c 0 \\<noteq> (1::'a) \\<Longrightarrow> x \\<in> convex_hull_list Ws", "let ?c' = \"\\<lambda> i. 1 / (1 - c 0) * (c \\<circ> Suc) i\""], ["proof (state)\ngoal (1 subgoal):\n 1. c 0 \\<noteq> (1::'a) \\<Longrightarrow> x \\<in> convex_hull_list Ws", "have \"sum ?c' {0..<length Vs} = 1 / (1 - c 0) * sum (c \\<circ> Suc) {0..<length Vs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length Vs.\n        (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i) =\n    (1::'a) / ((1::'a) - c 0) * sum (c \\<circ> Suc) {0..<length Vs}", "using c1 P sum_distrib_left"], ["proof (prove)\nusing this:\n  c 0 + sum (c \\<circ> Suc) {0..<length Vs} = (1::'a)\n  c 0 \\<noteq> (1::'a)\n  ?r * sum ?f ?A = (\\<Sum>n\\<in>?A. ?r * ?f n)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length Vs.\n        (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i) =\n    (1::'a) / ((1::'a) - c 0) * sum (c \\<circ> Suc) {0..<length Vs}", "by metis"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<length Vs. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i) =\n  (1::'a) / ((1::'a) - c 0) * sum (c \\<circ> Suc) {0..<length Vs}\n\ngoal (1 subgoal):\n 1. c 0 \\<noteq> (1::'a) \\<Longrightarrow> x \\<in> convex_hull_list Ws", "hence \"sum ?c' {0..<length Vs} = 1\""], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<length Vs. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i) =\n  (1::'a) / ((1::'a) - c 0) * sum (c \\<circ> Suc) {0..<length Vs}\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length Vs.\n        (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i) =\n    (1::'a)", "using P c1"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<length Vs. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i) =\n  (1::'a) / ((1::'a) - c 0) * sum (c \\<circ> Suc) {0..<length Vs}\n  c 0 \\<noteq> (1::'a)\n  c 0 + sum (c \\<circ> Suc) {0..<length Vs} = (1::'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length Vs.\n        (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i) =\n    (1::'a)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<length Vs. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i) =\n  (1::'a)\n\ngoal (1 subgoal):\n 1. c 0 \\<noteq> (1::'a) \\<Longrightarrow> x \\<in> convex_hull_list Ws", "moreover"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<length Vs. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i) =\n  (1::'a)\n\ngoal (1 subgoal):\n 1. c 0 \\<noteq> (1::'a) \\<Longrightarrow> x \\<in> convex_hull_list Ws", "have \"\\<forall> i < length Vs. ?c' i \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length Vs.\n       (0::'a) \\<le> (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i", "using c0 \\<open>c 0 < 1\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>i<length Vs + 1. (0::'a) \\<le> c i\n  c 0 < (1::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>i<length Vs.\n       (0::'a) \\<le> (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i", "by simp"], ["proof (state)\nthis:\n  \\<forall>i<length Vs.\n     (0::'a) \\<le> (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i\n\ngoal (1 subgoal):\n 1. c 0 \\<noteq> (1::'a) \\<Longrightarrow> x \\<in> convex_hull_list Ws", "ultimately"], ["proof (chain)\npicking this:\n  (\\<Sum>i = 0..<length Vs. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i) =\n  (1::'a)\n  \\<forall>i<length Vs.\n     (0::'a) \\<le> (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i", "have c': \"lincomb_list ?c' Vs \\<in> convex_hull_list Ws\""], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<length Vs. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i) =\n  (1::'a)\n  \\<forall>i<length Vs.\n     (0::'a) \\<le> (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>i. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i)\n     Vs\n    \\<in> convex_hull_list Ws", "using Cons.IH[OF Vs]\n        convex_hull_list_def convex_lincomb_list_def nonneg_lincomb_list_def"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<length Vs. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i) =\n  (1::'a)\n  \\<forall>i<length Vs.\n     (0::'a) \\<le> (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i\n  ?x3 \\<in> convex_hull_list Vs \\<Longrightarrow>\n  ?x3 \\<in> convex_hull_list Ws\n  convex_hull_list ?Vs = {x. \\<exists>c. convex_lincomb_list c ?Vs x}\n  convex_lincomb_list ?c ?Vs ?b =\n  (nonneg_lincomb_list ?c ?Vs ?b \\<and> sum ?c {0..<length ?Vs} = (1::'a))\n  nonneg_lincomb_list ?c ?Vs ?b =\n  (lincomb_list ?c ?Vs = ?b \\<and>\n   (\\<forall>i<length ?Vs. (0::'a) \\<le> ?c i))\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>i. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i)\n     Vs\n    \\<in> convex_hull_list Ws", "by blast"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>i. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i)\n   Vs\n  \\<in> convex_hull_list Ws\n\ngoal (1 subgoal):\n 1. c 0 \\<noteq> (1::'a) \\<Longrightarrow> x \\<in> convex_hull_list Ws", "have \"lincomb_list ?c' Vs = 1 / (1 - c 0) \\<cdot>\\<^sub>v lincomb_list (c \\<circ> Suc) Vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>i. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i)\n     Vs =\n    (1::'a) / ((1::'a) - c 0) \\<cdot>\\<^sub>v\n    lincomb_list (c \\<circ> Suc) Vs", "by(rule lincomb_list_smult, insert Vs assms, auto)"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>i. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i)\n   Vs =\n  (1::'a) / ((1::'a) - c 0) \\<cdot>\\<^sub>v lincomb_list (c \\<circ> Suc) Vs\n\ngoal (1 subgoal):\n 1. c 0 \\<noteq> (1::'a) \\<Longrightarrow> x \\<in> convex_hull_list Ws", "hence \"(1 - c 0) \\<cdot>\\<^sub>v lincomb_list ?c' Vs = lincomb_list (c \\<circ> Suc) Vs\""], ["proof (prove)\nusing this:\n  lincomb_list (\\<lambda>i. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i)\n   Vs =\n  (1::'a) / ((1::'a) - c 0) \\<cdot>\\<^sub>v lincomb_list (c \\<circ> Suc) Vs\n\ngoal (1 subgoal):\n 1. ((1::'a) - c 0) \\<cdot>\\<^sub>v\n    lincomb_list (\\<lambda>i. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i)\n     Vs =\n    lincomb_list (c \\<circ> Suc) Vs", "using P"], ["proof (prove)\nusing this:\n  lincomb_list (\\<lambda>i. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i)\n   Vs =\n  (1::'a) / ((1::'a) - c 0) \\<cdot>\\<^sub>v lincomb_list (c \\<circ> Suc) Vs\n  c 0 \\<noteq> (1::'a)\n\ngoal (1 subgoal):\n 1. ((1::'a) - c 0) \\<cdot>\\<^sub>v\n    lincomb_list (\\<lambda>i. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i)\n     Vs =\n    lincomb_list (c \\<circ> Suc) Vs", "by auto"], ["proof (state)\nthis:\n  ((1::'a) - c 0) \\<cdot>\\<^sub>v\n  lincomb_list (\\<lambda>i. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i)\n   Vs =\n  lincomb_list (c \\<circ> Suc) Vs\n\ngoal (1 subgoal):\n 1. c 0 \\<noteq> (1::'a) \\<Longrightarrow> x \\<in> convex_hull_list Ws", "hence \"x = c 0 \\<cdot>\\<^sub>v v + (1 - c 0) \\<cdot>\\<^sub>v lincomb_list ?c' Vs\""], ["proof (prove)\nusing this:\n  ((1::'a) - c 0) \\<cdot>\\<^sub>v\n  lincomb_list (\\<lambda>i. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i)\n   Vs =\n  lincomb_list (c \\<circ> Suc) Vs\n\ngoal (1 subgoal):\n 1. x =\n    c 0 \\<cdot>\\<^sub>v v +\n    ((1::'a) - c 0) \\<cdot>\\<^sub>v\n    lincomb_list (\\<lambda>i. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i)\n     Vs", "using x"], ["proof (prove)\nusing this:\n  ((1::'a) - c 0) \\<cdot>\\<^sub>v\n  lincomb_list (\\<lambda>i. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i)\n   Vs =\n  lincomb_list (c \\<circ> Suc) Vs\n  x = c 0 \\<cdot>\\<^sub>v v + lincomb_list (c \\<circ> Suc) Vs\n\ngoal (1 subgoal):\n 1. x =\n    c 0 \\<cdot>\\<^sub>v v +\n    ((1::'a) - c 0) \\<cdot>\\<^sub>v\n    lincomb_list (\\<lambda>i. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i)\n     Vs", "by auto"], ["proof (state)\nthis:\n  x =\n  c 0 \\<cdot>\\<^sub>v v +\n  ((1::'a) - c 0) \\<cdot>\\<^sub>v\n  lincomb_list (\\<lambda>i. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i)\n   Vs\n\ngoal (1 subgoal):\n 1. c 0 \\<noteq> (1::'a) \\<Longrightarrow> x \\<in> convex_hull_list Ws", "thus \"x \\<in> convex_hull_list Ws\""], ["proof (prove)\nusing this:\n  x =\n  c 0 \\<cdot>\\<^sub>v v +\n  ((1::'a) - c 0) \\<cdot>\\<^sub>v\n  lincomb_list (\\<lambda>i. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i)\n   Vs\n\ngoal (1 subgoal):\n 1. x \\<in> convex_hull_list Ws", "using convex_hull_list_combination[OF assms v1 c'] c0 \\<open>c 0 < 1\\<close>"], ["proof (prove)\nusing this:\n  x =\n  c 0 \\<cdot>\\<^sub>v v +\n  ((1::'a) - c 0) \\<cdot>\\<^sub>v\n  lincomb_list (\\<lambda>i. (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i)\n   Vs\n  \\<lbrakk>(0::'a) \\<le> ?l; ?l \\<le> (1::'a)\\<rbrakk>\n  \\<Longrightarrow> ?l \\<cdot>\\<^sub>v v +\n                    ((1::'a) - ?l) \\<cdot>\\<^sub>v\n                    lincomb_list\n                     (\\<lambda>i.\n                         (1::'a) / ((1::'a) - c 0) * (c \\<circ> Suc) i)\n                     Vs\n                    \\<in> convex_hull_list Ws\n  \\<forall>i<length Vs + 1. (0::'a) \\<le> c i\n  c 0 < (1::'a)\n\ngoal (1 subgoal):\n 1. x \\<in> convex_hull_list Ws", "by simp"], ["proof (state)\nthis:\n  x \\<in> convex_hull_list Ws\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> convex_hull_list Ws\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma convex_hull_list_eq_set:\n  \"set Vs \\<subseteq> carrier_vec n \\<Longrightarrow> set Vs = set Ws \\<Longrightarrow> convex_hull_list Vs = convex_hull_list Ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set Vs \\<subseteq> carrier_vec n; set Vs = set Ws\\<rbrakk>\n    \\<Longrightarrow> convex_hull_list Vs = convex_hull_list Ws", "using convex_hull_list_mono"], ["proof (prove)\nusing this:\n  \\<lbrakk>set ?Ws \\<subseteq> carrier_vec n;\n   set ?Vs \\<subseteq> set ?Ws\\<rbrakk>\n  \\<Longrightarrow> convex_hull_list ?Vs \\<subseteq> convex_hull_list ?Ws\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set Vs \\<subseteq> carrier_vec n; set Vs = set Ws\\<rbrakk>\n    \\<Longrightarrow> convex_hull_list Vs = convex_hull_list Ws", "by blast"], ["", "lemma find_indices_empty: \"(find_indices x Vs = []) = (x \\<notin> set Vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (find_indices x Vs = []) = (x \\<notin> set Vs)", "proof (induction Vs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (find_indices x [] = []) = (x \\<notin> set [])\n 2. \\<And>xa xs.\n       (find_indices x xs = []) = (x \\<notin> set xs) \\<Longrightarrow>\n       (find_indices x (xs @ [xa]) = []) = (x \\<notin> set (xs @ [xa]))", "case (snoc v Vs)"], ["proof (state)\nthis:\n  (find_indices x Vs = []) = (x \\<notin> set Vs)\n\ngoal (2 subgoals):\n 1. (find_indices x [] = []) = (x \\<notin> set [])\n 2. \\<And>xa xs.\n       (find_indices x xs = []) = (x \\<notin> set xs) \\<Longrightarrow>\n       (find_indices x (xs @ [xa]) = []) = (x \\<notin> set (xs @ [xa]))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (find_indices x (Vs @ [v]) = []) = (x \\<notin> set (Vs @ [v]))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. find_indices x (Vs @ [v]) = [] \\<Longrightarrow>\n    x \\<notin> set (Vs @ [v])\n 2. x \\<notin> set (Vs @ [v]) \\<Longrightarrow>\n    find_indices x (Vs @ [v]) = []", "assume \"find_indices x (Vs @ [v]) = []\""], ["proof (state)\nthis:\n  find_indices x (Vs @ [v]) = []\n\ngoal (2 subgoals):\n 1. find_indices x (Vs @ [v]) = [] \\<Longrightarrow>\n    x \\<notin> set (Vs @ [v])\n 2. x \\<notin> set (Vs @ [v]) \\<Longrightarrow>\n    find_indices x (Vs @ [v]) = []", "hence \"x \\<noteq> v \\<and> find_indices x Vs = []\""], ["proof (prove)\nusing this:\n  find_indices x (Vs @ [v]) = []\n\ngoal (1 subgoal):\n 1. x \\<noteq> v \\<and> find_indices x Vs = []", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> v \\<and> find_indices x Vs = []\n\ngoal (2 subgoals):\n 1. find_indices x (Vs @ [v]) = [] \\<Longrightarrow>\n    x \\<notin> set (Vs @ [v])\n 2. x \\<notin> set (Vs @ [v]) \\<Longrightarrow>\n    find_indices x (Vs @ [v]) = []", "thus \"x \\<notin> set (Vs @ [v])\""], ["proof (prove)\nusing this:\n  x \\<noteq> v \\<and> find_indices x Vs = []\n\ngoal (1 subgoal):\n 1. x \\<notin> set (Vs @ [v])", "using snoc"], ["proof (prove)\nusing this:\n  x \\<noteq> v \\<and> find_indices x Vs = []\n  (find_indices x Vs = []) = (x \\<notin> set Vs)\n\ngoal (1 subgoal):\n 1. x \\<notin> set (Vs @ [v])", "by simp"], ["proof (state)\nthis:\n  x \\<notin> set (Vs @ [v])\n\ngoal (1 subgoal):\n 1. x \\<notin> set (Vs @ [v]) \\<Longrightarrow>\n    find_indices x (Vs @ [v]) = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> set (Vs @ [v]) \\<Longrightarrow>\n    find_indices x (Vs @ [v]) = []", "assume \"x \\<notin> set (Vs @ [v])\""], ["proof (state)\nthis:\n  x \\<notin> set (Vs @ [v])\n\ngoal (1 subgoal):\n 1. x \\<notin> set (Vs @ [v]) \\<Longrightarrow>\n    find_indices x (Vs @ [v]) = []", "hence \"x \\<noteq> v \\<and> find_indices x Vs = []\""], ["proof (prove)\nusing this:\n  x \\<notin> set (Vs @ [v])\n\ngoal (1 subgoal):\n 1. x \\<noteq> v \\<and> find_indices x Vs = []", "using snoc"], ["proof (prove)\nusing this:\n  x \\<notin> set (Vs @ [v])\n  (find_indices x Vs = []) = (x \\<notin> set Vs)\n\ngoal (1 subgoal):\n 1. x \\<noteq> v \\<and> find_indices x Vs = []", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> v \\<and> find_indices x Vs = []\n\ngoal (1 subgoal):\n 1. x \\<notin> set (Vs @ [v]) \\<Longrightarrow>\n    find_indices x (Vs @ [v]) = []", "thus \"find_indices x (Vs @ [v]) = []\""], ["proof (prove)\nusing this:\n  x \\<noteq> v \\<and> find_indices x Vs = []\n\ngoal (1 subgoal):\n 1. find_indices x (Vs @ [v]) = []", "by simp"], ["proof (state)\nthis:\n  find_indices x (Vs @ [v]) = []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (find_indices x (Vs @ [v]) = []) = (x \\<notin> set (Vs @ [v]))\n\ngoal (1 subgoal):\n 1. (find_indices x [] = []) = (x \\<notin> set [])", "qed simp"], ["", "lemma distinct_list_find_indices:\n  shows \"\\<lbrakk> i < length Vs; Vs ! i = x; distinct Vs \\<rbrakk> \\<Longrightarrow> find_indices x Vs = [i]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length Vs; Vs ! i = x; distinct Vs\\<rbrakk>\n    \\<Longrightarrow> find_indices x Vs = [i]", "proof (induction Vs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i < length []; [] ! i = x; distinct []\\<rbrakk>\n    \\<Longrightarrow> find_indices x [] = [i]\n 2. \\<And>xa xs.\n       \\<lbrakk>\\<lbrakk>i < length xs; xs ! i = x; distinct xs\\<rbrakk>\n                \\<Longrightarrow> find_indices x xs = [i];\n        i < length (xs @ [xa]); (xs @ [xa]) ! i = x;\n        distinct (xs @ [xa])\\<rbrakk>\n       \\<Longrightarrow> find_indices x (xs @ [xa]) = [i]", "case (snoc v Vs)"], ["proof (state)\nthis:\n  \\<lbrakk>i < length Vs; Vs ! i = x; distinct Vs\\<rbrakk>\n  \\<Longrightarrow> find_indices x Vs = [i]\n  i < length (Vs @ [v])\n  (Vs @ [v]) ! i = x\n  distinct (Vs @ [v])\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i < length []; [] ! i = x; distinct []\\<rbrakk>\n    \\<Longrightarrow> find_indices x [] = [i]\n 2. \\<And>xa xs.\n       \\<lbrakk>\\<lbrakk>i < length xs; xs ! i = x; distinct xs\\<rbrakk>\n                \\<Longrightarrow> find_indices x xs = [i];\n        i < length (xs @ [xa]); (xs @ [xa]) ! i = x;\n        distinct (xs @ [xa])\\<rbrakk>\n       \\<Longrightarrow> find_indices x (xs @ [xa]) = [i]", "have dist: \"distinct Vs\" and xVs: \"v \\<notin> set Vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct Vs &&& v \\<notin> set Vs", "using snoc.prems(3)"], ["proof (prove)\nusing this:\n  distinct (Vs @ [v])\n\ngoal (1 subgoal):\n 1. distinct Vs &&& v \\<notin> set Vs", "by(simp_all)"], ["proof (state)\nthis:\n  distinct Vs\n  v \\<notin> set Vs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i < length []; [] ! i = x; distinct []\\<rbrakk>\n    \\<Longrightarrow> find_indices x [] = [i]\n 2. \\<And>xa xs.\n       \\<lbrakk>\\<lbrakk>i < length xs; xs ! i = x; distinct xs\\<rbrakk>\n                \\<Longrightarrow> find_indices x xs = [i];\n        i < length (xs @ [xa]); (xs @ [xa]) ! i = x;\n        distinct (xs @ [xa])\\<rbrakk>\n       \\<Longrightarrow> find_indices x (xs @ [xa]) = [i]", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. find_indices x (Vs @ [v]) = [i]", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> find_indices x (Vs @ [v]) = [i]\n 2. \\<not> ?P \\<Longrightarrow> find_indices x (Vs @ [v]) = [i]", "assume i: \"i = length Vs\""], ["proof (state)\nthis:\n  i = length Vs\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> find_indices x (Vs @ [v]) = [i]\n 2. \\<not> ?P \\<Longrightarrow> find_indices x (Vs @ [v]) = [i]", "hence \"x = v\""], ["proof (prove)\nusing this:\n  i = length Vs\n\ngoal (1 subgoal):\n 1. x = v", "using snoc.prems(2)"], ["proof (prove)\nusing this:\n  i = length Vs\n  (Vs @ [v]) ! i = x\n\ngoal (1 subgoal):\n 1. x = v", "by auto"], ["proof (state)\nthis:\n  x = v\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> find_indices x (Vs @ [v]) = [i]\n 2. \\<not> ?P \\<Longrightarrow> find_indices x (Vs @ [v]) = [i]", "thus ?case"], ["proof (prove)\nusing this:\n  x = v\n\ngoal (1 subgoal):\n 1. find_indices x (Vs @ [v]) = [i]", "using xVs find_indices_empty i"], ["proof (prove)\nusing this:\n  x = v\n  v \\<notin> set Vs\n  (find_indices ?x ?Vs = []) = (?x \\<notin> set ?Vs)\n  i = length Vs\n\ngoal (1 subgoal):\n 1. find_indices x (Vs @ [v]) = [i]", "by fastforce"], ["proof (state)\nthis:\n  find_indices x (Vs @ [v]) = [i]\n\ngoal (1 subgoal):\n 1. i \\<noteq> length Vs \\<Longrightarrow> find_indices x (Vs @ [v]) = [i]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> length Vs \\<Longrightarrow> find_indices x (Vs @ [v]) = [i]", "assume \"i \\<noteq> length Vs\""], ["proof (state)\nthis:\n  i \\<noteq> length Vs\n\ngoal (1 subgoal):\n 1. i \\<noteq> length Vs \\<Longrightarrow> find_indices x (Vs @ [v]) = [i]", "hence i: \"i < length Vs\""], ["proof (prove)\nusing this:\n  i \\<noteq> length Vs\n\ngoal (1 subgoal):\n 1. i < length Vs", "using snoc.prems(1)"], ["proof (prove)\nusing this:\n  i \\<noteq> length Vs\n  i < length (Vs @ [v])\n\ngoal (1 subgoal):\n 1. i < length Vs", "by simp"], ["proof (state)\nthis:\n  i < length Vs\n\ngoal (1 subgoal):\n 1. i \\<noteq> length Vs \\<Longrightarrow> find_indices x (Vs @ [v]) = [i]", "hence Vsi: \"Vs ! i = x\""], ["proof (prove)\nusing this:\n  i < length Vs\n\ngoal (1 subgoal):\n 1. Vs ! i = x", "using snoc.prems(2) append_Cons_nth_left"], ["proof (prove)\nusing this:\n  i < length Vs\n  (Vs @ [v]) ! i = x\n  ?i < length ?xs \\<Longrightarrow> (?xs @ ?u # ?ys) ! ?i = ?xs ! ?i\n\ngoal (1 subgoal):\n 1. Vs ! i = x", "by fastforce"], ["proof (state)\nthis:\n  Vs ! i = x\n\ngoal (1 subgoal):\n 1. i \\<noteq> length Vs \\<Longrightarrow> find_indices x (Vs @ [v]) = [i]", "hence \"x \\<noteq> v\""], ["proof (prove)\nusing this:\n  Vs ! i = x\n\ngoal (1 subgoal):\n 1. x \\<noteq> v", "using snoc.prems(3) i"], ["proof (prove)\nusing this:\n  Vs ! i = x\n  distinct (Vs @ [v])\n  i < length Vs\n\ngoal (1 subgoal):\n 1. x \\<noteq> v", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> v\n\ngoal (1 subgoal):\n 1. i \\<noteq> length Vs \\<Longrightarrow> find_indices x (Vs @ [v]) = [i]", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<noteq> v\n\ngoal (1 subgoal):\n 1. find_indices x (Vs @ [v]) = [i]", "using snoc.IH[OF i Vsi dist]"], ["proof (prove)\nusing this:\n  x \\<noteq> v\n  find_indices x Vs = [i]\n\ngoal (1 subgoal):\n 1. find_indices x (Vs @ [v]) = [i]", "by simp"], ["proof (state)\nthis:\n  find_indices x (Vs @ [v]) = [i]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  find_indices x (Vs @ [v]) = [i]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length []; [] ! i = x; distinct []\\<rbrakk>\n    \\<Longrightarrow> find_indices x [] = [i]", "qed auto"], ["", "lemma finite_convex_hull_iff_convex_hull_list: assumes Vs: \"Vs \\<subseteq> carrier_vec n\"\n  and id': \"Vs = set Vsl'\"\nshows \"convex_hull Vs = convex_hull_list Vsl'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "have fin: \"finite Vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite Vs", "unfolding id'"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set Vsl')", "by auto"], ["proof (state)\nthis:\n  finite Vs\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "from finite_distinct_list fin"], ["proof (chain)\npicking this:\n  finite ?A \\<Longrightarrow> \\<exists>xs. set xs = ?A \\<and> distinct xs\n  finite Vs", "obtain Vsl\n    where id: \"Vs = set Vsl\" and dist: \"distinct Vsl\""], ["proof (prove)\nusing this:\n  finite ?A \\<Longrightarrow> \\<exists>xs. set xs = ?A \\<and> distinct xs\n  finite Vs\n\ngoal (1 subgoal):\n 1. (\\<And>Vsl.\n        \\<lbrakk>Vs = set Vsl; distinct Vsl\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Vs = set Vsl\n  distinct Vsl\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "from Vs id"], ["proof (chain)\npicking this:\n  Vs \\<subseteq> carrier_vec n\n  Vs = set Vsl", "have Vsl: \"set Vsl \\<subseteq> carrier_vec n\""], ["proof (prove)\nusing this:\n  Vs \\<subseteq> carrier_vec n\n  Vs = set Vsl\n\ngoal (1 subgoal):\n 1. set Vsl \\<subseteq> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  set Vsl \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "{"], ["proof (state)\nthis:\n  set Vsl \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "fix c :: \"nat \\<Rightarrow> 'a\""], ["proof (state)\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "have \"distinct Vsl \\<Longrightarrow>(\\<Sum>x\\<in>set Vsl. sum_list (map c (find_indices x Vsl))) =\n                          sum c {0..<length Vsl}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct Vsl \\<Longrightarrow>\n    (\\<Sum>x\\<in>set Vsl. sum_list (map c (find_indices x Vsl))) =\n    sum c {0..<length Vsl}", "proof (induction Vsl rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<in>set []. sum_list (map c (find_indices x []))) =\n    sum c {0..<length []}\n 2. \\<And>x xs.\n       \\<lbrakk>distinct xs \\<Longrightarrow>\n                (\\<Sum>x\\<in>set xs. sum_list (map c (find_indices x xs))) =\n                sum c {0..<length xs};\n        distinct (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>xa\\<in>set (xs @ [x]).\n                            sum_list (map c (find_indices xa (xs @ [x])))) =\n                         sum c {0..<length (xs @ [x])}", "case (snoc v Vsl)"], ["proof (state)\nthis:\n  distinct Vsl \\<Longrightarrow>\n  (\\<Sum>x\\<in>set Vsl. sum_list (map c (find_indices x Vsl))) =\n  sum c {0..<length Vsl}\n  distinct (Vsl @ [v])\n\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<in>set []. sum_list (map c (find_indices x []))) =\n    sum c {0..<length []}\n 2. \\<And>x xs.\n       \\<lbrakk>distinct xs \\<Longrightarrow>\n                (\\<Sum>x\\<in>set xs. sum_list (map c (find_indices x xs))) =\n                sum c {0..<length xs};\n        distinct (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>xa\\<in>set (xs @ [x]).\n                            sum_list (map c (find_indices xa (xs @ [x])))) =\n                         sum c {0..<length (xs @ [x])}", "let ?coef = \"\\<lambda> x. sum_list (map c (find_indices x (Vsl @ [v])))\""], ["proof (state)\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<in>set []. sum_list (map c (find_indices x []))) =\n    sum c {0..<length []}\n 2. \\<And>x xs.\n       \\<lbrakk>distinct xs \\<Longrightarrow>\n                (\\<Sum>x\\<in>set xs. sum_list (map c (find_indices x xs))) =\n                sum c {0..<length xs};\n        distinct (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>xa\\<in>set (xs @ [x]).\n                            sum_list (map c (find_indices xa (xs @ [x])))) =\n                         sum c {0..<length (xs @ [x])}", "let ?coef' = \"\\<lambda> x. sum_list (map c (find_indices x Vsl))\""], ["proof (state)\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<in>set []. sum_list (map c (find_indices x []))) =\n    sum c {0..<length []}\n 2. \\<And>x xs.\n       \\<lbrakk>distinct xs \\<Longrightarrow>\n                (\\<Sum>x\\<in>set xs. sum_list (map c (find_indices x xs))) =\n                sum c {0..<length xs};\n        distinct (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>xa\\<in>set (xs @ [x]).\n                            sum_list (map c (find_indices xa (xs @ [x])))) =\n                         sum c {0..<length (xs @ [x])}", "have dist: \"distinct Vsl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct Vsl", "using snoc.prems"], ["proof (prove)\nusing this:\n  distinct (Vsl @ [v])\n\ngoal (1 subgoal):\n 1. distinct Vsl", "by simp"], ["proof (state)\nthis:\n  distinct Vsl\n\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<in>set []. sum_list (map c (find_indices x []))) =\n    sum c {0..<length []}\n 2. \\<And>x xs.\n       \\<lbrakk>distinct xs \\<Longrightarrow>\n                (\\<Sum>x\\<in>set xs. sum_list (map c (find_indices x xs))) =\n                sum c {0..<length xs};\n        distinct (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>xa\\<in>set (xs @ [x]).\n                            sum_list (map c (find_indices xa (xs @ [x])))) =\n                         sum c {0..<length (xs @ [x])}", "have \"sum ?coef (set (Vsl @ [v])) = sum_list (map ?coef (Vsl @ [v]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Vsl @ [v]).\n       sum_list (map c (find_indices x (Vsl @ [v])))) =\n    (\\<Sum>x\\<leftarrow>Vsl @\n                        [v]. sum_list (map c (find_indices x (Vsl @ [v]))))", "by (rule sum.distinct_set_conv_list[OF snoc.prems, of ?coef])"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set (Vsl @ [v]).\n     sum_list (map c (find_indices x (Vsl @ [v])))) =\n  (\\<Sum>x\\<leftarrow>Vsl @\n                      [v]. sum_list (map c (find_indices x (Vsl @ [v]))))\n\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<in>set []. sum_list (map c (find_indices x []))) =\n    sum c {0..<length []}\n 2. \\<And>x xs.\n       \\<lbrakk>distinct xs \\<Longrightarrow>\n                (\\<Sum>x\\<in>set xs. sum_list (map c (find_indices x xs))) =\n                sum c {0..<length xs};\n        distinct (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>xa\\<in>set (xs @ [x]).\n                            sum_list (map c (find_indices xa (xs @ [x])))) =\n                         sum c {0..<length (xs @ [x])}", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set (Vsl @ [v]).\n     sum_list (map c (find_indices x (Vsl @ [v])))) =\n  (\\<Sum>x\\<leftarrow>Vsl @\n                      [v]. sum_list (map c (find_indices x (Vsl @ [v]))))\n\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<in>set []. sum_list (map c (find_indices x []))) =\n    sum c {0..<length []}\n 2. \\<And>x xs.\n       \\<lbrakk>distinct xs \\<Longrightarrow>\n                (\\<Sum>x\\<in>set xs. sum_list (map c (find_indices x xs))) =\n                sum c {0..<length xs};\n        distinct (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>xa\\<in>set (xs @ [x]).\n                            sum_list (map c (find_indices xa (xs @ [x])))) =\n                         sum c {0..<length (xs @ [x])}", "have \"\\<dots> = sum_list (map ?coef Vsl) + ?coef v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<leftarrow>Vsl @\n                        [v]. sum_list\n                              (map c (find_indices x (Vsl @ [v])))) =\n    (\\<Sum>x\\<leftarrow>Vsl. sum_list\n                              (map c (find_indices x (Vsl @ [v])))) +\n    sum_list (map c (find_indices v (Vsl @ [v])))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<leftarrow>Vsl @\n                      [v]. sum_list (map c (find_indices x (Vsl @ [v])))) =\n  (\\<Sum>x\\<leftarrow>Vsl. sum_list (map c (find_indices x (Vsl @ [v])))) +\n  sum_list (map c (find_indices v (Vsl @ [v])))\n\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<in>set []. sum_list (map c (find_indices x []))) =\n    sum c {0..<length []}\n 2. \\<And>x xs.\n       \\<lbrakk>distinct xs \\<Longrightarrow>\n                (\\<Sum>x\\<in>set xs. sum_list (map c (find_indices x xs))) =\n                sum c {0..<length xs};\n        distinct (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>xa\\<in>set (xs @ [x]).\n                            sum_list (map c (find_indices xa (xs @ [x])))) =\n                         sum c {0..<length (xs @ [x])}", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<leftarrow>Vsl @\n                      [v]. sum_list (map c (find_indices x (Vsl @ [v])))) =\n  (\\<Sum>x\\<leftarrow>Vsl. sum_list (map c (find_indices x (Vsl @ [v])))) +\n  sum_list (map c (find_indices v (Vsl @ [v])))\n\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<in>set []. sum_list (map c (find_indices x []))) =\n    sum c {0..<length []}\n 2. \\<And>x xs.\n       \\<lbrakk>distinct xs \\<Longrightarrow>\n                (\\<Sum>x\\<in>set xs. sum_list (map c (find_indices x xs))) =\n                sum c {0..<length xs};\n        distinct (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>xa\\<in>set (xs @ [x]).\n                            sum_list (map c (find_indices xa (xs @ [x])))) =\n                         sum c {0..<length (xs @ [x])}", "have \"sum_list (map ?coef Vsl) = sum ?coef (set Vsl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<leftarrow>Vsl. sum_list\n                              (map c (find_indices x (Vsl @ [v])))) =\n    (\\<Sum>x\\<in>set Vsl. sum_list (map c (find_indices x (Vsl @ [v]))))", "using sum.distinct_set_conv_list[OF dist, of ?coef]"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>set Vsl. sum_list (map c (find_indices x (Vsl @ [v])))) =\n  (\\<Sum>x\\<leftarrow>Vsl. sum_list (map c (find_indices x (Vsl @ [v]))))\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<leftarrow>Vsl. sum_list\n                              (map c (find_indices x (Vsl @ [v])))) =\n    (\\<Sum>x\\<in>set Vsl. sum_list (map c (find_indices x (Vsl @ [v]))))", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>x\\<leftarrow>Vsl. sum_list (map c (find_indices x (Vsl @ [v])))) =\n  (\\<Sum>x\\<in>set Vsl. sum_list (map c (find_indices x (Vsl @ [v]))))\n\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<in>set []. sum_list (map c (find_indices x []))) =\n    sum c {0..<length []}\n 2. \\<And>x xs.\n       \\<lbrakk>distinct xs \\<Longrightarrow>\n                (\\<Sum>x\\<in>set xs. sum_list (map c (find_indices x xs))) =\n                sum c {0..<length xs};\n        distinct (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>xa\\<in>set (xs @ [x]).\n                            sum_list (map c (find_indices xa (xs @ [x])))) =\n                         sum c {0..<length (xs @ [x])}", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<leftarrow>Vsl. sum_list (map c (find_indices x (Vsl @ [v])))) =\n  (\\<Sum>x\\<in>set Vsl. sum_list (map c (find_indices x (Vsl @ [v]))))\n\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<in>set []. sum_list (map c (find_indices x []))) =\n    sum c {0..<length []}\n 2. \\<And>x xs.\n       \\<lbrakk>distinct xs \\<Longrightarrow>\n                (\\<Sum>x\\<in>set xs. sum_list (map c (find_indices x xs))) =\n                sum c {0..<length xs};\n        distinct (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>xa\\<in>set (xs @ [x]).\n                            sum_list (map c (find_indices xa (xs @ [x])))) =\n                         sum c {0..<length (xs @ [x])}", "have \"\\<dots> = sum ?coef' (set Vsl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set Vsl. sum_list (map c (find_indices x (Vsl @ [v])))) =\n    (\\<Sum>x\\<in>set Vsl. sum_list (map c (find_indices x Vsl)))", "proof (intro R.finsum_restrict[of ?coef] restrict_ext, standard)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set Vsl \\<Longrightarrow>\n       sum_list (map c (find_indices x (Vsl @ [v]))) =\n       sum_list (map c (find_indices x Vsl))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set Vsl \\<Longrightarrow>\n       sum_list (map c (find_indices x (Vsl @ [v]))) =\n       sum_list (map c (find_indices x Vsl))", "assume \"x \\<in> set Vsl\""], ["proof (state)\nthis:\n  x \\<in> set Vsl\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set Vsl \\<Longrightarrow>\n       sum_list (map c (find_indices x (Vsl @ [v]))) =\n       sum_list (map c (find_indices x Vsl))", "then"], ["proof (chain)\npicking this:\n  x \\<in> set Vsl", "obtain i where i: \"i < length Vsl\" and x: \"x = Vsl ! i\""], ["proof (prove)\nusing this:\n  x \\<in> set Vsl\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length Vsl; x = Vsl ! i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using in_set_conv_nth[of x Vsl]"], ["proof (prove)\nusing this:\n  x \\<in> set Vsl\n  (x \\<in> set Vsl) = (\\<exists>i<length Vsl. Vsl ! i = x)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < length Vsl; x = Vsl ! i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  i < length Vsl\n  x = Vsl ! i\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set Vsl \\<Longrightarrow>\n       sum_list (map c (find_indices x (Vsl @ [v]))) =\n       sum_list (map c (find_indices x Vsl))", "hence \"(Vsl @ [v]) ! i = x\""], ["proof (prove)\nusing this:\n  i < length Vsl\n  x = Vsl ! i\n\ngoal (1 subgoal):\n 1. (Vsl @ [v]) ! i = x", "by (simp add: append_Cons_nth_left)"], ["proof (state)\nthis:\n  (Vsl @ [v]) ! i = x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set Vsl \\<Longrightarrow>\n       sum_list (map c (find_indices x (Vsl @ [v]))) =\n       sum_list (map c (find_indices x Vsl))", "hence \"?coef x = c i\""], ["proof (prove)\nusing this:\n  (Vsl @ [v]) ! i = x\n\ngoal (1 subgoal):\n 1. sum_list (map c (find_indices x (Vsl @ [v]))) = c i", "using distinct_list_find_indices[OF _ _ snoc.prems] i"], ["proof (prove)\nusing this:\n  (Vsl @ [v]) ! i = x\n  \\<lbrakk>?i < length (Vsl @ [v]); (Vsl @ [v]) ! ?i = ?x\\<rbrakk>\n  \\<Longrightarrow> find_indices ?x (Vsl @ [v]) = [?i]\n  i < length Vsl\n\ngoal (1 subgoal):\n 1. sum_list (map c (find_indices x (Vsl @ [v]))) = c i", "by fastforce"], ["proof (state)\nthis:\n  sum_list (map c (find_indices x (Vsl @ [v]))) = c i\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set Vsl \\<Longrightarrow>\n       sum_list (map c (find_indices x (Vsl @ [v]))) =\n       sum_list (map c (find_indices x Vsl))", "also"], ["proof (state)\nthis:\n  sum_list (map c (find_indices x (Vsl @ [v]))) = c i\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set Vsl \\<Longrightarrow>\n       sum_list (map c (find_indices x (Vsl @ [v]))) =\n       sum_list (map c (find_indices x Vsl))", "have  \"c i = ?coef' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c i = sum_list (map c (find_indices x Vsl))", "using distinct_list_find_indices[OF i _ dist] x"], ["proof (prove)\nusing this:\n  Vsl ! i = ?x \\<Longrightarrow> find_indices ?x Vsl = [i]\n  x = Vsl ! i\n\ngoal (1 subgoal):\n 1. c i = sum_list (map c (find_indices x Vsl))", "by simp"], ["proof (state)\nthis:\n  c i = sum_list (map c (find_indices x Vsl))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set Vsl \\<Longrightarrow>\n       sum_list (map c (find_indices x (Vsl @ [v]))) =\n       sum_list (map c (find_indices x Vsl))", "finally"], ["proof (chain)\npicking this:\n  sum_list (map c (find_indices x (Vsl @ [v]))) =\n  sum_list (map c (find_indices x Vsl))", "show \"?coef x = ?coef' x\""], ["proof (prove)\nusing this:\n  sum_list (map c (find_indices x (Vsl @ [v]))) =\n  sum_list (map c (find_indices x Vsl))\n\ngoal (1 subgoal):\n 1. sum_list (map c (find_indices x (Vsl @ [v]))) =\n    sum_list (map c (find_indices x Vsl))", "by auto"], ["proof (state)\nthis:\n  sum_list (map c (find_indices x (Vsl @ [v]))) =\n  sum_list (map c (find_indices x Vsl))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set Vsl. sum_list (map c (find_indices x (Vsl @ [v])))) =\n  (\\<Sum>x\\<in>set Vsl. sum_list (map c (find_indices x Vsl)))\n\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<in>set []. sum_list (map c (find_indices x []))) =\n    sum c {0..<length []}\n 2. \\<And>x xs.\n       \\<lbrakk>distinct xs \\<Longrightarrow>\n                (\\<Sum>x\\<in>set xs. sum_list (map c (find_indices x xs))) =\n                sum c {0..<length xs};\n        distinct (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>xa\\<in>set (xs @ [x]).\n                            sum_list (map c (find_indices xa (xs @ [x])))) =\n                         sum c {0..<length (xs @ [x])}", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set Vsl. sum_list (map c (find_indices x (Vsl @ [v])))) =\n  (\\<Sum>x\\<in>set Vsl. sum_list (map c (find_indices x Vsl)))\n\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<in>set []. sum_list (map c (find_indices x []))) =\n    sum c {0..<length []}\n 2. \\<And>x xs.\n       \\<lbrakk>distinct xs \\<Longrightarrow>\n                (\\<Sum>x\\<in>set xs. sum_list (map c (find_indices x xs))) =\n                sum c {0..<length xs};\n        distinct (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>xa\\<in>set (xs @ [x]).\n                            sum_list (map c (find_indices xa (xs @ [x])))) =\n                         sum c {0..<length (xs @ [x])}", "have \"\\<dots> = sum c {0..<length Vsl}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set Vsl. sum_list (map c (find_indices x Vsl))) =\n    sum c {0..<length Vsl}", "by (rule snoc.IH[OF dist])"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set Vsl. sum_list (map c (find_indices x Vsl))) =\n  sum c {0..<length Vsl}\n\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<in>set []. sum_list (map c (find_indices x []))) =\n    sum c {0..<length []}\n 2. \\<And>x xs.\n       \\<lbrakk>distinct xs \\<Longrightarrow>\n                (\\<Sum>x\\<in>set xs. sum_list (map c (find_indices x xs))) =\n                sum c {0..<length xs};\n        distinct (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>xa\\<in>set (xs @ [x]).\n                            sum_list (map c (find_indices xa (xs @ [x])))) =\n                         sum c {0..<length (xs @ [x])}", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set Vsl. sum_list (map c (find_indices x Vsl))) =\n  sum c {0..<length Vsl}\n\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<in>set []. sum_list (map c (find_indices x []))) =\n    sum c {0..<length []}\n 2. \\<And>x xs.\n       \\<lbrakk>distinct xs \\<Longrightarrow>\n                (\\<Sum>x\\<in>set xs. sum_list (map c (find_indices x xs))) =\n                sum c {0..<length xs};\n        distinct (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>xa\\<in>set (xs @ [x]).\n                            sum_list (map c (find_indices xa (xs @ [x])))) =\n                         sum c {0..<length (xs @ [x])}", "have \"?coef v = c (length Vsl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map c (find_indices v (Vsl @ [v]))) = c (length Vsl)", "using distinct_list_find_indices[OF _ _ snoc.prems, of \"length Vsl\" v]\n          nth_append_length"], ["proof (prove)\nusing this:\n  \\<lbrakk>length Vsl < length (Vsl @ [v]);\n   (Vsl @ [v]) ! length Vsl = v\\<rbrakk>\n  \\<Longrightarrow> find_indices v (Vsl @ [v]) = [length Vsl]\n  (?xs @ ?x # ?ys) ! length ?xs = ?x\n\ngoal (1 subgoal):\n 1. sum_list (map c (find_indices v (Vsl @ [v]))) = c (length Vsl)", "by simp"], ["proof (state)\nthis:\n  sum_list (map c (find_indices v (Vsl @ [v]))) = c (length Vsl)\n\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<in>set []. sum_list (map c (find_indices x []))) =\n    sum c {0..<length []}\n 2. \\<And>x xs.\n       \\<lbrakk>distinct xs \\<Longrightarrow>\n                (\\<Sum>x\\<in>set xs. sum_list (map c (find_indices x xs))) =\n                sum c {0..<length xs};\n        distinct (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>xa\\<in>set (xs @ [x]).\n                            sum_list (map c (find_indices xa (xs @ [x])))) =\n                         sum c {0..<length (xs @ [x])}", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<in>set (Vsl @ [v]).\n     sum_list (map c (find_indices x (Vsl @ [v])))) =\n  sum c {0..<length Vsl} + c (length Vsl)", "show ?case"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>set (Vsl @ [v]).\n     sum_list (map c (find_indices x (Vsl @ [v])))) =\n  sum c {0..<length Vsl} + c (length Vsl)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Vsl @ [v]).\n       sum_list (map c (find_indices x (Vsl @ [v])))) =\n    sum c {0..<length (Vsl @ [v])}", "using sum.atLeast0_lessThan_Suc"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>set (Vsl @ [v]).\n     sum_list (map c (find_indices x (Vsl @ [v])))) =\n  sum c {0..<length Vsl} + c (length Vsl)\n  sum ?g {0..<Suc ?n} = sum ?g {0..<?n} + ?g ?n\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>set (Vsl @ [v]).\n       sum_list (map c (find_indices x (Vsl @ [v])))) =\n    sum c {0..<length (Vsl @ [v])}", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>set (Vsl @ [v]).\n     sum_list (map c (find_indices x (Vsl @ [v])))) =\n  sum c {0..<length (Vsl @ [v])}\n\ngoal (1 subgoal):\n 1. distinct [] \\<Longrightarrow>\n    (\\<Sum>x\\<in>set []. sum_list (map c (find_indices x []))) =\n    sum c {0..<length []}", "qed simp"], ["proof (state)\nthis:\n  distinct Vsl \\<Longrightarrow>\n  (\\<Sum>x\\<in>set Vsl. sum_list (map c (find_indices x Vsl))) =\n  sum c {0..<length Vsl}\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "}"], ["proof (state)\nthis:\n  distinct Vsl \\<Longrightarrow>\n  (\\<Sum>x\\<in>set Vsl. sum_list (map ?c5 (find_indices x Vsl))) =\n  sum ?c5 {0..<length Vsl}\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "note sum_sumlist = this"], ["proof (state)\nthis:\n  distinct Vsl \\<Longrightarrow>\n  (\\<Sum>x\\<in>set Vsl. sum_list (map ?c5 (find_indices x Vsl))) =\n  sum ?c5 {0..<length Vsl}\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "{"], ["proof (state)\nthis:\n  distinct Vsl \\<Longrightarrow>\n  (\\<Sum>x\\<in>set Vsl. sum_list (map ?c5 (find_indices x Vsl))) =\n  sum ?c5 {0..<length Vsl}\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "assume \"b \\<in> convex_hull_list Vsl\""], ["proof (state)\nthis:\n  b \\<in> convex_hull_list Vsl\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "then"], ["proof (chain)\npicking this:\n  b \\<in> convex_hull_list Vsl", "obtain c where b: \"lincomb_list c Vsl = b\" and c: \"(\\<forall> i < length Vsl. c i \\<ge> 0)\"\n      and c1: \"sum c {0..<length Vsl} = 1\""], ["proof (prove)\nusing this:\n  b \\<in> convex_hull_list Vsl\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>lincomb_list c Vsl = b;\n         \\<forall>i<length Vsl. (0::'a) \\<le> c i;\n         sum c {0..<length Vsl} = (1::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding convex_hull_list_def convex_lincomb_list_def nonneg_lincomb_list_def"], ["proof (prove)\nusing this:\n  b \\<in> {x. \\<exists>c.\n                 (lincomb_list c Vsl = x \\<and>\n                  (\\<forall>i<length Vsl. (0::'a) \\<le> c i)) \\<and>\n                 sum c {0..<length Vsl} = (1::'a)}\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>lincomb_list c Vsl = b;\n         \\<forall>i<length Vsl. (0::'a) \\<le> c i;\n         sum c {0..<length Vsl} = (1::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lincomb_list c Vsl = b\n  \\<forall>i<length Vsl. (0::'a) \\<le> c i\n  sum c {0..<length Vsl} = (1::'a)\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "have \"convex_lincomb (mk_coeff Vsl c) Vs b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex_lincomb (mk_coeff Vsl c) Vs b", "unfolding b[symmetric] convex_lincomb_def nonneg_lincomb_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (lincomb (mk_coeff Vsl c) Vs = lincomb_list c Vsl \\<and>\n     mk_coeff Vsl c ` Vs \\<subseteq> Collect ((\\<le>) (0::'a))) \\<and>\n    sum (mk_coeff Vsl c) Vs = (1::'a)", "apply (subst lincomb_list_as_lincomb[OF Vsl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (lincomb (mk_coeff Vsl c) Vs = lincomb (mk_coeff Vsl c) (set Vsl) \\<and>\n     mk_coeff Vsl c ` Vs \\<subseteq> Collect ((\\<le>) (0::'a))) \\<and>\n    sum (mk_coeff Vsl c) Vs = (1::'a)", "by (insert c c1, auto simp: id mk_coeff_def dist sum_sumlist intro!: sum_list_nonneg)"], ["proof (state)\nthis:\n  convex_lincomb (mk_coeff Vsl c) Vs b\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "hence \"b \\<in> convex_hull Vs\""], ["proof (prove)\nusing this:\n  convex_lincomb (mk_coeff Vsl c) Vs b\n\ngoal (1 subgoal):\n 1. b \\<in> convex_hull Vs", "unfolding convex_hull_def convex_lincomb_def"], ["proof (prove)\nusing this:\n  nonneg_lincomb (mk_coeff Vsl c) Vs b \\<and>\n  sum (mk_coeff Vsl c) Vs = (1::'a)\n\ngoal (1 subgoal):\n 1. b \\<in> {x. \\<exists>Ws c.\n                   finite Ws \\<and>\n                   Ws \\<subseteq> Vs \\<and>\n                   nonneg_lincomb c Ws x \\<and> sum c Ws = (1::'a)}", "using fin"], ["proof (prove)\nusing this:\n  nonneg_lincomb (mk_coeff Vsl c) Vs b \\<and>\n  sum (mk_coeff Vsl c) Vs = (1::'a)\n  finite Vs\n\ngoal (1 subgoal):\n 1. b \\<in> {x. \\<exists>Ws c.\n                   finite Ws \\<and>\n                   Ws \\<subseteq> Vs \\<and>\n                   nonneg_lincomb c Ws x \\<and> sum c Ws = (1::'a)}", "by blast"], ["proof (state)\nthis:\n  b \\<in> convex_hull Vs\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "}"], ["proof (state)\nthis:\n  ?b5 \\<in> convex_hull_list Vsl \\<Longrightarrow> ?b5 \\<in> convex_hull Vs\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "moreover"], ["proof (state)\nthis:\n  ?b5 \\<in> convex_hull_list Vsl \\<Longrightarrow> ?b5 \\<in> convex_hull Vs\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "{"], ["proof (state)\nthis:\n  ?b5 \\<in> convex_hull_list Vsl \\<Longrightarrow> ?b5 \\<in> convex_hull Vs\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "assume \"b \\<in> convex_hull Vs\""], ["proof (state)\nthis:\n  b \\<in> convex_hull Vs\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "then"], ["proof (chain)\npicking this:\n  b \\<in> convex_hull Vs", "obtain c Ws where Ws: \"Ws \\<subseteq> Vs\" and b: \"lincomb c Ws = b\"\n      and c: \"c ` Ws \\<subseteq> {x. x \\<ge> 0}\" and c1: \"sum c Ws = 1\""], ["proof (prove)\nusing this:\n  b \\<in> convex_hull Vs\n\ngoal (1 subgoal):\n 1. (\\<And>Ws c.\n        \\<lbrakk>Ws \\<subseteq> Vs; lincomb c Ws = b;\n         c ` Ws \\<subseteq> {x. (0::'a) \\<le> x};\n         sum c Ws = (1::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding convex_hull_def convex_lincomb_def nonneg_lincomb_def"], ["proof (prove)\nusing this:\n  b \\<in> {x. \\<exists>Ws c.\n                 finite Ws \\<and>\n                 Ws \\<subseteq> Vs \\<and>\n                 (lincomb c Ws = x \\<and>\n                  c ` Ws \\<subseteq> Collect ((\\<le>) (0::'a))) \\<and>\n                 sum c Ws = (1::'a)}\n\ngoal (1 subgoal):\n 1. (\\<And>Ws c.\n        \\<lbrakk>Ws \\<subseteq> Vs; lincomb c Ws = b;\n         c ` Ws \\<subseteq> {x. (0::'a) \\<le> x};\n         sum c Ws = (1::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Ws \\<subseteq> Vs\n  lincomb c Ws = b\n  c ` Ws \\<subseteq> {x. (0::'a) \\<le> x}\n  sum c Ws = (1::'a)\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "let ?d = \"\\<lambda> x. if x \\<in> Ws then c x else 0\""], ["proof (state)\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "have \"lincomb ?d Vs = lincomb c Ws + lincomb (\\<lambda> x. 0) (Vs - Ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) Vs =\n    lincomb c Ws + lincomb (\\<lambda>x. 0::'a) (Vs - Ws)", "using lincomb_union2[OF _ _ Diff_disjoint[of Ws Vs], of c \"\\<lambda> x. 0\"]\n        fin Vs Diff_partition[OF Ws]"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (Ws \\<union> (Vs - Ws));\n   Ws \\<union> (Vs - Ws) \\<subseteq> carrier_vec n\\<rbrakk>\n  \\<Longrightarrow> lincomb c Ws + lincomb (\\<lambda>x. 0::'a) (Vs - Ws) =\n                    lincomb\n                     (\\<lambda>v. if v \\<in> Ws then c v else (0::'a))\n                     (Ws \\<union> (Vs - Ws))\n  finite Vs\n  Vs \\<subseteq> carrier_vec n\n  Ws \\<union> (Vs - Ws) = Vs\n\ngoal (1 subgoal):\n 1. lincomb (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) Vs =\n    lincomb c Ws + lincomb (\\<lambda>x. 0::'a) (Vs - Ws)", "by metis"], ["proof (state)\nthis:\n  lincomb (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) Vs =\n  lincomb c Ws + lincomb (\\<lambda>x. 0::'a) (Vs - Ws)\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "also"], ["proof (state)\nthis:\n  lincomb (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) Vs =\n  lincomb c Ws + lincomb (\\<lambda>x. 0::'a) (Vs - Ws)\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "have \"lincomb (\\<lambda> x. 0) (Vs - Ws) = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb (\\<lambda>x. 0::'a) (Vs - Ws) = 0\\<^sub>v n", "using lincomb_zero[of \"Vs - Ws\" \"\\<lambda> x. 0\"] Vs"], ["proof (prove)\nusing this:\n  \\<lbrakk>Vs - Ws \\<subseteq> carrier_vec n;\n   (\\<lambda>x. 0::'a) \\<in> Vs - Ws \\<rightarrow> {0::'a}\\<rbrakk>\n  \\<Longrightarrow> lincomb (\\<lambda>x. 0::'a) (Vs - Ws) = 0\\<^sub>v n\n  Vs \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. lincomb (\\<lambda>x. 0::'a) (Vs - Ws) = 0\\<^sub>v n", "by auto"], ["proof (state)\nthis:\n  lincomb (\\<lambda>x. 0::'a) (Vs - Ws) = 0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "finally"], ["proof (chain)\npicking this:\n  lincomb (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) Vs =\n  lincomb c Ws + 0\\<^sub>v n", "have \"lincomb ?d Vs = b\""], ["proof (prove)\nusing this:\n  lincomb (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) Vs =\n  lincomb c Ws + 0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. lincomb (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) Vs = b", "using b lincomb_closed Vs Ws"], ["proof (prove)\nusing this:\n  lincomb (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) Vs =\n  lincomb c Ws + 0\\<^sub>v n\n  lincomb c Ws = b\n  ?S \\<subseteq> carrier_vec n \\<Longrightarrow>\n  lincomb ?a ?S \\<in> carrier_vec n\n  Vs \\<subseteq> carrier_vec n\n  Ws \\<subseteq> Vs\n\ngoal (1 subgoal):\n 1. lincomb (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) Vs = b", "by auto"], ["proof (state)\nthis:\n  lincomb (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) Vs = b\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "moreover"], ["proof (state)\nthis:\n  lincomb (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) Vs = b\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "have \"?d ` Vs \\<subseteq> {t. t \\<ge> 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) ` Vs\n    \\<subseteq> {t. (0::'a) \\<le> t}", "using c"], ["proof (prove)\nusing this:\n  c ` Ws \\<subseteq> {x. (0::'a) \\<le> x}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) ` Vs\n    \\<subseteq> {t. (0::'a) \\<le> t}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) ` Vs\n  \\<subseteq> {t. (0::'a) \\<le> t}\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) ` Vs\n  \\<subseteq> {t. (0::'a) \\<le> t}\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "have \"sum ?d Vs = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>Vs. if x \\<in> Ws then c x else (0::'a)) = (1::'a)", "using  c1 R.extend_sum[OF fin Ws]"], ["proof (prove)\nusing this:\n  sum c Ws = (1::'a)\n  (\\<Sum>x\\<in>Vs. if x \\<in> Ws then ?a x else (0::'a)) = sum ?a Ws\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>Vs. if x \\<in> Ws then c x else (0::'a)) = (1::'a)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>Vs. if x \\<in> Ws then c x else (0::'a)) = (1::'a)\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "ultimately"], ["proof (chain)\npicking this:\n  lincomb (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) Vs = b\n  (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) ` Vs\n  \\<subseteq> {t. (0::'a) \\<le> t}\n  (\\<Sum>x\\<in>Vs. if x \\<in> Ws then c x else (0::'a)) = (1::'a)", "have \"\\<exists> c. convex_lincomb c Vs b\""], ["proof (prove)\nusing this:\n  lincomb (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) Vs = b\n  (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) ` Vs\n  \\<subseteq> {t. (0::'a) \\<le> t}\n  (\\<Sum>x\\<in>Vs. if x \\<in> Ws then c x else (0::'a)) = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<exists>c. convex_lincomb c Vs b", "unfolding convex_lincomb_def nonneg_lincomb_def"], ["proof (prove)\nusing this:\n  lincomb (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) Vs = b\n  (\\<lambda>x. if x \\<in> Ws then c x else (0::'a)) ` Vs\n  \\<subseteq> {t. (0::'a) \\<le> t}\n  (\\<Sum>x\\<in>Vs. if x \\<in> Ws then c x else (0::'a)) = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       (lincomb c Vs = b \\<and>\n        c ` Vs \\<subseteq> Collect ((\\<le>) (0::'a))) \\<and>\n       sum c Vs = (1::'a)", "by blast"], ["proof (state)\nthis:\n  \\<exists>c. convex_lincomb c Vs b\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "}"], ["proof (state)\nthis:\n  ?b5 \\<in> convex_hull Vs \\<Longrightarrow>\n  \\<exists>c. convex_lincomb c Vs ?b5\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "moreover"], ["proof (state)\nthis:\n  ?b5 \\<in> convex_hull Vs \\<Longrightarrow>\n  \\<exists>c. convex_lincomb c Vs ?b5\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "{"], ["proof (state)\nthis:\n  ?b5 \\<in> convex_hull Vs \\<Longrightarrow>\n  \\<exists>c. convex_lincomb c Vs ?b5\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "assume \"\\<exists> c. convex_lincomb c Vs b\""], ["proof (state)\nthis:\n  \\<exists>c. convex_lincomb c Vs b\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "then"], ["proof (chain)\npicking this:\n  \\<exists>c. convex_lincomb c Vs b", "obtain c where b: \"lincomb c Vs = b\" and c: \"c ` Vs \\<subseteq> {x. x \\<ge> 0}\"\n      and c1: \"sum c Vs = 1\""], ["proof (prove)\nusing this:\n  \\<exists>c. convex_lincomb c Vs b\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>lincomb c Vs = b; c ` Vs \\<subseteq> {x. (0::'a) \\<le> x};\n         sum c Vs = (1::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding convex_lincomb_def nonneg_lincomb_def"], ["proof (prove)\nusing this:\n  \\<exists>c.\n     (lincomb c Vs = b \\<and>\n      c ` Vs \\<subseteq> Collect ((\\<le>) (0::'a))) \\<and>\n     sum c Vs = (1::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>lincomb c Vs = b; c ` Vs \\<subseteq> {x. (0::'a) \\<le> x};\n         sum c Vs = (1::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lincomb c Vs = b\n  c ` Vs \\<subseteq> {x. (0::'a) \\<le> x}\n  sum c Vs = (1::'a)\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "from lincomb_as_lincomb_list_distinct[OF Vsl dist, of c]"], ["proof (chain)\npicking this:\n  lincomb c (set Vsl) = lincomb_list (\\<lambda>i. c (Vsl ! i)) Vsl", "have b: \"lincomb_list (\\<lambda>i. c (Vsl ! i)) Vsl = b\""], ["proof (prove)\nusing this:\n  lincomb c (set Vsl) = lincomb_list (\\<lambda>i. c (Vsl ! i)) Vsl\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>i. c (Vsl ! i)) Vsl = b", "unfolding b[symmetric] id"], ["proof (prove)\nusing this:\n  lincomb c (set Vsl) = lincomb_list (\\<lambda>i. c (Vsl ! i)) Vsl\n\ngoal (1 subgoal):\n 1. lincomb_list (\\<lambda>i. c (Vsl ! i)) Vsl = lincomb c (set Vsl)", "by simp"], ["proof (state)\nthis:\n  lincomb_list (\\<lambda>i. c (Vsl ! i)) Vsl = b\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "have \"1 = sum c (set Vsl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) = sum c (set Vsl)", "using c1 id"], ["proof (prove)\nusing this:\n  sum c Vs = (1::'a)\n  Vs = set Vsl\n\ngoal (1 subgoal):\n 1. (1::'a) = sum c (set Vsl)", "by auto"], ["proof (state)\nthis:\n  (1::'a) = sum c (set Vsl)\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "also"], ["proof (state)\nthis:\n  (1::'a) = sum c (set Vsl)\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "have \"\\<dots> = sum_list (map c Vsl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum c (set Vsl) = sum_list (map c Vsl)", "by(rule sum.distinct_set_conv_list[OF dist])"], ["proof (state)\nthis:\n  sum c (set Vsl) = sum_list (map c Vsl)\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "also"], ["proof (state)\nthis:\n  sum c (set Vsl) = sum_list (map c Vsl)\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "have \"\\<dots> = sum ((!) (map c Vsl)) {0..<length Vsl}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map c Vsl) = sum ((!) (map c Vsl)) {0..<length Vsl}", "using sum_list_sum_nth length_map"], ["proof (prove)\nusing this:\n  sum_list ?xs = sum ((!) ?xs) {0..<length ?xs}\n  length (map ?f ?xs) = length ?xs\n\ngoal (1 subgoal):\n 1. sum_list (map c Vsl) = sum ((!) (map c Vsl)) {0..<length Vsl}", "by metis"], ["proof (state)\nthis:\n  sum_list (map c Vsl) = sum ((!) (map c Vsl)) {0..<length Vsl}\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "also"], ["proof (state)\nthis:\n  sum_list (map c Vsl) = sum ((!) (map c Vsl)) {0..<length Vsl}\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "have \"\\<dots> = sum (\\<lambda> i. c (Vsl ! i)) {0..<length Vsl}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum ((!) (map c Vsl)) {0..<length Vsl} =\n    (\\<Sum>i = 0..<length Vsl. c (Vsl ! i))", "by simp"], ["proof (state)\nthis:\n  sum ((!) (map c Vsl)) {0..<length Vsl} =\n  (\\<Sum>i = 0..<length Vsl. c (Vsl ! i))\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "finally"], ["proof (chain)\npicking this:\n  (1::'a) = (\\<Sum>i = 0..<length Vsl. c (Vsl ! i))", "have sum_1: \"(\\<Sum>i = 0..<length Vsl. c (Vsl ! i)) = 1\""], ["proof (prove)\nusing this:\n  (1::'a) = (\\<Sum>i = 0..<length Vsl. c (Vsl ! i))\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<length Vsl. c (Vsl ! i)) = (1::'a)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<length Vsl. c (Vsl ! i)) = (1::'a)\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "have \"\\<exists> c. convex_lincomb_list c Vsl b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c. convex_lincomb_list c Vsl b", "unfolding convex_lincomb_list_def nonneg_lincomb_list_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c.\n       (lincomb_list c Vsl = b \\<and>\n        (\\<forall>i<length Vsl. (0::'a) \\<le> c i)) \\<and>\n       sum c {0..<length Vsl} = (1::'a)", "by (intro exI[of _ \"\\<lambda>i. c (Vsl ! i)\"] conjI b sum_1)\n        (insert c, force simp: set_conv_nth id)"], ["proof (state)\nthis:\n  \\<exists>c. convex_lincomb_list c Vsl b\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "hence \"b \\<in> convex_hull_list Vsl\""], ["proof (prove)\nusing this:\n  \\<exists>c. convex_lincomb_list c Vsl b\n\ngoal (1 subgoal):\n 1. b \\<in> convex_hull_list Vsl", "unfolding convex_hull_list_def"], ["proof (prove)\nusing this:\n  \\<exists>c. convex_lincomb_list c Vsl b\n\ngoal (1 subgoal):\n 1. b \\<in> {x. \\<exists>c. convex_lincomb_list c Vsl x}", "by auto"], ["proof (state)\nthis:\n  b \\<in> convex_hull_list Vsl\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "}"], ["proof (state)\nthis:\n  \\<exists>c. convex_lincomb c Vs ?b5 \\<Longrightarrow>\n  ?b5 \\<in> convex_hull_list Vsl\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "ultimately"], ["proof (chain)\npicking this:\n  ?b5 \\<in> convex_hull_list Vsl \\<Longrightarrow> ?b5 \\<in> convex_hull Vs\n  ?b5 \\<in> convex_hull Vs \\<Longrightarrow>\n  \\<exists>c. convex_lincomb c Vs ?b5\n  \\<exists>c. convex_lincomb c Vs ?b5 \\<Longrightarrow>\n  ?b5 \\<in> convex_hull_list Vsl", "have \"convex_hull Vs = convex_hull_list Vsl\""], ["proof (prove)\nusing this:\n  ?b5 \\<in> convex_hull_list Vsl \\<Longrightarrow> ?b5 \\<in> convex_hull Vs\n  ?b5 \\<in> convex_hull Vs \\<Longrightarrow>\n  \\<exists>c. convex_lincomb c Vs ?b5\n  \\<exists>c. convex_lincomb c Vs ?b5 \\<Longrightarrow>\n  ?b5 \\<in> convex_hull_list Vsl\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl", "by auto"], ["proof (state)\nthis:\n  convex_hull Vs = convex_hull_list Vsl\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "also"], ["proof (state)\nthis:\n  convex_hull Vs = convex_hull_list Vsl\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "have \"convex_hull_list Vsl = convex_hull_list Vsl'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex_hull_list Vsl = convex_hull_list Vsl'", "using convex_hull_list_eq_set[OF Vsl, of Vsl'] id id'"], ["proof (prove)\nusing this:\n  set Vsl = set Vsl' \\<Longrightarrow>\n  convex_hull_list Vsl = convex_hull_list Vsl'\n  Vs = set Vsl\n  Vs = set Vsl'\n\ngoal (1 subgoal):\n 1. convex_hull_list Vsl = convex_hull_list Vsl'", "by simp"], ["proof (state)\nthis:\n  convex_hull_list Vsl = convex_hull_list Vsl'\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "finally"], ["proof (chain)\npicking this:\n  convex_hull Vs = convex_hull_list Vsl'", "show ?thesis"], ["proof (prove)\nusing this:\n  convex_hull Vs = convex_hull_list Vsl'\n\ngoal (1 subgoal):\n 1. convex_hull Vs = convex_hull_list Vsl'", "by simp"], ["proof (state)\nthis:\n  convex_hull Vs = convex_hull_list Vsl'\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"convex S = (convex_hull S = S)\""], ["", "lemma convex_convex_hull: \"convex S \\<Longrightarrow> convex_hull S = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex S \\<Longrightarrow> convex_hull S = S", "unfolding convex_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. convex_hull S = S \\<Longrightarrow> convex_hull S = S", "by auto"], ["", "lemma convex_hull_convex_hull_listD: assumes A: \"A \\<subseteq> carrier_vec n\"\n  and x: \"x \\<in> convex_hull A\"\nshows \"\\<exists> as. set as \\<subseteq> A \\<and> x \\<in> convex_hull_list as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as. set as \\<subseteq> A \\<and> x \\<in> convex_hull_list as", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as. set as \\<subseteq> A \\<and> x \\<in> convex_hull_list as", "from x[unfolded convex_hull_def]"], ["proof (chain)\npicking this:\n  x \\<in> {x. \\<exists>Ws c.\n                 finite Ws \\<and>\n                 Ws \\<subseteq> A \\<and> convex_lincomb c Ws x}", "obtain X c where finX: \"finite X\" and XA: \"X \\<subseteq> A\" and \"convex_lincomb c X x\""], ["proof (prove)\nusing this:\n  x \\<in> {x. \\<exists>Ws c.\n                 finite Ws \\<and>\n                 Ws \\<subseteq> A \\<and> convex_lincomb c Ws x}\n\ngoal (1 subgoal):\n 1. (\\<And>X c.\n        \\<lbrakk>finite X; X \\<subseteq> A; convex_lincomb c X x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  finite X\n  X \\<subseteq> A\n  convex_lincomb c X x\n\ngoal (1 subgoal):\n 1. \\<exists>as. set as \\<subseteq> A \\<and> x \\<in> convex_hull_list as", "hence x: \"x \\<in> convex_hull X\""], ["proof (prove)\nusing this:\n  finite X\n  X \\<subseteq> A\n  convex_lincomb c X x\n\ngoal (1 subgoal):\n 1. x \\<in> convex_hull X", "unfolding convex_hull_def"], ["proof (prove)\nusing this:\n  finite X\n  X \\<subseteq> A\n  convex_lincomb c X x\n\ngoal (1 subgoal):\n 1. x \\<in> {x. \\<exists>Ws c.\n                   finite Ws \\<and>\n                   Ws \\<subseteq> X \\<and> convex_lincomb c Ws x}", "by auto"], ["proof (state)\nthis:\n  x \\<in> convex_hull X\n\ngoal (1 subgoal):\n 1. \\<exists>as. set as \\<subseteq> A \\<and> x \\<in> convex_hull_list as", "from finite_list[OF finX]"], ["proof (chain)\npicking this:\n  \\<exists>xs. set xs = X", "obtain xs where X: \"X = set xs\""], ["proof (prove)\nusing this:\n  \\<exists>xs. set xs = X\n\ngoal (1 subgoal):\n 1. (\\<And>xs. X = set xs \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  X = set xs\n\ngoal (1 subgoal):\n 1. \\<exists>as. set as \\<subseteq> A \\<and> x \\<in> convex_hull_list as", "from finite_convex_hull_iff_convex_hull_list[OF _ this] x XA A"], ["proof (chain)\npicking this:\n  X \\<subseteq> carrier_vec n \\<Longrightarrow>\n  convex_hull X = convex_hull_list xs\n  x \\<in> convex_hull X\n  X \\<subseteq> A\n  A \\<subseteq> carrier_vec n", "have x: \"x \\<in> convex_hull_list xs\""], ["proof (prove)\nusing this:\n  X \\<subseteq> carrier_vec n \\<Longrightarrow>\n  convex_hull X = convex_hull_list xs\n  x \\<in> convex_hull X\n  X \\<subseteq> A\n  A \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. x \\<in> convex_hull_list xs", "by auto"], ["proof (state)\nthis:\n  x \\<in> convex_hull_list xs\n\ngoal (1 subgoal):\n 1. \\<exists>as. set as \\<subseteq> A \\<and> x \\<in> convex_hull_list as", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> convex_hull_list xs\n\ngoal (1 subgoal):\n 1. \\<exists>as. set as \\<subseteq> A \\<and> x \\<in> convex_hull_list as", "using XA"], ["proof (prove)\nusing this:\n  x \\<in> convex_hull_list xs\n  X \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<exists>as. set as \\<subseteq> A \\<and> x \\<in> convex_hull_list as", "unfolding X"], ["proof (prove)\nusing this:\n  x \\<in> convex_hull_list xs\n  set xs \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<exists>as. set as \\<subseteq> A \\<and> x \\<in> convex_hull_list as", "by auto"], ["proof (state)\nthis:\n  \\<exists>as. set as \\<subseteq> A \\<and> x \\<in> convex_hull_list as\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma convex_hull_convex_sum: assumes A: \"A \\<subseteq> carrier_vec n\"\n  and x: \"x \\<in> convex_hull A\"\n  and y: \"y \\<in> convex_hull A\"\n  and a: \"0 \\<le> a\" \"a \\<le> 1\"\nshows \"a \\<cdot>\\<^sub>v x + (1 - a) \\<cdot>\\<^sub>v y \\<in> convex_hull A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull A", "from convex_hull_convex_hull_listD[OF A x]"], ["proof (chain)\npicking this:\n  \\<exists>as. set as \\<subseteq> A \\<and> x \\<in> convex_hull_list as", "obtain xs where xs: \"set xs \\<subseteq> A\"\n    and x: \"x \\<in> convex_hull_list xs\""], ["proof (prove)\nusing this:\n  \\<exists>as. set as \\<subseteq> A \\<and> x \\<in> convex_hull_list as\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        \\<lbrakk>set xs \\<subseteq> A; x \\<in> convex_hull_list xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  set xs \\<subseteq> A\n  x \\<in> convex_hull_list xs\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull A", "from convex_hull_convex_hull_listD[OF A y]"], ["proof (chain)\npicking this:\n  \\<exists>as. set as \\<subseteq> A \\<and> y \\<in> convex_hull_list as", "obtain ys where ys: \"set ys \\<subseteq> A\"\n    and y: \"y \\<in> convex_hull_list ys\""], ["proof (prove)\nusing this:\n  \\<exists>as. set as \\<subseteq> A \\<and> y \\<in> convex_hull_list as\n\ngoal (1 subgoal):\n 1. (\\<And>ys.\n        \\<lbrakk>set ys \\<subseteq> A; y \\<in> convex_hull_list ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  set ys \\<subseteq> A\n  y \\<in> convex_hull_list ys\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull A", "have fin: \"finite (set (xs @ ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set (xs @ ys))", "by auto"], ["proof (state)\nthis:\n  finite (set (xs @ ys))\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull A", "have sub: \"set (xs @ ys) \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (xs @ ys) \\<subseteq> A", "using xs ys"], ["proof (prove)\nusing this:\n  set xs \\<subseteq> A\n  set ys \\<subseteq> A\n\ngoal (1 subgoal):\n 1. set (xs @ ys) \\<subseteq> A", "by auto"], ["proof (state)\nthis:\n  set (xs @ ys) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull A", "from convex_hull_list_mono[of \"xs @ ys\" xs] x sub A"], ["proof (chain)\npicking this:\n  \\<lbrakk>set (xs @ ys) \\<subseteq> carrier_vec n;\n   set xs \\<subseteq> set (xs @ ys)\\<rbrakk>\n  \\<Longrightarrow> convex_hull_list xs\n                    \\<subseteq> convex_hull_list (xs @ ys)\n  x \\<in> convex_hull_list xs\n  set (xs @ ys) \\<subseteq> A\n  A \\<subseteq> carrier_vec n", "have x: \"x \\<in> convex_hull_list (xs @ ys)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>set (xs @ ys) \\<subseteq> carrier_vec n;\n   set xs \\<subseteq> set (xs @ ys)\\<rbrakk>\n  \\<Longrightarrow> convex_hull_list xs\n                    \\<subseteq> convex_hull_list (xs @ ys)\n  x \\<in> convex_hull_list xs\n  set (xs @ ys) \\<subseteq> A\n  A \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. x \\<in> convex_hull_list (xs @ ys)", "by auto"], ["proof (state)\nthis:\n  x \\<in> convex_hull_list (xs @ ys)\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull A", "from convex_hull_list_mono[of \"xs @ ys\" ys] y sub A"], ["proof (chain)\npicking this:\n  \\<lbrakk>set (xs @ ys) \\<subseteq> carrier_vec n;\n   set ys \\<subseteq> set (xs @ ys)\\<rbrakk>\n  \\<Longrightarrow> convex_hull_list ys\n                    \\<subseteq> convex_hull_list (xs @ ys)\n  y \\<in> convex_hull_list ys\n  set (xs @ ys) \\<subseteq> A\n  A \\<subseteq> carrier_vec n", "have y: \"y \\<in> convex_hull_list (xs @ ys)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>set (xs @ ys) \\<subseteq> carrier_vec n;\n   set ys \\<subseteq> set (xs @ ys)\\<rbrakk>\n  \\<Longrightarrow> convex_hull_list ys\n                    \\<subseteq> convex_hull_list (xs @ ys)\n  y \\<in> convex_hull_list ys\n  set (xs @ ys) \\<subseteq> A\n  A \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. y \\<in> convex_hull_list (xs @ ys)", "by auto"], ["proof (state)\nthis:\n  y \\<in> convex_hull_list (xs @ ys)\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull A", "from convex_hull_list_combination[OF _ x y a]"], ["proof (chain)\npicking this:\n  set (xs @ ys) \\<subseteq> carrier_vec n \\<Longrightarrow>\n  a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n  \\<in> convex_hull_list (xs @ ys)", "have \"a \\<cdot>\\<^sub>v x + (1 - a) \\<cdot>\\<^sub>v y \\<in> convex_hull_list (xs @ ys)\""], ["proof (prove)\nusing this:\n  set (xs @ ys) \\<subseteq> carrier_vec n \\<Longrightarrow>\n  a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n  \\<in> convex_hull_list (xs @ ys)\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull_list (xs @ ys)", "using sub A"], ["proof (prove)\nusing this:\n  set (xs @ ys) \\<subseteq> carrier_vec n \\<Longrightarrow>\n  a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n  \\<in> convex_hull_list (xs @ ys)\n  set (xs @ ys) \\<subseteq> A\n  A \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull_list (xs @ ys)", "by auto"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n  \\<in> convex_hull_list (xs @ ys)\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull A", "from finite_convex_hull_iff_convex_hull_list[of _ \"xs @ ys\"] this sub A"], ["proof (chain)\npicking this:\n  \\<lbrakk>?Vs \\<subseteq> carrier_vec n; ?Vs = set (xs @ ys)\\<rbrakk>\n  \\<Longrightarrow> convex_hull ?Vs = convex_hull_list (xs @ ys)\n  a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n  \\<in> convex_hull_list (xs @ ys)\n  set (xs @ ys) \\<subseteq> A\n  A \\<subseteq> carrier_vec n", "have \"a \\<cdot>\\<^sub>v x + (1 - a) \\<cdot>\\<^sub>v y \\<in> convex_hull (set (xs @ ys))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?Vs \\<subseteq> carrier_vec n; ?Vs = set (xs @ ys)\\<rbrakk>\n  \\<Longrightarrow> convex_hull ?Vs = convex_hull_list (xs @ ys)\n  a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n  \\<in> convex_hull_list (xs @ ys)\n  set (xs @ ys) \\<subseteq> A\n  A \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull (set (xs @ ys))", "by auto"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n  \\<in> convex_hull (set (xs @ ys))\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull A", "with convex_hull_mono[OF sub]"], ["proof (chain)\npicking this:\n  convex_hull (set (xs @ ys)) \\<subseteq> convex_hull A\n  a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n  \\<in> convex_hull (set (xs @ ys))", "show \"a \\<cdot>\\<^sub>v x + (1 - a) \\<cdot>\\<^sub>v y \\<in> convex_hull A\""], ["proof (prove)\nusing this:\n  convex_hull (set (xs @ ys)) \\<subseteq> convex_hull A\n  a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n  \\<in> convex_hull (set (xs @ ys))\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y\n    \\<in> convex_hull A", "by auto"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>v x + ((1::'a) - a) \\<cdot>\\<^sub>v y \\<in> convex_hull A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma convexI: assumes S: \"S \\<subseteq> carrier_vec n\"\n  and step: \"\\<And> a x y. x \\<in> S \\<Longrightarrow> y \\<in> S \\<Longrightarrow> 0 \\<le> a \\<Longrightarrow> a \\<le> 1 \\<Longrightarrow> a \\<cdot>\\<^sub>v x + (1 - a) \\<cdot>\\<^sub>v y \\<in> S\"\nshows \"convex S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex S", "unfolding convex_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. convex_hull S = S", "proof (standard, standard)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> convex_hull S \\<Longrightarrow> x \\<in> S\n 2. S \\<subseteq> convex_hull S", "fix z"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> convex_hull S \\<Longrightarrow> x \\<in> S\n 2. S \\<subseteq> convex_hull S", "assume \"z \\<in> convex_hull S\""], ["proof (state)\nthis:\n  z \\<in> convex_hull S\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> convex_hull S \\<Longrightarrow> x \\<in> S\n 2. S \\<subseteq> convex_hull S", "from this[unfolded convex_hull_def]"], ["proof (chain)\npicking this:\n  z \\<in> {x. \\<exists>Ws c.\n                 finite Ws \\<and>\n                 Ws \\<subseteq> S \\<and> convex_lincomb c Ws x}", "obtain W c where \"finite W\" and WS: \"W \\<subseteq> S\"\n    and \"convex_lincomb c W z\""], ["proof (prove)\nusing this:\n  z \\<in> {x. \\<exists>Ws c.\n                 finite Ws \\<and>\n                 Ws \\<subseteq> S \\<and> convex_lincomb c Ws x}\n\ngoal (1 subgoal):\n 1. (\\<And>W c.\n        \\<lbrakk>finite W; W \\<subseteq> S; convex_lincomb c W z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  finite W\n  W \\<subseteq> S\n  convex_lincomb c W z\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> convex_hull S \\<Longrightarrow> x \\<in> S\n 2. S \\<subseteq> convex_hull S", "then"], ["proof (chain)\npicking this:\n  finite W\n  W \\<subseteq> S\n  convex_lincomb c W z", "show \"z \\<in> S\""], ["proof (prove)\nusing this:\n  finite W\n  W \\<subseteq> S\n  convex_lincomb c W z\n\ngoal (1 subgoal):\n 1. z \\<in> S", "proof (induct W arbitrary: c z)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c z.\n       \\<lbrakk>{} \\<subseteq> S; convex_lincomb c {} z\\<rbrakk>\n       \\<Longrightarrow> z \\<in> S\n 2. \\<And>x F c z.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>c z.\n           \\<lbrakk>F \\<subseteq> S; convex_lincomb c F z\\<rbrakk>\n           \\<Longrightarrow> z \\<in> S;\n        insert x F \\<subseteq> S; convex_lincomb c (insert x F) z\\<rbrakk>\n       \\<Longrightarrow> z \\<in> S", "case empty"], ["proof (state)\nthis:\n  {} \\<subseteq> S\n  convex_lincomb c {} z\n\ngoal (2 subgoals):\n 1. \\<And>c z.\n       \\<lbrakk>{} \\<subseteq> S; convex_lincomb c {} z\\<rbrakk>\n       \\<Longrightarrow> z \\<in> S\n 2. \\<And>x F c z.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>c z.\n           \\<lbrakk>F \\<subseteq> S; convex_lincomb c F z\\<rbrakk>\n           \\<Longrightarrow> z \\<in> S;\n        insert x F \\<subseteq> S; convex_lincomb c (insert x F) z\\<rbrakk>\n       \\<Longrightarrow> z \\<in> S", "thus ?case"], ["proof (prove)\nusing this:\n  {} \\<subseteq> S\n  convex_lincomb c {} z\n\ngoal (1 subgoal):\n 1. z \\<in> S", "unfolding convex_lincomb_def"], ["proof (prove)\nusing this:\n  {} \\<subseteq> S\n  nonneg_lincomb c {} z \\<and> sum c {} = (1::'a)\n\ngoal (1 subgoal):\n 1. z \\<in> S", "by auto"], ["proof (state)\nthis:\n  z \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>x F c z.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>c z.\n           \\<lbrakk>F \\<subseteq> S; convex_lincomb c F z\\<rbrakk>\n           \\<Longrightarrow> z \\<in> S;\n        insert x F \\<subseteq> S; convex_lincomb c (insert x F) z\\<rbrakk>\n       \\<Longrightarrow> z \\<in> S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F c z.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>c z.\n           \\<lbrakk>F \\<subseteq> S; convex_lincomb c F z\\<rbrakk>\n           \\<Longrightarrow> z \\<in> S;\n        insert x F \\<subseteq> S; convex_lincomb c (insert x F) z\\<rbrakk>\n       \\<Longrightarrow> z \\<in> S", "case (insert w W c z)"], ["proof (state)\nthis:\n  finite W\n  w \\<notin> W\n  \\<lbrakk>W \\<subseteq> S; convex_lincomb ?c3 W ?z3\\<rbrakk>\n  \\<Longrightarrow> ?z3 \\<in> S\n  insert w W \\<subseteq> S\n  convex_lincomb c (insert w W) z\n\ngoal (1 subgoal):\n 1. \\<And>x F c z.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>c z.\n           \\<lbrakk>F \\<subseteq> S; convex_lincomb c F z\\<rbrakk>\n           \\<Longrightarrow> z \\<in> S;\n        insert x F \\<subseteq> S; convex_lincomb c (insert x F) z\\<rbrakk>\n       \\<Longrightarrow> z \\<in> S", "have \"convex_lincomb c (insert w W) z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex_lincomb c (insert w W) z", "by fact"], ["proof (state)\nthis:\n  convex_lincomb c (insert w W) z\n\ngoal (1 subgoal):\n 1. \\<And>x F c z.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>c z.\n           \\<lbrakk>F \\<subseteq> S; convex_lincomb c F z\\<rbrakk>\n           \\<Longrightarrow> z \\<in> S;\n        insert x F \\<subseteq> S; convex_lincomb c (insert x F) z\\<rbrakk>\n       \\<Longrightarrow> z \\<in> S", "hence zl: \"z = lincomb c (insert w W)\" and nonneg: \"\\<And> w. w \\<in> W \\<Longrightarrow> 0 \\<le> c w\"\n      and cw: \"c w \\<ge> 0\"\n      and sum: \"sum c (insert w W) = 1\""], ["proof (prove)\nusing this:\n  convex_lincomb c (insert w W) z\n\ngoal (1 subgoal):\n 1. (z = lincomb c (insert w W) &&&\n     (\\<And>w. w \\<in> W \\<Longrightarrow> (0::'a) \\<le> c w)) &&&\n    (0::'a) \\<le> c w &&& sum c (insert w W) = (1::'a)", "unfolding convex_lincomb_def nonneg_lincomb_def"], ["proof (prove)\nusing this:\n  (lincomb c (insert w W) = z \\<and>\n   c ` insert w W \\<subseteq> Collect ((\\<le>) (0::'a))) \\<and>\n  sum c (insert w W) = (1::'a)\n\ngoal (1 subgoal):\n 1. (z = lincomb c (insert w W) &&&\n     (\\<And>w. w \\<in> W \\<Longrightarrow> (0::'a) \\<le> c w)) &&&\n    (0::'a) \\<le> c w &&& sum c (insert w W) = (1::'a)", "by auto"], ["proof (state)\nthis:\n  z = lincomb c (insert w W)\n  ?w3 \\<in> W \\<Longrightarrow> (0::'a) \\<le> c ?w3\n  (0::'a) \\<le> c w\n  sum c (insert w W) = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x F c z.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>c z.\n           \\<lbrakk>F \\<subseteq> S; convex_lincomb c F z\\<rbrakk>\n           \\<Longrightarrow> z \\<in> S;\n        insert x F \\<subseteq> S; convex_lincomb c (insert x F) z\\<rbrakk>\n       \\<Longrightarrow> z \\<in> S", "have zl: \"z = c w \\<cdot>\\<^sub>v w + lincomb c W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z = c w \\<cdot>\\<^sub>v w + lincomb c W", "unfolding zl"], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb c (insert w W) = c w \\<cdot>\\<^sub>v w + lincomb c W", "by (rule lincomb_insert2, insert insert S, auto)"], ["proof (state)\nthis:\n  z = c w \\<cdot>\\<^sub>v w + lincomb c W\n\ngoal (1 subgoal):\n 1. \\<And>x F c z.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>c z.\n           \\<lbrakk>F \\<subseteq> S; convex_lincomb c F z\\<rbrakk>\n           \\<Longrightarrow> z \\<in> S;\n        insert x F \\<subseteq> S; convex_lincomb c (insert x F) z\\<rbrakk>\n       \\<Longrightarrow> z \\<in> S", "have sum: \"c w + sum c W = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c w + sum c W = (1::'a)", "unfolding sum[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. c w + sum c W = sum c (insert w W)", "by (subst sum.insert, insert insert, auto)"], ["proof (state)\nthis:\n  c w + sum c W = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x F c z.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>c z.\n           \\<lbrakk>F \\<subseteq> S; convex_lincomb c F z\\<rbrakk>\n           \\<Longrightarrow> z \\<in> S;\n        insert x F \\<subseteq> S; convex_lincomb c (insert x F) z\\<rbrakk>\n       \\<Longrightarrow> z \\<in> S", "have W: \"W \\<subseteq> carrier_vec n\" and w: \"w \\<in> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. W \\<subseteq> carrier_vec n &&& w \\<in> carrier_vec n", "using S insert"], ["proof (prove)\nusing this:\n  S \\<subseteq> carrier_vec n\n  finite W\n  w \\<notin> W\n  \\<lbrakk>W \\<subseteq> S; convex_lincomb ?c3 W ?z3\\<rbrakk>\n  \\<Longrightarrow> ?z3 \\<in> S\n  insert w W \\<subseteq> S\n  convex_lincomb c (insert w W) z\n\ngoal (1 subgoal):\n 1. W \\<subseteq> carrier_vec n &&& w \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  W \\<subseteq> carrier_vec n\n  w \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>x F c z.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>c z.\n           \\<lbrakk>F \\<subseteq> S; convex_lincomb c F z\\<rbrakk>\n           \\<Longrightarrow> z \\<in> S;\n        insert x F \\<subseteq> S; convex_lincomb c (insert x F) z\\<rbrakk>\n       \\<Longrightarrow> z \\<in> S", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<in> S", "proof (cases \"sum c W = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. sum c W = (0::'a) \\<Longrightarrow> z \\<in> S\n 2. sum c W \\<noteq> (0::'a) \\<Longrightarrow> z \\<in> S", "case True"], ["proof (state)\nthis:\n  sum c W = (0::'a)\n\ngoal (2 subgoals):\n 1. sum c W = (0::'a) \\<Longrightarrow> z \\<in> S\n 2. sum c W \\<noteq> (0::'a) \\<Longrightarrow> z \\<in> S", "with nonneg"], ["proof (chain)\npicking this:\n  ?w3 \\<in> W \\<Longrightarrow> (0::'a) \\<le> c ?w3\n  sum c W = (0::'a)", "have c0: \"\\<And> w. w \\<in> W \\<Longrightarrow> c w = 0\""], ["proof (prove)\nusing this:\n  ?w3 \\<in> W \\<Longrightarrow> (0::'a) \\<le> c ?w3\n  sum c W = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>w. w \\<in> W \\<Longrightarrow> c w = (0::'a)", "using insert(1) sum_nonneg_eq_0_iff"], ["proof (prove)\nusing this:\n  ?w3 \\<in> W \\<Longrightarrow> (0::'a) \\<le> c ?w3\n  sum c W = (0::'a)\n  finite W\n  \\<lbrakk>finite ?A;\n   \\<And>x. x \\<in> ?A \\<Longrightarrow> (0::?'a) \\<le> ?f x\\<rbrakk>\n  \\<Longrightarrow> (sum ?f ?A = (0::?'a)) =\n                    (\\<forall>x\\<in>?A. ?f x = (0::?'a))\n\ngoal (1 subgoal):\n 1. \\<And>w. w \\<in> W \\<Longrightarrow> c w = (0::'a)", "by auto"], ["proof (state)\nthis:\n  ?w3 \\<in> W \\<Longrightarrow> c ?w3 = (0::'a)\n\ngoal (2 subgoals):\n 1. sum c W = (0::'a) \\<Longrightarrow> z \\<in> S\n 2. sum c W \\<noteq> (0::'a) \\<Longrightarrow> z \\<in> S", "with sum"], ["proof (chain)\npicking this:\n  c w + sum c W = (1::'a)\n  ?w3 \\<in> W \\<Longrightarrow> c ?w3 = (0::'a)", "have cw: \"c w = 1\""], ["proof (prove)\nusing this:\n  c w + sum c W = (1::'a)\n  ?w3 \\<in> W \\<Longrightarrow> c ?w3 = (0::'a)\n\ngoal (1 subgoal):\n 1. c w = (1::'a)", "by auto"], ["proof (state)\nthis:\n  c w = (1::'a)\n\ngoal (2 subgoals):\n 1. sum c W = (0::'a) \\<Longrightarrow> z \\<in> S\n 2. sum c W \\<noteq> (0::'a) \\<Longrightarrow> z \\<in> S", "have lin0: \"lincomb c W = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb c W = 0\\<^sub>v n", "by (intro lincomb_zero W, insert c0, auto)"], ["proof (state)\nthis:\n  lincomb c W = 0\\<^sub>v n\n\ngoal (2 subgoals):\n 1. sum c W = (0::'a) \\<Longrightarrow> z \\<in> S\n 2. sum c W \\<noteq> (0::'a) \\<Longrightarrow> z \\<in> S", "have \"z = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z = w", "unfolding zl cw lin0"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<cdot>\\<^sub>v w + 0\\<^sub>v n = w", "using w"], ["proof (prove)\nusing this:\n  w \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. (1::'a) \\<cdot>\\<^sub>v w + 0\\<^sub>v n = w", "by simp"], ["proof (state)\nthis:\n  z = w\n\ngoal (2 subgoals):\n 1. sum c W = (0::'a) \\<Longrightarrow> z \\<in> S\n 2. sum c W \\<noteq> (0::'a) \\<Longrightarrow> z \\<in> S", "with insert(4)"], ["proof (chain)\npicking this:\n  insert w W \\<subseteq> S\n  z = w", "show ?thesis"], ["proof (prove)\nusing this:\n  insert w W \\<subseteq> S\n  z = w\n\ngoal (1 subgoal):\n 1. z \\<in> S", "by simp"], ["proof (state)\nthis:\n  z \\<in> S\n\ngoal (1 subgoal):\n 1. sum c W \\<noteq> (0::'a) \\<Longrightarrow> z \\<in> S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sum c W \\<noteq> (0::'a) \\<Longrightarrow> z \\<in> S", "case False"], ["proof (state)\nthis:\n  sum c W \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. sum c W \\<noteq> (0::'a) \\<Longrightarrow> z \\<in> S", "have \"sum c W \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> sum c W", "using nonneg"], ["proof (prove)\nusing this:\n  ?w3 \\<in> W \\<Longrightarrow> (0::'a) \\<le> c ?w3\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> sum c W", "by (metis sum_nonneg)"], ["proof (state)\nthis:\n  (0::'a) \\<le> sum c W\n\ngoal (1 subgoal):\n 1. sum c W \\<noteq> (0::'a) \\<Longrightarrow> z \\<in> S", "with False"], ["proof (chain)\npicking this:\n  sum c W \\<noteq> (0::'a)\n  (0::'a) \\<le> sum c W", "have pos: \"sum c W > 0\""], ["proof (prove)\nusing this:\n  sum c W \\<noteq> (0::'a)\n  (0::'a) \\<le> sum c W\n\ngoal (1 subgoal):\n 1. (0::'a) < sum c W", "by auto"], ["proof (state)\nthis:\n  (0::'a) < sum c W\n\ngoal (1 subgoal):\n 1. sum c W \\<noteq> (0::'a) \\<Longrightarrow> z \\<in> S", "define b where \"b = (\\<lambda> w. inverse (sum c W) * c w)\""], ["proof (state)\nthis:\n  b = (\\<lambda>w. inverse (sum c W) * c w)\n\ngoal (1 subgoal):\n 1. sum c W \\<noteq> (0::'a) \\<Longrightarrow> z \\<in> S", "have \"convex_lincomb b W (lincomb b W)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex_lincomb b W (lincomb b W)", "unfolding convex_lincomb_def nonneg_lincomb_def b_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (lincomb (\\<lambda>w. inverse (sum c W) * c w) W =\n     lincomb (\\<lambda>w. inverse (sum c W) * c w) W \\<and>\n     (\\<lambda>w. inverse (sum c W) * c w) ` W\n     \\<subseteq> Collect ((\\<le>) (0::'a))) \\<and>\n    (\\<Sum>w\\<in>W. inverse (sum c W) * c w) = (1::'a)", "proof (intro conjI refl)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>w. inverse (sum c W) * c w) ` W\n    \\<subseteq> Collect ((\\<le>) (0::'a))\n 2. (\\<Sum>w\\<in>W. inverse (sum c W) * c w) = (1::'a)", "show \"(\\<lambda>w. inverse (sum c W) * c w) ` W \\<subseteq> Collect ((\\<le>) 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>w. inverse (sum c W) * c w) ` W\n    \\<subseteq> Collect ((\\<le>) (0::'a))", "using nonneg pos"], ["proof (prove)\nusing this:\n  ?w3 \\<in> W \\<Longrightarrow> (0::'a) \\<le> c ?w3\n  (0::'a) < sum c W\n\ngoal (1 subgoal):\n 1. (\\<lambda>w. inverse (sum c W) * c w) ` W\n    \\<subseteq> Collect ((\\<le>) (0::'a))", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>w. inverse (sum c W) * c w) ` W\n  \\<subseteq> Collect ((\\<le>) (0::'a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>w\\<in>W. inverse (sum c W) * c w) = (1::'a)", "show \"(\\<Sum>w\\<in>W. inverse (sum c W) * c w) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>w\\<in>W. inverse (sum c W) * c w) = (1::'a)", "unfolding sum_distrib_left[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse (sum c W) * sum c W = (1::'a)", "using False"], ["proof (prove)\nusing this:\n  sum c W \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. inverse (sum c W) * sum c W = (1::'a)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>w\\<in>W. inverse (sum c W) * c w) = (1::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  convex_lincomb b W (lincomb b W)\n\ngoal (1 subgoal):\n 1. sum c W \\<noteq> (0::'a) \\<Longrightarrow> z \\<in> S", "from insert(3)[OF _ this] insert"], ["proof (chain)\npicking this:\n  W \\<subseteq> S \\<Longrightarrow> lincomb b W \\<in> S\n  finite W\n  w \\<notin> W\n  \\<lbrakk>W \\<subseteq> S; convex_lincomb ?c3 W ?z3\\<rbrakk>\n  \\<Longrightarrow> ?z3 \\<in> S\n  insert w W \\<subseteq> S\n  convex_lincomb c (insert w W) z", "have IH: \"lincomb b W \\<in> S\""], ["proof (prove)\nusing this:\n  W \\<subseteq> S \\<Longrightarrow> lincomb b W \\<in> S\n  finite W\n  w \\<notin> W\n  \\<lbrakk>W \\<subseteq> S; convex_lincomb ?c3 W ?z3\\<rbrakk>\n  \\<Longrightarrow> ?z3 \\<in> S\n  insert w W \\<subseteq> S\n  convex_lincomb c (insert w W) z\n\ngoal (1 subgoal):\n 1. lincomb b W \\<in> S", "by auto"], ["proof (state)\nthis:\n  lincomb b W \\<in> S\n\ngoal (1 subgoal):\n 1. sum c W \\<noteq> (0::'a) \\<Longrightarrow> z \\<in> S", "have lin: \"lincomb c W = sum c W \\<cdot>\\<^sub>v lincomb b W\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb c W = sum c W \\<cdot>\\<^sub>v lincomb b W", "unfolding b_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb c W =\n    sum c W \\<cdot>\\<^sub>v lincomb (\\<lambda>w. inverse (sum c W) * c w) W", "by (subst lincomb_smult[symmetric, OF W], rule lincomb_cong[OF _ W], insert False, auto)"], ["proof (state)\nthis:\n  lincomb c W = sum c W \\<cdot>\\<^sub>v lincomb b W\n\ngoal (1 subgoal):\n 1. sum c W \\<noteq> (0::'a) \\<Longrightarrow> z \\<in> S", "from sum cw pos"], ["proof (chain)\npicking this:\n  c w + sum c W = (1::'a)\n  (0::'a) \\<le> c w\n  (0::'a) < sum c W", "have sum: \"sum c W = 1 - c w\" and cw1: \"c w \\<le> 1\""], ["proof (prove)\nusing this:\n  c w + sum c W = (1::'a)\n  (0::'a) \\<le> c w\n  (0::'a) < sum c W\n\ngoal (1 subgoal):\n 1. sum c W = (1::'a) - c w &&& c w \\<le> (1::'a)", "by auto"], ["proof (state)\nthis:\n  sum c W = (1::'a) - c w\n  c w \\<le> (1::'a)\n\ngoal (1 subgoal):\n 1. sum c W \\<noteq> (0::'a) \\<Longrightarrow> z \\<in> S", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<in> S", "unfolding zl lin"], ["proof (prove)\ngoal (1 subgoal):\n 1. c w \\<cdot>\\<^sub>v w + sum c W \\<cdot>\\<^sub>v lincomb b W \\<in> S", "unfolding sum"], ["proof (prove)\ngoal (1 subgoal):\n 1. c w \\<cdot>\\<^sub>v w + ((1::'a) - c w) \\<cdot>\\<^sub>v lincomb b W\n    \\<in> S", "by (rule step[OF _ IH cw cw1], insert insert, auto)"], ["proof (state)\nthis:\n  z \\<in> S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  z \\<in> S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  z \\<in> S\n\ngoal (1 subgoal):\n 1. S \\<subseteq> convex_hull S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. S \\<subseteq> convex_hull S", "show \"S \\<subseteq> convex_hull S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> convex_hull S", "using S"], ["proof (prove)\nusing this:\n  S \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. S \\<subseteq> convex_hull S", "by (rule set_in_convex_hull)"], ["proof (state)\nthis:\n  S \\<subseteq> convex_hull S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma convex_hulls_are_convex: assumes \"A \\<subseteq> carrier_vec n\"\n  shows \"convex (convex_hull A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex (convex_hull A)", "by (intro convexI convex_hull_convex_sum convex_hull_carrier assms)"], ["", "lemma convex_hull_sum: assumes A: \"A \\<subseteq> carrier_vec n\" and B: \"B \\<subseteq> carrier_vec n\"\n  shows \"convex_hull (A + B) = convex_hull A + convex_hull B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex_hull (A + B) = convex_hull A + convex_hull B", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. convex_hull (A + B) \\<subseteq> convex_hull A + convex_hull B\n 2. convex_hull A + convex_hull B \\<subseteq> convex_hull (A + B)", "note cA = convex_hull_carrier[OF A]"], ["proof (state)\nthis:\n  convex_hull A \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. convex_hull (A + B) \\<subseteq> convex_hull A + convex_hull B\n 2. convex_hull A + convex_hull B \\<subseteq> convex_hull (A + B)", "note cB = convex_hull_carrier[OF B]"], ["proof (state)\nthis:\n  convex_hull B \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. convex_hull (A + B) \\<subseteq> convex_hull A + convex_hull B\n 2. convex_hull A + convex_hull B \\<subseteq> convex_hull (A + B)", "have \"convex (convex_hull A + convex_hull B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex (convex_hull A + convex_hull B)", "proof (intro convexI sum_carrier_vec convex_hull_carrier A B)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x y.\n       \\<lbrakk>x \\<in> convex_hull A + convex_hull B;\n        y \\<in> convex_hull A + convex_hull B; (0::'a) \\<le> a;\n        a \\<le> (1::'a)\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>v x +\n                         ((1::'a) - a) \\<cdot>\\<^sub>v y\n                         \\<in> convex_hull A + convex_hull B", "fix a :: 'a and x1 x2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x y.\n       \\<lbrakk>x \\<in> convex_hull A + convex_hull B;\n        y \\<in> convex_hull A + convex_hull B; (0::'a) \\<le> a;\n        a \\<le> (1::'a)\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>v x +\n                         ((1::'a) - a) \\<cdot>\\<^sub>v y\n                         \\<in> convex_hull A + convex_hull B", "assume \"x1 \\<in> convex_hull A + convex_hull B\" \"x2 \\<in> convex_hull A + convex_hull B\""], ["proof (state)\nthis:\n  x1 \\<in> convex_hull A + convex_hull B\n  x2 \\<in> convex_hull A + convex_hull B\n\ngoal (1 subgoal):\n 1. \\<And>a x y.\n       \\<lbrakk>x \\<in> convex_hull A + convex_hull B;\n        y \\<in> convex_hull A + convex_hull B; (0::'a) \\<le> a;\n        a \\<le> (1::'a)\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>v x +\n                         ((1::'a) - a) \\<cdot>\\<^sub>v y\n                         \\<in> convex_hull A + convex_hull B", "then"], ["proof (chain)\npicking this:\n  x1 \\<in> convex_hull A + convex_hull B\n  x2 \\<in> convex_hull A + convex_hull B", "obtain y1 y2 z1 z2 where\n      x12: \"x1 = y1 + z1\" \"x2 = y2 + z2\" and\n      y12: \"y1 \\<in> convex_hull A\" \"y2 \\<in> convex_hull A\" and\n      z12: \"z1 \\<in> convex_hull B\" \"z2 \\<in> convex_hull B\""], ["proof (prove)\nusing this:\n  x1 \\<in> convex_hull A + convex_hull B\n  x2 \\<in> convex_hull A + convex_hull B\n\ngoal (1 subgoal):\n 1. (\\<And>y1 z1 y2 z2.\n        \\<lbrakk>x1 = y1 + z1; x2 = y2 + z2; y1 \\<in> convex_hull A;\n         y2 \\<in> convex_hull A; z1 \\<in> convex_hull B;\n         z2 \\<in> convex_hull B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding set_plus_def"], ["proof (prove)\nusing this:\n  x1 \\<in> {c. \\<exists>a\\<in>convex_hull A.\n                  \\<exists>b\\<in>convex_hull B. c = a + b}\n  x2 \\<in> {c. \\<exists>a\\<in>convex_hull A.\n                  \\<exists>b\\<in>convex_hull B. c = a + b}\n\ngoal (1 subgoal):\n 1. (\\<And>y1 z1 y2 z2.\n        \\<lbrakk>x1 = y1 + z1; x2 = y2 + z2; y1 \\<in> convex_hull A;\n         y2 \\<in> convex_hull A; z1 \\<in> convex_hull B;\n         z2 \\<in> convex_hull B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x1 = y1 + z1\n  x2 = y2 + z2\n  y1 \\<in> convex_hull A\n  y2 \\<in> convex_hull A\n  z1 \\<in> convex_hull B\n  z2 \\<in> convex_hull B\n\ngoal (1 subgoal):\n 1. \\<And>a x y.\n       \\<lbrakk>x \\<in> convex_hull A + convex_hull B;\n        y \\<in> convex_hull A + convex_hull B; (0::'a) \\<le> a;\n        a \\<le> (1::'a)\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>v x +\n                         ((1::'a) - a) \\<cdot>\\<^sub>v y\n                         \\<in> convex_hull A + convex_hull B", "from y12 z12 cA cB"], ["proof (chain)\npicking this:\n  y1 \\<in> convex_hull A\n  y2 \\<in> convex_hull A\n  z1 \\<in> convex_hull B\n  z2 \\<in> convex_hull B\n  convex_hull A \\<subseteq> carrier_vec n\n  convex_hull B \\<subseteq> carrier_vec n", "have carr:\n      \"y1 \\<in> carrier_vec n\" \"y2 \\<in> carrier_vec n\"\n      \"z1 \\<in> carrier_vec n\" \"z2 \\<in> carrier_vec n\""], ["proof (prove)\nusing this:\n  y1 \\<in> convex_hull A\n  y2 \\<in> convex_hull A\n  z1 \\<in> convex_hull B\n  z2 \\<in> convex_hull B\n  convex_hull A \\<subseteq> carrier_vec n\n  convex_hull B \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. (y1 \\<in> carrier_vec n &&& y2 \\<in> carrier_vec n) &&&\n    z1 \\<in> carrier_vec n &&& z2 \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  y1 \\<in> carrier_vec n\n  y2 \\<in> carrier_vec n\n  z1 \\<in> carrier_vec n\n  z2 \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>a x y.\n       \\<lbrakk>x \\<in> convex_hull A + convex_hull B;\n        y \\<in> convex_hull A + convex_hull B; (0::'a) \\<le> a;\n        a \\<le> (1::'a)\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>v x +\n                         ((1::'a) - a) \\<cdot>\\<^sub>v y\n                         \\<in> convex_hull A + convex_hull B", "assume a: \"0 \\<le> a\" \"a \\<le> 1\""], ["proof (state)\nthis:\n  (0::'a) \\<le> a\n  a \\<le> (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a x y.\n       \\<lbrakk>x \\<in> convex_hull A + convex_hull B;\n        y \\<in> convex_hull A + convex_hull B; (0::'a) \\<le> a;\n        a \\<le> (1::'a)\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>v x +\n                         ((1::'a) - a) \\<cdot>\\<^sub>v y\n                         \\<in> convex_hull A + convex_hull B", "have A: \"a \\<cdot>\\<^sub>v y1 + (1 - a) \\<cdot>\\<^sub>v y2 \\<in> convex_hull A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v y1 + ((1::'a) - a) \\<cdot>\\<^sub>v y2\n    \\<in> convex_hull A", "using y12 a A"], ["proof (prove)\nusing this:\n  y1 \\<in> convex_hull A\n  y2 \\<in> convex_hull A\n  (0::'a) \\<le> a\n  a \\<le> (1::'a)\n  A \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v y1 + ((1::'a) - a) \\<cdot>\\<^sub>v y2\n    \\<in> convex_hull A", "by (metis convex_hull_convex_sum)"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>v y1 + ((1::'a) - a) \\<cdot>\\<^sub>v y2\n  \\<in> convex_hull A\n\ngoal (1 subgoal):\n 1. \\<And>a x y.\n       \\<lbrakk>x \\<in> convex_hull A + convex_hull B;\n        y \\<in> convex_hull A + convex_hull B; (0::'a) \\<le> a;\n        a \\<le> (1::'a)\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>v x +\n                         ((1::'a) - a) \\<cdot>\\<^sub>v y\n                         \\<in> convex_hull A + convex_hull B", "have B: \"a \\<cdot>\\<^sub>v z1 + (1 - a) \\<cdot>\\<^sub>v z2 \\<in> convex_hull B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v z1 + ((1::'a) - a) \\<cdot>\\<^sub>v z2\n    \\<in> convex_hull B", "using z12 a B"], ["proof (prove)\nusing this:\n  z1 \\<in> convex_hull B\n  z2 \\<in> convex_hull B\n  (0::'a) \\<le> a\n  a \\<le> (1::'a)\n  B \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v z1 + ((1::'a) - a) \\<cdot>\\<^sub>v z2\n    \\<in> convex_hull B", "by (metis convex_hull_convex_sum)"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>v z1 + ((1::'a) - a) \\<cdot>\\<^sub>v z2\n  \\<in> convex_hull B\n\ngoal (1 subgoal):\n 1. \\<And>a x y.\n       \\<lbrakk>x \\<in> convex_hull A + convex_hull B;\n        y \\<in> convex_hull A + convex_hull B; (0::'a) \\<le> a;\n        a \\<le> (1::'a)\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>v x +\n                         ((1::'a) - a) \\<cdot>\\<^sub>v y\n                         \\<in> convex_hull A + convex_hull B", "have \"a \\<cdot>\\<^sub>v x1 + (1 - a) \\<cdot>\\<^sub>v x2 = (a \\<cdot>\\<^sub>v y1 + a \\<cdot>\\<^sub>v z1) + ((1 - a) \\<cdot>\\<^sub>v y2 + (1 - a) \\<cdot>\\<^sub>v z2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v x1 + ((1::'a) - a) \\<cdot>\\<^sub>v x2 =\n    a \\<cdot>\\<^sub>v y1 + a \\<cdot>\\<^sub>v z1 +\n    (((1::'a) - a) \\<cdot>\\<^sub>v y2 + ((1::'a) - a) \\<cdot>\\<^sub>v z2)", "unfolding x12"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v (y1 + z1) + ((1::'a) - a) \\<cdot>\\<^sub>v (y2 + z2) =\n    a \\<cdot>\\<^sub>v y1 + a \\<cdot>\\<^sub>v z1 +\n    (((1::'a) - a) \\<cdot>\\<^sub>v y2 + ((1::'a) - a) \\<cdot>\\<^sub>v z2)", "using carr"], ["proof (prove)\nusing this:\n  y1 \\<in> carrier_vec n\n  y2 \\<in> carrier_vec n\n  z1 \\<in> carrier_vec n\n  z2 \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v (y1 + z1) + ((1::'a) - a) \\<cdot>\\<^sub>v (y2 + z2) =\n    a \\<cdot>\\<^sub>v y1 + a \\<cdot>\\<^sub>v z1 +\n    (((1::'a) - a) \\<cdot>\\<^sub>v y2 + ((1::'a) - a) \\<cdot>\\<^sub>v z2)", "by (auto simp: smult_add_distrib_vec)"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>v x1 + ((1::'a) - a) \\<cdot>\\<^sub>v x2 =\n  a \\<cdot>\\<^sub>v y1 + a \\<cdot>\\<^sub>v z1 +\n  (((1::'a) - a) \\<cdot>\\<^sub>v y2 + ((1::'a) - a) \\<cdot>\\<^sub>v z2)\n\ngoal (1 subgoal):\n 1. \\<And>a x y.\n       \\<lbrakk>x \\<in> convex_hull A + convex_hull B;\n        y \\<in> convex_hull A + convex_hull B; (0::'a) \\<le> a;\n        a \\<le> (1::'a)\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>v x +\n                         ((1::'a) - a) \\<cdot>\\<^sub>v y\n                         \\<in> convex_hull A + convex_hull B", "also"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>v x1 + ((1::'a) - a) \\<cdot>\\<^sub>v x2 =\n  a \\<cdot>\\<^sub>v y1 + a \\<cdot>\\<^sub>v z1 +\n  (((1::'a) - a) \\<cdot>\\<^sub>v y2 + ((1::'a) - a) \\<cdot>\\<^sub>v z2)\n\ngoal (1 subgoal):\n 1. \\<And>a x y.\n       \\<lbrakk>x \\<in> convex_hull A + convex_hull B;\n        y \\<in> convex_hull A + convex_hull B; (0::'a) \\<le> a;\n        a \\<le> (1::'a)\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>v x +\n                         ((1::'a) - a) \\<cdot>\\<^sub>v y\n                         \\<in> convex_hull A + convex_hull B", "have \"\\<dots> = (a \\<cdot>\\<^sub>v y1 + (1 - a) \\<cdot>\\<^sub>v y2) + (a \\<cdot>\\<^sub>v z1 + (1 - a) \\<cdot>\\<^sub>v z2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v y1 + a \\<cdot>\\<^sub>v z1 +\n    (((1::'a) - a) \\<cdot>\\<^sub>v y2 + ((1::'a) - a) \\<cdot>\\<^sub>v z2) =\n    a \\<cdot>\\<^sub>v y1 + ((1::'a) - a) \\<cdot>\\<^sub>v y2 +\n    (a \\<cdot>\\<^sub>v z1 + ((1::'a) - a) \\<cdot>\\<^sub>v z2)", "using carr"], ["proof (prove)\nusing this:\n  y1 \\<in> carrier_vec n\n  y2 \\<in> carrier_vec n\n  z1 \\<in> carrier_vec n\n  z2 \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v y1 + a \\<cdot>\\<^sub>v z1 +\n    (((1::'a) - a) \\<cdot>\\<^sub>v y2 + ((1::'a) - a) \\<cdot>\\<^sub>v z2) =\n    a \\<cdot>\\<^sub>v y1 + ((1::'a) - a) \\<cdot>\\<^sub>v y2 +\n    (a \\<cdot>\\<^sub>v z1 + ((1::'a) - a) \\<cdot>\\<^sub>v z2)", "by (intro eq_vecI, auto)"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>v y1 + a \\<cdot>\\<^sub>v z1 +\n  (((1::'a) - a) \\<cdot>\\<^sub>v y2 + ((1::'a) - a) \\<cdot>\\<^sub>v z2) =\n  a \\<cdot>\\<^sub>v y1 + ((1::'a) - a) \\<cdot>\\<^sub>v y2 +\n  (a \\<cdot>\\<^sub>v z1 + ((1::'a) - a) \\<cdot>\\<^sub>v z2)\n\ngoal (1 subgoal):\n 1. \\<And>a x y.\n       \\<lbrakk>x \\<in> convex_hull A + convex_hull B;\n        y \\<in> convex_hull A + convex_hull B; (0::'a) \\<le> a;\n        a \\<le> (1::'a)\\<rbrakk>\n       \\<Longrightarrow> a \\<cdot>\\<^sub>v x +\n                         ((1::'a) - a) \\<cdot>\\<^sub>v y\n                         \\<in> convex_hull A + convex_hull B", "finally"], ["proof (chain)\npicking this:\n  a \\<cdot>\\<^sub>v x1 + ((1::'a) - a) \\<cdot>\\<^sub>v x2 =\n  a \\<cdot>\\<^sub>v y1 + ((1::'a) - a) \\<cdot>\\<^sub>v y2 +\n  (a \\<cdot>\\<^sub>v z1 + ((1::'a) - a) \\<cdot>\\<^sub>v z2)", "show \"a \\<cdot>\\<^sub>v x1 + (1 - a) \\<cdot>\\<^sub>v x2 \\<in> convex_hull A + convex_hull B\""], ["proof (prove)\nusing this:\n  a \\<cdot>\\<^sub>v x1 + ((1::'a) - a) \\<cdot>\\<^sub>v x2 =\n  a \\<cdot>\\<^sub>v y1 + ((1::'a) - a) \\<cdot>\\<^sub>v y2 +\n  (a \\<cdot>\\<^sub>v z1 + ((1::'a) - a) \\<cdot>\\<^sub>v z2)\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v x1 + ((1::'a) - a) \\<cdot>\\<^sub>v x2\n    \\<in> convex_hull A + convex_hull B", "using A B"], ["proof (prove)\nusing this:\n  a \\<cdot>\\<^sub>v x1 + ((1::'a) - a) \\<cdot>\\<^sub>v x2 =\n  a \\<cdot>\\<^sub>v y1 + ((1::'a) - a) \\<cdot>\\<^sub>v y2 +\n  (a \\<cdot>\\<^sub>v z1 + ((1::'a) - a) \\<cdot>\\<^sub>v z2)\n  a \\<cdot>\\<^sub>v y1 + ((1::'a) - a) \\<cdot>\\<^sub>v y2\n  \\<in> convex_hull A\n  a \\<cdot>\\<^sub>v z1 + ((1::'a) - a) \\<cdot>\\<^sub>v z2\n  \\<in> convex_hull B\n\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v x1 + ((1::'a) - a) \\<cdot>\\<^sub>v x2\n    \\<in> convex_hull A + convex_hull B", "by auto"], ["proof (state)\nthis:\n  a \\<cdot>\\<^sub>v x1 + ((1::'a) - a) \\<cdot>\\<^sub>v x2\n  \\<in> convex_hull A + convex_hull B\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  convex (convex_hull A + convex_hull B)\n\ngoal (2 subgoals):\n 1. convex_hull (A + B) \\<subseteq> convex_hull A + convex_hull B\n 2. convex_hull A + convex_hull B \\<subseteq> convex_hull (A + B)", "from convex_convex_hull[OF this]"], ["proof (chain)\npicking this:\n  convex_hull (convex_hull A + convex_hull B) =\n  convex_hull A + convex_hull B", "have id: \"convex_hull (convex_hull A + convex_hull B) = convex_hull A + convex_hull B\""], ["proof (prove)\nusing this:\n  convex_hull (convex_hull A + convex_hull B) =\n  convex_hull A + convex_hull B\n\ngoal (1 subgoal):\n 1. convex_hull (convex_hull A + convex_hull B) =\n    convex_hull A + convex_hull B", "."], ["proof (state)\nthis:\n  convex_hull (convex_hull A + convex_hull B) =\n  convex_hull A + convex_hull B\n\ngoal (2 subgoals):\n 1. convex_hull (A + B) \\<subseteq> convex_hull A + convex_hull B\n 2. convex_hull A + convex_hull B \\<subseteq> convex_hull (A + B)", "show \"convex_hull (A + B) \\<subseteq> convex_hull A + convex_hull B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex_hull (A + B) \\<subseteq> convex_hull A + convex_hull B", "by (subst id[symmetric], rule convex_hull_mono[OF set_plus_mono2]; intro set_in_convex_hull A B)"], ["proof (state)\nthis:\n  convex_hull (A + B) \\<subseteq> convex_hull A + convex_hull B\n\ngoal (1 subgoal):\n 1. convex_hull A + convex_hull B \\<subseteq> convex_hull (A + B)", "show \"convex_hull A + convex_hull B \\<subseteq> convex_hull (A + B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex_hull A + convex_hull B \\<subseteq> convex_hull (A + B)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "assume \"x \\<in> convex_hull A + convex_hull B\""], ["proof (state)\nthis:\n  x \\<in> convex_hull A + convex_hull B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "then"], ["proof (chain)\npicking this:\n  x \\<in> convex_hull A + convex_hull B", "obtain y z where x: \"x = y + z\" and y: \"y \\<in> convex_hull A\" and z: \"z \\<in> convex_hull B\""], ["proof (prove)\nusing this:\n  x \\<in> convex_hull A + convex_hull B\n\ngoal (1 subgoal):\n 1. (\\<And>y z.\n        \\<lbrakk>x = y + z; y \\<in> convex_hull A;\n         z \\<in> convex_hull B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: set_plus_def)"], ["proof (state)\nthis:\n  x = y + z\n  y \\<in> convex_hull A\n  z \\<in> convex_hull B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "from convex_hull_convex_hull_listD[OF A y]"], ["proof (chain)\npicking this:\n  \\<exists>as. set as \\<subseteq> A \\<and> y \\<in> convex_hull_list as", "obtain ys where ysA: \"set ys \\<subseteq> A\" and\n      y: \"y \\<in> convex_hull_list ys\""], ["proof (prove)\nusing this:\n  \\<exists>as. set as \\<subseteq> A \\<and> y \\<in> convex_hull_list as\n\ngoal (1 subgoal):\n 1. (\\<And>ys.\n        \\<lbrakk>set ys \\<subseteq> A; y \\<in> convex_hull_list ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  set ys \\<subseteq> A\n  y \\<in> convex_hull_list ys\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "from convex_hull_convex_hull_listD[OF B z]"], ["proof (chain)\npicking this:\n  \\<exists>as. set as \\<subseteq> B \\<and> z \\<in> convex_hull_list as", "obtain zs where zsB: \"set zs \\<subseteq> B\" and\n      z: \"z \\<in> convex_hull_list zs\""], ["proof (prove)\nusing this:\n  \\<exists>as. set as \\<subseteq> B \\<and> z \\<in> convex_hull_list as\n\ngoal (1 subgoal):\n 1. (\\<And>zs.\n        \\<lbrakk>set zs \\<subseteq> B; z \\<in> convex_hull_list zs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  set zs \\<subseteq> B\n  z \\<in> convex_hull_list zs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "from y[unfolded convex_hull_list_def convex_lincomb_list_def nonneg_lincomb_list_def]"], ["proof (chain)\npicking this:\n  y \\<in> {x. \\<exists>c.\n                 (lincomb_list c ys = x \\<and>\n                  (\\<forall>i<length ys. (0::'a) \\<le> c i)) \\<and>\n                 sum c {0..<length ys} = (1::'a)}", "obtain c where yid: \"y = lincomb_list c ys\"\n      and conv_c: \"(\\<forall>i<length ys. 0 \\<le> c i) \\<and> sum c {0..<length ys} = 1\""], ["proof (prove)\nusing this:\n  y \\<in> {x. \\<exists>c.\n                 (lincomb_list c ys = x \\<and>\n                  (\\<forall>i<length ys. (0::'a) \\<le> c i)) \\<and>\n                 sum c {0..<length ys} = (1::'a)}\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>y = lincomb_list c ys;\n         (\\<forall>i<length ys. (0::'a) \\<le> c i) \\<and>\n         sum c {0..<length ys} = (1::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y = lincomb_list c ys\n  (\\<forall>i<length ys. (0::'a) \\<le> c i) \\<and>\n  sum c {0..<length ys} = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "from z[unfolded convex_hull_list_def convex_lincomb_list_def nonneg_lincomb_list_def]"], ["proof (chain)\npicking this:\n  z \\<in> {x. \\<exists>c.\n                 (lincomb_list c zs = x \\<and>\n                  (\\<forall>i<length zs. (0::'a) \\<le> c i)) \\<and>\n                 sum c {0..<length zs} = (1::'a)}", "obtain d where zid: \"z = lincomb_list d zs\"\n      and conv_d: \"(\\<forall>i<length zs. 0 \\<le> d i) \\<and> sum d {0..<length zs} = 1\""], ["proof (prove)\nusing this:\n  z \\<in> {x. \\<exists>c.\n                 (lincomb_list c zs = x \\<and>\n                  (\\<forall>i<length zs. (0::'a) \\<le> c i)) \\<and>\n                 sum c {0..<length zs} = (1::'a)}\n\ngoal (1 subgoal):\n 1. (\\<And>d.\n        \\<lbrakk>z = lincomb_list d zs;\n         (\\<forall>i<length zs. (0::'a) \\<le> d i) \\<and>\n         sum d {0..<length zs} = (1::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  z = lincomb_list d zs\n  (\\<forall>i<length zs. (0::'a) \\<le> d i) \\<and>\n  sum d {0..<length zs} = (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "from ysA A"], ["proof (chain)\npicking this:\n  set ys \\<subseteq> A\n  A \\<subseteq> carrier_vec n", "have ys: \"set ys \\<subseteq> carrier_vec n\""], ["proof (prove)\nusing this:\n  set ys \\<subseteq> A\n  A \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. set ys \\<subseteq> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  set ys \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "from zsB B"], ["proof (chain)\npicking this:\n  set zs \\<subseteq> B\n  B \\<subseteq> carrier_vec n", "have zs: \"set zs \\<subseteq> carrier_vec n\""], ["proof (prove)\nusing this:\n  set zs \\<subseteq> B\n  B \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. set zs \\<subseteq> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  set zs \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "have [intro, simp]: \"lincomb_list x ys \\<in> carrier_vec n\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list x ys \\<in> carrier_vec n", "using lincomb_list_carrier[OF ys]"], ["proof (prove)\nusing this:\n  lincomb_list ?c ys \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. lincomb_list x ys \\<in> carrier_vec n", "."], ["proof (state)\nthis:\n  lincomb_list ?x3 ys \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "have [intro, simp]: \"lincomb_list x zs \\<in> carrier_vec n\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list x zs \\<in> carrier_vec n", "using lincomb_list_carrier[OF zs]"], ["proof (prove)\nusing this:\n  lincomb_list ?c zs \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. lincomb_list x zs \\<in> carrier_vec n", "."], ["proof (state)\nthis:\n  lincomb_list ?x3 zs \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "have dim[simp]: \"dim_vec (lincomb_list d zs) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (lincomb_list d zs) = n", "by auto"], ["proof (state)\nthis:\n  dim_vec (lincomb_list d zs) = n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "from yid"], ["proof (chain)\npicking this:\n  y = lincomb_list c ys", "have y: \"y \\<in> carrier_vec n\""], ["proof (prove)\nusing this:\n  y = lincomb_list c ys\n\ngoal (1 subgoal):\n 1. y \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  y \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "from zid"], ["proof (chain)\npicking this:\n  z = lincomb_list d zs", "have z: \"z \\<in> carrier_vec n\""], ["proof (prove)\nusing this:\n  z = lincomb_list d zs\n\ngoal (1 subgoal):\n 1. z \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  z \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "{"], ["proof (state)\nthis:\n  z \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "assume \"x \\<in> set (map ((+) y) zs)\""], ["proof (state)\nthis:\n  x \\<in> set (map ((+) y) zs)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (map ((+) y) zs)", "obtain z where \"x = y + z\" and \"z \\<in> set zs\""], ["proof (prove)\nusing this:\n  x \\<in> set (map ((+) y) zs)\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>x = y + z; z \\<in> set zs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x = y + z\n  z \\<in> set zs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "then"], ["proof (chain)\npicking this:\n  x = y + z\n  z \\<in> set zs", "obtain j where j: \"j < length zs\" and x: \"x = y + zs ! j\""], ["proof (prove)\nusing this:\n  x = y + z\n  z \\<in> set zs\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < length zs; x = y + zs ! j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding set_conv_nth"], ["proof (prove)\nusing this:\n  x = y + z\n  z \\<in> {zs ! i |i. i < length zs}\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < length zs; x = y + zs ! j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  j < length zs\n  x = y + zs ! j\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "hence mem: \"zs ! j \\<in> set zs\""], ["proof (prove)\nusing this:\n  j < length zs\n  x = y + zs ! j\n\ngoal (1 subgoal):\n 1. zs ! j \\<in> set zs", "by auto"], ["proof (state)\nthis:\n  zs ! j \\<in> set zs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "hence zsj: \"zs ! j \\<in> carrier_vec n\""], ["proof (prove)\nusing this:\n  zs ! j \\<in> set zs\n\ngoal (1 subgoal):\n 1. zs ! j \\<in> carrier_vec n", "using zs"], ["proof (prove)\nusing this:\n  zs ! j \\<in> set zs\n  set zs \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. zs ! j \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  zs ! j \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "let ?list = \"(map (\\<lambda> y. y + zs ! j) ys)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "let ?set = \"set ?list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "have set: \"?set \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>y. y + zs ! j) ys) \\<subseteq> carrier_vec n", "using ys A zsj"], ["proof (prove)\nusing this:\n  set ys \\<subseteq> carrier_vec n\n  A \\<subseteq> carrier_vec n\n  zs ! j \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. set (map (\\<lambda>y. y + zs ! j) ys) \\<subseteq> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  set (map (\\<lambda>y. y + zs ! j) ys) \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "have lin_map: \"lincomb_list c ?list \\<in> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list c (map (\\<lambda>y. y + zs ! j) ys) \\<in> carrier_vec n", "by (intro lincomb_list_carrier[OF set])"], ["proof (state)\nthis:\n  lincomb_list c (map (\\<lambda>y. y + zs ! j) ys) \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "have \"y + (zs ! j) = lincomb_list c ?list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y + zs ! j = lincomb_list c (map (\\<lambda>y. y + zs ! j) ys)", "unfolding yid"], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list c ys + zs ! j =\n    lincomb_list c (map (\\<lambda>y. y + zs ! j) ys)", "using zsj lin_map lincomb_list_index[OF _ set] lincomb_list_index[OF _ ys]"], ["proof (prove)\nusing this:\n  zs ! j \\<in> carrier_vec n\n  lincomb_list c (map (\\<lambda>y. y + zs ! j) ys) \\<in> carrier_vec n\n  ?i < n \\<Longrightarrow>\n  lincomb_list ?c (map (\\<lambda>y. y + zs ! j) ys) $ ?i =\n  (\\<Sum>ja = 0..<length (map (\\<lambda>y. y + zs ! j) ys).\n      ?c ja * map (\\<lambda>y. y + zs ! j) ys ! ja $ ?i)\n  ?i < n \\<Longrightarrow>\n  lincomb_list ?c ys $ ?i = (\\<Sum>j = 0..<length ys. ?c j * ys ! j $ ?i)\n\ngoal (1 subgoal):\n 1. lincomb_list c ys + zs ! j =\n    lincomb_list c (map (\\<lambda>y. y + zs ! j) ys)", "by (intro eq_vecI, auto simp: field_simps sum_distrib_right[symmetric] conv_c)"], ["proof (state)\nthis:\n  y + zs ! j = lincomb_list c (map (\\<lambda>y. y + zs ! j) ys)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "hence \"convex_lincomb_list c ?list (y + (zs ! j))\""], ["proof (prove)\nusing this:\n  y + zs ! j = lincomb_list c (map (\\<lambda>y. y + zs ! j) ys)\n\ngoal (1 subgoal):\n 1. convex_lincomb_list c (map (\\<lambda>y. y + zs ! j) ys) (y + zs ! j)", "unfolding convex_lincomb_list_def nonneg_lincomb_list_def"], ["proof (prove)\nusing this:\n  y + zs ! j = lincomb_list c (map (\\<lambda>y. y + zs ! j) ys)\n\ngoal (1 subgoal):\n 1. (lincomb_list c (map (\\<lambda>y. y + zs ! j) ys) = y + zs ! j \\<and>\n     (\\<forall>i<length (map (\\<lambda>y. y + zs ! j) ys).\n         (0::'a) \\<le> c i)) \\<and>\n    sum c {0..<length (map (\\<lambda>y. y + zs ! j) ys)} = (1::'a)", "using conv_c"], ["proof (prove)\nusing this:\n  y + zs ! j = lincomb_list c (map (\\<lambda>y. y + zs ! j) ys)\n  (\\<forall>i<length ys. (0::'a) \\<le> c i) \\<and>\n  sum c {0..<length ys} = (1::'a)\n\ngoal (1 subgoal):\n 1. (lincomb_list c (map (\\<lambda>y. y + zs ! j) ys) = y + zs ! j \\<and>\n     (\\<forall>i<length (map (\\<lambda>y. y + zs ! j) ys).\n         (0::'a) \\<le> c i)) \\<and>\n    sum c {0..<length (map (\\<lambda>y. y + zs ! j) ys)} = (1::'a)", "by auto"], ["proof (state)\nthis:\n  convex_lincomb_list c (map (\\<lambda>y. y + zs ! j) ys) (y + zs ! j)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "hence \"y + (zs ! j) \\<in> convex_hull_list ?list\""], ["proof (prove)\nusing this:\n  convex_lincomb_list c (map (\\<lambda>y. y + zs ! j) ys) (y + zs ! j)\n\ngoal (1 subgoal):\n 1. y + zs ! j \\<in> convex_hull_list (map (\\<lambda>y. y + zs ! j) ys)", "unfolding convex_hull_list_def"], ["proof (prove)\nusing this:\n  convex_lincomb_list c (map (\\<lambda>y. y + zs ! j) ys) (y + zs ! j)\n\ngoal (1 subgoal):\n 1. y + zs ! j\n    \\<in> {x. \\<exists>c.\n                 convex_lincomb_list c (map (\\<lambda>y. y + zs ! j) ys) x}", "by auto"], ["proof (state)\nthis:\n  y + zs ! j \\<in> convex_hull_list (map (\\<lambda>y. y + zs ! j) ys)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "with finite_convex_hull_iff_convex_hull_list[OF set refl]"], ["proof (chain)\npicking this:\n  convex_hull (set (map (\\<lambda>y. y + zs ! j) ys)) =\n  convex_hull_list (map (\\<lambda>y. y + zs ! j) ys)\n  y + zs ! j \\<in> convex_hull_list (map (\\<lambda>y. y + zs ! j) ys)", "have \"(y + zs ! j) \\<in> convex_hull ?set\""], ["proof (prove)\nusing this:\n  convex_hull (set (map (\\<lambda>y. y + zs ! j) ys)) =\n  convex_hull_list (map (\\<lambda>y. y + zs ! j) ys)\n  y + zs ! j \\<in> convex_hull_list (map (\\<lambda>y. y + zs ! j) ys)\n\ngoal (1 subgoal):\n 1. y + zs ! j \\<in> convex_hull (set (map (\\<lambda>y. y + zs ! j) ys))", "by auto"], ["proof (state)\nthis:\n  y + zs ! j \\<in> convex_hull (set (map (\\<lambda>y. y + zs ! j) ys))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "also"], ["proof (state)\nthis:\n  y + zs ! j \\<in> convex_hull (set (map (\\<lambda>y. y + zs ! j) ys))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "have \"\\<dots> \\<subseteq> convex_hull (A + B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex_hull (set (map (\\<lambda>y. y + zs ! j) ys))\n    \\<subseteq> convex_hull (A + B)", "by (rule convex_hull_mono, insert mem ys ysA zsB, force simp: set_plus_def)"], ["proof (state)\nthis:\n  convex_hull (set (map (\\<lambda>y. y + zs ! j) ys))\n  \\<subseteq> convex_hull (A + B)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "finally"], ["proof (chain)\npicking this:\n  y + zs ! j \\<in> convex_hull (A + B)", "have \"x \\<in> convex_hull (A + B)\""], ["proof (prove)\nusing this:\n  y + zs ! j \\<in> convex_hull (A + B)\n\ngoal (1 subgoal):\n 1. x \\<in> convex_hull (A + B)", "unfolding x"], ["proof (prove)\nusing this:\n  y + zs ! j \\<in> convex_hull (A + B)\n\ngoal (1 subgoal):\n 1. y + zs ! j \\<in> convex_hull (A + B)", "."], ["proof (state)\nthis:\n  x \\<in> convex_hull (A + B)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "}"], ["proof (state)\nthis:\n  ?xa5 \\<in> set (map ((+) y) zs) \\<Longrightarrow>\n  ?xa5 \\<in> convex_hull (A + B)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "note step1 = this"], ["proof (state)\nthis:\n  ?xa5 \\<in> set (map ((+) y) zs) \\<Longrightarrow>\n  ?xa5 \\<in> convex_hull (A + B)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "{"], ["proof (state)\nthis:\n  ?xa5 \\<in> set (map ((+) y) zs) \\<Longrightarrow>\n  ?xa5 \\<in> convex_hull (A + B)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "let ?list = \"map ((+) y) zs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "let ?set = \"set ?list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "have set: \"?set \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map ((+) y) zs) \\<subseteq> carrier_vec n", "using zs B y"], ["proof (prove)\nusing this:\n  set zs \\<subseteq> carrier_vec n\n  B \\<subseteq> carrier_vec n\n  y \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. set (map ((+) y) zs) \\<subseteq> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  set (map ((+) y) zs) \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "have lin_map: \"lincomb_list d ?list \\<in> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lincomb_list d (map ((+) y) zs) \\<in> carrier_vec n", "by (intro lincomb_list_carrier[OF set])"], ["proof (state)\nthis:\n  lincomb_list d (map ((+) y) zs) \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "have [simp]: \"i < n \\<Longrightarrow> (\\<Sum>j = 0..<length zs. d j * (y + zs ! j) $ i) =\n        (\\<Sum>j = 0..<length zs. d j * (y $ i + zs ! j $ i))\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < n \\<Longrightarrow>\n    (\\<Sum>j = 0..<length zs. d j * (y + zs ! j) $ i) =\n    (\\<Sum>j = 0..<length zs. d j * (y $ i + zs ! j $ i))", "by (rule sum.cong, insert zs[unfolded set_conv_nth] y, auto)"], ["proof (state)\nthis:\n  ?i3 < n \\<Longrightarrow>\n  (\\<Sum>j = 0..<length zs. d j * (y + zs ! j) $ ?i3) =\n  (\\<Sum>j = 0..<length zs. d j * (y $ ?i3 + zs ! j $ ?i3))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "have \"y + z = lincomb_list d ?list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y + z = lincomb_list d (map ((+) y) zs)", "unfolding zid"], ["proof (prove)\ngoal (1 subgoal):\n 1. y + lincomb_list d zs = lincomb_list d (map ((+) y) zs)", "using y zs lin_map lincomb_list_index[OF _ set] lincomb_list_index[OF _ zs]\n          set lincomb_list_carrier[OF zs, of d] zs[unfolded set_conv_nth]"], ["proof (prove)\nusing this:\n  y \\<in> carrier_vec n\n  set zs \\<subseteq> carrier_vec n\n  lincomb_list d (map ((+) y) zs) \\<in> carrier_vec n\n  ?i < n \\<Longrightarrow>\n  lincomb_list ?c (map ((+) y) zs) $ ?i =\n  (\\<Sum>j = 0..<length (map ((+) y) zs). ?c j * map ((+) y) zs ! j $ ?i)\n  ?i < n \\<Longrightarrow>\n  lincomb_list ?c zs $ ?i = (\\<Sum>j = 0..<length zs. ?c j * zs ! j $ ?i)\n  set (map ((+) y) zs) \\<subseteq> carrier_vec n\n  lincomb_list d zs \\<in> carrier_vec n\n  {zs ! i |i. i < length zs} \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. y + lincomb_list d zs = lincomb_list d (map ((+) y) zs)", "by (intro eq_vecI, auto simp: field_simps sum_distrib_right[symmetric] conv_d)"], ["proof (state)\nthis:\n  y + z = lincomb_list d (map ((+) y) zs)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "hence \"convex_lincomb_list d ?list x\""], ["proof (prove)\nusing this:\n  y + z = lincomb_list d (map ((+) y) zs)\n\ngoal (1 subgoal):\n 1. convex_lincomb_list d (map ((+) y) zs) x", "unfolding x"], ["proof (prove)\nusing this:\n  y + z = lincomb_list d (map ((+) y) zs)\n\ngoal (1 subgoal):\n 1. convex_lincomb_list d (map ((+) y) zs) (y + z)", "unfolding convex_lincomb_list_def nonneg_lincomb_list_def"], ["proof (prove)\nusing this:\n  y + z = lincomb_list d (map ((+) y) zs)\n\ngoal (1 subgoal):\n 1. (lincomb_list d (map ((+) y) zs) = y + z \\<and>\n     (\\<forall>i<length (map ((+) y) zs). (0::'a) \\<le> d i)) \\<and>\n    sum d {0..<length (map ((+) y) zs)} = (1::'a)", "using conv_d"], ["proof (prove)\nusing this:\n  y + z = lincomb_list d (map ((+) y) zs)\n  (\\<forall>i<length zs. (0::'a) \\<le> d i) \\<and>\n  sum d {0..<length zs} = (1::'a)\n\ngoal (1 subgoal):\n 1. (lincomb_list d (map ((+) y) zs) = y + z \\<and>\n     (\\<forall>i<length (map ((+) y) zs). (0::'a) \\<le> d i)) \\<and>\n    sum d {0..<length (map ((+) y) zs)} = (1::'a)", "by auto"], ["proof (state)\nthis:\n  convex_lincomb_list d (map ((+) y) zs) x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "hence \"x \\<in> convex_hull_list ?list\""], ["proof (prove)\nusing this:\n  convex_lincomb_list d (map ((+) y) zs) x\n\ngoal (1 subgoal):\n 1. x \\<in> convex_hull_list (map ((+) y) zs)", "unfolding convex_hull_list_def"], ["proof (prove)\nusing this:\n  convex_lincomb_list d (map ((+) y) zs) x\n\ngoal (1 subgoal):\n 1. x \\<in> {x. \\<exists>c. convex_lincomb_list c (map ((+) y) zs) x}", "by auto"], ["proof (state)\nthis:\n  x \\<in> convex_hull_list (map ((+) y) zs)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "with finite_convex_hull_iff_convex_hull_list[OF set refl]"], ["proof (chain)\npicking this:\n  convex_hull (set (map ((+) y) zs)) = convex_hull_list (map ((+) y) zs)\n  x \\<in> convex_hull_list (map ((+) y) zs)", "have \"x \\<in> convex_hull ?set\""], ["proof (prove)\nusing this:\n  convex_hull (set (map ((+) y) zs)) = convex_hull_list (map ((+) y) zs)\n  x \\<in> convex_hull_list (map ((+) y) zs)\n\ngoal (1 subgoal):\n 1. x \\<in> convex_hull (set (map ((+) y) zs))", "by auto"], ["proof (state)\nthis:\n  x \\<in> convex_hull (set (map ((+) y) zs))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "also"], ["proof (state)\nthis:\n  x \\<in> convex_hull (set (map ((+) y) zs))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "have \"\\<dots> \\<subseteq> convex_hull (convex_hull (A + B))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex_hull (set (map ((+) y) zs))\n    \\<subseteq> convex_hull (convex_hull (A + B))", "by (rule convex_hull_mono, insert step1, auto)"], ["proof (state)\nthis:\n  convex_hull (set (map ((+) y) zs))\n  \\<subseteq> convex_hull (convex_hull (A + B))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "also"], ["proof (state)\nthis:\n  convex_hull (set (map ((+) y) zs))\n  \\<subseteq> convex_hull (convex_hull (A + B))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "have \"\\<dots> = convex_hull (A + B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex_hull (convex_hull (A + B)) = convex_hull (A + B)", "by (rule convex_convex_hull[OF convex_hulls_are_convex], intro sum_carrier_vec A B)"], ["proof (state)\nthis:\n  convex_hull (convex_hull (A + B)) = convex_hull (A + B)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> convex_hull A + convex_hull B \\<Longrightarrow>\n       x \\<in> convex_hull (A + B)", "finally"], ["proof (chain)\npicking this:\n  x \\<in> convex_hull (A + B)", "show \"x \\<in> convex_hull (A + B)\""], ["proof (prove)\nusing this:\n  x \\<in> convex_hull (A + B)\n\ngoal (1 subgoal):\n 1. x \\<in> convex_hull (A + B)", "."], ["proof (state)\nthis:\n  x \\<in> convex_hull (A + B)\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  x \\<in> convex_hull (A + B)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  convex_hull A + convex_hull B \\<subseteq> convex_hull (A + B)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma convex_hull_in_cone:\n  \"convex_hull C \\<subseteq> cone C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex_hull C \\<subseteq> cone C", "unfolding convex_hull_def cone_def convex_lincomb_def finite_cone_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. \\<exists>Ws c.\n           finite Ws \\<and>\n           Ws \\<subseteq> C \\<and>\n           nonneg_lincomb c Ws x \\<and> sum c Ws = (1::'a)}\n    \\<subseteq> {x. \\<exists>Ws.\n                       finite Ws \\<and>\n                       Ws \\<subseteq> C \\<and>\n                       x \\<in> {b. \\<exists>c.\nnonneg_lincomb c (if finite Ws then Ws else {}) b}}", "by auto"], ["", "lemma convex_cone:\n  assumes C: \"C \\<subseteq> carrier_vec n\"\n  shows \"convex (cone C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convex (cone C)", "unfolding convex_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. convex_hull (cone C) = cone C", "using convex_hull_in_cone set_in_convex_hull[OF cone_carrier[OF C]] cone_cone[OF C]"], ["proof (prove)\nusing this:\n  convex_hull ?C \\<subseteq> cone ?C\n  cone C \\<subseteq> convex_hull (cone C)\n  cone (cone C) = cone C\n\ngoal (1 subgoal):\n 1. convex_hull (cone C) = cone C", "by blast"], ["", "end"], ["", "end"]]}