{"file_name": "/home/qj213/afp-2021-10-22/thys/Linear_Inequalities/Basis_Extension.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Linear_Inequalities", "problem_names": ["lemma lin_indpt_list_length_le_n: assumes \"lin_indpt_list xs\"\n  shows \"length xs \\<le> n\"", "lemma lin_indpt_list_length_eq_n: assumes \"lin_indpt_list xs\"\n  and \"length xs = n\"\nshows \"span (set xs) = carrier_vec n\" \"basis (set xs)\"", "lemma expand_to_basis: assumes lin: \"lin_indpt_list xs\"\n  shows \"\\<exists> ys. set ys \\<subseteq> set (unit_vecs n) \\<and> lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n\"", "lemma basis_extension: assumes \"lin_indpt_list xs\"\n  shows \"set (basis_extension xs) \\<subseteq> set (unit_vecs n)\"\n    \"lin_indpt_list (xs @ basis_extension xs)\"\n    \"length (xs @ basis_extension xs) = n\"", "lemma exists_lin_indpt_sublist: assumes X: \"X \\<subseteq> carrier_vec n\"\n  shows \"\\<exists> Ls. lin_indpt_list Ls \\<and> span (set Ls) = span X \\<and> set Ls \\<subseteq> X\"", "lemma exists_lin_indpt_subset: assumes \"X \\<subseteq> carrier_vec n\"\n  shows \"\\<exists> Ls. lin_indpt Ls \\<and> span (Ls) = span X \\<and> Ls \\<subseteq> X\""], "translations": [["", "lemma lin_indpt_list_length_le_n: assumes \"lin_indpt_list xs\"\n  shows \"length xs \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length xs \\<le> n", "from assms[unfolded lin_indpt_list_def]"], ["proof (chain)\npicking this:\n  set xs \\<subseteq> carrier_vec n \\<and>\n  distinct xs \\<and> lin_indpt (set xs)", "have xs: \"set xs \\<subseteq> carrier_vec n\" and dist: \"distinct xs\" and lin: \"lin_indpt (set xs)\""], ["proof (prove)\nusing this:\n  set xs \\<subseteq> carrier_vec n \\<and>\n  distinct xs \\<and> lin_indpt (set xs)\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> carrier_vec n &&& distinct xs &&& lin_indpt (set xs)", "by auto"], ["proof (state)\nthis:\n  set xs \\<subseteq> carrier_vec n\n  distinct xs\n  lin_indpt (set xs)\n\ngoal (1 subgoal):\n 1. length xs \\<le> n", "from dist"], ["proof (chain)\npicking this:\n  distinct xs", "have \"card (set xs) = length xs\""], ["proof (prove)\nusing this:\n  distinct xs\n\ngoal (1 subgoal):\n 1. card (set xs) = length xs", "by (rule distinct_card)"], ["proof (state)\nthis:\n  card (set xs) = length xs\n\ngoal (1 subgoal):\n 1. length xs \\<le> n", "moreover"], ["proof (state)\nthis:\n  card (set xs) = length xs\n\ngoal (1 subgoal):\n 1. length xs \\<le> n", "have \"card (set xs) \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (set xs) \\<le> n", "using lin xs dim_is_n li_le_dim(2)"], ["proof (prove)\nusing this:\n  lin_indpt (set xs)\n  set xs \\<subseteq> carrier_vec n\n  local.dim = n\n  \\<lbrakk>fin_dim; ?A \\<subseteq> carrier_vec n; lin_indpt ?A\\<rbrakk>\n  \\<Longrightarrow> card ?A \\<le> local.dim\n\ngoal (1 subgoal):\n 1. card (set xs) \\<le> n", "by auto"], ["proof (state)\nthis:\n  card (set xs) \\<le> n\n\ngoal (1 subgoal):\n 1. length xs \\<le> n", "ultimately"], ["proof (chain)\npicking this:\n  card (set xs) = length xs\n  card (set xs) \\<le> n", "show ?thesis"], ["proof (prove)\nusing this:\n  card (set xs) = length xs\n  card (set xs) \\<le> n\n\ngoal (1 subgoal):\n 1. length xs \\<le> n", "by auto"], ["proof (state)\nthis:\n  length xs \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lin_indpt_list_length_eq_n: assumes \"lin_indpt_list xs\"\n  and \"length xs = n\"\nshows \"span (set xs) = carrier_vec n\" \"basis (set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.span (set xs) = carrier_vec n &&& basis (set xs)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. local.span (set xs) = carrier_vec n\n 2. basis (set xs)", "from assms[unfolded lin_indpt_list_def]"], ["proof (chain)\npicking this:\n  set xs \\<subseteq> carrier_vec n \\<and>\n  distinct xs \\<and> lin_indpt (set xs)\n  length xs = n", "have xs: \"set xs \\<subseteq> carrier_vec n\" and dist: \"distinct xs\" and lin: \"lin_indpt (set xs)\""], ["proof (prove)\nusing this:\n  set xs \\<subseteq> carrier_vec n \\<and>\n  distinct xs \\<and> lin_indpt (set xs)\n  length xs = n\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> carrier_vec n &&& distinct xs &&& lin_indpt (set xs)", "by auto"], ["proof (state)\nthis:\n  set xs \\<subseteq> carrier_vec n\n  distinct xs\n  lin_indpt (set xs)\n\ngoal (2 subgoals):\n 1. local.span (set xs) = carrier_vec n\n 2. basis (set xs)", "from dist"], ["proof (chain)\npicking this:\n  distinct xs", "have \"card (set xs) = length xs\""], ["proof (prove)\nusing this:\n  distinct xs\n\ngoal (1 subgoal):\n 1. card (set xs) = length xs", "by (rule distinct_card)"], ["proof (state)\nthis:\n  card (set xs) = length xs\n\ngoal (2 subgoals):\n 1. local.span (set xs) = carrier_vec n\n 2. basis (set xs)", "with assms"], ["proof (chain)\npicking this:\n  lin_indpt_list xs\n  length xs = n\n  card (set xs) = length xs", "have \"card (set xs) = n\""], ["proof (prove)\nusing this:\n  lin_indpt_list xs\n  length xs = n\n  card (set xs) = length xs\n\ngoal (1 subgoal):\n 1. card (set xs) = n", "by auto"], ["proof (state)\nthis:\n  card (set xs) = n\n\ngoal (2 subgoals):\n 1. local.span (set xs) = carrier_vec n\n 2. basis (set xs)", "with lin xs"], ["proof (chain)\npicking this:\n  lin_indpt (set xs)\n  set xs \\<subseteq> carrier_vec n\n  card (set xs) = n", "show \"span (set xs) = carrier_vec n\" \"basis (set xs)\""], ["proof (prove)\nusing this:\n  lin_indpt (set xs)\n  set xs \\<subseteq> carrier_vec n\n  card (set xs) = n\n\ngoal (1 subgoal):\n 1. local.span (set xs) = carrier_vec n &&& basis (set xs)", "using dim_is_n"], ["proof (prove)\nusing this:\n  lin_indpt (set xs)\n  set xs \\<subseteq> carrier_vec n\n  card (set xs) = n\n  local.dim = n\n\ngoal (1 subgoal):\n 1. local.span (set xs) = carrier_vec n &&& basis (set xs)", "by (metis basis_def dim_basis dim_li_is_basis fin_dim finite_basis_exists gen_ge_dim li_le_dim(1))+"], ["proof (state)\nthis:\n  local.span (set xs) = carrier_vec n\n  basis (set xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma expand_to_basis: assumes lin: \"lin_indpt_list xs\"\n  shows \"\\<exists> ys. set ys \\<subseteq> set (unit_vecs n) \\<and> lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ys.\n       set ys \\<subseteq> set (unit_vecs n) \\<and>\n       lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ys.\n       set ys \\<subseteq> set (unit_vecs n) \\<and>\n       lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n", "define y where \"y = n - length xs\""], ["proof (state)\nthis:\n  y = n - length xs\n\ngoal (1 subgoal):\n 1. \\<exists>ys.\n       set ys \\<subseteq> set (unit_vecs n) \\<and>\n       lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n", "from lin"], ["proof (chain)\npicking this:\n  lin_indpt_list xs", "have \"length xs \\<le> n\""], ["proof (prove)\nusing this:\n  lin_indpt_list xs\n\ngoal (1 subgoal):\n 1. length xs \\<le> n", "by (rule lin_indpt_list_length_le_n)"], ["proof (state)\nthis:\n  length xs \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>ys.\n       set ys \\<subseteq> set (unit_vecs n) \\<and>\n       lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n", "hence \"length xs + y = n\""], ["proof (prove)\nusing this:\n  length xs \\<le> n\n\ngoal (1 subgoal):\n 1. length xs + y = n", "unfolding y_def"], ["proof (prove)\nusing this:\n  length xs \\<le> n\n\ngoal (1 subgoal):\n 1. length xs + (n - length xs) = n", "by auto"], ["proof (state)\nthis:\n  length xs + y = n\n\ngoal (1 subgoal):\n 1. \\<exists>ys.\n       set ys \\<subseteq> set (unit_vecs n) \\<and>\n       lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n", "thus \"\\<exists> ys. set ys \\<subseteq> set (unit_vecs n) \\<and> lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n\""], ["proof (prove)\nusing this:\n  length xs + y = n\n\ngoal (1 subgoal):\n 1. \\<exists>ys.\n       set ys \\<subseteq> set (unit_vecs n) \\<and>\n       lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n", "using lin"], ["proof (prove)\nusing this:\n  length xs + y = n\n  lin_indpt_list xs\n\ngoal (1 subgoal):\n 1. \\<exists>ys.\n       set ys \\<subseteq> set (unit_vecs n) \\<and>\n       lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n", "proof (induct y arbitrary: xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>length xs + 0 = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n\n 2. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "case (0 xs)"], ["proof (state)\nthis:\n  length xs + 0 = n\n  lin_indpt_list xs\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>length xs + 0 = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n\n 2. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "thus ?case"], ["proof (prove)\nusing this:\n  length xs + 0 = n\n  lin_indpt_list xs\n\ngoal (1 subgoal):\n 1. \\<exists>ys.\n       set ys \\<subseteq> set (unit_vecs n) \\<and>\n       lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n", "by (intro exI[of _ Nil], auto)"], ["proof (state)\nthis:\n  \\<exists>ys.\n     set ys \\<subseteq> set (unit_vecs n) \\<and>\n     lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n\n\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "case (Suc y xs)"], ["proof (state)\nthis:\n  \\<lbrakk>length ?xs1 + y = n; lin_indpt_list ?xs1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>ys.\n                       set ys \\<subseteq> set (unit_vecs n) \\<and>\n                       lin_indpt_list (?xs1 @ ys) \\<and>\n                       length (?xs1 @ ys) = n\n  length xs + Suc y = n\n  lin_indpt_list xs\n\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "hence \"length xs < n\""], ["proof (prove)\nusing this:\n  \\<lbrakk>length ?xs1 + y = n; lin_indpt_list ?xs1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>ys.\n                       set ys \\<subseteq> set (unit_vecs n) \\<and>\n                       lin_indpt_list (?xs1 @ ys) \\<and>\n                       length (?xs1 @ ys) = n\n  length xs + Suc y = n\n  lin_indpt_list xs\n\ngoal (1 subgoal):\n 1. length xs < n", "by auto"], ["proof (state)\nthis:\n  length xs < n\n\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "from Suc(3)[unfolded lin_indpt_list_def]"], ["proof (chain)\npicking this:\n  set xs \\<subseteq> carrier_vec n \\<and>\n  distinct xs \\<and> lin_indpt (set xs)", "have xs: \"set xs \\<subseteq> carrier_vec n\" and dist: \"distinct xs\" and lin: \"lin_indpt (set xs)\""], ["proof (prove)\nusing this:\n  set xs \\<subseteq> carrier_vec n \\<and>\n  distinct xs \\<and> lin_indpt (set xs)\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> carrier_vec n &&& distinct xs &&& lin_indpt (set xs)", "by auto"], ["proof (state)\nthis:\n  set xs \\<subseteq> carrier_vec n\n  distinct xs\n  lin_indpt (set xs)\n\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "from distinct_card[OF dist] Suc(2)"], ["proof (chain)\npicking this:\n  card (set xs) = length xs\n  length xs + Suc y = n", "have card: \"card (set xs) < n\""], ["proof (prove)\nusing this:\n  card (set xs) = length xs\n  length xs + Suc y = n\n\ngoal (1 subgoal):\n 1. card (set xs) < n", "by auto"], ["proof (state)\nthis:\n  card (set xs) < n\n\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "have \"span (set xs) \\<noteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.span (set xs) \\<noteq> carrier_vec n", "using card dim_is_n xs basis_def dim_basis lin"], ["proof (prove)\nusing this:\n  card (set xs) < n\n  local.dim = n\n  set xs \\<subseteq> carrier_vec n\n  basis ?A =\n  (lin_indpt ?A \\<and>\n   local.span ?A = carrier_vec n \\<and> ?A \\<subseteq> carrier_vec n)\n  \\<lbrakk>finite ?A; basis ?A\\<rbrakk>\n  \\<Longrightarrow> local.dim = card ?A\n  lin_indpt (set xs)\n\ngoal (1 subgoal):\n 1. local.span (set xs) \\<noteq> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  local.span (set xs) \\<noteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "with span_closed[OF xs]"], ["proof (chain)\npicking this:\n  ?v \\<in> local.span (set xs) \\<Longrightarrow> ?v \\<in> carrier_vec n\n  local.span (set xs) \\<noteq> carrier_vec n", "have \"span (set xs) \\<subset> carrier_vec n\""], ["proof (prove)\nusing this:\n  ?v \\<in> local.span (set xs) \\<Longrightarrow> ?v \\<in> carrier_vec n\n  local.span (set xs) \\<noteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. local.span (set xs) \\<subset> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  local.span (set xs) \\<subset> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "also"], ["proof (state)\nthis:\n  local.span (set xs) \\<subset> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "have \"carrier_vec n = span (set (unit_vecs n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier_vec n = local.span (set (unit_vecs n))", "unfolding span_unit_vecs_is_carrier"], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier_vec n = carrier_vec n", ".."], ["proof (state)\nthis:\n  carrier_vec n = local.span (set (unit_vecs n))\n\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "finally"], ["proof (chain)\npicking this:\n  local.span (set xs) \\<subset> local.span (set (unit_vecs n))", "have sub: \"span (set xs) \\<subset> span (set (unit_vecs n))\""], ["proof (prove)\nusing this:\n  local.span (set xs) \\<subset> local.span (set (unit_vecs n))\n\ngoal (1 subgoal):\n 1. local.span (set xs) \\<subset> local.span (set (unit_vecs n))", "."], ["proof (state)\nthis:\n  local.span (set xs) \\<subset> local.span (set (unit_vecs n))\n\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "have \"\\<exists> u. u \\<in> set (unit_vecs n) \\<and> u \\<notin> span (set xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u.\n       u \\<in> set (unit_vecs n) \\<and> u \\<notin> local.span (set xs)", "using span_subsetI[OF xs, of \"set (unit_vecs n)\"] sub"], ["proof (prove)\nusing this:\n  set (unit_vecs n) \\<subseteq> local.span (set xs) \\<Longrightarrow>\n  local.span (set (unit_vecs n)) \\<subseteq> local.span (set xs)\n  local.span (set xs) \\<subset> local.span (set (unit_vecs n))\n\ngoal (1 subgoal):\n 1. \\<exists>u.\n       u \\<in> set (unit_vecs n) \\<and> u \\<notin> local.span (set xs)", "by force"], ["proof (state)\nthis:\n  \\<exists>u.\n     u \\<in> set (unit_vecs n) \\<and> u \\<notin> local.span (set xs)\n\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "then"], ["proof (chain)\npicking this:\n  \\<exists>u.\n     u \\<in> set (unit_vecs n) \\<and> u \\<notin> local.span (set xs)", "obtain u where uu: \"u \\<in> set (unit_vecs n)\" and usxs: \"u \\<notin> span (set xs)\""], ["proof (prove)\nusing this:\n  \\<exists>u.\n     u \\<in> set (unit_vecs n) \\<and> u \\<notin> local.span (set xs)\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> set (unit_vecs n);\n         u \\<notin> local.span (set xs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  u \\<in> set (unit_vecs n)\n  u \\<notin> local.span (set xs)\n\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "then"], ["proof (chain)\npicking this:\n  u \\<in> set (unit_vecs n)\n  u \\<notin> local.span (set xs)", "have u: \"u \\<in> carrier_vec n\""], ["proof (prove)\nusing this:\n  u \\<in> set (unit_vecs n)\n  u \\<notin> local.span (set xs)\n\ngoal (1 subgoal):\n 1. u \\<in> carrier_vec n", "unfolding unit_vecs_def"], ["proof (prove)\nusing this:\n  u \\<in> set (map (unit_vec n) [0..<n])\n  u \\<notin> local.span (set xs)\n\ngoal (1 subgoal):\n 1. u \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  u \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "let ?xs = \"xs @ [u]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "from span_mem[OF xs, of u] usxs"], ["proof (chain)\npicking this:\n  u \\<in> set xs \\<Longrightarrow> u \\<in> local.span (set xs)\n  u \\<notin> local.span (set xs)", "have uxs: \"u \\<notin> set xs\""], ["proof (prove)\nusing this:\n  u \\<in> set xs \\<Longrightarrow> u \\<in> local.span (set xs)\n  u \\<notin> local.span (set xs)\n\ngoal (1 subgoal):\n 1. u \\<notin> set xs", "by auto"], ["proof (state)\nthis:\n  u \\<notin> set xs\n\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "with dist"], ["proof (chain)\npicking this:\n  distinct xs\n  u \\<notin> set xs", "have dist: \"distinct ?xs\""], ["proof (prove)\nusing this:\n  distinct xs\n  u \\<notin> set xs\n\ngoal (1 subgoal):\n 1. distinct (xs @ [u])", "by auto"], ["proof (state)\nthis:\n  distinct (xs @ [u])\n\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "have lin: \"lin_indpt (set ?xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lin_indpt (set (xs @ [u]))", "using lin_dep_iff_in_span[OF xs lin u uxs] usxs"], ["proof (prove)\nusing this:\n  (u \\<in> local.span (set xs)) = lin_dep (set xs \\<union> {u})\n  u \\<notin> local.span (set xs)\n\ngoal (1 subgoal):\n 1. lin_indpt (set (xs @ [u]))", "by auto"], ["proof (state)\nthis:\n  lin_indpt (set (xs @ [u]))\n\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "from lin dist u xs"], ["proof (chain)\npicking this:\n  lin_indpt (set (xs @ [u]))\n  distinct (xs @ [u])\n  u \\<in> carrier_vec n\n  set xs \\<subseteq> carrier_vec n", "have lin: \"lin_indpt_list ?xs\""], ["proof (prove)\nusing this:\n  lin_indpt (set (xs @ [u]))\n  distinct (xs @ [u])\n  u \\<in> carrier_vec n\n  set xs \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. lin_indpt_list (xs @ [u])", "unfolding lin_indpt_list_def"], ["proof (prove)\nusing this:\n  lin_indpt (set (xs @ [u]))\n  distinct (xs @ [u])\n  u \\<in> carrier_vec n\n  set xs \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. set (xs @ [u]) \\<subseteq> carrier_vec n \\<and>\n    distinct (xs @ [u]) \\<and> lin_indpt (set (xs @ [u]))", "by auto"], ["proof (state)\nthis:\n  lin_indpt_list (xs @ [u])\n\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "from Suc(2)"], ["proof (chain)\npicking this:\n  length xs + Suc y = n", "have \"length ?xs + y = n\""], ["proof (prove)\nusing this:\n  length xs + Suc y = n\n\ngoal (1 subgoal):\n 1. length (xs @ [u]) + y = n", "by auto"], ["proof (state)\nthis:\n  length (xs @ [u]) + y = n\n\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "from Suc(1)[OF this lin]"], ["proof (chain)\npicking this:\n  \\<exists>ys.\n     set ys \\<subseteq> set (unit_vecs n) \\<and>\n     lin_indpt_list ((xs @ [u]) @ ys) \\<and> length ((xs @ [u]) @ ys) = n", "obtain ys where\n      \"set ys \\<subseteq> set (unit_vecs n)\" \"lin_indpt_list (?xs @ ys)\" \"length (?xs @ ys) = n\""], ["proof (prove)\nusing this:\n  \\<exists>ys.\n     set ys \\<subseteq> set (unit_vecs n) \\<and>\n     lin_indpt_list ((xs @ [u]) @ ys) \\<and> length ((xs @ [u]) @ ys) = n\n\ngoal (1 subgoal):\n 1. (\\<And>ys.\n        \\<lbrakk>set ys \\<subseteq> set (unit_vecs n);\n         lin_indpt_list ((xs @ [u]) @ ys);\n         length ((xs @ [u]) @ ys) = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  set ys \\<subseteq> set (unit_vecs n)\n  lin_indpt_list ((xs @ [u]) @ ys)\n  length ((xs @ [u]) @ ys) = n\n\ngoal (1 subgoal):\n 1. \\<And>y xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs + y = n; lin_indpt_list xs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n;\n        length xs + Suc y = n; lin_indpt_list xs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            set ys \\<subseteq> set (unit_vecs n) \\<and>\n                            lin_indpt_list (xs @ ys) \\<and>\n                            length (xs @ ys) = n", "thus ?case"], ["proof (prove)\nusing this:\n  set ys \\<subseteq> set (unit_vecs n)\n  lin_indpt_list ((xs @ [u]) @ ys)\n  length ((xs @ [u]) @ ys) = n\n\ngoal (1 subgoal):\n 1. \\<exists>ys.\n       set ys \\<subseteq> set (unit_vecs n) \\<and>\n       lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n", "using uu"], ["proof (prove)\nusing this:\n  set ys \\<subseteq> set (unit_vecs n)\n  lin_indpt_list ((xs @ [u]) @ ys)\n  length ((xs @ [u]) @ ys) = n\n  u \\<in> set (unit_vecs n)\n\ngoal (1 subgoal):\n 1. \\<exists>ys.\n       set ys \\<subseteq> set (unit_vecs n) \\<and>\n       lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n", "by (intro exI[of _ \"u # ys\"], auto)"], ["proof (state)\nthis:\n  \\<exists>ys.\n     set ys \\<subseteq> set (unit_vecs n) \\<and>\n     lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>ys.\n     set ys \\<subseteq> set (unit_vecs n) \\<and>\n     lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"basis_extension xs = (SOME ys.\n  set ys \\<subseteq> set (unit_vecs n) \\<and> lin_indpt_list (xs @ ys) \\<and> length (xs @ ys) = n)\""], ["", "lemma basis_extension: assumes \"lin_indpt_list xs\"\n  shows \"set (basis_extension xs) \\<subseteq> set (unit_vecs n)\"\n    \"lin_indpt_list (xs @ basis_extension xs)\"\n    \"length (xs @ basis_extension xs) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (basis_extension xs) \\<subseteq> set (unit_vecs n) &&&\n    lin_indpt_list (xs @ basis_extension xs) &&&\n    length (xs @ basis_extension xs) = n", "using someI_ex[OF expand_to_basis[OF assms], folded basis_extension_def]"], ["proof (prove)\nusing this:\n  set (basis_extension xs) \\<subseteq> set (unit_vecs n) \\<and>\n  lin_indpt_list (xs @ basis_extension xs) \\<and>\n  length (xs @ basis_extension xs) = n\n\ngoal (1 subgoal):\n 1. set (basis_extension xs) \\<subseteq> set (unit_vecs n) &&&\n    lin_indpt_list (xs @ basis_extension xs) &&&\n    length (xs @ basis_extension xs) = n", "by auto"], ["", "lemma exists_lin_indpt_sublist: assumes X: \"X \\<subseteq> carrier_vec n\"\n  shows \"\\<exists> Ls. lin_indpt_list Ls \\<and> span (set Ls) = span X \\<and> set Ls \\<subseteq> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Ls.\n       lin_indpt_list Ls \\<and>\n       local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>Ls.\n       lin_indpt_list Ls \\<and>\n       local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X", "let ?T = ?thesis"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>Ls.\n       lin_indpt_list Ls \\<and>\n       local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X", "have \"(\\<exists> Ls. lin_indpt_list Ls \\<and> span (set Ls) \\<subseteq> span X \\<and> set Ls \\<subseteq> X \\<and> length Ls = k) \\<or> ?T\" for k"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "proof (induct k)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = 0) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n 2. \\<And>k.\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) \\<subseteq> local.span X \\<and>\n           set Ls \\<subseteq> X \\<and> length Ls = k) \\<or>\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) = local.span X \\<and>\n           set Ls \\<subseteq> X) \\<Longrightarrow>\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) \\<subseteq> local.span X \\<and>\n           set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = 0) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n 2. \\<And>k.\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) \\<subseteq> local.span X \\<and>\n           set Ls \\<subseteq> X \\<and> length Ls = k) \\<or>\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) = local.span X \\<and>\n           set Ls \\<subseteq> X) \\<Longrightarrow>\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) \\<subseteq> local.span X \\<and>\n           set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "have \"lin_indpt {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lin_indpt {}", "by (simp add: lindep_span)"], ["proof (state)\nthis:\n  lin_indpt {}\n\ngoal (2 subgoals):\n 1. (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = 0) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n 2. \\<And>k.\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) \\<subseteq> local.span X \\<and>\n           set Ls \\<subseteq> X \\<and> length Ls = k) \\<or>\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) = local.span X \\<and>\n           set Ls \\<subseteq> X) \\<Longrightarrow>\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) \\<subseteq> local.span X \\<and>\n           set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "thus ?case"], ["proof (prove)\nusing this:\n  lin_indpt {}\n\ngoal (1 subgoal):\n 1. (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = 0) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "using span_is_monotone"], ["proof (prove)\nusing this:\n  lin_indpt {}\n  ?S \\<subseteq> ?T \\<Longrightarrow>\n  local.span ?S \\<subseteq> local.span ?T\n\ngoal (1 subgoal):\n 1. (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = 0) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "by (auto simp: lin_indpt_list_def)"], ["proof (state)\nthis:\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) \\<subseteq> local.span X \\<and>\n      set Ls \\<subseteq> X \\<and> length Ls = 0) \\<or>\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) \\<subseteq> local.span X \\<and>\n           set Ls \\<subseteq> X \\<and> length Ls = k) \\<or>\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) = local.span X \\<and>\n           set Ls \\<subseteq> X) \\<Longrightarrow>\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) \\<subseteq> local.span X \\<and>\n           set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) \\<subseteq> local.span X \\<and>\n           set Ls \\<subseteq> X \\<and> length Ls = k) \\<or>\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) = local.span X \\<and>\n           set Ls \\<subseteq> X) \\<Longrightarrow>\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) \\<subseteq> local.span X \\<and>\n           set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "case (Suc k)"], ["proof (state)\nthis:\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) \\<subseteq> local.span X \\<and>\n      set Ls \\<subseteq> X \\<and> length Ls = k) \\<or>\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) \\<subseteq> local.span X \\<and>\n           set Ls \\<subseteq> X \\<and> length Ls = k) \\<or>\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) = local.span X \\<and>\n           set Ls \\<subseteq> X) \\<Longrightarrow>\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) \\<subseteq> local.span X \\<and>\n           set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n       (\\<exists>Ls.\n           lin_indpt_list Ls \\<and>\n           local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "proof (cases ?T)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>Ls.\n       lin_indpt_list Ls \\<and>\n       local.span (set Ls) = local.span X \\<and>\n       set Ls \\<subseteq> X \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n 2. \\<nexists>Ls.\n       lin_indpt_list Ls \\<and>\n       local.span (set Ls) = local.span X \\<and>\n       set Ls \\<subseteq> X \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "case False"], ["proof (state)\nthis:\n  \\<nexists>Ls.\n     lin_indpt_list Ls \\<and>\n     local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X\n\ngoal (2 subgoals):\n 1. \\<exists>Ls.\n       lin_indpt_list Ls \\<and>\n       local.span (set Ls) = local.span X \\<and>\n       set Ls \\<subseteq> X \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n 2. \\<nexists>Ls.\n       lin_indpt_list Ls \\<and>\n       local.span (set Ls) = local.span X \\<and>\n       set Ls \\<subseteq> X \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "with Suc"], ["proof (chain)\npicking this:\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) \\<subseteq> local.span X \\<and>\n      set Ls \\<subseteq> X \\<and> length Ls = k) \\<or>\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n  \\<nexists>Ls.\n     lin_indpt_list Ls \\<and>\n     local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X", "obtain Ls where lin: \"lin_indpt_list Ls\"\n        and span: \"span (set Ls) \\<subseteq> span X\" and Ls: \"set Ls \\<subseteq> X\"  and len: \"length Ls = k\""], ["proof (prove)\nusing this:\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) \\<subseteq> local.span X \\<and>\n      set Ls \\<subseteq> X \\<and> length Ls = k) \\<or>\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n  \\<nexists>Ls.\n     lin_indpt_list Ls \\<and>\n     local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X\n\ngoal (1 subgoal):\n 1. (\\<And>Ls.\n        \\<lbrakk>lin_indpt_list Ls;\n         local.span (set Ls) \\<subseteq> local.span X; set Ls \\<subseteq> X;\n         length Ls = k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lin_indpt_list Ls\n  local.span (set Ls) \\<subseteq> local.span X\n  set Ls \\<subseteq> X\n  length Ls = k\n\ngoal (2 subgoals):\n 1. \\<exists>Ls.\n       lin_indpt_list Ls \\<and>\n       local.span (set Ls) = local.span X \\<and>\n       set Ls \\<subseteq> X \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n 2. \\<nexists>Ls.\n       lin_indpt_list Ls \\<and>\n       local.span (set Ls) = local.span X \\<and>\n       set Ls \\<subseteq> X \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "from Ls X"], ["proof (chain)\npicking this:\n  set Ls \\<subseteq> X\n  X \\<subseteq> carrier_vec n", "have LsC: \"set Ls \\<subseteq> carrier_vec n\""], ["proof (prove)\nusing this:\n  set Ls \\<subseteq> X\n  X \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. set Ls \\<subseteq> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  set Ls \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. \\<exists>Ls.\n       lin_indpt_list Ls \\<and>\n       local.span (set Ls) = local.span X \\<and>\n       set Ls \\<subseteq> X \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n 2. \\<nexists>Ls.\n       lin_indpt_list Ls \\<and>\n       local.span (set Ls) = local.span X \\<and>\n       set Ls \\<subseteq> X \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "proof (cases \"X \\<subseteq> span (set Ls)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. X \\<subseteq> local.span (set Ls) \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n 2. \\<not> X \\<subseteq> local.span (set Ls) \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "case True"], ["proof (state)\nthis:\n  X \\<subseteq> local.span (set Ls)\n\ngoal (2 subgoals):\n 1. X \\<subseteq> local.span (set Ls) \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n 2. \\<not> X \\<subseteq> local.span (set Ls) \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "hence \"span X \\<subseteq> span (set Ls)\""], ["proof (prove)\nusing this:\n  X \\<subseteq> local.span (set Ls)\n\ngoal (1 subgoal):\n 1. local.span X \\<subseteq> local.span (set Ls)", "using LsC X"], ["proof (prove)\nusing this:\n  X \\<subseteq> local.span (set Ls)\n  set Ls \\<subseteq> carrier_vec n\n  X \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. local.span X \\<subseteq> local.span (set Ls)", "by (metis span_subsetI)"], ["proof (state)\nthis:\n  local.span X \\<subseteq> local.span (set Ls)\n\ngoal (2 subgoals):\n 1. X \\<subseteq> local.span (set Ls) \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n 2. \\<not> X \\<subseteq> local.span (set Ls) \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "with span"], ["proof (chain)\npicking this:\n  local.span (set Ls) \\<subseteq> local.span X\n  local.span X \\<subseteq> local.span (set Ls)", "have \"span (set Ls) = span X\""], ["proof (prove)\nusing this:\n  local.span (set Ls) \\<subseteq> local.span X\n  local.span X \\<subseteq> local.span (set Ls)\n\ngoal (1 subgoal):\n 1. local.span (set Ls) = local.span X", "by auto"], ["proof (state)\nthis:\n  local.span (set Ls) = local.span X\n\ngoal (2 subgoals):\n 1. X \\<subseteq> local.span (set Ls) \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n 2. \\<not> X \\<subseteq> local.span (set Ls) \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "hence ?T"], ["proof (prove)\nusing this:\n  local.span (set Ls) = local.span X\n\ngoal (1 subgoal):\n 1. \\<exists>Ls.\n       lin_indpt_list Ls \\<and>\n       local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X", "by (intro exI[of _ Ls] conjI True lin Ls)"], ["proof (state)\nthis:\n  \\<exists>Ls.\n     lin_indpt_list Ls \\<and>\n     local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X\n\ngoal (2 subgoals):\n 1. X \\<subseteq> local.span (set Ls) \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n 2. \\<not> X \\<subseteq> local.span (set Ls) \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>Ls.\n     lin_indpt_list Ls \\<and>\n     local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X\n\ngoal (1 subgoal):\n 1. (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) \\<subseteq> local.span X \\<and>\n      set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n\ngoal (1 subgoal):\n 1. \\<not> X \\<subseteq> local.span (set Ls) \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> X \\<subseteq> local.span (set Ls) \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "case False"], ["proof (state)\nthis:\n  \\<not> X \\<subseteq> local.span (set Ls)\n\ngoal (1 subgoal):\n 1. \\<not> X \\<subseteq> local.span (set Ls) \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "with span"], ["proof (chain)\npicking this:\n  local.span (set Ls) \\<subseteq> local.span X\n  \\<not> X \\<subseteq> local.span (set Ls)", "obtain x where xX: \"x \\<in> X\" and xSLs: \"x \\<notin> span (set Ls)\""], ["proof (prove)\nusing this:\n  local.span (set Ls) \\<subseteq> local.span X\n  \\<not> X \\<subseteq> local.span (set Ls)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> X; x \\<notin> local.span (set Ls)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> X\n  x \\<notin> local.span (set Ls)\n\ngoal (1 subgoal):\n 1. \\<not> X \\<subseteq> local.span (set Ls) \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "from Ls X"], ["proof (chain)\npicking this:\n  set Ls \\<subseteq> X\n  X \\<subseteq> carrier_vec n", "have LsC: \"set Ls \\<subseteq> carrier_vec n\""], ["proof (prove)\nusing this:\n  set Ls \\<subseteq> X\n  X \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. set Ls \\<subseteq> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  set Ls \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<not> X \\<subseteq> local.span (set Ls) \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "from span_mem[OF this, of x] xSLs"], ["proof (chain)\npicking this:\n  x \\<in> set Ls \\<Longrightarrow> x \\<in> local.span (set Ls)\n  x \\<notin> local.span (set Ls)", "have xLs: \"x \\<notin> set Ls\""], ["proof (prove)\nusing this:\n  x \\<in> set Ls \\<Longrightarrow> x \\<in> local.span (set Ls)\n  x \\<notin> local.span (set Ls)\n\ngoal (1 subgoal):\n 1. x \\<notin> set Ls", "by auto"], ["proof (state)\nthis:\n  x \\<notin> set Ls\n\ngoal (1 subgoal):\n 1. \\<not> X \\<subseteq> local.span (set Ls) \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "let ?Ls = \"x # Ls\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> X \\<subseteq> local.span (set Ls) \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "proof (intro disjI1 exI[of _ ?Ls] conjI)"], ["proof (state)\ngoal (4 subgoals):\n 1. lin_indpt_list (x # Ls)\n 2. local.span (set (x # Ls)) \\<subseteq> local.span X\n 3. set (x # Ls) \\<subseteq> X\n 4. length (x # Ls) = Suc k", "show \"length ?Ls = Suc k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (x # Ls) = Suc k", "using len"], ["proof (prove)\nusing this:\n  length Ls = k\n\ngoal (1 subgoal):\n 1. length (x # Ls) = Suc k", "by auto"], ["proof (state)\nthis:\n  length (x # Ls) = Suc k\n\ngoal (3 subgoals):\n 1. lin_indpt_list (x # Ls)\n 2. local.span (set (x # Ls)) \\<subseteq> local.span X\n 3. set (x # Ls) \\<subseteq> X", "show \"lin_indpt_list ?Ls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lin_indpt_list (x # Ls)", "using lin xSLs xLs"], ["proof (prove)\nusing this:\n  lin_indpt_list Ls\n  x \\<notin> local.span (set Ls)\n  x \\<notin> set Ls\n\ngoal (1 subgoal):\n 1. lin_indpt_list (x # Ls)", "unfolding lin_indpt_list_def"], ["proof (prove)\nusing this:\n  set Ls \\<subseteq> carrier_vec n \\<and>\n  distinct Ls \\<and> lin_indpt (set Ls)\n  x \\<notin> local.span (set Ls)\n  x \\<notin> set Ls\n\ngoal (1 subgoal):\n 1. set (x # Ls) \\<subseteq> carrier_vec n \\<and>\n    distinct (x # Ls) \\<and> lin_indpt (set (x # Ls))", "using lin_dep_iff_in_span[OF LsC _ _ xLs] xX X"], ["proof (prove)\nusing this:\n  set Ls \\<subseteq> carrier_vec n \\<and>\n  distinct Ls \\<and> lin_indpt (set Ls)\n  x \\<notin> local.span (set Ls)\n  x \\<notin> set Ls\n  \\<lbrakk>lin_indpt (set Ls); x \\<in> carrier_vec n\\<rbrakk>\n  \\<Longrightarrow> (x \\<in> local.span (set Ls)) =\n                    lin_dep (set Ls \\<union> {x})\n  x \\<in> X\n  X \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. set (x # Ls) \\<subseteq> carrier_vec n \\<and>\n    distinct (x # Ls) \\<and> lin_indpt (set (x # Ls))", "by auto"], ["proof (state)\nthis:\n  lin_indpt_list (x # Ls)\n\ngoal (2 subgoals):\n 1. local.span (set (x # Ls)) \\<subseteq> local.span X\n 2. set (x # Ls) \\<subseteq> X", "show \"set ?Ls \\<subseteq> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (x # Ls) \\<subseteq> X", "using xX Ls"], ["proof (prove)\nusing this:\n  x \\<in> X\n  set Ls \\<subseteq> X\n\ngoal (1 subgoal):\n 1. set (x # Ls) \\<subseteq> X", "by auto"], ["proof (state)\nthis:\n  set (x # Ls) \\<subseteq> X\n\ngoal (1 subgoal):\n 1. local.span (set (x # Ls)) \\<subseteq> local.span X", "from span_is_monotone[OF this]"], ["proof (chain)\npicking this:\n  local.span (set (x # Ls)) \\<subseteq> local.span X", "show \"span (set ?Ls) \\<subseteq> span X\""], ["proof (prove)\nusing this:\n  local.span (set (x # Ls)) \\<subseteq> local.span X\n\ngoal (1 subgoal):\n 1. local.span (set (x # Ls)) \\<subseteq> local.span X", "."], ["proof (state)\nthis:\n  local.span (set (x # Ls)) \\<subseteq> local.span X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) \\<subseteq> local.span X \\<and>\n      set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) \\<subseteq> local.span X \\<and>\n      set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n\ngoal (1 subgoal):\n 1. \\<exists>Ls.\n       lin_indpt_list Ls \\<and>\n       local.span (set Ls) = local.span X \\<and>\n       set Ls \\<subseteq> X \\<Longrightarrow>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) \\<subseteq> local.span X \\<and>\n        set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n    (\\<exists>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)", "qed auto"], ["proof (state)\nthis:\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) \\<subseteq> local.span X \\<and>\n      set Ls \\<subseteq> X \\<and> length Ls = Suc k) \\<or>\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) \\<subseteq> local.span X \\<and>\n      set Ls \\<subseteq> X \\<and> length Ls = ?k1) \\<or>\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n\ngoal (1 subgoal):\n 1. \\<exists>Ls.\n       lin_indpt_list Ls \\<and>\n       local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X", "from this[of \"n + 1\"] lin_indpt_list_length_le_n"], ["proof (chain)\npicking this:\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) \\<subseteq> local.span X \\<and>\n      set Ls \\<subseteq> X \\<and> length Ls = n + 1) \\<or>\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n  lin_indpt_list ?xs \\<Longrightarrow> length ?xs \\<le> n", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) \\<subseteq> local.span X \\<and>\n      set Ls \\<subseteq> X \\<and> length Ls = n + 1) \\<or>\n  (\\<exists>Ls.\n      lin_indpt_list Ls \\<and>\n      local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X)\n  lin_indpt_list ?xs \\<Longrightarrow> length ?xs \\<le> n\n\ngoal (1 subgoal):\n 1. \\<exists>Ls.\n       lin_indpt_list Ls \\<and>\n       local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>Ls.\n     lin_indpt_list Ls \\<and>\n     local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exists_lin_indpt_subset: assumes \"X \\<subseteq> carrier_vec n\"\n  shows \"\\<exists> Ls. lin_indpt Ls \\<and> span (Ls) = span X \\<and> Ls \\<subseteq> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Ls.\n       lin_indpt Ls \\<and>\n       local.span Ls = local.span X \\<and> Ls \\<subseteq> X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>Ls.\n       lin_indpt Ls \\<and>\n       local.span Ls = local.span X \\<and> Ls \\<subseteq> X", "from exists_lin_indpt_sublist[OF assms]"], ["proof (chain)\npicking this:\n  \\<exists>Ls.\n     lin_indpt_list Ls \\<and>\n     local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X", "obtain Ls where \"lin_indpt_list Ls \\<and> span (set Ls) = span X \\<and> set Ls \\<subseteq> X\""], ["proof (prove)\nusing this:\n  \\<exists>Ls.\n     lin_indpt_list Ls \\<and>\n     local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X\n\ngoal (1 subgoal):\n 1. (\\<And>Ls.\n        lin_indpt_list Ls \\<and>\n        local.span (set Ls) = local.span X \\<and>\n        set Ls \\<subseteq> X \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lin_indpt_list Ls \\<and>\n  local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X\n\ngoal (1 subgoal):\n 1. \\<exists>Ls.\n       lin_indpt Ls \\<and>\n       local.span Ls = local.span X \\<and> Ls \\<subseteq> X", "thus ?thesis"], ["proof (prove)\nusing this:\n  lin_indpt_list Ls \\<and>\n  local.span (set Ls) = local.span X \\<and> set Ls \\<subseteq> X\n\ngoal (1 subgoal):\n 1. \\<exists>Ls.\n       lin_indpt Ls \\<and>\n       local.span Ls = local.span X \\<and> Ls \\<subseteq> X", "by (intro exI[of _ \"set Ls\"], auto simp: lin_indpt_list_def)"], ["proof (state)\nthis:\n  \\<exists>Ls.\n     lin_indpt Ls \\<and>\n     local.span Ls = local.span X \\<and> Ls \\<subseteq> X\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}