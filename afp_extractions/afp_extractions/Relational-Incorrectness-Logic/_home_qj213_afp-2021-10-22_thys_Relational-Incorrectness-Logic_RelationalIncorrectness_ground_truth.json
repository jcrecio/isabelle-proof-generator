{"file_name": "/home/qj213/afp-2021-10-22/thys/Relational-Incorrectness-Logic/RelationalIncorrectness.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Relational-Incorrectness-Logic", "problem_names": ["lemma meh_simp[simp]: \"(SKIP, s') \\<Rightarrow> t' = (s' = t')\"", "lemma ir_pre: \"ir_hoare P c c' Q \\<Longrightarrow> (\\<And>s s'. P s s' \\<Longrightarrow> P' s s')  \\<Longrightarrow>\n                  ir_hoare P' c c' Q\"", "lemma ir_post: \"ir_hoare P c c' Q \\<Longrightarrow> (\\<And>s s'. Q' s s' \\<Longrightarrow> Q s s')  \\<Longrightarrow>\n                  ir_hoare P c c' Q'\"", "lemma Skip_ir_valid[intro]:\n  \"(\\<And>t t'. Q t t' \\<Longrightarrow> \\<exists>s'. P t s' \\<and> (c', s') \\<Rightarrow> t') \\<Longrightarrow> ir_valid P SKIP c' Q\"", "lemma sym_ir_valid[intro]:\n  \"ir_valid (flip P) c' c (flip Q) \\<Longrightarrow> ir_valid P c c' Q\"", "lemma If_True_ir_valid[intro]:\n  \"ir_valid (\\<lambda>a c. P a c \\<and> bval b a) c\\<^sub>1 c' Q \\<Longrightarrow>\n   ir_valid P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) c' Q\"", "lemma If_False_ir_valid[intro]:\n  \"ir_valid (\\<lambda>a c. P a c \\<and> \\<not> bval b a) c\\<^sub>2 c' Q \\<Longrightarrow>\n   ir_valid P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) c' Q\"", "lemma Seq1_ir_valid[intro]:\n  \"ir_valid P c c' Q \\<Longrightarrow> ir_valid Q d SKIP R \\<Longrightarrow> ir_valid P (c;; d) c' R\"", "lemma Seq2_ir_valid[intro]:\n  \"ir_valid P c SKIP Q \\<Longrightarrow> ir_valid Q d c' R \\<Longrightarrow> ir_valid P (c;; d) c' R\"", "lemma Seq_ir_valid[intro]:\n  \"ir_valid P c c' Q \\<Longrightarrow> ir_valid Q d d' R \\<Longrightarrow> ir_valid P (c;; d) (c';; d') R\"", "lemma Assign_blah[intro]:\n  \"t x = aval e (t(x := v))\n       \\<Longrightarrow> (x ::= e, t(x := v)) \\<Rightarrow> t\"", "lemma Assign_ir_valid[intro]:\n  \"ir_valid (\\<lambda>t t'. \\<exists> v. P (t(x := v)) t' \\<and> (t x) = aval e (t(x := v))) SKIP c' Q \\<Longrightarrow> ir_valid P (Assign x e) c' Q\"", "lemma While_False_ir_valid[intro]:\n  \"ir_valid (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s) SKIP c' Q \\<Longrightarrow>\n   ir_valid P (WHILE b DO c) c' Q\"", "lemma While_True_ir_valid[intro]:\n  \"ir_valid (\\<lambda>s s'. P s s' \\<and> bval b s) (Seq c (WHILE b DO c)) c' Q \\<Longrightarrow>\n   ir_valid P (WHILE b DO c) c' Q\"", "lemma While_backwards_frontier_ir_valid':\n  assumes asm: \"\\<And>n. \\<forall>t t'. P (k + Suc n) t t' \\<longrightarrow>\n                    (\\<exists>s. P (k + n) s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t)\"\n  assumes last: \"\\<forall>t t'. Q t t' \\<longrightarrow> (\\<exists>s s'. (\\<exists>n. P (k + n) s s') \\<and> (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t')\"\n  assumes post: \"Q t t'\"\n  shows \"\\<exists>s s'. P k s s' \\<and> (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'\"", "lemma While_backwards_frontier_ir_valid[intro]:\n  \"(\\<And>n. ir_valid (\\<lambda> s s'. P n s s' \\<and> bval b s) c SKIP (P (Suc n))) \\<Longrightarrow>\n   ir_valid (\\<lambda>s s'. \\<exists>n. P n s s') (WHILE b DO c) c' Q \\<Longrightarrow>\n   ir_valid (P 0) (WHILE b DO c) c' Q\"", "lemma conseq_ir_valid:\n  \"ir_valid P c c' Q \\<Longrightarrow> (\\<And>s s'. P s s' \\<Longrightarrow> P' s s') \\<Longrightarrow> (\\<And>s s'. Q' s s' \\<Longrightarrow> Q s s') \\<Longrightarrow>\n                  ir_valid P' c c' Q'\"", "lemma disj_ir_valid[intro]:\n  \"ir_valid P\\<^sub>1 c c' Q\\<^sub>1 \\<Longrightarrow> ir_valid P\\<^sub>2 c c' Q\\<^sub>2 \\<Longrightarrow>\n                  ir_valid (\\<lambda>s s'. P\\<^sub>1 s s' \\<or> P\\<^sub>2 s s') c c' (\\<lambda> t t'. Q\\<^sub>1 t t' \\<or> Q\\<^sub>2 t t')\"", "theorem soundness:\n  \"ir_hoare P c c' Q \\<Longrightarrow> ir_valid P c c' Q\"", "lemma ir_Skip_Skip[intro]:\n  \"ir_hoare P SKIP SKIP P\"", "lemma ir_hoare_Skip_Skip[simp]:\n  \"ir_hoare P SKIP SKIP Q = (\\<forall>s s'. Q s s' \\<longrightarrow> P s s')\"", "lemma ir_valid_Seq1:\n  \"ir_valid P (c1;; c2) c' Q \\<Longrightarrow> ir_valid P c1 c' (\\<lambda>t t'. \\<exists>s s'. P s s' \\<and> (c1,s) \\<Rightarrow> t \\<and> (c',s') \\<Rightarrow> t' \\<and> (\\<exists>u. (c2,t) \\<Rightarrow> u \\<and> Q u t'))\"", "lemma ir_valid_Seq1':\n  \"ir_valid P (c1;; c2) c' Q \\<Longrightarrow> ir_valid (\\<lambda>t t'. \\<exists>s s'. P s s' \\<and> (c1,s) \\<Rightarrow> t \\<and> (c',s') \\<Rightarrow> t' \\<and> (\\<exists>u. (c2,t) \\<Rightarrow> u \\<and> Q u t')) c2 SKIP Q\"", "lemma ir_valid_track_history:\n  \"ir_valid P c c' Q \\<Longrightarrow>\n   ir_valid P c c' (\\<lambda>t t'. Q s s' \\<and> (\\<exists>s s'. P s s' \\<and> (c,s) \\<Rightarrow> t \\<and> (c',s') \\<Rightarrow> t'))\"", "lemma ir_valid_If:\n  \"ir_valid (\\<lambda>s s'. P s s') (IF b THEN c1 ELSE c2) c' Q \\<Longrightarrow>\n   ir_valid (\\<lambda>s s'. P s s' \\<and> bval b s) c1 c' (\\<lambda>t t'. Q t t' \\<and> (\\<exists>s s'. P s s' \\<and> (c1,s) \\<Rightarrow> t \\<and> (c',s') \\<Rightarrow> t' \\<and> bval b s)) \\<and>\n   ir_valid (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s) c2 c' (\\<lambda>t t'. Q t t' \\<and> (\\<exists>s s'. P s s' \\<and> (c2,s) \\<Rightarrow> t \\<and> (c',s') \\<Rightarrow> t' \\<and> \\<not> bval b s))\"", "lemma ir_valid_get_back:\n  \"ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q \\<Longrightarrow>\n   ir_valid (get_back P b c k) (WHILE b DO c) c' Q\"", "lemma ir_valid_While1:\n  \"ir_valid (get_back P b c k) (WHILE b DO c) c' Q \\<Longrightarrow>\n   (ir_valid (\\<lambda>s s'. get_back P b c k s s' \\<and> bval b s) c SKIP (\\<lambda>t t'. get_back P b c (Suc k) t t' \\<and> (\\<exists>u u'. (WHILE b DO c,t) \\<Rightarrow> u \\<and> (c',t') \\<Rightarrow> u' \\<and> Q u u')))\"", "lemma ir_valid_While3:\n  \"ir_valid (get_back P b c k) (WHILE b DO c) c' Q \\<Longrightarrow>\n   (ir_valid (\\<lambda>s s'. get_back P b c k s s' \\<and> bval b s) c c' (\\<lambda>t t'. (\\<exists>s'. (c',s') \\<Rightarrow> t' \\<and> get_back P b c (Suc k) t s' \\<and> (\\<exists>u. (WHILE b DO c,t) \\<Rightarrow> u \\<and>  Q u t'))))\"", "lemma ir_valid_While2:\n   \"ir_valid P (WHILE b DO c) c' Q \\<Longrightarrow>\n   ir_valid (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s) SKIP c' (\\<lambda>t t'. Q t t' \\<and> (\\<exists>s'. (c',s') \\<Rightarrow> t' \\<and> P t s' \\<and> \\<not> bval b t))\"", "lemma assign_upd_blah:\n  \"(\\<lambda>a. if a = x1 then s x1 else (s(x1 := aval x2 s)) a) = s\"", "lemma Assign_complete:\n  assumes v: \"ir_valid P (x1 ::= x2) c' Q\"\n  assumes q: \"Q t t'\"\n  shows  \"\\<exists>s'. (\\<exists>v. P (t(x1 := v)) s' \\<and> t x1 = aval x2 (t(x1 := v))) \\<and> (c', s') \\<Rightarrow> t'\"", "lemmas ir_Skip_sym = ir_sym[OF ir_Skip, simplified flip_def]", "theorem completeness:\n  \"ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q\"", "lemma ir_valid_decomp1:\n  \"ir_valid P c c' Q \\<Longrightarrow> ir_valid P c SKIP (decomp P c c' Q) \\<and> ir_valid (decomp P c c' Q) SKIP c' Q\"", "lemma ir_valid_decomp2:\n  \"ir_valid P c SKIP R \\<and> ir_valid R SKIP c' Q \\<Longrightarrow> ir_valid P c c' Q\"", "lemma ir_valid_decomp:\n  \"ir_valid P c c' Q = (ir_valid P c SKIP (decomp P c c' Q) \\<and> ir_valid (decomp P c c' Q) SKIP c' Q)\"", "lemma ir_to_Skip:     \n  \"ir_hoare P c c' Q = (ir_hoare P c SKIP (decomp P c c' Q) \\<and> ir_hoare (decomp P c c' Q) SKIP c' Q)\"", "lemma fold_ohearn1:\n  \"ir_valid P c SKIP Q = (\\<forall>t'. ohearn (\\<lambda>t. P t t') c (\\<lambda>t. Q t t'))\"", "lemma fold_ohearn2:\n  \"ir_valid P SKIP c' Q = (\\<forall>t. ohearn (P t) c' (Q t))\"", "theorem relational_via_hoare:\n  \"ir_hoare P c c' Q = ((\\<forall>t'. ohearn (\\<lambda>t. P t t') c (\\<lambda>t. decomp P c c' Q t t')) \\<and> (\\<forall>t. ohearn (decomp P c c' Q t) c' (Q t)))\"", "lemma ir_Seq2: \n  \"ir_hoare P c SKIP Q \\<Longrightarrow> ir_hoare Q d c' R \\<Longrightarrow> ir_hoare P (Seq c d) c' R\"", "lemma ir_Seq: \n  \"ir_hoare P c c' Q \\<Longrightarrow> ir_hoare Q d d' R \\<Longrightarrow> ir_hoare P (Seq c d) (Seq c' d') R\"", "lemma ir_If_True_False:   \n  \"ir_hoare (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> \\<not> bval b' s') c\\<^sub>1 c\\<^sub>2' Q \\<Longrightarrow> \n   ir_hoare P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) (IF b' THEN c\\<^sub>1' ELSE c\\<^sub>2') Q\"", "lemma ir_Assign_Assign:\n  \"ir_hoare P (x ::= e) (x' ::= e') (\\<lambda>t t'. \\<exists>v v'. P (t(x := v)) (t'(x' := v')) \\<and> t x = aval e (t(x := v)) \\<and> t' x' = aval e' (t'(x' := v')))\"", "lemma prog1:\n  \"\\<exists>Q. ir_hoare low_eq prog1 prog1 Q \\<and> (\\<forall>s s'. Q s s' \\<longrightarrow> low_neq s s') \\<and> nontrivial Q\"", "lemma BEq_aval[simp]: \n  \"bval (BEq a b) s = ((aval a s) = (aval b s))\"", "lemma ir_If_True_True:\n  \"ir_hoare (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s') c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1 \\<Longrightarrow>\n   ir_hoare P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) (IF b' THEN c\\<^sub>1' ELSE c\\<^sub>2') (\\<lambda>t t'. Q\\<^sub>1 t t')\"", "lemma ir_If_False_False:\n  \"ir_hoare (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s') c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2 \\<Longrightarrow>\n   ir_hoare P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) (IF b' THEN c\\<^sub>1' ELSE c\\<^sub>2') (\\<lambda>t t'. Q\\<^sub>2 t t')\"", "lemma ir_If':\n  \"ir_hoare (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s') c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1 \\<Longrightarrow>\n   ir_hoare (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s') c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2 \\<Longrightarrow>\n   ir_hoare P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) (IF b' THEN c\\<^sub>1' ELSE c\\<^sub>2') (\\<lambda>t t'. Q\\<^sub>1 t t' \\<or> Q\\<^sub>2 t t')\"", "lemma ir_While_triv:\n  \"ir_hoare (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s') SKIP SKIP Q\\<^sub>2 \\<Longrightarrow>\n   ir_hoare P (WHILE b DO c) (WHILE b' DO c') (\\<lambda>s s'. (Q\\<^sub>2 s s'))\"", "lemma ir_While':\n  \"ir_hoare (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s') (c;;WHILE b DO c) (c';;WHILE b' DO c') Q\\<^sub>1 \\<Longrightarrow>\n   ir_hoare (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s') SKIP SKIP Q\\<^sub>2 \\<Longrightarrow>\n   ir_hoare P (WHILE b DO c) (WHILE b' DO c') (\\<lambda>s s'. (Q\\<^sub>1 s s' \\<or> Q\\<^sub>2 s s'))\"", "lemma low_eq_strong_upd[simp]:\n  \"var \\<noteq> ''high'' \\<and> var \\<noteq> ''low'' \\<Longrightarrow> low_eq_strong(s(var := v)) (s'(var := v')) = low_eq_strong s s'\"", "lemma client0:\n  \"\\<exists>Q. ir_hoare low_eq client0 client0 Q \\<and> (\\<forall>s s'. Q s s' \\<longrightarrow> low_neq s s') \\<and> nontrivial Q\"", "lemma ir_While_backwards:\n  \"(\\<And>n. ir_hoare (\\<lambda> s s'. P n s s' \\<and> bval b s) c SKIP (P (Suc n))) \\<Longrightarrow>\n                       ir_hoare (\\<lambda>s s'. \\<exists>n. P n s s' \\<and> \\<not> bval b s) SKIP c' Q \\<Longrightarrow>\n                       ir_hoare (P 0) (WHILE b DO c) c' Q\"", "lemma While_backwards_frontier_both_ir_valid':\n  assumes asm: \"\\<And>n. \\<forall>t t'. P (k + Suc n) t t' \\<longrightarrow>\n                    (\\<exists>s s'. P (k + n) s s' \\<and> bval b s \\<and> bval b' s' \\<and> (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t')\"\n  assumes last: \"\\<forall>t t'. Q t t' \\<longrightarrow> (\\<exists>s s'. (\\<exists>n. P (k + n) s s') \\<and> (WHILE b DO c, s) \\<Rightarrow> t \\<and> (WHILE b' DO c', s') \\<Rightarrow> t')\"\n  assumes post: \"Q t t'\"\n  shows \"\\<exists>s s'. P k s s' \\<and> (WHILE b DO c, s) \\<Rightarrow> t \\<and> (WHILE b' DO c', s') \\<Rightarrow> t'\"", "lemma While_backwards_frontier_both_ir_valid[intro]:\n  \"(\\<And>n. ir_valid (\\<lambda> s s'. P n s s' \\<and> bval b s \\<and> bval b' s') c c' (P (Suc n))) \\<Longrightarrow>\n   ir_valid (\\<lambda>s s'. \\<exists>n. P n s s') (WHILE b DO c) (WHILE b' DO c') Q \\<Longrightarrow>\n   ir_valid (P 0) (WHILE b DO c) (WHILE b' DO c') (\\<lambda>s s'. Q s s')\"", "lemma ir_While_backwards_frontier_both:\n  \"\\<lbrakk>\\<And>n. ir_hoare (\\<lambda>s s'. P n s s' \\<and> bval b s \\<and> bval b' s') c c' (P (Suc n));\n   ir_hoare (\\<lambda>s s'. \\<exists>n. P n s s') (WHILE b DO c) (WHILE b' DO c') Q\\<rbrakk>\n   \\<Longrightarrow> ir_hoare (P 0) (WHILE b DO c) (WHILE b' DO c') (\\<lambda>s s'. Q s s')\"", "lemma ir_While_backwards_both:\n  \"(\\<And>n. ir_hoare (\\<lambda> s s'. P n s s' \\<and> bval b s \\<and> bval b' s') c c' (P (Suc n))) \\<Longrightarrow>\n                       ir_hoare (P 0) (WHILE b DO c) (WHILE b' DO c') (\\<lambda>s s'. \\<exists>n. P n s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\"", "lemma client1:\n  \"\\<exists>Q. ir_hoare low_eq client1 client1 Q \\<and> (\\<forall>s s'. Q s s' \\<longrightarrow> low_neq s s') \\<and> nontrivial Q\"", "lemma client2:\n  \"\\<exists>Q. ir_hoare low_eq client2 client2 Q \\<and> (\\<forall>s s'. Q s s' \\<longrightarrow> low_neq s s') \\<and> nontrivial Q\""], "translations": [["", "lemma meh_simp[simp]: \"(SKIP, s') \\<Rightarrow> t' = (s' = t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SKIP, s') \\<Rightarrow> t' = (s' = t')", "by auto"], ["", "lemma ir_pre: \"ir_hoare P c c' Q \\<Longrightarrow> (\\<And>s s'. P s s' \\<Longrightarrow> P' s s')  \\<Longrightarrow>\n                  ir_hoare P' c c' Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ir_hoare P c c' Q;\n     \\<And>s s'. P s s' \\<Longrightarrow> P' s s'\\<rbrakk>\n    \\<Longrightarrow> ir_hoare P' c c' Q", "by(erule ir_conseq, blast+)"], ["", "lemma ir_post: \"ir_hoare P c c' Q \\<Longrightarrow> (\\<And>s s'. Q' s s' \\<Longrightarrow> Q s s')  \\<Longrightarrow>\n                  ir_hoare P c c' Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ir_hoare P c c' Q;\n     \\<And>s s'. Q' s s' \\<Longrightarrow> Q s s'\\<rbrakk>\n    \\<Longrightarrow> ir_hoare P c c' Q'", "by(erule ir_conseq, blast+)"], ["", "section \"Soundness\""], ["", "lemma Skip_ir_valid[intro]:\n  \"(\\<And>t t'. Q t t' \\<Longrightarrow> \\<exists>s'. P t s' \\<and> (c', s') \\<Rightarrow> t') \\<Longrightarrow> ir_valid P SKIP c' Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t t'.\n        Q t t' \\<Longrightarrow>\n        \\<exists>s'.\n           P t s' \\<and> (c', s') \\<Rightarrow> t') \\<Longrightarrow>\n    ir_valid P SKIP c' Q", "by(auto simp: ir_valid_def)"], ["", "lemma sym_ir_valid[intro]:\n  \"ir_valid (flip P) c' c (flip Q) \\<Longrightarrow> ir_valid P c c' Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid (flip P) c' c (flip Q) \\<Longrightarrow> ir_valid P c c' Q", "by(fastforce simp: ir_valid_def flip_def)"], ["", "lemma If_True_ir_valid[intro]:\n  \"ir_valid (\\<lambda>a c. P a c \\<and> bval b a) c\\<^sub>1 c' Q \\<Longrightarrow>\n   ir_valid P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) c' Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid (\\<lambda>a c. P a c \\<and> bval b a) c\\<^sub>1 c'\n     Q \\<Longrightarrow>\n    ir_valid P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) c' Q", "by(fastforce simp: ir_valid_def)"], ["", "lemma If_False_ir_valid[intro]:\n  \"ir_valid (\\<lambda>a c. P a c \\<and> \\<not> bval b a) c\\<^sub>2 c' Q \\<Longrightarrow>\n   ir_valid P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) c' Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid (\\<lambda>a c. P a c \\<and> \\<not> bval b a) c\\<^sub>2 c'\n     Q \\<Longrightarrow>\n    ir_valid P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) c' Q", "by(fastforce simp: ir_valid_def)"], ["", "lemma Seq1_ir_valid[intro]:\n  \"ir_valid P c c' Q \\<Longrightarrow> ir_valid Q d SKIP R \\<Longrightarrow> ir_valid P (c;; d) c' R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ir_valid P c c' Q; ir_valid Q d SKIP R\\<rbrakk>\n    \\<Longrightarrow> ir_valid P (c;; d) c' R", "by(fastforce simp: ir_valid_def)"], ["", "lemma Seq2_ir_valid[intro]:\n  \"ir_valid P c SKIP Q \\<Longrightarrow> ir_valid Q d c' R \\<Longrightarrow> ir_valid P (c;; d) c' R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ir_valid P c SKIP Q; ir_valid Q d c' R\\<rbrakk>\n    \\<Longrightarrow> ir_valid P (c;; d) c' R", "by(fastforce simp: ir_valid_def)"], ["", "lemma Seq_ir_valid[intro]:\n  \"ir_valid P c c' Q \\<Longrightarrow> ir_valid Q d d' R \\<Longrightarrow> ir_valid P (c;; d) (c';; d') R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ir_valid P c c' Q; ir_valid Q d d' R\\<rbrakk>\n    \\<Longrightarrow> ir_valid P (c;; d) (c';; d') R", "by(fastforce simp: ir_valid_def)"], ["", "lemma Assign_blah[intro]:\n  \"t x = aval e (t(x := v))\n       \\<Longrightarrow> (x ::= e, t(x := v)) \\<Rightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t x = aval e (t(x := v)) \\<Longrightarrow>\n    (x ::= e, t(x := v)) \\<Rightarrow> t", "using Assign"], ["proof (prove)\nusing this:\n  (?x ::= ?a, ?s) \\<Rightarrow> ?s(?x := aval ?a ?s)\n\ngoal (1 subgoal):\n 1. t x = aval e (t(x := v)) \\<Longrightarrow>\n    (x ::= e, t(x := v)) \\<Rightarrow> t", "by (metis fun_upd_triv fun_upd_upd)"], ["", "lemma Assign_ir_valid[intro]:\n  \"ir_valid (\\<lambda>t t'. \\<exists> v. P (t(x := v)) t' \\<and> (t x) = aval e (t(x := v))) SKIP c' Q \\<Longrightarrow> ir_valid P (Assign x e) c' Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid\n     (\\<lambda>t t'.\n         \\<exists>v. P (t(x := v)) t' \\<and> t x = aval e (t(x := v)))\n     SKIP c' Q \\<Longrightarrow>\n    ir_valid P (x ::= e) c' Q", "by(fastforce simp: ir_valid_def)"], ["", "lemma While_False_ir_valid[intro]:\n  \"ir_valid (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s) SKIP c' Q \\<Longrightarrow>\n   ir_valid P (WHILE b DO c) c' Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s) SKIP c'\n     Q \\<Longrightarrow>\n    ir_valid P (WHILE b DO c) c' Q", "by(fastforce simp: ir_valid_def)"], ["", "lemma While_True_ir_valid[intro]:\n  \"ir_valid (\\<lambda>s s'. P s s' \\<and> bval b s) (Seq c (WHILE b DO c)) c' Q \\<Longrightarrow>\n   ir_valid P (WHILE b DO c) c' Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid (\\<lambda>s s'. P s s' \\<and> bval b s) (c;; WHILE b DO c) c'\n     Q \\<Longrightarrow>\n    ir_valid P (WHILE b DO c) c' Q", "by(clarsimp simp: ir_valid_def, blast)"], ["", "lemma While_backwards_frontier_ir_valid':\n  assumes asm: \"\\<And>n. \\<forall>t t'. P (k + Suc n) t t' \\<longrightarrow>\n                    (\\<exists>s. P (k + n) s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t)\"\n  assumes last: \"\\<forall>t t'. Q t t' \\<longrightarrow> (\\<exists>s s'. (\\<exists>n. P (k + n) s s') \\<and> (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t')\"\n  assumes post: \"Q t t'\"\n  shows \"\\<exists>s s'. P k s s' \\<and> (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s s'.\n       P k s s' \\<and>\n       (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s s'.\n       P k s s' \\<and>\n       (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'", "from post last"], ["proof (chain)\npicking this:\n  Q t t'\n  \\<forall>t t'.\n     Q t t' \\<longrightarrow>\n     (\\<exists>s s'.\n         (\\<exists>n. P (k + n) s s') \\<and>\n         (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t')", "obtain s s' n where \n    \"P (k + n) s s'\" \"(WHILE b DO c, s) \\<Rightarrow> t\" \"(c', s') \\<Rightarrow> t'\""], ["proof (prove)\nusing this:\n  Q t t'\n  \\<forall>t t'.\n     Q t t' \\<longrightarrow>\n     (\\<exists>s s'.\n         (\\<exists>n. P (k + n) s s') \\<and>\n         (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t')\n\ngoal (1 subgoal):\n 1. (\\<And>n s s'.\n        \\<lbrakk>P (k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n         (c', s') \\<Rightarrow> t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  P (k + n) s s'\n  (WHILE b DO c, s) \\<Rightarrow> t\n  (c', s') \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<exists>s s'.\n       P k s s' \\<and>\n       (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'", "with asm"], ["proof (chain)\npicking this:\n  \\<forall>t t'.\n     P (k + Suc ?n) t t' \\<longrightarrow>\n     (\\<exists>s.\n         P (k + ?n) s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t)\n  P (k + n) s s'\n  (WHILE b DO c, s) \\<Rightarrow> t\n  (c', s') \\<Rightarrow> t'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>t t'.\n     P (k + Suc ?n) t t' \\<longrightarrow>\n     (\\<exists>s.\n         P (k + ?n) s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t)\n  P (k + n) s s'\n  (WHILE b DO c, s) \\<Rightarrow> t\n  (c', s') \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<exists>s s'.\n       P k s s' \\<and>\n       (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'", "proof(induction n arbitrary: k t t')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k t t'.\n       \\<lbrakk>\\<And>n.\n                   \\<forall>t t'.\n                      P (k + Suc n) t t' \\<longrightarrow>\n                      (\\<exists>s.\n                          P (k + n) s t' \\<and>\n                          bval b s \\<and> (c, s) \\<Rightarrow> t);\n        P (k + 0) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n        (c', s') \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            P k s s' \\<and>\n                            (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'\n 2. \\<And>n k t t'.\n       \\<lbrakk>\\<And>k t t'.\n                   \\<lbrakk>\\<And>n.\n                               \\<forall>t t'.\n                                  P (k + Suc n) t t' \\<longrightarrow>\n                                  (\\<exists>s.\nP (k + n) s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t);\n                    P (k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n                    (c', s') \\<Rightarrow> t'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s s'.\n  P k s s' \\<and>\n  (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t';\n        \\<And>n.\n           \\<forall>t t'.\n              P (k + Suc n) t t' \\<longrightarrow>\n              (\\<exists>s.\n                  P (k + n) s t' \\<and>\n                  bval b s \\<and> (c, s) \\<Rightarrow> t);\n        P (k + Suc n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n        (c', s') \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            P k s s' \\<and>\n                            (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'", "case 0"], ["proof (state)\nthis:\n  \\<forall>t t'.\n     P (k + Suc ?n) t t' \\<longrightarrow>\n     (\\<exists>s.\n         P (k + ?n) s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t)\n  P (k + 0) s s'\n  (WHILE b DO c, s) \\<Rightarrow> t\n  (c', s') \\<Rightarrow> t'\n\ngoal (2 subgoals):\n 1. \\<And>k t t'.\n       \\<lbrakk>\\<And>n.\n                   \\<forall>t t'.\n                      P (k + Suc n) t t' \\<longrightarrow>\n                      (\\<exists>s.\n                          P (k + n) s t' \\<and>\n                          bval b s \\<and> (c, s) \\<Rightarrow> t);\n        P (k + 0) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n        (c', s') \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            P k s s' \\<and>\n                            (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'\n 2. \\<And>n k t t'.\n       \\<lbrakk>\\<And>k t t'.\n                   \\<lbrakk>\\<And>n.\n                               \\<forall>t t'.\n                                  P (k + Suc n) t t' \\<longrightarrow>\n                                  (\\<exists>s.\nP (k + n) s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t);\n                    P (k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n                    (c', s') \\<Rightarrow> t'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s s'.\n  P k s s' \\<and>\n  (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t';\n        \\<And>n.\n           \\<forall>t t'.\n              P (k + Suc n) t t' \\<longrightarrow>\n              (\\<exists>s.\n                  P (k + n) s t' \\<and>\n                  bval b s \\<and> (c, s) \\<Rightarrow> t);\n        P (k + Suc n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n        (c', s') \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            P k s s' \\<and>\n                            (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'", "then"], ["proof (chain)\npicking this:\n  \\<forall>t t'.\n     P (k + Suc ?n) t t' \\<longrightarrow>\n     (\\<exists>s.\n         P (k + ?n) s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t)\n  P (k + 0) s s'\n  (WHILE b DO c, s) \\<Rightarrow> t\n  (c', s') \\<Rightarrow> t'", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>t t'.\n     P (k + Suc ?n) t t' \\<longrightarrow>\n     (\\<exists>s.\n         P (k + ?n) s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t)\n  P (k + 0) s s'\n  (WHILE b DO c, s) \\<Rightarrow> t\n  (c', s') \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<exists>s s'.\n       P k s s' \\<and>\n       (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'", "by (metis WhileFalse WhileTrue add.right_neutral)"], ["proof (state)\nthis:\n  \\<exists>s s'.\n     P k s s' \\<and>\n     (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<And>n k t t'.\n       \\<lbrakk>\\<And>k t t'.\n                   \\<lbrakk>\\<And>n.\n                               \\<forall>t t'.\n                                  P (k + Suc n) t t' \\<longrightarrow>\n                                  (\\<exists>s.\nP (k + n) s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t);\n                    P (k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n                    (c', s') \\<Rightarrow> t'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s s'.\n  P k s s' \\<and>\n  (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t';\n        \\<And>n.\n           \\<forall>t t'.\n              P (k + Suc n) t t' \\<longrightarrow>\n              (\\<exists>s.\n                  P (k + n) s t' \\<and>\n                  bval b s \\<and> (c, s) \\<Rightarrow> t);\n        P (k + Suc n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n        (c', s') \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            P k s s' \\<and>\n                            (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n k t t'.\n       \\<lbrakk>\\<And>k t t'.\n                   \\<lbrakk>\\<And>n.\n                               \\<forall>t t'.\n                                  P (k + Suc n) t t' \\<longrightarrow>\n                                  (\\<exists>s.\nP (k + n) s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t);\n                    P (k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n                    (c', s') \\<Rightarrow> t'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s s'.\n  P k s s' \\<and>\n  (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t';\n        \\<And>n.\n           \\<forall>t t'.\n              P (k + Suc n) t t' \\<longrightarrow>\n              (\\<exists>s.\n                  P (k + n) s t' \\<and>\n                  bval b s \\<and> (c, s) \\<Rightarrow> t);\n        P (k + Suc n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n        (c', s') \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            P k s s' \\<and>\n                            (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>n.\n              \\<forall>t t'.\n                 P (?k + Suc n) t t' \\<longrightarrow>\n                 (\\<exists>s.\n                     P (?k + n) s t' \\<and>\n                     bval b s \\<and> (c, s) \\<Rightarrow> t);\n   P (?k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> ?t;\n   (c', s') \\<Rightarrow> ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s s'.\n                       P ?k s s' \\<and>\n                       (WHILE b DO c, s) \\<Rightarrow> ?t \\<and>\n                       (c', s') \\<Rightarrow> ?t'\n  \\<forall>t t'.\n     P (k + Suc ?n) t t' \\<longrightarrow>\n     (\\<exists>s.\n         P (k + ?n) s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t)\n  P (k + Suc n) s s'\n  (WHILE b DO c, s) \\<Rightarrow> t\n  (c', s') \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<And>n k t t'.\n       \\<lbrakk>\\<And>k t t'.\n                   \\<lbrakk>\\<And>n.\n                               \\<forall>t t'.\n                                  P (k + Suc n) t t' \\<longrightarrow>\n                                  (\\<exists>s.\nP (k + n) s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t);\n                    P (k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n                    (c', s') \\<Rightarrow> t'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s s'.\n  P k s s' \\<and>\n  (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t';\n        \\<And>n.\n           \\<forall>t t'.\n              P (k + Suc n) t t' \\<longrightarrow>\n              (\\<exists>s.\n                  P (k + n) s t' \\<and>\n                  bval b s \\<and> (c, s) \\<Rightarrow> t);\n        P (k + Suc n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n        (c', s') \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            P k s s' \\<and>\n                            (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'", "from Suc"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>n.\n              \\<forall>t t'.\n                 P (?k + Suc n) t t' \\<longrightarrow>\n                 (\\<exists>s.\n                     P (?k + n) s t' \\<and>\n                     bval b s \\<and> (c, s) \\<Rightarrow> t);\n   P (?k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> ?t;\n   (c', s') \\<Rightarrow> ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s s'.\n                       P ?k s s' \\<and>\n                       (WHILE b DO c, s) \\<Rightarrow> ?t \\<and>\n                       (c', s') \\<Rightarrow> ?t'\n  \\<forall>t t'.\n     P (k + Suc ?n) t t' \\<longrightarrow>\n     (\\<exists>s.\n         P (k + ?n) s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t)\n  P (k + Suc n) s s'\n  (WHILE b DO c, s) \\<Rightarrow> t\n  (c', s') \\<Rightarrow> t'", "obtain r r' where final_iteration: \"P (Suc k) r r'\" \"(WHILE b DO c, r) \\<Rightarrow> t\" \"(c', r') \\<Rightarrow> t'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>n.\n              \\<forall>t t'.\n                 P (?k + Suc n) t t' \\<longrightarrow>\n                 (\\<exists>s.\n                     P (?k + n) s t' \\<and>\n                     bval b s \\<and> (c, s) \\<Rightarrow> t);\n   P (?k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> ?t;\n   (c', s') \\<Rightarrow> ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s s'.\n                       P ?k s s' \\<and>\n                       (WHILE b DO c, s) \\<Rightarrow> ?t \\<and>\n                       (c', s') \\<Rightarrow> ?t'\n  \\<forall>t t'.\n     P (k + Suc ?n) t t' \\<longrightarrow>\n     (\\<exists>s.\n         P (k + ?n) s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t)\n  P (k + Suc n) s s'\n  (WHILE b DO c, s) \\<Rightarrow> t\n  (c', s') \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. (\\<And>r r'.\n        \\<lbrakk>P (Suc k) r r'; (WHILE b DO c, r) \\<Rightarrow> t;\n         (c', r') \\<Rightarrow> t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis add_Suc_shift)"], ["proof (state)\nthis:\n  P (Suc k) r r'\n  (WHILE b DO c, r) \\<Rightarrow> t\n  (c', r') \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<And>n k t t'.\n       \\<lbrakk>\\<And>k t t'.\n                   \\<lbrakk>\\<And>n.\n                               \\<forall>t t'.\n                                  P (k + Suc n) t t' \\<longrightarrow>\n                                  (\\<exists>s.\nP (k + n) s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t);\n                    P (k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n                    (c', s') \\<Rightarrow> t'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s s'.\n  P k s s' \\<and>\n  (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t';\n        \\<And>n.\n           \\<forall>t t'.\n              P (k + Suc n) t t' \\<longrightarrow>\n              (\\<exists>s.\n                  P (k + n) s t' \\<and>\n                  bval b s \\<and> (c, s) \\<Rightarrow> t);\n        P (k + Suc n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n        (c', s') \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            P k s s' \\<and>\n                            (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'", "from final_iteration(1)"], ["proof (chain)\npicking this:\n  P (Suc k) r r'", "obtain q q' where\n     \"P k q r' \\<and> bval b q \\<and>  (c, q) \\<Rightarrow> r\""], ["proof (prove)\nusing this:\n  P (Suc k) r r'\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        P k q r' \\<and>\n        bval b q \\<and> (c, q) \\<Rightarrow> r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis Nat.add_0_right Suc.prems(1) plus_1_eq_Suc semiring_normalization_rules(24))"], ["proof (state)\nthis:\n  P k q r' \\<and> bval b q \\<and> (c, q) \\<Rightarrow> r\n\ngoal (1 subgoal):\n 1. \\<And>n k t t'.\n       \\<lbrakk>\\<And>k t t'.\n                   \\<lbrakk>\\<And>n.\n                               \\<forall>t t'.\n                                  P (k + Suc n) t t' \\<longrightarrow>\n                                  (\\<exists>s.\nP (k + n) s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t);\n                    P (k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n                    (c', s') \\<Rightarrow> t'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s s'.\n  P k s s' \\<and>\n  (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t';\n        \\<And>n.\n           \\<forall>t t'.\n              P (k + Suc n) t t' \\<longrightarrow>\n              (\\<exists>s.\n                  P (k + n) s t' \\<and>\n                  bval b s \\<and> (c, s) \\<Rightarrow> t);\n        P (k + Suc n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n        (c', s') \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            P k s s' \\<and>\n                            (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'", "with final_iteration"], ["proof (chain)\npicking this:\n  P (Suc k) r r'\n  (WHILE b DO c, r) \\<Rightarrow> t\n  (c', r') \\<Rightarrow> t'\n  P k q r' \\<and> bval b q \\<and> (c, q) \\<Rightarrow> r", "show ?case"], ["proof (prove)\nusing this:\n  P (Suc k) r r'\n  (WHILE b DO c, r) \\<Rightarrow> t\n  (c', r') \\<Rightarrow> t'\n  P k q r' \\<and> bval b q \\<and> (c, q) \\<Rightarrow> r\n\ngoal (1 subgoal):\n 1. \\<exists>s s'.\n       P k s s' \\<and>\n       (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'", "by blast"], ["proof (state)\nthis:\n  \\<exists>s s'.\n     P k s s' \\<and>\n     (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s s'.\n     P k s s' \\<and>\n     (WHILE b DO c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma While_backwards_frontier_ir_valid[intro]:\n  \"(\\<And>n. ir_valid (\\<lambda> s s'. P n s s' \\<and> bval b s) c SKIP (P (Suc n))) \\<Longrightarrow>\n   ir_valid (\\<lambda>s s'. \\<exists>n. P n s s') (WHILE b DO c) c' Q \\<Longrightarrow>\n   ir_valid (P 0) (WHILE b DO c) c' Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>n.\n                ir_valid (\\<lambda>s s'. P n s s' \\<and> bval b s) c SKIP\n                 (P (Suc n));\n     ir_valid (\\<lambda>s s'. \\<exists>n. P n s s') (WHILE b DO c) c'\n      Q\\<rbrakk>\n    \\<Longrightarrow> ir_valid (P 0) (WHILE b DO c) c' Q", "by(auto simp: meh_simp ir_valid_def intro: While_backwards_frontier_ir_valid')"], ["", "lemma conseq_ir_valid:\n  \"ir_valid P c c' Q \\<Longrightarrow> (\\<And>s s'. P s s' \\<Longrightarrow> P' s s') \\<Longrightarrow> (\\<And>s s'. Q' s s' \\<Longrightarrow> Q s s') \\<Longrightarrow>\n                  ir_valid P' c c' Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ir_valid P c c' Q;\n     \\<And>s s'. P s s' \\<Longrightarrow> P' s s';\n     \\<And>s s'. Q' s s' \\<Longrightarrow> Q s s'\\<rbrakk>\n    \\<Longrightarrow> ir_valid P' c c' Q'", "by(clarsimp simp: ir_valid_def, blast)"], ["", "lemma disj_ir_valid[intro]:\n  \"ir_valid P\\<^sub>1 c c' Q\\<^sub>1 \\<Longrightarrow> ir_valid P\\<^sub>2 c c' Q\\<^sub>2 \\<Longrightarrow>\n                  ir_valid (\\<lambda>s s'. P\\<^sub>1 s s' \\<or> P\\<^sub>2 s s') c c' (\\<lambda> t t'. Q\\<^sub>1 t t' \\<or> Q\\<^sub>2 t t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ir_valid P\\<^sub>1 c c' Q\\<^sub>1;\n     ir_valid P\\<^sub>2 c c' Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_valid\n                       (\\<lambda>s s'. P\\<^sub>1 s s' \\<or> P\\<^sub>2 s s')\n                       c c'\n                       (\\<lambda>t t'. Q\\<^sub>1 t t' \\<or> Q\\<^sub>2 t t')", "by(fastforce simp: ir_valid_def)"], ["", "theorem soundness:\n  \"ir_hoare P c c' Q \\<Longrightarrow> ir_valid P c c' Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare P c c' Q \\<Longrightarrow> ir_valid P c c' Q", "apply(induction rule: ir_hoare.induct)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>Q P c'.\n       (\\<And>t t'.\n           Q t t' \\<Longrightarrow>\n           \\<exists>s'.\n              P t s' \\<and> (c', s') \\<Rightarrow> t') \\<Longrightarrow>\n       ir_valid P SKIP c' Q\n 2. \\<And>P b c\\<^sub>1 c' Q c\\<^sub>2.\n       \\<lbrakk>ir_hoare (\\<lambda>s s'. P s s' \\<and> bval b s) c\\<^sub>1\n                 c' Q;\n        ir_valid (\\<lambda>a c. P a c \\<and> bval b a) c\\<^sub>1 c'\n         Q\\<rbrakk>\n       \\<Longrightarrow> ir_valid P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) c'\n                          Q\n 3. \\<And>P b c\\<^sub>2 c' Q c\\<^sub>1.\n       \\<lbrakk>ir_hoare (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s)\n                 c\\<^sub>2 c' Q;\n        ir_valid (\\<lambda>a c. P a c \\<and> \\<not> bval b a) c\\<^sub>2 c'\n         Q\\<rbrakk>\n       \\<Longrightarrow> ir_valid P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) c'\n                          Q\n 4. \\<And>P c c' Q d R.\n       \\<lbrakk>ir_hoare P c c' Q; ir_valid P c c' Q; ir_hoare Q d SKIP R;\n        ir_valid Q d SKIP R\\<rbrakk>\n       \\<Longrightarrow> ir_valid P (c;; d) c' R\n 5. \\<And>P x e c' Q.\n       \\<lbrakk>ir_hoare\n                 (\\<lambda>t t'.\n                     \\<exists>v.\n                        P (t(x := v)) t' \\<and> t x = aval e (t(x := v)))\n                 SKIP c' Q;\n        ir_valid\n         (\\<lambda>a b.\n             \\<exists>v. P (a(x := v)) b \\<and> a x = aval e (a(x := v)))\n         SKIP c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_valid P (x ::= e) c' Q\n 6. \\<And>P b c' Q c.\n       \\<lbrakk>ir_hoare (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s) SKIP\n                 c' Q;\n        ir_valid (\\<lambda>a c. P a c \\<and> \\<not> bval b a) SKIP c'\n         Q\\<rbrakk>\n       \\<Longrightarrow> ir_valid P (WHILE b DO c) c' Q\n 7. \\<And>P b c c' Q.\n       \\<lbrakk>ir_hoare (\\<lambda>s s'. P s s' \\<and> bval b s)\n                 (c;; WHILE b DO c) c' Q;\n        ir_valid (\\<lambda>a c. P a c \\<and> bval b a) (c;; WHILE b DO c) c'\n         Q\\<rbrakk>\n       \\<Longrightarrow> ir_valid P (WHILE b DO c) c' Q\n 8. \\<And>P b c c' Q.\n       \\<lbrakk>\\<And>n.\n                   ir_hoare (\\<lambda>s s'. P n s s' \\<and> bval b s) c SKIP\n                    (P (Suc n));\n        \\<And>n.\n           ir_valid (\\<lambda>a c. P n a c \\<and> bval b a) c SKIP\n            (P (Suc n));\n        ir_hoare (\\<lambda>s s'. \\<exists>n. P n s s') (WHILE b DO c) c' Q;\n        ir_valid (\\<lambda>a b. \\<exists>n. P n a b) (WHILE b DO c) c'\n         Q\\<rbrakk>\n       \\<Longrightarrow> ir_valid (P 0) (WHILE b DO c) c' Q\n 9. \\<And>P c c' Q P' Q'.\n       \\<lbrakk>ir_hoare P c c' Q; ir_valid P c c' Q;\n        \\<And>s s'. P s s' \\<Longrightarrow> P' s s';\n        \\<And>s s'. Q' s s' \\<Longrightarrow> Q s s'\\<rbrakk>\n       \\<Longrightarrow> ir_valid P' c c' Q'\n 10. \\<And>P\\<^sub>1 c c' Q\\<^sub>1 P\\<^sub>2 Q\\<^sub>2.\n        \\<lbrakk>ir_hoare P\\<^sub>1 c c' Q\\<^sub>1;\n         ir_valid P\\<^sub>1 c c' Q\\<^sub>1;\n         ir_hoare P\\<^sub>2 c c' Q\\<^sub>2;\n         ir_valid P\\<^sub>2 c c' Q\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> ir_valid\n                           (\\<lambda>a b. P\\<^sub>1 a b \\<or> P\\<^sub>2 a b)\n                           c c'\n                           (\\<lambda>a b. Q\\<^sub>1 a b \\<or> Q\\<^sub>2 a b)\nA total of 11 subgoals...", "apply(blast intro!: Skip_ir_valid)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>P b c\\<^sub>1 c' Q c\\<^sub>2.\n       \\<lbrakk>ir_hoare (\\<lambda>s s'. P s s' \\<and> bval b s) c\\<^sub>1\n                 c' Q;\n        ir_valid (\\<lambda>a c. P a c \\<and> bval b a) c\\<^sub>1 c'\n         Q\\<rbrakk>\n       \\<Longrightarrow> ir_valid P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) c'\n                          Q\n 2. \\<And>P b c\\<^sub>2 c' Q c\\<^sub>1.\n       \\<lbrakk>ir_hoare (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s)\n                 c\\<^sub>2 c' Q;\n        ir_valid (\\<lambda>a c. P a c \\<and> \\<not> bval b a) c\\<^sub>2 c'\n         Q\\<rbrakk>\n       \\<Longrightarrow> ir_valid P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) c'\n                          Q\n 3. \\<And>P c c' Q d R.\n       \\<lbrakk>ir_hoare P c c' Q; ir_valid P c c' Q; ir_hoare Q d SKIP R;\n        ir_valid Q d SKIP R\\<rbrakk>\n       \\<Longrightarrow> ir_valid P (c;; d) c' R\n 4. \\<And>P x e c' Q.\n       \\<lbrakk>ir_hoare\n                 (\\<lambda>t t'.\n                     \\<exists>v.\n                        P (t(x := v)) t' \\<and> t x = aval e (t(x := v)))\n                 SKIP c' Q;\n        ir_valid\n         (\\<lambda>a b.\n             \\<exists>v. P (a(x := v)) b \\<and> a x = aval e (a(x := v)))\n         SKIP c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_valid P (x ::= e) c' Q\n 5. \\<And>P b c' Q c.\n       \\<lbrakk>ir_hoare (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s) SKIP\n                 c' Q;\n        ir_valid (\\<lambda>a c. P a c \\<and> \\<not> bval b a) SKIP c'\n         Q\\<rbrakk>\n       \\<Longrightarrow> ir_valid P (WHILE b DO c) c' Q\n 6. \\<And>P b c c' Q.\n       \\<lbrakk>ir_hoare (\\<lambda>s s'. P s s' \\<and> bval b s)\n                 (c;; WHILE b DO c) c' Q;\n        ir_valid (\\<lambda>a c. P a c \\<and> bval b a) (c;; WHILE b DO c) c'\n         Q\\<rbrakk>\n       \\<Longrightarrow> ir_valid P (WHILE b DO c) c' Q\n 7. \\<And>P b c c' Q.\n       \\<lbrakk>\\<And>n.\n                   ir_hoare (\\<lambda>s s'. P n s s' \\<and> bval b s) c SKIP\n                    (P (Suc n));\n        \\<And>n.\n           ir_valid (\\<lambda>a c. P n a c \\<and> bval b a) c SKIP\n            (P (Suc n));\n        ir_hoare (\\<lambda>s s'. \\<exists>n. P n s s') (WHILE b DO c) c' Q;\n        ir_valid (\\<lambda>a b. \\<exists>n. P n a b) (WHILE b DO c) c'\n         Q\\<rbrakk>\n       \\<Longrightarrow> ir_valid (P 0) (WHILE b DO c) c' Q\n 8. \\<And>P c c' Q P' Q'.\n       \\<lbrakk>ir_hoare P c c' Q; ir_valid P c c' Q;\n        \\<And>s s'. P s s' \\<Longrightarrow> P' s s';\n        \\<And>s s'. Q' s s' \\<Longrightarrow> Q s s'\\<rbrakk>\n       \\<Longrightarrow> ir_valid P' c c' Q'\n 9. \\<And>P\\<^sub>1 c c' Q\\<^sub>1 P\\<^sub>2 Q\\<^sub>2.\n       \\<lbrakk>ir_hoare P\\<^sub>1 c c' Q\\<^sub>1;\n        ir_valid P\\<^sub>1 c c' Q\\<^sub>1;\n        ir_hoare P\\<^sub>2 c c' Q\\<^sub>2;\n        ir_valid P\\<^sub>2 c c' Q\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> ir_valid\n                          (\\<lambda>a b. P\\<^sub>1 a b \\<or> P\\<^sub>2 a b)\n                          c c'\n                          (\\<lambda>a b. Q\\<^sub>1 a b \\<or> Q\\<^sub>2 a b)\n 10. \\<And>P c c' Q.\n        \\<lbrakk>ir_hoare (flip P) c c' (flip Q);\n         ir_valid (flip P) c c' (flip Q)\\<rbrakk>\n        \\<Longrightarrow> ir_valid P c' c Q", "by (blast intro: conseq_ir_valid)+"], ["", "section \"Completeness\""], ["", "lemma ir_Skip_Skip[intro]:\n  \"ir_hoare P SKIP SKIP P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare P SKIP SKIP P", "by(rule ir_Skip, simp)"], ["", "lemma ir_hoare_Skip_Skip[simp]:\n  \"ir_hoare P SKIP SKIP Q = (\\<forall>s s'. Q s s' \\<longrightarrow> P s s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare P SKIP SKIP Q =\n    (\\<forall>s s'. Q s s' \\<longrightarrow> P s s')", "using soundness ir_valid_def meh_simp ir_conseq ir_Skip"], ["proof (prove)\nusing this:\n  ir_hoare ?P ?c ?c' ?Q \\<Longrightarrow> ir_valid ?P ?c ?c' ?Q\n  ir_valid ?P ?c ?c' ?Q \\<equiv>\n  \\<forall>t t'.\n     ?Q t t' \\<longrightarrow>\n     (\\<exists>s s'.\n         ?P s s' \\<and>\n         (?c, s) \\<Rightarrow> t \\<and> (?c', s') \\<Rightarrow> t')\n  (SKIP, ?s') \\<Rightarrow> ?t' = (?s' = ?t')\n  \\<lbrakk>ir_hoare ?P ?c ?c' ?Q;\n   \\<And>s s'. ?P s s' \\<Longrightarrow> ?P' s s';\n   \\<And>s s'. ?Q' s s' \\<Longrightarrow> ?Q s s'\\<rbrakk>\n  \\<Longrightarrow> ir_hoare ?P' ?c ?c' ?Q'\n  (\\<And>t t'.\n      ?Q t t' \\<Longrightarrow>\n      \\<exists>s'.\n         ?P t s' \\<and> (?c', s') \\<Rightarrow> t') \\<Longrightarrow>\n  ir_hoare ?P SKIP ?c' ?Q\n\ngoal (1 subgoal):\n 1. ir_hoare P SKIP SKIP Q =\n    (\\<forall>s s'. Q s s' \\<longrightarrow> P s s')", "by metis"], ["", "lemma ir_valid_Seq1:\n  \"ir_valid P (c1;; c2) c' Q \\<Longrightarrow> ir_valid P c1 c' (\\<lambda>t t'. \\<exists>s s'. P s s' \\<and> (c1,s) \\<Rightarrow> t \\<and> (c',s') \\<Rightarrow> t' \\<and> (\\<exists>u. (c2,t) \\<Rightarrow> u \\<and> Q u t'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid P (c1;; c2) c' Q \\<Longrightarrow>\n    ir_valid P c1 c'\n     (\\<lambda>t t'.\n         \\<exists>s s'.\n            P s s' \\<and>\n            (c1, s) \\<Rightarrow> t \\<and>\n            (c', s') \\<Rightarrow> t' \\<and>\n            (\\<exists>u. (c2, t) \\<Rightarrow> u \\<and> Q u t'))", "by(auto simp: ir_valid_def)"], ["", "lemma ir_valid_Seq1':\n  \"ir_valid P (c1;; c2) c' Q \\<Longrightarrow> ir_valid (\\<lambda>t t'. \\<exists>s s'. P s s' \\<and> (c1,s) \\<Rightarrow> t \\<and> (c',s') \\<Rightarrow> t' \\<and> (\\<exists>u. (c2,t) \\<Rightarrow> u \\<and> Q u t')) c2 SKIP Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid P (c1;; c2) c' Q \\<Longrightarrow>\n    ir_valid\n     (\\<lambda>t t'.\n         \\<exists>s s'.\n            P s s' \\<and>\n            (c1, s) \\<Rightarrow> t \\<and>\n            (c', s') \\<Rightarrow> t' \\<and>\n            (\\<exists>u. (c2, t) \\<Rightarrow> u \\<and> Q u t'))\n     c2 SKIP Q", "by(clarsimp simp: ir_valid_def, meson SeqE)"], ["", "lemma ir_valid_track_history:\n  \"ir_valid P c c' Q \\<Longrightarrow>\n   ir_valid P c c' (\\<lambda>t t'. Q s s' \\<and> (\\<exists>s s'. P s s' \\<and> (c,s) \\<Rightarrow> t \\<and> (c',s') \\<Rightarrow> t'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid P c c' Q \\<Longrightarrow>\n    ir_valid P c c'\n     (\\<lambda>t t'.\n         Q s s' \\<and>\n         (\\<exists>s s'.\n             P s s' \\<and>\n             (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'))", "by(auto simp: ir_valid_def)"], ["", "lemma ir_valid_If:\n  \"ir_valid (\\<lambda>s s'. P s s') (IF b THEN c1 ELSE c2) c' Q \\<Longrightarrow>\n   ir_valid (\\<lambda>s s'. P s s' \\<and> bval b s) c1 c' (\\<lambda>t t'. Q t t' \\<and> (\\<exists>s s'. P s s' \\<and> (c1,s) \\<Rightarrow> t \\<and> (c',s') \\<Rightarrow> t' \\<and> bval b s)) \\<and>\n   ir_valid (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s) c2 c' (\\<lambda>t t'. Q t t' \\<and> (\\<exists>s s'. P s s' \\<and> (c2,s) \\<Rightarrow> t \\<and> (c',s') \\<Rightarrow> t' \\<and> \\<not> bval b s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid P (IF b THEN c1 ELSE c2) c' Q \\<Longrightarrow>\n    ir_valid (\\<lambda>s s'. P s s' \\<and> bval b s) c1 c'\n     (\\<lambda>t t'.\n         Q t t' \\<and>\n         (\\<exists>s s'.\n             P s s' \\<and>\n             (c1, s) \\<Rightarrow> t \\<and>\n             (c', s') \\<Rightarrow> t' \\<and> bval b s)) \\<and>\n    ir_valid (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s) c2 c'\n     (\\<lambda>t t'.\n         Q t t' \\<and>\n         (\\<exists>s s'.\n             P s s' \\<and>\n             (c2, s) \\<Rightarrow> t \\<and>\n             (c', s') \\<Rightarrow> t' \\<and> \\<not> bval b s))", "by(clarsimp simp: ir_valid_def, blast)"], ["", "text \\<open>\n  Inspired by the \n  ``@{text \"p(n) = {\\<sigma> | you can get back from \\<sigma> to some state in p by executing C backwards n times}\"}''\n  part of OHearn~\\cite{OHearn_19}.\n\\<close>"], ["", "primrec get_back where\n  \"get_back P b c 0 = (\\<lambda>t t'. P t t')\" |\n  \"get_back P b c (Suc n) = (\\<lambda>t t'. \\<exists>s. (c,s) \\<Rightarrow> t \\<and> bval b s \\<and> get_back P b c n s t')\""], ["", "(* Currently not used anywhere *)"], ["", "lemma ir_valid_get_back:\n  \"ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q \\<Longrightarrow>\n   ir_valid (get_back P b c k) (WHILE b DO c) c' Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q \\<Longrightarrow>\n    ir_valid (get_back P b c k) (WHILE b DO c) c' Q", "proof(induct k)"], ["proof (state)\ngoal (2 subgoals):\n 1. ir_valid (get_back P b c (Suc 0)) (WHILE b DO c) c' Q \\<Longrightarrow>\n    ir_valid (get_back P b c 0) (WHILE b DO c) c' Q\n 2. \\<And>k.\n       \\<lbrakk>ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c'\n                 Q \\<Longrightarrow>\n                ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n        ir_valid (get_back P b c (Suc (Suc k))) (WHILE b DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c'\n                          Q", "case 0"], ["proof (state)\nthis:\n  ir_valid (get_back P b c (Suc 0)) (WHILE b DO c) c' Q\n\ngoal (2 subgoals):\n 1. ir_valid (get_back P b c (Suc 0)) (WHILE b DO c) c' Q \\<Longrightarrow>\n    ir_valid (get_back P b c 0) (WHILE b DO c) c' Q\n 2. \\<And>k.\n       \\<lbrakk>ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c'\n                 Q \\<Longrightarrow>\n                ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n        ir_valid (get_back P b c (Suc (Suc k))) (WHILE b DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c'\n                          Q", "then"], ["proof (chain)\npicking this:\n  ir_valid (get_back P b c (Suc 0)) (WHILE b DO c) c' Q", "show ?case"], ["proof (prove)\nusing this:\n  ir_valid (get_back P b c (Suc 0)) (WHILE b DO c) c' Q\n\ngoal (1 subgoal):\n 1. ir_valid (get_back P b c 0) (WHILE b DO c) c' Q", "by(clarsimp simp: ir_valid_def, blast)"], ["proof (state)\nthis:\n  ir_valid (get_back P b c 0) (WHILE b DO c) c' Q\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c'\n                 Q \\<Longrightarrow>\n                ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n        ir_valid (get_back P b c (Suc (Suc k))) (WHILE b DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c'\n                          Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c'\n                 Q \\<Longrightarrow>\n                ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n        ir_valid (get_back P b c (Suc (Suc k))) (WHILE b DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c'\n                          Q", "case (Suc k)"], ["proof (state)\nthis:\n  ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q \\<Longrightarrow>\n  ir_valid (get_back P b c k) (WHILE b DO c) c' Q\n  ir_valid (get_back P b c (Suc (Suc k))) (WHILE b DO c) c' Q\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c'\n                 Q \\<Longrightarrow>\n                ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n        ir_valid (get_back P b c (Suc (Suc k))) (WHILE b DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c'\n                          Q", "then"], ["proof (chain)\npicking this:\n  ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q \\<Longrightarrow>\n  ir_valid (get_back P b c k) (WHILE b DO c) c' Q\n  ir_valid (get_back P b c (Suc (Suc k))) (WHILE b DO c) c' Q", "show ?case"], ["proof (prove)\nusing this:\n  ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q \\<Longrightarrow>\n  ir_valid (get_back P b c k) (WHILE b DO c) c' Q\n  ir_valid (get_back P b c (Suc (Suc k))) (WHILE b DO c) c' Q\n\ngoal (1 subgoal):\n 1. ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q", "using  WhileTrue get_back.simps(2) ir_valid_def"], ["proof (prove)\nusing this:\n  ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q \\<Longrightarrow>\n  ir_valid (get_back P b c k) (WHILE b DO c) c' Q\n  ir_valid (get_back P b c (Suc (Suc k))) (WHILE b DO c) c' Q\n  \\<lbrakk>bval ?b ?s\\<^sub>1; (?c, ?s\\<^sub>1) \\<Rightarrow> ?s\\<^sub>2;\n   (WHILE ?b DO ?c, ?s\\<^sub>2) \\<Rightarrow> ?s\\<^sub>3\\<rbrakk>\n  \\<Longrightarrow> (WHILE ?b DO ?c, ?s\\<^sub>1) \\<Rightarrow> ?s\\<^sub>3\n  get_back ?P ?b ?c (Suc ?n) =\n  (\\<lambda>t t'.\n      \\<exists>s.\n         (?c, s) \\<Rightarrow> t \\<and>\n         bval ?b s \\<and> get_back ?P ?b ?c ?n s t')\n  ir_valid ?P ?c ?c' ?Q \\<equiv>\n  \\<forall>t t'.\n     ?Q t t' \\<longrightarrow>\n     (\\<exists>s s'.\n         ?P s s' \\<and>\n         (?c, s) \\<Rightarrow> t \\<and> (?c', s') \\<Rightarrow> t')\n\ngoal (1 subgoal):\n 1. ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q", "by smt"], ["proof (state)\nthis:\n  ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q\n\ngoal:\nNo subgoals!", "qed"], ["", "(* both this an the next one get used in the completeness proof *)"], ["", "lemma ir_valid_While1:\n  \"ir_valid (get_back P b c k) (WHILE b DO c) c' Q \\<Longrightarrow>\n   (ir_valid (\\<lambda>s s'. get_back P b c k s s' \\<and> bval b s) c SKIP (\\<lambda>t t'. get_back P b c (Suc k) t t' \\<and> (\\<exists>u u'. (WHILE b DO c,t) \\<Rightarrow> u \\<and> (c',t') \\<Rightarrow> u' \\<and> Q u u')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid (get_back P b c k) (WHILE b DO c) c' Q \\<Longrightarrow>\n    ir_valid (\\<lambda>s s'. get_back P b c k s s' \\<and> bval b s) c SKIP\n     (\\<lambda>t t'.\n         get_back P b c (Suc k) t t' \\<and>\n         (\\<exists>u u'.\n             (WHILE b DO c, t) \\<Rightarrow> u \\<and>\n             (c', t') \\<Rightarrow> u' \\<and> Q u u'))", "proof (subst ir_valid_def, clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t t' s u u'.\n       \\<lbrakk>ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n        (c, s) \\<Rightarrow> t; (WHILE b DO c, t) \\<Rightarrow> u; bval b s;\n        get_back P b c k s t'; (c', t') \\<Rightarrow> u'; Q u u'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            get_back P b c k s t' \\<and>\n                            bval b s \\<and> (c, s) \\<Rightarrow> t", "fix t t' s u u'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t t' s u u'.\n       \\<lbrakk>ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n        (c, s) \\<Rightarrow> t; (WHILE b DO c, t) \\<Rightarrow> u; bval b s;\n        get_back P b c k s t'; (c', t') \\<Rightarrow> u'; Q u u'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            get_back P b c k s t' \\<and>\n                            bval b s \\<and> (c, s) \\<Rightarrow> t", "assume \"ir_valid (get_back P b c k) (WHILE b DO c) c' Q\" \n         \"(WHILE b DO c, t) \\<Rightarrow> u\"\n         \"(c, s) \\<Rightarrow> t\" \n         \"(c', t') \\<Rightarrow> u'\"\n         \"Q u u'\"\n         \"bval b s\"\n         \"get_back P b c k s t'\""], ["proof (state)\nthis:\n  ir_valid (get_back P b c k) (WHILE b DO c) c' Q\n  (WHILE b DO c, t) \\<Rightarrow> u\n  (c, s) \\<Rightarrow> t\n  (c', t') \\<Rightarrow> u'\n  Q u u'\n  bval b s\n  get_back P b c k s t'\n\ngoal (1 subgoal):\n 1. \\<And>t t' s u u'.\n       \\<lbrakk>ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n        (c, s) \\<Rightarrow> t; (WHILE b DO c, t) \\<Rightarrow> u; bval b s;\n        get_back P b c k s t'; (c', t') \\<Rightarrow> u'; Q u u'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            get_back P b c k s t' \\<and>\n                            bval b s \\<and> (c, s) \\<Rightarrow> t", "thus \"\\<exists>s. get_back P b c k s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t\""], ["proof (prove)\nusing this:\n  ir_valid (get_back P b c k) (WHILE b DO c) c' Q\n  (WHILE b DO c, t) \\<Rightarrow> u\n  (c, s) \\<Rightarrow> t\n  (c', t') \\<Rightarrow> u'\n  Q u u'\n  bval b s\n  get_back P b c k s t'\n\ngoal (1 subgoal):\n 1. \\<exists>s.\n       get_back P b c k s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t", "proof(induction k arbitrary: t t' s u u')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t t' s u u'.\n       \\<lbrakk>ir_valid (get_back P b c 0) (WHILE b DO c) c' Q;\n        (WHILE b DO c, t) \\<Rightarrow> u; (c, s) \\<Rightarrow> t;\n        (c', t') \\<Rightarrow> u'; Q u u'; bval b s;\n        get_back P b c 0 s t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            get_back P b c 0 s t' \\<and>\n                            bval b s \\<and> (c, s) \\<Rightarrow> t\n 2. \\<And>k t t' s u u'.\n       \\<lbrakk>\\<And>t t' s u u'.\n                   \\<lbrakk>ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n                    (WHILE b DO c, t) \\<Rightarrow> u;\n                    (c, s) \\<Rightarrow> t; (c', t') \\<Rightarrow> u';\n                    Q u u'; bval b s; get_back P b c k s t'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s.\n  get_back P b c k s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t;\n        ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q;\n        (WHILE b DO c, t) \\<Rightarrow> u; (c, s) \\<Rightarrow> t;\n        (c', t') \\<Rightarrow> u'; Q u u'; bval b s;\n        get_back P b c (Suc k) s t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            get_back P b c (Suc k) s t' \\<and>\n                            bval b s \\<and> (c, s) \\<Rightarrow> t", "case 0"], ["proof (state)\nthis:\n  ir_valid (get_back P b c 0) (WHILE b DO c) c' Q\n  (WHILE b DO c, t) \\<Rightarrow> u\n  (c, s) \\<Rightarrow> t\n  (c', t') \\<Rightarrow> u'\n  Q u u'\n  bval b s\n  get_back P b c 0 s t'\n\ngoal (2 subgoals):\n 1. \\<And>t t' s u u'.\n       \\<lbrakk>ir_valid (get_back P b c 0) (WHILE b DO c) c' Q;\n        (WHILE b DO c, t) \\<Rightarrow> u; (c, s) \\<Rightarrow> t;\n        (c', t') \\<Rightarrow> u'; Q u u'; bval b s;\n        get_back P b c 0 s t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            get_back P b c 0 s t' \\<and>\n                            bval b s \\<and> (c, s) \\<Rightarrow> t\n 2. \\<And>k t t' s u u'.\n       \\<lbrakk>\\<And>t t' s u u'.\n                   \\<lbrakk>ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n                    (WHILE b DO c, t) \\<Rightarrow> u;\n                    (c, s) \\<Rightarrow> t; (c', t') \\<Rightarrow> u';\n                    Q u u'; bval b s; get_back P b c k s t'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s.\n  get_back P b c k s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t;\n        ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q;\n        (WHILE b DO c, t) \\<Rightarrow> u; (c, s) \\<Rightarrow> t;\n        (c', t') \\<Rightarrow> u'; Q u u'; bval b s;\n        get_back P b c (Suc k) s t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            get_back P b c (Suc k) s t' \\<and>\n                            bval b s \\<and> (c, s) \\<Rightarrow> t", "then"], ["proof (chain)\npicking this:\n  ir_valid (get_back P b c 0) (WHILE b DO c) c' Q\n  (WHILE b DO c, t) \\<Rightarrow> u\n  (c, s) \\<Rightarrow> t\n  (c', t') \\<Rightarrow> u'\n  Q u u'\n  bval b s\n  get_back P b c 0 s t'", "show ?case"], ["proof (prove)\nusing this:\n  ir_valid (get_back P b c 0) (WHILE b DO c) c' Q\n  (WHILE b DO c, t) \\<Rightarrow> u\n  (c, s) \\<Rightarrow> t\n  (c', t') \\<Rightarrow> u'\n  Q u u'\n  bval b s\n  get_back P b c 0 s t'\n\ngoal (1 subgoal):\n 1. \\<exists>s.\n       get_back P b c 0 s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t", "by auto"], ["proof (state)\nthis:\n  \\<exists>s.\n     get_back P b c 0 s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>k t t' s u u'.\n       \\<lbrakk>\\<And>t t' s u u'.\n                   \\<lbrakk>ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n                    (WHILE b DO c, t) \\<Rightarrow> u;\n                    (c, s) \\<Rightarrow> t; (c', t') \\<Rightarrow> u';\n                    Q u u'; bval b s; get_back P b c k s t'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s.\n  get_back P b c k s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t;\n        ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q;\n        (WHILE b DO c, t) \\<Rightarrow> u; (c, s) \\<Rightarrow> t;\n        (c', t') \\<Rightarrow> u'; Q u u'; bval b s;\n        get_back P b c (Suc k) s t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            get_back P b c (Suc k) s t' \\<and>\n                            bval b s \\<and> (c, s) \\<Rightarrow> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k t t' s u u'.\n       \\<lbrakk>\\<And>t t' s u u'.\n                   \\<lbrakk>ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n                    (WHILE b DO c, t) \\<Rightarrow> u;\n                    (c, s) \\<Rightarrow> t; (c', t') \\<Rightarrow> u';\n                    Q u u'; bval b s; get_back P b c k s t'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s.\n  get_back P b c k s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t;\n        ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q;\n        (WHILE b DO c, t) \\<Rightarrow> u; (c, s) \\<Rightarrow> t;\n        (c', t') \\<Rightarrow> u'; Q u u'; bval b s;\n        get_back P b c (Suc k) s t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            get_back P b c (Suc k) s t' \\<and>\n                            bval b s \\<and> (c, s) \\<Rightarrow> t", "case (Suc k)"], ["proof (state)\nthis:\n  \\<lbrakk>ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n   (WHILE b DO c, ?t) \\<Rightarrow> ?u; (c, ?s) \\<Rightarrow> ?t;\n   (c', ?t') \\<Rightarrow> ?u'; Q ?u ?u'; bval b ?s;\n   get_back P b c k ?s ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s.\n                       get_back P b c k s ?t' \\<and>\n                       bval b s \\<and> (c, s) \\<Rightarrow> ?t\n  ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q\n  (WHILE b DO c, t) \\<Rightarrow> u\n  (c, s) \\<Rightarrow> t\n  (c', t') \\<Rightarrow> u'\n  Q u u'\n  bval b s\n  get_back P b c (Suc k) s t'\n\ngoal (1 subgoal):\n 1. \\<And>k t t' s u u'.\n       \\<lbrakk>\\<And>t t' s u u'.\n                   \\<lbrakk>ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n                    (WHILE b DO c, t) \\<Rightarrow> u;\n                    (c, s) \\<Rightarrow> t; (c', t') \\<Rightarrow> u';\n                    Q u u'; bval b s; get_back P b c k s t'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s.\n  get_back P b c k s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t;\n        ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q;\n        (WHILE b DO c, t) \\<Rightarrow> u; (c, s) \\<Rightarrow> t;\n        (c', t') \\<Rightarrow> u'; Q u u'; bval b s;\n        get_back P b c (Suc k) s t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            get_back P b c (Suc k) s t' \\<and>\n                            bval b s \\<and> (c, s) \\<Rightarrow> t", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s.\n       get_back P b c (Suc k) s t' \\<and>\n       bval b s \\<and> (c, s) \\<Rightarrow> t", "using Suc.prems(3) Suc.prems(6) Suc.prems(7)"], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> t\n  bval b s\n  get_back P b c (Suc k) s t'\n\ngoal (1 subgoal):\n 1. \\<exists>s.\n       get_back P b c (Suc k) s t' \\<and>\n       bval b s \\<and> (c, s) \\<Rightarrow> t", "by blast"], ["proof (state)\nthis:\n  \\<exists>s.\n     get_back P b c (Suc k) s t' \\<and>\n     bval b s \\<and> (c, s) \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s.\n     get_back P b c k s t' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ir_valid_While3:\n  \"ir_valid (get_back P b c k) (WHILE b DO c) c' Q \\<Longrightarrow>\n   (ir_valid (\\<lambda>s s'. get_back P b c k s s' \\<and> bval b s) c c' (\\<lambda>t t'. (\\<exists>s'. (c',s') \\<Rightarrow> t' \\<and> get_back P b c (Suc k) t s' \\<and> (\\<exists>u. (WHILE b DO c,t) \\<Rightarrow> u \\<and>  Q u t'))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid (get_back P b c k) (WHILE b DO c) c' Q \\<Longrightarrow>\n    ir_valid (\\<lambda>s s'. get_back P b c k s s' \\<and> bval b s) c c'\n     (\\<lambda>t t'.\n         \\<exists>s'.\n            (c', s') \\<Rightarrow> t' \\<and>\n            get_back P b c (Suc k) t s' \\<and>\n            (\\<exists>u. (WHILE b DO c, t) \\<Rightarrow> u \\<and> Q u t'))", "apply(subst ir_valid_def, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t t' s' s u.\n       \\<lbrakk>ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n        (c', s') \\<Rightarrow> t'; (c, s) \\<Rightarrow> t;\n        (WHILE b DO c, t) \\<Rightarrow> u; Q u t'; bval b s;\n        get_back P b c k s s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            get_back P b c k s s' \\<and>\n                            bval b s \\<and>\n                            (c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t t' s' s u.\n       \\<lbrakk>ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n        (c', s') \\<Rightarrow> t'; (c, s) \\<Rightarrow> t;\n        (WHILE b DO c, t) \\<Rightarrow> u; Q u t'; bval b s;\n        get_back P b c k s s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            get_back P b c k s s' \\<and>\n                            bval b s \\<and>\n                            (c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'", "fix t t' s' s u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t t' s' s u.\n       \\<lbrakk>ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n        (c', s') \\<Rightarrow> t'; (c, s) \\<Rightarrow> t;\n        (WHILE b DO c, t) \\<Rightarrow> u; Q u t'; bval b s;\n        get_back P b c k s s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            get_back P b c k s s' \\<and>\n                            bval b s \\<and>\n                            (c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'", "assume \"ir_valid (get_back P b c k) (WHILE b DO c) c' Q\" \n         \"(WHILE b DO c, t) \\<Rightarrow> u\"\n         \"(c, s) \\<Rightarrow> t\" \n         \"(c', s') \\<Rightarrow> t'\"\n         \"Q u t'\"\n         \"bval b s\"\n         \"get_back P b c k s s'\""], ["proof (state)\nthis:\n  ir_valid (get_back P b c k) (WHILE b DO c) c' Q\n  (WHILE b DO c, t) \\<Rightarrow> u\n  (c, s) \\<Rightarrow> t\n  (c', s') \\<Rightarrow> t'\n  Q u t'\n  bval b s\n  get_back P b c k s s'\n\ngoal (1 subgoal):\n 1. \\<And>t t' s' s u.\n       \\<lbrakk>ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n        (c', s') \\<Rightarrow> t'; (c, s) \\<Rightarrow> t;\n        (WHILE b DO c, t) \\<Rightarrow> u; Q u t'; bval b s;\n        get_back P b c k s s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            get_back P b c k s s' \\<and>\n                            bval b s \\<and>\n                            (c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'", "thus \"\\<exists>s s'. get_back P b c k s s' \\<and> bval b s \\<and> (c, s) \\<Rightarrow> t \\<and> (c',s') \\<Rightarrow> t'\""], ["proof (prove)\nusing this:\n  ir_valid (get_back P b c k) (WHILE b DO c) c' Q\n  (WHILE b DO c, t) \\<Rightarrow> u\n  (c, s) \\<Rightarrow> t\n  (c', s') \\<Rightarrow> t'\n  Q u t'\n  bval b s\n  get_back P b c k s s'\n\ngoal (1 subgoal):\n 1. \\<exists>s s'.\n       get_back P b c k s s' \\<and>\n       bval b s \\<and>\n       (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'", "proof(induction k arbitrary: t t' s' s u)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t t' s' s u.\n       \\<lbrakk>ir_valid (get_back P b c 0) (WHILE b DO c) c' Q;\n        (WHILE b DO c, t) \\<Rightarrow> u; (c, s) \\<Rightarrow> t;\n        (c', s') \\<Rightarrow> t'; Q u t'; bval b s;\n        get_back P b c 0 s s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            get_back P b c 0 s s' \\<and>\n                            bval b s \\<and>\n                            (c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'\n 2. \\<And>k t t' s' s u.\n       \\<lbrakk>\\<And>t t' s' s u.\n                   \\<lbrakk>ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n                    (WHILE b DO c, t) \\<Rightarrow> u;\n                    (c, s) \\<Rightarrow> t; (c', s') \\<Rightarrow> t';\n                    Q u t'; bval b s; get_back P b c k s s'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s s'.\n  get_back P b c k s s' \\<and>\n  bval b s \\<and> (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t';\n        ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q;\n        (WHILE b DO c, t) \\<Rightarrow> u; (c, s) \\<Rightarrow> t;\n        (c', s') \\<Rightarrow> t'; Q u t'; bval b s;\n        get_back P b c (Suc k) s s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            get_back P b c (Suc k) s s' \\<and>\n                            bval b s \\<and>\n                            (c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'", "case 0"], ["proof (state)\nthis:\n  ir_valid (get_back P b c 0) (WHILE b DO c) c' Q\n  (WHILE b DO c, t) \\<Rightarrow> u\n  (c, s) \\<Rightarrow> t\n  (c', s') \\<Rightarrow> t'\n  Q u t'\n  bval b s\n  get_back P b c 0 s s'\n\ngoal (2 subgoals):\n 1. \\<And>t t' s' s u.\n       \\<lbrakk>ir_valid (get_back P b c 0) (WHILE b DO c) c' Q;\n        (WHILE b DO c, t) \\<Rightarrow> u; (c, s) \\<Rightarrow> t;\n        (c', s') \\<Rightarrow> t'; Q u t'; bval b s;\n        get_back P b c 0 s s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            get_back P b c 0 s s' \\<and>\n                            bval b s \\<and>\n                            (c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'\n 2. \\<And>k t t' s' s u.\n       \\<lbrakk>\\<And>t t' s' s u.\n                   \\<lbrakk>ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n                    (WHILE b DO c, t) \\<Rightarrow> u;\n                    (c, s) \\<Rightarrow> t; (c', s') \\<Rightarrow> t';\n                    Q u t'; bval b s; get_back P b c k s s'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s s'.\n  get_back P b c k s s' \\<and>\n  bval b s \\<and> (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t';\n        ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q;\n        (WHILE b DO c, t) \\<Rightarrow> u; (c, s) \\<Rightarrow> t;\n        (c', s') \\<Rightarrow> t'; Q u t'; bval b s;\n        get_back P b c (Suc k) s s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            get_back P b c (Suc k) s s' \\<and>\n                            bval b s \\<and>\n                            (c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'", "then"], ["proof (chain)\npicking this:\n  ir_valid (get_back P b c 0) (WHILE b DO c) c' Q\n  (WHILE b DO c, t) \\<Rightarrow> u\n  (c, s) \\<Rightarrow> t\n  (c', s') \\<Rightarrow> t'\n  Q u t'\n  bval b s\n  get_back P b c 0 s s'", "show ?case"], ["proof (prove)\nusing this:\n  ir_valid (get_back P b c 0) (WHILE b DO c) c' Q\n  (WHILE b DO c, t) \\<Rightarrow> u\n  (c, s) \\<Rightarrow> t\n  (c', s') \\<Rightarrow> t'\n  Q u t'\n  bval b s\n  get_back P b c 0 s s'\n\ngoal (1 subgoal):\n 1. \\<exists>s s'.\n       get_back P b c 0 s s' \\<and>\n       bval b s \\<and>\n       (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'", "by auto"], ["proof (state)\nthis:\n  \\<exists>s s'.\n     get_back P b c 0 s s' \\<and>\n     bval b s \\<and> (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<And>k t t' s' s u.\n       \\<lbrakk>\\<And>t t' s' s u.\n                   \\<lbrakk>ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n                    (WHILE b DO c, t) \\<Rightarrow> u;\n                    (c, s) \\<Rightarrow> t; (c', s') \\<Rightarrow> t';\n                    Q u t'; bval b s; get_back P b c k s s'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s s'.\n  get_back P b c k s s' \\<and>\n  bval b s \\<and> (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t';\n        ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q;\n        (WHILE b DO c, t) \\<Rightarrow> u; (c, s) \\<Rightarrow> t;\n        (c', s') \\<Rightarrow> t'; Q u t'; bval b s;\n        get_back P b c (Suc k) s s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            get_back P b c (Suc k) s s' \\<and>\n                            bval b s \\<and>\n                            (c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k t t' s' s u.\n       \\<lbrakk>\\<And>t t' s' s u.\n                   \\<lbrakk>ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n                    (WHILE b DO c, t) \\<Rightarrow> u;\n                    (c, s) \\<Rightarrow> t; (c', s') \\<Rightarrow> t';\n                    Q u t'; bval b s; get_back P b c k s s'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s s'.\n  get_back P b c k s s' \\<and>\n  bval b s \\<and> (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t';\n        ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q;\n        (WHILE b DO c, t) \\<Rightarrow> u; (c, s) \\<Rightarrow> t;\n        (c', s') \\<Rightarrow> t'; Q u t'; bval b s;\n        get_back P b c (Suc k) s s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            get_back P b c (Suc k) s s' \\<and>\n                            bval b s \\<and>\n                            (c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'", "case (Suc k)"], ["proof (state)\nthis:\n  \\<lbrakk>ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n   (WHILE b DO c, ?t) \\<Rightarrow> ?u; (c, ?s) \\<Rightarrow> ?t;\n   (c', ?s') \\<Rightarrow> ?t'; Q ?u ?t'; bval b ?s;\n   get_back P b c k ?s ?s'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s s'.\n                       get_back P b c k s s' \\<and>\n                       bval b s \\<and>\n                       (c, s) \\<Rightarrow> ?t \\<and>\n                       (c', s') \\<Rightarrow> ?t'\n  ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q\n  (WHILE b DO c, t) \\<Rightarrow> u\n  (c, s) \\<Rightarrow> t\n  (c', s') \\<Rightarrow> t'\n  Q u t'\n  bval b s\n  get_back P b c (Suc k) s s'\n\ngoal (1 subgoal):\n 1. \\<And>k t t' s' s u.\n       \\<lbrakk>\\<And>t t' s' s u.\n                   \\<lbrakk>ir_valid (get_back P b c k) (WHILE b DO c) c' Q;\n                    (WHILE b DO c, t) \\<Rightarrow> u;\n                    (c, s) \\<Rightarrow> t; (c', s') \\<Rightarrow> t';\n                    Q u t'; bval b s; get_back P b c k s s'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s s'.\n  get_back P b c k s s' \\<and>\n  bval b s \\<and> (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t';\n        ir_valid (get_back P b c (Suc k)) (WHILE b DO c) c' Q;\n        (WHILE b DO c, t) \\<Rightarrow> u; (c, s) \\<Rightarrow> t;\n        (c', s') \\<Rightarrow> t'; Q u t'; bval b s;\n        get_back P b c (Suc k) s s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            get_back P b c (Suc k) s s' \\<and>\n                            bval b s \\<and>\n                            (c, s) \\<Rightarrow> t \\<and>\n                            (c', s') \\<Rightarrow> t'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s s'.\n       get_back P b c (Suc k) s s' \\<and>\n       bval b s \\<and>\n       (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'", "using Suc.prems(3) Suc.prems(4) Suc.prems(6) Suc.prems(7)"], ["proof (prove)\nusing this:\n  (c, s) \\<Rightarrow> t\n  (c', s') \\<Rightarrow> t'\n  bval b s\n  get_back P b c (Suc k) s s'\n\ngoal (1 subgoal):\n 1. \\<exists>s s'.\n       get_back P b c (Suc k) s s' \\<and>\n       bval b s \\<and>\n       (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'", "by blast"], ["proof (state)\nthis:\n  \\<exists>s s'.\n     get_back P b c (Suc k) s s' \\<and>\n     bval b s \\<and> (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s s'.\n     get_back P b c k s s' \\<and>\n     bval b s \\<and> (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'\n\ngoal:\nNo subgoals!", "qed"], ["", "(* not used anywhere *)"], ["", "lemma ir_valid_While2:\n   \"ir_valid P (WHILE b DO c) c' Q \\<Longrightarrow>\n   ir_valid (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s) SKIP c' (\\<lambda>t t'. Q t t' \\<and> (\\<exists>s'. (c',s') \\<Rightarrow> t' \\<and> P t s' \\<and> \\<not> bval b t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid P (WHILE b DO c) c' Q \\<Longrightarrow>\n    ir_valid (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s) SKIP c'\n     (\\<lambda>t t'.\n         Q t t' \\<and>\n         (\\<exists>s'.\n             (c', s') \\<Rightarrow> t' \\<and>\n             P t s' \\<and> \\<not> bval b t))", "by(clarsimp simp: ir_valid_def, blast)"], ["", "lemma assign_upd_blah:\n  \"(\\<lambda>a. if a = x1 then s x1 else (s(x1 := aval x2 s)) a) = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a. if a = x1 then s x1 else (s(x1 := aval x2 s)) a) = s", "by(rule ext, auto)"], ["", "lemma Assign_complete:\n  assumes v: \"ir_valid P (x1 ::= x2) c' Q\"\n  assumes q: \"Q t t'\"\n  shows  \"\\<exists>s'. (\\<exists>v. P (t(x1 := v)) s' \\<and> t x1 = aval x2 (t(x1 := v))) \\<and> (c', s') \\<Rightarrow> t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s'.\n       (\\<exists>v.\n           P (t(x1 := v)) s' \\<and> t x1 = aval x2 (t(x1 := v))) \\<and>\n       (c', s') \\<Rightarrow> t'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s'.\n       (\\<exists>v.\n           P (t(x1 := v)) s' \\<and> t x1 = aval x2 (t(x1 := v))) \\<and>\n       (c', s') \\<Rightarrow> t'", "from v and q"], ["proof (chain)\npicking this:\n  ir_valid P (x1 ::= x2) c' Q\n  Q t t'", "obtain s s' where a: \"P s s' \\<and> (x1 ::= x2,s) \\<Rightarrow> t \\<and> (c',s') \\<Rightarrow> t'\""], ["proof (prove)\nusing this:\n  ir_valid P (x1 ::= x2) c' Q\n  Q t t'\n\ngoal (1 subgoal):\n 1. (\\<And>s s'.\n        P s s' \\<and>\n        (x1 ::= x2, s) \\<Rightarrow> t \\<and>\n        (c', s') \\<Rightarrow> t' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ir_valid_def"], ["proof (prove)\nusing this:\n  ir_valid P (x1 ::= x2) c' Q\n  Q t t'\n  ir_valid ?P ?c ?c' ?Q \\<equiv>\n  \\<forall>t t'.\n     ?Q t t' \\<longrightarrow>\n     (\\<exists>s s'.\n         ?P s s' \\<and>\n         (?c, s) \\<Rightarrow> t \\<and> (?c', s') \\<Rightarrow> t')\n\ngoal (1 subgoal):\n 1. (\\<And>s s'.\n        P s s' \\<and>\n        (x1 ::= x2, s) \\<Rightarrow> t \\<and>\n        (c', s') \\<Rightarrow> t' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by smt"], ["proof (state)\nthis:\n  P s s' \\<and>\n  (x1 ::= x2, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<exists>s'.\n       (\\<exists>v.\n           P (t(x1 := v)) s' \\<and> t x1 = aval x2 (t(x1 := v))) \\<and>\n       (c', s') \\<Rightarrow> t'", "hence \"P (\\<lambda>a. if a = x1 then s x1 else (s(x1 := aval x2 s)) a) s' \\<and> aval x2 s = aval x2 (s(x1 := s x1))\""], ["proof (prove)\nusing this:\n  P s s' \\<and>\n  (x1 ::= x2, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. P (\\<lambda>a. if a = x1 then s x1 else (s(x1 := aval x2 s)) a)\n     s' \\<and>\n    aval x2 s = aval x2 (s(x1 := s x1))", "using assign_upd_blah"], ["proof (prove)\nusing this:\n  P s s' \\<and>\n  (x1 ::= x2, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'\n  (\\<lambda>a.\n      if a = ?x1.0 then ?s ?x1.0 else (?s(?x1.0 := aval ?x2.0 ?s)) a) =\n  ?s\n\ngoal (1 subgoal):\n 1. P (\\<lambda>a. if a = x1 then s x1 else (s(x1 := aval x2 s)) a)\n     s' \\<and>\n    aval x2 s = aval x2 (s(x1 := s x1))", "by simp"], ["proof (state)\nthis:\n  P (\\<lambda>a. if a = x1 then s x1 else (s(x1 := aval x2 s)) a) s' \\<and>\n  aval x2 s = aval x2 (s(x1 := s x1))\n\ngoal (1 subgoal):\n 1. \\<exists>s'.\n       (\\<exists>v.\n           P (t(x1 := v)) s' \\<and> t x1 = aval x2 (t(x1 := v))) \\<and>\n       (c', s') \\<Rightarrow> t'", "thus ?thesis"], ["proof (prove)\nusing this:\n  P (\\<lambda>a. if a = x1 then s x1 else (s(x1 := aval x2 s)) a) s' \\<and>\n  aval x2 s = aval x2 (s(x1 := s x1))\n\ngoal (1 subgoal):\n 1. \\<exists>s'.\n       (\\<exists>v.\n           P (t(x1 := v)) s' \\<and> t x1 = aval x2 (t(x1 := v))) \\<and>\n       (c', s') \\<Rightarrow> t'", "using assign_upd_blah a"], ["proof (prove)\nusing this:\n  P (\\<lambda>a. if a = x1 then s x1 else (s(x1 := aval x2 s)) a) s' \\<and>\n  aval x2 s = aval x2 (s(x1 := s x1))\n  (\\<lambda>a.\n      if a = ?x1.0 then ?s ?x1.0 else (?s(?x1.0 := aval ?x2.0 ?s)) a) =\n  ?s\n  P s s' \\<and>\n  (x1 ::= x2, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<exists>s'.\n       (\\<exists>v.\n           P (t(x1 := v)) s' \\<and> t x1 = aval x2 (t(x1 := v))) \\<and>\n       (c', s') \\<Rightarrow> t'", "by (metis AssignE fun_upd_same fun_upd_triv fun_upd_upd)"], ["proof (state)\nthis:\n  \\<exists>s'.\n     (\\<exists>v.\n         P (t(x1 := v)) s' \\<and> t x1 = aval x2 (t(x1 := v))) \\<and>\n     (c', s') \\<Rightarrow> t'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas ir_Skip_sym = ir_sym[OF ir_Skip, simplified flip_def]"], ["", "theorem completeness:\n  \"ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q", "proof(induct c arbitrary: P c' Q)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>P c' Q.\n       ir_valid P SKIP c' Q \\<Longrightarrow> ir_hoare P SKIP c' Q\n 2. \\<And>x1 x2 P c' Q.\n       ir_valid P (x1 ::= x2) c' Q \\<Longrightarrow>\n       ir_hoare P (x1 ::= x2) c' Q\n 3. \\<And>c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (c1;; c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (c1;; c2) c' Q\n 4. \\<And>x1 c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (IF x1 THEN c1 ELSE c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (IF x1 THEN c1 ELSE c2) c' Q\n 5. \\<And>x1 c P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q;\n        ir_valid P (WHILE x1 DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (WHILE x1 DO c) c' Q", "case SKIP"], ["proof (state)\nthis:\n  ir_valid P SKIP c' Q\n\ngoal (5 subgoals):\n 1. \\<And>P c' Q.\n       ir_valid P SKIP c' Q \\<Longrightarrow> ir_hoare P SKIP c' Q\n 2. \\<And>x1 x2 P c' Q.\n       ir_valid P (x1 ::= x2) c' Q \\<Longrightarrow>\n       ir_hoare P (x1 ::= x2) c' Q\n 3. \\<And>c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (c1;; c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (c1;; c2) c' Q\n 4. \\<And>x1 c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (IF x1 THEN c1 ELSE c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (IF x1 THEN c1 ELSE c2) c' Q\n 5. \\<And>x1 c P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q;\n        ir_valid P (WHILE x1 DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (WHILE x1 DO c) c' Q", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare P SKIP c' Q", "apply(rule ir_Skip)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t t'.\n       Q t t' \\<Longrightarrow>\n       \\<exists>s'. P t s' \\<and> (c', s') \\<Rightarrow> t'", "using SKIP"], ["proof (prove)\nusing this:\n  ir_valid P SKIP c' Q\n\ngoal (1 subgoal):\n 1. \\<And>t t'.\n       Q t t' \\<Longrightarrow>\n       \\<exists>s'. P t s' \\<and> (c', s') \\<Rightarrow> t'", "by(fastforce simp: ir_valid_def)"], ["proof (state)\nthis:\n  ir_hoare P SKIP c' Q\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 P c' Q.\n       ir_valid P (x1 ::= x2) c' Q \\<Longrightarrow>\n       ir_hoare P (x1 ::= x2) c' Q\n 2. \\<And>c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (c1;; c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (c1;; c2) c' Q\n 3. \\<And>x1 c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (IF x1 THEN c1 ELSE c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (IF x1 THEN c1 ELSE c2) c' Q\n 4. \\<And>x1 c P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q;\n        ir_valid P (WHILE x1 DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (WHILE x1 DO c) c' Q", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x1 x2 P c' Q.\n       ir_valid P (x1 ::= x2) c' Q \\<Longrightarrow>\n       ir_hoare P (x1 ::= x2) c' Q\n 2. \\<And>c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (c1;; c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (c1;; c2) c' Q\n 3. \\<And>x1 c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (IF x1 THEN c1 ELSE c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (IF x1 THEN c1 ELSE c2) c' Q\n 4. \\<And>x1 c P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q;\n        ir_valid P (WHILE x1 DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (WHILE x1 DO c) c' Q", "case (Assign x1 x2)"], ["proof (state)\nthis:\n  ir_valid P (x1 ::= x2) c' Q\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 P c' Q.\n       ir_valid P (x1 ::= x2) c' Q \\<Longrightarrow>\n       ir_hoare P (x1 ::= x2) c' Q\n 2. \\<And>c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (c1;; c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (c1;; c2) c' Q\n 3. \\<And>x1 c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (IF x1 THEN c1 ELSE c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (IF x1 THEN c1 ELSE c2) c' Q\n 4. \\<And>x1 c P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q;\n        ir_valid P (WHILE x1 DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (WHILE x1 DO c) c' Q", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare P (x1 ::= x2) c' Q", "apply(rule ir_Assign)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare\n     (\\<lambda>t t'.\n         \\<exists>v. P (t(x1 := v)) t' \\<and> t x1 = aval x2 (t(x1 := v)))\n     SKIP c' Q", "apply(rule ir_Skip)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t t'.\n       Q t t' \\<Longrightarrow>\n       \\<exists>s'.\n          (\\<exists>v.\n              P (t(x1 := v)) s' \\<and> t x1 = aval x2 (t(x1 := v))) \\<and>\n          (c', s') \\<Rightarrow> t'", "using Assign_complete Assign"], ["proof (prove)\nusing this:\n  \\<lbrakk>ir_valid ?P (?x1.0 ::= ?x2.0) ?c' ?Q; ?Q ?t ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s'.\n                       (\\<exists>v.\n                           ?P (?t(?x1.0 := v)) s' \\<and>\n                           ?t ?x1.0 = aval ?x2.0 (?t(?x1.0 := v))) \\<and>\n                       (?c', s') \\<Rightarrow> ?t'\n  ir_valid P (x1 ::= x2) c' Q\n\ngoal (1 subgoal):\n 1. \\<And>t t'.\n       Q t t' \\<Longrightarrow>\n       \\<exists>s'.\n          (\\<exists>v.\n              P (t(x1 := v)) s' \\<and> t x1 = aval x2 (t(x1 := v))) \\<and>\n          (c', s') \\<Rightarrow> t'", "by blast"], ["proof (state)\nthis:\n  ir_hoare P (x1 ::= x2) c' Q\n\ngoal (3 subgoals):\n 1. \\<And>c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (c1;; c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (c1;; c2) c' Q\n 2. \\<And>x1 c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (IF x1 THEN c1 ELSE c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (IF x1 THEN c1 ELSE c2) c' Q\n 3. \\<And>x1 c P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q;\n        ir_valid P (WHILE x1 DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (WHILE x1 DO c) c' Q", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (c1;; c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (c1;; c2) c' Q\n 2. \\<And>x1 c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (IF x1 THEN c1 ELSE c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (IF x1 THEN c1 ELSE c2) c' Q\n 3. \\<And>x1 c P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q;\n        ir_valid P (WHILE x1 DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (WHILE x1 DO c) c' Q", "case (Seq c1 c2)"], ["proof (state)\nthis:\n  ir_valid ?P c1 ?c' ?Q \\<Longrightarrow> ir_hoare ?P c1 ?c' ?Q\n  ir_valid ?P c2 ?c' ?Q \\<Longrightarrow> ir_hoare ?P c2 ?c' ?Q\n  ir_valid P (c1;; c2) c' Q\n\ngoal (3 subgoals):\n 1. \\<And>c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (c1;; c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (c1;; c2) c' Q\n 2. \\<And>x1 c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (IF x1 THEN c1 ELSE c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (IF x1 THEN c1 ELSE c2) c' Q\n 3. \\<And>x1 c P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q;\n        ir_valid P (WHILE x1 DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (WHILE x1 DO c) c' Q", "have a: \"ir_hoare P c1 c' (\\<lambda>t t'. \\<exists>s s'. P s s' \\<and> (c1, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t' \\<and> (\\<exists>u. (c2, t) \\<Rightarrow> u \\<and> Q u t'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare P c1 c'\n     (\\<lambda>t t'.\n         \\<exists>s s'.\n            P s s' \\<and>\n            (c1, s) \\<Rightarrow> t \\<and>\n            (c', s') \\<Rightarrow> t' \\<and>\n            (\\<exists>u. (c2, t) \\<Rightarrow> u \\<and> Q u t'))", "using ir_valid_Seq1 Seq"], ["proof (prove)\nusing this:\n  ir_valid ?P (?c1.0;; ?c2.0) ?c' ?Q \\<Longrightarrow>\n  ir_valid ?P ?c1.0 ?c'\n   (\\<lambda>t t'.\n       \\<exists>s s'.\n          ?P s s' \\<and>\n          (?c1.0, s) \\<Rightarrow> t \\<and>\n          (?c', s') \\<Rightarrow> t' \\<and>\n          (\\<exists>u. (?c2.0, t) \\<Rightarrow> u \\<and> ?Q u t'))\n  ir_valid ?P c1 ?c' ?Q \\<Longrightarrow> ir_hoare ?P c1 ?c' ?Q\n  ir_valid ?P c2 ?c' ?Q \\<Longrightarrow> ir_hoare ?P c2 ?c' ?Q\n  ir_valid P (c1;; c2) c' Q\n\ngoal (1 subgoal):\n 1. ir_hoare P c1 c'\n     (\\<lambda>t t'.\n         \\<exists>s s'.\n            P s s' \\<and>\n            (c1, s) \\<Rightarrow> t \\<and>\n            (c', s') \\<Rightarrow> t' \\<and>\n            (\\<exists>u. (c2, t) \\<Rightarrow> u \\<and> Q u t'))", "by blast"], ["proof (state)\nthis:\n  ir_hoare P c1 c'\n   (\\<lambda>t t'.\n       \\<exists>s s'.\n          P s s' \\<and>\n          (c1, s) \\<Rightarrow> t \\<and>\n          (c', s') \\<Rightarrow> t' \\<and>\n          (\\<exists>u. (c2, t) \\<Rightarrow> u \\<and> Q u t'))\n\ngoal (3 subgoals):\n 1. \\<And>c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (c1;; c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (c1;; c2) c' Q\n 2. \\<And>x1 c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (IF x1 THEN c1 ELSE c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (IF x1 THEN c1 ELSE c2) c' Q\n 3. \\<And>x1 c P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q;\n        ir_valid P (WHILE x1 DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (WHILE x1 DO c) c' Q", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare P (c1;; c2) c' Q", "apply(rule ir_Seq1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ir_hoare P c1 c' ?Q\n 2. ir_hoare ?Q c2 SKIP Q", "apply (blast intro: a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare\n     (\\<lambda>t t'.\n         \\<exists>s s'.\n            P s s' \\<and>\n            (c1, s) \\<Rightarrow> t \\<and>\n            (c', s') \\<Rightarrow> t' \\<and>\n            (\\<exists>u. (c2, t) \\<Rightarrow> u \\<and> Q u t'))\n     c2 SKIP Q", "apply(rule ir_Skip_sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t t'.\n       Q t' t \\<Longrightarrow>\n       \\<exists>s'.\n          (\\<exists>s s'a.\n              P s s'a \\<and>\n              (c1, s) \\<Rightarrow> s' \\<and>\n              (c', s'a) \\<Rightarrow> t \\<and>\n              (\\<exists>u. (c2, s') \\<Rightarrow> u \\<and> Q u t)) \\<and>\n          (c2, s') \\<Rightarrow> t'", "by(metis SeqE ir_valid_def Seq)"], ["proof (state)\nthis:\n  ir_hoare P (c1;; c2) c' Q\n\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (IF x1 THEN c1 ELSE c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (IF x1 THEN c1 ELSE c2) c' Q\n 2. \\<And>x1 c P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q;\n        ir_valid P (WHILE x1 DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (WHILE x1 DO c) c' Q", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (IF x1 THEN c1 ELSE c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (IF x1 THEN c1 ELSE c2) c' Q\n 2. \\<And>x1 c P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q;\n        ir_valid P (WHILE x1 DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (WHILE x1 DO c) c' Q", "case (If x1 c1 c2)"], ["proof (state)\nthis:\n  ir_valid ?P c1 ?c' ?Q \\<Longrightarrow> ir_hoare ?P c1 ?c' ?Q\n  ir_valid ?P c2 ?c' ?Q \\<Longrightarrow> ir_hoare ?P c2 ?c' ?Q\n  ir_valid P (IF x1 THEN c1 ELSE c2) c' Q\n\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (IF x1 THEN c1 ELSE c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (IF x1 THEN c1 ELSE c2) c' Q\n 2. \\<And>x1 c P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q;\n        ir_valid P (WHILE x1 DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (WHILE x1 DO c) c' Q", "have t: \"ir_hoare (\\<lambda>s s'. P s s' \\<and> bval x1 s) c1 c'\n      (\\<lambda>t t'. Q t t' \\<and> (\\<exists>s s'. P s s' \\<and> (c1, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t' \\<and> bval x1 s))\" and\n       f: \" ir_hoare (\\<lambda>s s'. P s s' \\<and> \\<not> bval x1 s) c2 c'\n      (\\<lambda>t t'. Q t t' \\<and> (\\<exists>s s'. P s s' \\<and> (c2, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t' \\<and> \\<not> bval x1 s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare (\\<lambda>s s'. P s s' \\<and> bval x1 s) c1 c'\n     (\\<lambda>t t'.\n         Q t t' \\<and>\n         (\\<exists>s s'.\n             P s s' \\<and>\n             (c1, s) \\<Rightarrow> t \\<and>\n             (c', s') \\<Rightarrow> t' \\<and> bval x1 s)) &&&\n    ir_hoare (\\<lambda>s s'. P s s' \\<and> \\<not> bval x1 s) c2 c'\n     (\\<lambda>t t'.\n         Q t t' \\<and>\n         (\\<exists>s s'.\n             P s s' \\<and>\n             (c2, s) \\<Rightarrow> t \\<and>\n             (c', s') \\<Rightarrow> t' \\<and> \\<not> bval x1 s))", "using ir_valid_If If"], ["proof (prove)\nusing this:\n  ir_valid ?P (IF ?b THEN ?c1.0 ELSE ?c2.0) ?c' ?Q \\<Longrightarrow>\n  ir_valid (\\<lambda>s s'. ?P s s' \\<and> bval ?b s) ?c1.0 ?c'\n   (\\<lambda>t t'.\n       ?Q t t' \\<and>\n       (\\<exists>s s'.\n           ?P s s' \\<and>\n           (?c1.0, s) \\<Rightarrow> t \\<and>\n           (?c', s') \\<Rightarrow> t' \\<and> bval ?b s)) \\<and>\n  ir_valid (\\<lambda>s s'. ?P s s' \\<and> \\<not> bval ?b s) ?c2.0 ?c'\n   (\\<lambda>t t'.\n       ?Q t t' \\<and>\n       (\\<exists>s s'.\n           ?P s s' \\<and>\n           (?c2.0, s) \\<Rightarrow> t \\<and>\n           (?c', s') \\<Rightarrow> t' \\<and> \\<not> bval ?b s))\n  ir_valid ?P c1 ?c' ?Q \\<Longrightarrow> ir_hoare ?P c1 ?c' ?Q\n  ir_valid ?P c2 ?c' ?Q \\<Longrightarrow> ir_hoare ?P c2 ?c' ?Q\n  ir_valid P (IF x1 THEN c1 ELSE c2) c' Q\n\ngoal (1 subgoal):\n 1. ir_hoare (\\<lambda>s s'. P s s' \\<and> bval x1 s) c1 c'\n     (\\<lambda>t t'.\n         Q t t' \\<and>\n         (\\<exists>s s'.\n             P s s' \\<and>\n             (c1, s) \\<Rightarrow> t \\<and>\n             (c', s') \\<Rightarrow> t' \\<and> bval x1 s)) &&&\n    ir_hoare (\\<lambda>s s'. P s s' \\<and> \\<not> bval x1 s) c2 c'\n     (\\<lambda>t t'.\n         Q t t' \\<and>\n         (\\<exists>s s'.\n             P s s' \\<and>\n             (c2, s) \\<Rightarrow> t \\<and>\n             (c', s') \\<Rightarrow> t' \\<and> \\<not> bval x1 s))", "by blast+"], ["proof (state)\nthis:\n  ir_hoare (\\<lambda>s s'. P s s' \\<and> bval x1 s) c1 c'\n   (\\<lambda>t t'.\n       Q t t' \\<and>\n       (\\<exists>s s'.\n           P s s' \\<and>\n           (c1, s) \\<Rightarrow> t \\<and>\n           (c', s') \\<Rightarrow> t' \\<and> bval x1 s))\n  ir_hoare (\\<lambda>s s'. P s s' \\<and> \\<not> bval x1 s) c2 c'\n   (\\<lambda>t t'.\n       Q t t' \\<and>\n       (\\<exists>s s'.\n           P s s' \\<and>\n           (c2, s) \\<Rightarrow> t \\<and>\n           (c', s') \\<Rightarrow> t' \\<and> \\<not> bval x1 s))\n\ngoal (2 subgoals):\n 1. \\<And>x1 c1 c2 P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c1 c' Q \\<Longrightarrow> ir_hoare P c1 c' Q;\n        \\<And>P c' Q.\n           ir_valid P c2 c' Q \\<Longrightarrow> ir_hoare P c2 c' Q;\n        ir_valid P (IF x1 THEN c1 ELSE c2) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (IF x1 THEN c1 ELSE c2) c' Q\n 2. \\<And>x1 c P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q;\n        ir_valid P (WHILE x1 DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (WHILE x1 DO c) c' Q", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare P (IF x1 THEN c1 ELSE c2) c' Q", "(* consider both cases of the if via conseq, disj, then _True and _False *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare P (IF x1 THEN c1 ELSE c2) c' Q", "apply(rule ir_conseq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ir_hoare ?P (IF x1 THEN c1 ELSE c2) c' ?Q\n 2. \\<And>s s'. ?P s s' \\<Longrightarrow> P s s'\n 3. \\<And>s s'. Q s s' \\<Longrightarrow> ?Q s s'", "apply(rule ir_disj)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ir_hoare ?P\\<^sub>14 (IF x1 THEN c1 ELSE c2) c' ?Q\\<^sub>14\n 2. ir_hoare ?P\\<^sub>24 (IF x1 THEN c1 ELSE c2) c' ?Q\\<^sub>24\n 3. \\<And>s s'.\n       ?P\\<^sub>14 s s' \\<or> ?P\\<^sub>24 s s' \\<Longrightarrow> P s s'\n 4. \\<And>s s'.\n       Q s s' \\<Longrightarrow> ?Q\\<^sub>14 s s' \\<or> ?Q\\<^sub>24 s s'", "apply(rule ir_If_True,fastforce intro: t)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ir_hoare ?P\\<^sub>24 (IF x1 THEN c1 ELSE c2) c' ?Q\\<^sub>24\n 2. \\<And>s s'. P s s' \\<or> ?P\\<^sub>24 s s' \\<Longrightarrow> P s s'\n 3. \\<And>s s'.\n       Q s s' \\<Longrightarrow>\n       Q s s' \\<and>\n       (\\<exists>sa s'a.\n           P sa s'a \\<and>\n           (c1, sa) \\<Rightarrow> s \\<and>\n           (c', s'a) \\<Rightarrow> s' \\<and> bval x1 sa) \\<or>\n       ?Q\\<^sub>24 s s'", "apply(rule ir_If_False, fastforce intro: f)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s'. P s s' \\<or> P s s' \\<Longrightarrow> P s s'\n 2. \\<And>s s'.\n       Q s s' \\<Longrightarrow>\n       Q s s' \\<and>\n       (\\<exists>sa s'a.\n           P sa s'a \\<and>\n           (c1, sa) \\<Rightarrow> s \\<and>\n           (c', s'a) \\<Rightarrow> s' \\<and> bval x1 sa) \\<or>\n       Q s s' \\<and>\n       (\\<exists>sa s'a.\n           P sa s'a \\<and>\n           (c2, sa) \\<Rightarrow> s \\<and>\n           (c', s'a) \\<Rightarrow> s' \\<and> \\<not> bval x1 sa)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s'.\n       Q s s' \\<Longrightarrow>\n       Q s s' \\<and>\n       (\\<exists>sa s'a.\n           P sa s'a \\<and>\n           (c1, sa) \\<Rightarrow> s \\<and>\n           (c', s'a) \\<Rightarrow> s' \\<and> bval x1 sa) \\<or>\n       Q s s' \\<and>\n       (\\<exists>sa s'a.\n           P sa s'a \\<and>\n           (c2, sa) \\<Rightarrow> s \\<and>\n           (c', s'a) \\<Rightarrow> s' \\<and> \\<not> bval x1 sa)", "by (smt IfE ir_valid_def If)"], ["proof (state)\nthis:\n  ir_hoare P (IF x1 THEN c1 ELSE c2) c' Q\n\ngoal (1 subgoal):\n 1. \\<And>x1 c P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q;\n        ir_valid P (WHILE x1 DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (WHILE x1 DO c) c' Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 c P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q;\n        ir_valid P (WHILE x1 DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (WHILE x1 DO c) c' Q", "case (While x1 c)"], ["proof (state)\nthis:\n  ir_valid ?P c ?c' ?Q \\<Longrightarrow> ir_hoare ?P c ?c' ?Q\n  ir_valid P (WHILE x1 DO c) c' Q\n\ngoal (1 subgoal):\n 1. \\<And>x1 c P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q;\n        ir_valid P (WHILE x1 DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (WHILE x1 DO c) c' Q", "have a: \"\\<And>n. ir_hoare (\\<lambda>s s'. get_back P x1 c n s s' \\<and> bval x1 s) c SKIP (get_back P x1 c (Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       ir_hoare (\\<lambda>s s'. get_back P x1 c n s s' \\<and> bval x1 s) c\n        SKIP (get_back P x1 c (Suc n))", "using ir_valid_While1  While"], ["proof (prove)\nusing this:\n  ir_valid (get_back ?P ?b ?c ?k) (WHILE ?b DO ?c) ?c' ?Q \\<Longrightarrow>\n  ir_valid (\\<lambda>s s'. get_back ?P ?b ?c ?k s s' \\<and> bval ?b s) ?c\n   SKIP\n   (\\<lambda>t t'.\n       get_back ?P ?b ?c (Suc ?k) t t' \\<and>\n       (\\<exists>u u'.\n           (WHILE ?b DO ?c, t) \\<Rightarrow> u \\<and>\n           (?c', t') \\<Rightarrow> u' \\<and> ?Q u u'))\n  ir_valid ?P c ?c' ?Q \\<Longrightarrow> ir_hoare ?P c ?c' ?Q\n  ir_valid P (WHILE x1 DO c) c' Q\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ir_hoare (\\<lambda>s s'. get_back P x1 c n s s' \\<and> bval x1 s) c\n        SKIP (get_back P x1 c (Suc n))", "by (smt get_back.simps(2) ir_valid_def meh_simp)"], ["proof (state)\nthis:\n  ir_hoare (\\<lambda>s s'. get_back P x1 c ?n s s' \\<and> bval x1 s) c SKIP\n   (get_back P x1 c (Suc ?n))\n\ngoal (1 subgoal):\n 1. \\<And>x1 c P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q;\n        ir_valid P (WHILE x1 DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (WHILE x1 DO c) c' Q", "have b: \"ir_hoare (\\<lambda>s s'. P s s' \\<and> bval x1 s) c c'\n                    (\\<lambda>t t'.  \\<exists>s'. (c', s') \\<Rightarrow> t' \\<and> (\\<exists>s. (c, s) \\<Rightarrow> t \\<and> bval x1 s \\<and> P s s') \\<and> \n                    (\\<exists>u. (WHILE x1 DO c, t) \\<Rightarrow> u \\<and> Q u t'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare (\\<lambda>s s'. P s s' \\<and> bval x1 s) c c'\n     (\\<lambda>t t'.\n         \\<exists>s'.\n            (c', s') \\<Rightarrow> t' \\<and>\n            (\\<exists>s.\n                (c, s) \\<Rightarrow> t \\<and>\n                bval x1 s \\<and> P s s') \\<and>\n            (\\<exists>u. (WHILE x1 DO c, t) \\<Rightarrow> u \\<and> Q u t'))", "using ir_valid_While3[where k=0,simplified] While"], ["proof (prove)\nusing this:\n  ir_valid ?P (WHILE ?b DO ?c) ?c' ?Q \\<Longrightarrow>\n  ir_valid (\\<lambda>s s'. ?P s s' \\<and> bval ?b s) ?c ?c'\n   (\\<lambda>t t'.\n       \\<exists>s'.\n          (?c', s') \\<Rightarrow> t' \\<and>\n          (\\<exists>s.\n              (?c, s) \\<Rightarrow> t \\<and>\n              bval ?b s \\<and> ?P s s') \\<and>\n          (\\<exists>u. (WHILE ?b DO ?c, t) \\<Rightarrow> u \\<and> ?Q u t'))\n  ir_valid ?P c ?c' ?Q \\<Longrightarrow> ir_hoare ?P c ?c' ?Q\n  ir_valid P (WHILE x1 DO c) c' Q\n\ngoal (1 subgoal):\n 1. ir_hoare (\\<lambda>s s'. P s s' \\<and> bval x1 s) c c'\n     (\\<lambda>t t'.\n         \\<exists>s'.\n            (c', s') \\<Rightarrow> t' \\<and>\n            (\\<exists>s.\n                (c, s) \\<Rightarrow> t \\<and>\n                bval x1 s \\<and> P s s') \\<and>\n            (\\<exists>u. (WHILE x1 DO c, t) \\<Rightarrow> u \\<and> Q u t'))", "by blast"], ["proof (state)\nthis:\n  ir_hoare (\\<lambda>s s'. P s s' \\<and> bval x1 s) c c'\n   (\\<lambda>t t'.\n       \\<exists>s'.\n          (c', s') \\<Rightarrow> t' \\<and>\n          (\\<exists>s.\n              (c, s) \\<Rightarrow> t \\<and> bval x1 s \\<and> P s s') \\<and>\n          (\\<exists>u. (WHILE x1 DO c, t) \\<Rightarrow> u \\<and> Q u t'))\n\ngoal (1 subgoal):\n 1. \\<And>x1 c P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q;\n        ir_valid P (WHILE x1 DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (WHILE x1 DO c) c' Q", "have gb: \"\\<And>t t'. Q t t' \\<and> (\\<exists>s'. (c', s') \\<Rightarrow> t' \\<and> P t s' \\<and> \\<not> bval x1 t) \\<Longrightarrow>\n                    \\<exists>s'. ((\\<exists>n. get_back P x1 c n t s') \\<and> \\<not> bval x1 t) \\<and> (c', s') \\<Rightarrow> t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t t'.\n       Q t t' \\<and>\n       (\\<exists>s'.\n           (c', s') \\<Rightarrow> t' \\<and>\n           P t s' \\<and> \\<not> bval x1 t) \\<Longrightarrow>\n       \\<exists>s'.\n          ((\\<exists>n. get_back P x1 c n t s') \\<and>\n           \\<not> bval x1 t) \\<and>\n          (c', s') \\<Rightarrow> t'", "by (meson get_back.simps(1))"], ["proof (state)\nthis:\n  Q ?t ?t' \\<and>\n  (\\<exists>s'.\n      (c', s') \\<Rightarrow> ?t' \\<and>\n      P ?t s' \\<and> \\<not> bval x1 ?t) \\<Longrightarrow>\n  \\<exists>s'.\n     ((\\<exists>n. get_back P x1 c n ?t s') \\<and> \\<not> bval x1 ?t) \\<and>\n     (c', s') \\<Rightarrow> ?t'\n\ngoal (1 subgoal):\n 1. \\<And>x1 c P c' Q.\n       \\<lbrakk>\\<And>P c' Q.\n                   ir_valid P c c' Q \\<Longrightarrow> ir_hoare P c c' Q;\n        ir_valid P (WHILE x1 DO c) c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare P (WHILE x1 DO c) c' Q", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare P (WHILE x1 DO c) c' Q", "(* use the frontier rule much as in OHearn POPL *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare P (WHILE x1 DO c) c' Q", "apply(rule ir_conseq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ir_hoare ?P (WHILE x1 DO c) c' ?Q\n 2. \\<And>s s'. ?P s s' \\<Longrightarrow> P s s'\n 3. \\<And>s s'. Q s s' \\<Longrightarrow> ?Q s s'", "apply(rule_tac P=\"get_back P x1 c\" in ir_While_backwards_frontier)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n.\n       ir_hoare (\\<lambda>s s'. get_back P x1 c n s s' \\<and> bval x1 s) c\n        SKIP (get_back P x1 c (Suc n))\n 2. ir_hoare (\\<lambda>s s'. \\<exists>n. get_back P x1 c n s s')\n     (WHILE x1 DO c) c' ?Q\n 3. \\<And>s s'. get_back P x1 c 0 s s' \\<Longrightarrow> P s s'\n 4. \\<And>s s'. Q s s' \\<Longrightarrow> ?Q s s'", "apply(blast intro: a)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ir_hoare (\\<lambda>s s'. \\<exists>n. get_back P x1 c n s s')\n     (WHILE x1 DO c) c' ?Q\n 2. \\<And>s s'. get_back P x1 c 0 s s' \\<Longrightarrow> P s s'\n 3. \\<And>s s'. Q s s' \\<Longrightarrow> ?Q s s'", "(* consider both cases of the While via conseq, disj, then _True and _False *)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ir_hoare (\\<lambda>s s'. \\<exists>n. get_back P x1 c n s s')\n     (WHILE x1 DO c) c' ?Q\n 2. \\<And>s s'. get_back P x1 c 0 s s' \\<Longrightarrow> P s s'\n 3. \\<And>s s'. Q s s' \\<Longrightarrow> ?Q s s'", "apply(rule ir_conseq)"], ["proof (prove)\ngoal (5 subgoals):\n 1. ir_hoare ?P11 (WHILE x1 DO c) c' ?Q11\n 2. \\<And>s s'.\n       ?P11 s s' \\<Longrightarrow> \\<exists>n. get_back P x1 c n s s'\n 3. \\<And>s s'. ?Q s s' \\<Longrightarrow> ?Q11 s s'\n 4. \\<And>s s'. get_back P x1 c 0 s s' \\<Longrightarrow> P s s'\n 5. \\<And>s s'. Q s s' \\<Longrightarrow> ?Q s s'", "apply(rule ir_disj)"], ["proof (prove)\ngoal (6 subgoals):\n 1. ir_hoare ?P\\<^sub>115 (WHILE x1 DO c) c' ?Q\\<^sub>115\n 2. ir_hoare ?P\\<^sub>215 (WHILE x1 DO c) c' ?Q\\<^sub>215\n 3. \\<And>s s'.\n       ?P\\<^sub>115 s s' \\<or> ?P\\<^sub>215 s s' \\<Longrightarrow>\n       \\<exists>n. get_back P x1 c n s s'\n 4. \\<And>s s'.\n       ?Q s s' \\<Longrightarrow> ?Q\\<^sub>115 s s' \\<or> ?Q\\<^sub>215 s s'\n 5. \\<And>s s'. get_back P x1 c 0 s s' \\<Longrightarrow> P s s'\n 6. \\<And>s s'. Q s s' \\<Longrightarrow> ?Q s s'", "apply(rule_tac P=\"\\<lambda>s s'. \\<exists>n. get_back P x1 c n s s'\" and Q=\"(\\<lambda>t t'. Q t t' \\<and> (\\<exists>s'. (c', s') \\<Rightarrow> t' \\<and> P t s' \\<and> \\<not> bval x1 t))\" in ir_While_False)"], ["proof (prove)\ngoal (6 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         (\\<exists>n. get_back P x1 c n s s') \\<and> \\<not> bval x1 s)\n     SKIP c'\n     (\\<lambda>t t'.\n         Q t t' \\<and>\n         (\\<exists>s'.\n             (c', s') \\<Rightarrow> t' \\<and>\n             P t s' \\<and> \\<not> bval x1 t))\n 2. ir_hoare ?P\\<^sub>215 (WHILE x1 DO c) c' ?Q\\<^sub>215\n 3. \\<And>s s'.\n       (\\<exists>n. get_back P x1 c n s s') \\<or>\n       ?P\\<^sub>215 s s' \\<Longrightarrow>\n       \\<exists>n. get_back P x1 c n s s'\n 4. \\<And>s s'.\n       ?Q s s' \\<Longrightarrow>\n       Q s s' \\<and>\n       (\\<exists>s'a.\n           (c', s'a) \\<Rightarrow> s' \\<and>\n           P s s'a \\<and> \\<not> bval x1 s) \\<or>\n       ?Q\\<^sub>215 s s'\n 5. \\<And>s s'. get_back P x1 c 0 s s' \\<Longrightarrow> P s s'\n 6. \\<And>s s'. Q s s' \\<Longrightarrow> ?Q s s'", "apply(rule ir_Skip, blast intro: gb)"], ["proof (prove)\ngoal (5 subgoals):\n 1. ir_hoare ?P\\<^sub>215 (WHILE x1 DO c) c' ?Q\\<^sub>215\n 2. \\<And>s s'.\n       (\\<exists>n. get_back P x1 c n s s') \\<or>\n       ?P\\<^sub>215 s s' \\<Longrightarrow>\n       \\<exists>n. get_back P x1 c n s s'\n 3. \\<And>s s'.\n       ?Q s s' \\<Longrightarrow>\n       Q s s' \\<and>\n       (\\<exists>s'a.\n           (c', s'a) \\<Rightarrow> s' \\<and>\n           P s s'a \\<and> \\<not> bval x1 s) \\<or>\n       ?Q\\<^sub>215 s s'\n 4. \\<And>s s'. get_back P x1 c 0 s s' \\<Longrightarrow> P s s'\n 5. \\<And>s s'. Q s s' \\<Longrightarrow> ?Q s s'", "apply(rule ir_While_True)"], ["proof (prove)\ngoal (5 subgoals):\n 1. ir_hoare (\\<lambda>s s'. ?P\\<^sub>215 s s' \\<and> bval x1 s)\n     (c;; WHILE x1 DO c) c' ?Q\\<^sub>215\n 2. \\<And>s s'.\n       (\\<exists>n. get_back P x1 c n s s') \\<or>\n       ?P\\<^sub>215 s s' \\<Longrightarrow>\n       \\<exists>n. get_back P x1 c n s s'\n 3. \\<And>s s'.\n       ?Q s s' \\<Longrightarrow>\n       Q s s' \\<and>\n       (\\<exists>s'a.\n           (c', s'a) \\<Rightarrow> s' \\<and>\n           P s s'a \\<and> \\<not> bval x1 s) \\<or>\n       ?Q\\<^sub>215 s s'\n 4. \\<And>s s'. get_back P x1 c 0 s s' \\<Longrightarrow> P s s'\n 5. \\<And>s s'. Q s s' \\<Longrightarrow> ?Q s s'", "apply(rule ir_Seq1[OF b])"], ["proof (prove)\ngoal (5 subgoals):\n 1. ir_hoare\n     (\\<lambda>t t'.\n         \\<exists>s'.\n            (c', s') \\<Rightarrow> t' \\<and>\n            (\\<exists>s.\n                (c, s) \\<Rightarrow> t \\<and>\n                bval x1 s \\<and> P s s') \\<and>\n            (\\<exists>u. (WHILE x1 DO c, t) \\<Rightarrow> u \\<and> Q u t'))\n     (WHILE x1 DO c) SKIP ?Q\\<^sub>215\n 2. \\<And>s s'.\n       (\\<exists>n. get_back P x1 c n s s') \\<or> P s s' \\<Longrightarrow>\n       \\<exists>n. get_back P x1 c n s s'\n 3. \\<And>s s'.\n       ?Q s s' \\<Longrightarrow>\n       Q s s' \\<and>\n       (\\<exists>s'a.\n           (c', s'a) \\<Rightarrow> s' \\<and>\n           P s s'a \\<and> \\<not> bval x1 s) \\<or>\n       ?Q\\<^sub>215 s s'\n 4. \\<And>s s'. get_back P x1 c 0 s s' \\<Longrightarrow> P s s'\n 5. \\<And>s s'. Q s s' \\<Longrightarrow> ?Q s s'", "apply(rule ir_Skip_sym)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t t'.\n       ?Q\\<^sub>215 t' t \\<Longrightarrow>\n       \\<exists>s'.\n          (\\<exists>s'a.\n              (c', s'a) \\<Rightarrow> t \\<and>\n              (\\<exists>s.\n                  (c, s) \\<Rightarrow> s' \\<and>\n                  bval x1 s \\<and> P s s'a) \\<and>\n              (\\<exists>u.\n                  (WHILE x1 DO c, s') \\<Rightarrow> u \\<and> Q u t)) \\<and>\n          (WHILE x1 DO c, s') \\<Rightarrow> t'\n 2. \\<And>s s'.\n       (\\<exists>n. get_back P x1 c n s s') \\<or> P s s' \\<Longrightarrow>\n       \\<exists>n. get_back P x1 c n s s'\n 3. \\<And>s s'.\n       ?Q s s' \\<Longrightarrow>\n       Q s s' \\<and>\n       (\\<exists>s'a.\n           (c', s'a) \\<Rightarrow> s' \\<and>\n           P s s'a \\<and> \\<not> bval x1 s) \\<or>\n       ?Q\\<^sub>215 s s'\n 4. \\<And>s s'. get_back P x1 c 0 s s' \\<Longrightarrow> P s s'\n 5. \\<And>s s'. Q s s' \\<Longrightarrow> ?Q s s'", "apply(fastforce)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s s'.\n       (\\<exists>n. get_back P x1 c n s s') \\<or> P s s' \\<Longrightarrow>\n       \\<exists>n. get_back P x1 c n s s'\n 2. \\<And>s s'.\n       ?Q s s' \\<Longrightarrow>\n       Q s s' \\<and>\n       (\\<exists>s'a.\n           (c', s'a) \\<Rightarrow> s' \\<and>\n           P s s'a \\<and> \\<not> bval x1 s) \\<or>\n       (\\<exists>s'a.\n           (\\<exists>s'b.\n               (c', s'b) \\<Rightarrow> s' \\<and>\n               (\\<exists>s.\n                   (c, s) \\<Rightarrow> s'a \\<and>\n                   bval x1 s \\<and> P s s'b) \\<and>\n               (\\<exists>u.\n                   (WHILE x1 DO c, s'a) \\<Rightarrow> u \\<and>\n                   Q u s')) \\<and>\n           (WHILE x1 DO c, s'a) \\<Rightarrow> s)\n 3. \\<And>s s'. get_back P x1 c 0 s s' \\<Longrightarrow> P s s'\n 4. \\<And>s s'. Q s s' \\<Longrightarrow> ?Q s s'", "apply (metis get_back.simps(1))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s s'.\n       ?Q s s' \\<Longrightarrow>\n       Q s s' \\<and>\n       (\\<exists>s'a.\n           (c', s'a) \\<Rightarrow> s' \\<and>\n           P s s'a \\<and> \\<not> bval x1 s) \\<or>\n       (\\<exists>s'a.\n           (\\<exists>s'b.\n               (c', s'b) \\<Rightarrow> s' \\<and>\n               (\\<exists>s.\n                   (c, s) \\<Rightarrow> s'a \\<and>\n                   bval x1 s \\<and> P s s'b) \\<and>\n               (\\<exists>u.\n                   (WHILE x1 DO c, s'a) \\<Rightarrow> u \\<and>\n                   Q u s')) \\<and>\n           (WHILE x1 DO c, s'a) \\<Rightarrow> s)\n 2. \\<And>s s'. get_back P x1 c 0 s s' \\<Longrightarrow> P s s'\n 3. \\<And>s s'. Q s s' \\<Longrightarrow> ?Q s s'", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s'. get_back P x1 c 0 s s' \\<Longrightarrow> P s s'\n 2. \\<And>s s'.\n       Q s s' \\<Longrightarrow>\n       Q s s' \\<and>\n       (\\<exists>s'a.\n           (c', s'a) \\<Rightarrow> s' \\<and>\n           P s s'a \\<and> \\<not> bval x1 s) \\<or>\n       (\\<exists>s'a.\n           (\\<exists>s'b.\n               (c', s'b) \\<Rightarrow> s' \\<and>\n               (\\<exists>s.\n                   (c, s) \\<Rightarrow> s'a \\<and>\n                   bval x1 s \\<and> P s s'b) \\<and>\n               (\\<exists>u.\n                   (WHILE x1 DO c, s'a) \\<Rightarrow> u \\<and>\n                   Q u s')) \\<and>\n           (WHILE x1 DO c, s'a) \\<Rightarrow> s)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s'.\n       Q s s' \\<Longrightarrow>\n       Q s s' \\<and>\n       (\\<exists>s'a.\n           (c', s'a) \\<Rightarrow> s' \\<and>\n           P s s'a \\<and> \\<not> bval x1 s) \\<or>\n       (\\<exists>s'a.\n           (\\<exists>s'b.\n               (c', s'b) \\<Rightarrow> s' \\<and>\n               (\\<exists>s.\n                   (c, s) \\<Rightarrow> s'a \\<and>\n                   bval x1 s \\<and> P s s'b) \\<and>\n               (\\<exists>u.\n                   (WHILE x1 DO c, s'a) \\<Rightarrow> u \\<and>\n                   Q u s')) \\<and>\n           (WHILE x1 DO c, s'a) \\<Rightarrow> s)", "by (metis While.prems WhileE ir_valid_def)"], ["proof (state)\nthis:\n  ir_hoare P (WHILE x1 DO c) c' Q\n\ngoal:\nNo subgoals!", "qed"], ["", "section \"A Decomposition Principle: Proofs via Under-Approximate Hoare Logic\""], ["", "text \\<open>\n  We show the under-approximate analogue holds for Beringer's~\\cite{Beringer_11} decomposition\n  principle for over-approximate relational logic.\n\\<close>"], ["", "definition\n  decomp :: \"rassn \\<Rightarrow> com \\<Rightarrow> com \\<Rightarrow> rassn \\<Rightarrow> rassn\" where\n  \"decomp P c c' Q \\<equiv> \\<lambda>t s'. \\<exists>s t'. P s s' \\<and> (c,s) \\<Rightarrow> t \\<and> (c',s') \\<Rightarrow> t' \\<and> Q t t'\""], ["", "lemma ir_valid_decomp1:\n  \"ir_valid P c c' Q \\<Longrightarrow> ir_valid P c SKIP (decomp P c c' Q) \\<and> ir_valid (decomp P c c' Q) SKIP c' Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid P c c' Q \\<Longrightarrow>\n    ir_valid P c SKIP (decomp P c c' Q) \\<and>\n    ir_valid (decomp P c c' Q) SKIP c' Q", "by(fastforce simp: ir_valid_def meh_simp decomp_def)"], ["", "lemma ir_valid_decomp2:\n  \"ir_valid P c SKIP R \\<and> ir_valid R SKIP c' Q \\<Longrightarrow> ir_valid P c c' Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid P c SKIP R \\<and> ir_valid R SKIP c' Q \\<Longrightarrow>\n    ir_valid P c c' Q", "by(fastforce simp: ir_valid_def meh_simp decomp_def)"], ["", "lemma ir_valid_decomp:\n  \"ir_valid P c c' Q = (ir_valid P c SKIP (decomp P c c' Q) \\<and> ir_valid (decomp P c c' Q) SKIP c' Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid P c c' Q =\n    (ir_valid P c SKIP (decomp P c c' Q) \\<and>\n     ir_valid (decomp P c c' Q) SKIP c' Q)", "using ir_valid_decomp1 ir_valid_decomp2"], ["proof (prove)\nusing this:\n  ir_valid ?P ?c ?c' ?Q \\<Longrightarrow>\n  ir_valid ?P ?c SKIP (decomp ?P ?c ?c' ?Q) \\<and>\n  ir_valid (decomp ?P ?c ?c' ?Q) SKIP ?c' ?Q\n  ir_valid ?P ?c SKIP ?R \\<and> ir_valid ?R SKIP ?c' ?Q \\<Longrightarrow>\n  ir_valid ?P ?c ?c' ?Q\n\ngoal (1 subgoal):\n 1. ir_valid P c c' Q =\n    (ir_valid P c SKIP (decomp P c c' Q) \\<and>\n     ir_valid (decomp P c c' Q) SKIP c' Q)", "by blast"], ["", "text \\<open>\n  Completeness with soundness means we can prove proof rules about @{term ir_hoare} in terms\n  of @{term ir_valid}.\n\\<close>"], ["", "lemma ir_to_Skip:     \n  \"ir_hoare P c c' Q = (ir_hoare P c SKIP (decomp P c c' Q) \\<and> ir_hoare (decomp P c c' Q) SKIP c' Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare P c c' Q =\n    (ir_hoare P c SKIP (decomp P c c' Q) \\<and>\n     ir_hoare (decomp P c c' Q) SKIP c' Q)", "using soundness completeness ir_valid_decomp"], ["proof (prove)\nusing this:\n  ir_hoare ?P ?c ?c' ?Q \\<Longrightarrow> ir_valid ?P ?c ?c' ?Q\n  ir_valid ?P ?c ?c' ?Q \\<Longrightarrow> ir_hoare ?P ?c ?c' ?Q\n  ir_valid ?P ?c ?c' ?Q =\n  (ir_valid ?P ?c SKIP (decomp ?P ?c ?c' ?Q) \\<and>\n   ir_valid (decomp ?P ?c ?c' ?Q) SKIP ?c' ?Q)\n\ngoal (1 subgoal):\n 1. ir_hoare P c c' Q =\n    (ir_hoare P c SKIP (decomp P c c' Q) \\<and>\n     ir_hoare (decomp P c c' Q) SKIP c' Q)", "by meson"], ["", "text \\<open>\n  O'Hearn's under-approximate Hoare triple, for the ``ok'' case (since that is the only case we have)\n  This is also likely the same as from the \"Reverse Hoare Logic\" paper (SEFM).\n\\<close>"], ["", "type_synonym assn = \"state \\<Rightarrow> bool\""], ["", "definition\n  ohearn :: \"assn \\<Rightarrow> com \\<Rightarrow> assn \\<Rightarrow> bool\"\n  where\n  \"ohearn P c Q \\<equiv> (\\<forall>t. Q t \\<longrightarrow> (\\<exists>s. P s \\<and> (c,s) \\<Rightarrow> t))\""], ["", "lemma fold_ohearn1:\n  \"ir_valid P c SKIP Q = (\\<forall>t'. ohearn (\\<lambda>t. P t t') c (\\<lambda>t. Q t t'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid P c SKIP Q =\n    (\\<forall>t'. ohearn (\\<lambda>t. P t t') c (\\<lambda>t. Q t t'))", "by(fastforce simp add: ir_valid_def ohearn_def)"], ["", "lemma fold_ohearn2:\n  \"ir_valid P SKIP c' Q = (\\<forall>t. ohearn (P t) c' (Q t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_valid P SKIP c' Q = (\\<forall>t. ohearn (P t) c' (Q t))", "by(simp add: ir_valid_def ohearn_def)"], ["", "theorem relational_via_hoare:\n  \"ir_hoare P c c' Q = ((\\<forall>t'. ohearn (\\<lambda>t. P t t') c (\\<lambda>t. decomp P c c' Q t t')) \\<and> (\\<forall>t. ohearn (decomp P c c' Q t) c' (Q t)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare P c c' Q =\n    ((\\<forall>t'.\n         ohearn (\\<lambda>t. P t t') c\n          (\\<lambda>t. decomp P c c' Q t t')) \\<and>\n     (\\<forall>t. ohearn (decomp P c c' Q t) c' (Q t)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ir_hoare P c c' Q =\n    ((\\<forall>t'.\n         ohearn (\\<lambda>t. P t t') c\n          (\\<lambda>t. decomp P c c' Q t t')) \\<and>\n     (\\<forall>t. ohearn (decomp P c c' Q t) c' (Q t)))", "have a: \"\\<And>P c c' Q. ir_hoare P c c' Q = ir_valid P c c' Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P c c' Q. ir_hoare P c c' Q = ir_valid P c c' Q", "using soundness completeness"], ["proof (prove)\nusing this:\n  ir_hoare ?P ?c ?c' ?Q \\<Longrightarrow> ir_valid ?P ?c ?c' ?Q\n  ir_valid ?P ?c ?c' ?Q \\<Longrightarrow> ir_hoare ?P ?c ?c' ?Q\n\ngoal (1 subgoal):\n 1. \\<And>P c c' Q. ir_hoare P c c' Q = ir_valid P c c' Q", "by auto"], ["proof (state)\nthis:\n  ir_hoare ?P ?c ?c' ?Q = ir_valid ?P ?c ?c' ?Q\n\ngoal (1 subgoal):\n 1. ir_hoare P c c' Q =\n    ((\\<forall>t'.\n         ohearn (\\<lambda>t. P t t') c\n          (\\<lambda>t. decomp P c c' Q t t')) \\<and>\n     (\\<forall>t. ohearn (decomp P c c' Q t) c' (Q t)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare P c c' Q =\n    ((\\<forall>t'.\n         ohearn (\\<lambda>t. P t t') c\n          (\\<lambda>t. decomp P c c' Q t t')) \\<and>\n     (\\<forall>t. ohearn (decomp P c c' Q t) c' (Q t)))", "using ir_to_Skip a fold_ohearn1 fold_ohearn2"], ["proof (prove)\nusing this:\n  ir_hoare ?P ?c ?c' ?Q =\n  (ir_hoare ?P ?c SKIP (decomp ?P ?c ?c' ?Q) \\<and>\n   ir_hoare (decomp ?P ?c ?c' ?Q) SKIP ?c' ?Q)\n  ir_hoare ?P ?c ?c' ?Q = ir_valid ?P ?c ?c' ?Q\n  ir_valid ?P ?c SKIP ?Q =\n  (\\<forall>t'. ohearn (\\<lambda>t. ?P t t') ?c (\\<lambda>t. ?Q t t'))\n  ir_valid ?P SKIP ?c' ?Q = (\\<forall>t. ohearn (?P t) ?c' (?Q t))\n\ngoal (1 subgoal):\n 1. ir_hoare P c c' Q =\n    ((\\<forall>t'.\n         ohearn (\\<lambda>t. P t t') c\n          (\\<lambda>t. decomp P c c' Q t t')) \\<and>\n     (\\<forall>t. ohearn (decomp P c c' Q t) c' (Q t)))", "by metis"], ["proof (state)\nthis:\n  ir_hoare P c c' Q =\n  ((\\<forall>t'.\n       ohearn (\\<lambda>t. P t t') c\n        (\\<lambda>t. decomp P c c' Q t t')) \\<and>\n   (\\<forall>t. ohearn (decomp P c c' Q t) c' (Q t)))\n\ngoal:\nNo subgoals!", "qed"], ["", "section \"Deriving Proof Rules from Completeness\""], ["", "text \\<open>\n  Note that we can more easily derive proof rules sometimes by appealing to the\n   corresponding properties of @{term ir_valid} than from the proof rules directly.\n\n  We see more examples of this later on when we consider examples.\n\\<close>"], ["", "lemma ir_Seq2: \n  \"ir_hoare P c SKIP Q \\<Longrightarrow> ir_hoare Q d c' R \\<Longrightarrow> ir_hoare P (Seq c d) c' R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ir_hoare P c SKIP Q; ir_hoare Q d c' R\\<rbrakk>\n    \\<Longrightarrow> ir_hoare P (c;; d) c' R", "using soundness completeness Seq2_ir_valid"], ["proof (prove)\nusing this:\n  ir_hoare ?P ?c ?c' ?Q \\<Longrightarrow> ir_valid ?P ?c ?c' ?Q\n  ir_valid ?P ?c ?c' ?Q \\<Longrightarrow> ir_hoare ?P ?c ?c' ?Q\n  \\<lbrakk>ir_valid ?P ?c SKIP ?Q; ir_valid ?Q ?d ?c' ?R\\<rbrakk>\n  \\<Longrightarrow> ir_valid ?P (?c;; ?d) ?c' ?R\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ir_hoare P c SKIP Q; ir_hoare Q d c' R\\<rbrakk>\n    \\<Longrightarrow> ir_hoare P (c;; d) c' R", "by metis"], ["", "lemma ir_Seq: \n  \"ir_hoare P c c' Q \\<Longrightarrow> ir_hoare Q d d' R \\<Longrightarrow> ir_hoare P (Seq c d) (Seq c' d') R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ir_hoare P c c' Q; ir_hoare Q d d' R\\<rbrakk>\n    \\<Longrightarrow> ir_hoare P (c;; d) (c';; d') R", "using soundness completeness Seq_ir_valid"], ["proof (prove)\nusing this:\n  ir_hoare ?P ?c ?c' ?Q \\<Longrightarrow> ir_valid ?P ?c ?c' ?Q\n  ir_valid ?P ?c ?c' ?Q \\<Longrightarrow> ir_hoare ?P ?c ?c' ?Q\n  \\<lbrakk>ir_valid ?P ?c ?c' ?Q; ir_valid ?Q ?d ?d' ?R\\<rbrakk>\n  \\<Longrightarrow> ir_valid ?P (?c;; ?d) (?c';; ?d') ?R\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ir_hoare P c c' Q; ir_hoare Q d d' R\\<rbrakk>\n    \\<Longrightarrow> ir_hoare P (c;; d) (c';; d') R", "by metis"], ["", "section \"Examples\""], ["", "subsection \"Some Derived Proof Rules\""], ["", "text \\<open>\nFirst derive some proof rules -- here not by appealing to completeness but just using\nthe existing rules \n\\<close>"], ["", "lemma ir_If_True_False:   \n  \"ir_hoare (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> \\<not> bval b' s') c\\<^sub>1 c\\<^sub>2' Q \\<Longrightarrow> \n   ir_hoare P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) (IF b' THEN c\\<^sub>1' ELSE c\\<^sub>2') Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare\n     (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> \\<not> bval b' s')\n     c\\<^sub>1 c\\<^sub>2' Q \\<Longrightarrow>\n    ir_hoare P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2)\n     (IF b' THEN c\\<^sub>1' ELSE c\\<^sub>2') Q", "apply(rule ir_If_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare\n     (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> \\<not> bval b' s')\n     c\\<^sub>1 c\\<^sub>2' Q \\<Longrightarrow>\n    ir_hoare (\\<lambda>s s'. P s s' \\<and> bval b s) c\\<^sub>1\n     (IF b' THEN c\\<^sub>1' ELSE c\\<^sub>2') Q", "apply(rule ir_sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare\n     (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> \\<not> bval b' s')\n     c\\<^sub>1 c\\<^sub>2' Q \\<Longrightarrow>\n    ir_hoare (flip (\\<lambda>s s'. P s s' \\<and> bval b s))\n     (IF b' THEN c\\<^sub>1' ELSE c\\<^sub>2') c\\<^sub>1 (flip Q)", "apply(rule ir_If_False)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare\n     (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> \\<not> bval b' s')\n     c\\<^sub>1 c\\<^sub>2' Q \\<Longrightarrow>\n    ir_hoare\n     (\\<lambda>s s'.\n         flip (\\<lambda>s s'. P s s' \\<and> bval b s) s s' \\<and>\n         \\<not> bval b' s)\n     c\\<^sub>2' c\\<^sub>1 (flip Q)", "apply(rule ir_sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare\n     (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> \\<not> bval b' s')\n     c\\<^sub>1 c\\<^sub>2' Q \\<Longrightarrow>\n    ir_hoare\n     (flip\n       (\\<lambda>s s'.\n           flip (\\<lambda>s s'. P s s' \\<and> bval b s) s s' \\<and>\n           \\<not> bval b' s))\n     c\\<^sub>1 c\\<^sub>2' (flip (flip Q))", "by(simp add: flip_def)"], ["", "lemma ir_Assign_Assign:\n  \"ir_hoare P (x ::= e) (x' ::= e') (\\<lambda>t t'. \\<exists>v v'. P (t(x := v)) (t'(x' := v')) \\<and> t x = aval e (t(x := v)) \\<and> t' x' = aval e' (t'(x' := v')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare P (x ::= e) (x' ::= e')\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            P (t(x := v)) (t'(x' := v')) \\<and>\n            t x = aval e (t(x := v)) \\<and> t' x' = aval e' (t'(x' := v')))", "apply(rule ir_Assign)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare\n     (\\<lambda>t t'.\n         \\<exists>v. P (t(x := v)) t' \\<and> t x = aval e (t(x := v)))\n     SKIP (x' ::= e')\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            P (t(x := v)) (t'(x' := v')) \\<and>\n            t x = aval e (t(x := v)) \\<and> t' x' = aval e' (t'(x' := v')))", "apply(rule ir_sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare\n     (flip\n       (\\<lambda>t t'.\n           \\<exists>v. P (t(x := v)) t' \\<and> t x = aval e (t(x := v))))\n     (x' ::= e') SKIP\n     (flip\n       (\\<lambda>t t'.\n           \\<exists>v v'.\n              P (t(x := v)) (t'(x' := v')) \\<and>\n              t x = aval e (t(x := v)) \\<and>\n              t' x' = aval e' (t'(x' := v'))))", "apply(rule ir_Assign)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare\n     (\\<lambda>t t'.\n         \\<exists>v.\n            flip\n             (\\<lambda>t t'.\n                 \\<exists>v.\n                    P (t(x := v)) t' \\<and> t x = aval e (t(x := v)))\n             (t(x' := v)) t' \\<and>\n            t x' = aval e' (t(x' := v)))\n     SKIP SKIP\n     (flip\n       (\\<lambda>t t'.\n           \\<exists>v v'.\n              P (t(x := v)) (t'(x' := v')) \\<and>\n              t x = aval e (t(x := v)) \\<and>\n              t' x' = aval e' (t'(x' := v'))))", "by(simp add: flip_def, auto)"], ["", "subsection \"prog1\""], ["", "text \\<open>\n  A tiny insecure program. Note that we only need to reason on one path through this program to\n  detect that it is insecure. \n\\<close>"], ["", "abbreviation low_eq :: rassn where \"low_eq s s' \\<equiv> s ''low'' = s' ''low''\""], ["", "abbreviation low_neq :: rassn where \"low_neq s s' \\<equiv> \\<not> low_eq s s'\""], ["", "definition prog1 :: com where\n  \"prog1 \\<equiv> (IF (Less (N 0) (V ''x'')) THEN (Assign ''low'' (N 1)) ELSE (Assign ''low'' (N 0)))\""], ["", "text \\<open>\n  We prove that @{term prog1} is definitely insecure. To do that, we need to find some non-empty\n  post-relation that implies insecurity. The following property encodes the idea that the \n  post-relation is non-empty, i.e. represents a feasible pair of execution paths.\n\\<close>"], ["", "definition\n  nontrivial :: \"rassn \\<Rightarrow> bool\"\n  where\n  \"nontrivial Q \\<equiv> (\\<exists>t t'. Q t t')\""], ["", "text \\<open>\n  Note the property we prove here explicitly encodes the fact that the postcondition can be anything\n  that implies insecurity, i.e. implies @{term low_neq}. In particular we should not necessarily\n  expect it to cover the entirely of all states that satisfy @{term low_neq}. \n\n  Also note that we also have to prove that the postcondition is non-trivial. This is necessary to \n  make sure that the violation we find is not an infeasible path.\n\\<close>"], ["", "lemma prog1:\n  \"\\<exists>Q. ir_hoare low_eq prog1 prog1 Q \\<and> (\\<forall>s s'. Q s s' \\<longrightarrow> low_neq s s') \\<and> nontrivial Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Q.\n       ir_hoare low_eq prog1 prog1 Q \\<and>\n       (\\<forall>s s'.\n           Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n       nontrivial Q", "apply(rule exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare low_eq prog1 prog1 ?Q \\<and>\n    (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ir_hoare low_eq prog1 prog1 ?Q\n 2. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(simp add: prog1_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ir_hoare low_eq\n     (IF Less (N 0) (V ''x'') THEN ''low'' ::= N 1 ELSE ''low'' ::= N 0)\n     (IF Less (N 0) (V ''x'') THEN ''low'' ::= N 1 ELSE ''low'' ::= N 0) ?Q\n 2. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_If_True_False)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         low_eq s s' \\<and>\n         bval (Less (N 0) (V ''x'')) s \\<and>\n         \\<not> bval (Less (N 0) (V ''x'')) s')\n     (''low'' ::= N 1) (''low'' ::= N 0) ?Q\n 2. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Assign_Assign)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>s s'.\n        (\\<exists>v v'.\n            (low_eq (s(''low'' := v)) (s'(''low'' := v')) \\<and>\n             bval (Less (N 0) (V ''x'')) (s(''low'' := v)) \\<and>\n             \\<not> bval (Less (N 0) (V ''x'')) (s'(''low'' := v'))) \\<and>\n            s ''low'' = aval (N 1) (s(''low'' := v)) \\<and>\n            s' ''low'' = aval (N 0) (s'(''low'' := v'))) \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            (low_eq (t(''low'' := v)) (t'(''low'' := v')) \\<and>\n             bval (Less (N 0) (V ''x'')) (t(''low'' := v)) \\<and>\n             \\<not> bval (Less (N 0) (V ''x'')) (t'(''low'' := v'))) \\<and>\n            t ''low'' = aval (N 1) (t(''low'' := v)) \\<and>\n            t' ''low'' = aval (N 0) (t'(''low'' := v')))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>s s'.\n       (\\<exists>v v'.\n           (low_eq (s(''low'' := v)) (s'(''low'' := v')) \\<and>\n            bval (Less (N 0) (V ''x'')) (s(''low'' := v)) \\<and>\n            \\<not> bval (Less (N 0) (V ''x'')) (s'(''low'' := v'))) \\<and>\n           s ''low'' = aval (N 1) (s(''low'' := v)) \\<and>\n           s' ''low'' = aval (N 0) (s'(''low'' := v'))) \\<longrightarrow>\n       s ''low'' \\<noteq> s' ''low''\n 2. nontrivial\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            (low_eq (t(''low'' := v)) (t'(''low'' := v')) \\<and>\n             bval (Less (N 0) (V ''x'')) (t(''low'' := v)) \\<and>\n             \\<not> bval (Less (N 0) (V ''x'')) (t'(''low'' := v'))) \\<and>\n            t ''low'' = aval (N 1) (t(''low'' := v)) \\<and>\n            t' ''low'' = aval (N 0) (t'(''low'' := v')))", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. nontrivial\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            (low_eq (t(''low'' := v)) (t'(''low'' := v')) \\<and>\n             bval (Less (N 0) (V ''x'')) (t(''low'' := v)) \\<and>\n             \\<not> bval (Less (N 0) (V ''x'')) (t'(''low'' := v'))) \\<and>\n            t ''low'' = aval (N 1) (t(''low'' := v)) \\<and>\n            t' ''low'' = aval (N 0) (t'(''low'' := v')))", "apply(clarsimp simp: nontrivial_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t.\n       0 < t ''x'' \\<and>\n       (\\<exists>t'.\n           \\<not> 0 < t' ''x'' \\<and> t ''low'' = 1 \\<and> t' ''low'' = 0)", "apply(rule_tac x=\"\\<lambda>v. 1\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < 1 \\<and>\n    (\\<exists>t'. \\<not> 0 < t' ''x'' \\<and> 1 = 1 \\<and> t' ''low'' = 0)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t'. \\<not> 0 < t' ''x'' \\<and> t' ''low'' = 0", "apply(rule_tac x=\"\\<lambda>v. 0\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> 0 < 0 \\<and> 0 = 0", "by auto"], ["", "subsection \"More Derived Proof Rules for Examples\""], ["", "definition BEq :: \"aexp \\<Rightarrow> aexp \\<Rightarrow> bexp\" where\n  \"BEq a b \\<equiv> And (Less a (Plus b (N 1))) (Less b (Plus a (N 1)))\""], ["", "lemma BEq_aval[simp]: \n  \"bval (BEq a b) s = ((aval a s) = (aval b s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bval (BEq a b) s = (aval a s = aval b s)", "by(auto simp add: BEq_def)"], ["", "lemma ir_If_True_True:\n  \"ir_hoare (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s') c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1 \\<Longrightarrow>\n   ir_hoare P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) (IF b' THEN c\\<^sub>1' ELSE c\\<^sub>2') (\\<lambda>t t'. Q\\<^sub>1 t t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n     c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1 \\<Longrightarrow>\n    ir_hoare P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2)\n     (IF b' THEN c\\<^sub>1' ELSE c\\<^sub>2') Q\\<^sub>1", "by(simp add: ir_If_True ir_sym flip_def)"], ["", "lemma ir_If_False_False:\n  \"ir_hoare (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s') c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2 \\<Longrightarrow>\n   ir_hoare P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) (IF b' THEN c\\<^sub>1' ELSE c\\<^sub>2') (\\<lambda>t t'. Q\\<^sub>2 t t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare\n     (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n     c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2 \\<Longrightarrow>\n    ir_hoare P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2)\n     (IF b' THEN c\\<^sub>1' ELSE c\\<^sub>2') Q\\<^sub>2", "by(simp add: ir_If_False ir_sym flip_def)"], ["", "lemma ir_If':\n  \"ir_hoare (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s') c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1 \\<Longrightarrow>\n   ir_hoare (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s') c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2 \\<Longrightarrow>\n   ir_hoare P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2) (IF b' THEN c\\<^sub>1' ELSE c\\<^sub>2') (\\<lambda>t t'. Q\\<^sub>1 t t' \\<or> Q\\<^sub>2 t t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2)\n                       (IF b' THEN c\\<^sub>1' ELSE c\\<^sub>2')\n                       (\\<lambda>t t'. Q\\<^sub>1 t t' \\<or> Q\\<^sub>2 t t')", "apply(rule ir_pre)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare ?P (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2)\n                       (IF b' THEN c\\<^sub>1' ELSE c\\<^sub>2')\n                       (\\<lambda>t t'. Q\\<^sub>1 t t' \\<or> Q\\<^sub>2 t t')\n 2. \\<And>s s'.\n       \\<lbrakk>ir_hoare\n                 (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n                 c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1;\n        ir_hoare\n         (\\<lambda>s s'.\n             P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n         c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2;\n        ?P s s'\\<rbrakk>\n       \\<Longrightarrow> P s s'", "apply(rule ir_disj)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare ?P\\<^sub>13\n                       (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2)\n                       (IF b' THEN c\\<^sub>1' ELSE c\\<^sub>2') Q\\<^sub>1\n 2. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare ?P\\<^sub>23\n                       (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2)\n                       (IF b' THEN c\\<^sub>1' ELSE c\\<^sub>2') Q\\<^sub>2\n 3. \\<And>s s'.\n       \\<lbrakk>ir_hoare\n                 (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n                 c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1;\n        ir_hoare\n         (\\<lambda>s s'.\n             P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n         c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2;\n        ?P\\<^sub>13 s s' \\<or> ?P\\<^sub>23 s s'\\<rbrakk>\n       \\<Longrightarrow> P s s'", "apply(rule ir_If_True_True)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare\n                       (\\<lambda>s s'.\n                           ?P\\<^sub>13 s s' \\<and>\n                           bval b s \\<and> bval b' s')\n                       c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1\n 2. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare ?P\\<^sub>23\n                       (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2)\n                       (IF b' THEN c\\<^sub>1' ELSE c\\<^sub>2') Q\\<^sub>2\n 3. \\<And>s s'.\n       \\<lbrakk>ir_hoare\n                 (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n                 c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1;\n        ir_hoare\n         (\\<lambda>s s'.\n             P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n         c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2;\n        ?P\\<^sub>13 s s' \\<or> ?P\\<^sub>23 s s'\\<rbrakk>\n       \\<Longrightarrow> P s s'", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare ?P\\<^sub>23\n                       (IF b THEN c\\<^sub>1 ELSE c\\<^sub>2)\n                       (IF b' THEN c\\<^sub>1' ELSE c\\<^sub>2') Q\\<^sub>2\n 2. \\<And>s s'.\n       \\<lbrakk>ir_hoare\n                 (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n                 c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1;\n        ir_hoare\n         (\\<lambda>s s'.\n             P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n         c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2;\n        P s s' \\<or> ?P\\<^sub>23 s s'\\<rbrakk>\n       \\<Longrightarrow> P s s'", "apply(rule ir_If_False_False)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare\n                       (\\<lambda>s s'.\n                           ?P\\<^sub>23 s s' \\<and>\n                           \\<not> bval b s \\<and> \\<not> bval b' s')\n                       c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2\n 2. \\<And>s s'.\n       \\<lbrakk>ir_hoare\n                 (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n                 c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1;\n        ir_hoare\n         (\\<lambda>s s'.\n             P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n         c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2;\n        P s s' \\<or> ?P\\<^sub>23 s s'\\<rbrakk>\n       \\<Longrightarrow> P s s'", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s'.\n       \\<lbrakk>ir_hoare\n                 (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n                 c\\<^sub>1 c\\<^sub>1' Q\\<^sub>1;\n        ir_hoare\n         (\\<lambda>s s'.\n             P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n         c\\<^sub>2 c\\<^sub>2' Q\\<^sub>2;\n        P s s' \\<or> P s s'\\<rbrakk>\n       \\<Longrightarrow> P s s'", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ir_While_triv:\n  \"ir_hoare (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s') SKIP SKIP Q\\<^sub>2 \\<Longrightarrow>\n   ir_hoare P (WHILE b DO c) (WHILE b' DO c') (\\<lambda>s s'. (Q\\<^sub>2 s s'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ir_hoare\n     (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n     SKIP SKIP Q\\<^sub>2 \\<Longrightarrow>\n    ir_hoare P (WHILE b DO c) (WHILE b' DO c') Q\\<^sub>2", "by(simp add: ir_While_False ir_sym flip_def)"], ["", "lemma ir_While':\n  \"ir_hoare (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s') (c;;WHILE b DO c) (c';;WHILE b' DO c') Q\\<^sub>1 \\<Longrightarrow>\n   ir_hoare (\\<lambda>s s'. P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s') SKIP SKIP Q\\<^sub>2 \\<Longrightarrow>\n   ir_hoare P (WHILE b DO c) (WHILE b' DO c') (\\<lambda>s s'. (Q\\<^sub>1 s s' \\<or> Q\\<^sub>2 s s'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      SKIP SKIP Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare P (WHILE b DO c) (WHILE b' DO c')\n                       (\\<lambda>s s'. Q\\<^sub>1 s s' \\<or> Q\\<^sub>2 s s')", "apply(rule ir_pre)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      SKIP SKIP Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare ?P (WHILE b DO c) (WHILE b' DO c')\n                       (\\<lambda>s s'. Q\\<^sub>1 s s' \\<or> Q\\<^sub>2 s s')\n 2. \\<And>s s'.\n       \\<lbrakk>ir_hoare\n                 (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n                 (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n        ir_hoare\n         (\\<lambda>s s'.\n             P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n         SKIP SKIP Q\\<^sub>2;\n        ?P s s'\\<rbrakk>\n       \\<Longrightarrow> P s s'", "apply(rule ir_disj)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      SKIP SKIP Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare ?P\\<^sub>13 (WHILE b DO c) (WHILE b' DO c')\n                       Q\\<^sub>1\n 2. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      SKIP SKIP Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare ?P\\<^sub>23 (WHILE b DO c) (WHILE b' DO c')\n                       Q\\<^sub>2\n 3. \\<And>s s'.\n       \\<lbrakk>ir_hoare\n                 (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n                 (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n        ir_hoare\n         (\\<lambda>s s'.\n             P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n         SKIP SKIP Q\\<^sub>2;\n        ?P\\<^sub>13 s s' \\<or> ?P\\<^sub>23 s s'\\<rbrakk>\n       \\<Longrightarrow> P s s'", "apply(rule ir_While_True)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      SKIP SKIP Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare\n                       (\\<lambda>s s'. ?P\\<^sub>13 s s' \\<and> bval b s)\n                       (c;; WHILE b DO c) (WHILE b' DO c') Q\\<^sub>1\n 2. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      SKIP SKIP Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare ?P\\<^sub>23 (WHILE b DO c) (WHILE b' DO c')\n                       Q\\<^sub>2\n 3. \\<And>s s'.\n       \\<lbrakk>ir_hoare\n                 (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n                 (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n        ir_hoare\n         (\\<lambda>s s'.\n             P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n         SKIP SKIP Q\\<^sub>2;\n        ?P\\<^sub>13 s s' \\<or> ?P\\<^sub>23 s s'\\<rbrakk>\n       \\<Longrightarrow> P s s'", "apply(rule ir_sym)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      SKIP SKIP Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare\n                       (flip\n                         (\\<lambda>s s'. ?P\\<^sub>13 s s' \\<and> bval b s))\n                       (WHILE b' DO c') (c;; WHILE b DO c) (flip Q\\<^sub>1)\n 2. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      SKIP SKIP Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare ?P\\<^sub>23 (WHILE b DO c) (WHILE b' DO c')\n                       Q\\<^sub>2\n 3. \\<And>s s'.\n       \\<lbrakk>ir_hoare\n                 (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n                 (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n        ir_hoare\n         (\\<lambda>s s'.\n             P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n         SKIP SKIP Q\\<^sub>2;\n        ?P\\<^sub>13 s s' \\<or> ?P\\<^sub>23 s s'\\<rbrakk>\n       \\<Longrightarrow> P s s'", "apply(simp add: flip_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n     \\<forall>s s'.\n        Q\\<^sub>2 s s' \\<longrightarrow>\n        P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s'\\<rbrakk>\n    \\<Longrightarrow> ir_hoare\n                       (\\<lambda>s s'. ?P\\<^sub>13 s' s \\<and> bval b s')\n                       (WHILE b' DO c') (c;; WHILE b DO c)\n                       (\\<lambda>s s'. Q\\<^sub>1 s' s)\n 2. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      SKIP SKIP Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare ?P\\<^sub>23 (WHILE b DO c) (WHILE b' DO c')\n                       Q\\<^sub>2\n 3. \\<And>s s'.\n       \\<lbrakk>ir_hoare\n                 (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n                 (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n        ir_hoare\n         (\\<lambda>s s'.\n             P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n         SKIP SKIP Q\\<^sub>2;\n        ?P\\<^sub>13 s s' \\<or> ?P\\<^sub>23 s s'\\<rbrakk>\n       \\<Longrightarrow> P s s'", "apply(rule ir_While_True)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n     \\<forall>s s'.\n        Q\\<^sub>2 s s' \\<longrightarrow>\n        P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s'\\<rbrakk>\n    \\<Longrightarrow> ir_hoare\n                       (\\<lambda>s s'.\n                           (?P\\<^sub>13 s' s \\<and> bval b s') \\<and>\n                           bval b' s)\n                       (c';; WHILE b' DO c') (c;; WHILE b DO c)\n                       (\\<lambda>s s'. Q\\<^sub>1 s' s)\n 2. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      SKIP SKIP Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare ?P\\<^sub>23 (WHILE b DO c) (WHILE b' DO c')\n                       Q\\<^sub>2\n 3. \\<And>s s'.\n       \\<lbrakk>ir_hoare\n                 (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n                 (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n        ir_hoare\n         (\\<lambda>s s'.\n             P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n         SKIP SKIP Q\\<^sub>2;\n        ?P\\<^sub>13 s s' \\<or> ?P\\<^sub>23 s s'\\<rbrakk>\n       \\<Longrightarrow> P s s'", "apply(rule ir_sym)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n     \\<forall>s s'.\n        Q\\<^sub>2 s s' \\<longrightarrow>\n        P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s'\\<rbrakk>\n    \\<Longrightarrow> ir_hoare\n                       (flip\n                         (\\<lambda>s s'.\n                             (?P\\<^sub>13 s' s \\<and> bval b s') \\<and>\n                             bval b' s))\n                       (c;; WHILE b DO c) (c';; WHILE b' DO c')\n                       (flip (\\<lambda>s s'. Q\\<^sub>1 s' s))\n 2. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      SKIP SKIP Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare ?P\\<^sub>23 (WHILE b DO c) (WHILE b' DO c')\n                       Q\\<^sub>2\n 3. \\<And>s s'.\n       \\<lbrakk>ir_hoare\n                 (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n                 (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n        ir_hoare\n         (\\<lambda>s s'.\n             P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n         SKIP SKIP Q\\<^sub>2;\n        ?P\\<^sub>13 s s' \\<or> ?P\\<^sub>23 s s'\\<rbrakk>\n       \\<Longrightarrow> P s s'", "apply(simp add: flip_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      SKIP SKIP Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare ?P\\<^sub>23 (WHILE b DO c) (WHILE b' DO c')\n                       Q\\<^sub>2\n 2. \\<And>s s'.\n       \\<lbrakk>ir_hoare\n                 (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n                 (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n        ir_hoare\n         (\\<lambda>s s'.\n             P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n         SKIP SKIP Q\\<^sub>2;\n        P s s' \\<or> ?P\\<^sub>23 s s'\\<rbrakk>\n       \\<Longrightarrow> P s s'", "apply(rule ir_While_triv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ir_hoare\n              (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n              (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n     ir_hoare\n      (\\<lambda>s s'.\n          P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n      SKIP SKIP Q\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> ir_hoare\n                       (\\<lambda>t t'.\n                           ?P\\<^sub>23 t t' \\<and>\n                           \\<not> bval b t \\<and> \\<not> bval b' t')\n                       SKIP SKIP Q\\<^sub>2\n 2. \\<And>s s'.\n       \\<lbrakk>ir_hoare\n                 (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n                 (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n        ir_hoare\n         (\\<lambda>s s'.\n             P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n         SKIP SKIP Q\\<^sub>2;\n        P s s' \\<or> ?P\\<^sub>23 s s'\\<rbrakk>\n       \\<Longrightarrow> P s s'", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s'.\n       \\<lbrakk>ir_hoare\n                 (\\<lambda>s s'. P s s' \\<and> bval b s \\<and> bval b' s')\n                 (c;; WHILE b DO c) (c';; WHILE b' DO c') Q\\<^sub>1;\n        ir_hoare\n         (\\<lambda>s s'.\n             P s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\n         SKIP SKIP Q\\<^sub>2;\n        P s s' \\<or> P s s'\\<rbrakk>\n       \\<Longrightarrow> P s s'", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"client0\""], ["", "definition low_eq_strong where\n  \"low_eq_strong s s' \\<equiv> (s ''high'' \\<noteq> s' ''high'') \\<and> low_eq s s'\""], ["", "lemma low_eq_strong_upd[simp]:\n  \"var \\<noteq> ''high'' \\<and> var \\<noteq> ''low'' \\<Longrightarrow> low_eq_strong(s(var := v)) (s'(var := v')) = low_eq_strong s s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var \\<noteq> ''high'' \\<and> var \\<noteq> ''low'' \\<Longrightarrow>\n    low_eq_strong (s(var := v)) (s'(var := v')) = low_eq_strong s s'", "by(auto simp: low_eq_strong_def)"], ["", "text \\<open>\n  A variation on client0 from O'Hearn~\\cite{OHearn_19}: how to reason about loops via a single unfolding\n\\<close>"], ["", "definition client0 :: com where\n  \"client0 \\<equiv> (Assign ''x'' (N 0);;\n              (While (Less (N 0) (V ''n''))\n                     ((Assign ''x'' (Plus (V ''x'') (V ''n'')));;\n                      (Assign ''n'' (V ''nondet''))));;\n              (If (BEq (V ''x'') (N 2000000)) (Assign ''low'' (V ''high'')) SKIP))\""], ["", "lemma client0:\n  \"\\<exists>Q. ir_hoare low_eq client0 client0 Q \\<and> (\\<forall>s s'. Q s s' \\<longrightarrow> low_neq s s') \\<and> nontrivial Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Q.\n       ir_hoare low_eq client0 client0 Q \\<and>\n       (\\<forall>s s'.\n           Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n       nontrivial Q", "apply(rule exI, rule conjI, simp add: client0_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ir_hoare low_eq\n     (''x'' ::= N 0;;\n      WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet'');;\n      IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (''x'' ::= N 0;;\n      WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet'');;\n      IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     ?Q\n 2. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule_tac P=low_eq_strong in ir_pre)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ir_hoare low_eq_strong\n     (''x'' ::= N 0;;\n      WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet'');;\n      IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (''x'' ::= N 0;;\n      WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet'');;\n      IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     ?Q\n 2. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 3. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Seq)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ir_hoare low_eq_strong\n     (''x'' ::= N 0;;\n      WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     (''x'' ::= N 0;;\n      WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     ?Q6\n 2. ir_hoare ?Q6\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 3. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 4. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Seq)"], ["proof (prove)\ngoal (5 subgoals):\n 1. ir_hoare low_eq_strong (''x'' ::= N 0) (''x'' ::= N 0) ?Q9\n 2. ir_hoare ?Q9\n     (WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     (WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     ?Q6\n 3. ir_hoare ?Q6\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Assign_Assign)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ir_hoare\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            low_eq_strong (t(''x'' := v)) (t'(''x'' := v')) \\<and>\n            t ''x'' = aval (N 0) (t(''x'' := v)) \\<and>\n            t' ''x'' = aval (N 0) (t'(''x'' := v')))\n     (WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     (WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     ?Q6\n 2. ir_hoare ?Q6\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 3. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 4. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. ir_hoare\n     (\\<lambda>t t'.\n         low_eq_strong t t' \\<and> t ''x'' = 0 \\<and> t' ''x'' = 0)\n     (WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     (WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     ?Q6\n 2. ir_hoare ?Q6\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 3. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 4. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_While')"], ["proof (prove)\ngoal (5 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0) \\<and>\n         bval (Less (N 0) (V ''n'')) s \\<and>\n         bval (Less (N 0) (V ''n'')) s')\n     (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet'';;\n      WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet'';;\n      WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     ?Q\\<^sub>115\n 2. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0) \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s')\n     SKIP SKIP ?Q\\<^sub>215\n 3. ir_hoare (\\<lambda>s s'. ?Q\\<^sub>115 s s' \\<or> ?Q\\<^sub>215 s s')\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply clarsimp"], ["proof (prove)\ngoal (5 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         low_eq_strong s s' \\<and>\n         s ''x'' = 0 \\<and>\n         s' ''x'' = 0 \\<and> 0 < s ''n'' \\<and> 0 < s' ''n'')\n     (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet'';;\n      WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet'';;\n      WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     ?Q\\<^sub>115\n 2. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0) \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s')\n     SKIP SKIP ?Q\\<^sub>215\n 3. ir_hoare (\\<lambda>s s'. ?Q\\<^sub>115 s s' \\<or> ?Q\\<^sub>215 s s')\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Seq)"], ["proof (prove)\ngoal (6 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         low_eq_strong s s' \\<and>\n         s ''x'' = 0 \\<and>\n         s' ''x'' = 0 \\<and> 0 < s ''n'' \\<and> 0 < s' ''n'')\n     (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet'')\n     (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet'') ?Q20\n 2. ir_hoare ?Q20\n     (WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     (WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     ?Q\\<^sub>115\n 3. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0) \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s')\n     SKIP SKIP ?Q\\<^sub>215\n 4. ir_hoare (\\<lambda>s s'. ?Q\\<^sub>115 s s' \\<or> ?Q\\<^sub>215 s s')\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 5. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 6. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Seq)"], ["proof (prove)\ngoal (7 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         low_eq_strong s s' \\<and>\n         s ''x'' = 0 \\<and>\n         s' ''x'' = 0 \\<and> 0 < s ''n'' \\<and> 0 < s' ''n'')\n     (''x'' ::= Plus (V ''x'') (V ''n''))\n     (''x'' ::= Plus (V ''x'') (V ''n'')) ?Q23\n 2. ir_hoare ?Q23 (''n'' ::= V ''nondet'') (''n'' ::= V ''nondet'') ?Q20\n 3. ir_hoare ?Q20\n     (WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     (WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     ?Q\\<^sub>115\n 4. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0) \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s')\n     SKIP SKIP ?Q\\<^sub>215\n 5. ir_hoare (\\<lambda>s s'. ?Q\\<^sub>115 s s' \\<or> ?Q\\<^sub>215 s s')\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 6. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 7. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Assign_Assign)"], ["proof (prove)\ngoal (6 subgoals):\n 1. ir_hoare\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            (low_eq_strong (t(''x'' := v)) (t'(''x'' := v')) \\<and>\n             (t(''x'' := v)) ''x'' = 0 \\<and>\n             (t'(''x'' := v')) ''x'' = 0 \\<and>\n             0 < (t(''x'' := v)) ''n'' \\<and>\n             0 < (t'(''x'' := v')) ''n'') \\<and>\n            t ''x'' = aval (Plus (V ''x'') (V ''n'')) (t(''x'' := v)) \\<and>\n            t' ''x'' = aval (Plus (V ''x'') (V ''n'')) (t'(''x'' := v')))\n     (''n'' ::= V ''nondet'') (''n'' ::= V ''nondet'') ?Q20\n 2. ir_hoare ?Q20\n     (WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     (WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     ?Q\\<^sub>115\n 3. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0) \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s')\n     SKIP SKIP ?Q\\<^sub>215\n 4. ir_hoare (\\<lambda>s s'. ?Q\\<^sub>115 s s' \\<or> ?Q\\<^sub>215 s s')\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 5. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 6. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Assign_Assign)"], ["proof (prove)\ngoal (5 subgoals):\n 1. ir_hoare\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            (\\<exists>va v'a.\n                (low_eq_strong (t(''n'' := v, ''x'' := va))\n                  (t'(''n'' := v', ''x'' := v'a)) \\<and>\n                 (t(''n'' := v, ''x'' := va)) ''x'' = 0 \\<and>\n                 (t'(''n'' := v', ''x'' := v'a)) ''x'' = 0 \\<and>\n                 0 < (t(''n'' := v, ''x'' := va)) ''n'' \\<and>\n                 0 < (t'(''n'' := v', ''x'' := v'a)) ''n'') \\<and>\n                (t(''n'' := v)) ''x'' =\n                aval (Plus (V ''x'') (V ''n''))\n                 (t(''n'' := v, ''x'' := va)) \\<and>\n                (t'(''n'' := v')) ''x'' =\n                aval (Plus (V ''x'') (V ''n''))\n                 (t'(''n'' := v', ''x'' := v'a))) \\<and>\n            t ''n'' = aval (V ''nondet'') (t(''n'' := v)) \\<and>\n            t' ''n'' = aval (V ''nondet'') (t'(''n'' := v')))\n     (WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     (WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     ?Q\\<^sub>115\n 2. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0) \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s')\n     SKIP SKIP ?Q\\<^sub>215\n 3. ir_hoare (\\<lambda>s s'. ?Q\\<^sub>115 s s' \\<or> ?Q\\<^sub>215 s s')\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply clarsimp"], ["proof (prove)\ngoal (5 subgoals):\n 1. ir_hoare\n     (\\<lambda>t t'.\n         low_eq_strong t t' \\<and>\n         0 < t ''x'' \\<and>\n         0 < t' ''x'' \\<and>\n         t ''n'' = t ''nondet'' \\<and> t' ''n'' = t' ''nondet'')\n     (WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     (WHILE Less (N 0) (V ''n'')\n      DO (''x'' ::= Plus (V ''x'') (V ''n'');; ''n'' ::= V ''nondet''))\n     ?Q\\<^sub>115\n 2. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0) \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s')\n     SKIP SKIP ?Q\\<^sub>215\n 3. ir_hoare (\\<lambda>s s'. ?Q\\<^sub>115 s s' \\<or> ?Q\\<^sub>215 s s')\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_While_triv)"], ["proof (prove)\ngoal (5 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and>\n          0 < s ''x'' \\<and>\n          0 < s' ''x'' \\<and>\n          s ''n'' = s ''nondet'' \\<and> s' ''n'' = s' ''nondet'') \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s')\n     SKIP SKIP ?Q\\<^sub>115\n 2. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0) \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s')\n     SKIP SKIP ?Q\\<^sub>215\n 3. ir_hoare (\\<lambda>s s'. ?Q\\<^sub>115 s s' \\<or> ?Q\\<^sub>215 s s')\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply clarsimp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>s s'.\n       ?Q\\<^sub>115 s s' \\<Longrightarrow>\n       low_eq_strong s s' \\<and>\n       0 < s ''x'' \\<and>\n       0 < s' ''x'' \\<and>\n       s ''n'' = s ''nondet'' \\<and>\n       s' ''n'' = s' ''nondet'' \\<and>\n       \\<not> 0 < s ''n'' \\<and> \\<not> 0 < s' ''n''\n 2. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0) \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s')\n     SKIP SKIP ?Q\\<^sub>215\n 3. ir_hoare (\\<lambda>s s'. ?Q\\<^sub>115 s s' \\<or> ?Q\\<^sub>215 s s')\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply assumption"], ["proof (prove)\ngoal (4 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0) \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s \\<and>\n         \\<not> bval (Less (N 0) (V ''n'')) s')\n     SKIP SKIP ?Q\\<^sub>215\n 2. ir_hoare\n     (\\<lambda>s s'.\n         low_eq_strong s s' \\<and>\n         0 < s ''x'' \\<and>\n         0 < s' ''x'' \\<and>\n         s ''n'' = s ''nondet'' \\<and>\n         s' ''n'' = s' ''nondet'' \\<and>\n         \\<not> 0 < s ''n'' \\<and> \\<not> 0 < s' ''n'' \\<or>\n         ?Q\\<^sub>215 s s')\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 3. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 4. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s s'.\n       ?Q\\<^sub>215 s s' \\<Longrightarrow>\n       low_eq_strong s s' \\<and>\n       s ''x'' = 0 \\<and>\n       s' ''x'' = 0 \\<and> \\<not> 0 < s ''n'' \\<and> \\<not> 0 < s' ''n''\n 2. ir_hoare\n     (\\<lambda>s s'.\n         low_eq_strong s s' \\<and>\n         0 < s ''x'' \\<and>\n         0 < s' ''x'' \\<and>\n         s ''n'' = s ''nondet'' \\<and>\n         s' ''n'' = s' ''nondet'' \\<and>\n         \\<not> 0 < s ''n'' \\<and> \\<not> 0 < s' ''n'' \\<or>\n         ?Q\\<^sub>215 s s')\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 3. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 4. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         low_eq_strong s s' \\<and>\n         0 < s ''x'' \\<and>\n         0 < s' ''x'' \\<and>\n         s ''n'' = s ''nondet'' \\<and>\n         s' ''n'' = s' ''nondet'' \\<and>\n         \\<not> 0 < s ''n'' \\<and> \\<not> 0 < s' ''n'' \\<or>\n         low_eq_strong s s' \\<and>\n         s ''x'' = 0 \\<and>\n         s' ''x'' = 0 \\<and> \\<not> 0 < s ''n'' \\<and> \\<not> 0 < s' ''n'')\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 2. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 3. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_If_True_True)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and>\n          0 < s ''x'' \\<and>\n          0 < s' ''x'' \\<and>\n          s ''n'' = s ''nondet'' \\<and>\n          s' ''n'' = s' ''nondet'' \\<and>\n          \\<not> 0 < s ''n'' \\<and> \\<not> 0 < s' ''n'' \\<or>\n          low_eq_strong s s' \\<and>\n          s ''x'' = 0 \\<and>\n          s' ''x'' = 0 \\<and>\n          \\<not> 0 < s ''n'' \\<and> \\<not> 0 < s' ''n'') \\<and>\n         bval (BEq (V ''x'') (N 2000000)) s \\<and>\n         bval (BEq (V ''x'') (N 2000000)) s')\n     (''low'' ::= V ''high'') (''low'' ::= V ''high'') ?Q\n 2. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 3. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Assign_Assign)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 2. (\\<forall>s s'.\n        (\\<exists>v v'.\n            ((low_eq_strong (s(''low'' := v)) (s'(''low'' := v')) \\<and>\n              0 < (s(''low'' := v)) ''x'' \\<and>\n              0 < (s'(''low'' := v')) ''x'' \\<and>\n              (s(''low'' := v)) ''n'' = (s(''low'' := v)) ''nondet'' \\<and>\n              (s'(''low'' := v')) ''n'' =\n              (s'(''low'' := v')) ''nondet'' \\<and>\n              \\<not> 0 < (s(''low'' := v)) ''n'' \\<and>\n              \\<not> 0 < (s'(''low'' := v')) ''n'' \\<or>\n              low_eq_strong (s(''low'' := v)) (s'(''low'' := v')) \\<and>\n              (s(''low'' := v)) ''x'' = 0 \\<and>\n              (s'(''low'' := v')) ''x'' = 0 \\<and>\n              \\<not> 0 < (s(''low'' := v)) ''n'' \\<and>\n              \\<not> 0 < (s'(''low'' := v')) ''n'') \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (s(''low'' := v)) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (s'(''low'' := v'))) \\<and>\n            s ''low'' = aval (V ''high'') (s(''low'' := v)) \\<and>\n            s' ''low'' =\n            aval (V ''high'') (s'(''low'' := v'))) \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            ((low_eq_strong (t(''low'' := v)) (t'(''low'' := v')) \\<and>\n              0 < (t(''low'' := v)) ''x'' \\<and>\n              0 < (t'(''low'' := v')) ''x'' \\<and>\n              (t(''low'' := v)) ''n'' = (t(''low'' := v)) ''nondet'' \\<and>\n              (t'(''low'' := v')) ''n'' =\n              (t'(''low'' := v')) ''nondet'' \\<and>\n              \\<not> 0 < (t(''low'' := v)) ''n'' \\<and>\n              \\<not> 0 < (t'(''low'' := v')) ''n'' \\<or>\n              low_eq_strong (t(''low'' := v)) (t'(''low'' := v')) \\<and>\n              (t(''low'' := v)) ''x'' = 0 \\<and>\n              (t'(''low'' := v')) ''x'' = 0 \\<and>\n              \\<not> 0 < (t(''low'' := v)) ''n'' \\<and>\n              \\<not> 0 < (t'(''low'' := v')) ''n'') \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t(''low'' := v)) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t'(''low'' := v'))) \\<and>\n            t ''low'' = aval (V ''high'') (t(''low'' := v)) \\<and>\n            t' ''low'' = aval (V ''high'') (t'(''low'' := v')))", "apply(fastforce simp: low_eq_strong_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>s s'.\n        (\\<exists>v v'.\n            ((low_eq_strong (s(''low'' := v)) (s'(''low'' := v')) \\<and>\n              0 < (s(''low'' := v)) ''x'' \\<and>\n              0 < (s'(''low'' := v')) ''x'' \\<and>\n              (s(''low'' := v)) ''n'' = (s(''low'' := v)) ''nondet'' \\<and>\n              (s'(''low'' := v')) ''n'' =\n              (s'(''low'' := v')) ''nondet'' \\<and>\n              \\<not> 0 < (s(''low'' := v)) ''n'' \\<and>\n              \\<not> 0 < (s'(''low'' := v')) ''n'' \\<or>\n              low_eq_strong (s(''low'' := v)) (s'(''low'' := v')) \\<and>\n              (s(''low'' := v)) ''x'' = 0 \\<and>\n              (s'(''low'' := v')) ''x'' = 0 \\<and>\n              \\<not> 0 < (s(''low'' := v)) ''n'' \\<and>\n              \\<not> 0 < (s'(''low'' := v')) ''n'') \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (s(''low'' := v)) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (s'(''low'' := v'))) \\<and>\n            s ''low'' = aval (V ''high'') (s(''low'' := v)) \\<and>\n            s' ''low'' =\n            aval (V ''high'') (s'(''low'' := v'))) \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            ((low_eq_strong (t(''low'' := v)) (t'(''low'' := v')) \\<and>\n              0 < (t(''low'' := v)) ''x'' \\<and>\n              0 < (t'(''low'' := v')) ''x'' \\<and>\n              (t(''low'' := v)) ''n'' = (t(''low'' := v)) ''nondet'' \\<and>\n              (t'(''low'' := v')) ''n'' =\n              (t'(''low'' := v')) ''nondet'' \\<and>\n              \\<not> 0 < (t(''low'' := v)) ''n'' \\<and>\n              \\<not> 0 < (t'(''low'' := v')) ''n'' \\<or>\n              low_eq_strong (t(''low'' := v)) (t'(''low'' := v')) \\<and>\n              (t(''low'' := v)) ''x'' = 0 \\<and>\n              (t'(''low'' := v')) ''x'' = 0 \\<and>\n              \\<not> 0 < (t(''low'' := v)) ''n'' \\<and>\n              \\<not> 0 < (t'(''low'' := v')) ''n'') \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t(''low'' := v)) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t'(''low'' := v'))) \\<and>\n            t ''low'' = aval (V ''high'') (t(''low'' := v)) \\<and>\n            t' ''low'' = aval (V ''high'') (t'(''low'' := v')))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>s s'.\n       (\\<exists>v v'.\n           ((low_eq_strong (s(''low'' := v)) (s'(''low'' := v')) \\<and>\n             0 < (s(''low'' := v)) ''x'' \\<and>\n             0 < (s'(''low'' := v')) ''x'' \\<and>\n             (s(''low'' := v)) ''n'' = (s(''low'' := v)) ''nondet'' \\<and>\n             (s'(''low'' := v')) ''n'' =\n             (s'(''low'' := v')) ''nondet'' \\<and>\n             \\<not> 0 < (s(''low'' := v)) ''n'' \\<and>\n             \\<not> 0 < (s'(''low'' := v')) ''n'' \\<or>\n             low_eq_strong (s(''low'' := v)) (s'(''low'' := v')) \\<and>\n             (s(''low'' := v)) ''x'' = 0 \\<and>\n             (s'(''low'' := v')) ''x'' = 0 \\<and>\n             \\<not> 0 < (s(''low'' := v)) ''n'' \\<and>\n             \\<not> 0 < (s'(''low'' := v')) ''n'') \\<and>\n            bval (BEq (V ''x'') (N 2000000)) (s(''low'' := v)) \\<and>\n            bval (BEq (V ''x'') (N 2000000)) (s'(''low'' := v'))) \\<and>\n           s ''low'' = aval (V ''high'') (s(''low'' := v)) \\<and>\n           s' ''low'' =\n           aval (V ''high'') (s'(''low'' := v'))) \\<longrightarrow>\n       s ''low'' \\<noteq> s' ''low''\n 2. nontrivial\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            ((low_eq_strong (t(''low'' := v)) (t'(''low'' := v')) \\<and>\n              0 < (t(''low'' := v)) ''x'' \\<and>\n              0 < (t'(''low'' := v')) ''x'' \\<and>\n              (t(''low'' := v)) ''n'' = (t(''low'' := v)) ''nondet'' \\<and>\n              (t'(''low'' := v')) ''n'' =\n              (t'(''low'' := v')) ''nondet'' \\<and>\n              \\<not> 0 < (t(''low'' := v)) ''n'' \\<and>\n              \\<not> 0 < (t'(''low'' := v')) ''n'' \\<or>\n              low_eq_strong (t(''low'' := v)) (t'(''low'' := v')) \\<and>\n              (t(''low'' := v)) ''x'' = 0 \\<and>\n              (t'(''low'' := v')) ''x'' = 0 \\<and>\n              \\<not> 0 < (t(''low'' := v)) ''n'' \\<and>\n              \\<not> 0 < (t'(''low'' := v')) ''n'') \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t(''low'' := v)) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t'(''low'' := v'))) \\<and>\n            t ''low'' = aval (V ''high'') (t(''low'' := v)) \\<and>\n            t' ''low'' = aval (V ''high'') (t'(''low'' := v')))", "apply(clarsimp simp: low_eq_strong_def split: if_splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nontrivial\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            ((low_eq_strong (t(''low'' := v)) (t'(''low'' := v')) \\<and>\n              0 < (t(''low'' := v)) ''x'' \\<and>\n              0 < (t'(''low'' := v')) ''x'' \\<and>\n              (t(''low'' := v)) ''n'' = (t(''low'' := v)) ''nondet'' \\<and>\n              (t'(''low'' := v')) ''n'' =\n              (t'(''low'' := v')) ''nondet'' \\<and>\n              \\<not> 0 < (t(''low'' := v)) ''n'' \\<and>\n              \\<not> 0 < (t'(''low'' := v')) ''n'' \\<or>\n              low_eq_strong (t(''low'' := v)) (t'(''low'' := v')) \\<and>\n              (t(''low'' := v)) ''x'' = 0 \\<and>\n              (t'(''low'' := v')) ''x'' = 0 \\<and>\n              \\<not> 0 < (t(''low'' := v)) ''n'' \\<and>\n              \\<not> 0 < (t'(''low'' := v')) ''n'') \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t(''low'' := v)) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t'(''low'' := v'))) \\<and>\n            t ''low'' = aval (V ''high'') (t(''low'' := v)) \\<and>\n            t' ''low'' = aval (V ''high'') (t'(''low'' := v')))", "(* ugh having to manually do constraint solving here... *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nontrivial\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            ((low_eq_strong (t(''low'' := v)) (t'(''low'' := v')) \\<and>\n              0 < (t(''low'' := v)) ''x'' \\<and>\n              0 < (t'(''low'' := v')) ''x'' \\<and>\n              (t(''low'' := v)) ''n'' = (t(''low'' := v)) ''nondet'' \\<and>\n              (t'(''low'' := v')) ''n'' =\n              (t'(''low'' := v')) ''nondet'' \\<and>\n              \\<not> 0 < (t(''low'' := v)) ''n'' \\<and>\n              \\<not> 0 < (t'(''low'' := v')) ''n'' \\<or>\n              low_eq_strong (t(''low'' := v)) (t'(''low'' := v')) \\<and>\n              (t(''low'' := v)) ''x'' = 0 \\<and>\n              (t'(''low'' := v')) ''x'' = 0 \\<and>\n              \\<not> 0 < (t(''low'' := v)) ''n'' \\<and>\n              \\<not> 0 < (t'(''low'' := v')) ''n'') \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t(''low'' := v)) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t'(''low'' := v'))) \\<and>\n            t ''low'' = aval (V ''high'') (t(''low'' := v)) \\<and>\n            t' ''low'' = aval (V ''high'') (t'(''low'' := v')))", "apply(clarsimp simp: low_eq_strong_def nontrivial_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t t'.\n       (\\<exists>v v'.\n           t ''high'' \\<noteq> t' ''high'' \\<and>\n           v = v' \\<and>\n           0 < t ''x'' \\<and>\n           0 < t' ''x'' \\<and>\n           t ''n'' = t ''nondet'' \\<and>\n           t' ''n'' = t' ''nondet'' \\<and>\n           \\<not> 0 < t ''n'' \\<and> \\<not> 0 < t' ''n'' \\<or>\n           t ''high'' \\<noteq> t' ''high'' \\<and>\n           v = v' \\<and>\n           t ''x'' = 0 \\<and>\n           t' ''x'' = 0 \\<and>\n           \\<not> 0 < t ''n'' \\<and> \\<not> 0 < t' ''n'') \\<and>\n       t ''x'' = 2000000 \\<and>\n       t' ''x'' = 2000000 \\<and>\n       t ''low'' = t ''high'' \\<and> t' ''low'' = t' ''high''", "apply(rule_tac x=\"\\<lambda>v. if v = ''x'' then 2000000 else if v = ''high'' then 1 else if v = ''n'' then -1 else if v = ''nondet'' then -1 else if v = ''low'' then 1 else undefined\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       (\\<exists>v v'.\n           (if ''high'' = ''x'' then 2000000\n            else if ''high'' = ''high'' then 1\n                 else if ''high'' = ''n'' then - 1\n                      else if ''high'' = ''nondet'' then - 1\n                           else if ''high'' = ''low'' then 1\n                                else undefined) \\<noteq>\n           t' ''high'' \\<and>\n           v = v' \\<and>\n           0 < (if ''x'' = ''x'' then 2000000\n                else if ''x'' = ''high'' then 1\n                     else if ''x'' = ''n'' then - 1\n                          else if ''x'' = ''nondet'' then - 1\n                               else if ''x'' = ''low'' then 1\n                                    else undefined) \\<and>\n           0 < t' ''x'' \\<and>\n           (if ''n'' = ''x'' then 2000000\n            else if ''n'' = ''high'' then 1\n                 else if ''n'' = ''n'' then - 1\n                      else if ''n'' = ''nondet'' then - 1\n                           else if ''n'' = ''low'' then 1 else undefined) =\n           (if ''nondet'' = ''x'' then 2000000\n            else if ''nondet'' = ''high'' then 1\n                 else if ''nondet'' = ''n'' then - 1\n                      else if ''nondet'' = ''nondet'' then - 1\n                           else if ''nondet'' = ''low'' then 1\n                                else undefined) \\<and>\n           t' ''n'' = t' ''nondet'' \\<and>\n           \\<not> 0 < (if ''n'' = ''x'' then 2000000\n                       else if ''n'' = ''high'' then 1\n                            else if ''n'' = ''n'' then - 1\n                                 else if ''n'' = ''nondet'' then - 1\nelse if ''n'' = ''low'' then 1 else undefined) \\<and>\n           \\<not> 0 < t' ''n'' \\<or>\n           (if ''high'' = ''x'' then 2000000\n            else if ''high'' = ''high'' then 1\n                 else if ''high'' = ''n'' then - 1\n                      else if ''high'' = ''nondet'' then - 1\n                           else if ''high'' = ''low'' then 1\n                                else undefined) \\<noteq>\n           t' ''high'' \\<and>\n           v = v' \\<and>\n           (if ''x'' = ''x'' then 2000000\n            else if ''x'' = ''high'' then 1\n                 else if ''x'' = ''n'' then - 1\n                      else if ''x'' = ''nondet'' then - 1\n                           else if ''x'' = ''low'' then 1 else undefined) =\n           0 \\<and>\n           t' ''x'' = 0 \\<and>\n           \\<not> 0 < (if ''n'' = ''x'' then 2000000\n                       else if ''n'' = ''high'' then 1\n                            else if ''n'' = ''n'' then - 1\n                                 else if ''n'' = ''nondet'' then - 1\nelse if ''n'' = ''low'' then 1 else undefined) \\<and>\n           \\<not> 0 < t' ''n'') \\<and>\n       (if ''x'' = ''x'' then 2000000\n        else if ''x'' = ''high'' then 1\n             else if ''x'' = ''n'' then - 1\n                  else if ''x'' = ''nondet'' then - 1\n                       else if ''x'' = ''low'' then 1 else undefined) =\n       2000000 \\<and>\n       t' ''x'' = 2000000 \\<and>\n       (if ''low'' = ''x'' then 2000000\n        else if ''low'' = ''high'' then 1\n             else if ''low'' = ''n'' then - 1\n                  else if ''low'' = ''nondet'' then - 1\n                       else if ''low'' = ''low'' then 1 else undefined) =\n       (if ''high'' = ''x'' then 2000000\n        else if ''high'' = ''high'' then 1\n             else if ''high'' = ''n'' then - 1\n                  else if ''high'' = ''nondet'' then - 1\n                       else if ''high'' = ''low'' then 1\n                            else undefined) \\<and>\n       t' ''low'' = t' ''high''", "apply(rule_tac x=\"\\<lambda>v. if v = ''x'' then 2000000 else if v = ''high'' then 0 else if v = ''n'' then -1 else if v = ''nondet'' then -1 else if v = ''low'' then 0 else undefined\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>v v'.\n        (if ''high'' = ''x'' then 2000000\n         else if ''high'' = ''high'' then 1\n              else if ''high'' = ''n'' then - 1\n                   else if ''high'' = ''nondet'' then - 1\n                        else if ''high'' = ''low'' then 1\n                             else undefined) \\<noteq>\n        (if ''high'' = ''x'' then 2000000\n         else if ''high'' = ''high'' then 0\n              else if ''high'' = ''n'' then - 1\n                   else if ''high'' = ''nondet'' then - 1\n                        else if ''high'' = ''low'' then 0\n                             else undefined) \\<and>\n        v = v' \\<and>\n        0 < (if ''x'' = ''x'' then 2000000\n             else if ''x'' = ''high'' then 1\n                  else if ''x'' = ''n'' then - 1\n                       else if ''x'' = ''nondet'' then - 1\n                            else if ''x'' = ''low'' then 1\n                                 else undefined) \\<and>\n        0 < (if ''x'' = ''x'' then 2000000\n             else if ''x'' = ''high'' then 0\n                  else if ''x'' = ''n'' then - 1\n                       else if ''x'' = ''nondet'' then - 1\n                            else if ''x'' = ''low'' then 0\n                                 else undefined) \\<and>\n        (if ''n'' = ''x'' then 2000000\n         else if ''n'' = ''high'' then 1\n              else if ''n'' = ''n'' then - 1\n                   else if ''n'' = ''nondet'' then - 1\n                        else if ''n'' = ''low'' then 1 else undefined) =\n        (if ''nondet'' = ''x'' then 2000000\n         else if ''nondet'' = ''high'' then 1\n              else if ''nondet'' = ''n'' then - 1\n                   else if ''nondet'' = ''nondet'' then - 1\n                        else if ''nondet'' = ''low'' then 1\n                             else undefined) \\<and>\n        (if ''n'' = ''x'' then 2000000\n         else if ''n'' = ''high'' then 0\n              else if ''n'' = ''n'' then - 1\n                   else if ''n'' = ''nondet'' then - 1\n                        else if ''n'' = ''low'' then 0 else undefined) =\n        (if ''nondet'' = ''x'' then 2000000\n         else if ''nondet'' = ''high'' then 0\n              else if ''nondet'' = ''n'' then - 1\n                   else if ''nondet'' = ''nondet'' then - 1\n                        else if ''nondet'' = ''low'' then 0\n                             else undefined) \\<and>\n        \\<not> 0 < (if ''n'' = ''x'' then 2000000\n                    else if ''n'' = ''high'' then 1\n                         else if ''n'' = ''n'' then - 1\n                              else if ''n'' = ''nondet'' then - 1\n                                   else if ''n'' = ''low'' then 1\n  else undefined) \\<and>\n        \\<not> 0 < (if ''n'' = ''x'' then 2000000\n                    else if ''n'' = ''high'' then 0\n                         else if ''n'' = ''n'' then - 1\n                              else if ''n'' = ''nondet'' then - 1\n                                   else if ''n'' = ''low'' then 0\n  else undefined) \\<or>\n        (if ''high'' = ''x'' then 2000000\n         else if ''high'' = ''high'' then 1\n              else if ''high'' = ''n'' then - 1\n                   else if ''high'' = ''nondet'' then - 1\n                        else if ''high'' = ''low'' then 1\n                             else undefined) \\<noteq>\n        (if ''high'' = ''x'' then 2000000\n         else if ''high'' = ''high'' then 0\n              else if ''high'' = ''n'' then - 1\n                   else if ''high'' = ''nondet'' then - 1\n                        else if ''high'' = ''low'' then 0\n                             else undefined) \\<and>\n        v = v' \\<and>\n        (if ''x'' = ''x'' then 2000000\n         else if ''x'' = ''high'' then 1\n              else if ''x'' = ''n'' then - 1\n                   else if ''x'' = ''nondet'' then - 1\n                        else if ''x'' = ''low'' then 1 else undefined) =\n        0 \\<and>\n        (if ''x'' = ''x'' then 2000000\n         else if ''x'' = ''high'' then 0\n              else if ''x'' = ''n'' then - 1\n                   else if ''x'' = ''nondet'' then - 1\n                        else if ''x'' = ''low'' then 0 else undefined) =\n        0 \\<and>\n        \\<not> 0 < (if ''n'' = ''x'' then 2000000\n                    else if ''n'' = ''high'' then 1\n                         else if ''n'' = ''n'' then - 1\n                              else if ''n'' = ''nondet'' then - 1\n                                   else if ''n'' = ''low'' then 1\n  else undefined) \\<and>\n        \\<not> 0 < (if ''n'' = ''x'' then 2000000\n                    else if ''n'' = ''high'' then 0\n                         else if ''n'' = ''n'' then - 1\n                              else if ''n'' = ''nondet'' then - 1\n                                   else if ''n'' = ''low'' then 0\n  else undefined)) \\<and>\n    (if ''x'' = ''x'' then 2000000\n     else if ''x'' = ''high'' then 1\n          else if ''x'' = ''n'' then - 1\n               else if ''x'' = ''nondet'' then - 1\n                    else if ''x'' = ''low'' then 1 else undefined) =\n    2000000 \\<and>\n    (if ''x'' = ''x'' then 2000000\n     else if ''x'' = ''high'' then 0\n          else if ''x'' = ''n'' then - 1\n               else if ''x'' = ''nondet'' then - 1\n                    else if ''x'' = ''low'' then 0 else undefined) =\n    2000000 \\<and>\n    (if ''low'' = ''x'' then 2000000\n     else if ''low'' = ''high'' then 1\n          else if ''low'' = ''n'' then - 1\n               else if ''low'' = ''nondet'' then - 1\n                    else if ''low'' = ''low'' then 1 else undefined) =\n    (if ''high'' = ''x'' then 2000000\n     else if ''high'' = ''high'' then 1\n          else if ''high'' = ''n'' then - 1\n               else if ''high'' = ''nondet'' then - 1\n                    else if ''high'' = ''low'' then 1 else undefined) \\<and>\n    (if ''low'' = ''x'' then 2000000\n     else if ''low'' = ''high'' then 0\n          else if ''low'' = ''n'' then - 1\n               else if ''low'' = ''nondet'' then - 1\n                    else if ''low'' = ''low'' then 0 else undefined) =\n    (if ''high'' = ''x'' then 2000000\n     else if ''high'' = ''high'' then 0\n          else if ''high'' = ''n'' then - 1\n               else if ''high'' = ''nondet'' then - 1\n                    else if ''high'' = ''low'' then 0 else undefined)", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* Not needed? *)"], ["", "lemma ir_While_backwards:\n  \"(\\<And>n. ir_hoare (\\<lambda> s s'. P n s s' \\<and> bval b s) c SKIP (P (Suc n))) \\<Longrightarrow>\n                       ir_hoare (\\<lambda>s s'. \\<exists>n. P n s s' \\<and> \\<not> bval b s) SKIP c' Q \\<Longrightarrow>\n                       ir_hoare (P 0) (WHILE b DO c) c' Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>n.\n                ir_hoare (\\<lambda>s s'. P n s s' \\<and> bval b s) c SKIP\n                 (P (Suc n));\n     ir_hoare (\\<lambda>s s'. \\<exists>n. P n s s' \\<and> \\<not> bval b s)\n      SKIP c' Q\\<rbrakk>\n    \\<Longrightarrow> ir_hoare (P 0) (WHILE b DO c) c' Q", "apply(rule ir_While_backwards_frontier)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<And>n.\n                   ir_hoare (\\<lambda>s s'. P n s s' \\<and> bval b s) c SKIP\n                    (P (Suc n));\n        ir_hoare\n         (\\<lambda>s s'. \\<exists>n. P n s s' \\<and> \\<not> bval b s) SKIP\n         c' Q\\<rbrakk>\n       \\<Longrightarrow> ir_hoare (\\<lambda>s s'. P n s s' \\<and> bval b s)\n                          c SKIP (P (Suc n))\n 2. \\<lbrakk>\\<And>n.\n                ir_hoare (\\<lambda>s s'. P n s s' \\<and> bval b s) c SKIP\n                 (P (Suc n));\n     ir_hoare (\\<lambda>s s'. \\<exists>n. P n s s' \\<and> \\<not> bval b s)\n      SKIP c' Q\\<rbrakk>\n    \\<Longrightarrow> ir_hoare (\\<lambda>s s'. \\<exists>n. P n s s')\n                       (WHILE b DO c) c' Q", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>n.\n                ir_hoare (\\<lambda>s s'. P n s s' \\<and> bval b s) c SKIP\n                 (P (Suc n));\n     ir_hoare (\\<lambda>s s'. \\<exists>n. P n s s' \\<and> \\<not> bval b s)\n      SKIP c' Q\\<rbrakk>\n    \\<Longrightarrow> ir_hoare (\\<lambda>s s'. \\<exists>n. P n s s')\n                       (WHILE b DO c) c' Q", "apply(rule ir_While_False)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>n.\n                ir_hoare (\\<lambda>s s'. P n s s' \\<and> bval b s) c SKIP\n                 (P (Suc n));\n     ir_hoare (\\<lambda>s s'. \\<exists>n. P n s s' \\<and> \\<not> bval b s)\n      SKIP c' Q\\<rbrakk>\n    \\<Longrightarrow> ir_hoare\n                       (\\<lambda>s s'.\n                           (\\<exists>n. P n s s') \\<and> \\<not> bval b s)\n                       SKIP c' Q", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Derive a variant of the backwards variant rule\""], ["", "text \\<open>Here we appeal to completeness again to derive this rule from the corresponding\n        property about @{term ir_valid}.\\<close>"], ["", "subsection \"A variant of the frontier rule\""], ["", "text \\<open>\n  Agin we derive this rule by appealing to completeness and the corresponding property of\n  @{term ir_valid}\n\\<close>"], ["", "lemma While_backwards_frontier_both_ir_valid':\n  assumes asm: \"\\<And>n. \\<forall>t t'. P (k + Suc n) t t' \\<longrightarrow>\n                    (\\<exists>s s'. P (k + n) s s' \\<and> bval b s \\<and> bval b' s' \\<and> (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t')\"\n  assumes last: \"\\<forall>t t'. Q t t' \\<longrightarrow> (\\<exists>s s'. (\\<exists>n. P (k + n) s s') \\<and> (WHILE b DO c, s) \\<Rightarrow> t \\<and> (WHILE b' DO c', s') \\<Rightarrow> t')\"\n  assumes post: \"Q t t'\"\n  shows \"\\<exists>s s'. P k s s' \\<and> (WHILE b DO c, s) \\<Rightarrow> t \\<and> (WHILE b' DO c', s') \\<Rightarrow> t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s s'.\n       P k s s' \\<and>\n       (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n       (WHILE b' DO c', s') \\<Rightarrow> t'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s s'.\n       P k s s' \\<and>\n       (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n       (WHILE b' DO c', s') \\<Rightarrow> t'", "from post last"], ["proof (chain)\npicking this:\n  Q t t'\n  \\<forall>t t'.\n     Q t t' \\<longrightarrow>\n     (\\<exists>s s'.\n         (\\<exists>n. P (k + n) s s') \\<and>\n         (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n         (WHILE b' DO c', s') \\<Rightarrow> t')", "obtain s s' n where \n    \"P (k + n) s s'\" \"(WHILE b DO c, s) \\<Rightarrow> t\" \"(WHILE b' DO c', s') \\<Rightarrow> t'\""], ["proof (prove)\nusing this:\n  Q t t'\n  \\<forall>t t'.\n     Q t t' \\<longrightarrow>\n     (\\<exists>s s'.\n         (\\<exists>n. P (k + n) s s') \\<and>\n         (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n         (WHILE b' DO c', s') \\<Rightarrow> t')\n\ngoal (1 subgoal):\n 1. (\\<And>n s s'.\n        \\<lbrakk>P (k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n         (WHILE b' DO c', s') \\<Rightarrow> t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  P (k + n) s s'\n  (WHILE b DO c, s) \\<Rightarrow> t\n  (WHILE b' DO c', s') \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<exists>s s'.\n       P k s s' \\<and>\n       (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n       (WHILE b' DO c', s') \\<Rightarrow> t'", "with asm"], ["proof (chain)\npicking this:\n  \\<forall>t t'.\n     P (k + Suc ?n) t t' \\<longrightarrow>\n     (\\<exists>s s'.\n         P (k + ?n) s s' \\<and>\n         bval b s \\<and>\n         bval b' s' \\<and>\n         (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t')\n  P (k + n) s s'\n  (WHILE b DO c, s) \\<Rightarrow> t\n  (WHILE b' DO c', s') \\<Rightarrow> t'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>t t'.\n     P (k + Suc ?n) t t' \\<longrightarrow>\n     (\\<exists>s s'.\n         P (k + ?n) s s' \\<and>\n         bval b s \\<and>\n         bval b' s' \\<and>\n         (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t')\n  P (k + n) s s'\n  (WHILE b DO c, s) \\<Rightarrow> t\n  (WHILE b' DO c', s') \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<exists>s s'.\n       P k s s' \\<and>\n       (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n       (WHILE b' DO c', s') \\<Rightarrow> t'", "proof(induction n arbitrary: k t t')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k t t'.\n       \\<lbrakk>\\<And>n.\n                   \\<forall>t t'.\n                      P (k + Suc n) t t' \\<longrightarrow>\n                      (\\<exists>s s'.\n                          P (k + n) s s' \\<and>\n                          bval b s \\<and>\n                          bval b' s' \\<and>\n                          (c, s) \\<Rightarrow> t \\<and>\n                          (c', s') \\<Rightarrow> t');\n        P (k + 0) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n        (WHILE b' DO c', s') \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            P k s s' \\<and>\n                            (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n                            (WHILE b' DO c', s') \\<Rightarrow> t'\n 2. \\<And>n k t t'.\n       \\<lbrakk>\\<And>k t t'.\n                   \\<lbrakk>\\<And>n.\n                               \\<forall>t t'.\n                                  P (k + Suc n) t t' \\<longrightarrow>\n                                  (\\<exists>s s'.\nP (k + n) s s' \\<and>\nbval b s \\<and>\nbval b' s' \\<and> (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t');\n                    P (k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n                    (WHILE b' DO c', s') \\<Rightarrow> t'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s s'.\n  P k s s' \\<and>\n  (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n  (WHILE b' DO c', s') \\<Rightarrow> t';\n        \\<And>n.\n           \\<forall>t t'.\n              P (k + Suc n) t t' \\<longrightarrow>\n              (\\<exists>s s'.\n                  P (k + n) s s' \\<and>\n                  bval b s \\<and>\n                  bval b' s' \\<and>\n                  (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t');\n        P (k + Suc n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n        (WHILE b' DO c', s') \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            P k s s' \\<and>\n                            (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n                            (WHILE b' DO c', s') \\<Rightarrow> t'", "case 0"], ["proof (state)\nthis:\n  \\<forall>t t'.\n     P (k + Suc ?n) t t' \\<longrightarrow>\n     (\\<exists>s s'.\n         P (k + ?n) s s' \\<and>\n         bval b s \\<and>\n         bval b' s' \\<and>\n         (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t')\n  P (k + 0) s s'\n  (WHILE b DO c, s) \\<Rightarrow> t\n  (WHILE b' DO c', s') \\<Rightarrow> t'\n\ngoal (2 subgoals):\n 1. \\<And>k t t'.\n       \\<lbrakk>\\<And>n.\n                   \\<forall>t t'.\n                      P (k + Suc n) t t' \\<longrightarrow>\n                      (\\<exists>s s'.\n                          P (k + n) s s' \\<and>\n                          bval b s \\<and>\n                          bval b' s' \\<and>\n                          (c, s) \\<Rightarrow> t \\<and>\n                          (c', s') \\<Rightarrow> t');\n        P (k + 0) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n        (WHILE b' DO c', s') \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            P k s s' \\<and>\n                            (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n                            (WHILE b' DO c', s') \\<Rightarrow> t'\n 2. \\<And>n k t t'.\n       \\<lbrakk>\\<And>k t t'.\n                   \\<lbrakk>\\<And>n.\n                               \\<forall>t t'.\n                                  P (k + Suc n) t t' \\<longrightarrow>\n                                  (\\<exists>s s'.\nP (k + n) s s' \\<and>\nbval b s \\<and>\nbval b' s' \\<and> (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t');\n                    P (k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n                    (WHILE b' DO c', s') \\<Rightarrow> t'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s s'.\n  P k s s' \\<and>\n  (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n  (WHILE b' DO c', s') \\<Rightarrow> t';\n        \\<And>n.\n           \\<forall>t t'.\n              P (k + Suc n) t t' \\<longrightarrow>\n              (\\<exists>s s'.\n                  P (k + n) s s' \\<and>\n                  bval b s \\<and>\n                  bval b' s' \\<and>\n                  (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t');\n        P (k + Suc n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n        (WHILE b' DO c', s') \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            P k s s' \\<and>\n                            (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n                            (WHILE b' DO c', s') \\<Rightarrow> t'", "then"], ["proof (chain)\npicking this:\n  \\<forall>t t'.\n     P (k + Suc ?n) t t' \\<longrightarrow>\n     (\\<exists>s s'.\n         P (k + ?n) s s' \\<and>\n         bval b s \\<and>\n         bval b' s' \\<and>\n         (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t')\n  P (k + 0) s s'\n  (WHILE b DO c, s) \\<Rightarrow> t\n  (WHILE b' DO c', s') \\<Rightarrow> t'", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>t t'.\n     P (k + Suc ?n) t t' \\<longrightarrow>\n     (\\<exists>s s'.\n         P (k + ?n) s s' \\<and>\n         bval b s \\<and>\n         bval b' s' \\<and>\n         (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t')\n  P (k + 0) s s'\n  (WHILE b DO c, s) \\<Rightarrow> t\n  (WHILE b' DO c', s') \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<exists>s s'.\n       P k s s' \\<and>\n       (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n       (WHILE b' DO c', s') \\<Rightarrow> t'", "by (metis WhileFalse WhileTrue add.right_neutral)"], ["proof (state)\nthis:\n  \\<exists>s s'.\n     P k s s' \\<and>\n     (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n     (WHILE b' DO c', s') \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<And>n k t t'.\n       \\<lbrakk>\\<And>k t t'.\n                   \\<lbrakk>\\<And>n.\n                               \\<forall>t t'.\n                                  P (k + Suc n) t t' \\<longrightarrow>\n                                  (\\<exists>s s'.\nP (k + n) s s' \\<and>\nbval b s \\<and>\nbval b' s' \\<and> (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t');\n                    P (k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n                    (WHILE b' DO c', s') \\<Rightarrow> t'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s s'.\n  P k s s' \\<and>\n  (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n  (WHILE b' DO c', s') \\<Rightarrow> t';\n        \\<And>n.\n           \\<forall>t t'.\n              P (k + Suc n) t t' \\<longrightarrow>\n              (\\<exists>s s'.\n                  P (k + n) s s' \\<and>\n                  bval b s \\<and>\n                  bval b' s' \\<and>\n                  (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t');\n        P (k + Suc n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n        (WHILE b' DO c', s') \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            P k s s' \\<and>\n                            (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n                            (WHILE b' DO c', s') \\<Rightarrow> t'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n k t t'.\n       \\<lbrakk>\\<And>k t t'.\n                   \\<lbrakk>\\<And>n.\n                               \\<forall>t t'.\n                                  P (k + Suc n) t t' \\<longrightarrow>\n                                  (\\<exists>s s'.\nP (k + n) s s' \\<and>\nbval b s \\<and>\nbval b' s' \\<and> (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t');\n                    P (k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n                    (WHILE b' DO c', s') \\<Rightarrow> t'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s s'.\n  P k s s' \\<and>\n  (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n  (WHILE b' DO c', s') \\<Rightarrow> t';\n        \\<And>n.\n           \\<forall>t t'.\n              P (k + Suc n) t t' \\<longrightarrow>\n              (\\<exists>s s'.\n                  P (k + n) s s' \\<and>\n                  bval b s \\<and>\n                  bval b' s' \\<and>\n                  (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t');\n        P (k + Suc n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n        (WHILE b' DO c', s') \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            P k s s' \\<and>\n                            (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n                            (WHILE b' DO c', s') \\<Rightarrow> t'", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>n.\n              \\<forall>t t'.\n                 P (?k + Suc n) t t' \\<longrightarrow>\n                 (\\<exists>s s'.\n                     P (?k + n) s s' \\<and>\n                     bval b s \\<and>\n                     bval b' s' \\<and>\n                     (c, s) \\<Rightarrow> t \\<and>\n                     (c', s') \\<Rightarrow> t');\n   P (?k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> ?t;\n   (WHILE b' DO c', s') \\<Rightarrow> ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s s'.\n                       P ?k s s' \\<and>\n                       (WHILE b DO c, s) \\<Rightarrow> ?t \\<and>\n                       (WHILE b' DO c', s') \\<Rightarrow> ?t'\n  \\<forall>t t'.\n     P (k + Suc ?n) t t' \\<longrightarrow>\n     (\\<exists>s s'.\n         P (k + ?n) s s' \\<and>\n         bval b s \\<and>\n         bval b' s' \\<and>\n         (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t')\n  P (k + Suc n) s s'\n  (WHILE b DO c, s) \\<Rightarrow> t\n  (WHILE b' DO c', s') \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<And>n k t t'.\n       \\<lbrakk>\\<And>k t t'.\n                   \\<lbrakk>\\<And>n.\n                               \\<forall>t t'.\n                                  P (k + Suc n) t t' \\<longrightarrow>\n                                  (\\<exists>s s'.\nP (k + n) s s' \\<and>\nbval b s \\<and>\nbval b' s' \\<and> (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t');\n                    P (k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n                    (WHILE b' DO c', s') \\<Rightarrow> t'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s s'.\n  P k s s' \\<and>\n  (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n  (WHILE b' DO c', s') \\<Rightarrow> t';\n        \\<And>n.\n           \\<forall>t t'.\n              P (k + Suc n) t t' \\<longrightarrow>\n              (\\<exists>s s'.\n                  P (k + n) s s' \\<and>\n                  bval b s \\<and>\n                  bval b' s' \\<and>\n                  (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t');\n        P (k + Suc n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n        (WHILE b' DO c', s') \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            P k s s' \\<and>\n                            (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n                            (WHILE b' DO c', s') \\<Rightarrow> t'", "from Suc"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>n.\n              \\<forall>t t'.\n                 P (?k + Suc n) t t' \\<longrightarrow>\n                 (\\<exists>s s'.\n                     P (?k + n) s s' \\<and>\n                     bval b s \\<and>\n                     bval b' s' \\<and>\n                     (c, s) \\<Rightarrow> t \\<and>\n                     (c', s') \\<Rightarrow> t');\n   P (?k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> ?t;\n   (WHILE b' DO c', s') \\<Rightarrow> ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s s'.\n                       P ?k s s' \\<and>\n                       (WHILE b DO c, s) \\<Rightarrow> ?t \\<and>\n                       (WHILE b' DO c', s') \\<Rightarrow> ?t'\n  \\<forall>t t'.\n     P (k + Suc ?n) t t' \\<longrightarrow>\n     (\\<exists>s s'.\n         P (k + ?n) s s' \\<and>\n         bval b s \\<and>\n         bval b' s' \\<and>\n         (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t')\n  P (k + Suc n) s s'\n  (WHILE b DO c, s) \\<Rightarrow> t\n  (WHILE b' DO c', s') \\<Rightarrow> t'", "obtain r r' where final_iteration: \"P (Suc k) r r'\" \"(WHILE b DO c, r) \\<Rightarrow> t\" \"(WHILE b' DO c', r') \\<Rightarrow> t'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>n.\n              \\<forall>t t'.\n                 P (?k + Suc n) t t' \\<longrightarrow>\n                 (\\<exists>s s'.\n                     P (?k + n) s s' \\<and>\n                     bval b s \\<and>\n                     bval b' s' \\<and>\n                     (c, s) \\<Rightarrow> t \\<and>\n                     (c', s') \\<Rightarrow> t');\n   P (?k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> ?t;\n   (WHILE b' DO c', s') \\<Rightarrow> ?t'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s s'.\n                       P ?k s s' \\<and>\n                       (WHILE b DO c, s) \\<Rightarrow> ?t \\<and>\n                       (WHILE b' DO c', s') \\<Rightarrow> ?t'\n  \\<forall>t t'.\n     P (k + Suc ?n) t t' \\<longrightarrow>\n     (\\<exists>s s'.\n         P (k + ?n) s s' \\<and>\n         bval b s \\<and>\n         bval b' s' \\<and>\n         (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t')\n  P (k + Suc n) s s'\n  (WHILE b DO c, s) \\<Rightarrow> t\n  (WHILE b' DO c', s') \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. (\\<And>r r'.\n        \\<lbrakk>P (Suc k) r r'; (WHILE b DO c, r) \\<Rightarrow> t;\n         (WHILE b' DO c', r') \\<Rightarrow> t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis add_Suc_shift)"], ["proof (state)\nthis:\n  P (Suc k) r r'\n  (WHILE b DO c, r) \\<Rightarrow> t\n  (WHILE b' DO c', r') \\<Rightarrow> t'\n\ngoal (1 subgoal):\n 1. \\<And>n k t t'.\n       \\<lbrakk>\\<And>k t t'.\n                   \\<lbrakk>\\<And>n.\n                               \\<forall>t t'.\n                                  P (k + Suc n) t t' \\<longrightarrow>\n                                  (\\<exists>s s'.\nP (k + n) s s' \\<and>\nbval b s \\<and>\nbval b' s' \\<and> (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t');\n                    P (k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n                    (WHILE b' DO c', s') \\<Rightarrow> t'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s s'.\n  P k s s' \\<and>\n  (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n  (WHILE b' DO c', s') \\<Rightarrow> t';\n        \\<And>n.\n           \\<forall>t t'.\n              P (k + Suc n) t t' \\<longrightarrow>\n              (\\<exists>s s'.\n                  P (k + n) s s' \\<and>\n                  bval b s \\<and>\n                  bval b' s' \\<and>\n                  (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t');\n        P (k + Suc n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n        (WHILE b' DO c', s') \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            P k s s' \\<and>\n                            (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n                            (WHILE b' DO c', s') \\<Rightarrow> t'", "from final_iteration(1)"], ["proof (chain)\npicking this:\n  P (Suc k) r r'", "obtain q q' where\n     \"P k q q' \\<and> bval b q \\<and> bval b' q' \\<and> (c, q) \\<Rightarrow> r \\<and> (c', q') \\<Rightarrow> r'\""], ["proof (prove)\nusing this:\n  P (Suc k) r r'\n\ngoal (1 subgoal):\n 1. (\\<And>q q'.\n        P k q q' \\<and>\n        bval b q \\<and>\n        bval b' q' \\<and>\n        (c, q) \\<Rightarrow> r \\<and>\n        (c', q') \\<Rightarrow> r' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis Nat.add_0_right Suc.prems(1) plus_1_eq_Suc semiring_normalization_rules(24))"], ["proof (state)\nthis:\n  P k q q' \\<and>\n  bval b q \\<and>\n  bval b' q' \\<and> (c, q) \\<Rightarrow> r \\<and> (c', q') \\<Rightarrow> r'\n\ngoal (1 subgoal):\n 1. \\<And>n k t t'.\n       \\<lbrakk>\\<And>k t t'.\n                   \\<lbrakk>\\<And>n.\n                               \\<forall>t t'.\n                                  P (k + Suc n) t t' \\<longrightarrow>\n                                  (\\<exists>s s'.\nP (k + n) s s' \\<and>\nbval b s \\<and>\nbval b' s' \\<and> (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t');\n                    P (k + n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n                    (WHILE b' DO c', s') \\<Rightarrow> t'\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s s'.\n  P k s s' \\<and>\n  (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n  (WHILE b' DO c', s') \\<Rightarrow> t';\n        \\<And>n.\n           \\<forall>t t'.\n              P (k + Suc n) t t' \\<longrightarrow>\n              (\\<exists>s s'.\n                  P (k + n) s s' \\<and>\n                  bval b s \\<and>\n                  bval b' s' \\<and>\n                  (c, s) \\<Rightarrow> t \\<and> (c', s') \\<Rightarrow> t');\n        P (k + Suc n) s s'; (WHILE b DO c, s) \\<Rightarrow> t;\n        (WHILE b' DO c', s') \\<Rightarrow> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s s'.\n                            P k s s' \\<and>\n                            (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n                            (WHILE b' DO c', s') \\<Rightarrow> t'", "with final_iteration"], ["proof (chain)\npicking this:\n  P (Suc k) r r'\n  (WHILE b DO c, r) \\<Rightarrow> t\n  (WHILE b' DO c', r') \\<Rightarrow> t'\n  P k q q' \\<and>\n  bval b q \\<and>\n  bval b' q' \\<and> (c, q) \\<Rightarrow> r \\<and> (c', q') \\<Rightarrow> r'", "show ?case"], ["proof (prove)\nusing this:\n  P (Suc k) r r'\n  (WHILE b DO c, r) \\<Rightarrow> t\n  (WHILE b' DO c', r') \\<Rightarrow> t'\n  P k q q' \\<and>\n  bval b q \\<and>\n  bval b' q' \\<and> (c, q) \\<Rightarrow> r \\<and> (c', q') \\<Rightarrow> r'\n\ngoal (1 subgoal):\n 1. \\<exists>s s'.\n       P k s s' \\<and>\n       (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n       (WHILE b' DO c', s') \\<Rightarrow> t'", "by blast"], ["proof (state)\nthis:\n  \\<exists>s s'.\n     P k s s' \\<and>\n     (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n     (WHILE b' DO c', s') \\<Rightarrow> t'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s s'.\n     P k s s' \\<and>\n     (WHILE b DO c, s) \\<Rightarrow> t \\<and>\n     (WHILE b' DO c', s') \\<Rightarrow> t'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma While_backwards_frontier_both_ir_valid[intro]:\n  \"(\\<And>n. ir_valid (\\<lambda> s s'. P n s s' \\<and> bval b s \\<and> bval b' s') c c' (P (Suc n))) \\<Longrightarrow>\n   ir_valid (\\<lambda>s s'. \\<exists>n. P n s s') (WHILE b DO c) (WHILE b' DO c') Q \\<Longrightarrow>\n   ir_valid (P 0) (WHILE b DO c) (WHILE b' DO c') (\\<lambda>s s'. Q s s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>n.\n                ir_valid\n                 (\\<lambda>s s'. P n s s' \\<and> bval b s \\<and> bval b' s')\n                 c c' (P (Suc n));\n     ir_valid (\\<lambda>s s'. \\<exists>n. P n s s') (WHILE b DO c)\n      (WHILE b' DO c') Q\\<rbrakk>\n    \\<Longrightarrow> ir_valid (P 0) (WHILE b DO c) (WHILE b' DO c') Q", "by(auto simp: ir_valid_def intro: While_backwards_frontier_both_ir_valid')"], ["", "lemma ir_While_backwards_frontier_both:\n  \"\\<lbrakk>\\<And>n. ir_hoare (\\<lambda>s s'. P n s s' \\<and> bval b s \\<and> bval b' s') c c' (P (Suc n));\n   ir_hoare (\\<lambda>s s'. \\<exists>n. P n s s') (WHILE b DO c) (WHILE b' DO c') Q\\<rbrakk>\n   \\<Longrightarrow> ir_hoare (P 0) (WHILE b DO c) (WHILE b' DO c') (\\<lambda>s s'. Q s s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>n.\n                ir_hoare\n                 (\\<lambda>s s'. P n s s' \\<and> bval b s \\<and> bval b' s')\n                 c c' (P (Suc n));\n     ir_hoare (\\<lambda>s s'. \\<exists>n. P n s s') (WHILE b DO c)\n      (WHILE b' DO c') Q\\<rbrakk>\n    \\<Longrightarrow> ir_hoare (P 0) (WHILE b DO c) (WHILE b' DO c') Q", "using soundness completeness While_backwards_frontier_both_ir_valid"], ["proof (prove)\nusing this:\n  ir_hoare ?P ?c ?c' ?Q \\<Longrightarrow> ir_valid ?P ?c ?c' ?Q\n  ir_valid ?P ?c ?c' ?Q \\<Longrightarrow> ir_hoare ?P ?c ?c' ?Q\n  \\<lbrakk>\\<And>n.\n              ir_valid\n               (\\<lambda>s s'.\n                   ?P n s s' \\<and> bval ?b s \\<and> bval ?b' s')\n               ?c ?c' (?P (Suc n));\n   ir_valid (\\<lambda>s s'. \\<exists>n. ?P n s s') (WHILE ?b DO ?c)\n    (WHILE ?b' DO ?c') ?Q\\<rbrakk>\n  \\<Longrightarrow> ir_valid (?P 0) (WHILE ?b DO ?c) (WHILE ?b' DO ?c') ?Q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>n.\n                ir_hoare\n                 (\\<lambda>s s'. P n s s' \\<and> bval b s \\<and> bval b' s')\n                 c c' (P (Suc n));\n     ir_hoare (\\<lambda>s s'. \\<exists>n. P n s s') (WHILE b DO c)\n      (WHILE b' DO c') Q\\<rbrakk>\n    \\<Longrightarrow> ir_hoare (P 0) (WHILE b DO c) (WHILE b' DO c') Q", "by auto"], ["", "text \\<open>\n  The following rule then follows easily as a special case\n\\<close>"], ["", "lemma ir_While_backwards_both:\n  \"(\\<And>n. ir_hoare (\\<lambda> s s'. P n s s' \\<and> bval b s \\<and> bval b' s') c c' (P (Suc n))) \\<Longrightarrow>\n                       ir_hoare (P 0) (WHILE b DO c) (WHILE b' DO c') (\\<lambda>s s'. \\<exists>n. P n s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        ir_hoare (\\<lambda>s s'. P n s s' \\<and> bval b s \\<and> bval b' s')\n         c c' (P (Suc n))) \\<Longrightarrow>\n    ir_hoare (P 0) (WHILE b DO c) (WHILE b' DO c')\n     (\\<lambda>s s'.\n         \\<exists>n.\n            P n s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')", "apply(rule ir_While_backwards_frontier_both)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       (\\<And>n.\n           ir_hoare\n            (\\<lambda>s s'. P n s s' \\<and> bval b s \\<and> bval b' s') c c'\n            (P (Suc n))) \\<Longrightarrow>\n       ir_hoare (\\<lambda>s s'. P n s s' \\<and> bval b s \\<and> bval b' s')\n        c c' (P (Suc n))\n 2. (\\<And>n.\n        ir_hoare (\\<lambda>s s'. P n s s' \\<and> bval b s \\<and> bval b' s')\n         c c' (P (Suc n))) \\<Longrightarrow>\n    ir_hoare (\\<lambda>s s'. \\<exists>n. P n s s') (WHILE b DO c)\n     (WHILE b' DO c')\n     (\\<lambda>s s'.\n         \\<exists>n.\n            P n s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        ir_hoare (\\<lambda>s s'. P n s s' \\<and> bval b s \\<and> bval b' s')\n         c c' (P (Suc n))) \\<Longrightarrow>\n    ir_hoare (\\<lambda>s s'. \\<exists>n. P n s s') (WHILE b DO c)\n     (WHILE b' DO c')\n     (\\<lambda>s s'.\n         \\<exists>n.\n            P n s s' \\<and> \\<not> bval b s \\<and> \\<not> bval b' s')", "by(simp add: ir_While_False ir_sym flip_def)"], ["", "subsection \"client1\""], ["", "text \\<open>\n  An example roughly equivalent to cient1 from O'Hearn~\\cite{OHearn_19}0 \n\n  In particular we use the backwards variant rule to reason about the loop.\n\\<close>"], ["", "definition client1 :: com where\n  \"client1 \\<equiv> (Assign ''x'' (N 0);;\n              (While (Less (V ''x'') (V ''n''))\n                     ((Assign ''x'' (Plus (V ''x'') (N 1)))));;\n              (If (BEq (V ''x'') (N 2000000)) (Assign ''low'' (V ''high'')) SKIP))\""], ["", "lemma client1:\n  \"\\<exists>Q. ir_hoare low_eq client1 client1 Q \\<and> (\\<forall>s s'. Q s s' \\<longrightarrow> low_neq s s') \\<and> nontrivial Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Q.\n       ir_hoare low_eq client1 client1 Q \\<and>\n       (\\<forall>s s'.\n           Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n       nontrivial Q", "apply(rule exI, rule conjI, simp add: client1_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ir_hoare low_eq\n     (''x'' ::= N 0;;\n      WHILE Less (V ''x'') (V ''n'') DO ''x'' ::= Plus (V ''x'') (N 1);;\n      IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (''x'' ::= N 0;;\n      WHILE Less (V ''x'') (V ''n'') DO ''x'' ::= Plus (V ''x'') (N 1);;\n      IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     ?Q\n 2. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule_tac P=low_eq_strong in ir_pre)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ir_hoare low_eq_strong\n     (''x'' ::= N 0;;\n      WHILE Less (V ''x'') (V ''n'') DO ''x'' ::= Plus (V ''x'') (N 1);;\n      IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (''x'' ::= N 0;;\n      WHILE Less (V ''x'') (V ''n'') DO ''x'' ::= Plus (V ''x'') (N 1);;\n      IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     ?Q\n 2. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 3. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Seq)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ir_hoare low_eq_strong\n     (''x'' ::= N 0;;\n      WHILE Less (V ''x'') (V ''n'') DO ''x'' ::= Plus (V ''x'') (N 1))\n     (''x'' ::= N 0;;\n      WHILE Less (V ''x'') (V ''n'') DO ''x'' ::= Plus (V ''x'') (N 1))\n     ?Q6\n 2. ir_hoare ?Q6\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 3. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 4. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Seq)"], ["proof (prove)\ngoal (5 subgoals):\n 1. ir_hoare low_eq_strong (''x'' ::= N 0) (''x'' ::= N 0) ?Q9\n 2. ir_hoare ?Q9\n     (WHILE Less (V ''x'') (V ''n'') DO ''x'' ::= Plus (V ''x'') (N 1))\n     (WHILE Less (V ''x'') (V ''n'') DO ''x'' ::= Plus (V ''x'') (N 1)) ?Q6\n 3. ir_hoare ?Q6\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Assign_Assign)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ir_hoare\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            low_eq_strong (t(''x'' := v)) (t'(''x'' := v')) \\<and>\n            t ''x'' = aval (N 0) (t(''x'' := v)) \\<and>\n            t' ''x'' = aval (N 0) (t'(''x'' := v')))\n     (WHILE Less (V ''x'') (V ''n'') DO ''x'' ::= Plus (V ''x'') (N 1))\n     (WHILE Less (V ''x'') (V ''n'') DO ''x'' ::= Plus (V ''x'') (N 1)) ?Q6\n 2. ir_hoare ?Q6\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 3. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 4. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. ir_hoare\n     (\\<lambda>t t'.\n         low_eq_strong t t' \\<and> t ''x'' = 0 \\<and> t' ''x'' = 0)\n     (WHILE Less (V ''x'') (V ''n'') DO ''x'' ::= Plus (V ''x'') (N 1))\n     (WHILE Less (V ''x'') (V ''n'') DO ''x'' ::= Plus (V ''x'') (N 1)) ?Q6\n 2. ir_hoare ?Q6\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 3. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 4. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_pre)"], ["proof (prove)\ngoal (5 subgoals):\n 1. ir_hoare ?P15\n     (WHILE Less (V ''x'') (V ''n'') DO ''x'' ::= Plus (V ''x'') (N 1))\n     (WHILE Less (V ''x'') (V ''n'') DO ''x'' ::= Plus (V ''x'') (N 1)) ?Q6\n 2. \\<And>s s'.\n       ?P15 s s' \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 3. ir_hoare ?Q6\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_While_backwards_both[where P=\"\\<lambda>n s s'. low_eq_strong s s' \\<and> s ''x'' = int n \\<and> s' ''x'' = int n \\<and> int n \\<le> s ''n'' \\<and> int n \\<le> s' ''n''\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n.\n       ir_hoare\n        (\\<lambda>s s'.\n            (low_eq_strong s s' \\<and>\n             s ''x'' = int n \\<and>\n             s' ''x'' = int n \\<and>\n             int n \\<le> s ''n'' \\<and> int n \\<le> s' ''n'') \\<and>\n            bval (Less (V ''x'') (V ''n'')) s \\<and>\n            bval (Less (V ''x'') (V ''n'')) s')\n        (''x'' ::= Plus (V ''x'') (N 1)) (''x'' ::= Plus (V ''x'') (N 1))\n        (\\<lambda>s s'.\n            low_eq_strong s s' \\<and>\n            s ''x'' = int (Suc n) \\<and>\n            s' ''x'' = int (Suc n) \\<and>\n            int (Suc n) \\<le> s ''n'' \\<and> int (Suc n) \\<le> s' ''n'')\n 2. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       int 0 \\<le> s ''n'' \\<and> int 0 \\<le> s' ''n'' \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 3. ir_hoare\n     (\\<lambda>s s'.\n         \\<exists>n.\n            (low_eq_strong s s' \\<and>\n             s ''x'' = int n \\<and>\n             s' ''x'' = int n \\<and>\n             int n \\<le> s ''n'' \\<and> int n \\<le> s' ''n'') \\<and>\n            \\<not> bval (Less (V ''x'') (V ''n'')) s \\<and>\n            \\<not> bval (Less (V ''x'') (V ''n'')) s')\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_post)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n.\n       ir_hoare\n        (\\<lambda>s s'.\n            (low_eq_strong s s' \\<and>\n             s ''x'' = int n \\<and>\n             s' ''x'' = int n \\<and>\n             int n \\<le> s ''n'' \\<and> int n \\<le> s' ''n'') \\<and>\n            bval (Less (V ''x'') (V ''n'')) s \\<and>\n            bval (Less (V ''x'') (V ''n'')) s')\n        (''x'' ::= Plus (V ''x'') (N 1)) (''x'' ::= Plus (V ''x'') (N 1))\n        (?Q20 n)\n 2. \\<And>n s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int (Suc n) \\<and>\n       s' ''x'' = int (Suc n) \\<and>\n       int (Suc n) \\<le> s ''n'' \\<and>\n       int (Suc n) \\<le> s' ''n'' \\<Longrightarrow>\n       ?Q20 n s s'\n 3. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       int 0 \\<le> s ''n'' \\<and> int 0 \\<le> s' ''n'' \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 4. ir_hoare\n     (\\<lambda>s s'.\n         \\<exists>n.\n            (low_eq_strong s s' \\<and>\n             s ''x'' = int n \\<and>\n             s' ''x'' = int n \\<and>\n             int n \\<le> s ''n'' \\<and> int n \\<le> s' ''n'') \\<and>\n            \\<not> bval (Less (V ''x'') (V ''n'')) s \\<and>\n            \\<not> bval (Less (V ''x'') (V ''n'')) s')\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 5. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 6. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Assign_Assign)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int (Suc n) \\<and>\n       s' ''x'' = int (Suc n) \\<and>\n       int (Suc n) \\<le> s ''n'' \\<and>\n       int (Suc n) \\<le> s' ''n'' \\<Longrightarrow>\n       \\<exists>v v'.\n          ((low_eq_strong (s(''x'' := v)) (s'(''x'' := v')) \\<and>\n            (s(''x'' := v)) ''x'' = int n \\<and>\n            (s'(''x'' := v')) ''x'' = int n \\<and>\n            int n \\<le> (s(''x'' := v)) ''n'' \\<and>\n            int n \\<le> (s'(''x'' := v')) ''n'') \\<and>\n           bval (Less (V ''x'') (V ''n'')) (s(''x'' := v)) \\<and>\n           bval (Less (V ''x'') (V ''n'')) (s'(''x'' := v'))) \\<and>\n          s ''x'' = aval (Plus (V ''x'') (N 1)) (s(''x'' := v)) \\<and>\n          s' ''x'' = aval (Plus (V ''x'') (N 1)) (s'(''x'' := v'))\n 2. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       int 0 \\<le> s ''n'' \\<and> int 0 \\<le> s' ''n'' \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 3. ir_hoare\n     (\\<lambda>s s'.\n         \\<exists>n.\n            (low_eq_strong s s' \\<and>\n             s ''x'' = int n \\<and>\n             s' ''x'' = int n \\<and>\n             int n \\<le> s ''n'' \\<and> int n \\<le> s' ''n'') \\<and>\n            \\<not> bval (Less (V ''x'') (V ''n'')) s \\<and>\n            \\<not> bval (Less (V ''x'') (V ''n'')) s')\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       int 0 \\<le> s ''n'' \\<and> int 0 \\<le> s' ''n'' \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 2. ir_hoare\n     (\\<lambda>s s'.\n         \\<exists>n.\n            (low_eq_strong s s' \\<and>\n             s ''x'' = int n \\<and>\n             s' ''x'' = int n \\<and>\n             int n \\<le> s ''n'' \\<and> int n \\<le> s' ''n'') \\<and>\n            \\<not> bval (Less (V ''x'') (V ''n'')) s \\<and>\n            \\<not> bval (Less (V ''x'') (V ''n'')) s')\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 3. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 4. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         \\<exists>n.\n            (low_eq_strong s s' \\<and>\n             s ''x'' = int n \\<and>\n             s' ''x'' = int n \\<and>\n             int n \\<le> s ''n'' \\<and> int n \\<le> s' ''n'') \\<and>\n            \\<not> bval (Less (V ''x'') (V ''n'')) s \\<and>\n            \\<not> bval (Less (V ''x'') (V ''n'')) s')\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP) ?Q\n 2. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 3. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_If_True_True)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         (\\<exists>n.\n             (low_eq_strong s s' \\<and>\n              s ''x'' = int n \\<and>\n              s' ''x'' = int n \\<and>\n              int n \\<le> s ''n'' \\<and> int n \\<le> s' ''n'') \\<and>\n             \\<not> bval (Less (V ''x'') (V ''n'')) s \\<and>\n             \\<not> bval (Less (V ''x'') (V ''n'')) s') \\<and>\n         bval (BEq (V ''x'') (N 2000000)) s \\<and>\n         bval (BEq (V ''x'') (N 2000000)) s')\n     (''low'' ::= V ''high'') (''low'' ::= V ''high'') ?Q\n 2. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 3. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Assign_Assign)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 2. (\\<forall>s s'.\n        (\\<exists>v v'.\n            ((\\<exists>n.\n                 (low_eq_strong (s(''low'' := v)) (s'(''low'' := v')) \\<and>\n                  (s(''low'' := v)) ''x'' = int n \\<and>\n                  (s'(''low'' := v')) ''x'' = int n \\<and>\n                  int n \\<le> (s(''low'' := v)) ''n'' \\<and>\n                  int n \\<le> (s'(''low'' := v')) ''n'') \\<and>\n                 \\<not> bval (Less (V ''x'') (V ''n''))\n                         (s(''low'' := v)) \\<and>\n                 \\<not> bval (Less (V ''x'') (V ''n''))\n                         (s'(''low'' := v'))) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (s(''low'' := v)) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (s'(''low'' := v'))) \\<and>\n            s ''low'' = aval (V ''high'') (s(''low'' := v)) \\<and>\n            s' ''low'' =\n            aval (V ''high'') (s'(''low'' := v'))) \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            ((\\<exists>n.\n                 (low_eq_strong (t(''low'' := v)) (t'(''low'' := v')) \\<and>\n                  (t(''low'' := v)) ''x'' = int n \\<and>\n                  (t'(''low'' := v')) ''x'' = int n \\<and>\n                  int n \\<le> (t(''low'' := v)) ''n'' \\<and>\n                  int n \\<le> (t'(''low'' := v')) ''n'') \\<and>\n                 \\<not> bval (Less (V ''x'') (V ''n''))\n                         (t(''low'' := v)) \\<and>\n                 \\<not> bval (Less (V ''x'') (V ''n''))\n                         (t'(''low'' := v'))) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t(''low'' := v)) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t'(''low'' := v'))) \\<and>\n            t ''low'' = aval (V ''high'') (t(''low'' := v)) \\<and>\n            t' ''low'' = aval (V ''high'') (t'(''low'' := v')))", "apply(fastforce simp: low_eq_strong_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>s s'.\n        (\\<exists>v v'.\n            ((\\<exists>n.\n                 (low_eq_strong (s(''low'' := v)) (s'(''low'' := v')) \\<and>\n                  (s(''low'' := v)) ''x'' = int n \\<and>\n                  (s'(''low'' := v')) ''x'' = int n \\<and>\n                  int n \\<le> (s(''low'' := v)) ''n'' \\<and>\n                  int n \\<le> (s'(''low'' := v')) ''n'') \\<and>\n                 \\<not> bval (Less (V ''x'') (V ''n''))\n                         (s(''low'' := v)) \\<and>\n                 \\<not> bval (Less (V ''x'') (V ''n''))\n                         (s'(''low'' := v'))) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (s(''low'' := v)) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (s'(''low'' := v'))) \\<and>\n            s ''low'' = aval (V ''high'') (s(''low'' := v)) \\<and>\n            s' ''low'' =\n            aval (V ''high'') (s'(''low'' := v'))) \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            ((\\<exists>n.\n                 (low_eq_strong (t(''low'' := v)) (t'(''low'' := v')) \\<and>\n                  (t(''low'' := v)) ''x'' = int n \\<and>\n                  (t'(''low'' := v')) ''x'' = int n \\<and>\n                  int n \\<le> (t(''low'' := v)) ''n'' \\<and>\n                  int n \\<le> (t'(''low'' := v')) ''n'') \\<and>\n                 \\<not> bval (Less (V ''x'') (V ''n''))\n                         (t(''low'' := v)) \\<and>\n                 \\<not> bval (Less (V ''x'') (V ''n''))\n                         (t'(''low'' := v'))) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t(''low'' := v)) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t'(''low'' := v'))) \\<and>\n            t ''low'' = aval (V ''high'') (t(''low'' := v)) \\<and>\n            t' ''low'' = aval (V ''high'') (t'(''low'' := v')))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>s s'.\n       (\\<exists>v v'.\n           ((\\<exists>n.\n                (low_eq_strong (s(''low'' := v)) (s'(''low'' := v')) \\<and>\n                 (s(''low'' := v)) ''x'' = int n \\<and>\n                 (s'(''low'' := v')) ''x'' = int n \\<and>\n                 int n \\<le> (s(''low'' := v)) ''n'' \\<and>\n                 int n \\<le> (s'(''low'' := v')) ''n'') \\<and>\n                \\<not> bval (Less (V ''x'') (V ''n''))\n                        (s(''low'' := v)) \\<and>\n                \\<not> bval (Less (V ''x'') (V ''n''))\n                        (s'(''low'' := v'))) \\<and>\n            bval (BEq (V ''x'') (N 2000000)) (s(''low'' := v)) \\<and>\n            bval (BEq (V ''x'') (N 2000000)) (s'(''low'' := v'))) \\<and>\n           s ''low'' = aval (V ''high'') (s(''low'' := v)) \\<and>\n           s' ''low'' =\n           aval (V ''high'') (s'(''low'' := v'))) \\<longrightarrow>\n       s ''low'' \\<noteq> s' ''low''\n 2. nontrivial\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            ((\\<exists>n.\n                 (low_eq_strong (t(''low'' := v)) (t'(''low'' := v')) \\<and>\n                  (t(''low'' := v)) ''x'' = int n \\<and>\n                  (t'(''low'' := v')) ''x'' = int n \\<and>\n                  int n \\<le> (t(''low'' := v)) ''n'' \\<and>\n                  int n \\<le> (t'(''low'' := v')) ''n'') \\<and>\n                 \\<not> bval (Less (V ''x'') (V ''n''))\n                         (t(''low'' := v)) \\<and>\n                 \\<not> bval (Less (V ''x'') (V ''n''))\n                         (t'(''low'' := v'))) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t(''low'' := v)) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t'(''low'' := v'))) \\<and>\n            t ''low'' = aval (V ''high'') (t(''low'' := v)) \\<and>\n            t' ''low'' = aval (V ''high'') (t'(''low'' := v')))", "apply(clarsimp simp: low_eq_strong_def split: if_splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nontrivial\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            ((\\<exists>n.\n                 (low_eq_strong (t(''low'' := v)) (t'(''low'' := v')) \\<and>\n                  (t(''low'' := v)) ''x'' = int n \\<and>\n                  (t'(''low'' := v')) ''x'' = int n \\<and>\n                  int n \\<le> (t(''low'' := v)) ''n'' \\<and>\n                  int n \\<le> (t'(''low'' := v')) ''n'') \\<and>\n                 \\<not> bval (Less (V ''x'') (V ''n''))\n                         (t(''low'' := v)) \\<and>\n                 \\<not> bval (Less (V ''x'') (V ''n''))\n                         (t'(''low'' := v'))) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t(''low'' := v)) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t'(''low'' := v'))) \\<and>\n            t ''low'' = aval (V ''high'') (t(''low'' := v)) \\<and>\n            t' ''low'' = aval (V ''high'') (t'(''low'' := v')))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. nontrivial\n     (\\<lambda>t t'.\n         (\\<exists>v v'.\n             low_eq_strong (t(''low'' := v)) (t'(''low'' := v'))) \\<and>\n         (\\<exists>n.\n             t ''x'' = int n \\<and>\n             t' ''x'' = int n \\<and>\n             int n \\<le> t ''n'' \\<and>\n             int n \\<le> t' ''n'' \\<and>\n             \\<not> t ''x'' < t ''n'' \\<and>\n             \\<not> t' ''x'' < t' ''n'') \\<and>\n         t ''x'' = 2000000 \\<and>\n         t' ''x'' = 2000000 \\<and>\n         t ''low'' = t ''high'' \\<and> t' ''low'' = t' ''high'')", "(* ugh having to manually do constraint solving here... *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nontrivial\n     (\\<lambda>t t'.\n         (\\<exists>v v'.\n             low_eq_strong (t(''low'' := v)) (t'(''low'' := v'))) \\<and>\n         (\\<exists>n.\n             t ''x'' = int n \\<and>\n             t' ''x'' = int n \\<and>\n             int n \\<le> t ''n'' \\<and>\n             int n \\<le> t' ''n'' \\<and>\n             \\<not> t ''x'' < t ''n'' \\<and>\n             \\<not> t' ''x'' < t' ''n'') \\<and>\n         t ''x'' = 2000000 \\<and>\n         t' ''x'' = 2000000 \\<and>\n         t ''low'' = t ''high'' \\<and> t' ''low'' = t' ''high'')", "apply(clarsimp simp: low_eq_strong_def nontrivial_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t t'.\n       t ''high'' \\<noteq> t' ''high'' \\<and>\n       (\\<exists>n.\n           t ''x'' = int n \\<and>\n           t' ''x'' = int n \\<and>\n           int n \\<le> t ''n'' \\<and>\n           int n \\<le> t' ''n'' \\<and>\n           \\<not> t ''x'' < t ''n'' \\<and>\n           \\<not> t' ''x'' < t' ''n'') \\<and>\n       t ''x'' = 2000000 \\<and>\n       t' ''x'' = 2000000 \\<and>\n       t ''low'' = t ''high'' \\<and> t' ''low'' = t' ''high''", "apply(rule_tac x=\"\\<lambda>v. if v = ''x'' then 2000000 else if v = ''high'' then 1 else if v = ''n'' then 2000000 else if v = ''nondet'' then -1 else if v = ''low'' then 1 else undefined\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t'.\n       (if ''high'' = ''x'' then 2000000\n        else if ''high'' = ''high'' then 1\n             else if ''high'' = ''n'' then 2000000\n                  else if ''high'' = ''nondet'' then - 1\n                       else if ''high'' = ''low'' then 1\n                            else undefined) \\<noteq>\n       t' ''high'' \\<and>\n       (\\<exists>n.\n           (if ''x'' = ''x'' then 2000000\n            else if ''x'' = ''high'' then 1\n                 else if ''x'' = ''n'' then 2000000\n                      else if ''x'' = ''nondet'' then - 1\n                           else if ''x'' = ''low'' then 1 else undefined) =\n           int n \\<and>\n           t' ''x'' = int n \\<and>\n           int n\n           \\<le> (if ''n'' = ''x'' then 2000000\n                  else if ''n'' = ''high'' then 1\n                       else if ''n'' = ''n'' then 2000000\n                            else if ''n'' = ''nondet'' then - 1\n                                 else if ''n'' = ''low'' then 1\nelse undefined) \\<and>\n           int n \\<le> t' ''n'' \\<and>\n           \\<not> (if ''x'' = ''x'' then 2000000\n                   else if ''x'' = ''high'' then 1\n                        else if ''x'' = ''n'' then 2000000\n                             else if ''x'' = ''nondet'' then - 1\n                                  else if ''x'' = ''low'' then 1\n else undefined)\n                  < (if ''n'' = ''x'' then 2000000\n                     else if ''n'' = ''high'' then 1\n                          else if ''n'' = ''n'' then 2000000\n                               else if ''n'' = ''nondet'' then - 1\n                                    else if ''n'' = ''low'' then 1\n   else undefined) \\<and>\n           \\<not> t' ''x'' < t' ''n'') \\<and>\n       (if ''x'' = ''x'' then 2000000\n        else if ''x'' = ''high'' then 1\n             else if ''x'' = ''n'' then 2000000\n                  else if ''x'' = ''nondet'' then - 1\n                       else if ''x'' = ''low'' then 1 else undefined) =\n       2000000 \\<and>\n       t' ''x'' = 2000000 \\<and>\n       (if ''low'' = ''x'' then 2000000\n        else if ''low'' = ''high'' then 1\n             else if ''low'' = ''n'' then 2000000\n                  else if ''low'' = ''nondet'' then - 1\n                       else if ''low'' = ''low'' then 1 else undefined) =\n       (if ''high'' = ''x'' then 2000000\n        else if ''high'' = ''high'' then 1\n             else if ''high'' = ''n'' then 2000000\n                  else if ''high'' = ''nondet'' then - 1\n                       else if ''high'' = ''low'' then 1\n                            else undefined) \\<and>\n       t' ''low'' = t' ''high''", "apply(rule_tac x=\"\\<lambda>v. if v = ''x'' then 2000000 else if v = ''high'' then 0 else if v = ''n'' then 2000000 else if v = ''nondet'' then -1 else if v = ''low'' then 0 else undefined\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if ''high'' = ''x'' then 2000000\n     else if ''high'' = ''high'' then 1\n          else if ''high'' = ''n'' then 2000000\n               else if ''high'' = ''nondet'' then - 1\n                    else if ''high'' = ''low'' then 1\n                         else undefined) \\<noteq>\n    (if ''high'' = ''x'' then 2000000\n     else if ''high'' = ''high'' then 0\n          else if ''high'' = ''n'' then 2000000\n               else if ''high'' = ''nondet'' then - 1\n                    else if ''high'' = ''low'' then 0 else undefined) \\<and>\n    (\\<exists>n.\n        (if ''x'' = ''x'' then 2000000\n         else if ''x'' = ''high'' then 1\n              else if ''x'' = ''n'' then 2000000\n                   else if ''x'' = ''nondet'' then - 1\n                        else if ''x'' = ''low'' then 1 else undefined) =\n        int n \\<and>\n        (if ''x'' = ''x'' then 2000000\n         else if ''x'' = ''high'' then 0\n              else if ''x'' = ''n'' then 2000000\n                   else if ''x'' = ''nondet'' then - 1\n                        else if ''x'' = ''low'' then 0 else undefined) =\n        int n \\<and>\n        int n\n        \\<le> (if ''n'' = ''x'' then 2000000\n               else if ''n'' = ''high'' then 1\n                    else if ''n'' = ''n'' then 2000000\n                         else if ''n'' = ''nondet'' then - 1\n                              else if ''n'' = ''low'' then 1\n                                   else undefined) \\<and>\n        int n\n        \\<le> (if ''n'' = ''x'' then 2000000\n               else if ''n'' = ''high'' then 0\n                    else if ''n'' = ''n'' then 2000000\n                         else if ''n'' = ''nondet'' then - 1\n                              else if ''n'' = ''low'' then 0\n                                   else undefined) \\<and>\n        \\<not> (if ''x'' = ''x'' then 2000000\n                else if ''x'' = ''high'' then 1\n                     else if ''x'' = ''n'' then 2000000\n                          else if ''x'' = ''nondet'' then - 1\n                               else if ''x'' = ''low'' then 1\n                                    else undefined)\n               < (if ''n'' = ''x'' then 2000000\n                  else if ''n'' = ''high'' then 1\n                       else if ''n'' = ''n'' then 2000000\n                            else if ''n'' = ''nondet'' then - 1\n                                 else if ''n'' = ''low'' then 1\nelse undefined) \\<and>\n        \\<not> (if ''x'' = ''x'' then 2000000\n                else if ''x'' = ''high'' then 0\n                     else if ''x'' = ''n'' then 2000000\n                          else if ''x'' = ''nondet'' then - 1\n                               else if ''x'' = ''low'' then 0\n                                    else undefined)\n               < (if ''n'' = ''x'' then 2000000\n                  else if ''n'' = ''high'' then 0\n                       else if ''n'' = ''n'' then 2000000\n                            else if ''n'' = ''nondet'' then - 1\n                                 else if ''n'' = ''low'' then 0\nelse undefined)) \\<and>\n    (if ''x'' = ''x'' then 2000000\n     else if ''x'' = ''high'' then 1\n          else if ''x'' = ''n'' then 2000000\n               else if ''x'' = ''nondet'' then - 1\n                    else if ''x'' = ''low'' then 1 else undefined) =\n    2000000 \\<and>\n    (if ''x'' = ''x'' then 2000000\n     else if ''x'' = ''high'' then 0\n          else if ''x'' = ''n'' then 2000000\n               else if ''x'' = ''nondet'' then - 1\n                    else if ''x'' = ''low'' then 0 else undefined) =\n    2000000 \\<and>\n    (if ''low'' = ''x'' then 2000000\n     else if ''low'' = ''high'' then 1\n          else if ''low'' = ''n'' then 2000000\n               else if ''low'' = ''nondet'' then - 1\n                    else if ''low'' = ''low'' then 1 else undefined) =\n    (if ''high'' = ''x'' then 2000000\n     else if ''high'' = ''high'' then 1\n          else if ''high'' = ''n'' then 2000000\n               else if ''high'' = ''nondet'' then - 1\n                    else if ''high'' = ''low'' then 1 else undefined) \\<and>\n    (if ''low'' = ''x'' then 2000000\n     else if ''low'' = ''high'' then 0\n          else if ''low'' = ''n'' then 2000000\n               else if ''low'' = ''nondet'' then - 1\n                    else if ''low'' = ''low'' then 0 else undefined) =\n    (if ''high'' = ''x'' then 2000000\n     else if ''high'' = ''high'' then 0\n          else if ''high'' = ''n'' then 2000000\n               else if ''high'' = ''nondet'' then - 1\n                    else if ''high'' = ''low'' then 0 else undefined)", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"client2\""], ["", "text \\<open>\n  An example akin to client2 from O'Hearn~\\cite{OHearn_19}. \n\n  Note that this example is carefully written to show use of the frontier rule first to\n  reason up to the broken loop iteration, and then we unfold the loop at that point to\n  reason about the broken iteration, and then use the plain backwards variant rule to\n  reason over the remainder of the loop.\n\\<close>"], ["", "definition client2 :: com where\n  \"client2 \\<equiv> (Assign ''x'' (N 0);;\n              (While (Less (V ''x'') (N 4000000))\n                     ((Assign ''x'' (Plus (V ''x'') (N 1)));;\n                       (If (BEq (V ''x'') (N 2000000)) (Assign ''low'' (V ''high'')) SKIP))\n                       )\n              )\""], ["", "lemma client2:\n  \"\\<exists>Q. ir_hoare low_eq client2 client2 Q \\<and> (\\<forall>s s'. Q s s' \\<longrightarrow> low_neq s s') \\<and> nontrivial Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Q.\n       ir_hoare low_eq client2 client2 Q \\<and>\n       (\\<forall>s s'.\n           Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n       nontrivial Q", "apply(rule exI, rule conjI, simp add: client2_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ir_hoare low_eq\n     (''x'' ::= N 0;;\n      WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (''x'' ::= N 0;;\n      WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\n 2. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule_tac P=low_eq_strong in ir_pre)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ir_hoare low_eq_strong\n     (''x'' ::= N 0;;\n      WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (''x'' ::= N 0;;\n      WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\n 2. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 3. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Seq)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ir_hoare low_eq_strong (''x'' ::= N 0) (''x'' ::= N 0) ?Q6\n 2. ir_hoare ?Q6\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\n 3. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 4. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Assign_Assign)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ir_hoare\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            low_eq_strong (t(''x'' := v)) (t'(''x'' := v')) \\<and>\n            t ''x'' = aval (N 0) (t(''x'' := v)) \\<and>\n            t' ''x'' = aval (N 0) (t'(''x'' := v')))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\n 2. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 3. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. ir_hoare\n     (\\<lambda>t t'.\n         low_eq_strong t t' \\<and> t ''x'' = 0 \\<and> t' ''x'' = 0)\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\n 2. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 3. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_pre)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ir_hoare ?P12\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\n 2. \\<And>s s'.\n       ?P12 s s' \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 3. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 4. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_While_backwards_frontier_both[where P=\"\\<lambda>n s s'. low_eq_strong s s' \\<and> s ''x'' = int n \\<and> s' ''x'' = int n \\<and> s ''x'' \\<ge> 0 \\<and> s ''x'' \\<le> 2000000 - 1 \\<and> s' ''x'' \\<ge> 0 \\<and> s' ''x'' \\<le> 2000000 - 1\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n.\n       ir_hoare\n        (\\<lambda>s s'.\n            (low_eq_strong s s' \\<and>\n             s ''x'' = int n \\<and>\n             s' ''x'' = int n \\<and>\n             0 \\<le> s ''x'' \\<and>\n             s ''x'' \\<le> 2000000 - 1 \\<and>\n             0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1) \\<and>\n            bval (Less (V ''x'') (N 4000000)) s \\<and>\n            bval (Less (V ''x'') (N 4000000)) s')\n        (''x'' ::= Plus (V ''x'') (N 1);;\n         IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n        (''x'' ::= Plus (V ''x'') (N 1);;\n         IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n        (\\<lambda>s s'.\n            low_eq_strong s s' \\<and>\n            s ''x'' = int (Suc n) \\<and>\n            s' ''x'' = int (Suc n) \\<and>\n            0 \\<le> s ''x'' \\<and>\n            s ''x'' \\<le> 2000000 - 1 \\<and>\n            0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1)\n 2. ir_hoare\n     (\\<lambda>s s'.\n         \\<exists>n.\n            low_eq_strong s s' \\<and>\n            s ''x'' = int n \\<and>\n            s' ''x'' = int n \\<and>\n            0 \\<le> s ''x'' \\<and>\n            s ''x'' \\<le> 2000000 - 1 \\<and>\n            0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1)\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\n 3. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Seq)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n.\n       ir_hoare\n        (\\<lambda>s s'.\n            (low_eq_strong s s' \\<and>\n             s ''x'' = int n \\<and>\n             s' ''x'' = int n \\<and>\n             0 \\<le> s ''x'' \\<and>\n             s ''x'' \\<le> 2000000 - 1 \\<and>\n             0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1) \\<and>\n            bval (Less (V ''x'') (N 4000000)) s \\<and>\n            bval (Less (V ''x'') (N 4000000)) s')\n        (''x'' ::= Plus (V ''x'') (N 1)) (''x'' ::= Plus (V ''x'') (N 1))\n        (?Q18 n)\n 2. \\<And>n.\n       ir_hoare (?Q18 n)\n        (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n        (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n        (\\<lambda>s s'.\n            low_eq_strong s s' \\<and>\n            s ''x'' = int (Suc n) \\<and>\n            s' ''x'' = int (Suc n) \\<and>\n            0 \\<le> s ''x'' \\<and>\n            s ''x'' \\<le> 2000000 - 1 \\<and>\n            0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1)\n 3. ir_hoare\n     (\\<lambda>s s'.\n         \\<exists>n.\n            low_eq_strong s s' \\<and>\n            s ''x'' = int n \\<and>\n            s' ''x'' = int n \\<and>\n            0 \\<le> s ''x'' \\<and>\n            s ''x'' \\<le> 2000000 - 1 \\<and>\n            0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1)\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\n 4. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 5. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 6. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Assign_Assign)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n.\n       ir_hoare\n        (\\<lambda>t t'.\n            \\<exists>v v'.\n               ((low_eq_strong (t(''x'' := v)) (t'(''x'' := v')) \\<and>\n                 (t(''x'' := v)) ''x'' = int n \\<and>\n                 (t'(''x'' := v')) ''x'' = int n \\<and>\n                 0 \\<le> (t(''x'' := v)) ''x'' \\<and>\n                 (t(''x'' := v)) ''x'' \\<le> 2000000 - 1 \\<and>\n                 0 \\<le> (t'(''x'' := v')) ''x'' \\<and>\n                 (t'(''x'' := v')) ''x'' \\<le> 2000000 - 1) \\<and>\n                bval (Less (V ''x'') (N 4000000)) (t(''x'' := v)) \\<and>\n                bval (Less (V ''x'') (N 4000000)) (t'(''x'' := v'))) \\<and>\n               t ''x'' = aval (Plus (V ''x'') (N 1)) (t(''x'' := v)) \\<and>\n               t' ''x'' = aval (Plus (V ''x'') (N 1)) (t'(''x'' := v')))\n        (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n        (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n        (\\<lambda>s s'.\n            low_eq_strong s s' \\<and>\n            s ''x'' = int (Suc n) \\<and>\n            s' ''x'' = int (Suc n) \\<and>\n            0 \\<le> s ''x'' \\<and>\n            s ''x'' \\<le> 2000000 - 1 \\<and>\n            0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1)\n 2. ir_hoare\n     (\\<lambda>s s'.\n         \\<exists>n.\n            low_eq_strong s s' \\<and>\n            s ''x'' = int n \\<and>\n            s' ''x'' = int n \\<and>\n            0 \\<le> s ''x'' \\<and>\n            s ''x'' \\<le> 2000000 - 1 \\<and>\n            0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1)\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\n 3. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply clarsimp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n.\n       ir_hoare\n        (\\<lambda>t t'.\n            low_eq_strong t t' \\<and>\n            int n \\<le> 1999999 \\<and>\n            int n < 4000000 \\<and>\n            t ''x'' = int n + 1 \\<and> t' ''x'' = int n + 1)\n        (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n        (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n        (\\<lambda>s s'.\n            low_eq_strong s s' \\<and>\n            s ''x'' = 1 + int n \\<and>\n            s' ''x'' = 1 + int n \\<and>\n            0 \\<le> s ''x'' \\<and>\n            s ''x'' \\<le> 1999999 \\<and>\n            0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999)\n 2. ir_hoare\n     (\\<lambda>s s'.\n         \\<exists>n.\n            low_eq_strong s s' \\<and>\n            s ''x'' = int n \\<and>\n            s' ''x'' = int n \\<and>\n            0 \\<le> s ''x'' \\<and>\n            s ''x'' \\<le> 2000000 - 1 \\<and>\n            0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1)\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\n 3. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_post)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n.\n       ir_hoare\n        (\\<lambda>t t'.\n            low_eq_strong t t' \\<and>\n            int n \\<le> 1999999 \\<and>\n            int n < 4000000 \\<and>\n            t ''x'' = int n + 1 \\<and> t' ''x'' = int n + 1)\n        (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n        (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n        (?Q24 n)\n 2. \\<And>n s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = 1 + int n \\<and>\n       s' ''x'' = 1 + int n \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 1999999 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999 \\<Longrightarrow>\n       ?Q24 n s s'\n 3. ir_hoare\n     (\\<lambda>s s'.\n         \\<exists>n.\n            low_eq_strong s s' \\<and>\n            s ''x'' = int n \\<and>\n            s' ''x'' = int n \\<and>\n            0 \\<le> s ''x'' \\<and>\n            s ''x'' \\<le> 2000000 - 1 \\<and>\n            0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1)\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\n 4. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 5. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 6. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_If')"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n.\n       ir_hoare\n        (\\<lambda>s s'.\n            (low_eq_strong s s' \\<and>\n             int n \\<le> 1999999 \\<and>\n             int n < 4000000 \\<and>\n             s ''x'' = int n + 1 \\<and> s' ''x'' = int n + 1) \\<and>\n            bval (BEq (V ''x'') (N 2000000)) s \\<and>\n            bval (BEq (V ''x'') (N 2000000)) s')\n        (''low'' ::= V ''high'') (''low'' ::= V ''high'') (?Q\\<^sub>127 n)\n 2. \\<And>n.\n       ir_hoare\n        (\\<lambda>s s'.\n            (low_eq_strong s s' \\<and>\n             int n \\<le> 1999999 \\<and>\n             int n < 4000000 \\<and>\n             s ''x'' = int n + 1 \\<and> s' ''x'' = int n + 1) \\<and>\n            \\<not> bval (BEq (V ''x'') (N 2000000)) s \\<and>\n            \\<not> bval (BEq (V ''x'') (N 2000000)) s')\n        SKIP SKIP (?Q\\<^sub>227 n)\n 3. \\<And>n s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = 1 + int n \\<and>\n       s' ''x'' = 1 + int n \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 1999999 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999 \\<Longrightarrow>\n       ?Q\\<^sub>127 n s s' \\<or> ?Q\\<^sub>227 n s s'\n 4. ir_hoare\n     (\\<lambda>s s'.\n         \\<exists>n.\n            low_eq_strong s s' \\<and>\n            s ''x'' = int n \\<and>\n            s' ''x'' = int n \\<and>\n            0 \\<le> s ''x'' \\<and>\n            s ''x'' \\<le> 2000000 - 1 \\<and>\n            0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1)\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\n 5. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 6. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 7. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Assign_Assign)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n.\n       ir_hoare\n        (\\<lambda>s s'.\n            (low_eq_strong s s' \\<and>\n             int n \\<le> 1999999 \\<and>\n             int n < 4000000 \\<and>\n             s ''x'' = int n + 1 \\<and> s' ''x'' = int n + 1) \\<and>\n            \\<not> bval (BEq (V ''x'') (N 2000000)) s \\<and>\n            \\<not> bval (BEq (V ''x'') (N 2000000)) s')\n        SKIP SKIP (?Q\\<^sub>227 n)\n 2. \\<And>n s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = 1 + int n \\<and>\n       s' ''x'' = 1 + int n \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 1999999 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999 \\<Longrightarrow>\n       (\\<exists>v v'.\n           ((low_eq_strong (s(''low'' := v)) (s'(''low'' := v')) \\<and>\n             int n \\<le> 1999999 \\<and>\n             int n < 4000000 \\<and>\n             (s(''low'' := v)) ''x'' = int n + 1 \\<and>\n             (s'(''low'' := v')) ''x'' = int n + 1) \\<and>\n            bval (BEq (V ''x'') (N 2000000)) (s(''low'' := v)) \\<and>\n            bval (BEq (V ''x'') (N 2000000)) (s'(''low'' := v'))) \\<and>\n           s ''low'' = aval (V ''high'') (s(''low'' := v)) \\<and>\n           s' ''low'' = aval (V ''high'') (s'(''low'' := v'))) \\<or>\n       ?Q\\<^sub>227 n s s'\n 3. ir_hoare\n     (\\<lambda>s s'.\n         \\<exists>n.\n            low_eq_strong s s' \\<and>\n            s ''x'' = int n \\<and>\n            s' ''x'' = int n \\<and>\n            0 \\<le> s ''x'' \\<and>\n            s ''x'' \\<le> 2000000 - 1 \\<and>\n            0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1)\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\n 4. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 5. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 6. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_Skip_Skip)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = 1 + int n \\<and>\n       s' ''x'' = 1 + int n \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 1999999 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999 \\<Longrightarrow>\n       (\\<exists>v v'.\n           ((low_eq_strong (s(''low'' := v)) (s'(''low'' := v')) \\<and>\n             int n \\<le> 1999999 \\<and>\n             int n < 4000000 \\<and>\n             (s(''low'' := v)) ''x'' = int n + 1 \\<and>\n             (s'(''low'' := v')) ''x'' = int n + 1) \\<and>\n            bval (BEq (V ''x'') (N 2000000)) (s(''low'' := v)) \\<and>\n            bval (BEq (V ''x'') (N 2000000)) (s'(''low'' := v'))) \\<and>\n           s ''low'' = aval (V ''high'') (s(''low'' := v)) \\<and>\n           s' ''low'' = aval (V ''high'') (s'(''low'' := v'))) \\<or>\n       (low_eq_strong s s' \\<and>\n        int n \\<le> 1999999 \\<and>\n        int n < 4000000 \\<and>\n        s ''x'' = int n + 1 \\<and> s' ''x'' = int n + 1) \\<and>\n       \\<not> bval (BEq (V ''x'') (N 2000000)) s \\<and>\n       \\<not> bval (BEq (V ''x'') (N 2000000)) s'\n 2. ir_hoare\n     (\\<lambda>s s'.\n         \\<exists>n.\n            low_eq_strong s s' \\<and>\n            s ''x'' = int n \\<and>\n            s' ''x'' = int n \\<and>\n            0 \\<le> s ''x'' \\<and>\n            s ''x'' \\<le> 2000000 - 1 \\<and>\n            0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1)\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\n 3. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         \\<exists>n.\n            low_eq_strong s s' \\<and>\n            s ''x'' = int n \\<and>\n            s' ''x'' = int n \\<and>\n            0 \\<le> s ''x'' \\<and>\n            s ''x'' \\<le> 2000000 - 1 \\<and>\n            0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1)\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\n 2. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 3. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 4. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         low_eq_strong s s' \\<and>\n         (\\<exists>n.\n             s ''x'' = int n \\<and>\n             s' ''x'' = int n \\<and>\n             0 \\<le> s ''x'' \\<and>\n             s ''x'' \\<le> 1999999 \\<and>\n             0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\n 2. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 3. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 4. (\\<forall>s s'.\n        ?Q s s' \\<longrightarrow> s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial ?Q", "apply(rule ir_While')"], ["proof (prove)\ngoal (5 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and>\n          (\\<exists>n.\n              s ''x'' = int n \\<and>\n              s' ''x'' = int n \\<and>\n              0 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 1999999 \\<and>\n              0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999)) \\<and>\n         bval (Less (V ''x'') (N 4000000)) s \\<and>\n         bval (Less (V ''x'') (N 4000000)) s')\n     (''x'' ::= Plus (V ''x'') (N 1);;\n      IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP;;\n      WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (''x'' ::= Plus (V ''x'') (N 1);;\n      IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP;;\n      WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\\<^sub>135\n 2. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and>\n          (\\<exists>n.\n              s ''x'' = int n \\<and>\n              s' ''x'' = int n \\<and>\n              0 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 1999999 \\<and>\n              0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999)) \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s')\n     SKIP SKIP ?Q\\<^sub>235\n 3. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        ?Q\\<^sub>135 s s' \\<or> ?Q\\<^sub>235 s s' \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial (\\<lambda>s s'. ?Q\\<^sub>135 s s' \\<or> ?Q\\<^sub>235 s s')", "apply clarsimp"], ["proof (prove)\ngoal (5 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         low_eq_strong s s' \\<and>\n         (\\<exists>n.\n             s ''x'' = int n \\<and>\n             s' ''x'' = int n \\<and>\n             0 \\<le> s ''x'' \\<and>\n             s ''x'' \\<le> 1999999 \\<and>\n             0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999) \\<and>\n         s ''x'' < 4000000 \\<and> s' ''x'' < 4000000)\n     (''x'' ::= Plus (V ''x'') (N 1);;\n      IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP;;\n      WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (''x'' ::= Plus (V ''x'') (N 1);;\n      IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP;;\n      WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\\<^sub>135\n 2. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and>\n          (\\<exists>n.\n              s ''x'' = int n \\<and>\n              s' ''x'' = int n \\<and>\n              0 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 1999999 \\<and>\n              0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999)) \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s')\n     SKIP SKIP ?Q\\<^sub>235\n 3. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        ?Q\\<^sub>135 s s' \\<or> ?Q\\<^sub>235 s s' \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial (\\<lambda>s s'. ?Q\\<^sub>135 s s' \\<or> ?Q\\<^sub>235 s s')", "apply(rule ir_Seq)"], ["proof (prove)\ngoal (6 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         low_eq_strong s s' \\<and>\n         (\\<exists>n.\n             s ''x'' = int n \\<and>\n             s' ''x'' = int n \\<and>\n             0 \\<le> s ''x'' \\<and>\n             s ''x'' \\<le> 1999999 \\<and>\n             0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999) \\<and>\n         s ''x'' < 4000000 \\<and> s' ''x'' < 4000000)\n     (''x'' ::= Plus (V ''x'') (N 1);;\n      IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (''x'' ::= Plus (V ''x'') (N 1);;\n      IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     ?Q40\n 2. ir_hoare ?Q40\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\\<^sub>135\n 3. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and>\n          (\\<exists>n.\n              s ''x'' = int n \\<and>\n              s' ''x'' = int n \\<and>\n              0 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 1999999 \\<and>\n              0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999)) \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s')\n     SKIP SKIP ?Q\\<^sub>235\n 4. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 5. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 6. (\\<forall>s s'.\n        ?Q\\<^sub>135 s s' \\<or> ?Q\\<^sub>235 s s' \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial (\\<lambda>s s'. ?Q\\<^sub>135 s s' \\<or> ?Q\\<^sub>235 s s')", "apply(rule ir_Seq)"], ["proof (prove)\ngoal (7 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         low_eq_strong s s' \\<and>\n         (\\<exists>n.\n             s ''x'' = int n \\<and>\n             s' ''x'' = int n \\<and>\n             0 \\<le> s ''x'' \\<and>\n             s ''x'' \\<le> 1999999 \\<and>\n             0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999) \\<and>\n         s ''x'' < 4000000 \\<and> s' ''x'' < 4000000)\n     (''x'' ::= Plus (V ''x'') (N 1)) (''x'' ::= Plus (V ''x'') (N 1)) ?Q43\n 2. ir_hoare ?Q43\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     ?Q40\n 3. ir_hoare ?Q40\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\\<^sub>135\n 4. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and>\n          (\\<exists>n.\n              s ''x'' = int n \\<and>\n              s' ''x'' = int n \\<and>\n              0 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 1999999 \\<and>\n              0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999)) \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s')\n     SKIP SKIP ?Q\\<^sub>235\n 5. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 6. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 7. (\\<forall>s s'.\n        ?Q\\<^sub>135 s s' \\<or> ?Q\\<^sub>235 s s' \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial (\\<lambda>s s'. ?Q\\<^sub>135 s s' \\<or> ?Q\\<^sub>235 s s')", "apply(rule ir_Assign_Assign)"], ["proof (prove)\ngoal (6 subgoals):\n 1. ir_hoare\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            (low_eq_strong (t(''x'' := v)) (t'(''x'' := v')) \\<and>\n             (\\<exists>n.\n                 (t(''x'' := v)) ''x'' = int n \\<and>\n                 (t'(''x'' := v')) ''x'' = int n \\<and>\n                 0 \\<le> (t(''x'' := v)) ''x'' \\<and>\n                 (t(''x'' := v)) ''x'' \\<le> 1999999 \\<and>\n                 0 \\<le> (t'(''x'' := v')) ''x'' \\<and>\n                 (t'(''x'' := v')) ''x'' \\<le> 1999999) \\<and>\n             (t(''x'' := v)) ''x'' < 4000000 \\<and>\n             (t'(''x'' := v')) ''x'' < 4000000) \\<and>\n            t ''x'' = aval (Plus (V ''x'') (N 1)) (t(''x'' := v)) \\<and>\n            t' ''x'' = aval (Plus (V ''x'') (N 1)) (t'(''x'' := v')))\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n     ?Q40\n 2. ir_hoare ?Q40\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\\<^sub>135\n 3. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and>\n          (\\<exists>n.\n              s ''x'' = int n \\<and>\n              s' ''x'' = int n \\<and>\n              0 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 1999999 \\<and>\n              0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999)) \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s')\n     SKIP SKIP ?Q\\<^sub>235\n 4. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 5. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 6. (\\<forall>s s'.\n        ?Q\\<^sub>135 s s' \\<or> ?Q\\<^sub>235 s s' \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial (\\<lambda>s s'. ?Q\\<^sub>135 s s' \\<or> ?Q\\<^sub>235 s s')", "apply(rule ir_If_True_True)"], ["proof (prove)\ngoal (6 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         (\\<exists>v v'.\n             (low_eq_strong (s(''x'' := v)) (s'(''x'' := v')) \\<and>\n              (\\<exists>n.\n                  (s(''x'' := v)) ''x'' = int n \\<and>\n                  (s'(''x'' := v')) ''x'' = int n \\<and>\n                  0 \\<le> (s(''x'' := v)) ''x'' \\<and>\n                  (s(''x'' := v)) ''x'' \\<le> 1999999 \\<and>\n                  0 \\<le> (s'(''x'' := v')) ''x'' \\<and>\n                  (s'(''x'' := v')) ''x'' \\<le> 1999999) \\<and>\n              (s(''x'' := v)) ''x'' < 4000000 \\<and>\n              (s'(''x'' := v')) ''x'' < 4000000) \\<and>\n             s ''x'' = aval (Plus (V ''x'') (N 1)) (s(''x'' := v)) \\<and>\n             s' ''x'' =\n             aval (Plus (V ''x'') (N 1)) (s'(''x'' := v'))) \\<and>\n         bval (BEq (V ''x'') (N 2000000)) s \\<and>\n         bval (BEq (V ''x'') (N 2000000)) s')\n     (''low'' ::= V ''high'') (''low'' ::= V ''high'') ?Q40\n 2. ir_hoare ?Q40\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\\<^sub>135\n 3. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and>\n          (\\<exists>n.\n              s ''x'' = int n \\<and>\n              s' ''x'' = int n \\<and>\n              0 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 1999999 \\<and>\n              0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999)) \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s')\n     SKIP SKIP ?Q\\<^sub>235\n 4. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 5. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 6. (\\<forall>s s'.\n        ?Q\\<^sub>135 s s' \\<or> ?Q\\<^sub>235 s s' \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial (\\<lambda>s s'. ?Q\\<^sub>135 s s' \\<or> ?Q\\<^sub>235 s s')", "apply(rule ir_Assign_Assign)"], ["proof (prove)\ngoal (5 subgoals):\n 1. ir_hoare\n     (\\<lambda>t t'.\n         \\<exists>v v'.\n            ((\\<exists>va v'a.\n                 (low_eq_strong (t(''low'' := v, ''x'' := va))\n                   (t'(''low'' := v', ''x'' := v'a)) \\<and>\n                  (\\<exists>n.\n                      (t(''low'' := v, ''x'' := va)) ''x'' = int n \\<and>\n                      (t'(''low'' := v', ''x'' := v'a)) ''x'' = int n \\<and>\n                      0 \\<le> (t(''low'' := v, ''x'' := va)) ''x'' \\<and>\n                      (t(''low'' := v, ''x'' := va)) ''x''\n                      \\<le> 1999999 \\<and>\n                      0 \\<le> (t'(''low'' := v', ''x'' := v'a)) ''x'' \\<and>\n                      (t'(''low'' := v', ''x'' := v'a)) ''x''\n                      \\<le> 1999999) \\<and>\n                  (t(''low'' := v, ''x'' := va)) ''x'' < 4000000 \\<and>\n                  (t'(''low'' := v', ''x'' := v'a)) ''x'' < 4000000) \\<and>\n                 (t(''low'' := v)) ''x'' =\n                 aval (Plus (V ''x'') (N 1))\n                  (t(''low'' := v, ''x'' := va)) \\<and>\n                 (t'(''low'' := v')) ''x'' =\n                 aval (Plus (V ''x'') (N 1))\n                  (t'(''low'' := v', ''x'' := v'a))) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t(''low'' := v)) \\<and>\n             bval (BEq (V ''x'') (N 2000000)) (t'(''low'' := v'))) \\<and>\n            t ''low'' = aval (V ''high'') (t(''low'' := v)) \\<and>\n            t' ''low'' = aval (V ''high'') (t'(''low'' := v')))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\\<^sub>135\n 2. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and>\n          (\\<exists>n.\n              s ''x'' = int n \\<and>\n              s' ''x'' = int n \\<and>\n              0 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 1999999 \\<and>\n              0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999)) \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s')\n     SKIP SKIP ?Q\\<^sub>235\n 3. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        ?Q\\<^sub>135 s s' \\<or> ?Q\\<^sub>235 s s' \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial (\\<lambda>s s'. ?Q\\<^sub>135 s s' \\<or> ?Q\\<^sub>235 s s')", "apply clarsimp"], ["proof (prove)\ngoal (5 subgoals):\n 1. ir_hoare\n     (\\<lambda>t t'.\n         (\\<exists>v v'.\n             low_eq_strong (t(''low'' := v)) (t'(''low'' := v'))) \\<and>\n         (\\<exists>v v'.\n             (\\<exists>n.\n                 v = int n \\<and>\n                 v' = int n \\<and>\n                 0 \\<le> v \\<and>\n                 v \\<le> 1999999 \\<and>\n                 0 \\<le> v' \\<and> v' \\<le> 1999999) \\<and>\n             v < 4000000 \\<and>\n             v' < 4000000 \\<and>\n             t ''x'' = v + 1 \\<and> t' ''x'' = v' + 1) \\<and>\n         t ''x'' = 2000000 \\<and>\n         t' ''x'' = 2000000 \\<and>\n         t ''low'' = t ''high'' \\<and> t' ''low'' = t' ''high'')\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\\<^sub>135\n 2. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and>\n          (\\<exists>n.\n              s ''x'' = int n \\<and>\n              s' ''x'' = int n \\<and>\n              0 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 1999999 \\<and>\n              0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999)) \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s')\n     SKIP SKIP ?Q\\<^sub>235\n 3. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        ?Q\\<^sub>135 s s' \\<or> ?Q\\<^sub>235 s s' \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial (\\<lambda>s s'. ?Q\\<^sub>135 s s' \\<or> ?Q\\<^sub>235 s s')", "apply(rule ir_pre)"], ["proof (prove)\ngoal (6 subgoals):\n 1. ir_hoare ?P52\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     (WHILE Less (V ''x'') (N 4000000)\n      DO (''x'' ::= Plus (V ''x'') (N 1);;\n          IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high''\n          ELSE SKIP))\n     ?Q\\<^sub>135\n 2. \\<And>s s'.\n       ?P52 s s' \\<Longrightarrow>\n       (\\<exists>v v'.\n           low_eq_strong (s(''low'' := v)) (s'(''low'' := v'))) \\<and>\n       (\\<exists>v v'.\n           (\\<exists>n.\n               v = int n \\<and>\n               v' = int n \\<and>\n               0 \\<le> v \\<and>\n               v \\<le> 1999999 \\<and>\n               0 \\<le> v' \\<and> v' \\<le> 1999999) \\<and>\n           v < 4000000 \\<and>\n           v' < 4000000 \\<and>\n           s ''x'' = v + 1 \\<and> s' ''x'' = v' + 1) \\<and>\n       s ''x'' = 2000000 \\<and>\n       s' ''x'' = 2000000 \\<and>\n       s ''low'' = s ''high'' \\<and> s' ''low'' = s' ''high''\n 3. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and>\n          (\\<exists>n.\n              s ''x'' = int n \\<and>\n              s' ''x'' = int n \\<and>\n              0 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 1999999 \\<and>\n              0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999)) \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s')\n     SKIP SKIP ?Q\\<^sub>235\n 4. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 5. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 6. (\\<forall>s s'.\n        ?Q\\<^sub>135 s s' \\<or> ?Q\\<^sub>235 s s' \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial (\\<lambda>s s'. ?Q\\<^sub>135 s s' \\<or> ?Q\\<^sub>235 s s')", "apply(rule ir_While_backwards_both[where P=\"\\<lambda>n s s'.  s ''x'' = 2000000 + int n \\<and> s' ''x'' = 2000000 + int n \\<and> s ''x'' \\<ge> 2000000 \\<and> s ''x'' \\<le> 4000000 \\<and> s' ''x'' \\<ge> 2000000 \\<and> s' ''x'' \\<le> 4000000 \\<and> s ''low'' = s ''high'' \\<and> s' ''low'' = s' ''high'' \\<and> s ''high'' \\<noteq> s' ''high''\"])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n.\n       ir_hoare\n        (\\<lambda>s s'.\n            (s ''x'' = 2000000 + int n \\<and>\n             s' ''x'' = 2000000 + int n \\<and>\n             2000000 \\<le> s ''x'' \\<and>\n             s ''x'' \\<le> 4000000 \\<and>\n             2000000 \\<le> s' ''x'' \\<and>\n             s' ''x'' \\<le> 4000000 \\<and>\n             s ''low'' = s ''high'' \\<and>\n             s' ''low'' = s' ''high'' \\<and>\n             s ''high'' \\<noteq> s' ''high'') \\<and>\n            bval (Less (V ''x'') (N 4000000)) s \\<and>\n            bval (Less (V ''x'') (N 4000000)) s')\n        (''x'' ::= Plus (V ''x'') (N 1);;\n         IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n        (''x'' ::= Plus (V ''x'') (N 1);;\n         IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n        (\\<lambda>s s'.\n            s ''x'' = 2000000 + int (Suc n) \\<and>\n            s' ''x'' = 2000000 + int (Suc n) \\<and>\n            2000000 \\<le> s ''x'' \\<and>\n            s ''x'' \\<le> 4000000 \\<and>\n            2000000 \\<le> s' ''x'' \\<and>\n            s' ''x'' \\<le> 4000000 \\<and>\n            s ''low'' = s ''high'' \\<and>\n            s' ''low'' = s' ''high'' \\<and> s ''high'' \\<noteq> s' ''high'')\n 2. \\<And>s s'.\n       s ''x'' = 2000000 + int 0 \\<and>\n       s' ''x'' = 2000000 + int 0 \\<and>\n       2000000 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 4000000 \\<and>\n       2000000 \\<le> s' ''x'' \\<and>\n       s' ''x'' \\<le> 4000000 \\<and>\n       s ''low'' = s ''high'' \\<and>\n       s' ''low'' = s' ''high'' \\<and>\n       s ''high'' \\<noteq> s' ''high'' \\<Longrightarrow>\n       (\\<exists>v v'.\n           low_eq_strong (s(''low'' := v)) (s'(''low'' := v'))) \\<and>\n       (\\<exists>v v'.\n           (\\<exists>n.\n               v = int n \\<and>\n               v' = int n \\<and>\n               0 \\<le> v \\<and>\n               v \\<le> 1999999 \\<and>\n               0 \\<le> v' \\<and> v' \\<le> 1999999) \\<and>\n           v < 4000000 \\<and>\n           v' < 4000000 \\<and>\n           s ''x'' = v + 1 \\<and> s' ''x'' = v' + 1) \\<and>\n       s ''x'' = 2000000 \\<and>\n       s' ''x'' = 2000000 \\<and>\n       s ''low'' = s ''high'' \\<and> s' ''low'' = s' ''high''\n 3. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and>\n          (\\<exists>n.\n              s ''x'' = int n \\<and>\n              s' ''x'' = int n \\<and>\n              0 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 1999999 \\<and>\n              0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999)) \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s')\n     SKIP SKIP ?Q\\<^sub>235\n 4. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 5. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 6. (\\<forall>s s'.\n        (\\<exists>n.\n            (s ''x'' = 2000000 + int n \\<and>\n             s' ''x'' = 2000000 + int n \\<and>\n             2000000 \\<le> s ''x'' \\<and>\n             s ''x'' \\<le> 4000000 \\<and>\n             2000000 \\<le> s' ''x'' \\<and>\n             s' ''x'' \\<le> 4000000 \\<and>\n             s ''low'' = s ''high'' \\<and>\n             s' ''low'' = s' ''high'' \\<and>\n             s ''high'' \\<noteq> s' ''high'') \\<and>\n            \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n            \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n        ?Q\\<^sub>235 s s' \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial\n     (\\<lambda>s s'.\n         (\\<exists>n.\n             (s ''x'' = 2000000 + int n \\<and>\n              s' ''x'' = 2000000 + int n \\<and>\n              2000000 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 4000000 \\<and>\n              2000000 \\<le> s' ''x'' \\<and>\n              s' ''x'' \\<le> 4000000 \\<and>\n              s ''low'' = s ''high'' \\<and>\n              s' ''low'' = s' ''high'' \\<and>\n              s ''high'' \\<noteq> s' ''high'') \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n         ?Q\\<^sub>235 s s')", "apply(rule ir_Seq)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n.\n       ir_hoare\n        (\\<lambda>s s'.\n            (s ''x'' = 2000000 + int n \\<and>\n             s' ''x'' = 2000000 + int n \\<and>\n             2000000 \\<le> s ''x'' \\<and>\n             s ''x'' \\<le> 4000000 \\<and>\n             2000000 \\<le> s' ''x'' \\<and>\n             s' ''x'' \\<le> 4000000 \\<and>\n             s ''low'' = s ''high'' \\<and>\n             s' ''low'' = s' ''high'' \\<and>\n             s ''high'' \\<noteq> s' ''high'') \\<and>\n            bval (Less (V ''x'') (N 4000000)) s \\<and>\n            bval (Less (V ''x'') (N 4000000)) s')\n        (''x'' ::= Plus (V ''x'') (N 1)) (''x'' ::= Plus (V ''x'') (N 1))\n        (?Q57 n)\n 2. \\<And>n.\n       ir_hoare (?Q57 n)\n        (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n        (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n        (\\<lambda>s s'.\n            s ''x'' = 2000000 + int (Suc n) \\<and>\n            s' ''x'' = 2000000 + int (Suc n) \\<and>\n            2000000 \\<le> s ''x'' \\<and>\n            s ''x'' \\<le> 4000000 \\<and>\n            2000000 \\<le> s' ''x'' \\<and>\n            s' ''x'' \\<le> 4000000 \\<and>\n            s ''low'' = s ''high'' \\<and>\n            s' ''low'' = s' ''high'' \\<and> s ''high'' \\<noteq> s' ''high'')\n 3. \\<And>s s'.\n       s ''x'' = 2000000 + int 0 \\<and>\n       s' ''x'' = 2000000 + int 0 \\<and>\n       2000000 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 4000000 \\<and>\n       2000000 \\<le> s' ''x'' \\<and>\n       s' ''x'' \\<le> 4000000 \\<and>\n       s ''low'' = s ''high'' \\<and>\n       s' ''low'' = s' ''high'' \\<and>\n       s ''high'' \\<noteq> s' ''high'' \\<Longrightarrow>\n       (\\<exists>v v'.\n           low_eq_strong (s(''low'' := v)) (s'(''low'' := v'))) \\<and>\n       (\\<exists>v v'.\n           (\\<exists>n.\n               v = int n \\<and>\n               v' = int n \\<and>\n               0 \\<le> v \\<and>\n               v \\<le> 1999999 \\<and>\n               0 \\<le> v' \\<and> v' \\<le> 1999999) \\<and>\n           v < 4000000 \\<and>\n           v' < 4000000 \\<and>\n           s ''x'' = v + 1 \\<and> s' ''x'' = v' + 1) \\<and>\n       s ''x'' = 2000000 \\<and>\n       s' ''x'' = 2000000 \\<and>\n       s ''low'' = s ''high'' \\<and> s' ''low'' = s' ''high''\n 4. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and>\n          (\\<exists>n.\n              s ''x'' = int n \\<and>\n              s' ''x'' = int n \\<and>\n              0 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 1999999 \\<and>\n              0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999)) \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s')\n     SKIP SKIP ?Q\\<^sub>235\n 5. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 6. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 7. (\\<forall>s s'.\n        (\\<exists>n.\n            (s ''x'' = 2000000 + int n \\<and>\n             s' ''x'' = 2000000 + int n \\<and>\n             2000000 \\<le> s ''x'' \\<and>\n             s ''x'' \\<le> 4000000 \\<and>\n             2000000 \\<le> s' ''x'' \\<and>\n             s' ''x'' \\<le> 4000000 \\<and>\n             s ''low'' = s ''high'' \\<and>\n             s' ''low'' = s' ''high'' \\<and>\n             s ''high'' \\<noteq> s' ''high'') \\<and>\n            \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n            \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n        ?Q\\<^sub>235 s s' \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial\n     (\\<lambda>s s'.\n         (\\<exists>n.\n             (s ''x'' = 2000000 + int n \\<and>\n              s' ''x'' = 2000000 + int n \\<and>\n              2000000 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 4000000 \\<and>\n              2000000 \\<le> s' ''x'' \\<and>\n              s' ''x'' \\<le> 4000000 \\<and>\n              s ''low'' = s ''high'' \\<and>\n              s' ''low'' = s' ''high'' \\<and>\n              s ''high'' \\<noteq> s' ''high'') \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n         ?Q\\<^sub>235 s s')", "apply(rule ir_Assign_Assign)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n.\n       ir_hoare\n        (\\<lambda>t t'.\n            \\<exists>v v'.\n               (((t(''x'' := v)) ''x'' = 2000000 + int n \\<and>\n                 (t'(''x'' := v')) ''x'' = 2000000 + int n \\<and>\n                 2000000 \\<le> (t(''x'' := v)) ''x'' \\<and>\n                 (t(''x'' := v)) ''x'' \\<le> 4000000 \\<and>\n                 2000000 \\<le> (t'(''x'' := v')) ''x'' \\<and>\n                 (t'(''x'' := v')) ''x'' \\<le> 4000000 \\<and>\n                 (t(''x'' := v)) ''low'' = (t(''x'' := v)) ''high'' \\<and>\n                 (t'(''x'' := v')) ''low'' =\n                 (t'(''x'' := v')) ''high'' \\<and>\n                 (t(''x'' := v)) ''high'' \\<noteq>\n                 (t'(''x'' := v')) ''high'') \\<and>\n                bval (Less (V ''x'') (N 4000000)) (t(''x'' := v)) \\<and>\n                bval (Less (V ''x'') (N 4000000)) (t'(''x'' := v'))) \\<and>\n               t ''x'' = aval (Plus (V ''x'') (N 1)) (t(''x'' := v)) \\<and>\n               t' ''x'' = aval (Plus (V ''x'') (N 1)) (t'(''x'' := v')))\n        (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n        (IF BEq (V ''x'') (N 2000000) THEN ''low'' ::= V ''high'' ELSE SKIP)\n        (\\<lambda>s s'.\n            s ''x'' = 2000000 + int (Suc n) \\<and>\n            s' ''x'' = 2000000 + int (Suc n) \\<and>\n            2000000 \\<le> s ''x'' \\<and>\n            s ''x'' \\<le> 4000000 \\<and>\n            2000000 \\<le> s' ''x'' \\<and>\n            s' ''x'' \\<le> 4000000 \\<and>\n            s ''low'' = s ''high'' \\<and>\n            s' ''low'' = s' ''high'' \\<and> s ''high'' \\<noteq> s' ''high'')\n 2. \\<And>s s'.\n       s ''x'' = 2000000 + int 0 \\<and>\n       s' ''x'' = 2000000 + int 0 \\<and>\n       2000000 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 4000000 \\<and>\n       2000000 \\<le> s' ''x'' \\<and>\n       s' ''x'' \\<le> 4000000 \\<and>\n       s ''low'' = s ''high'' \\<and>\n       s' ''low'' = s' ''high'' \\<and>\n       s ''high'' \\<noteq> s' ''high'' \\<Longrightarrow>\n       (\\<exists>v v'.\n           low_eq_strong (s(''low'' := v)) (s'(''low'' := v'))) \\<and>\n       (\\<exists>v v'.\n           (\\<exists>n.\n               v = int n \\<and>\n               v' = int n \\<and>\n               0 \\<le> v \\<and>\n               v \\<le> 1999999 \\<and>\n               0 \\<le> v' \\<and> v' \\<le> 1999999) \\<and>\n           v < 4000000 \\<and>\n           v' < 4000000 \\<and>\n           s ''x'' = v + 1 \\<and> s' ''x'' = v' + 1) \\<and>\n       s ''x'' = 2000000 \\<and>\n       s' ''x'' = 2000000 \\<and>\n       s ''low'' = s ''high'' \\<and> s' ''low'' = s' ''high''\n 3. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and>\n          (\\<exists>n.\n              s ''x'' = int n \\<and>\n              s' ''x'' = int n \\<and>\n              0 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 1999999 \\<and>\n              0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999)) \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s')\n     SKIP SKIP ?Q\\<^sub>235\n 4. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 5. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 6. (\\<forall>s s'.\n        (\\<exists>n.\n            (s ''x'' = 2000000 + int n \\<and>\n             s' ''x'' = 2000000 + int n \\<and>\n             2000000 \\<le> s ''x'' \\<and>\n             s ''x'' \\<le> 4000000 \\<and>\n             2000000 \\<le> s' ''x'' \\<and>\n             s' ''x'' \\<le> 4000000 \\<and>\n             s ''low'' = s ''high'' \\<and>\n             s' ''low'' = s' ''high'' \\<and>\n             s ''high'' \\<noteq> s' ''high'') \\<and>\n            \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n            \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n        ?Q\\<^sub>235 s s' \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial\n     (\\<lambda>s s'.\n         (\\<exists>n.\n             (s ''x'' = 2000000 + int n \\<and>\n              s' ''x'' = 2000000 + int n \\<and>\n              2000000 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 4000000 \\<and>\n              2000000 \\<le> s' ''x'' \\<and>\n              s' ''x'' \\<le> 4000000 \\<and>\n              s ''low'' = s ''high'' \\<and>\n              s' ''low'' = s' ''high'' \\<and>\n              s ''high'' \\<noteq> s' ''high'') \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n         ?Q\\<^sub>235 s s')", "apply(rule ir_If_False_False)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n.\n       ir_hoare\n        (\\<lambda>s s'.\n            (\\<exists>v v'.\n                (((s(''x'' := v)) ''x'' = 2000000 + int n \\<and>\n                  (s'(''x'' := v')) ''x'' = 2000000 + int n \\<and>\n                  2000000 \\<le> (s(''x'' := v)) ''x'' \\<and>\n                  (s(''x'' := v)) ''x'' \\<le> 4000000 \\<and>\n                  2000000 \\<le> (s'(''x'' := v')) ''x'' \\<and>\n                  (s'(''x'' := v')) ''x'' \\<le> 4000000 \\<and>\n                  (s(''x'' := v)) ''low'' = (s(''x'' := v)) ''high'' \\<and>\n                  (s'(''x'' := v')) ''low'' =\n                  (s'(''x'' := v')) ''high'' \\<and>\n                  (s(''x'' := v)) ''high'' \\<noteq>\n                  (s'(''x'' := v')) ''high'') \\<and>\n                 bval (Less (V ''x'') (N 4000000)) (s(''x'' := v)) \\<and>\n                 bval (Less (V ''x'') (N 4000000)) (s'(''x'' := v'))) \\<and>\n                s ''x'' = aval (Plus (V ''x'') (N 1)) (s(''x'' := v)) \\<and>\n                s' ''x'' =\n                aval (Plus (V ''x'') (N 1)) (s'(''x'' := v'))) \\<and>\n            \\<not> bval (BEq (V ''x'') (N 2000000)) s \\<and>\n            \\<not> bval (BEq (V ''x'') (N 2000000)) s')\n        SKIP SKIP\n        (\\<lambda>t t'.\n            t ''x'' = 2000000 + int (Suc n) \\<and>\n            t' ''x'' = 2000000 + int (Suc n) \\<and>\n            2000000 \\<le> t ''x'' \\<and>\n            t ''x'' \\<le> 4000000 \\<and>\n            2000000 \\<le> t' ''x'' \\<and>\n            t' ''x'' \\<le> 4000000 \\<and>\n            t ''low'' = t ''high'' \\<and>\n            t' ''low'' = t' ''high'' \\<and> t ''high'' \\<noteq> t' ''high'')\n 2. \\<And>s s'.\n       s ''x'' = 2000000 + int 0 \\<and>\n       s' ''x'' = 2000000 + int 0 \\<and>\n       2000000 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 4000000 \\<and>\n       2000000 \\<le> s' ''x'' \\<and>\n       s' ''x'' \\<le> 4000000 \\<and>\n       s ''low'' = s ''high'' \\<and>\n       s' ''low'' = s' ''high'' \\<and>\n       s ''high'' \\<noteq> s' ''high'' \\<Longrightarrow>\n       (\\<exists>v v'.\n           low_eq_strong (s(''low'' := v)) (s'(''low'' := v'))) \\<and>\n       (\\<exists>v v'.\n           (\\<exists>n.\n               v = int n \\<and>\n               v' = int n \\<and>\n               0 \\<le> v \\<and>\n               v \\<le> 1999999 \\<and>\n               0 \\<le> v' \\<and> v' \\<le> 1999999) \\<and>\n           v < 4000000 \\<and>\n           v' < 4000000 \\<and>\n           s ''x'' = v + 1 \\<and> s' ''x'' = v' + 1) \\<and>\n       s ''x'' = 2000000 \\<and>\n       s' ''x'' = 2000000 \\<and>\n       s ''low'' = s ''high'' \\<and> s' ''low'' = s' ''high''\n 3. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and>\n          (\\<exists>n.\n              s ''x'' = int n \\<and>\n              s' ''x'' = int n \\<and>\n              0 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 1999999 \\<and>\n              0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999)) \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s')\n     SKIP SKIP ?Q\\<^sub>235\n 4. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 5. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 6. (\\<forall>s s'.\n        (\\<exists>n.\n            (s ''x'' = 2000000 + int n \\<and>\n             s' ''x'' = 2000000 + int n \\<and>\n             2000000 \\<le> s ''x'' \\<and>\n             s ''x'' \\<le> 4000000 \\<and>\n             2000000 \\<le> s' ''x'' \\<and>\n             s' ''x'' \\<le> 4000000 \\<and>\n             s ''low'' = s ''high'' \\<and>\n             s' ''low'' = s' ''high'' \\<and>\n             s ''high'' \\<noteq> s' ''high'') \\<and>\n            \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n            \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n        ?Q\\<^sub>235 s s' \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial\n     (\\<lambda>s s'.\n         (\\<exists>n.\n             (s ''x'' = 2000000 + int n \\<and>\n              s' ''x'' = 2000000 + int n \\<and>\n              2000000 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 4000000 \\<and>\n              2000000 \\<le> s' ''x'' \\<and>\n              s' ''x'' \\<le> 4000000 \\<and>\n              s ''low'' = s ''high'' \\<and>\n              s' ''low'' = s' ''high'' \\<and>\n              s ''high'' \\<noteq> s' ''high'') \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n         ?Q\\<^sub>235 s s')", "apply fastforce"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>s s'.\n       s ''x'' = 2000000 + int 0 \\<and>\n       s' ''x'' = 2000000 + int 0 \\<and>\n       2000000 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 4000000 \\<and>\n       2000000 \\<le> s' ''x'' \\<and>\n       s' ''x'' \\<le> 4000000 \\<and>\n       s ''low'' = s ''high'' \\<and>\n       s' ''low'' = s' ''high'' \\<and>\n       s ''high'' \\<noteq> s' ''high'' \\<Longrightarrow>\n       (\\<exists>v v'.\n           low_eq_strong (s(''low'' := v)) (s'(''low'' := v'))) \\<and>\n       (\\<exists>v v'.\n           (\\<exists>n.\n               v = int n \\<and>\n               v' = int n \\<and>\n               0 \\<le> v \\<and>\n               v \\<le> 1999999 \\<and>\n               0 \\<le> v' \\<and> v' \\<le> 1999999) \\<and>\n           v < 4000000 \\<and>\n           v' < 4000000 \\<and>\n           s ''x'' = v + 1 \\<and> s' ''x'' = v' + 1) \\<and>\n       s ''x'' = 2000000 \\<and>\n       s' ''x'' = 2000000 \\<and>\n       s ''low'' = s ''high'' \\<and> s' ''low'' = s' ''high''\n 2. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and>\n          (\\<exists>n.\n              s ''x'' = int n \\<and>\n              s' ''x'' = int n \\<and>\n              0 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 1999999 \\<and>\n              0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999)) \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s')\n     SKIP SKIP ?Q\\<^sub>235\n 3. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 4. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 5. (\\<forall>s s'.\n        (\\<exists>n.\n            (s ''x'' = 2000000 + int n \\<and>\n             s' ''x'' = 2000000 + int n \\<and>\n             2000000 \\<le> s ''x'' \\<and>\n             s ''x'' \\<le> 4000000 \\<and>\n             2000000 \\<le> s' ''x'' \\<and>\n             s' ''x'' \\<le> 4000000 \\<and>\n             s ''low'' = s ''high'' \\<and>\n             s' ''low'' = s' ''high'' \\<and>\n             s ''high'' \\<noteq> s' ''high'') \\<and>\n            \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n            \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n        ?Q\\<^sub>235 s s' \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial\n     (\\<lambda>s s'.\n         (\\<exists>n.\n             (s ''x'' = 2000000 + int n \\<and>\n              s' ''x'' = 2000000 + int n \\<and>\n              2000000 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 4000000 \\<and>\n              2000000 \\<le> s' ''x'' \\<and>\n              s' ''x'' \\<le> 4000000 \\<and>\n              s ''low'' = s ''high'' \\<and>\n              s' ''low'' = s' ''high'' \\<and>\n              s ''high'' \\<noteq> s' ''high'') \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n         ?Q\\<^sub>235 s s')", "apply (fastforce simp: low_eq_strong_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. ir_hoare\n     (\\<lambda>s s'.\n         (low_eq_strong s s' \\<and>\n          (\\<exists>n.\n              s ''x'' = int n \\<and>\n              s' ''x'' = int n \\<and>\n              0 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 1999999 \\<and>\n              0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 1999999)) \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n         \\<not> bval (Less (V ''x'') (N 4000000)) s')\n     SKIP SKIP ?Q\\<^sub>235\n 2. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 3. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 4. (\\<forall>s s'.\n        (\\<exists>n.\n            (s ''x'' = 2000000 + int n \\<and>\n             s' ''x'' = 2000000 + int n \\<and>\n             2000000 \\<le> s ''x'' \\<and>\n             s ''x'' \\<le> 4000000 \\<and>\n             2000000 \\<le> s' ''x'' \\<and>\n             s' ''x'' \\<le> 4000000 \\<and>\n             s ''low'' = s ''high'' \\<and>\n             s' ''low'' = s' ''high'' \\<and>\n             s ''high'' \\<noteq> s' ''high'') \\<and>\n            \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n            \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n        ?Q\\<^sub>235 s s' \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial\n     (\\<lambda>s s'.\n         (\\<exists>n.\n             (s ''x'' = 2000000 + int n \\<and>\n              s' ''x'' = 2000000 + int n \\<and>\n              2000000 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 4000000 \\<and>\n              2000000 \\<le> s' ''x'' \\<and>\n              s' ''x'' \\<le> 4000000 \\<and>\n              s ''low'' = s ''high'' \\<and>\n              s' ''low'' = s' ''high'' \\<and>\n              s ''high'' \\<noteq> s' ''high'') \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n         ?Q\\<^sub>235 s s')", "apply fastforce"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s s'.\n       low_eq_strong s s' \\<and>\n       s ''x'' = int 0 \\<and>\n       s' ''x'' = int 0 \\<and>\n       0 \\<le> s ''x'' \\<and>\n       s ''x'' \\<le> 2000000 - 1 \\<and>\n       0 \\<le> s' ''x'' \\<and> s' ''x'' \\<le> 2000000 - 1 \\<Longrightarrow>\n       low_eq_strong s s' \\<and> s ''x'' = 0 \\<and> s' ''x'' = 0\n 2. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 3. (\\<forall>s s'.\n        (\\<exists>n.\n            (s ''x'' = 2000000 + int n \\<and>\n             s' ''x'' = 2000000 + int n \\<and>\n             2000000 \\<le> s ''x'' \\<and>\n             s ''x'' \\<le> 4000000 \\<and>\n             2000000 \\<le> s' ''x'' \\<and>\n             s' ''x'' \\<le> 4000000 \\<and>\n             s ''low'' = s ''high'' \\<and>\n             s' ''low'' = s' ''high'' \\<and>\n             s ''high'' \\<noteq> s' ''high'') \\<and>\n            \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n            \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n        WHILE ?x51.89 s s' DO ?x52.89 s s' =\n        IF ?x41.89 s s' THEN ?x42.89 s s'\n        ELSE ?x43.89 s s' \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial\n     (\\<lambda>s s'.\n         (\\<exists>n.\n             (s ''x'' = 2000000 + int n \\<and>\n              s' ''x'' = 2000000 + int n \\<and>\n              2000000 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 4000000 \\<and>\n              2000000 \\<le> s' ''x'' \\<and>\n              s' ''x'' \\<le> 4000000 \\<and>\n              s ''low'' = s ''high'' \\<and>\n              s' ''low'' = s' ''high'' \\<and>\n              s ''high'' \\<noteq> s' ''high'') \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n         WHILE ?x51.89 s s' DO ?x52.89 s s' =\n         IF ?x41.89 s s' THEN ?x42.89 s s' ELSE ?x43.89 s s')", "apply(fastforce simp: low_eq_strong_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s'. low_eq_strong s s' \\<Longrightarrow> low_eq s s'\n 2. (\\<forall>s s'.\n        (\\<exists>n.\n            (s ''x'' = 2000000 + int n \\<and>\n             s' ''x'' = 2000000 + int n \\<and>\n             2000000 \\<le> s ''x'' \\<and>\n             s ''x'' \\<le> 4000000 \\<and>\n             2000000 \\<le> s' ''x'' \\<and>\n             s' ''x'' \\<le> 4000000 \\<and>\n             s ''low'' = s ''high'' \\<and>\n             s' ''low'' = s' ''high'' \\<and>\n             s ''high'' \\<noteq> s' ''high'') \\<and>\n            \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n            \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n        WHILE ?x51.89 s s' DO ?x52.89 s s' =\n        IF ?x41.89 s s' THEN ?x42.89 s s'\n        ELSE ?x43.89 s s' \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial\n     (\\<lambda>s s'.\n         (\\<exists>n.\n             (s ''x'' = 2000000 + int n \\<and>\n              s' ''x'' = 2000000 + int n \\<and>\n              2000000 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 4000000 \\<and>\n              2000000 \\<le> s' ''x'' \\<and>\n              s' ''x'' \\<le> 4000000 \\<and>\n              s ''low'' = s ''high'' \\<and>\n              s' ''low'' = s' ''high'' \\<and>\n              s ''high'' \\<noteq> s' ''high'') \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n         WHILE ?x51.89 s s' DO ?x52.89 s s' =\n         IF ?x41.89 s s' THEN ?x42.89 s s' ELSE ?x43.89 s s')", "apply(fastforce simp: low_eq_strong_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>s s'.\n        (\\<exists>n.\n            (s ''x'' = 2000000 + int n \\<and>\n             s' ''x'' = 2000000 + int n \\<and>\n             2000000 \\<le> s ''x'' \\<and>\n             s ''x'' \\<le> 4000000 \\<and>\n             2000000 \\<le> s' ''x'' \\<and>\n             s' ''x'' \\<le> 4000000 \\<and>\n             s ''low'' = s ''high'' \\<and>\n             s' ''low'' = s' ''high'' \\<and>\n             s ''high'' \\<noteq> s' ''high'') \\<and>\n            \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n            \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n        WHILE ?x51.89 s s' DO ?x52.89 s s' =\n        IF ?x41.89 s s' THEN ?x42.89 s s'\n        ELSE ?x43.89 s s' \\<longrightarrow>\n        s ''low'' \\<noteq> s' ''low'') \\<and>\n    nontrivial\n     (\\<lambda>s s'.\n         (\\<exists>n.\n             (s ''x'' = 2000000 + int n \\<and>\n              s' ''x'' = 2000000 + int n \\<and>\n              2000000 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 4000000 \\<and>\n              2000000 \\<le> s' ''x'' \\<and>\n              s' ''x'' \\<le> 4000000 \\<and>\n              s ''low'' = s ''high'' \\<and>\n              s' ''low'' = s' ''high'' \\<and>\n              s ''high'' \\<noteq> s' ''high'') \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n         WHILE ?x51.89 s s' DO ?x52.89 s s' =\n         IF ?x41.89 s s' THEN ?x42.89 s s' ELSE ?x43.89 s s')", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>s s'.\n       (\\<exists>n.\n           (s ''x'' = 2000000 + int n \\<and>\n            s' ''x'' = 2000000 + int n \\<and>\n            2000000 \\<le> s ''x'' \\<and>\n            s ''x'' \\<le> 4000000 \\<and>\n            2000000 \\<le> s' ''x'' \\<and>\n            s' ''x'' \\<le> 4000000 \\<and>\n            s ''low'' = s ''high'' \\<and>\n            s' ''low'' = s' ''high'' \\<and>\n            s ''high'' \\<noteq> s' ''high'') \\<and>\n           \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n           \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n       WHILE ?x51.89 s s' DO ?x52.89 s s' =\n       IF ?x41.89 s s' THEN ?x42.89 s s' ELSE ?x43.89 s s' \\<longrightarrow>\n       s ''low'' \\<noteq> s' ''low''\n 2. nontrivial\n     (\\<lambda>s s'.\n         (\\<exists>n.\n             (s ''x'' = 2000000 + int n \\<and>\n              s' ''x'' = 2000000 + int n \\<and>\n              2000000 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 4000000 \\<and>\n              2000000 \\<le> s' ''x'' \\<and>\n              s' ''x'' \\<le> 4000000 \\<and>\n              s ''low'' = s ''high'' \\<and>\n              s' ''low'' = s' ''high'' \\<and>\n              s ''high'' \\<noteq> s' ''high'') \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n         WHILE ?x51.89 s s' DO ?x52.89 s s' =\n         IF ?x41.89 s s' THEN ?x42.89 s s' ELSE ?x43.89 s s')", "apply(clarsimp simp: low_eq_strong_def split: if_splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nontrivial\n     (\\<lambda>s s'.\n         (\\<exists>n.\n             (s ''x'' = 2000000 + int n \\<and>\n              s' ''x'' = 2000000 + int n \\<and>\n              2000000 \\<le> s ''x'' \\<and>\n              s ''x'' \\<le> 4000000 \\<and>\n              2000000 \\<le> s' ''x'' \\<and>\n              s' ''x'' \\<le> 4000000 \\<and>\n              s ''low'' = s ''high'' \\<and>\n              s' ''low'' = s' ''high'' \\<and>\n              s ''high'' \\<noteq> s' ''high'') \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s \\<and>\n             \\<not> bval (Less (V ''x'') (N 4000000)) s') \\<or>\n         WHILE ?x51.89 s s' DO ?x52.89 s s' =\n         IF ?x41.89 s s' THEN ?x42.89 s s' ELSE ?x43.89 s s')", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. nontrivial\n     (\\<lambda>s s'.\n         \\<exists>n.\n            s ''x'' = 2000000 + int n \\<and>\n            s' ''x'' = 2000000 + int n \\<and>\n            2000000 \\<le> s ''x'' \\<and>\n            s ''x'' \\<le> 4000000 \\<and>\n            2000000 \\<le> s' ''x'' \\<and>\n            s' ''x'' \\<le> 4000000 \\<and>\n            s ''low'' = s ''high'' \\<and>\n            s' ''low'' = s' ''high'' \\<and>\n            s ''high'' \\<noteq> s' ''high'' \\<and>\n            \\<not> s ''x'' < 4000000 \\<and> \\<not> s' ''x'' < 4000000)", "(* ugh having to manually do constraint solving here... *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nontrivial\n     (\\<lambda>s s'.\n         \\<exists>n.\n            s ''x'' = 2000000 + int n \\<and>\n            s' ''x'' = 2000000 + int n \\<and>\n            2000000 \\<le> s ''x'' \\<and>\n            s ''x'' \\<le> 4000000 \\<and>\n            2000000 \\<le> s' ''x'' \\<and>\n            s' ''x'' \\<le> 4000000 \\<and>\n            s ''low'' = s ''high'' \\<and>\n            s' ''low'' = s' ''high'' \\<and>\n            s ''high'' \\<noteq> s' ''high'' \\<and>\n            \\<not> s ''x'' < 4000000 \\<and> \\<not> s' ''x'' < 4000000)", "apply(clarsimp simp: low_eq_strong_def nontrivial_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t t' n.\n       t ''x'' = 2000000 + int n \\<and>\n       t' ''x'' = 2000000 + int n \\<and>\n       2000000 \\<le> t ''x'' \\<and>\n       t ''x'' \\<le> 4000000 \\<and>\n       2000000 \\<le> t' ''x'' \\<and>\n       t' ''x'' \\<le> 4000000 \\<and>\n       t ''low'' = t ''high'' \\<and>\n       t' ''low'' = t' ''high'' \\<and>\n       t ''high'' \\<noteq> t' ''high'' \\<and>\n       \\<not> t ''x'' < 4000000 \\<and> \\<not> t' ''x'' < 4000000", "apply(rule_tac x=\"\\<lambda>v. if v = ''x'' then 4000000 else if v = ''high'' then 1 else if v = ''n'' then 2000000 else if v = ''nondet'' then -1 else if v = ''low'' then 1 else undefined\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t' n.\n       (if ''x'' = ''x'' then 4000000\n        else if ''x'' = ''high'' then 1\n             else if ''x'' = ''n'' then 2000000\n                  else if ''x'' = ''nondet'' then - 1\n                       else if ''x'' = ''low'' then 1 else undefined) =\n       2000000 + int n \\<and>\n       t' ''x'' = 2000000 + int n \\<and>\n       2000000\n       \\<le> (if ''x'' = ''x'' then 4000000\n              else if ''x'' = ''high'' then 1\n                   else if ''x'' = ''n'' then 2000000\n                        else if ''x'' = ''nondet'' then - 1\n                             else if ''x'' = ''low'' then 1\n                                  else undefined) \\<and>\n       (if ''x'' = ''x'' then 4000000\n        else if ''x'' = ''high'' then 1\n             else if ''x'' = ''n'' then 2000000\n                  else if ''x'' = ''nondet'' then - 1\n                       else if ''x'' = ''low'' then 1 else undefined)\n       \\<le> 4000000 \\<and>\n       2000000 \\<le> t' ''x'' \\<and>\n       t' ''x'' \\<le> 4000000 \\<and>\n       (if ''low'' = ''x'' then 4000000\n        else if ''low'' = ''high'' then 1\n             else if ''low'' = ''n'' then 2000000\n                  else if ''low'' = ''nondet'' then - 1\n                       else if ''low'' = ''low'' then 1 else undefined) =\n       (if ''high'' = ''x'' then 4000000\n        else if ''high'' = ''high'' then 1\n             else if ''high'' = ''n'' then 2000000\n                  else if ''high'' = ''nondet'' then - 1\n                       else if ''high'' = ''low'' then 1\n                            else undefined) \\<and>\n       t' ''low'' = t' ''high'' \\<and>\n       (if ''high'' = ''x'' then 4000000\n        else if ''high'' = ''high'' then 1\n             else if ''high'' = ''n'' then 2000000\n                  else if ''high'' = ''nondet'' then - 1\n                       else if ''high'' = ''low'' then 1\n                            else undefined) \\<noteq>\n       t' ''high'' \\<and>\n       \\<not> (if ''x'' = ''x'' then 4000000\n               else if ''x'' = ''high'' then 1\n                    else if ''x'' = ''n'' then 2000000\n                         else if ''x'' = ''nondet'' then - 1\n                              else if ''x'' = ''low'' then 1 else undefined)\n              < 4000000 \\<and>\n       \\<not> t' ''x'' < 4000000", "apply(rule_tac x=\"\\<lambda>v. if v = ''x'' then 4000000 else if v = ''high'' then 0 else if v = ''n'' then 2000000 else if v = ''nondet'' then -1 else if v = ''low'' then 0 else undefined\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       (if ''x'' = ''x'' then 4000000\n        else if ''x'' = ''high'' then 1\n             else if ''x'' = ''n'' then 2000000\n                  else if ''x'' = ''nondet'' then - 1\n                       else if ''x'' = ''low'' then 1 else undefined) =\n       2000000 + int n \\<and>\n       (if ''x'' = ''x'' then 4000000\n        else if ''x'' = ''high'' then 0\n             else if ''x'' = ''n'' then 2000000\n                  else if ''x'' = ''nondet'' then - 1\n                       else if ''x'' = ''low'' then 0 else undefined) =\n       2000000 + int n \\<and>\n       2000000\n       \\<le> (if ''x'' = ''x'' then 4000000\n              else if ''x'' = ''high'' then 1\n                   else if ''x'' = ''n'' then 2000000\n                        else if ''x'' = ''nondet'' then - 1\n                             else if ''x'' = ''low'' then 1\n                                  else undefined) \\<and>\n       (if ''x'' = ''x'' then 4000000\n        else if ''x'' = ''high'' then 1\n             else if ''x'' = ''n'' then 2000000\n                  else if ''x'' = ''nondet'' then - 1\n                       else if ''x'' = ''low'' then 1 else undefined)\n       \\<le> 4000000 \\<and>\n       2000000\n       \\<le> (if ''x'' = ''x'' then 4000000\n              else if ''x'' = ''high'' then 0\n                   else if ''x'' = ''n'' then 2000000\n                        else if ''x'' = ''nondet'' then - 1\n                             else if ''x'' = ''low'' then 0\n                                  else undefined) \\<and>\n       (if ''x'' = ''x'' then 4000000\n        else if ''x'' = ''high'' then 0\n             else if ''x'' = ''n'' then 2000000\n                  else if ''x'' = ''nondet'' then - 1\n                       else if ''x'' = ''low'' then 0 else undefined)\n       \\<le> 4000000 \\<and>\n       (if ''low'' = ''x'' then 4000000\n        else if ''low'' = ''high'' then 1\n             else if ''low'' = ''n'' then 2000000\n                  else if ''low'' = ''nondet'' then - 1\n                       else if ''low'' = ''low'' then 1 else undefined) =\n       (if ''high'' = ''x'' then 4000000\n        else if ''high'' = ''high'' then 1\n             else if ''high'' = ''n'' then 2000000\n                  else if ''high'' = ''nondet'' then - 1\n                       else if ''high'' = ''low'' then 1\n                            else undefined) \\<and>\n       (if ''low'' = ''x'' then 4000000\n        else if ''low'' = ''high'' then 0\n             else if ''low'' = ''n'' then 2000000\n                  else if ''low'' = ''nondet'' then - 1\n                       else if ''low'' = ''low'' then 0 else undefined) =\n       (if ''high'' = ''x'' then 4000000\n        else if ''high'' = ''high'' then 0\n             else if ''high'' = ''n'' then 2000000\n                  else if ''high'' = ''nondet'' then - 1\n                       else if ''high'' = ''low'' then 0\n                            else undefined) \\<and>\n       (if ''high'' = ''x'' then 4000000\n        else if ''high'' = ''high'' then 1\n             else if ''high'' = ''n'' then 2000000\n                  else if ''high'' = ''nondet'' then - 1\n                       else if ''high'' = ''low'' then 1\n                            else undefined) \\<noteq>\n       (if ''high'' = ''x'' then 4000000\n        else if ''high'' = ''high'' then 0\n             else if ''high'' = ''n'' then 2000000\n                  else if ''high'' = ''nondet'' then - 1\n                       else if ''high'' = ''low'' then 0\n                            else undefined) \\<and>\n       \\<not> (if ''x'' = ''x'' then 4000000\n               else if ''x'' = ''high'' then 1\n                    else if ''x'' = ''n'' then 2000000\n                         else if ''x'' = ''nondet'' then - 1\n                              else if ''x'' = ''low'' then 1 else undefined)\n              < 4000000 \\<and>\n       \\<not> (if ''x'' = ''x'' then 4000000\n               else if ''x'' = ''high'' then 0\n                    else if ''x'' = ''n'' then 2000000\n                         else if ''x'' = ''nondet'' then - 1\n                              else if ''x'' = ''low'' then 0 else undefined)\n              < 4000000", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}