{"file_name": "/home/qj213/afp-2021-10-22/thys/LambdaMu/Substitution.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LambdaMu", "problem_names": ["lemma ctxt_app_subst:\n  shows \"ctxt_subst E (ctxt_subst F t) = ctxt_subst (E . F) t\"", "lemma liftLM_comm: \n  \"liftL_trm (liftM_trm t n) m = liftM_trm (liftL_trm t m) n\"\n  \"liftL_cmd (liftM_cmd c n) m = liftM_cmd (liftL_cmd c m) n\"", "lemma liftLM_comm_ctxt:\n  \"liftL_ctxt (liftM_ctxt E n) m = liftM_ctxt (liftL_ctxt E m) n\"", "lemma liftMM_comm:\n  \"n\\<ge>m \\<Longrightarrow> liftM_trm (liftM_trm t n) m = liftM_trm (liftM_trm t m) (Suc n)\"\n  \"n\\<ge>m \\<Longrightarrow> liftM_cmd (liftM_cmd c n) m = liftM_cmd (liftM_cmd c m) (Suc n)\"", "lemma liftMM_comm_ctxt:\n  \"liftM_ctxt (liftM_ctxt E n) 0 = liftM_ctxt (liftM_ctxt E 0) (n+1)\"", "lemma liftM_struct_subst: \n  \"liftM_trm t i[i=i F]\\<^sup>T = liftM_trm t i\"\n  \"liftM_cmd c i[i=i F]\\<^sup>C = liftM_cmd c i\"", "lemma liftM_ctxt_struct_subst:\n  \"(ctxt_subst (liftM_ctxt E i) t)[i=i F]\\<^sup>T = ctxt_subst (liftM_ctxt E i) (t[i=i F]\\<^sup>T)\""], "translations": [["", "lemma ctxt_app_subst:\n  shows \"ctxt_subst E (ctxt_subst F t) = ctxt_subst (E . F) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ctxt_subst E (ctxt_subst F t) = ctxt_subst (E . F) t", "by (induction E, auto)"], ["", "text\\<open>The structural substitution is based on Geuvers and al.~\\cite{DBLP:journals/apal/GeuversKM13}.\\<close>"], ["", "primrec\n  struct_subst_trm :: \"[trm, nat, nat, ctxt] \\<Rightarrow> trm\"  (\"_[_=_ _]\\<^sup>T\" [300, 0, 0, 0] 300) and\n  struct_subst_cmd ::  \"[cmd, nat, nat, ctxt] \\<Rightarrow> cmd\" (\"_[_=_ _]\\<^sup>C\" [300, 0, 0, 0] 300)\nwhere\n  struct_LVar: \"(`i)[j=k E]\\<^sup>T = (`i)\" |\n  struct_Lbd: \"(\\<lambda> T : t)[j=k E]\\<^sup>T = (\\<lambda> T : (t[j=k (liftL_ctxt E 0)]\\<^sup>T))\" |\n  struct_App: \"(t\\<degree>s)[j=k E]\\<^sup>T = (t[j=k E]\\<^sup>T)\\<degree>(s[j=k E]\\<^sup>T)\" |\n  struct_Mu: \"(\\<mu> T : c)[j=k E]\\<^sup>T = \\<mu> T : (c[(j+1)=(k+1) (liftM_ctxt E 0)]\\<^sup>C)\" |\n  struct_MVar: \"(<i> t)[j=k E]\\<^sup>C = \n      (if i=j then (<k> (ctxt_subst E (t[j=k E]\\<^sup>T))) \n       else (if j<i \\<and> i\\<le>k then (<i-1> (t[j=k E]\\<^sup>T))\n             else (if k\\<le>i \\<and> i<j then (<i+1> (t[j=k E]\\<^sup>T))\n                   else (<i> (t[j=k E]\\<^sup>T)))))\""], ["", "text\\<open>Lifting of lambda and mu variables commute with each other\\<close>"], ["", "lemma liftLM_comm: \n  \"liftL_trm (liftM_trm t n) m = liftM_trm (liftL_trm t m) n\"\n  \"liftL_cmd (liftM_cmd c n) m = liftM_cmd (liftL_cmd c m) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftL_trm (liftM_trm t n) m = liftM_trm (liftL_trm t m) n &&&\n    liftL_cmd (liftM_cmd c n) m = liftM_cmd (liftL_cmd c m) n", "by(induct t and c arbitrary: n m and n m) auto"], ["", "lemma liftLM_comm_ctxt:\n  \"liftL_ctxt (liftM_ctxt E n) m = liftM_ctxt (liftL_ctxt E m) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftL_ctxt (liftM_ctxt E n) m = liftM_ctxt (liftL_ctxt E m) n", "by(induct E arbitrary: n m, auto simp add: liftLM_comm)"], ["", "text\\<open>Lifting of $\\mu$-variables (almost) commutes.\\<close>"], ["", "lemma liftMM_comm:\n  \"n\\<ge>m \\<Longrightarrow> liftM_trm (liftM_trm t n) m = liftM_trm (liftM_trm t m) (Suc n)\"\n  \"n\\<ge>m \\<Longrightarrow> liftM_cmd (liftM_cmd c n) m = liftM_cmd (liftM_cmd c m) (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (m \\<le> n \\<Longrightarrow>\n     liftM_trm (liftM_trm t n) m = liftM_trm (liftM_trm t m) (Suc n)) &&&\n    (m \\<le> n \\<Longrightarrow>\n     liftM_cmd (liftM_cmd c n) m = liftM_cmd (liftM_cmd c m) (Suc n))", "by(induct t and c arbitrary: n m and n m) auto"], ["", "lemma liftMM_comm_ctxt:\n  \"liftM_ctxt (liftM_ctxt E n) 0 = liftM_ctxt (liftM_ctxt E 0) (n+1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftM_ctxt (liftM_ctxt E n) 0 = liftM_ctxt (liftM_ctxt E 0) (n + 1)", "by(induct E arbitrary: n, auto simp add: liftMM_comm)"], ["", "text\\<open>If a $\\mu$ variable $i$ doesn't occur in a term or a context, \nthen these remain the same after structural substitution of variable $i$.\\<close>"], ["", "lemma liftM_struct_subst: \n  \"liftM_trm t i[i=i F]\\<^sup>T = liftM_trm t i\"\n  \"liftM_cmd c i[i=i F]\\<^sup>C = liftM_cmd c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftM_trm t i[i=i F]\\<^sup>T = liftM_trm t i &&&\n    liftM_cmd c i[i=i F]\\<^sup>C = liftM_cmd c i", "by(induct t and c arbitrary: i F and i F) auto"], ["", "lemma liftM_ctxt_struct_subst:\n  \"(ctxt_subst (liftM_ctxt E i) t)[i=i F]\\<^sup>T = ctxt_subst (liftM_ctxt E i) (t[i=i F]\\<^sup>T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ctxt_subst (liftM_ctxt E i) t[i=i F]\\<^sup>T =\n    ctxt_subst (liftM_ctxt E i) (t[i=i F]\\<^sup>T)", "by(induct E arbitrary: i t F; force simp add: liftM_struct_subst)"], ["", "end"]]}