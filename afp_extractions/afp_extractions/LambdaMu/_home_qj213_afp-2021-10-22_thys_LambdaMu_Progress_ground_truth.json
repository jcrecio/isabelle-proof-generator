{"file_name": "/home/qj213/afp-2021-10-22/thys/LambdaMu/Progress.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LambdaMu", "problem_names": ["lemma progress':\n  \"\\<Gamma>, \\<Delta> \\<turnstile>\\<^sub>T t : T \\<Longrightarrow> lambda_closed t \\<Longrightarrow> (\\<forall> s. \\<not>(t \\<longlonglongrightarrow> s)) \\<Longrightarrow> is_nf t\"\n  \"\\<Gamma>, \\<Delta> \\<turnstile>\\<^sub>C c \\<Longrightarrow> lambda_closedC c  \\<Longrightarrow> (\\<forall> \\<beta> t. c = (<\\<beta>> t) \\<longrightarrow> (\\<forall> d. \\<not>(t \\<longlonglongrightarrow> d)) \\<longrightarrow> is_nf t)\"", "theorem progress:\n  assumes \"\\<Gamma>, \\<Delta> \\<turnstile>\\<^sub>T t : T\" \"lambda_closed t\"\n  shows   \"is_nf t \\<or> (\\<exists> s. t \\<longlonglongrightarrow> s)\""], "translations": [["", "lemma progress':\n  \"\\<Gamma>, \\<Delta> \\<turnstile>\\<^sub>T t : T \\<Longrightarrow> lambda_closed t \\<Longrightarrow> (\\<forall> s. \\<not>(t \\<longlonglongrightarrow> s)) \\<Longrightarrow> is_nf t\"\n  \"\\<Gamma>, \\<Delta> \\<turnstile>\\<^sub>C c \\<Longrightarrow> lambda_closedC c  \\<Longrightarrow> (\\<forall> \\<beta> t. c = (<\\<beta>> t) \\<longrightarrow> (\\<forall> d. \\<not>(t \\<longlonglongrightarrow> d)) \\<longrightarrow> is_nf t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<Gamma> , \\<Delta> \\<turnstile>\\<^sub>T t : T;\n      lambda_closed t;\n      \\<forall>s. \\<not> t \\<longlonglongrightarrow> s\\<rbrakk>\n     \\<Longrightarrow> is_nf t) &&&\n    (\\<lbrakk>\\<Gamma> , \\<Delta> \\<turnstile>\\<^sub>C c;\n      lambda_closedC c\\<rbrakk>\n     \\<Longrightarrow> \\<forall>\\<beta> t.\n                          c = <\\<beta>>t \\<longrightarrow>\n                          (\\<forall>d.\n                              \\<not> t \\<longlonglongrightarrow>\n                                     d) \\<longrightarrow>\n                          is_nf t)", "proof (induct rule: typing_trm_typing_cmd.inducts)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> x T \\<Delta>.\n       \\<lbrakk>\\<Gamma> x = T; lambda_closed (`x);\n        \\<forall>s. \\<not> `x \\<longlonglongrightarrow> s\\<rbrakk>\n       \\<Longrightarrow> is_nf (`x)\n 2. \\<And>\\<Gamma> \\<Delta> t T1 T2 s.\n       \\<lbrakk>\\<Gamma> , \\<Delta> \\<turnstile>\\<^sub>T t : T1 \\<rightarrow>\n                       T2;\n        \\<lbrakk>lambda_closed t;\n         \\<forall>s. \\<not> t \\<longlonglongrightarrow> s\\<rbrakk>\n        \\<Longrightarrow> is_nf t;\n        \\<Gamma> , \\<Delta> \\<turnstile>\\<^sub>T s : T1;\n        \\<lbrakk>lambda_closed s;\n         \\<forall>sa. \\<not> s \\<longlonglongrightarrow> sa\\<rbrakk>\n        \\<Longrightarrow> is_nf s;\n        lambda_closed (t \\<degree> s);\n        \\<forall>sa.\n           \\<not> t \\<degree> s \\<longlonglongrightarrow> sa\\<rbrakk>\n       \\<Longrightarrow> is_nf (t \\<degree> s)\n 3. \\<And>\\<Gamma> T1 \\<Delta> t T2.\n       \\<lbrakk>\\<Gamma>\\<langle>0:T1\\<rangle> , \\<Delta> \\<turnstile>\\<^sub>T t : T2;\n        \\<lbrakk>lambda_closed t;\n         \\<forall>s. \\<not> t \\<longlonglongrightarrow> s\\<rbrakk>\n        \\<Longrightarrow> is_nf t;\n        lambda_closed (\\<lambda>T1:t);\n        \\<forall>s.\n           \\<not> \\<lambda>T1:t \\<longlonglongrightarrow> s\\<rbrakk>\n       \\<Longrightarrow> is_nf (\\<lambda>T1:t)\n 4. \\<And>\\<Gamma> \\<Delta> T c.\n       \\<lbrakk>\\<Gamma> , \\<Delta>\\<langle>0:T\\<rangle> \\<turnstile>\\<^sub>C c;\n        lambda_closedC c \\<Longrightarrow>\n        \\<forall>\\<beta> t.\n           c = <\\<beta>>t \\<longrightarrow>\n           (\\<forall>d.\n               \\<not> t \\<longlonglongrightarrow> d) \\<longrightarrow>\n           is_nf t;\n        lambda_closed (\\<mu>T:c);\n        \\<forall>s. \\<not> \\<mu>T:c \\<longlonglongrightarrow> s\\<rbrakk>\n       \\<Longrightarrow> is_nf (\\<mu>T:c)\n 5. \\<And>\\<Gamma> \\<Delta> t T x.\n       \\<lbrakk>\\<Gamma> , \\<Delta> \\<turnstile>\\<^sub>T t : T;\n        \\<lbrakk>lambda_closed t;\n         \\<forall>s. \\<not> t \\<longlonglongrightarrow> s\\<rbrakk>\n        \\<Longrightarrow> is_nf t;\n        \\<Delta> x = T; lambda_closedC (<x>t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<beta> ta.\n                            <x>t = <\\<beta>>ta \\<longrightarrow>\n                            (\\<forall>d.\n                                \\<not> ta \\<longlonglongrightarrow>\n d) \\<longrightarrow>\n                            is_nf ta", "case (app \\<Gamma> \\<Delta> t T1 T2 s)"], ["proof (state)\nthis:\n  \\<Gamma> , \\<Delta> \\<turnstile>\\<^sub>T t : T1 \\<rightarrow> T2\n  \\<lbrakk>lambda_closed t;\n   \\<forall>s. \\<not> t \\<longlonglongrightarrow> s\\<rbrakk>\n  \\<Longrightarrow> is_nf t\n  \\<Gamma> , \\<Delta> \\<turnstile>\\<^sub>T s : T1\n  \\<lbrakk>lambda_closed s;\n   \\<forall>sa. \\<not> s \\<longlonglongrightarrow> sa\\<rbrakk>\n  \\<Longrightarrow> is_nf s\n  lambda_closed (t \\<degree> s)\n  \\<forall>sa. \\<not> t \\<degree> s \\<longlonglongrightarrow> sa\n\ngoal (5 subgoals):\n 1. \\<And>\\<Gamma> x T \\<Delta>.\n       \\<lbrakk>\\<Gamma> x = T; lambda_closed (`x);\n        \\<forall>s. \\<not> `x \\<longlonglongrightarrow> s\\<rbrakk>\n       \\<Longrightarrow> is_nf (`x)\n 2. \\<And>\\<Gamma> \\<Delta> t T1 T2 s.\n       \\<lbrakk>\\<Gamma> , \\<Delta> \\<turnstile>\\<^sub>T t : T1 \\<rightarrow>\n                       T2;\n        \\<lbrakk>lambda_closed t;\n         \\<forall>s. \\<not> t \\<longlonglongrightarrow> s\\<rbrakk>\n        \\<Longrightarrow> is_nf t;\n        \\<Gamma> , \\<Delta> \\<turnstile>\\<^sub>T s : T1;\n        \\<lbrakk>lambda_closed s;\n         \\<forall>sa. \\<not> s \\<longlonglongrightarrow> sa\\<rbrakk>\n        \\<Longrightarrow> is_nf s;\n        lambda_closed (t \\<degree> s);\n        \\<forall>sa.\n           \\<not> t \\<degree> s \\<longlonglongrightarrow> sa\\<rbrakk>\n       \\<Longrightarrow> is_nf (t \\<degree> s)\n 3. \\<And>\\<Gamma> T1 \\<Delta> t T2.\n       \\<lbrakk>\\<Gamma>\\<langle>0:T1\\<rangle> , \\<Delta> \\<turnstile>\\<^sub>T t : T2;\n        \\<lbrakk>lambda_closed t;\n         \\<forall>s. \\<not> t \\<longlonglongrightarrow> s\\<rbrakk>\n        \\<Longrightarrow> is_nf t;\n        lambda_closed (\\<lambda>T1:t);\n        \\<forall>s.\n           \\<not> \\<lambda>T1:t \\<longlonglongrightarrow> s\\<rbrakk>\n       \\<Longrightarrow> is_nf (\\<lambda>T1:t)\n 4. \\<And>\\<Gamma> \\<Delta> T c.\n       \\<lbrakk>\\<Gamma> , \\<Delta>\\<langle>0:T\\<rangle> \\<turnstile>\\<^sub>C c;\n        lambda_closedC c \\<Longrightarrow>\n        \\<forall>\\<beta> t.\n           c = <\\<beta>>t \\<longrightarrow>\n           (\\<forall>d.\n               \\<not> t \\<longlonglongrightarrow> d) \\<longrightarrow>\n           is_nf t;\n        lambda_closed (\\<mu>T:c);\n        \\<forall>s. \\<not> \\<mu>T:c \\<longlonglongrightarrow> s\\<rbrakk>\n       \\<Longrightarrow> is_nf (\\<mu>T:c)\n 5. \\<And>\\<Gamma> \\<Delta> t T x.\n       \\<lbrakk>\\<Gamma> , \\<Delta> \\<turnstile>\\<^sub>T t : T;\n        \\<lbrakk>lambda_closed t;\n         \\<forall>s. \\<not> t \\<longlonglongrightarrow> s\\<rbrakk>\n        \\<Longrightarrow> is_nf t;\n        \\<Delta> x = T; lambda_closedC (<x>t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<beta> ta.\n                            <x>t = <\\<beta>>ta \\<longrightarrow>\n                            (\\<forall>d.\n                                \\<not> ta \\<longlonglongrightarrow>\n d) \\<longrightarrow>\n                            is_nf ta", "then"], ["proof (chain)\npicking this:\n  \\<Gamma> , \\<Delta> \\<turnstile>\\<^sub>T t : T1 \\<rightarrow> T2\n  \\<lbrakk>lambda_closed t;\n   \\<forall>s. \\<not> t \\<longlonglongrightarrow> s\\<rbrakk>\n  \\<Longrightarrow> is_nf t\n  \\<Gamma> , \\<Delta> \\<turnstile>\\<^sub>T s : T1\n  \\<lbrakk>lambda_closed s;\n   \\<forall>sa. \\<not> s \\<longlonglongrightarrow> sa\\<rbrakk>\n  \\<Longrightarrow> is_nf s\n  lambda_closed (t \\<degree> s)\n  \\<forall>sa. \\<not> t \\<degree> s \\<longlonglongrightarrow> sa", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> , \\<Delta> \\<turnstile>\\<^sub>T t : T1 \\<rightarrow> T2\n  \\<lbrakk>lambda_closed t;\n   \\<forall>s. \\<not> t \\<longlonglongrightarrow> s\\<rbrakk>\n  \\<Longrightarrow> is_nf t\n  \\<Gamma> , \\<Delta> \\<turnstile>\\<^sub>T s : T1\n  \\<lbrakk>lambda_closed s;\n   \\<forall>sa. \\<not> s \\<longlonglongrightarrow> sa\\<rbrakk>\n  \\<Longrightarrow> is_nf s\n  lambda_closed (t \\<degree> s)\n  \\<forall>sa. \\<not> t \\<degree> s \\<longlonglongrightarrow> sa\n\ngoal (1 subgoal):\n 1. is_nf (t \\<degree> s)", "by -(erule type_arrow_elim; force)"], ["proof (state)\nthis:\n  is_nf (t \\<degree> s)\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> x T \\<Delta>.\n       \\<lbrakk>\\<Gamma> x = T; lambda_closed (`x);\n        \\<forall>s. \\<not> `x \\<longlonglongrightarrow> s\\<rbrakk>\n       \\<Longrightarrow> is_nf (`x)\n 2. \\<And>\\<Gamma> T1 \\<Delta> t T2.\n       \\<lbrakk>\\<Gamma>\\<langle>0:T1\\<rangle> , \\<Delta> \\<turnstile>\\<^sub>T t : T2;\n        \\<lbrakk>lambda_closed t;\n         \\<forall>s. \\<not> t \\<longlonglongrightarrow> s\\<rbrakk>\n        \\<Longrightarrow> is_nf t;\n        lambda_closed (\\<lambda>T1:t);\n        \\<forall>s.\n           \\<not> \\<lambda>T1:t \\<longlonglongrightarrow> s\\<rbrakk>\n       \\<Longrightarrow> is_nf (\\<lambda>T1:t)\n 3. \\<And>\\<Gamma> \\<Delta> T c.\n       \\<lbrakk>\\<Gamma> , \\<Delta>\\<langle>0:T\\<rangle> \\<turnstile>\\<^sub>C c;\n        lambda_closedC c \\<Longrightarrow>\n        \\<forall>\\<beta> t.\n           c = <\\<beta>>t \\<longrightarrow>\n           (\\<forall>d.\n               \\<not> t \\<longlonglongrightarrow> d) \\<longrightarrow>\n           is_nf t;\n        lambda_closed (\\<mu>T:c);\n        \\<forall>s. \\<not> \\<mu>T:c \\<longlonglongrightarrow> s\\<rbrakk>\n       \\<Longrightarrow> is_nf (\\<mu>T:c)\n 4. \\<And>\\<Gamma> \\<Delta> t T x.\n       \\<lbrakk>\\<Gamma> , \\<Delta> \\<turnstile>\\<^sub>T t : T;\n        \\<lbrakk>lambda_closed t;\n         \\<forall>s. \\<not> t \\<longlonglongrightarrow> s\\<rbrakk>\n        \\<Longrightarrow> is_nf t;\n        \\<Delta> x = T; lambda_closedC (<x>t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<beta> ta.\n                            <x>t = <\\<beta>>ta \\<longrightarrow>\n                            (\\<forall>d.\n                                \\<not> ta \\<longlonglongrightarrow>\n d) \\<longrightarrow>\n                            is_nf ta", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> x T \\<Delta>.\n       \\<lbrakk>\\<Gamma> x = T; lambda_closed (`x);\n        \\<forall>s. \\<not> `x \\<longlonglongrightarrow> s\\<rbrakk>\n       \\<Longrightarrow> is_nf (`x)\n 2. \\<And>\\<Gamma> T1 \\<Delta> t T2.\n       \\<lbrakk>\\<Gamma>\\<langle>0:T1\\<rangle> , \\<Delta> \\<turnstile>\\<^sub>T t : T2;\n        \\<lbrakk>lambda_closed t;\n         \\<forall>s. \\<not> t \\<longlonglongrightarrow> s\\<rbrakk>\n        \\<Longrightarrow> is_nf t;\n        lambda_closed (\\<lambda>T1:t);\n        \\<forall>s.\n           \\<not> \\<lambda>T1:t \\<longlonglongrightarrow> s\\<rbrakk>\n       \\<Longrightarrow> is_nf (\\<lambda>T1:t)\n 3. \\<And>\\<Gamma> \\<Delta> T c.\n       \\<lbrakk>\\<Gamma> , \\<Delta>\\<langle>0:T\\<rangle> \\<turnstile>\\<^sub>C c;\n        lambda_closedC c \\<Longrightarrow>\n        \\<forall>\\<beta> t.\n           c = <\\<beta>>t \\<longrightarrow>\n           (\\<forall>d.\n               \\<not> t \\<longlonglongrightarrow> d) \\<longrightarrow>\n           is_nf t;\n        lambda_closed (\\<mu>T:c);\n        \\<forall>s. \\<not> \\<mu>T:c \\<longlonglongrightarrow> s\\<rbrakk>\n       \\<Longrightarrow> is_nf (\\<mu>T:c)\n 4. \\<And>\\<Gamma> \\<Delta> t T x.\n       \\<lbrakk>\\<Gamma> , \\<Delta> \\<turnstile>\\<^sub>T t : T;\n        \\<lbrakk>lambda_closed t;\n         \\<forall>s. \\<not> t \\<longlonglongrightarrow> s\\<rbrakk>\n        \\<Longrightarrow> is_nf t;\n        \\<Delta> x = T; lambda_closedC (<x>t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<beta> ta.\n                            <x>t = <\\<beta>>ta \\<longrightarrow>\n                            (\\<forall>d.\n                                \\<not> ta \\<longlonglongrightarrow>\n d) \\<longrightarrow>\n                            is_nf ta", "case (activate \\<Gamma> \\<Delta> T c)"], ["proof (state)\nthis:\n  \\<Gamma> , \\<Delta>\\<langle>0:T\\<rangle> \\<turnstile>\\<^sub>C c\n  lambda_closedC c \\<Longrightarrow>\n  \\<forall>\\<beta> t.\n     c = <\\<beta>>t \\<longrightarrow>\n     (\\<forall>d. \\<not> t \\<longlonglongrightarrow> d) \\<longrightarrow>\n     is_nf t\n  lambda_closed (\\<mu>T:c)\n  \\<forall>s. \\<not> \\<mu>T:c \\<longlonglongrightarrow> s\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> x T \\<Delta>.\n       \\<lbrakk>\\<Gamma> x = T; lambda_closed (`x);\n        \\<forall>s. \\<not> `x \\<longlonglongrightarrow> s\\<rbrakk>\n       \\<Longrightarrow> is_nf (`x)\n 2. \\<And>\\<Gamma> T1 \\<Delta> t T2.\n       \\<lbrakk>\\<Gamma>\\<langle>0:T1\\<rangle> , \\<Delta> \\<turnstile>\\<^sub>T t : T2;\n        \\<lbrakk>lambda_closed t;\n         \\<forall>s. \\<not> t \\<longlonglongrightarrow> s\\<rbrakk>\n        \\<Longrightarrow> is_nf t;\n        lambda_closed (\\<lambda>T1:t);\n        \\<forall>s.\n           \\<not> \\<lambda>T1:t \\<longlonglongrightarrow> s\\<rbrakk>\n       \\<Longrightarrow> is_nf (\\<lambda>T1:t)\n 3. \\<And>\\<Gamma> \\<Delta> T c.\n       \\<lbrakk>\\<Gamma> , \\<Delta>\\<langle>0:T\\<rangle> \\<turnstile>\\<^sub>C c;\n        lambda_closedC c \\<Longrightarrow>\n        \\<forall>\\<beta> t.\n           c = <\\<beta>>t \\<longrightarrow>\n           (\\<forall>d.\n               \\<not> t \\<longlonglongrightarrow> d) \\<longrightarrow>\n           is_nf t;\n        lambda_closed (\\<mu>T:c);\n        \\<forall>s. \\<not> \\<mu>T:c \\<longlonglongrightarrow> s\\<rbrakk>\n       \\<Longrightarrow> is_nf (\\<mu>T:c)\n 4. \\<And>\\<Gamma> \\<Delta> t T x.\n       \\<lbrakk>\\<Gamma> , \\<Delta> \\<turnstile>\\<^sub>T t : T;\n        \\<lbrakk>lambda_closed t;\n         \\<forall>s. \\<not> t \\<longlonglongrightarrow> s\\<rbrakk>\n        \\<Longrightarrow> is_nf t;\n        \\<Delta> x = T; lambda_closedC (<x>t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<beta> ta.\n                            <x>t = <\\<beta>>ta \\<longrightarrow>\n                            (\\<forall>d.\n                                \\<not> ta \\<longlonglongrightarrow>\n d) \\<longrightarrow>\n                            is_nf ta", "then"], ["proof (chain)\npicking this:\n  \\<Gamma> , \\<Delta>\\<langle>0:T\\<rangle> \\<turnstile>\\<^sub>C c\n  lambda_closedC c \\<Longrightarrow>\n  \\<forall>\\<beta> t.\n     c = <\\<beta>>t \\<longrightarrow>\n     (\\<forall>d. \\<not> t \\<longlonglongrightarrow> d) \\<longrightarrow>\n     is_nf t\n  lambda_closed (\\<mu>T:c)\n  \\<forall>s. \\<not> \\<mu>T:c \\<longlonglongrightarrow> s", "show ?case"], ["proof (prove)\nusing this:\n  \\<Gamma> , \\<Delta>\\<langle>0:T\\<rangle> \\<turnstile>\\<^sub>C c\n  lambda_closedC c \\<Longrightarrow>\n  \\<forall>\\<beta> t.\n     c = <\\<beta>>t \\<longrightarrow>\n     (\\<forall>d. \\<not> t \\<longlonglongrightarrow> d) \\<longrightarrow>\n     is_nf t\n  lambda_closed (\\<mu>T:c)\n  \\<forall>s. \\<not> \\<mu>T:c \\<longlonglongrightarrow> s\n\ngoal (1 subgoal):\n 1. is_nf (\\<mu>T:c)", "proof(cases c)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>\\<Gamma> , \\<Delta>\\<langle>0:T\\<rangle> \\<turnstile>\\<^sub>C c;\n        lambda_closedC c \\<Longrightarrow>\n        \\<forall>\\<beta> t.\n           c = <\\<beta>>t \\<longrightarrow>\n           (\\<forall>d.\n               \\<not> t \\<longlonglongrightarrow> d) \\<longrightarrow>\n           is_nf t;\n        lambda_closed (\\<mu>T:c);\n        \\<forall>s. \\<not> \\<mu>T:c \\<longlonglongrightarrow> s;\n        c = <x1>x2\\<rbrakk>\n       \\<Longrightarrow> is_nf (\\<mu>T:c)", "case (MVar \\<alpha> t)"], ["proof (state)\nthis:\n  c = <\\<alpha>>t\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>\\<Gamma> , \\<Delta>\\<langle>0:T\\<rangle> \\<turnstile>\\<^sub>C c;\n        lambda_closedC c \\<Longrightarrow>\n        \\<forall>\\<beta> t.\n           c = <\\<beta>>t \\<longrightarrow>\n           (\\<forall>d.\n               \\<not> t \\<longlonglongrightarrow> d) \\<longrightarrow>\n           is_nf t;\n        lambda_closed (\\<mu>T:c);\n        \\<forall>s. \\<not> \\<mu>T:c \\<longlonglongrightarrow> s;\n        c = <x1>x2\\<rbrakk>\n       \\<Longrightarrow> is_nf (\\<mu>T:c)", "then"], ["proof (chain)\npicking this:\n  c = <\\<alpha>>t", "show ?thesis"], ["proof (prove)\nusing this:\n  c = <\\<alpha>>t\n\ngoal (1 subgoal):\n 1. is_nf (\\<mu>T:c)", "using activate"], ["proof (prove)\nusing this:\n  c = <\\<alpha>>t\n  \\<Gamma> , \\<Delta>\\<langle>0:T\\<rangle> \\<turnstile>\\<^sub>C c\n  lambda_closedC c \\<Longrightarrow>\n  \\<forall>\\<beta> t.\n     c = <\\<beta>>t \\<longrightarrow>\n     (\\<forall>d. \\<not> t \\<longlonglongrightarrow> d) \\<longrightarrow>\n     is_nf t\n  lambda_closed (\\<mu>T:c)\n  \\<forall>s. \\<not> \\<mu>T:c \\<longlonglongrightarrow> s\n\ngoal (1 subgoal):\n 1. is_nf (\\<mu>T:c)", "by (case_tac t; force)"], ["proof (state)\nthis:\n  is_nf (\\<mu>T:c)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_nf (\\<mu>T:c)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> x T \\<Delta>.\n       \\<lbrakk>\\<Gamma> x = T; lambda_closed (`x);\n        \\<forall>s. \\<not> `x \\<longlonglongrightarrow> s\\<rbrakk>\n       \\<Longrightarrow> is_nf (`x)\n 2. \\<And>\\<Gamma> T1 \\<Delta> t T2.\n       \\<lbrakk>\\<Gamma>\\<langle>0:T1\\<rangle> , \\<Delta> \\<turnstile>\\<^sub>T t : T2;\n        \\<lbrakk>lambda_closed t;\n         \\<forall>s. \\<not> t \\<longlonglongrightarrow> s\\<rbrakk>\n        \\<Longrightarrow> is_nf t;\n        lambda_closed (\\<lambda>T1:t);\n        \\<forall>s.\n           \\<not> \\<lambda>T1:t \\<longlonglongrightarrow> s\\<rbrakk>\n       \\<Longrightarrow> is_nf (\\<lambda>T1:t)\n 3. \\<And>\\<Gamma> \\<Delta> t T x.\n       \\<lbrakk>\\<Gamma> , \\<Delta> \\<turnstile>\\<^sub>T t : T;\n        \\<lbrakk>lambda_closed t;\n         \\<forall>s. \\<not> t \\<longlonglongrightarrow> s\\<rbrakk>\n        \\<Longrightarrow> is_nf t;\n        \\<Delta> x = T; lambda_closedC (<x>t)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>\\<beta> ta.\n                            <x>t = <\\<beta>>ta \\<longrightarrow>\n                            (\\<forall>d.\n                                \\<not> ta \\<longlonglongrightarrow>\n d) \\<longrightarrow>\n                            is_nf ta", "qed force+"], ["", "theorem progress:\n  assumes \"\\<Gamma>, \\<Delta> \\<turnstile>\\<^sub>T t : T\" \"lambda_closed t\"\n  shows   \"is_nf t \\<or> (\\<exists> s. t \\<longlonglongrightarrow> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_nf t \\<or> (\\<exists>s. t \\<longlonglongrightarrow> s)", "using assms"], ["proof (prove)\nusing this:\n  \\<Gamma> , \\<Delta> \\<turnstile>\\<^sub>T t : T\n  lambda_closed t\n\ngoal (1 subgoal):\n 1. is_nf t \\<or> (\\<exists>s. t \\<longlonglongrightarrow> s)", "by (fastforce intro: progress')"], ["", "end"]]}