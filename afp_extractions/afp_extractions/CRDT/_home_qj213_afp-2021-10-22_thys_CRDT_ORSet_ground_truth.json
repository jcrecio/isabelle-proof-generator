{"file_name": "/home/qj213/afp-2021-10-22/thys/CRDT/ORSet.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CRDT", "problem_names": ["lemma (in orset) add_add_commute:\n  shows \"\\<langle>Add i1 e1\\<rangle> \\<rhd> \\<langle>Add i2 e2\\<rangle> = \\<langle>Add i2 e2\\<rangle> \\<rhd> \\<langle>Add i1 e1\\<rangle>\"", "lemma (in orset) add_rem_commute:\n  assumes \"i \\<notin> is\"\n  shows \"\\<langle>Add i e1\\<rangle> \\<rhd> \\<langle>Rem is e2\\<rangle> = \\<langle>Rem is e2\\<rangle> \\<rhd> \\<langle>Add i e1\\<rangle>\"", "lemma (in orset) apply_operations_never_fails:\n  assumes \"xs prefix of i\"\n  shows \"apply_operations xs \\<noteq> None\"", "lemma (in orset) add_id_valid:\n  assumes \"xs prefix of j\"\n    and \"Deliver (i1, Add i2 e) \\<in> set xs\"\n  shows \"i1 = i2\"", "lemma (in orset) [simp]:\n  shows \"added_ids [] e = []\"", "lemma (in orset) [simp]:\n  shows \"added_ids (xs @ ys) e = added_ids xs e @ added_ids ys e\"", "lemma (in orset) added_ids_Broadcast_collapse [simp]:\n  shows \"added_ids ([Broadcast e]) e' = []\"", "lemma (in orset) added_ids_Deliver_Rem_collapse [simp]:\n  shows \"added_ids ([Deliver (i, Rem is e)]) e' = []\"", "lemma (in orset) added_ids_Deliver_Add_diff_collapse [simp]:\n  shows \"e \\<noteq> e' \\<Longrightarrow> added_ids ([Deliver (i, Add j e)]) e' = []\"", "lemma (in orset) added_ids_Deliver_Add_same_collapse [simp]:\n  shows \"added_ids ([Deliver (i, Add j e)]) e = [j]\"", "lemma (in orset) added_id_not_in_set:\n  assumes \"i1 \\<notin> set (added_ids [Deliver (i, Add i2 e)] e)\"\n  shows \"i1 \\<noteq> i2\"", "lemma (in orset) apply_operations_added_ids:\n  assumes \"es prefix of j\"\n    and \"apply_operations es = Some f\"\n  shows \"f x \\<subseteq> set (added_ids es x)\"", "lemma (in orset) Deliver_added_ids:\n  assumes \"xs prefix of j\"\n    and \"i \\<in> set (added_ids xs e)\"\n  shows \"Deliver (i, Add i e) \\<in> set xs\"", "lemma (in orset) Broadcast_Deliver_prefix_closed:\n  assumes \"xs @ [Broadcast (r, Rem ix e)] prefix of j\"\n    and \"i \\<in> ix\"\n  shows \"Deliver (i, Add i e) \\<in> set xs\"", "lemma (in orset) Broadcast_Deliver_prefix_closed2:\n  assumes \"xs prefix of j\"\n    and \"Broadcast (r, Rem ix e) \\<in> set xs\"\n    and \"i \\<in> ix\"\n  shows \"Deliver (i, Add i e) \\<in> set xs\"", "lemma (in orset) concurrent_add_remove_independent_technical:\n  assumes \"i \\<in> is\"\n    and \"xs prefix of j\"\n    and \"(i, Add i e) \\<in> set (node_deliver_messages xs)\" and \"(ir, Rem is e) \\<in> set (node_deliver_messages xs)\"\n  shows \"hb (i, Add i e) (ir, Rem is e)\"", "lemma (in orset) Deliver_Add_same_id_same_message:\n  assumes \"Deliver (i, Add i e1) \\<in> set (history j)\" and \"Deliver (i, Add i e2) \\<in> set (history j)\"\n  shows \"e1 = e2\"", "lemma (in orset) ids_imply_messages_same:\n  assumes \"i \\<in> is\"\n    and \"xs prefix of j\"\n    and \"(i, Add i e1) \\<in> set (node_deliver_messages xs)\" and \"(ir, Rem is e2) \\<in> set (node_deliver_messages xs)\"\n  shows \"e1 = e2\"", "lemma (in orset) rem_rem_commute:\n  shows \"\\<langle>Rem i1 e1\\<rangle> \\<rhd> \\<langle>Rem i2 e2\\<rangle> = \\<langle>Rem i2 e2\\<rangle> \\<rhd> \\<langle>Rem i1 e1\\<rangle>\"", "lemma (in orset) concurrent_operations_commute:\n  assumes \"xs prefix of i\"\n  shows \"hb.concurrent_ops_commute (node_deliver_messages xs)\"", "theorem (in orset) convergence:\n  assumes \"set (node_deliver_messages xs) = set (node_deliver_messages ys)\"\n      and \"xs prefix of i\" and \"ys prefix of j\"\n    shows \"apply_operations xs = apply_operations ys\""], "translations": [["", "lemma (in orset) add_add_commute:\n  shows \"\\<langle>Add i1 e1\\<rangle> \\<rhd> \\<langle>Add i2 e2\\<rangle> = \\<langle>Add i2 e2\\<rangle> \\<rhd> \\<langle>Add i1 e1\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>Add i1 e1\\<rangle> \\<rhd> \\<langle>Add i2 e2\\<rangle> =\n    \\<langle>Add i2 e2\\<rangle> \\<rhd> \\<langle>Add i1 e1\\<rangle>", "by(auto simp add: interpret_op_def op_elem_def kleisli_def, fastforce)"], ["", "lemma (in orset) add_rem_commute:\n  assumes \"i \\<notin> is\"\n  shows \"\\<langle>Add i e1\\<rangle> \\<rhd> \\<langle>Rem is e2\\<rangle> = \\<langle>Rem is e2\\<rangle> \\<rhd> \\<langle>Add i e1\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>Add i e1\\<rangle> \\<rhd> \\<langle>Rem is e2\\<rangle> =\n    \\<langle>Rem is e2\\<rangle> \\<rhd> \\<langle>Add i e1\\<rangle>", "using assms"], ["proof (prove)\nusing this:\n  i \\<notin> is\n\ngoal (1 subgoal):\n 1. \\<langle>Add i e1\\<rangle> \\<rhd> \\<langle>Rem is e2\\<rangle> =\n    \\<langle>Rem is e2\\<rangle> \\<rhd> \\<langle>Add i e1\\<rangle>", "by(auto simp add: interpret_op_def kleisli_def op_elem_def, fastforce)"], ["", "lemma (in orset) apply_operations_never_fails:\n  assumes \"xs prefix of i\"\n  shows \"apply_operations xs \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apply_operations xs \\<noteq> None", "using assms"], ["proof (prove)\nusing this:\n  xs prefix of i\n\ngoal (1 subgoal):\n 1. apply_operations xs \\<noteq> None", "proof(induction xs rule: rev_induct, clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "case (snoc x xs)"], ["proof (state)\nthis:\n  xs prefix of i \\<Longrightarrow> apply_operations xs \\<noteq> None\n  xs @ [x] prefix of i\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "thus ?case"], ["proof (prove)\nusing this:\n  xs prefix of i \\<Longrightarrow> apply_operations xs \\<noteq> None\n  xs @ [x] prefix of i\n\ngoal (1 subgoal):\n 1. apply_operations (xs @ [x]) \\<noteq> None", "proof (cases x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i; x = Broadcast x1\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None\n 2. \\<And>x2.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i; x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "case (Broadcast e)"], ["proof (state)\nthis:\n  x = Broadcast e\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i; x = Broadcast x1\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None\n 2. \\<And>x2.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i; x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "thus ?thesis"], ["proof (prove)\nusing this:\n  x = Broadcast e\n\ngoal (1 subgoal):\n 1. apply_operations (xs @ [x]) \\<noteq> None", "using snoc"], ["proof (prove)\nusing this:\n  x = Broadcast e\n  xs prefix of i \\<Longrightarrow> apply_operations xs \\<noteq> None\n  xs @ [x] prefix of i\n\ngoal (1 subgoal):\n 1. apply_operations (xs @ [x]) \\<noteq> None", "by force"], ["proof (state)\nthis:\n  apply_operations (xs @ [x]) \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i; x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i; x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "case (Deliver e)"], ["proof (state)\nthis:\n  x = Deliver e\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i; x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "thus ?thesis"], ["proof (prove)\nusing this:\n  x = Deliver e\n\ngoal (1 subgoal):\n 1. apply_operations (xs @ [x]) \\<noteq> None", "using snoc"], ["proof (prove)\nusing this:\n  x = Deliver e\n  xs prefix of i \\<Longrightarrow> apply_operations xs \\<noteq> None\n  xs @ [x] prefix of i\n\ngoal (1 subgoal):\n 1. apply_operations (xs @ [x]) \\<noteq> None", "by (clarsimp, metis interpret_op_def interp_msg_def bind.bind_lunit prefix_of_appendD)"], ["proof (state)\nthis:\n  apply_operations (xs @ [x]) \\<noteq> None\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  apply_operations (xs @ [x]) \\<noteq> None\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in orset) add_id_valid:\n  assumes \"xs prefix of j\"\n    and \"Deliver (i1, Add i2 e) \\<in> set xs\"\n  shows \"i1 = i2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 = i2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i1 = i2", "have \"\\<exists>s. valid_behaviours s (i1, Add i2 e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s. valid_behaviours s (i1, Add i2 e)", "using assms deliver_in_prefix_is_valid"], ["proof (prove)\nusing this:\n  xs prefix of j\n  Deliver (i1, Add i2 e) \\<in> set xs\n  \\<lbrakk>?xs prefix of ?i; Deliver ?m \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>state. valid_behaviours state ?m\n\ngoal (1 subgoal):\n 1. \\<exists>s. valid_behaviours s (i1, Add i2 e)", "by blast"], ["proof (state)\nthis:\n  \\<exists>s. valid_behaviours s (i1, Add i2 e)\n\ngoal (1 subgoal):\n 1. i1 = i2", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>s. valid_behaviours s (i1, Add i2 e)\n\ngoal (1 subgoal):\n 1. i1 = i2", "by(simp add: valid_behaviours_def)"], ["proof (state)\nthis:\n  i1 = i2\n\ngoal:\nNo subgoals!", "qed"], ["", "definition (in orset) added_ids :: \"('id \\<times> ('id, 'b) operation) event list \\<Rightarrow> 'b \\<Rightarrow> 'id list\" where\n  \"added_ids es p \\<equiv> List.map_filter (\\<lambda>x. case x of Deliver (i, Add j e) \\<Rightarrow> if e = p then Some j else None | _ \\<Rightarrow> None) es\""], ["", "lemma (in orset) [simp]:\n  shows \"added_ids [] e = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_ids [] e = []", "by (auto simp: added_ids_def map_filter_def)"], ["", "lemma (in orset) [simp]:\n  shows \"added_ids (xs @ ys) e = added_ids xs e @ added_ids ys e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_ids (xs @ ys) e = added_ids xs e @ added_ids ys e", "by (auto simp: added_ids_def map_filter_append)"], ["", "lemma (in orset) added_ids_Broadcast_collapse [simp]:\n  shows \"added_ids ([Broadcast e]) e' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_ids [Broadcast e] e' = []", "by (auto simp: added_ids_def map_filter_append map_filter_def)"], ["", "lemma (in orset) added_ids_Deliver_Rem_collapse [simp]:\n  shows \"added_ids ([Deliver (i, Rem is e)]) e' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_ids [Deliver (i, Rem is e)] e' = []", "by (auto simp: added_ids_def map_filter_append map_filter_def)"], ["", "lemma (in orset) added_ids_Deliver_Add_diff_collapse [simp]:\n  shows \"e \\<noteq> e' \\<Longrightarrow> added_ids ([Deliver (i, Add j e)]) e' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<noteq> e' \\<Longrightarrow> added_ids [Deliver (i, Add j e)] e' = []", "by (auto simp: added_ids_def map_filter_append map_filter_def)"], ["", "lemma (in orset) added_ids_Deliver_Add_same_collapse [simp]:\n  shows \"added_ids ([Deliver (i, Add j e)]) e = [j]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. added_ids [Deliver (i, Add j e)] e = [j]", "by (auto simp: added_ids_def map_filter_append map_filter_def)"], ["", "lemma (in orset) added_id_not_in_set:\n  assumes \"i1 \\<notin> set (added_ids [Deliver (i, Add i2 e)] e)\"\n  shows \"i1 \\<noteq> i2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 \\<noteq> i2", "using assms"], ["proof (prove)\nusing this:\n  i1 \\<notin> set (added_ids [Deliver (i, Add i2 e)] e)\n\ngoal (1 subgoal):\n 1. i1 \\<noteq> i2", "by simp"], ["", "lemma (in orset) apply_operations_added_ids:\n  assumes \"es prefix of j\"\n    and \"apply_operations es = Some f\"\n  shows \"f x \\<subseteq> set (added_ids es x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<subseteq> set (added_ids es x)", "using assms"], ["proof (prove)\nusing this:\n  es prefix of j\n  apply_operations es = Some f\n\ngoal (1 subgoal):\n 1. f x \\<subseteq> set (added_ids es x)", "proof (induct es arbitrary: f rule: rev_induct, force)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa xs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>xs prefix of j;\n                    apply_operations xs = Some f\\<rbrakk>\n                   \\<Longrightarrow> f x \\<subseteq> set (added_ids xs x);\n        xs @ [xa] prefix of j;\n        apply_operations (xs @ [xa]) = Some f\\<rbrakk>\n       \\<Longrightarrow> f x \\<subseteq> set (added_ids (xs @ [xa]) x)", "case (snoc x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>xs prefix of j; apply_operations xs = Some ?f2\\<rbrakk>\n  \\<Longrightarrow> ?f2 x \\<subseteq> set (added_ids xs x)\n  xs @ [x] prefix of j\n  apply_operations (xs @ [x]) = Some f\n\ngoal (1 subgoal):\n 1. \\<And>xa xs f.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>xs prefix of j;\n                    apply_operations xs = Some f\\<rbrakk>\n                   \\<Longrightarrow> f x \\<subseteq> set (added_ids xs x);\n        xs @ [xa] prefix of j;\n        apply_operations (xs @ [xa]) = Some f\\<rbrakk>\n       \\<Longrightarrow> f x \\<subseteq> set (added_ids (xs @ [xa]) x)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>xs prefix of j; apply_operations xs = Some ?f2\\<rbrakk>\n  \\<Longrightarrow> ?f2 x \\<subseteq> set (added_ids xs x)\n  xs @ [x] prefix of j\n  apply_operations (xs @ [x]) = Some f\n\ngoal (1 subgoal):\n 1. f x \\<subseteq> set (added_ids (xs @ [x]) x)", "proof (cases x, force)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>xs prefix of j;\n                    apply_operations xs = Some f\\<rbrakk>\n                   \\<Longrightarrow> f x \\<subseteq> set (added_ids xs x);\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some f;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> f x \\<subseteq> set (added_ids (xs @ [x]) x)", "case (Deliver e)"], ["proof (state)\nthis:\n  x = Deliver e\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>xs prefix of j;\n                    apply_operations xs = Some f\\<rbrakk>\n                   \\<Longrightarrow> f x \\<subseteq> set (added_ids xs x);\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some f;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> f x \\<subseteq> set (added_ids (xs @ [x]) x)", "moreover"], ["proof (state)\nthis:\n  x = Deliver e\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>xs prefix of j;\n                    apply_operations xs = Some f\\<rbrakk>\n                   \\<Longrightarrow> f x \\<subseteq> set (added_ids xs x);\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some f;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> f x \\<subseteq> set (added_ids (xs @ [x]) x)", "obtain a b where \"e = (a, b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b. e = (a, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  e = (a, b)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>f.\n                   \\<lbrakk>xs prefix of j;\n                    apply_operations xs = Some f\\<rbrakk>\n                   \\<Longrightarrow> f x \\<subseteq> set (added_ids xs x);\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some f;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> f x \\<subseteq> set (added_ids (xs @ [x]) x)", "ultimately"], ["proof (chain)\npicking this:\n  x = Deliver e\n  e = (a, b)", "show ?thesis"], ["proof (prove)\nusing this:\n  x = Deliver e\n  e = (a, b)\n\ngoal (1 subgoal):\n 1. f x \\<subseteq> set (added_ids (xs @ [x]) x)", "using snoc"], ["proof (prove)\nusing this:\n  x = Deliver e\n  e = (a, b)\n  \\<lbrakk>xs prefix of j; apply_operations xs = Some ?f2\\<rbrakk>\n  \\<Longrightarrow> ?f2 x \\<subseteq> set (added_ids xs x)\n  xs @ [x] prefix of j\n  apply_operations (xs @ [x]) = Some f\n\ngoal (1 subgoal):\n 1. f x \\<subseteq> set (added_ids (xs @ [x]) x)", "by(case_tac b; clarsimp simp: interp_msg_def split: bind_splits,\n                    force split: if_split_asm simp add: op_elem_def interpret_op_def)"], ["proof (state)\nthis:\n  f x \\<subseteq> set (added_ids (xs @ [x]) x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f x \\<subseteq> set (added_ids (xs @ [x]) x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in orset) Deliver_added_ids:\n  assumes \"xs prefix of j\"\n    and \"i \\<in> set (added_ids xs e)\"\n  shows \"Deliver (i, Add i e) \\<in> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Deliver (i, Add i e) \\<in> set xs", "using assms"], ["proof (prove)\nusing this:\n  xs prefix of j\n  i \\<in> set (added_ids xs e)\n\ngoal (1 subgoal):\n 1. Deliver (i, Add i e) \\<in> set xs", "proof (induct xs rule: rev_induct, clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_ids xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Add i e) \\<in> set xs;\n        xs @ [x] prefix of j; i \\<in> set (added_ids (xs @ [x]) e)\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Add i e) \\<in> set (xs @ [x])", "case (snoc x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>xs prefix of j; i \\<in> set (added_ids xs e)\\<rbrakk>\n  \\<Longrightarrow> Deliver (i, Add i e) \\<in> set xs\n  xs @ [x] prefix of j\n  i \\<in> set (added_ids (xs @ [x]) e)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_ids xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Add i e) \\<in> set xs;\n        xs @ [x] prefix of j; i \\<in> set (added_ids (xs @ [x]) e)\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Add i e) \\<in> set (xs @ [x])", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>xs prefix of j; i \\<in> set (added_ids xs e)\\<rbrakk>\n  \\<Longrightarrow> Deliver (i, Add i e) \\<in> set xs\n  xs @ [x] prefix of j\n  i \\<in> set (added_ids (xs @ [x]) e)\n\ngoal (1 subgoal):\n 1. Deliver (i, Add i e) \\<in> set (xs @ [x])", "proof (cases x, force)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_ids xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Add i e) \\<in> set xs;\n        xs @ [x] prefix of j; i \\<in> set (added_ids (xs @ [x]) e);\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Add i e) \\<in> set (xs @ [x])", "case (Deliver e')"], ["proof (state)\nthis:\n  x = Deliver e'\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_ids xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Add i e) \\<in> set xs;\n        xs @ [x] prefix of j; i \\<in> set (added_ids (xs @ [x]) e);\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Add i e) \\<in> set (xs @ [x])", "moreover"], ["proof (state)\nthis:\n  x = Deliver e'\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_ids xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Add i e) \\<in> set xs;\n        xs @ [x] prefix of j; i \\<in> set (added_ids (xs @ [x]) e);\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Add i e) \\<in> set (xs @ [x])", "obtain a b where \"e' = (a, b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b. e' = (a, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  e' = (a, b)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<lbrakk>xs prefix of j;\n                 i \\<in> set (added_ids xs e)\\<rbrakk>\n                \\<Longrightarrow> Deliver (i, Add i e) \\<in> set xs;\n        xs @ [x] prefix of j; i \\<in> set (added_ids (xs @ [x]) e);\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Add i e) \\<in> set (xs @ [x])", "ultimately"], ["proof (chain)\npicking this:\n  x = Deliver e'\n  e' = (a, b)", "show ?thesis"], ["proof (prove)\nusing this:\n  x = Deliver e'\n  e' = (a, b)\n\ngoal (1 subgoal):\n 1. Deliver (i, Add i e) \\<in> set (xs @ [x])", "using snoc"], ["proof (prove)\nusing this:\n  x = Deliver e'\n  e' = (a, b)\n  \\<lbrakk>xs prefix of j; i \\<in> set (added_ids xs e)\\<rbrakk>\n  \\<Longrightarrow> Deliver (i, Add i e) \\<in> set xs\n  xs @ [x] prefix of j\n  i \\<in> set (added_ids (xs @ [x]) e)\n\ngoal (1 subgoal):\n 1. Deliver (i, Add i e) \\<in> set (xs @ [x])", "apply (case_tac b; clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>xs @ [Deliver (a, Add x11 x12)] prefix of j;\n        i \\<in> set (added_ids xs e) \\<or>\n        i \\<in> set (added_ids [Deliver (a, Add x11 x12)] e);\n        b = Add x11 x12; x = Deliver (a, Add x11 x12);\n        e' = (a, Add x11 x12);\n        \\<lbrakk>xs prefix of j; i \\<in> set (added_ids xs e)\\<rbrakk>\n        \\<Longrightarrow> False;\n        Deliver (i, Add i e) \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> i = a \\<and> i = x11 \\<and> e = x12\n 2. \\<And>x21 x22.\n       \\<lbrakk>xs @ [Deliver (a, Rem x21 x22)] prefix of j;\n        i \\<in> set (added_ids xs e); b = Rem x21 x22;\n        x = Deliver (a, Rem x21 x22); e' = (a, Rem x21 x22);\n        xs prefix of j \\<Longrightarrow>\n        Deliver (i, Add i e) \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Add i e) \\<in> set xs", "apply (metis added_ids_Deliver_Add_diff_collapse added_ids_Deliver_Add_same_collapse\n              empty_iff list.set(1) set_ConsD add_id_valid in_set_conv_decomp prefix_of_appendD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       \\<lbrakk>xs @ [Deliver (a, Rem x21 x22)] prefix of j;\n        i \\<in> set (added_ids xs e); b = Rem x21 x22;\n        x = Deliver (a, Rem x21 x22); e' = (a, Rem x21 x22);\n        xs prefix of j \\<Longrightarrow>\n        Deliver (i, Add i e) \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> Deliver (i, Add i e) \\<in> set xs", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Deliver (i, Add i e) \\<in> set (xs @ [x])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Deliver (i, Add i e) \\<in> set (xs @ [x])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in orset) Broadcast_Deliver_prefix_closed:\n  assumes \"xs @ [Broadcast (r, Rem ix e)] prefix of j\"\n    and \"i \\<in> ix\"\n  shows \"Deliver (i, Add i e) \\<in> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Deliver (i, Add i e) \\<in> set xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Deliver (i, Add i e) \\<in> set xs", "obtain y where \"apply_operations xs = Some y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        apply_operations xs = Some y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms broadcast_only_valid_msgs"], ["proof (prove)\nusing this:\n  xs @ [Broadcast (r, Rem ix e)] prefix of j\n  i \\<in> ix\n  ?pre @ [Broadcast ?m] prefix of ?i \\<Longrightarrow>\n  \\<exists>state.\n     apply_operations ?pre = Some state \\<and> valid_behaviours state ?m\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        apply_operations xs = Some y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  apply_operations xs = Some y\n\ngoal (1 subgoal):\n 1. Deliver (i, Add i e) \\<in> set xs", "moreover"], ["proof (state)\nthis:\n  apply_operations xs = Some y\n\ngoal (1 subgoal):\n 1. Deliver (i, Add i e) \\<in> set xs", "hence \"ix = y e\""], ["proof (prove)\nusing this:\n  apply_operations xs = Some y\n\ngoal (1 subgoal):\n 1. ix = y e", "by (metis (mono_tags, lifting) assms(1) broadcast_only_valid_msgs operation.case(2) option.simps(1)\n     valid_behaviours_def case_prodD)"], ["proof (state)\nthis:\n  ix = y e\n\ngoal (1 subgoal):\n 1. Deliver (i, Add i e) \\<in> set xs", "ultimately"], ["proof (chain)\npicking this:\n  apply_operations xs = Some y\n  ix = y e", "show ?thesis"], ["proof (prove)\nusing this:\n  apply_operations xs = Some y\n  ix = y e\n\ngoal (1 subgoal):\n 1. Deliver (i, Add i e) \\<in> set xs", "using assms Deliver_added_ids apply_operations_added_ids"], ["proof (prove)\nusing this:\n  apply_operations xs = Some y\n  ix = y e\n  xs @ [Broadcast (r, Rem ix e)] prefix of j\n  i \\<in> ix\n  \\<lbrakk>?xs prefix of ?j; ?i \\<in> set (added_ids ?xs ?e)\\<rbrakk>\n  \\<Longrightarrow> Deliver (?i, Add ?i ?e) \\<in> set ?xs\n  \\<lbrakk>?es prefix of ?j; apply_operations ?es = Some ?f\\<rbrakk>\n  \\<Longrightarrow> ?f ?x \\<subseteq> set (added_ids ?es ?x)\n\ngoal (1 subgoal):\n 1. Deliver (i, Add i e) \\<in> set xs", "by blast"], ["proof (state)\nthis:\n  Deliver (i, Add i e) \\<in> set xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in orset) Broadcast_Deliver_prefix_closed2:\n  assumes \"xs prefix of j\"\n    and \"Broadcast (r, Rem ix e) \\<in> set xs\"\n    and \"i \\<in> ix\"\n  shows \"Deliver (i, Add i e) \\<in> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Deliver (i, Add i e) \\<in> set xs", "using assms Broadcast_Deliver_prefix_closed"], ["proof (prove)\nusing this:\n  xs prefix of j\n  Broadcast (r, Rem ix e) \\<in> set xs\n  i \\<in> ix\n  \\<lbrakk>?xs @ [Broadcast (?r, Rem ?ix ?e)] prefix of ?j;\n   ?i \\<in> ?ix\\<rbrakk>\n  \\<Longrightarrow> Deliver (?i, Add ?i ?e) \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. Deliver (i, Add i e) \\<in> set xs", "by (induction xs rule: rev_induct; force)"], ["", "lemma (in orset) concurrent_add_remove_independent_technical:\n  assumes \"i \\<in> is\"\n    and \"xs prefix of j\"\n    and \"(i, Add i e) \\<in> set (node_deliver_messages xs)\" and \"(ir, Rem is e) \\<in> set (node_deliver_messages xs)\"\n  shows \"hb (i, Add i e) (ir, Rem is e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hb (i, Add i e) (ir, Rem is e)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. hb (i, Add i e) (ir, Rem is e)", "obtain pre k where \"pre@[Broadcast (ir, Rem is e)] prefix of k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>pre k.\n        pre @ [Broadcast (ir, Rem is e)] prefix of k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms delivery_has_a_cause events_before_exist prefix_msg_in_history"], ["proof (prove)\nusing this:\n  i \\<in> is\n  xs prefix of j\n  (i, Add i e) \\<in> set (node_deliver_messages xs)\n  (ir, Rem is e) \\<in> set (node_deliver_messages xs)\n  Deliver ?m \\<in> set (history ?i) \\<Longrightarrow>\n  \\<exists>j. Broadcast ?m \\<in> set (history j)\n  ?x \\<in> set (history ?i) \\<Longrightarrow>\n  \\<exists>pre. pre @ [?x] prefix of ?i\n  \\<lbrakk>?es prefix of ?i;\n   ?m \\<in> set (node_deliver_messages ?es)\\<rbrakk>\n  \\<Longrightarrow> Deliver ?m \\<in> set (history ?i)\n\ngoal (1 subgoal):\n 1. (\\<And>pre k.\n        pre @ [Broadcast (ir, Rem is e)] prefix of k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  pre @ [Broadcast (ir, Rem is e)] prefix of k\n\ngoal (1 subgoal):\n 1. hb (i, Add i e) (ir, Rem is e)", "moreover"], ["proof (state)\nthis:\n  pre @ [Broadcast (ir, Rem is e)] prefix of k\n\ngoal (1 subgoal):\n 1. hb (i, Add i e) (ir, Rem is e)", "hence \"Deliver (i, Add i e) \\<in> set pre\""], ["proof (prove)\nusing this:\n  pre @ [Broadcast (ir, Rem is e)] prefix of k\n\ngoal (1 subgoal):\n 1. Deliver (i, Add i e) \\<in> set pre", "using Broadcast_Deliver_prefix_closed assms(1)"], ["proof (prove)\nusing this:\n  pre @ [Broadcast (ir, Rem is e)] prefix of k\n  \\<lbrakk>?xs @ [Broadcast (?r, Rem ?ix ?e)] prefix of ?j;\n   ?i \\<in> ?ix\\<rbrakk>\n  \\<Longrightarrow> Deliver (?i, Add ?i ?e) \\<in> set ?xs\n  i \\<in> is\n\ngoal (1 subgoal):\n 1. Deliver (i, Add i e) \\<in> set pre", "by auto"], ["proof (state)\nthis:\n  Deliver (i, Add i e) \\<in> set pre\n\ngoal (1 subgoal):\n 1. hb (i, Add i e) (ir, Rem is e)", "ultimately"], ["proof (chain)\npicking this:\n  pre @ [Broadcast (ir, Rem is e)] prefix of k\n  Deliver (i, Add i e) \\<in> set pre", "show ?thesis"], ["proof (prove)\nusing this:\n  pre @ [Broadcast (ir, Rem is e)] prefix of k\n  Deliver (i, Add i e) \\<in> set pre\n\ngoal (1 subgoal):\n 1. hb (i, Add i e) (ir, Rem is e)", "using hb.intros(2) events_in_local_order"], ["proof (prove)\nusing this:\n  pre @ [Broadcast (ir, Rem is e)] prefix of k\n  Deliver (i, Add i e) \\<in> set pre\n  Deliver ?m1.0 \\<sqsubset>\\<^sup>?i Broadcast ?m2.0 \\<Longrightarrow>\n  hb ?m1.0 ?m2.0\n  \\<lbrakk>?pre @ [?e2.0] prefix of ?i; ?e1.0 \\<in> set ?pre\\<rbrakk>\n  \\<Longrightarrow> ?e1.0 \\<sqsubset>\\<^sup>?i ?e2.0\n\ngoal (1 subgoal):\n 1. hb (i, Add i e) (ir, Rem is e)", "by blast"], ["proof (state)\nthis:\n  hb (i, Add i e) (ir, Rem is e)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in orset) Deliver_Add_same_id_same_message:\n  assumes \"Deliver (i, Add i e1) \\<in> set (history j)\" and \"Deliver (i, Add i e2) \\<in> set (history j)\"\n  shows \"e1 = e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e1 = e2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. e1 = e2", "obtain pre1 pre2 k1 k2 where *: \"pre1@[Broadcast (i, Add i e1)] prefix of k1\" \"pre2@[Broadcast (i, Add i e2)] prefix of k2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>pre1 k1 pre2 k2.\n        \\<lbrakk>pre1 @ [Broadcast (i, Add i e1)] prefix of k1;\n         pre2 @ [Broadcast (i, Add i e2)] prefix of k2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms delivery_has_a_cause events_before_exist"], ["proof (prove)\nusing this:\n  Deliver (i, Add i e1) \\<in> set (history j)\n  Deliver (i, Add i e2) \\<in> set (history j)\n  Deliver ?m \\<in> set (history ?i) \\<Longrightarrow>\n  \\<exists>j. Broadcast ?m \\<in> set (history j)\n  ?x \\<in> set (history ?i) \\<Longrightarrow>\n  \\<exists>pre. pre @ [?x] prefix of ?i\n\ngoal (1 subgoal):\n 1. (\\<And>pre1 k1 pre2 k2.\n        \\<lbrakk>pre1 @ [Broadcast (i, Add i e1)] prefix of k1;\n         pre2 @ [Broadcast (i, Add i e2)] prefix of k2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by meson"], ["proof (state)\nthis:\n  pre1 @ [Broadcast (i, Add i e1)] prefix of k1\n  pre2 @ [Broadcast (i, Add i e2)] prefix of k2\n\ngoal (1 subgoal):\n 1. e1 = e2", "moreover"], ["proof (state)\nthis:\n  pre1 @ [Broadcast (i, Add i e1)] prefix of k1\n  pre2 @ [Broadcast (i, Add i e2)] prefix of k2\n\ngoal (1 subgoal):\n 1. e1 = e2", "hence \"Broadcast (i, Add i e1) \\<in> set (history k1)\" \"Broadcast (i, Add i e2) \\<in> set (history k2)\""], ["proof (prove)\nusing this:\n  pre1 @ [Broadcast (i, Add i e1)] prefix of k1\n  pre2 @ [Broadcast (i, Add i e2)] prefix of k2\n\ngoal (1 subgoal):\n 1. Broadcast (i, Add i e1) \\<in> set (history k1) &&&\n    Broadcast (i, Add i e2) \\<in> set (history k2)", "using node_histories.prefix_to_carriers node_histories_axioms"], ["proof (prove)\nusing this:\n  pre1 @ [Broadcast (i, Add i e1)] prefix of k1\n  pre2 @ [Broadcast (i, Add i e2)] prefix of k2\n  \\<lbrakk>node_histories ?history;\n   node_histories.prefix_of_node_history ?history ?xs ?i\\<rbrakk>\n  \\<Longrightarrow> set ?xs \\<subseteq> set (?history ?i)\n  node_histories history\n\ngoal (1 subgoal):\n 1. Broadcast (i, Add i e1) \\<in> set (history k1) &&&\n    Broadcast (i, Add i e2) \\<in> set (history k2)", "by force+"], ["proof (state)\nthis:\n  Broadcast (i, Add i e1) \\<in> set (history k1)\n  Broadcast (i, Add i e2) \\<in> set (history k2)\n\ngoal (1 subgoal):\n 1. e1 = e2", "ultimately"], ["proof (chain)\npicking this:\n  pre1 @ [Broadcast (i, Add i e1)] prefix of k1\n  pre2 @ [Broadcast (i, Add i e2)] prefix of k2\n  Broadcast (i, Add i e1) \\<in> set (history k1)\n  Broadcast (i, Add i e2) \\<in> set (history k2)", "show ?thesis"], ["proof (prove)\nusing this:\n  pre1 @ [Broadcast (i, Add i e1)] prefix of k1\n  pre2 @ [Broadcast (i, Add i e2)] prefix of k2\n  Broadcast (i, Add i e1) \\<in> set (history k1)\n  Broadcast (i, Add i e2) \\<in> set (history k2)\n\ngoal (1 subgoal):\n 1. e1 = e2", "using msg_id_unique"], ["proof (prove)\nusing this:\n  pre1 @ [Broadcast (i, Add i e1)] prefix of k1\n  pre2 @ [Broadcast (i, Add i e2)] prefix of k2\n  Broadcast (i, Add i e1) \\<in> set (history k1)\n  Broadcast (i, Add i e2) \\<in> set (history k2)\n  \\<lbrakk>Broadcast ?m1.0 \\<in> set (history ?i);\n   Broadcast ?m2.0 \\<in> set (history ?j); fst ?m1.0 = fst ?m2.0\\<rbrakk>\n  \\<Longrightarrow> ?i = ?j \\<and> ?m1.0 = ?m2.0\n\ngoal (1 subgoal):\n 1. e1 = e2", "by fastforce"], ["proof (state)\nthis:\n  e1 = e2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in orset) ids_imply_messages_same:\n  assumes \"i \\<in> is\"\n    and \"xs prefix of j\"\n    and \"(i, Add i e1) \\<in> set (node_deliver_messages xs)\" and \"(ir, Rem is e2) \\<in> set (node_deliver_messages xs)\"\n  shows \"e1 = e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e1 = e2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. e1 = e2", "obtain pre k where \"pre@[Broadcast (ir, Rem is e2)] prefix of k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>pre k.\n        pre @ [Broadcast (ir, Rem is e2)] prefix of k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms delivery_has_a_cause events_before_exist prefix_msg_in_history"], ["proof (prove)\nusing this:\n  i \\<in> is\n  xs prefix of j\n  (i, Add i e1) \\<in> set (node_deliver_messages xs)\n  (ir, Rem is e2) \\<in> set (node_deliver_messages xs)\n  Deliver ?m \\<in> set (history ?i) \\<Longrightarrow>\n  \\<exists>j. Broadcast ?m \\<in> set (history j)\n  ?x \\<in> set (history ?i) \\<Longrightarrow>\n  \\<exists>pre. pre @ [?x] prefix of ?i\n  \\<lbrakk>?es prefix of ?i;\n   ?m \\<in> set (node_deliver_messages ?es)\\<rbrakk>\n  \\<Longrightarrow> Deliver ?m \\<in> set (history ?i)\n\ngoal (1 subgoal):\n 1. (\\<And>pre k.\n        pre @ [Broadcast (ir, Rem is e2)] prefix of k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  pre @ [Broadcast (ir, Rem is e2)] prefix of k\n\ngoal (1 subgoal):\n 1. e1 = e2", "moreover"], ["proof (state)\nthis:\n  pre @ [Broadcast (ir, Rem is e2)] prefix of k\n\ngoal (1 subgoal):\n 1. e1 = e2", "hence \"Deliver (i, Add i e2) \\<in> set pre\""], ["proof (prove)\nusing this:\n  pre @ [Broadcast (ir, Rem is e2)] prefix of k\n\ngoal (1 subgoal):\n 1. Deliver (i, Add i e2) \\<in> set pre", "using Broadcast_Deliver_prefix_closed assms(1)"], ["proof (prove)\nusing this:\n  pre @ [Broadcast (ir, Rem is e2)] prefix of k\n  \\<lbrakk>?xs @ [Broadcast (?r, Rem ?ix ?e)] prefix of ?j;\n   ?i \\<in> ?ix\\<rbrakk>\n  \\<Longrightarrow> Deliver (?i, Add ?i ?e) \\<in> set ?xs\n  i \\<in> is\n\ngoal (1 subgoal):\n 1. Deliver (i, Add i e2) \\<in> set pre", "by blast"], ["proof (state)\nthis:\n  Deliver (i, Add i e2) \\<in> set pre\n\ngoal (1 subgoal):\n 1. e1 = e2", "moreover"], ["proof (state)\nthis:\n  Deliver (i, Add i e2) \\<in> set pre\n\ngoal (1 subgoal):\n 1. e1 = e2", "have \"Deliver (i, Add i e1) \\<in> set (history j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Deliver (i, Add i e1) \\<in> set (history j)", "using assms(2) assms(3) prefix_msg_in_history"], ["proof (prove)\nusing this:\n  xs prefix of j\n  (i, Add i e1) \\<in> set (node_deliver_messages xs)\n  \\<lbrakk>?es prefix of ?i;\n   ?m \\<in> set (node_deliver_messages ?es)\\<rbrakk>\n  \\<Longrightarrow> Deliver ?m \\<in> set (history ?i)\n\ngoal (1 subgoal):\n 1. Deliver (i, Add i e1) \\<in> set (history j)", "by blast"], ["proof (state)\nthis:\n  Deliver (i, Add i e1) \\<in> set (history j)\n\ngoal (1 subgoal):\n 1. e1 = e2", "ultimately"], ["proof (chain)\npicking this:\n  pre @ [Broadcast (ir, Rem is e2)] prefix of k\n  Deliver (i, Add i e2) \\<in> set pre\n  Deliver (i, Add i e1) \\<in> set (history j)", "show ?thesis"], ["proof (prove)\nusing this:\n  pre @ [Broadcast (ir, Rem is e2)] prefix of k\n  Deliver (i, Add i e2) \\<in> set pre\n  Deliver (i, Add i e1) \\<in> set (history j)\n\ngoal (1 subgoal):\n 1. e1 = e2", "by (metis fst_conv msg_id_unique network.delivery_has_a_cause network_axioms operation.inject(1)\n        prefix_elem_to_carriers prefix_of_appendD prod.inject)"], ["proof (state)\nthis:\n  e1 = e2\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary (in orset) concurrent_add_remove_independent:\n  assumes \"\\<not> hb (i, Add i e1) (ir, Rem is e2)\" and \"\\<not> hb (ir, Rem is e2) (i, Add i e1)\"\n    and \"xs prefix of j\"\n    and \"(i, Add i e1) \\<in> set (node_deliver_messages xs)\" and \"(ir, Rem is e2) \\<in> set (node_deliver_messages xs)\"\n  shows \"i \\<notin> is\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<notin> is", "using assms ids_imply_messages_same concurrent_add_remove_independent_technical"], ["proof (prove)\nusing this:\n  \\<not> hb (i, Add i e1) (ir, Rem is e2)\n  \\<not> hb (ir, Rem is e2) (i, Add i e1)\n  xs prefix of j\n  (i, Add i e1) \\<in> set (node_deliver_messages xs)\n  (ir, Rem is e2) \\<in> set (node_deliver_messages xs)\n  \\<lbrakk>?i \\<in> ?is; ?xs prefix of ?j;\n   (?i, Add ?i ?e1.0) \\<in> set (node_deliver_messages ?xs);\n   (?ir, Rem ?is ?e2.0) \\<in> set (node_deliver_messages ?xs)\\<rbrakk>\n  \\<Longrightarrow> ?e1.0 = ?e2.0\n  \\<lbrakk>?i \\<in> ?is; ?xs prefix of ?j;\n   (?i, Add ?i ?e) \\<in> set (node_deliver_messages ?xs);\n   (?ir, Rem ?is ?e) \\<in> set (node_deliver_messages ?xs)\\<rbrakk>\n  \\<Longrightarrow> hb (?i, Add ?i ?e) (?ir, Rem ?is ?e)\n\ngoal (1 subgoal):\n 1. i \\<notin> is", "by fastforce"], ["", "lemma (in orset) rem_rem_commute:\n  shows \"\\<langle>Rem i1 e1\\<rangle> \\<rhd> \\<langle>Rem i2 e2\\<rangle> = \\<langle>Rem i2 e2\\<rangle> \\<rhd> \\<langle>Rem i1 e1\\<rangle>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>Rem i1 e1\\<rangle> \\<rhd> \\<langle>Rem i2 e2\\<rangle> =\n    \\<langle>Rem i2 e2\\<rangle> \\<rhd> \\<langle>Rem i1 e1\\<rangle>", "by(unfold interpret_op_def op_elem_def kleisli_def, fastforce)"], ["", "lemma (in orset) concurrent_operations_commute:\n  assumes \"xs prefix of i\"\n  shows \"hb.concurrent_ops_commute (node_deliver_messages xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hb.concurrent_ops_commute (node_deliver_messages xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. hb.concurrent_ops_commute (node_deliver_messages xs)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. hb.concurrent_ops_commute (node_deliver_messages xs)", "fix a b x y"], ["proof (state)\ngoal (1 subgoal):\n 1. hb.concurrent_ops_commute (node_deliver_messages xs)", "assume \"(a, b) \\<in> set (node_deliver_messages xs)\"\n           \"(x, y) \\<in> set (node_deliver_messages xs)\"\n           \"hb.concurrent (a, b) (x, y)\""], ["proof (state)\nthis:\n  (a, b) \\<in> set (node_deliver_messages xs)\n  (x, y) \\<in> set (node_deliver_messages xs)\n  hb.concurrent (a, b) (x, y)\n\ngoal (1 subgoal):\n 1. hb.concurrent_ops_commute (node_deliver_messages xs)", "hence \"interp_msg (a, b) \\<rhd> interp_msg (x, y) = interp_msg (x, y) \\<rhd> interp_msg (a, b)\""], ["proof (prove)\nusing this:\n  (a, b) \\<in> set (node_deliver_messages xs)\n  (x, y) \\<in> set (node_deliver_messages xs)\n  hb.concurrent (a, b) (x, y)\n\ngoal (1 subgoal):\n 1. interp_msg (a, b) \\<rhd> interp_msg (x, y) =\n    interp_msg (x, y) \\<rhd> interp_msg (a, b)", "apply(unfold interp_msg_def, case_tac \"b\"; case_tac \"y\"; simp add: add_add_commute rem_rem_commute hb.concurrent_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x11 x12 x21 x22.\n       \\<lbrakk>(a, Add x11 x12) \\<in> set (node_deliver_messages xs);\n        (x, Rem x21 x22) \\<in> set (node_deliver_messages xs);\n        \\<not> hb (a, Add x11 x12) (x, Rem x21 x22) \\<and>\n        \\<not> hb (x, Rem x21 x22) (a, Add x11 x12);\n        b = Add x11 x12; y = Rem x21 x22\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Add x11 x12\\<rangle> \\<rhd>\n                         \\<langle>Rem x21 x22\\<rangle> =\n                         \\<langle>Rem x21 x22\\<rangle> \\<rhd>\n                         \\<langle>Add x11 x12\\<rangle>\n 2. \\<And>x21 x22 x11 x12.\n       \\<lbrakk>(a, Rem x21 x22) \\<in> set (node_deliver_messages xs);\n        (x, Add x11 x12) \\<in> set (node_deliver_messages xs);\n        \\<not> hb (a, Rem x21 x22) (x, Add x11 x12) \\<and>\n        \\<not> hb (x, Add x11 x12) (a, Rem x21 x22);\n        b = Rem x21 x22; y = Add x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<langle>Rem x21 x22\\<rangle> \\<rhd>\n                         \\<langle>Add x11 x12\\<rangle> =\n                         \\<langle>Add x11 x12\\<rangle> \\<rhd>\n                         \\<langle>Rem x21 x22\\<rangle>", "apply (metis add_id_valid add_rem_commute assms concurrent_add_remove_independent hb.concurrentD1 hb.concurrentD2 prefix_contains_msg)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  interp_msg (a, b) \\<rhd> interp_msg (x, y) =\n  interp_msg (x, y) \\<rhd> interp_msg (a, b)\n\ngoal (1 subgoal):\n 1. hb.concurrent_ops_commute (node_deliver_messages xs)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?a4, ?b4) \\<in> set (node_deliver_messages xs);\n   (?x4, ?y4) \\<in> set (node_deliver_messages xs);\n   hb.concurrent (?a4, ?b4) (?x4, ?y4)\\<rbrakk>\n  \\<Longrightarrow> interp_msg (?a4, ?b4) \\<rhd> interp_msg (?x4, ?y4) =\n                    interp_msg (?x4, ?y4) \\<rhd> interp_msg (?a4, ?b4)\n\ngoal (1 subgoal):\n 1. hb.concurrent_ops_commute (node_deliver_messages xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?a4, ?b4) \\<in> set (node_deliver_messages xs);\n   (?x4, ?y4) \\<in> set (node_deliver_messages xs);\n   hb.concurrent (?a4, ?b4) (?x4, ?y4)\\<rbrakk>\n  \\<Longrightarrow> interp_msg (?a4, ?b4) \\<rhd> interp_msg (?x4, ?y4) =\n                    interp_msg (?x4, ?y4) \\<rhd> interp_msg (?a4, ?b4)\n\ngoal (1 subgoal):\n 1. hb.concurrent_ops_commute (node_deliver_messages xs)", "by(fastforce simp: hb.concurrent_ops_commute_def)"], ["proof (state)\nthis:\n  hb.concurrent_ops_commute (node_deliver_messages xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem (in orset) convergence:\n  assumes \"set (node_deliver_messages xs) = set (node_deliver_messages ys)\"\n      and \"xs prefix of i\" and \"ys prefix of j\"\n    shows \"apply_operations xs = apply_operations ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apply_operations xs = apply_operations ys", "using assms"], ["proof (prove)\nusing this:\n  set (node_deliver_messages xs) = set (node_deliver_messages ys)\n  xs prefix of i\n  ys prefix of j\n\ngoal (1 subgoal):\n 1. apply_operations xs = apply_operations ys", "by(auto simp add: apply_operations_def intro: hb.convergence_ext concurrent_operations_commute\n                node_deliver_messages_distinct hb_consistent_prefix)"], ["", "context orset begin"], ["", "sublocale sec: strong_eventual_consistency weak_hb hb interp_msg\n  \"\\<lambda>ops.\\<exists>xs i. xs prefix of i \\<and> node_deliver_messages xs = ops\" \"\\<lambda>x.{}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strong_eventual_consistency weak_hb hb interp_msg\n     (\\<lambda>ops.\n         \\<exists>xs i.\n            xs prefix of i \\<and> node_deliver_messages xs = ops)\n     (\\<lambda>x. {})", "apply(standard; clarsimp simp add: hb_consistent_prefix node_deliver_messages_distinct\n        concurrent_operations_commute)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs a b state xsa x.\n       \\<lbrakk>hb.apply_operations xs (\\<lambda>x. {}) = Some state;\n        node_deliver_messages xsa = xs @ [(a, b)]; xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. interp_msg (a, b) state = Some y\n 2. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "apply(metis (no_types, lifting) apply_operations_def bind.bind_lunit not_None_eq\n     hb.apply_operations_Snoc kleisli_def apply_operations_never_fails interp_msg_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "using drop_last_message"], ["proof (prove)\nusing this:\n  \\<lbrakk>?evts prefix of ?i;\n   node_deliver_messages ?evts = ?msgs @ [?last_msg]\\<rbrakk>\n  \\<Longrightarrow> \\<exists>pre.\n                       pre prefix of ?i \\<and>\n                       node_deliver_messages pre = ?msgs\n\ngoal (1 subgoal):\n 1. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "end"]]}