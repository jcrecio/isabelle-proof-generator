{"file_name": "/home/qj213/afp-2021-10-22/thys/CRDT/Counter.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CRDT", "problem_names": ["lemma (in counter) \"counter_op x \\<rhd> counter_op y = counter_op y \\<rhd> counter_op x\"", "lemma (in counter) concurrent_operations_commute:\n  assumes \"xs prefix of i\"\n  shows \"hb.concurrent_ops_commute (node_deliver_messages xs)\""], "translations": [["", "lemma (in counter) \"counter_op x \\<rhd> counter_op y = counter_op y \\<rhd> counter_op x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. counter_op x \\<rhd> counter_op y = counter_op y \\<rhd> counter_op x", "by(case_tac x; case_tac y; auto simp add: kleisli_def)"], ["", "lemma (in counter) concurrent_operations_commute:\n  assumes \"xs prefix of i\"\n  shows \"hb.concurrent_ops_commute (node_deliver_messages xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hb.concurrent_ops_commute (node_deliver_messages xs)", "using assms"], ["proof (prove)\nusing this:\n  xs prefix of i\n\ngoal (1 subgoal):\n 1. hb.concurrent_ops_commute (node_deliver_messages xs)", "apply(clarsimp simp: hb.concurrent_ops_commute_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>xs prefix of i; (a, b) \\<in> set (node_deliver_messages xs);\n        (aa, ba) \\<in> set (node_deliver_messages xs);\n        hb.concurrent (a, b) (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> interp_msg (a, b) \\<rhd> interp_msg (aa, ba) =\n                         interp_msg (aa, ba) \\<rhd> interp_msg (a, b)", "apply(rename_tac a b x y)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b x y.\n       \\<lbrakk>xs prefix of i; (a, b) \\<in> set (node_deliver_messages xs);\n        (x, y) \\<in> set (node_deliver_messages xs);\n        hb.concurrent (a, b) (x, y)\\<rbrakk>\n       \\<Longrightarrow> interp_msg (a, b) \\<rhd> interp_msg (x, y) =\n                         interp_msg (x, y) \\<rhd> interp_msg (a, b)", "apply(case_tac b; case_tac y; force simp add: interp_msg_def kleisli_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary (in counter) counter_convergence:\n  assumes \"set (node_deliver_messages xs) = set (node_deliver_messages ys)\"\n      and \"xs prefix of i\"\n      and \"ys prefix of j\"\n    shows \"apply_operations xs = apply_operations ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apply_operations xs = apply_operations ys", "using assms"], ["proof (prove)\nusing this:\n  set (node_deliver_messages xs) = set (node_deliver_messages ys)\n  xs prefix of i\n  ys prefix of j\n\ngoal (1 subgoal):\n 1. apply_operations xs = apply_operations ys", "by(auto simp add: apply_operations_def intro: hb.convergence_ext\n      concurrent_operations_commute node_deliver_messages_distinct hb_consistent_prefix)"], ["", "context counter begin"], ["", "sublocale sec: strong_eventual_consistency weak_hb hb interp_msg\n  \"\\<lambda>ops. \\<exists>xs i. xs prefix of i \\<and> node_deliver_messages xs = ops\" 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. strong_eventual_consistency weak_hb hb interp_msg\n     (\\<lambda>ops.\n         \\<exists>xs i.\n            xs prefix of i \\<and> node_deliver_messages xs = ops)\n     0", "apply(standard; clarsimp simp add: hb_consistent_prefix drop_last_message\n      node_deliver_messages_distinct concurrent_operations_commute)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs a b state xsa x.\n       \\<lbrakk>hb.apply_operations xs 0 = Some state;\n        node_deliver_messages xsa = xs @ [(a, b)]; xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. interp_msg (a, b) state = Some y\n 2. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "apply(metis (full_types) interp_msg_def counter_op.elims)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "using drop_last_message"], ["proof (prove)\nusing this:\n  \\<lbrakk>?evts prefix of ?i;\n   node_deliver_messages ?evts = ?msgs @ [?last_msg]\\<rbrakk>\n  \\<Longrightarrow> \\<exists>pre.\n                       pre prefix of ?i \\<and>\n                       node_deliver_messages pre = ?msgs\n\ngoal (1 subgoal):\n 1. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "end"]]}