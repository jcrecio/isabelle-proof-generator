{"file_name": "/home/qj213/afp-2021-10-22/thys/CRDT/RGA.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CRDT", "problem_names": ["lemma indices_Nil [simp]:\n  shows \"indices [] = []\"", "lemma indices_append [simp]:\n  shows \"indices (xs@ys) = indices xs @ indices ys\"", "lemma indices_Broadcast_singleton [simp]:\n  shows \"indices [Broadcast b] = []\"", "lemma indices_Deliver_Insert [simp]:\n  shows \"indices [Deliver (i, Insert e n)] = [fst e]\"", "lemma indices_Deliver_Delete [simp]:\n  shows \"indices [Deliver (i, Delete n)] = []\"", "lemma (in rga) idx_in_elem_inserted [intro]:\n  assumes \"Deliver (i, Insert e n) \\<in> set xs\"\n  shows   \"fst e \\<in> set (indices xs)\"", "lemma (in rga) apply_opers_idx_elems:\n  assumes \"es prefix of i\"\n      and \"apply_operations es = Some xs\"\n    shows \"element_ids xs = set (indices es)\"", "lemma (in rga) delete_does_not_change_element_ids:\n  assumes \"es @ [Deliver (i, Delete n)] prefix of j\"\n  and \"apply_operations es = Some xs1\"\n  and \"apply_operations (es @ [Deliver (i, Delete n)]) = Some xs2\"\n  shows \"element_ids xs1 = element_ids xs2\"", "lemma (in rga) someone_inserted_id:\n  assumes \"es @ [Deliver (i, Insert (k, v, f) n)] prefix of j\"\n  and \"apply_operations es = Some xs1\"\n  and \"apply_operations (es @ [Deliver (i, Insert (k, v, f) n)]) = Some xs2\"\n  and \"a \\<in> element_ids xs2\"\n  and \"a \\<noteq> k\"\n  shows \"a \\<in> element_ids xs1\"", "lemma (in rga) deliver_insert_exists:\n  assumes \"es prefix of j\"\n      and \"apply_operations es = Some xs\"\n      and \"a \\<in> element_ids xs\"\n    shows \"\\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set es\"", "lemma (in rga) insert_in_apply_set:\n  assumes \"es @ [Deliver (i, Insert e (Some a))] prefix of j\"\n      and \"Deliver (i', Insert e' n) \\<in> set es\"\n      and \"apply_operations es = Some s\"\n    shows \"fst e' \\<in> element_ids s\"", "lemma (in rga) insert_msg_id:\n  assumes \"Broadcast (i, Insert e n) \\<in> set (history j)\"\n  shows \"fst e = i\"", "lemma (in rga) allowed_insert:\n  assumes \"Broadcast (i, Insert e n) \\<in> set (history j)\"\n  shows \"n = None \\<or> (\\<exists>i' e' n'. n = Some (fst e') \\<and> Deliver (i', Insert e' n') \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))\"", "lemma (in rga) allowed_delete:\n  assumes \"Broadcast (i, Delete x) \\<in> set (history j)\"\n  shows \"\\<exists>i' n' v b. Deliver (i', Insert (x, v, b) n') \\<sqsubset>\\<^sup>j Broadcast (i, Delete x)\"", "lemma (in rga) insert_id_unique:\n  assumes \"fst e1 = fst e2\"\n  and \"Broadcast (i1, Insert e1 n1) \\<in> set (history i)\"\n  and \"Broadcast (i2, Insert e2 n2) \\<in> set (history j)\"\n  shows \"Insert e1 n1 = Insert e2 n2\"", "lemma (in rga) allowed_delete_deliver:\n  assumes \"Deliver (i, Delete x) \\<in> set (history j)\"\n    shows \"\\<exists>i' n' v b. Deliver (i', Insert (x, v, b) n') \\<sqsubset>\\<^sup>j Deliver (i, Delete x)\"", "lemma (in rga) allowed_delete_deliver_in_set:\n  assumes \"(es@[Deliver (i, Delete m)]) prefix of j\"\n  shows   \"\\<exists>i' n v b. Deliver (i', Insert (m, v, b) n) \\<in> set es\"", "lemma (in rga) allowed_insert_deliver:\n  assumes \"Deliver (i, Insert e n) \\<in> set (history j)\"\n  shows   \"n = None \\<or> (\\<exists>i' n' n'' v b. n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'') \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))\"", "lemma (in rga) allowed_insert_deliver_in_set:\n  assumes \"(es@[Deliver (i, Insert e m)]) prefix of j\"\n  shows   \"m = None \\<or> (\\<exists>i' m' n v b. m = Some m' \\<and> Deliver (i', Insert (m', v, b) n) \\<in> set es)\"", "lemma (in rga) Insert_no_failure:\n  assumes \"es @ [Deliver (i, Insert e n)] prefix of j\" \n      and \"apply_operations es = Some s\"\n    shows \"\\<exists>ys. insert s e n = Some ys\"", "lemma (in rga) delete_no_failure:\n  assumes \"es @ [Deliver (i, Delete n)] prefix of j\"\n      and \"apply_operations es = Some s\"\n    shows \"\\<exists>ys. delete s n = Some ys\"", "lemma (in rga) Insert_equal:\n  assumes \"fst e1 = fst e2\"\n      and \"Broadcast (i1, Insert e1 n1) \\<in> set (history i)\"\n      and \"Broadcast (i2, Insert e2 n2) \\<in> set (history j)\"\n    shows \"Insert e1 n1 = Insert e2 n2\"", "lemma (in rga) same_insert:\n  assumes \"fst e1 = fst e2\"\n      and \"xs prefix of i\"\n      and \"(i1, Insert e1 n1) \\<in> set (node_deliver_messages xs)\"\n      and \"(i2, Insert e2 n2) \\<in> set (node_deliver_messages xs)\"\n    shows \"Insert e1 n1 = Insert e2 n2\"", "lemma (in rga) insert_commute_assms:\n  assumes \"{Deliver (i, Insert e n), Deliver (i', Insert e' n')} \\<subseteq> set (history j)\"\n      and \"hb.concurrent (i, Insert e n) (i', Insert e' n')\"\n    shows \"n = None \\<or> n \\<noteq> Some (fst e')\"", "lemma subset_reorder:\n  assumes \"{a, b} \\<subseteq> c\"\n  shows \"{b, a} \\<subseteq> c\"", "lemma (in rga) Insert_Insert_concurrent:\n  assumes \"{Deliver (i, Insert e k), Deliver (i', Insert e' (Some m))} \\<subseteq> set (history j)\"\n      and \"hb.concurrent (i, Insert e k) (i', Insert e' (Some m))\"\n    shows \"fst e \\<noteq> m\"", "lemma (in rga) insert_valid_assms:\n assumes \"Deliver (i, Insert e n) \\<in> set (history j)\"\n   shows \"n = None \\<or> n \\<noteq> Some (fst e)\"", "lemma (in rga) Insert_Delete_concurrent:\n  assumes \"{Deliver (i, Insert e n), Deliver (i', Delete n')} \\<subseteq> set (history j)\"\n      and \"hb.concurrent (i, Insert e n) (i', Delete n')\"\n    shows \"n' \\<noteq> fst e\"", "lemma (in rga) concurrent_operations_commute:\n  assumes \"xs prefix of i\"\n  shows \"hb.concurrent_ops_commute (node_deliver_messages xs)\"", "lemma (in rga) apply_operations_never_fails:\n  assumes \"xs prefix of i\"\n  shows \"apply_operations xs \\<noteq> None\"", "lemma (in rga) apply_operations_never_fails':\n  shows \"apply_operations (history i) \\<noteq> None\""], "translations": [["", "lemma indices_Nil [simp]:\n  shows \"indices [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indices [] = []", "by(auto simp: indices_def map_filter_def)"], ["", "lemma indices_append [simp]:\n  shows \"indices (xs@ys) = indices xs @ indices ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indices (xs @ ys) = indices xs @ indices ys", "by(auto simp: indices_def map_filter_def)"], ["", "lemma indices_Broadcast_singleton [simp]:\n  shows \"indices [Broadcast b] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indices [Broadcast b] = []", "by(auto simp: indices_def map_filter_def)"], ["", "lemma indices_Deliver_Insert [simp]:\n  shows \"indices [Deliver (i, Insert e n)] = [fst e]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indices [Deliver (i, Insert e n)] = [fst e]", "by(auto simp: indices_def map_filter_def)"], ["", "lemma indices_Deliver_Delete [simp]:\n  shows \"indices [Deliver (i, Delete n)] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indices [Deliver (i, Delete n)] = []", "by(auto simp: indices_def map_filter_def)"], ["", "lemma (in rga) idx_in_elem_inserted [intro]:\n  assumes \"Deliver (i, Insert e n) \\<in> set xs\"\n  shows   \"fst e \\<in> set (indices xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst e \\<in> set (indices xs)", "using assms"], ["proof (prove)\nusing this:\n  Deliver (i, Insert e n) \\<in> set xs\n\ngoal (1 subgoal):\n 1. fst e \\<in> set (indices xs)", "by(induction xs, auto simp add: indices_def map_filter_def)"], ["", "lemma (in rga) apply_opers_idx_elems:\n  assumes \"es prefix of i\"\n      and \"apply_operations es = Some xs\"\n    shows \"element_ids xs = set (indices es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. element_ids xs = set (indices es)", "using assms"], ["proof (prove)\nusing this:\n  es prefix of i\n  apply_operations es = Some xs\n\ngoal (1 subgoal):\n 1. element_ids xs = set (indices es)", "unfolding element_ids_def"], ["proof (prove)\nusing this:\n  es prefix of i\n  apply_operations es = Some xs\n\ngoal (1 subgoal):\n 1. set (map fst xs) = set (indices es)", "proof(induction es arbitrary: xs rule: rev_induct, clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs xsa.\n       \\<lbrakk>\\<And>xsa.\n                   \\<lbrakk>xs prefix of i;\n                    apply_operations xs = Some xsa\\<rbrakk>\n                   \\<Longrightarrow> set (map fst xsa) = set (indices xs);\n        xs @ [x] prefix of i;\n        apply_operations (xs @ [x]) = Some xsa\\<rbrakk>\n       \\<Longrightarrow> set (map fst xsa) = set (indices (xs @ [x]))", "case (snoc x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>xsa__ prefix of i; apply_operations xsa__ = Some ?xs1\\<rbrakk>\n  \\<Longrightarrow> set (map fst ?xs1) = set (indices xsa__)\n  xsa__ @ [x] prefix of i\n  apply_operations (xsa__ @ [x]) = Some xs\n\ngoal (1 subgoal):\n 1. \\<And>x xs xsa.\n       \\<lbrakk>\\<And>xsa.\n                   \\<lbrakk>xs prefix of i;\n                    apply_operations xs = Some xsa\\<rbrakk>\n                   \\<Longrightarrow> set (map fst xsa) = set (indices xs);\n        xs @ [x] prefix of i;\n        apply_operations (xs @ [x]) = Some xsa\\<rbrakk>\n       \\<Longrightarrow> set (map fst xsa) = set (indices (xs @ [x]))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>xsa__ prefix of i; apply_operations xsa__ = Some ?xs1\\<rbrakk>\n  \\<Longrightarrow> set (map fst ?xs1) = set (indices xsa__)\n  xsa__ @ [x] prefix of i\n  apply_operations (xsa__ @ [x]) = Some xs\n\ngoal (1 subgoal):\n 1. set (map fst xs) = set (indices (xsa__ @ [x]))", "proof (cases x, clarsimp, blast)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>xsa__ prefix of i;\n                    apply_operations xsa__ = Some xs\\<rbrakk>\n                   \\<Longrightarrow> set (map fst xs) = set (indices xsa__);\n        xsa__ @ [x] prefix of i; apply_operations (xsa__ @ [x]) = Some xs;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> set (map fst xs) = set (indices (xsa__ @ [x]))", "case (Deliver e)"], ["proof (state)\nthis:\n  x = Deliver e\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>xsa__ prefix of i;\n                    apply_operations xsa__ = Some xs\\<rbrakk>\n                   \\<Longrightarrow> set (map fst xs) = set (indices xsa__);\n        xsa__ @ [x] prefix of i; apply_operations (xsa__ @ [x]) = Some xs;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> set (map fst xs) = set (indices (xsa__ @ [x]))", "moreover"], ["proof (state)\nthis:\n  x = Deliver e\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>xsa__ prefix of i;\n                    apply_operations xsa__ = Some xs\\<rbrakk>\n                   \\<Longrightarrow> set (map fst xs) = set (indices xsa__);\n        xsa__ @ [x] prefix of i; apply_operations (xsa__ @ [x]) = Some xs;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> set (map fst xs) = set (indices (xsa__ @ [x]))", "obtain a b where \"e = (a, b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b. e = (a, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  e = (a, b)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>xsa__ prefix of i;\n                    apply_operations xsa__ = Some xs\\<rbrakk>\n                   \\<Longrightarrow> set (map fst xs) = set (indices xsa__);\n        xsa__ @ [x] prefix of i; apply_operations (xsa__ @ [x]) = Some xs;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> set (map fst xs) = set (indices (xsa__ @ [x]))", "ultimately"], ["proof (chain)\npicking this:\n  x = Deliver e\n  e = (a, b)", "show ?thesis"], ["proof (prove)\nusing this:\n  x = Deliver e\n  e = (a, b)\n\ngoal (1 subgoal):\n 1. set (map fst xs) = set (indices (xsa__ @ [x]))", "using snoc assms"], ["proof (prove)\nusing this:\n  x = Deliver e\n  e = (a, b)\n  \\<lbrakk>xsa__ prefix of i; apply_operations xsa__ = Some ?xs1\\<rbrakk>\n  \\<Longrightarrow> set (map fst ?xs1) = set (indices xsa__)\n  xsa__ @ [x] prefix of i\n  apply_operations (xsa__ @ [x]) = Some xs\n  es prefix of i\n  apply_operations es = Some xs\n\ngoal (1 subgoal):\n 1. set (map fst xs) = set (indices (xsa__ @ [x]))", "apply (cases b; clarsimp split: bind_splits simp add: interp_msg_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ab ba x12 xa.\n       \\<lbrakk>b = Insert (aa, ab, ba) x12;\n        x = Deliver (a, Insert (aa, ab, ba) x12);\n        e = (a, Insert (aa, ab, ba) x12); es prefix of i;\n        apply_operations es = Some xs;\n        \\<And>xs.\n           \\<lbrakk>xsa__ prefix of i; xa = xs\\<rbrakk>\n           \\<Longrightarrow> fst ` set xs = set (indices xsa__);\n        xsa__ @ [Deliver (a, Insert (aa, ab, ba) x12)] prefix of i;\n        apply_operations xsa__ = Some xa;\n        Ordered_List.insert xa (aa, ab, ba) x12 = Some xs\\<rbrakk>\n       \\<Longrightarrow> fst ` set xs = Set.insert aa (set (indices xsa__))\n 2. \\<And>x2 xa.\n       \\<lbrakk>b = Delete x2; x = Deliver (a, Delete x2);\n        e = (a, Delete x2); es prefix of i; apply_operations es = Some xs;\n        \\<And>xs.\n           \\<lbrakk>xsa__ prefix of i; xa = xs\\<rbrakk>\n           \\<Longrightarrow> fst ` set xs = set (indices xsa__);\n        xsa__ @ [Deliver (a, Delete x2)] prefix of i;\n        apply_operations xsa__ = Some xa; delete xa x2 = Some xs\\<rbrakk>\n       \\<Longrightarrow> fst ` set xs = set (indices xsa__)", "apply (metis Un_insert_right append.right_neutral insert_preserve_indices' list.set(1)\n              option.sel prefix_of_appendD prod.sel(1) set_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2 xa.\n       \\<lbrakk>b = Delete x2; x = Deliver (a, Delete x2);\n        e = (a, Delete x2); es prefix of i; apply_operations es = Some xs;\n        \\<And>xs.\n           \\<lbrakk>xsa__ prefix of i; xa = xs\\<rbrakk>\n           \\<Longrightarrow> fst ` set xs = set (indices xsa__);\n        xsa__ @ [Deliver (a, Delete x2)] prefix of i;\n        apply_operations xsa__ = Some xa; delete xa x2 = Some xs\\<rbrakk>\n       \\<Longrightarrow> fst ` set xs = set (indices xsa__)", "by (metis delete_preserve_indices prefix_of_appendD)"], ["proof (state)\nthis:\n  set (map fst xs) = set (indices (xsa__ @ [x]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (map fst xs) = set (indices (xsa__ @ [x]))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in rga) delete_does_not_change_element_ids:\n  assumes \"es @ [Deliver (i, Delete n)] prefix of j\"\n  and \"apply_operations es = Some xs1\"\n  and \"apply_operations (es @ [Deliver (i, Delete n)]) = Some xs2\"\n  shows \"element_ids xs1 = element_ids xs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. element_ids xs1 = element_ids xs2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. element_ids xs1 = element_ids xs2", "have \"indices es = indices (es @ [Deliver (i, Delete n)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indices es = indices (es @ [Deliver (i, Delete n)])", "by simp"], ["proof (state)\nthis:\n  indices es = indices (es @ [Deliver (i, Delete n)])\n\ngoal (1 subgoal):\n 1. element_ids xs1 = element_ids xs2", "then"], ["proof (chain)\npicking this:\n  indices es = indices (es @ [Deliver (i, Delete n)])", "show ?thesis"], ["proof (prove)\nusing this:\n  indices es = indices (es @ [Deliver (i, Delete n)])\n\ngoal (1 subgoal):\n 1. element_ids xs1 = element_ids xs2", "by (metis (no_types) assms prefix_of_appendD rga.apply_opers_idx_elems rga_axioms)"], ["proof (state)\nthis:\n  element_ids xs1 = element_ids xs2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in rga) someone_inserted_id:\n  assumes \"es @ [Deliver (i, Insert (k, v, f) n)] prefix of j\"\n  and \"apply_operations es = Some xs1\"\n  and \"apply_operations (es @ [Deliver (i, Insert (k, v, f) n)]) = Some xs2\"\n  and \"a \\<in> element_ids xs2\"\n  and \"a \\<noteq> k\"\n  shows \"a \\<in> element_ids xs1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> element_ids xs1", "using assms apply_opers_idx_elems"], ["proof (prove)\nusing this:\n  es @ [Deliver (i, Insert (k, v, f) n)] prefix of j\n  apply_operations es = Some xs1\n  apply_operations (es @ [Deliver (i, Insert (k, v, f) n)]) = Some xs2\n  a \\<in> element_ids xs2\n  a \\<noteq> k\n  \\<lbrakk>?es prefix of ?i; apply_operations ?es = Some ?xs\\<rbrakk>\n  \\<Longrightarrow> element_ids ?xs = set (indices ?es)\n\ngoal (1 subgoal):\n 1. a \\<in> element_ids xs1", "by auto"], ["", "lemma (in rga) deliver_insert_exists:\n  assumes \"es prefix of j\"\n      and \"apply_operations es = Some xs\"\n      and \"a \\<in> element_ids xs\"\n    shows \"\\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set es", "using assms"], ["proof (prove)\nusing this:\n  es prefix of j\n  apply_operations es = Some xs\n  a \\<in> element_ids xs\n\ngoal (1 subgoal):\n 1. \\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set es", "unfolding element_ids_def"], ["proof (prove)\nusing this:\n  es prefix of j\n  apply_operations es = Some xs\n  a \\<in> set (map fst xs)\n\ngoal (1 subgoal):\n 1. \\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set es", "proof(induction es arbitrary: xs rule: rev_induct, clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs xsa.\n       \\<lbrakk>\\<And>xsa.\n                   \\<lbrakk>xs prefix of j; apply_operations xs = Some xsa;\n                    a \\<in> set (map fst xsa)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i v f n.\n  Deliver (i, Insert (a, v, f) n) \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some xsa;\n        a \\<in> set (map fst xsa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])", "case (snoc x xs ys)"], ["proof (state)\nthis:\n  \\<lbrakk>xs prefix of j; apply_operations xs = Some ?xs1;\n   a \\<in> set (map fst ?xs1)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i v f n.\n                       Deliver (i, Insert (a, v, f) n) \\<in> set xs\n  xs @ [x] prefix of j\n  apply_operations (xs @ [x]) = Some ys\n  a \\<in> set (map fst ys)\n\ngoal (1 subgoal):\n 1. \\<And>x xs xsa.\n       \\<lbrakk>\\<And>xsa.\n                   \\<lbrakk>xs prefix of j; apply_operations xs = Some xsa;\n                    a \\<in> set (map fst xsa)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i v f n.\n  Deliver (i, Insert (a, v, f) n) \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some xsa;\n        a \\<in> set (map fst xsa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>xs prefix of j; apply_operations xs = Some ?xs1;\n   a \\<in> set (map fst ?xs1)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i v f n.\n                       Deliver (i, Insert (a, v, f) n) \\<in> set xs\n  xs @ [x] prefix of j\n  apply_operations (xs @ [x]) = Some ys\n  a \\<in> set (map fst ys)\n\ngoal (1 subgoal):\n 1. \\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set (xs @ [x])", "proof (cases x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>xs prefix of j; apply_operations xs = Some xs;\n                    a \\<in> set (map fst xs)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i v f n.\n  Deliver (i, Insert (a, v, f) n) \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some ys;\n        a \\<in> set (map fst ys); x = Broadcast x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])\n 2. \\<And>x2.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>xs prefix of j; apply_operations xs = Some xs;\n                    a \\<in> set (map fst xs)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i v f n.\n  Deliver (i, Insert (a, v, f) n) \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some ys;\n        a \\<in> set (map fst ys); x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])", "case (Broadcast e)"], ["proof (state)\nthis:\n  x = Broadcast e\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>xs prefix of j; apply_operations xs = Some xs;\n                    a \\<in> set (map fst xs)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i v f n.\n  Deliver (i, Insert (a, v, f) n) \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some ys;\n        a \\<in> set (map fst ys); x = Broadcast x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])\n 2. \\<And>x2.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>xs prefix of j; apply_operations xs = Some xs;\n                    a \\<in> set (map fst xs)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i v f n.\n  Deliver (i, Insert (a, v, f) n) \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some ys;\n        a \\<in> set (map fst ys); x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])", "thus ?thesis"], ["proof (prove)\nusing this:\n  x = Broadcast e\n\ngoal (1 subgoal):\n 1. \\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set (xs @ [x])", "using snoc"], ["proof (prove)\nusing this:\n  x = Broadcast e\n  \\<lbrakk>xs prefix of j; apply_operations xs = Some ?xs1;\n   a \\<in> set (map fst ?xs1)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i v f n.\n                       Deliver (i, Insert (a, v, f) n) \\<in> set xs\n  xs @ [x] prefix of j\n  apply_operations (xs @ [x]) = Some ys\n  a \\<in> set (map fst ys)\n\ngoal (1 subgoal):\n 1. \\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set (xs @ [x])", "by(clarsimp, metis image_eqI prefix_of_appendD prod.sel(1))"], ["proof (state)\nthis:\n  \\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set (xs @ [x])\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>xs prefix of j; apply_operations xs = Some xs;\n                    a \\<in> set (map fst xs)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i v f n.\n  Deliver (i, Insert (a, v, f) n) \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some ys;\n        a \\<in> set (map fst ys); x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>xs prefix of j; apply_operations xs = Some xs;\n                    a \\<in> set (map fst xs)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i v f n.\n  Deliver (i, Insert (a, v, f) n) \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some ys;\n        a \\<in> set (map fst ys); x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])", "case (Deliver e)"], ["proof (state)\nthis:\n  x = Deliver e\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>xs prefix of j; apply_operations xs = Some xs;\n                    a \\<in> set (map fst xs)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i v f n.\n  Deliver (i, Insert (a, v, f) n) \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some ys;\n        a \\<in> set (map fst ys); x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])", "moreover"], ["proof (state)\nthis:\n  x = Deliver e\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>xs prefix of j; apply_operations xs = Some xs;\n                    a \\<in> set (map fst xs)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i v f n.\n  Deliver (i, Insert (a, v, f) n) \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some ys;\n        a \\<in> set (map fst ys); x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])", "then"], ["proof (chain)\npicking this:\n  x = Deliver e", "obtain xs' where *: \"apply_operations xs = Some xs'\""], ["proof (prove)\nusing this:\n  x = Deliver e\n\ngoal (1 subgoal):\n 1. (\\<And>xs'.\n        apply_operations xs = Some xs' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using snoc"], ["proof (prove)\nusing this:\n  x = Deliver e\n  \\<lbrakk>xs prefix of j; apply_operations xs = Some ?xs1;\n   a \\<in> set (map fst ?xs1)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i v f n.\n                       Deliver (i, Insert (a, v, f) n) \\<in> set xs\n  xs @ [x] prefix of j\n  apply_operations (xs @ [x]) = Some ys\n  a \\<in> set (map fst ys)\n\ngoal (1 subgoal):\n 1. (\\<And>xs'.\n        apply_operations xs = Some xs' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  apply_operations xs = Some xs'\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>xs prefix of j; apply_operations xs = Some xs;\n                    a \\<in> set (map fst xs)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i v f n.\n  Deliver (i, Insert (a, v, f) n) \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some ys;\n        a \\<in> set (map fst ys); x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])", "moreover"], ["proof (state)\nthis:\n  apply_operations xs = Some xs'\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>xs prefix of j; apply_operations xs = Some xs;\n                    a \\<in> set (map fst xs)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i v f n.\n  Deliver (i, Insert (a, v, f) n) \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some ys;\n        a \\<in> set (map fst ys); x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])", "obtain k v where **: \"e = (k, v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k v. e = (k, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  e = (k, v)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>xs prefix of j; apply_operations xs = Some xs;\n                    a \\<in> set (map fst xs)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i v f n.\n  Deliver (i, Insert (a, v, f) n) \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some ys;\n        a \\<in> set (map fst ys); x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])", "ultimately"], ["proof (chain)\npicking this:\n  x = Deliver e\n  apply_operations xs = Some xs'\n  e = (k, v)", "show ?thesis"], ["proof (prove)\nusing this:\n  x = Deliver e\n  apply_operations xs = Some xs'\n  e = (k, v)\n\ngoal (1 subgoal):\n 1. \\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set (xs @ [x])", "using assms snoc"], ["proof (prove)\nusing this:\n  x = Deliver e\n  apply_operations xs = Some xs'\n  e = (k, v)\n  es prefix of j\n  apply_operations es = Some xs\n  a \\<in> element_ids xs\n  \\<lbrakk>xs prefix of j; apply_operations xs = Some ?xs1;\n   a \\<in> set (map fst ?xs1)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i v f n.\n                       Deliver (i, Insert (a, v, f) n) \\<in> set xs\n  xs @ [x] prefix of j\n  apply_operations (xs @ [x]) = Some ys\n  a \\<in> set (map fst ys)\n\ngoal (1 subgoal):\n 1. \\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set (xs @ [x])", "proof (cases v)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>x = Deliver e; apply_operations xs = Some xs'; e = (k, v);\n        es prefix of j; apply_operations es = Some xs;\n        a \\<in> element_ids xs;\n        \\<And>xs.\n           \\<lbrakk>xs prefix of j; apply_operations xs = Some xs;\n            a \\<in> set (map fst xs)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i v f n.\n                                Deliver (i, Insert (a, v, f) n)\n                                \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some ys;\n        a \\<in> set (map fst ys); v = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])\n 2. \\<And>x2.\n       \\<lbrakk>x = Deliver e; apply_operations xs = Some xs'; e = (k, v);\n        es prefix of j; apply_operations es = Some xs;\n        a \\<in> element_ids xs;\n        \\<And>xs.\n           \\<lbrakk>xs prefix of j; apply_operations xs = Some xs;\n            a \\<in> set (map fst xs)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i v f n.\n                                Deliver (i, Insert (a, v, f) n)\n                                \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some ys;\n        a \\<in> set (map fst ys); v = Delete x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])", "case (Insert el _)"], ["proof (state)\nthis:\n  v = Insert el x12_\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>x = Deliver e; apply_operations xs = Some xs'; e = (k, v);\n        es prefix of j; apply_operations es = Some xs;\n        a \\<in> element_ids xs;\n        \\<And>xs.\n           \\<lbrakk>xs prefix of j; apply_operations xs = Some xs;\n            a \\<in> set (map fst xs)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i v f n.\n                                Deliver (i, Insert (a, v, f) n)\n                                \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some ys;\n        a \\<in> set (map fst ys); v = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])\n 2. \\<And>x2.\n       \\<lbrakk>x = Deliver e; apply_operations xs = Some xs'; e = (k, v);\n        es prefix of j; apply_operations es = Some xs;\n        a \\<in> element_ids xs;\n        \\<And>xs.\n           \\<lbrakk>xs prefix of j; apply_operations xs = Some xs;\n            a \\<in> set (map fst xs)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i v f n.\n                                Deliver (i, Insert (a, v, f) n)\n                                \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some ys;\n        a \\<in> set (map fst ys); v = Delete x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])", "thus ?thesis"], ["proof (prove)\nusing this:\n  v = Insert el x12_\n\ngoal (1 subgoal):\n 1. \\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set (xs @ [x])", "using snoc Deliver * **"], ["proof (prove)\nusing this:\n  v = Insert el x12_\n  \\<lbrakk>xs prefix of j; apply_operations xs = Some ?xs1;\n   a \\<in> set (map fst ?xs1)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i v f n.\n                       Deliver (i, Insert (a, v, f) n) \\<in> set xs\n  xs @ [x] prefix of j\n  apply_operations (xs @ [x]) = Some ys\n  a \\<in> set (map fst ys)\n  x = Deliver e\n  apply_operations xs = Some xs'\n  e = (k, v)\n\ngoal (1 subgoal):\n 1. \\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set (xs @ [x])", "apply (cases el; cases \"fst el = a\"; clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b c ab ba.\n       \\<lbrakk>el = (a, b, c); v = Insert (a, b, c) x12_;\n        \\<And>xs.\n           \\<lbrakk>xs prefix of j; xs' = xs; a \\<in> fst ` set xs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i v f n.\n                                Deliver (i, Insert (a, v, f) n)\n                                \\<in> set xs;\n        xs @ [Deliver (k, Insert (a, b, c) x12_)] prefix of j;\n        interp_msg (k, Insert (a, b, c) x12_) xs' = Some ys;\n        x = Deliver (k, Insert (a, b, c) x12_);\n        apply_operations xs = Some xs'; e = (k, Insert (a, b, c) x12_);\n        (a, ab, ba) \\<in> set ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            i = k \\<and>\n                            v = b \\<and> f = c \\<and> n = x12_ \\<or>\n                            Deliver (i, Insert (a, v, f) n) \\<in> set xs\n 2. \\<And>aa b c ab ba.\n       \\<lbrakk>xs @ [Deliver (k, Insert (aa, b, c) x12_)] prefix of j;\n        interp_msg (k, Insert (aa, b, c) x12_) xs' = Some ys;\n        el = (aa, b, c); aa \\<noteq> a; v = Insert (aa, b, c) x12_;\n        \\<And>xs.\n           \\<lbrakk>xs prefix of j; xs' = xs; a \\<in> fst ` set xs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i v f n.\n                                Deliver (i, Insert (a, v, f) n)\n                                \\<in> set xs;\n        x = Deliver (k, Insert (aa, b, c) x12_);\n        apply_operations xs = Some xs'; e = (k, Insert (aa, b, c) x12_);\n        (a, ab, ba) \\<in> set ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n) \\<in> set xs", "apply (blast, metis (no_types, lifting) element_ids_def prefix_of_appendD set_map snoc.prems(2)\n                      snoc.prems(3) someone_inserted_id)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set (xs @ [x])\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>x = Deliver e; apply_operations xs = Some xs'; e = (k, v);\n        es prefix of j; apply_operations es = Some xs;\n        a \\<in> element_ids xs;\n        \\<And>xs.\n           \\<lbrakk>xs prefix of j; apply_operations xs = Some xs;\n            a \\<in> set (map fst xs)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i v f n.\n                                Deliver (i, Insert (a, v, f) n)\n                                \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some ys;\n        a \\<in> set (map fst ys); v = Delete x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>x = Deliver e; apply_operations xs = Some xs'; e = (k, v);\n        es prefix of j; apply_operations es = Some xs;\n        a \\<in> element_ids xs;\n        \\<And>xs.\n           \\<lbrakk>xs prefix of j; apply_operations xs = Some xs;\n            a \\<in> set (map fst xs)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i v f n.\n                                Deliver (i, Insert (a, v, f) n)\n                                \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some ys;\n        a \\<in> set (map fst ys); v = Delete x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])", "case (Delete _)"], ["proof (state)\nthis:\n  v = Delete x2_\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>x = Deliver e; apply_operations xs = Some xs'; e = (k, v);\n        es prefix of j; apply_operations es = Some xs;\n        a \\<in> element_ids xs;\n        \\<And>xs.\n           \\<lbrakk>xs prefix of j; apply_operations xs = Some xs;\n            a \\<in> set (map fst xs)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i v f n.\n                                Deliver (i, Insert (a, v, f) n)\n                                \\<in> set xs;\n        xs @ [x] prefix of j; apply_operations (xs @ [x]) = Some ys;\n        a \\<in> set (map fst ys); v = Delete x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n)\n                            \\<in> set (xs @ [x])", "thus ?thesis"], ["proof (prove)\nusing this:\n  v = Delete x2_\n\ngoal (1 subgoal):\n 1. \\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set (xs @ [x])", "using snoc Deliver **"], ["proof (prove)\nusing this:\n  v = Delete x2_\n  \\<lbrakk>xs prefix of j; apply_operations xs = Some ?xs1;\n   a \\<in> set (map fst ?xs1)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i v f n.\n                       Deliver (i, Insert (a, v, f) n) \\<in> set xs\n  xs @ [x] prefix of j\n  apply_operations (xs @ [x]) = Some ys\n  a \\<in> set (map fst ys)\n  x = Deliver e\n  e = (k, v)\n\ngoal (1 subgoal):\n 1. \\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set (xs @ [x])", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>v = Delete x2_;\n        \\<And>xs.\n           \\<lbrakk>xs prefix of j; apply_operations xs = Some xs;\n            a \\<in> fst ` set xs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>i v f n.\n                                Deliver (i, Insert (a, v, f) n)\n                                \\<in> set xs;\n        xs @ [Deliver (k, Delete x2_)] prefix of j;\n        apply_operations xs \\<bind> interp_msg (k, Delete x2_) = Some ys;\n        x = Deliver (k, Delete x2_); e = (k, Delete x2_);\n        (a, aa, b) \\<in> set ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n) \\<in> set xs", "apply(drule prefix_of_appendD, clarsimp simp add: bind_eq_Some_conv interp_msg_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b y.\n       \\<lbrakk>v = Delete x2_;\n        a \\<in> fst ` set y \\<Longrightarrow>\n        \\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set xs;\n        x = Deliver (k, Delete x2_); e = (k, Delete x2_);\n        (a, aa, b) \\<in> set ys; xs prefix of j;\n        apply_operations xs = Some y; delete y x2_ = Some ys\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i v f n.\n                            Deliver (i, Insert (a, v, f) n) \\<in> set xs", "apply(metis delete_preserve_indices image_eqI prod.sel(1))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set (xs @ [x])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set (xs @ [x])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>i v f n. Deliver (i, Insert (a, v, f) n) \\<in> set (xs @ [x])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in rga) insert_in_apply_set:\n  assumes \"es @ [Deliver (i, Insert e (Some a))] prefix of j\"\n      and \"Deliver (i', Insert e' n) \\<in> set es\"\n      and \"apply_operations es = Some s\"\n    shows \"fst e' \\<in> element_ids s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst e' \\<in> element_ids s", "using assms apply_opers_idx_elems idx_in_elem_inserted prefix_of_appendD"], ["proof (prove)\nusing this:\n  es @ [Deliver (i, Insert e (Some a))] prefix of j\n  Deliver (i', Insert e' n) \\<in> set es\n  apply_operations es = Some s\n  \\<lbrakk>?es prefix of ?i; apply_operations ?es = Some ?xs\\<rbrakk>\n  \\<Longrightarrow> element_ids ?xs = set (indices ?es)\n  Deliver (?i, Insert ?e ?n) \\<in> set ?xs \\<Longrightarrow>\n  fst ?e \\<in> set (indices ?xs)\n  ?xs @ ?ys prefix of ?i \\<Longrightarrow> ?xs prefix of ?i\n\ngoal (1 subgoal):\n 1. fst e' \\<in> element_ids s", "by blast"], ["", "lemma (in rga) insert_msg_id:\n  assumes \"Broadcast (i, Insert e n) \\<in> set (history j)\"\n  shows \"fst e = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst e = i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fst e = i", "obtain state where 1: \"valid_rga_msg state (i, Insert e n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>state.\n        valid_rga_msg state (i, Insert e n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms broadcast_is_valid"], ["proof (prove)\nusing this:\n  Broadcast (i, Insert e n) \\<in> set (history j)\n  Broadcast ?m \\<in> set (history ?i) \\<Longrightarrow>\n  \\<exists>state. valid_rga_msg state ?m\n\ngoal (1 subgoal):\n 1. (\\<And>state.\n        valid_rga_msg state (i, Insert e n) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  valid_rga_msg state (i, Insert e n)\n\ngoal (1 subgoal):\n 1. fst e = i", "thus \"fst e = i\""], ["proof (prove)\nusing this:\n  valid_rga_msg state (i, Insert e n)\n\ngoal (1 subgoal):\n 1. fst e = i", "by(clarsimp simp add: valid_rga_msg_def split: option.split_asm)"], ["proof (state)\nthis:\n  fst e = i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in rga) allowed_insert:\n  assumes \"Broadcast (i, Insert e n) \\<in> set (history j)\"\n  shows \"n = None \\<or> (\\<exists>i' e' n'. n = Some (fst e') \\<and> Deliver (i', Insert e' n') \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = None \\<or>\n    (\\<exists>i' e' n'.\n        n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n        \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n = None \\<or>\n    (\\<exists>i' e' n'.\n        n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n        \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))", "obtain pre where 1: \"pre @ [Broadcast (i, Insert e n)] prefix of j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>pre.\n        pre @ [Broadcast (i, Insert e n)] prefix of j \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms events_before_exist"], ["proof (prove)\nusing this:\n  Broadcast (i, Insert e n) \\<in> set (history j)\n  ?x \\<in> set (history ?i) \\<Longrightarrow>\n  \\<exists>pre. pre @ [?x] prefix of ?i\n\ngoal (1 subgoal):\n 1. (\\<And>pre.\n        pre @ [Broadcast (i, Insert e n)] prefix of j \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  pre @ [Broadcast (i, Insert e n)] prefix of j\n\ngoal (1 subgoal):\n 1. n = None \\<or>\n    (\\<exists>i' e' n'.\n        n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n        \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))", "from this"], ["proof (chain)\npicking this:\n  pre @ [Broadcast (i, Insert e n)] prefix of j", "obtain state where 2: \"apply_operations pre = Some state\" and 3: \"valid_rga_msg state (i, Insert e n)\""], ["proof (prove)\nusing this:\n  pre @ [Broadcast (i, Insert e n)] prefix of j\n\ngoal (1 subgoal):\n 1. (\\<And>state.\n        \\<lbrakk>apply_operations pre = Some state;\n         valid_rga_msg state (i, Insert e n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using broadcast_only_valid_msgs"], ["proof (prove)\nusing this:\n  pre @ [Broadcast (i, Insert e n)] prefix of j\n  ?pre @ [Broadcast ?m] prefix of ?i \\<Longrightarrow>\n  \\<exists>state.\n     apply_operations ?pre = Some state \\<and> valid_rga_msg state ?m\n\ngoal (1 subgoal):\n 1. (\\<And>state.\n        \\<lbrakk>apply_operations pre = Some state;\n         valid_rga_msg state (i, Insert e n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  apply_operations pre = Some state\n  valid_rga_msg state (i, Insert e n)\n\ngoal (1 subgoal):\n 1. n = None \\<or>\n    (\\<exists>i' e' n'.\n        n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n        \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))", "show \"n = None \\<or> (\\<exists>i' e' n'. n = Some (fst e') \\<and> Deliver (i', Insert e' n') \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = None \\<or>\n    (\\<exists>i' e' n'.\n        n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n        \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))", "proof(cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = None \\<Longrightarrow>\n    n = None \\<or>\n    (\\<exists>i' e' n'.\n        n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n        \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))\n 2. \\<And>a.\n       n = Some a \\<Longrightarrow>\n       n = None \\<or>\n       (\\<exists>i' e' n'.\n           n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n           \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))", "fix a"], ["proof (state)\ngoal (2 subgoals):\n 1. n = None \\<Longrightarrow>\n    n = None \\<or>\n    (\\<exists>i' e' n'.\n        n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n        \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))\n 2. \\<And>a.\n       n = Some a \\<Longrightarrow>\n       n = None \\<or>\n       (\\<exists>i' e' n'.\n           n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n           \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))", "assume 4: \"n = Some a\""], ["proof (state)\nthis:\n  n = Some a\n\ngoal (2 subgoals):\n 1. n = None \\<Longrightarrow>\n    n = None \\<or>\n    (\\<exists>i' e' n'.\n        n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n        \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))\n 2. \\<And>a.\n       n = Some a \\<Longrightarrow>\n       n = None \\<or>\n       (\\<exists>i' e' n'.\n           n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n           \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))", "hence \"a \\<in> element_ids state\" and 5: \"fst e = i\""], ["proof (prove)\nusing this:\n  n = Some a\n\ngoal (1 subgoal):\n 1. a \\<in> element_ids state &&& fst e = i", "using 3"], ["proof (prove)\nusing this:\n  n = Some a\n  valid_rga_msg state (i, Insert e n)\n\ngoal (1 subgoal):\n 1. a \\<in> element_ids state &&& fst e = i", "by(clarsimp simp add: valid_rga_msg_def)+"], ["proof (state)\nthis:\n  a \\<in> element_ids state\n  fst e = i\n\ngoal (2 subgoals):\n 1. n = None \\<Longrightarrow>\n    n = None \\<or>\n    (\\<exists>i' e' n'.\n        n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n        \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))\n 2. \\<And>a.\n       n = Some a \\<Longrightarrow>\n       n = None \\<or>\n       (\\<exists>i' e' n'.\n           n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n           \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))", "from this"], ["proof (chain)\npicking this:\n  a \\<in> element_ids state\n  fst e = i", "have \"\\<exists>i' v' f' n'. Deliver (i', Insert (a, v', f') n') \\<in> set pre\""], ["proof (prove)\nusing this:\n  a \\<in> element_ids state\n  fst e = i\n\ngoal (1 subgoal):\n 1. \\<exists>i' v' f' n'. Deliver (i', Insert (a, v', f') n') \\<in> set pre", "using deliver_insert_exists 2 1"], ["proof (prove)\nusing this:\n  a \\<in> element_ids state\n  fst e = i\n  \\<lbrakk>?es prefix of ?j; apply_operations ?es = Some ?xs;\n   ?a \\<in> element_ids ?xs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i v f n.\n                       Deliver (i, Insert (?a, v, f) n) \\<in> set ?es\n  apply_operations pre = Some state\n  pre @ [Broadcast (i, Insert e n)] prefix of j\n\ngoal (1 subgoal):\n 1. \\<exists>i' v' f' n'. Deliver (i', Insert (a, v', f') n') \\<in> set pre", "by blast"], ["proof (state)\nthis:\n  \\<exists>i' v' f' n'. Deliver (i', Insert (a, v', f') n') \\<in> set pre\n\ngoal (2 subgoals):\n 1. n = None \\<Longrightarrow>\n    n = None \\<or>\n    (\\<exists>i' e' n'.\n        n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n        \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))\n 2. \\<And>a.\n       n = Some a \\<Longrightarrow>\n       n = None \\<or>\n       (\\<exists>i' e' n'.\n           n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n           \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))", "thus \"n = None \\<or> (\\<exists>i' e' n'. n = Some (fst e') \\<and> Deliver (i', Insert e' n') \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))\""], ["proof (prove)\nusing this:\n  \\<exists>i' v' f' n'. Deliver (i', Insert (a, v', f') n') \\<in> set pre\n\ngoal (1 subgoal):\n 1. n = None \\<or>\n    (\\<exists>i' e' n'.\n        n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n        \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))", "using events_in_local_order 1 4 5"], ["proof (prove)\nusing this:\n  \\<exists>i' v' f' n'. Deliver (i', Insert (a, v', f') n') \\<in> set pre\n  \\<lbrakk>?pre @ [?e2.0] prefix of ?i; ?e1.0 \\<in> set ?pre\\<rbrakk>\n  \\<Longrightarrow> ?e1.0 \\<sqsubset>\\<^sup>?i ?e2.0\n  pre @ [Broadcast (i, Insert e n)] prefix of j\n  n = Some a\n  fst e = i\n\ngoal (1 subgoal):\n 1. n = None \\<or>\n    (\\<exists>i' e' n'.\n        n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n        \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))", "by(metis fst_conv)"], ["proof (state)\nthis:\n  n = None \\<or>\n  (\\<exists>i' e' n'.\n      n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n      \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))\n\ngoal (1 subgoal):\n 1. n = None \\<Longrightarrow>\n    n = None \\<or>\n    (\\<exists>i' e' n'.\n        n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n        \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))", "qed simp"], ["proof (state)\nthis:\n  n = None \\<or>\n  (\\<exists>i' e' n'.\n      n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n      \\<sqsubset>\\<^sup>j Broadcast (i, Insert e n))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in rga) allowed_delete:\n  assumes \"Broadcast (i, Delete x) \\<in> set (history j)\"\n  shows \"\\<exists>i' n' v b. Deliver (i', Insert (x, v, b) n') \\<sqsubset>\\<^sup>j Broadcast (i, Delete x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i' n' v b. Deliver (i', Insert (x, v, b) n')\n       \\<sqsubset>\\<^sup>j Broadcast (i, Delete x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i' n' v b. Deliver (i', Insert (x, v, b) n')\n       \\<sqsubset>\\<^sup>j Broadcast (i, Delete x)", "obtain pre where 1: \"pre @ [Broadcast (i, Delete x)] prefix of j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>pre.\n        pre @ [Broadcast (i, Delete x)] prefix of j \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms events_before_exist"], ["proof (prove)\nusing this:\n  Broadcast (i, Delete x) \\<in> set (history j)\n  ?x \\<in> set (history ?i) \\<Longrightarrow>\n  \\<exists>pre. pre @ [?x] prefix of ?i\n\ngoal (1 subgoal):\n 1. (\\<And>pre.\n        pre @ [Broadcast (i, Delete x)] prefix of j \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  pre @ [Broadcast (i, Delete x)] prefix of j\n\ngoal (1 subgoal):\n 1. \\<exists>i' n' v b. Deliver (i', Insert (x, v, b) n')\n       \\<sqsubset>\\<^sup>j Broadcast (i, Delete x)", "from this"], ["proof (chain)\npicking this:\n  pre @ [Broadcast (i, Delete x)] prefix of j", "obtain state where 2: \"apply_operations pre = Some state\"\n      and \"valid_rga_msg state (i, Delete x)\""], ["proof (prove)\nusing this:\n  pre @ [Broadcast (i, Delete x)] prefix of j\n\ngoal (1 subgoal):\n 1. (\\<And>state.\n        \\<lbrakk>apply_operations pre = Some state;\n         valid_rga_msg state (i, Delete x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using broadcast_only_valid_msgs"], ["proof (prove)\nusing this:\n  pre @ [Broadcast (i, Delete x)] prefix of j\n  ?pre @ [Broadcast ?m] prefix of ?i \\<Longrightarrow>\n  \\<exists>state.\n     apply_operations ?pre = Some state \\<and> valid_rga_msg state ?m\n\ngoal (1 subgoal):\n 1. (\\<And>state.\n        \\<lbrakk>apply_operations pre = Some state;\n         valid_rga_msg state (i, Delete x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  apply_operations pre = Some state\n  valid_rga_msg state (i, Delete x)\n\ngoal (1 subgoal):\n 1. \\<exists>i' n' v b. Deliver (i', Insert (x, v, b) n')\n       \\<sqsubset>\\<^sup>j Broadcast (i, Delete x)", "hence \"x \\<in> element_ids state\""], ["proof (prove)\nusing this:\n  apply_operations pre = Some state\n  valid_rga_msg state (i, Delete x)\n\ngoal (1 subgoal):\n 1. x \\<in> element_ids state", "using apply_opers_idx_elems"], ["proof (prove)\nusing this:\n  apply_operations pre = Some state\n  valid_rga_msg state (i, Delete x)\n  \\<lbrakk>?es prefix of ?i; apply_operations ?es = Some ?xs\\<rbrakk>\n  \\<Longrightarrow> element_ids ?xs = set (indices ?es)\n\ngoal (1 subgoal):\n 1. x \\<in> element_ids state", "by(simp add: valid_rga_msg_def)"], ["proof (state)\nthis:\n  x \\<in> element_ids state\n\ngoal (1 subgoal):\n 1. \\<exists>i' n' v b. Deliver (i', Insert (x, v, b) n')\n       \\<sqsubset>\\<^sup>j Broadcast (i, Delete x)", "hence \"\\<exists>i' v' f' n'. Deliver (i', Insert (x, v', f') n') \\<in> set pre\""], ["proof (prove)\nusing this:\n  x \\<in> element_ids state\n\ngoal (1 subgoal):\n 1. \\<exists>i' v' f' n'. Deliver (i', Insert (x, v', f') n') \\<in> set pre", "using deliver_insert_exists 1 2"], ["proof (prove)\nusing this:\n  x \\<in> element_ids state\n  \\<lbrakk>?es prefix of ?j; apply_operations ?es = Some ?xs;\n   ?a \\<in> element_ids ?xs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i v f n.\n                       Deliver (i, Insert (?a, v, f) n) \\<in> set ?es\n  pre @ [Broadcast (i, Delete x)] prefix of j\n  apply_operations pre = Some state\n\ngoal (1 subgoal):\n 1. \\<exists>i' v' f' n'. Deliver (i', Insert (x, v', f') n') \\<in> set pre", "by blast"], ["proof (state)\nthis:\n  \\<exists>i' v' f' n'. Deliver (i', Insert (x, v', f') n') \\<in> set pre\n\ngoal (1 subgoal):\n 1. \\<exists>i' n' v b. Deliver (i', Insert (x, v, b) n')\n       \\<sqsubset>\\<^sup>j Broadcast (i, Delete x)", "thus \"\\<exists>i' n' v b. Deliver (i', Insert (x, v, b) n') \\<sqsubset>\\<^sup>j Broadcast (i, Delete x)\""], ["proof (prove)\nusing this:\n  \\<exists>i' v' f' n'. Deliver (i', Insert (x, v', f') n') \\<in> set pre\n\ngoal (1 subgoal):\n 1. \\<exists>i' n' v b. Deliver (i', Insert (x, v, b) n')\n       \\<sqsubset>\\<^sup>j Broadcast (i, Delete x)", "using events_in_local_order 1"], ["proof (prove)\nusing this:\n  \\<exists>i' v' f' n'. Deliver (i', Insert (x, v', f') n') \\<in> set pre\n  \\<lbrakk>?pre @ [?e2.0] prefix of ?i; ?e1.0 \\<in> set ?pre\\<rbrakk>\n  \\<Longrightarrow> ?e1.0 \\<sqsubset>\\<^sup>?i ?e2.0\n  pre @ [Broadcast (i, Delete x)] prefix of j\n\ngoal (1 subgoal):\n 1. \\<exists>i' n' v b. Deliver (i', Insert (x, v, b) n')\n       \\<sqsubset>\\<^sup>j Broadcast (i, Delete x)", "by blast"], ["proof (state)\nthis:\n  \\<exists>i' n' v b. Deliver (i', Insert (x, v, b) n') \\<sqsubset>\\<^sup>j\n     Broadcast (i, Delete x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in rga) insert_id_unique:\n  assumes \"fst e1 = fst e2\"\n  and \"Broadcast (i1, Insert e1 n1) \\<in> set (history i)\"\n  and \"Broadcast (i2, Insert e2 n2) \\<in> set (history j)\"\n  shows \"Insert e1 n1 = Insert e2 n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Insert e1 n1 = Insert e2 n2", "using assms insert_msg_id msg_id_unique Pair_inject fst_conv"], ["proof (prove)\nusing this:\n  fst e1 = fst e2\n  Broadcast (i1, Insert e1 n1) \\<in> set (history i)\n  Broadcast (i2, Insert e2 n2) \\<in> set (history j)\n  Broadcast (?i, Insert ?e ?n) \\<in> set (history ?j) \\<Longrightarrow>\n  fst ?e = ?i\n  \\<lbrakk>Broadcast ?m1.0 \\<in> set (history ?i);\n   Broadcast ?m2.0 \\<in> set (history ?j); fst ?m1.0 = fst ?m2.0\\<rbrakk>\n  \\<Longrightarrow> ?i = ?j \\<and> ?m1.0 = ?m2.0\n  \\<lbrakk>(?a, ?b) = (?a', ?b');\n   \\<lbrakk>?a = ?a'; ?b = ?b'\\<rbrakk> \\<Longrightarrow> ?R\\<rbrakk>\n  \\<Longrightarrow> ?R\n  fst (?x1.0, ?x2.0) = ?x1.0\n\ngoal (1 subgoal):\n 1. Insert e1 n1 = Insert e2 n2", "by metis"], ["", "lemma (in rga) allowed_delete_deliver:\n  assumes \"Deliver (i, Delete x) \\<in> set (history j)\"\n    shows \"\\<exists>i' n' v b. Deliver (i', Insert (x, v, b) n') \\<sqsubset>\\<^sup>j Deliver (i, Delete x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i' n' v b. Deliver (i', Insert (x, v, b) n')\n       \\<sqsubset>\\<^sup>j Deliver (i, Delete x)", "using assms"], ["proof (prove)\nusing this:\n  Deliver (i, Delete x) \\<in> set (history j)\n\ngoal (1 subgoal):\n 1. \\<exists>i' n' v b. Deliver (i', Insert (x, v, b) n')\n       \\<sqsubset>\\<^sup>j Deliver (i, Delete x)", "by (meson allowed_delete bot_least causal_broadcast delivery_has_a_cause insert_subset)"], ["", "lemma (in rga) allowed_delete_deliver_in_set:\n  assumes \"(es@[Deliver (i, Delete m)]) prefix of j\"\n  shows   \"\\<exists>i' n v b. Deliver (i', Insert (m, v, b) n) \\<in> set es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i' n v b. Deliver (i', Insert (m, v, b) n) \\<in> set es", "by(metis (no_types, lifting) Un_insert_right insert_iff list.simps(15) assms\n    local_order_prefix_closed_last rga.allowed_delete_deliver rga_axioms set_append subsetCE prefix_to_carriers)"], ["", "lemma (in rga) allowed_insert_deliver:\n  assumes \"Deliver (i, Insert e n) \\<in> set (history j)\"\n  shows   \"n = None \\<or> (\\<exists>i' n' n'' v b. n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'') \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = None \\<or>\n    (\\<exists>i' n' n'' v b.\n        n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n        \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n = None \\<or>\n    (\\<exists>i' n' n'' v b.\n        n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n        \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))", "obtain ja where 1: \"Broadcast (i, Insert e n) \\<in> set (history ja)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ja.\n        Broadcast (i, Insert e n) \\<in> set (history ja) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms delivery_has_a_cause"], ["proof (prove)\nusing this:\n  Deliver (i, Insert e n) \\<in> set (history j)\n  Deliver ?m \\<in> set (history ?i) \\<Longrightarrow>\n  \\<exists>j. Broadcast ?m \\<in> set (history j)\n\ngoal (1 subgoal):\n 1. (\\<And>ja.\n        Broadcast (i, Insert e n) \\<in> set (history ja) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Broadcast (i, Insert e n) \\<in> set (history ja)\n\ngoal (1 subgoal):\n 1. n = None \\<or>\n    (\\<exists>i' n' n'' v b.\n        n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n        \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))", "show \"n = None \\<or> (\\<exists>i' n' n'' v b. n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'') \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = None \\<or>\n    (\\<exists>i' n' n'' v b.\n        n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n        \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))", "proof(cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = None \\<Longrightarrow>\n    n = None \\<or>\n    (\\<exists>i' n' n'' v b.\n        n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n        \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))\n 2. \\<And>a.\n       n = Some a \\<Longrightarrow>\n       n = None \\<or>\n       (\\<exists>i' n' n'' v b.\n           n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n           \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))", "fix a"], ["proof (state)\ngoal (2 subgoals):\n 1. n = None \\<Longrightarrow>\n    n = None \\<or>\n    (\\<exists>i' n' n'' v b.\n        n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n        \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))\n 2. \\<And>a.\n       n = Some a \\<Longrightarrow>\n       n = None \\<or>\n       (\\<exists>i' n' n'' v b.\n           n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n           \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))", "assume 3: \"n = Some a\""], ["proof (state)\nthis:\n  n = Some a\n\ngoal (2 subgoals):\n 1. n = None \\<Longrightarrow>\n    n = None \\<or>\n    (\\<exists>i' n' n'' v b.\n        n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n        \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))\n 2. \\<And>a.\n       n = Some a \\<Longrightarrow>\n       n = None \\<or>\n       (\\<exists>i' n' n'' v b.\n           n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n           \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))", "from this"], ["proof (chain)\npicking this:\n  n = Some a", "obtain i' e' n' where 4: \"Some a = Some (fst e')\" and\n        2: \"Deliver (i', Insert e' n') \\<sqsubset>\\<^sup>ja Broadcast (i, Insert e (Some a))\""], ["proof (prove)\nusing this:\n  n = Some a\n\ngoal (1 subgoal):\n 1. (\\<And>e' i' n'.\n        \\<lbrakk>Some a = Some (fst e');\n         Deliver (i', Insert e' n') \\<sqsubset>\\<^sup>ja\n         Broadcast (i, Insert e (Some a))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using allowed_insert 1"], ["proof (prove)\nusing this:\n  n = Some a\n  Broadcast (?i, Insert ?e ?n) \\<in> set (history ?j) \\<Longrightarrow>\n  ?n = None \\<or>\n  (\\<exists>i' e' n'.\n      ?n = Some (fst e') \\<and> Deliver (i', Insert e' n')\n      \\<sqsubset>\\<^sup>?j Broadcast (?i, Insert ?e ?n))\n  Broadcast (i, Insert e n) \\<in> set (history ja)\n\ngoal (1 subgoal):\n 1. (\\<And>e' i' n'.\n        \\<lbrakk>Some a = Some (fst e');\n         Deliver (i', Insert e' n') \\<sqsubset>\\<^sup>ja\n         Broadcast (i, Insert e (Some a))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Some a = Some (fst e')\n  Deliver (i', Insert e' n') \\<sqsubset>\\<^sup>ja\n  Broadcast (i, Insert e (Some a))\n\ngoal (2 subgoals):\n 1. n = None \\<Longrightarrow>\n    n = None \\<or>\n    (\\<exists>i' n' n'' v b.\n        n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n        \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))\n 2. \\<And>a.\n       n = Some a \\<Longrightarrow>\n       n = None \\<or>\n       (\\<exists>i' n' n'' v b.\n           n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n           \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))", "hence \"Deliver (i', Insert e' n') \\<in> set (history ja)\" and \"Broadcast (i, Insert e (Some a)) \\<in> set (history ja)\""], ["proof (prove)\nusing this:\n  Some a = Some (fst e')\n  Deliver (i', Insert e' n') \\<sqsubset>\\<^sup>ja\n  Broadcast (i, Insert e (Some a))\n\ngoal (1 subgoal):\n 1. Deliver (i', Insert e' n') \\<in> set (history ja) &&&\n    Broadcast (i, Insert e (Some a)) \\<in> set (history ja)", "using local_order_carrier_closed"], ["proof (prove)\nusing this:\n  Some a = Some (fst e')\n  Deliver (i', Insert e' n') \\<sqsubset>\\<^sup>ja\n  Broadcast (i, Insert e (Some a))\n  ?e1.0 \\<sqsubset>\\<^sup>?i ?e2.0 \\<Longrightarrow>\n  {?e1.0, ?e2.0} \\<subseteq> set (history ?i)\n\ngoal (1 subgoal):\n 1. Deliver (i', Insert e' n') \\<in> set (history ja) &&&\n    Broadcast (i, Insert e (Some a)) \\<in> set (history ja)", "by simp+"], ["proof (state)\nthis:\n  Deliver (i', Insert e' n') \\<in> set (history ja)\n  Broadcast (i, Insert e (Some a)) \\<in> set (history ja)\n\ngoal (2 subgoals):\n 1. n = None \\<Longrightarrow>\n    n = None \\<or>\n    (\\<exists>i' n' n'' v b.\n        n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n        \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))\n 2. \\<And>a.\n       n = Some a \\<Longrightarrow>\n       n = None \\<or>\n       (\\<exists>i' n' n'' v b.\n           n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n           \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))", "from this"], ["proof (chain)\npicking this:\n  Deliver (i', Insert e' n') \\<in> set (history ja)\n  Broadcast (i, Insert e (Some a)) \\<in> set (history ja)", "obtain jaa where \"Broadcast (i, Insert e (Some a)) \\<in> set (history jaa)\""], ["proof (prove)\nusing this:\n  Deliver (i', Insert e' n') \\<in> set (history ja)\n  Broadcast (i, Insert e (Some a)) \\<in> set (history ja)\n\ngoal (1 subgoal):\n 1. (\\<And>jaa.\n        Broadcast (i, Insert e (Some a))\n        \\<in> set (history jaa) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using delivery_has_a_cause"], ["proof (prove)\nusing this:\n  Deliver (i', Insert e' n') \\<in> set (history ja)\n  Broadcast (i, Insert e (Some a)) \\<in> set (history ja)\n  Deliver ?m \\<in> set (history ?i) \\<Longrightarrow>\n  \\<exists>j. Broadcast ?m \\<in> set (history j)\n\ngoal (1 subgoal):\n 1. (\\<And>jaa.\n        Broadcast (i, Insert e (Some a))\n        \\<in> set (history jaa) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  Broadcast (i, Insert e (Some a)) \\<in> set (history jaa)\n\ngoal (2 subgoals):\n 1. n = None \\<Longrightarrow>\n    n = None \\<or>\n    (\\<exists>i' n' n'' v b.\n        n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n        \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))\n 2. \\<And>a.\n       n = Some a \\<Longrightarrow>\n       n = None \\<or>\n       (\\<exists>i' n' n'' v b.\n           n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n           \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))", "have \"\\<exists>i' n' n'' v b. n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'') \\<sqsubset>\\<^sup>j Deliver (i, Insert e n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i' n' n'' v b.\n       n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n       \\<sqsubset>\\<^sup>j Deliver (i, Insert e n)", "using 2 3 4"], ["proof (prove)\nusing this:\n  Deliver (i', Insert e' n') \\<sqsubset>\\<^sup>ja\n  Broadcast (i, Insert e (Some a))\n  n = Some a\n  Some a = Some (fst e')\n\ngoal (1 subgoal):\n 1. \\<exists>i' n' n'' v b.\n       n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n       \\<sqsubset>\\<^sup>j Deliver (i, Insert e n)", "by(metis assms causal_broadcast prod.collapse)"], ["proof (state)\nthis:\n  \\<exists>i' n' n'' v b.\n     n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n     \\<sqsubset>\\<^sup>j Deliver (i, Insert e n)\n\ngoal (2 subgoals):\n 1. n = None \\<Longrightarrow>\n    n = None \\<or>\n    (\\<exists>i' n' n'' v b.\n        n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n        \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))\n 2. \\<And>a.\n       n = Some a \\<Longrightarrow>\n       n = None \\<or>\n       (\\<exists>i' n' n'' v b.\n           n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n           \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))", "thus \"n = None \\<or> (\\<exists>i' n' n'' v b. n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'') \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))\""], ["proof (prove)\nusing this:\n  \\<exists>i' n' n'' v b.\n     n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n     \\<sqsubset>\\<^sup>j Deliver (i, Insert e n)\n\ngoal (1 subgoal):\n 1. n = None \\<or>\n    (\\<exists>i' n' n'' v b.\n        n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n        \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))", "by auto"], ["proof (state)\nthis:\n  n = None \\<or>\n  (\\<exists>i' n' n'' v b.\n      n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n      \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))\n\ngoal (1 subgoal):\n 1. n = None \\<Longrightarrow>\n    n = None \\<or>\n    (\\<exists>i' n' n'' v b.\n        n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n        \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))", "qed simp"], ["proof (state)\nthis:\n  n = None \\<or>\n  (\\<exists>i' n' n'' v b.\n      n = Some n' \\<and> Deliver (i', Insert (n', v, b) n'')\n      \\<sqsubset>\\<^sup>j Deliver (i, Insert e n))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in rga) allowed_insert_deliver_in_set:\n  assumes \"(es@[Deliver (i, Insert e m)]) prefix of j\"\n  shows   \"m = None \\<or> (\\<exists>i' m' n v b. m = Some m' \\<and> Deliver (i', Insert (m', v, b) n) \\<in> set es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = None \\<or>\n    (\\<exists>i' m' n v b.\n        m = Some m' \\<and> Deliver (i', Insert (m', v, b) n) \\<in> set es)", "by(metis assms Un_insert_right insert_subset list.simps(15) set_append prefix_to_carriers\n    allowed_insert_deliver local_order_prefix_closed_last)"], ["", "lemma (in rga) Insert_no_failure:\n  assumes \"es @ [Deliver (i, Insert e n)] prefix of j\" \n      and \"apply_operations es = Some s\"\n    shows \"\\<exists>ys. insert s e n = Some ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ys. Ordered_List.insert s e n = Some ys", "by(metis (no_types, lifting) element_ids_def allowed_insert_deliver_in_set assms fst_conv\n    insert_in_apply_set insert_no_failure set_map)"], ["", "lemma (in rga) delete_no_failure:\n  assumes \"es @ [Deliver (i, Delete n)] prefix of j\"\n      and \"apply_operations es = Some s\"\n    shows \"\\<exists>ys. delete s n = Some ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ys. delete s n = Some ys", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ys. delete s n = Some ys", "obtain i' na v b where 1: \"Deliver (i', Insert (n, v, b) na) \\<in> set es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i' v b na.\n        Deliver (i', Insert (n, v, b) na) \\<in> set es \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms allowed_delete_deliver_in_set"], ["proof (prove)\nusing this:\n  es @ [Deliver (i, Delete n)] prefix of j\n  apply_operations es = Some s\n  ?es @ [Deliver (?i, Delete ?m)] prefix of ?j \\<Longrightarrow>\n  \\<exists>i' n v b. Deliver (i', Insert (?m, v, b) n) \\<in> set ?es\n\ngoal (1 subgoal):\n 1. (\\<And>i' v b na.\n        Deliver (i', Insert (n, v, b) na) \\<in> set es \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Deliver (i', Insert (n, v, b) na) \\<in> set es\n\ngoal (1 subgoal):\n 1. \\<exists>ys. delete s n = Some ys", "also"], ["proof (state)\nthis:\n  Deliver (i', Insert (n, v, b) na) \\<in> set es\n\ngoal (1 subgoal):\n 1. \\<exists>ys. delete s n = Some ys", "have \"fst (n, v, b) \\<in> set (indices es)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (n, v, b) \\<in> set (indices es)", "using assms idx_in_elem_inserted calculation"], ["proof (prove)\nusing this:\n  es @ [Deliver (i, Delete n)] prefix of j\n  apply_operations es = Some s\n  Deliver (?i, Insert ?e ?n) \\<in> set ?xs \\<Longrightarrow>\n  fst ?e \\<in> set (indices ?xs)\n  Deliver (i', Insert (n, v, b) na) \\<in> set es\n\ngoal (1 subgoal):\n 1. fst (n, v, b) \\<in> set (indices es)", "by blast"], ["proof (state)\nthis:\n  fst (n, v, b) \\<in> set (indices es)\n\ngoal (1 subgoal):\n 1. \\<exists>ys. delete s n = Some ys", "from this assms and 1"], ["proof (chain)\npicking this:\n  fst (n, v, b) \\<in> set (indices es)\n  es @ [Deliver (i, Delete n)] prefix of j\n  apply_operations es = Some s\n  Deliver (i', Insert (n, v, b) na) \\<in> set es", "show \"\\<exists>ys. delete s n = Some ys\""], ["proof (prove)\nusing this:\n  fst (n, v, b) \\<in> set (indices es)\n  es @ [Deliver (i, Delete n)] prefix of j\n  apply_operations es = Some s\n  Deliver (i', Insert (n, v, b) na) \\<in> set es\n\ngoal (1 subgoal):\n 1. \\<exists>ys. delete s n = Some ys", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fst (n, v, b) \\<in> set (indices es);\n     es @ [Deliver (i, Delete n)] prefix of j; apply_operations es = Some s;\n     Deliver (i', Insert (n, v, b) na) \\<in> set es\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ys. delete s n = Some ys", "apply(rule delete_no_failure)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fst (n, v, b) \\<in> set (indices es);\n     es @ [Deliver (i, Delete n)] prefix of j; apply_operations es = Some s;\n     Deliver (i', Insert (n, v, b) na) \\<in> set es\\<rbrakk>\n    \\<Longrightarrow> n \\<in> fst ` set s", "apply(metis apply_opers_idx_elems element_ids_def prefix_of_appendD prod.sel(1) set_map)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>ys. delete s n = Some ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in rga) Insert_equal:\n  assumes \"fst e1 = fst e2\"\n      and \"Broadcast (i1, Insert e1 n1) \\<in> set (history i)\"\n      and \"Broadcast (i2, Insert e2 n2) \\<in> set (history j)\"\n    shows \"Insert e1 n1 = Insert e2 n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Insert e1 n1 = Insert e2 n2", "using insert_id_unique assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>fst ?e1.0 = fst ?e2.0;\n   Broadcast (?i1.0, Insert ?e1.0 ?n1.0) \\<in> set (history ?i);\n   Broadcast (?i2.0, Insert ?e2.0 ?n2.0) \\<in> set (history ?j)\\<rbrakk>\n  \\<Longrightarrow> Insert ?e1.0 ?n1.0 = Insert ?e2.0 ?n2.0\n  fst e1 = fst e2\n  Broadcast (i1, Insert e1 n1) \\<in> set (history i)\n  Broadcast (i2, Insert e2 n2) \\<in> set (history j)\n\ngoal (1 subgoal):\n 1. Insert e1 n1 = Insert e2 n2", "by simp"], ["", "lemma (in rga) same_insert:\n  assumes \"fst e1 = fst e2\"\n      and \"xs prefix of i\"\n      and \"(i1, Insert e1 n1) \\<in> set (node_deliver_messages xs)\"\n      and \"(i2, Insert e2 n2) \\<in> set (node_deliver_messages xs)\"\n    shows \"Insert e1 n1 = Insert e2 n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Insert e1 n1 = Insert e2 n2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Insert e1 n1 = Insert e2 n2", "have \"Deliver (i1, Insert e1 n1) \\<in> set (history i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Deliver (i1, Insert e1 n1) \\<in> set (history i)", "using assms"], ["proof (prove)\nusing this:\n  fst e1 = fst e2\n  xs prefix of i\n  (i1, Insert e1 n1) \\<in> set (node_deliver_messages xs)\n  (i2, Insert e2 n2) \\<in> set (node_deliver_messages xs)\n\ngoal (1 subgoal):\n 1. Deliver (i1, Insert e1 n1) \\<in> set (history i)", "by(auto simp add: node_deliver_messages_def prefix_msg_in_history)"], ["proof (state)\nthis:\n  Deliver (i1, Insert e1 n1) \\<in> set (history i)\n\ngoal (1 subgoal):\n 1. Insert e1 n1 = Insert e2 n2", "from this"], ["proof (chain)\npicking this:\n  Deliver (i1, Insert e1 n1) \\<in> set (history i)", "obtain j where 1: \"Broadcast (i1, Insert e1 n1) \\<in> set (history j)\""], ["proof (prove)\nusing this:\n  Deliver (i1, Insert e1 n1) \\<in> set (history i)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        Broadcast (i1, Insert e1 n1) \\<in> set (history j) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using delivery_has_a_cause"], ["proof (prove)\nusing this:\n  Deliver (i1, Insert e1 n1) \\<in> set (history i)\n  Deliver ?m \\<in> set (history ?i) \\<Longrightarrow>\n  \\<exists>j. Broadcast ?m \\<in> set (history j)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        Broadcast (i1, Insert e1 n1) \\<in> set (history j) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Broadcast (i1, Insert e1 n1) \\<in> set (history j)\n\ngoal (1 subgoal):\n 1. Insert e1 n1 = Insert e2 n2", "have \"Deliver (i2, Insert e2 n2) \\<in> set (history i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Deliver (i2, Insert e2 n2) \\<in> set (history i)", "using assms"], ["proof (prove)\nusing this:\n  fst e1 = fst e2\n  xs prefix of i\n  (i1, Insert e1 n1) \\<in> set (node_deliver_messages xs)\n  (i2, Insert e2 n2) \\<in> set (node_deliver_messages xs)\n\ngoal (1 subgoal):\n 1. Deliver (i2, Insert e2 n2) \\<in> set (history i)", "by(auto simp add: node_deliver_messages_def prefix_msg_in_history)"], ["proof (state)\nthis:\n  Deliver (i2, Insert e2 n2) \\<in> set (history i)\n\ngoal (1 subgoal):\n 1. Insert e1 n1 = Insert e2 n2", "from this"], ["proof (chain)\npicking this:\n  Deliver (i2, Insert e2 n2) \\<in> set (history i)", "obtain k where 2: \"Broadcast (i2, Insert e2 n2) \\<in> set (history k)\""], ["proof (prove)\nusing this:\n  Deliver (i2, Insert e2 n2) \\<in> set (history i)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        Broadcast (i2, Insert e2 n2) \\<in> set (history k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using delivery_has_a_cause"], ["proof (prove)\nusing this:\n  Deliver (i2, Insert e2 n2) \\<in> set (history i)\n  Deliver ?m \\<in> set (history ?i) \\<Longrightarrow>\n  \\<exists>j. Broadcast ?m \\<in> set (history j)\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        Broadcast (i2, Insert e2 n2) \\<in> set (history k) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Broadcast (i2, Insert e2 n2) \\<in> set (history k)\n\ngoal (1 subgoal):\n 1. Insert e1 n1 = Insert e2 n2", "show \"Insert e1 n1 = Insert e2 n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Insert e1 n1 = Insert e2 n2", "by(rule Insert_equal; force simp add: assms intro: 1 2)"], ["proof (state)\nthis:\n  Insert e1 n1 = Insert e2 n2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in rga) insert_commute_assms:\n  assumes \"{Deliver (i, Insert e n), Deliver (i', Insert e' n')} \\<subseteq> set (history j)\"\n      and \"hb.concurrent (i, Insert e n) (i', Insert e' n')\"\n    shows \"n = None \\<or> n \\<noteq> Some (fst e')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = None \\<or> n \\<noteq> Some (fst e')", "using assms"], ["proof (prove)\nusing this:\n  {Deliver (i, Insert e n), Deliver (i', Insert e' n')}\n  \\<subseteq> set (history j)\n  hb.concurrent (i, Insert e n) (i', Insert e' n')\n\ngoal (1 subgoal):\n 1. n = None \\<or> n \\<noteq> Some (fst e')", "apply(clarsimp simp: hb.concurrent_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Deliver (i, Insert e (Some (fst e'))) \\<in> set (history j);\n     Deliver (i', Insert e' n') \\<in> set (history j);\n     \\<not> hb (i, Insert e (Some (fst e'))) (i', Insert e' n');\n     \\<not> hb (i', Insert e' n') (i, Insert e (Some (fst e')));\n     n = Some (fst e')\\<rbrakk>\n    \\<Longrightarrow> False", "apply(cases e')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>Deliver (i, Insert e (Some (fst e'))) \\<in> set (history j);\n        Deliver (i', Insert e' n') \\<in> set (history j);\n        \\<not> hb (i, Insert e (Some (fst e'))) (i', Insert e' n');\n        \\<not> hb (i', Insert e' n') (i, Insert e (Some (fst e')));\n        n = Some (fst e'); e' = (a, b, c)\\<rbrakk>\n       \\<Longrightarrow> False", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>Deliver (i, Insert e (Some a)) \\<in> set (history j);\n        Deliver (i', Insert (a, b, c) n') \\<in> set (history j);\n        \\<not> hb (i, Insert e (Some a)) (i', Insert (a, b, c) n');\n        \\<not> hb (i', Insert (a, b, c) n') (i, Insert e (Some a));\n        n = Some a; e' = (a, b, c)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(frule delivery_has_a_cause)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>Deliver (i, Insert e (Some a)) \\<in> set (history j);\n        Deliver (i', Insert (a, b, c) n') \\<in> set (history j);\n        \\<not> hb (i, Insert e (Some a)) (i', Insert (a, b, c) n');\n        \\<not> hb (i', Insert (a, b, c) n') (i, Insert e (Some a));\n        n = Some a; e' = (a, b, c);\n        \\<exists>j.\n           Broadcast (i, Insert e (Some a)) \\<in> set (history j)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(frule delivery_has_a_cause, clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c ja.\n       \\<lbrakk>Deliver (i, Insert e (Some a)) \\<in> set (history j);\n        Deliver (i', Insert (a, b, c) n') \\<in> set (history j);\n        \\<not> hb (i, Insert e (Some a)) (i', Insert (a, b, c) n');\n        \\<not> hb (i', Insert (a, b, c) n') (i, Insert e (Some a));\n        n = Some a; e' = (a, b, c);\n        Broadcast (i, Insert e (Some a)) \\<in> set (history ja)\\<rbrakk>\n       \\<Longrightarrow> False", "apply(frule allowed_insert)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c ja.\n       \\<lbrakk>Deliver (i, Insert e (Some a)) \\<in> set (history j);\n        Deliver (i', Insert (a, b, c) n') \\<in> set (history j);\n        \\<not> hb (i, Insert e (Some a)) (i', Insert (a, b, c) n');\n        \\<not> hb (i', Insert (a, b, c) n') (i, Insert e (Some a));\n        n = Some a; e' = (a, b, c);\n        Broadcast (i, Insert e (Some a)) \\<in> set (history ja);\n        Some a = None \\<or>\n        (\\<exists>i' e' n'.\n            Some a = Some (fst e') \\<and> Deliver (i', Insert e' n')\n            \\<sqsubset>\\<^sup>ja Broadcast (i, Insert e (Some a)))\\<rbrakk>\n       \\<Longrightarrow> False", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c ja i'a aa ba n'a.\n       \\<lbrakk>Deliver (i, Insert e (Some a)) \\<in> set (history j);\n        Deliver (i', Insert (a, b, c) n') \\<in> set (history j);\n        \\<not> hb (i, Insert e (Some a)) (i', Insert (a, b, c) n');\n        \\<not> hb (i', Insert (a, b, c) n') (i, Insert e (Some a));\n        n = Some a; e' = (a, b, c);\n        Broadcast (i, Insert e (Some a)) \\<in> set (history ja);\n        Deliver (i'a, Insert (a, aa, ba) n'a) \\<sqsubset>\\<^sup>ja\n        Broadcast (i, Insert e (Some a))\\<rbrakk>\n       \\<Longrightarrow> False", "apply(metis Insert_equal delivery_has_a_cause fst_conv hb.intros(2) insert_subset\n    local_order_carrier_closed insert_msg_id)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma subset_reorder:\n  assumes \"{a, b} \\<subseteq> c\"\n  shows \"{b, a} \\<subseteq> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {b, a} \\<subseteq> c", "using assms"], ["proof (prove)\nusing this:\n  {a, b} \\<subseteq> c\n\ngoal (1 subgoal):\n 1. {b, a} \\<subseteq> c", "by simp"], ["", "lemma (in rga) Insert_Insert_concurrent:\n  assumes \"{Deliver (i, Insert e k), Deliver (i', Insert e' (Some m))} \\<subseteq> set (history j)\"\n      and \"hb.concurrent (i, Insert e k) (i', Insert e' (Some m))\"\n    shows \"fst e \\<noteq> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst e \\<noteq> m", "by(metis assms subset_reorder hb.concurrent_comm insert_commute_assms option.simps(3))"], ["", "lemma (in rga) insert_valid_assms:\n assumes \"Deliver (i, Insert e n) \\<in> set (history j)\"\n   shows \"n = None \\<or> n \\<noteq> Some (fst e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = None \\<or> n \\<noteq> Some (fst e)", "using assms"], ["proof (prove)\nusing this:\n  Deliver (i, Insert e n) \\<in> set (history j)\n\ngoal (1 subgoal):\n 1. n = None \\<or> n \\<noteq> Some (fst e)", "by(meson allowed_insert_deliver hb.concurrent_def hb.less_asym insert_subset\n      local_order_carrier_closed rga.insert_commute_assms rga_axioms)"], ["", "lemma (in rga) Insert_Delete_concurrent:\n  assumes \"{Deliver (i, Insert e n), Deliver (i', Delete n')} \\<subseteq> set (history j)\"\n      and \"hb.concurrent (i, Insert e n) (i', Delete n')\"\n    shows \"n' \\<noteq> fst e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' \\<noteq> fst e", "by (metis assms Insert_equal allowed_delete delivery_has_a_cause fst_conv hb.concurrent_def\n  hb.intros(2) insert_subset local_order_carrier_closed rga.insert_msg_id rga_axioms)"], ["", "lemma (in rga) concurrent_operations_commute:\n  assumes \"xs prefix of i\"\n  shows \"hb.concurrent_ops_commute (node_deliver_messages xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hb.concurrent_ops_commute (node_deliver_messages xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. hb.concurrent_ops_commute (node_deliver_messages xs)", "have \"\\<And>x y. {x, y} \\<subseteq> set (node_deliver_messages xs) \\<Longrightarrow> hb.concurrent x y \\<Longrightarrow> interp_msg x \\<rhd> interp_msg y = interp_msg y \\<rhd> interp_msg x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>{x, y} \\<subseteq> set (node_deliver_messages xs);\n        hb.concurrent x y\\<rbrakk>\n       \\<Longrightarrow> interp_msg x \\<rhd> interp_msg y =\n                         interp_msg y \\<rhd> interp_msg x", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       \\<lbrakk>{x, y} \\<subseteq> set (node_deliver_messages xs);\n        hb.concurrent x y\\<rbrakk>\n       \\<Longrightarrow> (interp_msg x \\<rhd> interp_msg y) xa =\n                         (interp_msg y \\<rhd> interp_msg x) xa", "fix x y ii"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       \\<lbrakk>{x, y} \\<subseteq> set (node_deliver_messages xs);\n        hb.concurrent x y\\<rbrakk>\n       \\<Longrightarrow> (interp_msg x \\<rhd> interp_msg y) xa =\n                         (interp_msg y \\<rhd> interp_msg x) xa", "assume \"{x, y} \\<subseteq> set (node_deliver_messages xs)\"\n      and C: \"hb.concurrent x y\""], ["proof (state)\nthis:\n  {x, y} \\<subseteq> set (node_deliver_messages xs)\n  hb.concurrent x y\n\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       \\<lbrakk>{x, y} \\<subseteq> set (node_deliver_messages xs);\n        hb.concurrent x y\\<rbrakk>\n       \\<Longrightarrow> (interp_msg x \\<rhd> interp_msg y) xa =\n                         (interp_msg y \\<rhd> interp_msg x) xa", "hence X: \"x \\<in> set (node_deliver_messages xs)\" and Y: \"y \\<in> set (node_deliver_messages xs)\""], ["proof (prove)\nusing this:\n  {x, y} \\<subseteq> set (node_deliver_messages xs)\n  hb.concurrent x y\n\ngoal (1 subgoal):\n 1. x \\<in> set (node_deliver_messages xs) &&&\n    y \\<in> set (node_deliver_messages xs)", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (node_deliver_messages xs)\n  y \\<in> set (node_deliver_messages xs)\n\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       \\<lbrakk>{x, y} \\<subseteq> set (node_deliver_messages xs);\n        hb.concurrent x y\\<rbrakk>\n       \\<Longrightarrow> (interp_msg x \\<rhd> interp_msg y) xa =\n                         (interp_msg y \\<rhd> interp_msg x) xa", "obtain x1 x2 y1 y2 where 1: \"x = (x1, x2)\" and 2: \"y = (y1, y2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x1 x2 y1 y2.\n        \\<lbrakk>x = (x1, x2); y = (y1, y2)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  x = (x1, x2)\n  y = (y1, y2)\n\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       \\<lbrakk>{x, y} \\<subseteq> set (node_deliver_messages xs);\n        hb.concurrent x y\\<rbrakk>\n       \\<Longrightarrow> (interp_msg x \\<rhd> interp_msg y) xa =\n                         (interp_msg y \\<rhd> interp_msg x) xa", "have \"(interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii = (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "proof(cases x2; cases y2)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x11a x12a.\n       \\<lbrakk>x2 = Insert x11 x12; y2 = Insert x11a x12a\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x11 x12 x2a.\n       \\<lbrakk>x2 = Insert x11 x12; y2 = Delete x2a\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 3. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 4. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "fix ix1 ix2 iy1 iy2"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x11a x12a.\n       \\<lbrakk>x2 = Insert x11 x12; y2 = Insert x11a x12a\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x11 x12 x2a.\n       \\<lbrakk>x2 = Insert x11 x12; y2 = Delete x2a\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 3. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 4. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "assume X2: \"x2 = Insert ix1 ix2\" and Y2: \"y2 = Insert iy1 iy2\""], ["proof (state)\nthis:\n  x2 = Insert ix1 ix2\n  y2 = Insert iy1 iy2\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x11a x12a.\n       \\<lbrakk>x2 = Insert x11 x12; y2 = Insert x11a x12a\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x11 x12 x2a.\n       \\<lbrakk>x2 = Insert x11 x12; y2 = Delete x2a\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 3. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 4. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "show \"(interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii = (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "proof(cases \"fst ix1 = fst iy1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. fst ix1 = fst iy1 \\<Longrightarrow>\n    (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. fst ix1 \\<noteq> fst iy1 \\<Longrightarrow>\n    (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "assume \"fst ix1 = fst iy1\""], ["proof (state)\nthis:\n  fst ix1 = fst iy1\n\ngoal (2 subgoals):\n 1. fst ix1 = fst iy1 \\<Longrightarrow>\n    (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. fst ix1 \\<noteq> fst iy1 \\<Longrightarrow>\n    (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "hence \"Insert ix1 ix2 = Insert iy1 iy2\""], ["proof (prove)\nusing this:\n  fst ix1 = fst iy1\n\ngoal (1 subgoal):\n 1. Insert ix1 ix2 = Insert iy1 iy2", "apply(rule same_insert)"], ["proof (prove)\ngoal (3 subgoals):\n 1. ?xs prefix of ?i\n 2. (?i1.0, Insert ix1 ix2) \\<in> set (node_deliver_messages ?xs)\n 3. (?i2.0, Insert iy1 iy2) \\<in> set (node_deliver_messages ?xs)", "using 1 2 X Y X2 Y2 assms"], ["proof (prove)\nusing this:\n  x = (x1, x2)\n  y = (y1, y2)\n  x \\<in> set (node_deliver_messages xs)\n  y \\<in> set (node_deliver_messages xs)\n  x2 = Insert ix1 ix2\n  y2 = Insert iy1 iy2\n  xs prefix of i\n\ngoal (3 subgoals):\n 1. ?xs prefix of ?i\n 2. (?i1.0, Insert ix1 ix2) \\<in> set (node_deliver_messages ?xs)\n 3. (?i2.0, Insert iy1 iy2) \\<in> set (node_deliver_messages ?xs)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Insert ix1 ix2 = Insert iy1 iy2\n\ngoal (2 subgoals):\n 1. fst ix1 = fst iy1 \\<Longrightarrow>\n    (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. fst ix1 \\<noteq> fst iy1 \\<Longrightarrow>\n    (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "hence \"ix1 = iy1\" and \"ix2 = iy2\""], ["proof (prove)\nusing this:\n  Insert ix1 ix2 = Insert iy1 iy2\n\ngoal (1 subgoal):\n 1. ix1 = iy1 &&& ix2 = iy2", "by auto"], ["proof (state)\nthis:\n  ix1 = iy1\n  ix2 = iy2\n\ngoal (2 subgoals):\n 1. fst ix1 = fst iy1 \\<Longrightarrow>\n    (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. fst ix1 \\<noteq> fst iy1 \\<Longrightarrow>\n    (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "from this and X2 Y2"], ["proof (chain)\npicking this:\n  ix1 = iy1\n  ix2 = iy2\n  x2 = Insert ix1 ix2\n  y2 = Insert iy1 iy2", "show \"(interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii = (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\""], ["proof (prove)\nusing this:\n  ix1 = iy1\n  ix2 = iy2\n  x2 = Insert ix1 ix2\n  y2 = Insert iy1 iy2\n\ngoal (1 subgoal):\n 1. (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "by(clarsimp simp add: kleisli_def interp_msg_def)"], ["proof (state)\nthis:\n  (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n  (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n\ngoal (1 subgoal):\n 1. fst ix1 \\<noteq> fst iy1 \\<Longrightarrow>\n    (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. fst ix1 \\<noteq> fst iy1 \\<Longrightarrow>\n    (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "assume NEQ: \"fst ix1 \\<noteq> fst iy1\""], ["proof (state)\nthis:\n  fst ix1 \\<noteq> fst iy1\n\ngoal (1 subgoal):\n 1. fst ix1 \\<noteq> fst iy1 \\<Longrightarrow>\n    (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "have \"ix2 = None \\<or> ix2 \\<noteq> Some (fst iy1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ix2 = None \\<or> ix2 \\<noteq> Some (fst iy1)", "apply(rule insert_commute_assms)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {Deliver (?i, Insert ?e ix2), Deliver (?i', Insert iy1 ?n')}\n    \\<subseteq> set (history ?j)\n 2. hb.concurrent (?i, Insert ?e ix2) (?i', Insert iy1 ?n')", "using prefix_msg_in_history[OF assms] X Y X2 Y2 1 2"], ["proof (prove)\nusing this:\n  ?m \\<in> set (node_deliver_messages xs) \\<Longrightarrow>\n  Deliver ?m \\<in> set (history i)\n  x \\<in> set (node_deliver_messages xs)\n  y \\<in> set (node_deliver_messages xs)\n  x2 = Insert ix1 ix2\n  y2 = Insert iy1 iy2\n  x = (x1, x2)\n  y = (y1, y2)\n\ngoal (2 subgoals):\n 1. {Deliver (?i, Insert ?e ix2), Deliver (?i', Insert iy1 ?n')}\n    \\<subseteq> set (history ?j)\n 2. hb.concurrent (?i, Insert ?e ix2) (?i', Insert iy1 ?n')", "apply(clarsimp, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. hb.concurrent (x1, Insert ix1 ix2) (y1, Insert iy1 iy2)", "using C 1 2 X2 Y2"], ["proof (prove)\nusing this:\n  hb.concurrent x y\n  x = (x1, x2)\n  y = (y1, y2)\n  x2 = Insert ix1 ix2\n  y2 = Insert iy1 iy2\n\ngoal (1 subgoal):\n 1. hb.concurrent (x1, Insert ix1 ix2) (y1, Insert iy1 iy2)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ix2 = None \\<or> ix2 \\<noteq> Some (fst iy1)\n\ngoal (1 subgoal):\n 1. fst ix1 \\<noteq> fst iy1 \\<Longrightarrow>\n    (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "also"], ["proof (state)\nthis:\n  ix2 = None \\<or> ix2 \\<noteq> Some (fst iy1)\n\ngoal (1 subgoal):\n 1. fst ix1 \\<noteq> fst iy1 \\<Longrightarrow>\n    (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "have \"iy2 = None \\<or> iy2 \\<noteq> Some (fst ix1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iy2 = None \\<or> iy2 \\<noteq> Some (fst ix1)", "apply(rule insert_commute_assms)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {Deliver (?i, Insert ?e iy2), Deliver (?i', Insert ix1 ?n')}\n    \\<subseteq> set (history ?j)\n 2. hb.concurrent (?i, Insert ?e iy2) (?i', Insert ix1 ?n')", "using prefix_msg_in_history[OF assms] X Y X2 Y2 1 2"], ["proof (prove)\nusing this:\n  ?m \\<in> set (node_deliver_messages xs) \\<Longrightarrow>\n  Deliver ?m \\<in> set (history i)\n  x \\<in> set (node_deliver_messages xs)\n  y \\<in> set (node_deliver_messages xs)\n  x2 = Insert ix1 ix2\n  y2 = Insert iy1 iy2\n  x = (x1, x2)\n  y = (y1, y2)\n\ngoal (2 subgoals):\n 1. {Deliver (?i, Insert ?e iy2), Deliver (?i', Insert ix1 ?n')}\n    \\<subseteq> set (history ?j)\n 2. hb.concurrent (?i, Insert ?e iy2) (?i', Insert ix1 ?n')", "apply(clarsimp, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. hb.concurrent (y1, Insert iy1 iy2) (x1, Insert ix1 ix2)", "using \"1\" \"2\" C X2 Y2"], ["proof (prove)\nusing this:\n  x = (x1, x2)\n  y = (y1, y2)\n  hb.concurrent x y\n  x2 = Insert ix1 ix2\n  y2 = Insert iy1 iy2\n\ngoal (1 subgoal):\n 1. hb.concurrent (y1, Insert iy1 iy2) (x1, Insert ix1 ix2)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  iy2 = None \\<or> iy2 \\<noteq> Some (fst ix1)\n\ngoal (1 subgoal):\n 1. fst ix1 \\<noteq> fst iy1 \\<Longrightarrow>\n    (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "ultimately"], ["proof (chain)\npicking this:\n  ix2 = None \\<or> ix2 \\<noteq> Some (fst iy1)\n  iy2 = None \\<or> iy2 \\<noteq> Some (fst ix1)", "have \"insert ii ix1 ix2 \\<bind> (\\<lambda>x. insert x iy1 iy2) = insert ii iy1 iy2 \\<bind> (\\<lambda>x. insert x ix1 ix2)\""], ["proof (prove)\nusing this:\n  ix2 = None \\<or> ix2 \\<noteq> Some (fst iy1)\n  iy2 = None \\<or> iy2 \\<noteq> Some (fst ix1)\n\ngoal (1 subgoal):\n 1. Ordered_List.insert ii ix1 ix2 \\<bind>\n    (\\<lambda>x. Ordered_List.insert x iy1 iy2) =\n    Ordered_List.insert ii iy1 iy2 \\<bind>\n    (\\<lambda>x. Ordered_List.insert x ix1 ix2)", "using NEQ insert_commutes"], ["proof (prove)\nusing this:\n  ix2 = None \\<or> ix2 \\<noteq> Some (fst iy1)\n  iy2 = None \\<or> iy2 \\<noteq> Some (fst ix1)\n  fst ix1 \\<noteq> fst iy1\n  \\<lbrakk>fst ?e1.0 \\<noteq> fst ?e2.0;\n   ?i1.0 = None \\<or> ?i1.0 \\<noteq> Some (fst ?e2.0);\n   ?i2.0 = None \\<or> ?i2.0 \\<noteq> Some (fst ?e1.0)\\<rbrakk>\n  \\<Longrightarrow> Ordered_List.insert ?xs ?e1.0 ?i1.0 \\<bind>\n                    (\\<lambda>ys. Ordered_List.insert ys ?e2.0 ?i2.0) =\n                    Ordered_List.insert ?xs ?e2.0 ?i2.0 \\<bind>\n                    (\\<lambda>ys. Ordered_List.insert ys ?e1.0 ?i1.0)\n\ngoal (1 subgoal):\n 1. Ordered_List.insert ii ix1 ix2 \\<bind>\n    (\\<lambda>x. Ordered_List.insert x iy1 iy2) =\n    Ordered_List.insert ii iy1 iy2 \\<bind>\n    (\\<lambda>x. Ordered_List.insert x ix1 ix2)", "by blast"], ["proof (state)\nthis:\n  Ordered_List.insert ii ix1 ix2 \\<bind>\n  (\\<lambda>x. Ordered_List.insert x iy1 iy2) =\n  Ordered_List.insert ii iy1 iy2 \\<bind>\n  (\\<lambda>x. Ordered_List.insert x ix1 ix2)\n\ngoal (1 subgoal):\n 1. fst ix1 \\<noteq> fst iy1 \\<Longrightarrow>\n    (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "thus \"(interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii = (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\""], ["proof (prove)\nusing this:\n  Ordered_List.insert ii ix1 ix2 \\<bind>\n  (\\<lambda>x. Ordered_List.insert x iy1 iy2) =\n  Ordered_List.insert ii iy1 iy2 \\<bind>\n  (\\<lambda>x. Ordered_List.insert x ix1 ix2)\n\ngoal (1 subgoal):\n 1. (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "by(clarsimp simp add: interp_msg_def X2 Y2 kleisli_def)"], ["proof (state)\nthis:\n  (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n  (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n  (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x2a.\n       \\<lbrakk>x2 = Insert x11 x12; y2 = Delete x2a\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 3. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x2a.\n       \\<lbrakk>x2 = Insert x11 x12; y2 = Delete x2a\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 3. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "fix ix1 ix2 yd"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x2a.\n       \\<lbrakk>x2 = Insert x11 x12; y2 = Delete x2a\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 3. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "assume X2: \"x2 = Insert ix1 ix2\" and Y2: \"y2 = Delete yd\""], ["proof (state)\nthis:\n  x2 = Insert ix1 ix2\n  y2 = Delete yd\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x2a.\n       \\<lbrakk>x2 = Insert x11 x12; y2 = Delete x2a\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 3. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "have \"hb.concurrent (x1, Insert ix1 ix2) (y1, Delete yd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hb.concurrent (x1, Insert ix1 ix2) (y1, Delete yd)", "using C X2 Y2 1 2"], ["proof (prove)\nusing this:\n  hb.concurrent x y\n  x2 = Insert ix1 ix2\n  y2 = Delete yd\n  x = (x1, x2)\n  y = (y1, y2)\n\ngoal (1 subgoal):\n 1. hb.concurrent (x1, Insert ix1 ix2) (y1, Delete yd)", "by simp"], ["proof (state)\nthis:\n  hb.concurrent (x1, Insert ix1 ix2) (y1, Delete yd)\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x2a.\n       \\<lbrakk>x2 = Insert x11 x12; y2 = Delete x2a\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 3. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "also"], ["proof (state)\nthis:\n  hb.concurrent (x1, Insert ix1 ix2) (y1, Delete yd)\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x2a.\n       \\<lbrakk>x2 = Insert x11 x12; y2 = Delete x2a\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 3. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "have \"{Deliver (x1, Insert ix1 ix2), Deliver (y1, Delete yd)} \\<subseteq> set (history i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {Deliver (x1, Insert ix1 ix2), Deliver (y1, Delete yd)}\n    \\<subseteq> set (history i)", "using prefix_msg_in_history assms X2 Y2 X Y 1 2"], ["proof (prove)\nusing this:\n  \\<lbrakk>?es prefix of ?i;\n   ?m \\<in> set (node_deliver_messages ?es)\\<rbrakk>\n  \\<Longrightarrow> Deliver ?m \\<in> set (history ?i)\n  xs prefix of i\n  x2 = Insert ix1 ix2\n  y2 = Delete yd\n  x \\<in> set (node_deliver_messages xs)\n  y \\<in> set (node_deliver_messages xs)\n  x = (x1, x2)\n  y = (y1, y2)\n\ngoal (1 subgoal):\n 1. {Deliver (x1, Insert ix1 ix2), Deliver (y1, Delete yd)}\n    \\<subseteq> set (history i)", "by blast"], ["proof (state)\nthis:\n  {Deliver (x1, Insert ix1 ix2), Deliver (y1, Delete yd)}\n  \\<subseteq> set (history i)\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x2a.\n       \\<lbrakk>x2 = Insert x11 x12; y2 = Delete x2a\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 3. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "ultimately"], ["proof (chain)\npicking this:\n  hb.concurrent (x1, Insert ix1 ix2) (y1, Delete yd)\n  {Deliver (x1, Insert ix1 ix2), Deliver (y1, Delete yd)}\n  \\<subseteq> set (history i)", "have \"yd \\<noteq> fst ix1\""], ["proof (prove)\nusing this:\n  hb.concurrent (x1, Insert ix1 ix2) (y1, Delete yd)\n  {Deliver (x1, Insert ix1 ix2), Deliver (y1, Delete yd)}\n  \\<subseteq> set (history i)\n\ngoal (1 subgoal):\n 1. yd \\<noteq> fst ix1", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hb.concurrent (x1, Insert ix1 ix2) (y1, Delete yd);\n     {Deliver (x1, Insert ix1 ix2), Deliver (y1, Delete yd)}\n     \\<subseteq> set (history i)\\<rbrakk>\n    \\<Longrightarrow> yd \\<noteq> fst ix1", "apply(rule Insert_Delete_concurrent; force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  yd \\<noteq> fst ix1\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x2a.\n       \\<lbrakk>x2 = Insert x11 x12; y2 = Delete x2a\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 3. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "hence \"insert ii ix1 ix2 \\<bind> (\\<lambda>x. delete x yd) = delete ii yd \\<bind> (\\<lambda>x. insert x ix1 ix2)\""], ["proof (prove)\nusing this:\n  yd \\<noteq> fst ix1\n\ngoal (1 subgoal):\n 1. Ordered_List.insert ii ix1 ix2 \\<bind> (\\<lambda>x. delete x yd) =\n    delete ii yd \\<bind> (\\<lambda>x. Ordered_List.insert x ix1 ix2)", "by(rule insert_delete_commute)"], ["proof (state)\nthis:\n  Ordered_List.insert ii ix1 ix2 \\<bind> (\\<lambda>x. delete x yd) =\n  delete ii yd \\<bind> (\\<lambda>x. Ordered_List.insert x ix1 ix2)\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x2a.\n       \\<lbrakk>x2 = Insert x11 x12; y2 = Delete x2a\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 3. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "thus \"(interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii = (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\""], ["proof (prove)\nusing this:\n  Ordered_List.insert ii ix1 ix2 \\<bind> (\\<lambda>x. delete x yd) =\n  delete ii yd \\<bind> (\\<lambda>x. Ordered_List.insert x ix1 ix2)\n\ngoal (1 subgoal):\n 1. (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "by(clarsimp simp add: interp_msg_def kleisli_def X2 Y2)"], ["proof (state)\nthis:\n  (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n  (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n\ngoal (2 subgoals):\n 1. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "fix xd iy1 iy2"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "assume X2: \"x2 = Delete xd\" and Y2: \"y2 = Insert iy1 iy2\""], ["proof (state)\nthis:\n  x2 = Delete xd\n  y2 = Insert iy1 iy2\n\ngoal (2 subgoals):\n 1. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "have \"hb.concurrent (x1, Delete xd) (y1, Insert iy1 iy2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hb.concurrent (x1, Delete xd) (y1, Insert iy1 iy2)", "using C X2 Y2 1 2"], ["proof (prove)\nusing this:\n  hb.concurrent x y\n  x2 = Delete xd\n  y2 = Insert iy1 iy2\n  x = (x1, x2)\n  y = (y1, y2)\n\ngoal (1 subgoal):\n 1. hb.concurrent (x1, Delete xd) (y1, Insert iy1 iy2)", "by simp"], ["proof (state)\nthis:\n  hb.concurrent (x1, Delete xd) (y1, Insert iy1 iy2)\n\ngoal (2 subgoals):\n 1. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "also"], ["proof (state)\nthis:\n  hb.concurrent (x1, Delete xd) (y1, Insert iy1 iy2)\n\ngoal (2 subgoals):\n 1. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "have \"{Deliver (x1, Delete xd), Deliver (y1, Insert iy1 iy2)} \\<subseteq> set (history i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {Deliver (x1, Delete xd), Deliver (y1, Insert iy1 iy2)}\n    \\<subseteq> set (history i)", "using prefix_msg_in_history assms X2 Y2 X Y 1 2"], ["proof (prove)\nusing this:\n  \\<lbrakk>?es prefix of ?i;\n   ?m \\<in> set (node_deliver_messages ?es)\\<rbrakk>\n  \\<Longrightarrow> Deliver ?m \\<in> set (history ?i)\n  xs prefix of i\n  x2 = Delete xd\n  y2 = Insert iy1 iy2\n  x \\<in> set (node_deliver_messages xs)\n  y \\<in> set (node_deliver_messages xs)\n  x = (x1, x2)\n  y = (y1, y2)\n\ngoal (1 subgoal):\n 1. {Deliver (x1, Delete xd), Deliver (y1, Insert iy1 iy2)}\n    \\<subseteq> set (history i)", "by blast"], ["proof (state)\nthis:\n  {Deliver (x1, Delete xd), Deliver (y1, Insert iy1 iy2)}\n  \\<subseteq> set (history i)\n\ngoal (2 subgoals):\n 1. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "ultimately"], ["proof (chain)\npicking this:\n  hb.concurrent (x1, Delete xd) (y1, Insert iy1 iy2)\n  {Deliver (x1, Delete xd), Deliver (y1, Insert iy1 iy2)}\n  \\<subseteq> set (history i)", "have \"xd \\<noteq> fst iy1\""], ["proof (prove)\nusing this:\n  hb.concurrent (x1, Delete xd) (y1, Insert iy1 iy2)\n  {Deliver (x1, Delete xd), Deliver (y1, Insert iy1 iy2)}\n  \\<subseteq> set (history i)\n\ngoal (1 subgoal):\n 1. xd \\<noteq> fst iy1", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hb.concurrent (x1, Delete xd) (y1, Insert iy1 iy2);\n     {Deliver (x1, Delete xd), Deliver (y1, Insert iy1 iy2)}\n     \\<subseteq> set (history i)\\<rbrakk>\n    \\<Longrightarrow> xd \\<noteq> fst iy1", "apply(rule Insert_Delete_concurrent; force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  xd \\<noteq> fst iy1\n\ngoal (2 subgoals):\n 1. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "hence \"delete ii xd \\<bind> (\\<lambda>x. insert x iy1 iy2) = insert ii iy1 iy2 \\<bind> (\\<lambda>x. delete x xd)\""], ["proof (prove)\nusing this:\n  xd \\<noteq> fst iy1\n\ngoal (1 subgoal):\n 1. delete ii xd \\<bind> (\\<lambda>x. Ordered_List.insert x iy1 iy2) =\n    Ordered_List.insert ii iy1 iy2 \\<bind> (\\<lambda>x. delete x xd)", "by(rule insert_delete_commute[symmetric])"], ["proof (state)\nthis:\n  delete ii xd \\<bind> (\\<lambda>x. Ordered_List.insert x iy1 iy2) =\n  Ordered_List.insert ii iy1 iy2 \\<bind> (\\<lambda>x. delete x xd)\n\ngoal (2 subgoals):\n 1. \\<And>x2a x11 x12.\n       \\<lbrakk>x2 = Delete x2a; y2 = Insert x11 x12\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n 2. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "thus \"(interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii = (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\""], ["proof (prove)\nusing this:\n  delete ii xd \\<bind> (\\<lambda>x. Ordered_List.insert x iy1 iy2) =\n  Ordered_List.insert ii iy1 iy2 \\<bind> (\\<lambda>x. delete x xd)\n\ngoal (1 subgoal):\n 1. (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "by(clarsimp simp add: interp_msg_def kleisli_def X2 Y2)"], ["proof (state)\nthis:\n  (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n  (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n\ngoal (1 subgoal):\n 1. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "fix xd yd"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "assume X2: \"x2 = Delete xd\" and Y2: \"y2 = Delete yd\""], ["proof (state)\nthis:\n  x2 = Delete xd\n  y2 = Delete yd\n\ngoal (1 subgoal):\n 1. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "have \"delete ii xd \\<bind> (\\<lambda>x. delete x yd) = delete ii yd \\<bind> (\\<lambda>x. delete x xd)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. delete ii xd \\<bind> (\\<lambda>x. delete x yd) =\n    delete ii yd \\<bind> (\\<lambda>x. delete x xd)", "by(rule delete_commutes)"], ["proof (state)\nthis:\n  delete ii xd \\<bind> (\\<lambda>x. delete x yd) =\n  delete ii yd \\<bind> (\\<lambda>x. delete x xd)\n\ngoal (1 subgoal):\n 1. \\<And>x2a x2aa.\n       \\<lbrakk>x2 = Delete x2a; y2 = Delete x2aa\\<rbrakk>\n       \\<Longrightarrow> (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2))\n                          ii =\n                         (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "thus \"(interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii = (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\""], ["proof (prove)\nusing this:\n  delete ii xd \\<bind> (\\<lambda>x. delete x yd) =\n  delete ii yd \\<bind> (\\<lambda>x. delete x xd)\n\ngoal (1 subgoal):\n 1. (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n    (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii", "by(clarsimp simp add: interp_msg_def kleisli_def X2 Y2)"], ["proof (state)\nthis:\n  (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n  (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n  (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       \\<lbrakk>{x, y} \\<subseteq> set (node_deliver_messages xs);\n        hb.concurrent x y\\<rbrakk>\n       \\<Longrightarrow> (interp_msg x \\<rhd> interp_msg y) xa =\n                         (interp_msg y \\<rhd> interp_msg x) xa", "thus \"(interp_msg x \\<rhd> interp_msg y) ii = (interp_msg y \\<rhd> interp_msg x) ii\""], ["proof (prove)\nusing this:\n  (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n  (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n\ngoal (1 subgoal):\n 1. (interp_msg x \\<rhd> interp_msg y) ii =\n    (interp_msg y \\<rhd> interp_msg x) ii", "using 1 2"], ["proof (prove)\nusing this:\n  (interp_msg (x1, x2) \\<rhd> interp_msg (y1, y2)) ii =\n  (interp_msg (y1, y2) \\<rhd> interp_msg (x1, x2)) ii\n  x = (x1, x2)\n  y = (y1, y2)\n\ngoal (1 subgoal):\n 1. (interp_msg x \\<rhd> interp_msg y) ii =\n    (interp_msg y \\<rhd> interp_msg x) ii", "by auto"], ["proof (state)\nthis:\n  (interp_msg x \\<rhd> interp_msg y) ii =\n  (interp_msg y \\<rhd> interp_msg x) ii\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>{?x1, ?y1} \\<subseteq> set (node_deliver_messages xs);\n   hb.concurrent ?x1 ?y1\\<rbrakk>\n  \\<Longrightarrow> interp_msg ?x1 \\<rhd> interp_msg ?y1 =\n                    interp_msg ?y1 \\<rhd> interp_msg ?x1\n\ngoal (1 subgoal):\n 1. hb.concurrent_ops_commute (node_deliver_messages xs)", "thus \"hb.concurrent_ops_commute (node_deliver_messages xs)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>{?x1, ?y1} \\<subseteq> set (node_deliver_messages xs);\n   hb.concurrent ?x1 ?y1\\<rbrakk>\n  \\<Longrightarrow> interp_msg ?x1 \\<rhd> interp_msg ?y1 =\n                    interp_msg ?y1 \\<rhd> interp_msg ?x1\n\ngoal (1 subgoal):\n 1. hb.concurrent_ops_commute (node_deliver_messages xs)", "by(auto simp add: hb.concurrent_ops_commute_def)"], ["proof (state)\nthis:\n  hb.concurrent_ops_commute (node_deliver_messages xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary (in rga) concurrent_operations_commute':\n  shows \"hb.concurrent_ops_commute (node_deliver_messages (history i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hb.concurrent_ops_commute (node_deliver_messages (history i))", "by (meson concurrent_operations_commute append.right_neutral prefix_of_node_history_def)"], ["", "lemma (in rga) apply_operations_never_fails:\n  assumes \"xs prefix of i\"\n  shows \"apply_operations xs \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apply_operations xs \\<noteq> None", "using assms"], ["proof (prove)\nusing this:\n  xs prefix of i\n\ngoal (1 subgoal):\n 1. apply_operations xs \\<noteq> None", "proof(induction xs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. [] prefix of i \\<Longrightarrow> apply_operations [] \\<noteq> None\n 2. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "show \"apply_operations [] \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apply_operations [] \\<noteq> None", "by clarsimp"], ["proof (state)\nthis:\n  apply_operations [] \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "fix x xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "assume 1: \"xs prefix of i \\<Longrightarrow> apply_operations xs \\<noteq> None\"\n    and 2: \"xs @ [x] prefix of i\""], ["proof (state)\nthis:\n  xs prefix of i \\<Longrightarrow> apply_operations xs \\<noteq> None\n  xs @ [x] prefix of i\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "hence 3: \"xs prefix of i\""], ["proof (prove)\nusing this:\n  xs prefix of i \\<Longrightarrow> apply_operations xs \\<noteq> None\n  xs @ [x] prefix of i\n\ngoal (1 subgoal):\n 1. xs prefix of i", "by auto"], ["proof (state)\nthis:\n  xs prefix of i\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                apply_operations xs \\<noteq> None;\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> apply_operations (xs @ [x]) \\<noteq> None", "show \"apply_operations (xs @ [x]) \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apply_operations (xs @ [x]) \\<noteq> None", "proof(cases x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       x = Broadcast x1 \\<Longrightarrow>\n       apply_operations (xs @ [x]) \\<noteq> None\n 2. \\<And>x2.\n       x = Deliver x2 \\<Longrightarrow>\n       apply_operations (xs @ [x]) \\<noteq> None", "fix b"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       x = Broadcast x1 \\<Longrightarrow>\n       apply_operations (xs @ [x]) \\<noteq> None\n 2. \\<And>x2.\n       x = Deliver x2 \\<Longrightarrow>\n       apply_operations (xs @ [x]) \\<noteq> None", "assume \"x = Broadcast b\""], ["proof (state)\nthis:\n  x = Broadcast b\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       x = Broadcast x1 \\<Longrightarrow>\n       apply_operations (xs @ [x]) \\<noteq> None\n 2. \\<And>x2.\n       x = Deliver x2 \\<Longrightarrow>\n       apply_operations (xs @ [x]) \\<noteq> None", "thus \"apply_operations (xs @ [x]) \\<noteq> None\""], ["proof (prove)\nusing this:\n  x = Broadcast b\n\ngoal (1 subgoal):\n 1. apply_operations (xs @ [x]) \\<noteq> None", "using 1 3"], ["proof (prove)\nusing this:\n  x = Broadcast b\n  xs prefix of i \\<Longrightarrow> apply_operations xs \\<noteq> None\n  xs prefix of i\n\ngoal (1 subgoal):\n 1. apply_operations (xs @ [x]) \\<noteq> None", "by clarsimp"], ["proof (state)\nthis:\n  apply_operations (xs @ [x]) \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       x = Deliver x2 \\<Longrightarrow>\n       apply_operations (xs @ [x]) \\<noteq> None", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       x = Deliver x2 \\<Longrightarrow>\n       apply_operations (xs @ [x]) \\<noteq> None", "fix d"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       x = Deliver x2 \\<Longrightarrow>\n       apply_operations (xs @ [x]) \\<noteq> None", "assume 4: \"x = Deliver d\""], ["proof (state)\nthis:\n  x = Deliver d\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       x = Deliver x2 \\<Longrightarrow>\n       apply_operations (xs @ [x]) \\<noteq> None", "thus \"apply_operations (xs @ [x]) \\<noteq> None\""], ["proof (prove)\nusing this:\n  x = Deliver d\n\ngoal (1 subgoal):\n 1. apply_operations (xs @ [x]) \\<noteq> None", "proof(cases d; clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>x = Deliver (a, b); d = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            apply_operations (xs @ [Deliver (a, b)]) =\n                            Some y", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>x = Deliver (a, b); d = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            apply_operations (xs @ [Deliver (a, b)]) =\n                            Some y", "assume 5: \"x = Deliver (a, b)\""], ["proof (state)\nthis:\n  x = Deliver (a, b)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>x = Deliver (a, b); d = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            apply_operations (xs @ [Deliver (a, b)]) =\n                            Some y", "show \"\\<exists>y. apply_operations (xs @ [Deliver (a, b)]) = Some y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y. apply_operations (xs @ [Deliver (a, b)]) = Some y", "proof(cases b; clarify)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>aa aaa ba x12.\n       b = Insert (aa, aaa, ba) x12 \\<Longrightarrow>\n       \\<exists>y.\n          apply_operations (xs @ [Deliver (a, Insert (aa, aaa, ba) x12)]) =\n          Some y\n 2. \\<And>x2.\n       b = Delete x2 \\<Longrightarrow>\n       \\<exists>y. apply_operations (xs @ [Deliver (a, Delete x2)]) = Some y", "fix aa aaa ba x12"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>aa aaa ba x12.\n       b = Insert (aa, aaa, ba) x12 \\<Longrightarrow>\n       \\<exists>y.\n          apply_operations (xs @ [Deliver (a, Insert (aa, aaa, ba) x12)]) =\n          Some y\n 2. \\<And>x2.\n       b = Delete x2 \\<Longrightarrow>\n       \\<exists>y. apply_operations (xs @ [Deliver (a, Delete x2)]) = Some y", "assume 6: \"b = Insert (aa, aaa, ba) x12\""], ["proof (state)\nthis:\n  b = Insert (aa, aaa, ba) x12\n\ngoal (2 subgoals):\n 1. \\<And>aa aaa ba x12.\n       b = Insert (aa, aaa, ba) x12 \\<Longrightarrow>\n       \\<exists>y.\n          apply_operations (xs @ [Deliver (a, Insert (aa, aaa, ba) x12)]) =\n          Some y\n 2. \\<And>x2.\n       b = Delete x2 \\<Longrightarrow>\n       \\<exists>y. apply_operations (xs @ [Deliver (a, Delete x2)]) = Some y", "show \"\\<exists>y. apply_operations (xs @ [Deliver (a, Insert (aa, aaa, ba) x12)]) = Some y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y.\n       apply_operations (xs @ [Deliver (a, Insert (aa, aaa, ba) x12)]) =\n       Some y", "apply(clarsimp simp add: 1 interp_msg_def split!: bind_splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. apply_operations xs = None \\<Longrightarrow> False\n 2. \\<And>v.\n       apply_operations xs = Some v \\<Longrightarrow>\n       \\<exists>y. Ordered_List.insert v (aa, aaa, ba) x12 = Some y", "apply(simp add: \"1\" \"3\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       apply_operations xs = Some v \\<Longrightarrow>\n       \\<exists>y. Ordered_List.insert v (aa, aaa, ba) x12 = Some y", "apply(rule rga.Insert_no_failure, rule rga_axioms)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v.\n       apply_operations xs = Some v \\<Longrightarrow>\n       ?es12 v @ [Deliver (?i12 v, Insert (aa, aaa, ba) x12)] prefix of\n       ?j12 v\n 2. \\<And>v.\n       apply_operations xs = Some v \\<Longrightarrow>\n       apply_operations (?es12 v) = Some v", "using 4 5 6 2"], ["proof (prove)\nusing this:\n  x = Deliver d\n  x = Deliver (a, b)\n  b = Insert (aa, aaa, ba) x12\n  xs @ [x] prefix of i\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       apply_operations xs = Some v \\<Longrightarrow>\n       ?es12 v @ [Deliver (?i12 v, Insert (aa, aaa, ba) x12)] prefix of\n       ?j12 v\n 2. \\<And>v.\n       apply_operations xs = Some v \\<Longrightarrow>\n       apply_operations (?es12 v) = Some v", "apply force+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>y.\n     apply_operations (xs @ [Deliver (a, Insert (aa, aaa, ba) x12)]) =\n     Some y\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       b = Delete x2 \\<Longrightarrow>\n       \\<exists>y. apply_operations (xs @ [Deliver (a, Delete x2)]) = Some y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       b = Delete x2 \\<Longrightarrow>\n       \\<exists>y. apply_operations (xs @ [Deliver (a, Delete x2)]) = Some y", "fix x2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       b = Delete x2 \\<Longrightarrow>\n       \\<exists>y. apply_operations (xs @ [Deliver (a, Delete x2)]) = Some y", "assume 6: \"b = Delete x2\""], ["proof (state)\nthis:\n  b = Delete x2\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       b = Delete x2 \\<Longrightarrow>\n       \\<exists>y. apply_operations (xs @ [Deliver (a, Delete x2)]) = Some y", "show \"\\<exists>y. apply_operations (xs @ [Deliver (a, Delete x2)]) = Some y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y. apply_operations (xs @ [Deliver (a, Delete x2)]) = Some y", "apply(clarsimp simp add: interp_msg_def split!: bind_splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. apply_operations xs = None \\<Longrightarrow> False\n 2. \\<And>v.\n       apply_operations xs = Some v \\<Longrightarrow>\n       \\<exists>y. delete v x2 = Some y", "apply(simp add: 1 3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       apply_operations xs = Some v \\<Longrightarrow>\n       \\<exists>y. delete v x2 = Some y", "apply(rule delete_no_failure)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v.\n       apply_operations xs = Some v \\<Longrightarrow>\n       ?es12 v @ [Deliver (?i12 v, Delete x2)] prefix of ?j12 v\n 2. \\<And>v.\n       apply_operations xs = Some v \\<Longrightarrow>\n       apply_operations (?es12 v) = Some v", "using 4 5 6 2"], ["proof (prove)\nusing this:\n  x = Deliver d\n  x = Deliver (a, b)\n  b = Delete x2\n  xs @ [x] prefix of i\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       apply_operations xs = Some v \\<Longrightarrow>\n       ?es12 v @ [Deliver (?i12 v, Delete x2)] prefix of ?j12 v\n 2. \\<And>v.\n       apply_operations xs = Some v \\<Longrightarrow>\n       apply_operations (?es12 v) = Some v", "apply force+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>y. apply_operations (xs @ [Deliver (a, Delete x2)]) = Some y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>y. apply_operations (xs @ [Deliver (a, b)]) = Some y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  apply_operations (xs @ [x]) \\<noteq> None\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  apply_operations (xs @ [x]) \\<noteq> None\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in rga) apply_operations_never_fails':\n  shows \"apply_operations (history i) \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apply_operations (history i) \\<noteq> None", "by(meson apply_operations_never_fails append.right_neutral prefix_of_node_history_def)"], ["", "corollary (in rga) rga_convergence:\n  assumes \"set (node_deliver_messages xs) = set (node_deliver_messages ys)\"\n      and \"xs prefix of i\"\n      and \"ys prefix of j\"\n    shows \"apply_operations xs = apply_operations ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apply_operations xs = apply_operations ys", "using assms"], ["proof (prove)\nusing this:\n  set (node_deliver_messages xs) = set (node_deliver_messages ys)\n  xs prefix of i\n  ys prefix of j\n\ngoal (1 subgoal):\n 1. apply_operations xs = apply_operations ys", "by(auto simp add: apply_operations_def intro: hb.convergence_ext\n      concurrent_operations_commute node_deliver_messages_distinct hb_consistent_prefix)"], ["", "subsection\\<open>Strong eventual consistency\\<close>"], ["", "context rga begin"], ["", "sublocale sec: strong_eventual_consistency weak_hb hb interp_msg\n  \"\\<lambda>ops.\\<exists>xs i. xs prefix of i \\<and> node_deliver_messages xs = ops\" \"[]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strong_eventual_consistency weak_hb hb interp_msg\n     (\\<lambda>ops.\n         \\<exists>xs i.\n            xs prefix of i \\<and> node_deliver_messages xs = ops)\n     []", "proof(standard; clarsimp)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       hb.hb_consistent (node_deliver_messages xsa)\n 2. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       distinct (node_deliver_messages xsa)\n 3. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       hb.concurrent_ops_commute (node_deliver_messages xsa)\n 4. \\<And>xs a b state xsa x.\n       \\<lbrakk>hb.apply_operations xs [] = Some state;\n        node_deliver_messages xsa = xs @ [(a, b)]; xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. interp_msg (a, b) state = Some y\n 5. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "fix xsa i"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       hb.hb_consistent (node_deliver_messages xsa)\n 2. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       distinct (node_deliver_messages xsa)\n 3. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       hb.concurrent_ops_commute (node_deliver_messages xsa)\n 4. \\<And>xs a b state xsa x.\n       \\<lbrakk>hb.apply_operations xs [] = Some state;\n        node_deliver_messages xsa = xs @ [(a, b)]; xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. interp_msg (a, b) state = Some y\n 5. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "assume \"xsa prefix of i\""], ["proof (state)\nthis:\n  xsa prefix of i\n\ngoal (5 subgoals):\n 1. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       hb.hb_consistent (node_deliver_messages xsa)\n 2. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       distinct (node_deliver_messages xsa)\n 3. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       hb.concurrent_ops_commute (node_deliver_messages xsa)\n 4. \\<And>xs a b state xsa x.\n       \\<lbrakk>hb.apply_operations xs [] = Some state;\n        node_deliver_messages xsa = xs @ [(a, b)]; xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. interp_msg (a, b) state = Some y\n 5. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "thus \"hb.hb_consistent (node_deliver_messages xsa)\""], ["proof (prove)\nusing this:\n  xsa prefix of i\n\ngoal (1 subgoal):\n 1. hb.hb_consistent (node_deliver_messages xsa)", "by(auto simp add: hb_consistent_prefix)"], ["proof (state)\nthis:\n  hb.hb_consistent (node_deliver_messages xsa)\n\ngoal (4 subgoals):\n 1. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       distinct (node_deliver_messages xsa)\n 2. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       hb.concurrent_ops_commute (node_deliver_messages xsa)\n 3. \\<And>xs a b state xsa x.\n       \\<lbrakk>hb.apply_operations xs [] = Some state;\n        node_deliver_messages xsa = xs @ [(a, b)]; xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. interp_msg (a, b) state = Some y\n 4. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       distinct (node_deliver_messages xsa)\n 2. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       hb.concurrent_ops_commute (node_deliver_messages xsa)\n 3. \\<And>xs a b state xsa x.\n       \\<lbrakk>hb.apply_operations xs [] = Some state;\n        node_deliver_messages xsa = xs @ [(a, b)]; xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. interp_msg (a, b) state = Some y\n 4. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "fix xsa i"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       distinct (node_deliver_messages xsa)\n 2. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       hb.concurrent_ops_commute (node_deliver_messages xsa)\n 3. \\<And>xs a b state xsa x.\n       \\<lbrakk>hb.apply_operations xs [] = Some state;\n        node_deliver_messages xsa = xs @ [(a, b)]; xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. interp_msg (a, b) state = Some y\n 4. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "assume \"xsa prefix of i\""], ["proof (state)\nthis:\n  xsa prefix of i\n\ngoal (4 subgoals):\n 1. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       distinct (node_deliver_messages xsa)\n 2. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       hb.concurrent_ops_commute (node_deliver_messages xsa)\n 3. \\<And>xs a b state xsa x.\n       \\<lbrakk>hb.apply_operations xs [] = Some state;\n        node_deliver_messages xsa = xs @ [(a, b)]; xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. interp_msg (a, b) state = Some y\n 4. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "thus \"distinct (node_deliver_messages xsa)\""], ["proof (prove)\nusing this:\n  xsa prefix of i\n\ngoal (1 subgoal):\n 1. distinct (node_deliver_messages xsa)", "by(auto simp add: node_deliver_messages_distinct)"], ["proof (state)\nthis:\n  distinct (node_deliver_messages xsa)\n\ngoal (3 subgoals):\n 1. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       hb.concurrent_ops_commute (node_deliver_messages xsa)\n 2. \\<And>xs a b state xsa x.\n       \\<lbrakk>hb.apply_operations xs [] = Some state;\n        node_deliver_messages xsa = xs @ [(a, b)]; xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. interp_msg (a, b) state = Some y\n 3. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       hb.concurrent_ops_commute (node_deliver_messages xsa)\n 2. \\<And>xs a b state xsa x.\n       \\<lbrakk>hb.apply_operations xs [] = Some state;\n        node_deliver_messages xsa = xs @ [(a, b)]; xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. interp_msg (a, b) state = Some y\n 3. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "fix xsa i"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       hb.concurrent_ops_commute (node_deliver_messages xsa)\n 2. \\<And>xs a b state xsa x.\n       \\<lbrakk>hb.apply_operations xs [] = Some state;\n        node_deliver_messages xsa = xs @ [(a, b)]; xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. interp_msg (a, b) state = Some y\n 3. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "assume \"xsa prefix of i\""], ["proof (state)\nthis:\n  xsa prefix of i\n\ngoal (3 subgoals):\n 1. \\<And>xsa i.\n       xsa prefix of i \\<Longrightarrow>\n       hb.concurrent_ops_commute (node_deliver_messages xsa)\n 2. \\<And>xs a b state xsa x.\n       \\<lbrakk>hb.apply_operations xs [] = Some state;\n        node_deliver_messages xsa = xs @ [(a, b)]; xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. interp_msg (a, b) state = Some y\n 3. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "thus \"hb.concurrent_ops_commute (node_deliver_messages xsa)\""], ["proof (prove)\nusing this:\n  xsa prefix of i\n\ngoal (1 subgoal):\n 1. hb.concurrent_ops_commute (node_deliver_messages xsa)", "by(auto simp add: concurrent_operations_commute)"], ["proof (state)\nthis:\n  hb.concurrent_ops_commute (node_deliver_messages xsa)\n\ngoal (2 subgoals):\n 1. \\<And>xs a b state xsa x.\n       \\<lbrakk>hb.apply_operations xs [] = Some state;\n        node_deliver_messages xsa = xs @ [(a, b)]; xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. interp_msg (a, b) state = Some y\n 2. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs a b state xsa x.\n       \\<lbrakk>hb.apply_operations xs [] = Some state;\n        node_deliver_messages xsa = xs @ [(a, b)]; xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. interp_msg (a, b) state = Some y\n 2. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "fix xs a b state xsa x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs a b state xsa x.\n       \\<lbrakk>hb.apply_operations xs [] = Some state;\n        node_deliver_messages xsa = xs @ [(a, b)]; xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. interp_msg (a, b) state = Some y\n 2. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "assume \"hb.apply_operations xs [] = Some state\"\n    and \"node_deliver_messages xsa = xs @ [(a, b)]\"\n    and \"xsa prefix of x\""], ["proof (state)\nthis:\n  hb.apply_operations xs [] = Some state\n  node_deliver_messages xsa = xs @ [(a, b)]\n  xsa prefix of x\n\ngoal (2 subgoals):\n 1. \\<And>xs a b state xsa x.\n       \\<lbrakk>hb.apply_operations xs [] = Some state;\n        node_deliver_messages xsa = xs @ [(a, b)]; xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. interp_msg (a, b) state = Some y\n 2. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "thus \"\\<exists>y. interp_msg (a, b) state = Some y\""], ["proof (prove)\nusing this:\n  hb.apply_operations xs [] = Some state\n  node_deliver_messages xsa = xs @ [(a, b)]\n  xsa prefix of x\n\ngoal (1 subgoal):\n 1. \\<exists>y. interp_msg (a, b) state = Some y", "by(metis (no_types, lifting) apply_operations_def bind.bind_lunit not_None_eq\n       hb.apply_operations_Snoc kleisli_def apply_operations_never_fails interp_msg_def)"], ["proof (state)\nthis:\n  \\<exists>y. interp_msg (a, b) state = Some y\n\ngoal (1 subgoal):\n 1. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "fix xs a b xsa x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "assume \"node_deliver_messages xsa = xs @ [(a, b)]\"\n    and \"xsa prefix of x\""], ["proof (state)\nthis:\n  node_deliver_messages xsa = xs @ [(a, b)]\n  xsa prefix of x\n\ngoal (1 subgoal):\n 1. \\<And>xs a b xsa x.\n       \\<lbrakk>node_deliver_messages xsa = xs @ [(a, b)];\n        xsa prefix of x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xsa.\n                            Ex ((prefix of) xsa) \\<and>\n                            node_deliver_messages xsa = xs", "thus \"\\<exists>xsa. (\\<exists>x. xsa prefix of x) \\<and> node_deliver_messages xsa = xs\""], ["proof (prove)\nusing this:\n  node_deliver_messages xsa = xs @ [(a, b)]\n  xsa prefix of x\n\ngoal (1 subgoal):\n 1. \\<exists>xsa.\n       (\\<exists>x. xsa prefix of x) \\<and> node_deliver_messages xsa = xs", "using drop_last_message"], ["proof (prove)\nusing this:\n  node_deliver_messages xsa = xs @ [(a, b)]\n  xsa prefix of x\n  \\<lbrakk>?evts prefix of ?i;\n   node_deliver_messages ?evts = ?msgs @ [?last_msg]\\<rbrakk>\n  \\<Longrightarrow> \\<exists>pre.\n                       pre prefix of ?i \\<and>\n                       node_deliver_messages pre = ?msgs\n\ngoal (1 subgoal):\n 1. \\<exists>xsa.\n       (\\<exists>x. xsa prefix of x) \\<and> node_deliver_messages xsa = xs", "by blast"], ["proof (state)\nthis:\n  \\<exists>xsa.\n     (\\<exists>x. xsa prefix of x) \\<and> node_deliver_messages xsa = xs\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "interpretation trivial_rga_implementation: rga \"\\<lambda>x. []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rga (\\<lambda>x. [])", "by(standard, auto simp add: trivial_node_histories.history_order_def\n      trivial_node_histories.prefix_of_node_history_def)"], ["", "end"]]}