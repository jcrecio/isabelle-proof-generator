{"file_name": "/home/qj213/afp-2021-10-22/thys/CRDT/Network.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CRDT", "problem_names": ["lemma (in node_histories) history_finite:\n  shows \"finite (set (history i))\"", "lemma (in node_histories) node_total_order_trans:\n  assumes \"e1 \\<sqsubset>\\<^sup>i e2\"\n      and \"e2 \\<sqsubset>\\<^sup>i e3\"\n    shows \"e1 \\<sqsubset>\\<^sup>i e3\"", "lemma (in node_histories) local_order_carrier_closed:\n  assumes \"e1 \\<sqsubset>\\<^sup>i e2\"\n    shows \"{e1,e2} \\<subseteq> set (history i)\"", "lemma (in node_histories) node_total_order_irrefl:\n  shows \"\\<not> (e \\<sqsubset>\\<^sup>i e)\"", "lemma (in node_histories) node_total_order_antisym:\n  assumes \"e1 \\<sqsubset>\\<^sup>i e2\"\n      and \"e2 \\<sqsubset>\\<^sup>i e1\"\n    shows \"False\"", "lemma (in node_histories) node_order_is_total:\n  assumes \"e1 \\<in> set (history i)\"\n      and \"e2 \\<in> set (history i)\"\n      and \"e1 \\<noteq> e2\"\n    shows \"e1 \\<sqsubset>\\<^sup>i e2 \\<or> e2 \\<sqsubset>\\<^sup>i e1\"", "lemma (in node_histories) carriers_head_lt:\n  assumes \"y#ys = history i\"\n  shows   \"\\<not>(x \\<sqsubset>\\<^sup>i y)\"", "lemma (in node_histories) prefix_of_ConsD [dest]:\n  assumes \"x # xs prefix of i\"\n    shows \"[x] prefix of i\"", "lemma (in node_histories) prefix_of_appendD [dest]:\n  assumes \"xs @ ys prefix of i\"\n    shows \"xs prefix of i\"", "lemma (in node_histories) prefix_distinct:\n  assumes \"xs prefix of i\"\n    shows \"distinct xs\"", "lemma (in node_histories) prefix_to_carriers [intro]:\n  assumes \"xs prefix of i\"\n    shows \"set xs \\<subseteq> set (history i)\"", "lemma (in node_histories) prefix_elem_to_carriers:\n  assumes \"xs prefix of i\"\n      and \"x \\<in> set xs\"\n    shows \"x \\<in> set (history i)\"", "lemma (in node_histories) local_order_prefix_closed:\n  assumes \"x \\<sqsubset>\\<^sup>i y\"\n      and \"xs prefix of i\"\n      and \"y \\<in> set xs\"\n    shows \"x \\<in> set xs\"", "lemma (in node_histories) local_order_prefix_closed_last:\n  assumes \"x \\<sqsubset>\\<^sup>i y\"\n      and \"xs@[y] prefix of i\"\n    shows \"x \\<in> set xs\"", "lemma (in node_histories) events_before_exist:\n  assumes \"x \\<in> set (history i)\"\n  shows \"\\<exists>pre. pre @ [x] prefix of i\"", "lemma (in node_histories) events_in_local_order:\n  assumes \"pre @ [e2] prefix of i\"\n  and \"e1 \\<in> set pre\"\n  shows \"e1 \\<sqsubset>\\<^sup>i e2\"", "lemma (in network) broadcast_before_delivery:\n  assumes \"Deliver m \\<in> set (history i)\"\n  shows \"\\<exists>j. Broadcast m \\<sqsubset>\\<^sup>j Deliver m\"", "lemma (in network) broadcasts_unique:\n  assumes \"i \\<noteq> j\"\n    and \"Broadcast m \\<in> set (history i)\"\n  shows \"Broadcast m \\<notin> set (history j)\"", "lemma (in causal_network) causal_broadcast:\n  assumes \"Deliver m2 \\<in> set (history j)\"\n      and \"Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2\"\n    shows \"Deliver m1 \\<sqsubset>\\<^sup>j Deliver m2\"", "lemma (in network) hb_broadcast_exists1:\n  assumes \"hb m1 m2\"\n  shows \"\\<exists>i. Broadcast m1 \\<in> set (history i)\"", "lemma (in network) hb_broadcast_exists2:\n  assumes \"hb m1 m2\"\n  shows \"\\<exists>i. Broadcast m2 \\<in> set (history i)\"", "lemma (in causal_network) hb_has_a_reason:\n  assumes \"hb m1 m2\"\n    and \"Broadcast m2 \\<in> set (history i)\"\n  shows \"Deliver m1 \\<in> set (history i) \\<or> Broadcast m1 \\<in> set (history i)\"", "lemma (in causal_network) hb_cross_node_delivery:\n  assumes \"hb m1 m2\"\n    and \"Broadcast m1 \\<in> set (history i)\"\n    and \"Broadcast m2 \\<in> set (history j)\"\n    and \"i \\<noteq> j\"\n  shows \"Deliver m1 \\<in> set (history j)\"", "lemma (in causal_network) hb_irrefl:\n  assumes \"hb m1 m2\"\n  shows \"m1 \\<noteq> m2\"", "lemma (in causal_network) hb_broadcast_broadcast_order:\n  assumes \"hb m1 m2\"\n    and \"Broadcast m1 \\<in> set (history i)\"\n    and \"Broadcast m2 \\<in> set (history i)\"\n  shows \"Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\"", "lemma (in causal_network) hb_antisym:\n  assumes \"hb x y\"\n      and \"hb y x\"\n  shows   \"False\"", "lemma (in network) node_deliver_messages_empty [simp]:\n  shows \"node_deliver_messages [] = []\"", "lemma (in network) node_deliver_messages_Cons:\n  shows \"node_deliver_messages (x#xs) = (node_deliver_messages [x])@(node_deliver_messages xs)\"", "lemma (in network) node_deliver_messages_append:\n  shows \"node_deliver_messages (xs@ys) = (node_deliver_messages xs)@(node_deliver_messages ys)\"", "lemma (in network) node_deliver_messages_Broadcast [simp]:\n  shows \"node_deliver_messages [Broadcast m] = []\"", "lemma (in network) node_deliver_messages_Deliver [simp]:\n  shows \"node_deliver_messages [Deliver m] = [m]\"", "lemma (in network) prefix_msg_in_history:\n  assumes \"es prefix of i\"\n      and \"m \\<in> set (node_deliver_messages es)\"\n    shows \"Deliver m \\<in> set (history i)\"", "lemma (in network) prefix_contains_msg:\n  assumes \"es prefix of i\"\n      and \"m \\<in> set (node_deliver_messages es)\"\n    shows \"Deliver m \\<in> set es\"", "lemma (in network) node_deliver_messages_distinct:\n  assumes \"xs prefix of i\"\n  shows \"distinct (node_deliver_messages xs)\"", "lemma (in network) drop_last_message:\n  assumes \"evts prefix of i\"\n  and \"node_deliver_messages evts = msgs @ [last_msg]\"\n  shows \"\\<exists>pre. pre prefix of i \\<and> node_deliver_messages pre = msgs\"", "lemma (in network_with_ops) apply_operations_empty [simp]:\n  shows \"apply_operations [] = Some initial_state\"", "lemma (in network_with_ops) apply_operations_Broadcast [simp]:\n  shows \"apply_operations (xs @ [Broadcast m]) = apply_operations xs\"", "lemma (in network_with_ops) apply_operations_Deliver [simp]:\n  shows \"apply_operations (xs @ [Deliver m]) = (apply_operations xs \\<bind> interp_msg m)\"", "lemma (in network_with_ops) hb_consistent_technical:\n  assumes \"\\<And>m n. m < length cs \\<Longrightarrow> n < m \\<Longrightarrow> cs ! n \\<sqsubset>\\<^sup>i cs ! m\"\n  shows   \"hb.hb_consistent (node_deliver_messages cs)\"", "lemma (in network_with_ops) hb_consistent_prefix:\n  assumes \"xs prefix of i\"\n  shows \"hb.hb_consistent (node_deliver_messages xs)\"", "lemma (in network_with_constrained_ops) broadcast_is_valid:\n  assumes \"Broadcast m \\<in> set (history i)\"\n  shows \"\\<exists>state. valid_msg state m\"", "lemma (in network_with_constrained_ops) deliver_is_valid:\n  assumes \"Deliver m \\<in> set (history i)\"\n  shows \"\\<exists>j pre state. pre @ [Broadcast m] prefix of j \\<and> apply_operations pre = Some state \\<and> valid_msg state m\"", "lemma (in network_with_constrained_ops) deliver_in_prefix_is_valid:\n  assumes \"xs prefix of i\"\n      and \"Deliver m \\<in> set xs\"\n    shows \"\\<exists>state. valid_msg state m\""], "translations": [["", "lemma (in node_histories) history_finite:\n  shows \"finite (set (history i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set (history i))", "by auto"], ["", "definition (in node_histories) history_order :: \"'evt \\<Rightarrow> nat \\<Rightarrow> 'evt \\<Rightarrow> bool\" (\"_/ \\<sqsubset>\\<^sup>_/ _\" [50,1000,50]50) where\n  \"x \\<sqsubset>\\<^sup>i z \\<equiv> \\<exists>xs ys zs. xs@x#ys@z#zs = history i\""], ["", "lemma (in node_histories) node_total_order_trans:\n  assumes \"e1 \\<sqsubset>\\<^sup>i e2\"\n      and \"e2 \\<sqsubset>\\<^sup>i e3\"\n    shows \"e1 \\<sqsubset>\\<^sup>i e3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e1 \\<sqsubset>\\<^sup>i e3", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. e1 \\<sqsubset>\\<^sup>i e3", "obtain xs1 xs2 ys1 ys2 zs1 zs2 where *: \"xs1 @ e1 # ys1 @ e2 # zs1 = history i\"\n      \"xs2 @ e2 # ys2 @ e3 # zs2 = history i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xs1 ys1 zs1 xs2 ys2 zs2.\n        \\<lbrakk>xs1 @ e1 # ys1 @ e2 # zs1 = history i;\n         xs2 @ e2 # ys2 @ e3 # zs2 = history i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using history_order_def assms"], ["proof (prove)\nusing this:\n  ?x \\<sqsubset>\\<^sup>?i ?z \\<equiv>\n  \\<exists>xs ys zs. xs @ ?x # ys @ ?z # zs = history ?i\n  e1 \\<sqsubset>\\<^sup>i e2\n  e2 \\<sqsubset>\\<^sup>i e3\n\ngoal (1 subgoal):\n 1. (\\<And>xs1 ys1 zs1 xs2 ys2 zs2.\n        \\<lbrakk>xs1 @ e1 # ys1 @ e2 # zs1 = history i;\n         xs2 @ e2 # ys2 @ e3 # zs2 = history i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  xs1 @ e1 # ys1 @ e2 # zs1 = history i\n  xs2 @ e2 # ys2 @ e3 # zs2 = history i\n\ngoal (1 subgoal):\n 1. e1 \\<sqsubset>\\<^sup>i e3", "hence \"xs1 @ e1 # ys1 = xs2 \\<and> zs1 = ys2 @ e3 # zs2\""], ["proof (prove)\nusing this:\n  xs1 @ e1 # ys1 @ e2 # zs1 = history i\n  xs2 @ e2 # ys2 @ e3 # zs2 = history i\n\ngoal (1 subgoal):\n 1. xs1 @ e1 # ys1 = xs2 \\<and> zs1 = ys2 @ e3 # zs2", "by(rule_tac xs=\"history i\" and ys=\"[e2]\" in pre_suf_eq_distinct_list) auto"], ["proof (state)\nthis:\n  xs1 @ e1 # ys1 = xs2 \\<and> zs1 = ys2 @ e3 # zs2\n\ngoal (1 subgoal):\n 1. e1 \\<sqsubset>\\<^sup>i e3", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs1 @ e1 # ys1 = xs2 \\<and> zs1 = ys2 @ e3 # zs2\n\ngoal (1 subgoal):\n 1. e1 \\<sqsubset>\\<^sup>i e3", "by(clarsimp simp: history_order_def) (metis \"*\"(2) append.assoc append_Cons)"], ["proof (state)\nthis:\n  e1 \\<sqsubset>\\<^sup>i e3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in node_histories) local_order_carrier_closed:\n  assumes \"e1 \\<sqsubset>\\<^sup>i e2\"\n    shows \"{e1,e2} \\<subseteq> set (history i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {e1, e2} \\<subseteq> set (history i)", "using assms"], ["proof (prove)\nusing this:\n  e1 \\<sqsubset>\\<^sup>i e2\n\ngoal (1 subgoal):\n 1. {e1, e2} \\<subseteq> set (history i)", "by (clarsimp simp add: history_order_def)\n    (metis in_set_conv_decomp Un_iff Un_subset_iff insert_subset list.simps(15)\n        set_append set_subset_Cons)+"], ["", "lemma (in node_histories) node_total_order_irrefl:\n  shows \"\\<not> (e \\<sqsubset>\\<^sup>i e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> e \\<sqsubset>\\<^sup>i e", "by(clarsimp simp add: history_order_def)\n    (metis Un_iff histories_distinct distinct_append distinct_set_notin\n        list.set_intros(1) set_append)"], ["", "lemma (in node_histories) node_total_order_antisym:\n  assumes \"e1 \\<sqsubset>\\<^sup>i e2\"\n      and \"e2 \\<sqsubset>\\<^sup>i e1\"\n    shows \"False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using assms node_total_order_irrefl node_total_order_trans"], ["proof (prove)\nusing this:\n  e1 \\<sqsubset>\\<^sup>i e2\n  e2 \\<sqsubset>\\<^sup>i e1\n  \\<not> ?e \\<sqsubset>\\<^sup>?i ?e\n  \\<lbrakk>?e1.0 \\<sqsubset>\\<^sup>?i ?e2.0;\n   ?e2.0 \\<sqsubset>\\<^sup>?i ?e3.0\\<rbrakk>\n  \\<Longrightarrow> ?e1.0 \\<sqsubset>\\<^sup>?i ?e3.0\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["", "lemma (in node_histories) node_order_is_total:\n  assumes \"e1 \\<in> set (history i)\"\n      and \"e2 \\<in> set (history i)\"\n      and \"e1 \\<noteq> e2\"\n    shows \"e1 \\<sqsubset>\\<^sup>i e2 \\<or> e2 \\<sqsubset>\\<^sup>i e1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e1 \\<sqsubset>\\<^sup>i e2 \\<or> e2 \\<sqsubset>\\<^sup>i e1", "using assms"], ["proof (prove)\nusing this:\n  e1 \\<in> set (history i)\n  e2 \\<in> set (history i)\n  e1 \\<noteq> e2\n\ngoal (1 subgoal):\n 1. e1 \\<sqsubset>\\<^sup>i e2 \\<or> e2 \\<sqsubset>\\<^sup>i e1", "unfolding history_order_def"], ["proof (prove)\nusing this:\n  e1 \\<in> set (history i)\n  e2 \\<in> set (history i)\n  e1 \\<noteq> e2\n\ngoal (1 subgoal):\n 1. (\\<exists>xs ys zs. xs @ e1 # ys @ e2 # zs = history i) \\<or>\n    (\\<exists>xs ys zs. xs @ e2 # ys @ e1 # zs = history i)", "by(metis list_split_two_elems histories_distinct)"], ["", "definition (in node_histories) prefix_of_node_history :: \"'evt list \\<Rightarrow> nat \\<Rightarrow> bool\" (infix \"prefix of\" 50) where\n  \"xs prefix of i \\<equiv> \\<exists>ys. xs@ys = history i\""], ["", "lemma (in node_histories) carriers_head_lt:\n  assumes \"y#ys = history i\"\n  shows   \"\\<not>(x \\<sqsubset>\\<^sup>i y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> x \\<sqsubset>\\<^sup>i y", "using assms"], ["proof (prove)\nusing this:\n  y # ys = history i\n\ngoal (1 subgoal):\n 1. \\<not> x \\<sqsubset>\\<^sup>i y", "apply(clarsimp simp add: history_order_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ysa zs.\n       \\<lbrakk>y # ys = history i;\n        xs @ x # ysa @ y # zs = history i\\<rbrakk>\n       \\<Longrightarrow> False", "apply(rename_tac xs1 ys1 zs1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs1 ys1 zs1.\n       \\<lbrakk>y # ys = history i;\n        xs1 @ x # ys1 @ y # zs1 = history i\\<rbrakk>\n       \\<Longrightarrow> False", "apply (subgoal_tac \"xs1 @ x # ys1 = [] \\<and> zs1 = ys\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs1 ys1 zs1.\n       \\<lbrakk>y # ys = history i; xs1 @ x # ys1 @ y # zs1 = history i;\n        xs1 @ x # ys1 = [] \\<and> zs1 = ys\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>xs1 ys1 zs1.\n       \\<lbrakk>y # ys = history i;\n        xs1 @ x # ys1 @ y # zs1 = history i\\<rbrakk>\n       \\<Longrightarrow> xs1 @ x # ys1 = [] \\<and> zs1 = ys", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs1 ys1 zs1.\n       \\<lbrakk>y # ys = history i;\n        xs1 @ x # ys1 @ y # zs1 = history i\\<rbrakk>\n       \\<Longrightarrow> xs1 @ x # ys1 = [] \\<and> zs1 = ys", "apply (rule_tac xs=\"history i\" and ys=\"[y]\" in pre_suf_eq_distinct_list)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>xs1 ys1 zs1.\n       \\<lbrakk>y # ys = history i;\n        xs1 @ x # ys1 @ y # zs1 = history i\\<rbrakk>\n       \\<Longrightarrow> distinct (history i)\n 2. \\<And>xs1 ys1 zs1.\n       \\<lbrakk>y # ys = history i;\n        xs1 @ x # ys1 @ y # zs1 = history i\\<rbrakk>\n       \\<Longrightarrow> [y] \\<noteq> []\n 3. \\<And>xs1 ys1 zs1.\n       \\<lbrakk>y # ys = history i;\n        xs1 @ x # ys1 @ y # zs1 = history i\\<rbrakk>\n       \\<Longrightarrow> (xs1 @ x # ys1) @ [y] @ zs1 = history i\n 4. \\<And>xs1 ys1 zs1.\n       \\<lbrakk>y # ys = history i;\n        xs1 @ x # ys1 @ y # zs1 = history i\\<rbrakk>\n       \\<Longrightarrow> [] @ [y] @ ys = history i", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in node_histories) prefix_of_ConsD [dest]:\n  assumes \"x # xs prefix of i\"\n    shows \"[x] prefix of i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [x] prefix of i", "using assms"], ["proof (prove)\nusing this:\n  x # xs prefix of i\n\ngoal (1 subgoal):\n 1. [x] prefix of i", "by(auto simp: prefix_of_node_history_def)"], ["", "lemma (in node_histories) prefix_of_appendD [dest]:\n  assumes \"xs @ ys prefix of i\"\n    shows \"xs prefix of i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs prefix of i", "using assms"], ["proof (prove)\nusing this:\n  xs @ ys prefix of i\n\ngoal (1 subgoal):\n 1. xs prefix of i", "by(auto simp: prefix_of_node_history_def)"], ["", "lemma (in node_histories) prefix_distinct:\n  assumes \"xs prefix of i\"\n    shows \"distinct xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct xs", "using assms"], ["proof (prove)\nusing this:\n  xs prefix of i\n\ngoal (1 subgoal):\n 1. distinct xs", "by(clarsimp simp: prefix_of_node_history_def) (metis histories_distinct distinct_append)"], ["", "lemma (in node_histories) prefix_to_carriers [intro]:\n  assumes \"xs prefix of i\"\n    shows \"set xs \\<subseteq> set (history i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs \\<subseteq> set (history i)", "using assms"], ["proof (prove)\nusing this:\n  xs prefix of i\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> set (history i)", "by(clarsimp simp: prefix_of_node_history_def) (metis Un_iff set_append)"], ["", "lemma (in node_histories) prefix_elem_to_carriers:\n  assumes \"xs prefix of i\"\n      and \"x \\<in> set xs\"\n    shows \"x \\<in> set (history i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (history i)", "using assms"], ["proof (prove)\nusing this:\n  xs prefix of i\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. x \\<in> set (history i)", "by(clarsimp simp: prefix_of_node_history_def) (metis Un_iff set_append)"], ["", "lemma (in node_histories) local_order_prefix_closed:\n  assumes \"x \\<sqsubset>\\<^sup>i y\"\n      and \"xs prefix of i\"\n      and \"y \\<in> set xs\"\n    shows \"x \\<in> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> set xs", "obtain ys where \"xs @ ys = history i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ys.\n        xs @ ys = history i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms prefix_of_node_history_def"], ["proof (prove)\nusing this:\n  x \\<sqsubset>\\<^sup>i y\n  xs prefix of i\n  y \\<in> set xs\n  ?xs prefix of ?i \\<equiv> \\<exists>ys. ?xs @ ys = history ?i\n\ngoal (1 subgoal):\n 1. (\\<And>ys.\n        xs @ ys = history i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  xs @ ys = history i\n\ngoal (1 subgoal):\n 1. x \\<in> set xs", "moreover"], ["proof (state)\nthis:\n  xs @ ys = history i\n\ngoal (1 subgoal):\n 1. x \\<in> set xs", "obtain as bs cs where \"as @ x # bs @ y # cs = history i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as bs cs.\n        as @ x # bs @ y # cs = history i \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms history_order_def"], ["proof (prove)\nusing this:\n  x \\<sqsubset>\\<^sup>i y\n  xs prefix of i\n  y \\<in> set xs\n  ?x \\<sqsubset>\\<^sup>?i ?z \\<equiv>\n  \\<exists>xs ys zs. xs @ ?x # ys @ ?z # zs = history ?i\n\ngoal (1 subgoal):\n 1. (\\<And>as bs cs.\n        as @ x # bs @ y # cs = history i \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  as @ x # bs @ y # cs = history i\n\ngoal (1 subgoal):\n 1. x \\<in> set xs", "moreover"], ["proof (state)\nthis:\n  as @ x # bs @ y # cs = history i\n\ngoal (1 subgoal):\n 1. x \\<in> set xs", "obtain pre suf where *: \"xs = pre @ y # suf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>pre suf.\n        xs = pre @ y # suf \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms split_list"], ["proof (prove)\nusing this:\n  x \\<sqsubset>\\<^sup>i y\n  xs prefix of i\n  y \\<in> set xs\n  ?x \\<in> set ?xs \\<Longrightarrow> \\<exists>ys zs. ?xs = ys @ ?x # zs\n\ngoal (1 subgoal):\n 1. (\\<And>pre suf.\n        xs = pre @ y # suf \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  xs = pre @ y # suf\n\ngoal (1 subgoal):\n 1. x \\<in> set xs", "ultimately"], ["proof (chain)\npicking this:\n  xs @ ys = history i\n  as @ x # bs @ y # cs = history i\n  xs = pre @ y # suf", "have \"pre = as @ x # bs \\<and> suf @ ys = cs\""], ["proof (prove)\nusing this:\n  xs @ ys = history i\n  as @ x # bs @ y # cs = history i\n  xs = pre @ y # suf\n\ngoal (1 subgoal):\n 1. pre = as @ x # bs \\<and> suf @ ys = cs", "by (rule_tac xs=\"history i\" and ys=\"[y]\" in pre_suf_eq_distinct_list) auto"], ["proof (state)\nthis:\n  pre = as @ x # bs \\<and> suf @ ys = cs\n\ngoal (1 subgoal):\n 1. x \\<in> set xs", "thus ?thesis"], ["proof (prove)\nusing this:\n  pre = as @ x # bs \\<and> suf @ ys = cs\n\ngoal (1 subgoal):\n 1. x \\<in> set xs", "using assms *"], ["proof (prove)\nusing this:\n  pre = as @ x # bs \\<and> suf @ ys = cs\n  x \\<sqsubset>\\<^sup>i y\n  xs prefix of i\n  y \\<in> set xs\n  xs = pre @ y # suf\n\ngoal (1 subgoal):\n 1. x \\<in> set xs", "by clarsimp"], ["proof (state)\nthis:\n  x \\<in> set xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in node_histories) local_order_prefix_closed_last:\n  assumes \"x \\<sqsubset>\\<^sup>i y\"\n      and \"xs@[y] prefix of i\"\n    shows \"x \\<in> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> set xs", "have \"x \\<in> set (xs @ [y])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (xs @ [y])", "using assms"], ["proof (prove)\nusing this:\n  x \\<sqsubset>\\<^sup>i y\n  xs @ [y] prefix of i\n\ngoal (1 subgoal):\n 1. x \\<in> set (xs @ [y])", "by (force dest: local_order_prefix_closed)"], ["proof (state)\nthis:\n  x \\<in> set (xs @ [y])\n\ngoal (1 subgoal):\n 1. x \\<in> set xs", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> set (xs @ [y])\n\ngoal (1 subgoal):\n 1. x \\<in> set xs", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> set (xs @ [y])\n  x \\<sqsubset>\\<^sup>i y\n  xs @ [y] prefix of i\n\ngoal (1 subgoal):\n 1. x \\<in> set xs", "by(force simp add: node_total_order_irrefl prefix_to_carriers)"], ["proof (state)\nthis:\n  x \\<in> set xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in node_histories) events_before_exist:\n  assumes \"x \\<in> set (history i)\"\n  shows \"\\<exists>pre. pre @ [x] prefix of i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>pre. pre @ [x] prefix of i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>pre. pre @ [x] prefix of i", "have \"\\<exists>idx. idx < length (history i) \\<and> (history i) ! idx = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>idx<length (history i). history i ! idx = x", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> set (history i)\n\ngoal (1 subgoal):\n 1. \\<exists>idx<length (history i). history i ! idx = x", "by(simp add: set_elem_nth)"], ["proof (state)\nthis:\n  \\<exists>idx<length (history i). history i ! idx = x\n\ngoal (1 subgoal):\n 1. \\<exists>pre. pre @ [x] prefix of i", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>idx<length (history i). history i ! idx = x\n\ngoal (1 subgoal):\n 1. \\<exists>pre. pre @ [x] prefix of i", "by(metis append_take_drop_id take_Suc_conv_app_nth prefix_of_node_history_def)"], ["proof (state)\nthis:\n  \\<exists>pre. pre @ [x] prefix of i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in node_histories) events_in_local_order:\n  assumes \"pre @ [e2] prefix of i\"\n  and \"e1 \\<in> set pre\"\n  shows \"e1 \\<sqsubset>\\<^sup>i e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e1 \\<sqsubset>\\<^sup>i e2", "using assms split_list"], ["proof (prove)\nusing this:\n  pre @ [e2] prefix of i\n  e1 \\<in> set pre\n  ?x \\<in> set ?xs \\<Longrightarrow> \\<exists>ys zs. ?xs = ys @ ?x # zs\n\ngoal (1 subgoal):\n 1. e1 \\<sqsubset>\\<^sup>i e2", "unfolding history_order_def prefix_of_node_history_def"], ["proof (prove)\nusing this:\n  \\<exists>ys. (pre @ [e2]) @ ys = history i\n  e1 \\<in> set pre\n  ?x \\<in> set ?xs \\<Longrightarrow> \\<exists>ys zs. ?xs = ys @ ?x # zs\n\ngoal (1 subgoal):\n 1. \\<exists>xs ys zs. xs @ e1 # ys @ e2 # zs = history i", "by fastforce"], ["", "subsection\\<open>Asynchronous broadcast networks\\<close>"], ["", "text\\<open>We define a new locale $\\isa{network}$ containing three axioms that define how broadcast\n     and deliver events may interact, with these axioms defining the properties of our network model.\\<close>"], ["", "datatype 'msg event\n  = Broadcast 'msg\n  | Deliver 'msg"], ["", "locale network = node_histories history for history :: \"nat \\<Rightarrow> 'msg event list\" +\n  fixes msg_id :: \"'msg \\<Rightarrow> 'msgid\"\n  (* Broadcast/Deliver interaction *)\n  assumes delivery_has_a_cause: \"\\<lbrakk> Deliver m \\<in> set (history i) \\<rbrakk> \\<Longrightarrow>\n                                    \\<exists>j. Broadcast m \\<in> set (history j)\"\n      and deliver_locally: \"\\<lbrakk> Broadcast m \\<in> set (history i) \\<rbrakk> \\<Longrightarrow>\n                                    Broadcast m \\<sqsubset>\\<^sup>i Deliver m\"\n      and msg_id_unique: \"\\<lbrakk> Broadcast m1 \\<in> set (history i);\n                            Broadcast m2 \\<in> set (history j);\n                            msg_id m1 = msg_id m2 \\<rbrakk> \\<Longrightarrow> i = j \\<and> m1 = m2\""], ["", "text\\<open>\nThe axioms can be understood as follows:\n\\begin{description}\n    \\item[delivery-has-a-cause:] If some message $\\isa{m}$ was delivered at some node, then there exists some node on which $\\isa{m}$ was broadcast.\n        With this axiom, we assert that messages are not created ``out of thin air'' by the network itself, and that the only source of messages are the nodes.\n    \\item[deliver-locally:] If a node broadcasts some message $\\isa{m}$, then the same node must subsequently also deliver $\\isa{m}$ to itself.\n        Since $\\isa{m}$ does not actually travel over the network, this local delivery is always possible, even if the network is interrupted.\n        Local delivery may seem redundant, since the effect of the delivery could also be implemented by the broadcast event itself; however, it is standard practice in the description of broadcast protocols that the sender of a message also sends it to itself, since this property simplifies the definition of algorithms built on top of the broadcast abstraction \\cite{Cachin:2011wt}.\n    \\item[msg-id-unique:] We do not assume that the message type $\\isacharprime\\isa{msg}$ has any particular structure; we only assume the existence of a function $\\isa{msg-id} \\mathbin{\\isacharcolon\\isacharcolon} \\isacharprime\\isa{msg} \\mathbin{\\isasymRightarrow} \\isacharprime\\isa{msgid}$ that maps every message to some globally unique identifier of type $\\isacharprime\\isa{msgid}$.\n        We assert this uniqueness by stating that if $\\isa{m1}$ and $\\isa{m2}$ are any two messages broadcast by any two nodes, and their $\\isa{msg-id}$s are the same, then they were in fact broadcast by the same node and the two messages are identical. \n        In practice, these globally unique IDs can by implemented using unique node identifiers, sequence numbers or timestamps.\n\\end{description}\n\\<close>"], ["", "lemma (in network) broadcast_before_delivery:\n  assumes \"Deliver m \\<in> set (history i)\"\n  shows \"\\<exists>j. Broadcast m \\<sqsubset>\\<^sup>j Deliver m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>j. Broadcast m \\<sqsubset>\\<^sup>j Deliver m", "using assms deliver_locally delivery_has_a_cause"], ["proof (prove)\nusing this:\n  Deliver m \\<in> set (history i)\n  Broadcast ?m \\<in> set (history ?i) \\<Longrightarrow>\n  Broadcast ?m \\<sqsubset>\\<^sup>?i Deliver ?m\n  Deliver ?m \\<in> set (history ?i) \\<Longrightarrow>\n  \\<exists>j. Broadcast ?m \\<in> set (history j)\n\ngoal (1 subgoal):\n 1. \\<exists>j. Broadcast m \\<sqsubset>\\<^sup>j Deliver m", "by blast"], ["", "lemma (in network) broadcasts_unique:\n  assumes \"i \\<noteq> j\"\n    and \"Broadcast m \\<in> set (history i)\"\n  shows \"Broadcast m \\<notin> set (history j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Broadcast m \\<notin> set (history j)", "using assms msg_id_unique"], ["proof (prove)\nusing this:\n  i \\<noteq> j\n  Broadcast m \\<in> set (history i)\n  \\<lbrakk>Broadcast ?m1.0 \\<in> set (history ?i);\n   Broadcast ?m2.0 \\<in> set (history ?j);\n   msg_id ?m1.0 = msg_id ?m2.0\\<rbrakk>\n  \\<Longrightarrow> ?i = ?j \\<and> ?m1.0 = ?m2.0\n\ngoal (1 subgoal):\n 1. Broadcast m \\<notin> set (history j)", "by blast"], ["", "text\\<open>Based on the well-known definition by \\cite{Lamport:1978jq}, we say that\n    $\\isa{m1}\\prec\\isa{m2}$ if any of the following is true:\n    \\begin{enumerate}\n      \\item $\\isa{m1}$ and $\\isa{m2}$ were broadcast by the same node, and $\\isa{m1}$ was broadcast before $\\isa{m2}$.\n      \\item The node that broadcast $\\isa{m2}$ had delivered $\\isa{m1}$ before it broadcast $\\isa{m2}$.\n      \\item There exists some operation $\\isa{m3}$ such that $\\isa{m1} \\prec \\isa{m3}$ and $\\isa{m3} \\prec \\isa{m2}$.\n    \\end{enumerate}\\<close>"], ["", "inductive (in network) hb :: \"'msg \\<Rightarrow> 'msg \\<Rightarrow> bool\" where\n  hb_broadcast: \"\\<lbrakk> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<rbrakk> \\<Longrightarrow> hb m1 m2\" |\n  hb_deliver:   \"\\<lbrakk> Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<rbrakk> \\<Longrightarrow> hb m1 m2\" |\n  hb_trans:     \"\\<lbrakk> hb m1 m2; hb m2 m3 \\<rbrakk> \\<Longrightarrow> hb m1 m3\""], ["", "inductive_cases (in network) hb_elim: \"hb x y\""], ["", "definition (in network) weak_hb :: \"'msg \\<Rightarrow> 'msg \\<Rightarrow> bool\" where\n  \"weak_hb m1 m2 \\<equiv> hb m1 m2 \\<or> m1 = m2\""], ["", "locale causal_network = network +\n  assumes causal_delivery: \"Deliver m2 \\<in> set (history j) \\<Longrightarrow> hb m1 m2 \\<Longrightarrow> Deliver m1 \\<sqsubset>\\<^sup>j Deliver m2\""], ["", "lemma (in causal_network) causal_broadcast:\n  assumes \"Deliver m2 \\<in> set (history j)\"\n      and \"Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2\"\n    shows \"Deliver m1 \\<sqsubset>\\<^sup>j Deliver m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Deliver m1 \\<sqsubset>\\<^sup>j Deliver m2", "using assms causal_delivery hb.intros(2)"], ["proof (prove)\nusing this:\n  Deliver m2 \\<in> set (history j)\n  Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2\n  \\<lbrakk>Deliver ?m2.0 \\<in> set (history ?j); hb ?m1.0 ?m2.0\\<rbrakk>\n  \\<Longrightarrow> Deliver ?m1.0 \\<sqsubset>\\<^sup>?j Deliver ?m2.0\n  Deliver ?m1.0 \\<sqsubset>\\<^sup>?i Broadcast ?m2.0 \\<Longrightarrow>\n  hb ?m1.0 ?m2.0\n\ngoal (1 subgoal):\n 1. Deliver m1 \\<sqsubset>\\<^sup>j Deliver m2", "by blast"], ["", "lemma (in network) hb_broadcast_exists1:\n  assumes \"hb m1 m2\"\n  shows \"\\<exists>i. Broadcast m1 \\<in> set (history i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i. Broadcast m1 \\<in> set (history i)", "using assms"], ["proof (prove)\nusing this:\n  hb m1 m2\n\ngoal (1 subgoal):\n 1. \\<exists>i. Broadcast m1 \\<in> set (history i)", "apply(induction rule: hb.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m1 i m2.\n       Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<Longrightarrow>\n       \\<exists>i. Broadcast m1 \\<in> set (history i)\n 2. \\<And>m1 i m2.\n       Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<Longrightarrow>\n       \\<exists>i. Broadcast m1 \\<in> set (history i)\n 3. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; \\<exists>i. Broadcast m1 \\<in> set (history i);\n        hb m2 m3; \\<exists>i. Broadcast m2 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i. Broadcast m1 \\<in> set (history i)", "apply(meson insert_subset node_histories.local_order_carrier_closed node_histories_axioms)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m1 i m2.\n       Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<Longrightarrow>\n       \\<exists>i. Broadcast m1 \\<in> set (history i)\n 2. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; \\<exists>i. Broadcast m1 \\<in> set (history i);\n        hb m2 m3; \\<exists>i. Broadcast m2 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i. Broadcast m1 \\<in> set (history i)", "apply(meson delivery_has_a_cause insert_subset local_order_carrier_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; \\<exists>i. Broadcast m1 \\<in> set (history i);\n        hb m2 m3; \\<exists>i. Broadcast m2 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i. Broadcast m1 \\<in> set (history i)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in network) hb_broadcast_exists2:\n  assumes \"hb m1 m2\"\n  shows \"\\<exists>i. Broadcast m2 \\<in> set (history i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i. Broadcast m2 \\<in> set (history i)", "using assms"], ["proof (prove)\nusing this:\n  hb m1 m2\n\ngoal (1 subgoal):\n 1. \\<exists>i. Broadcast m2 \\<in> set (history i)", "apply(induction rule: hb.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m1 i m2.\n       Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<Longrightarrow>\n       \\<exists>i. Broadcast m2 \\<in> set (history i)\n 2. \\<And>m1 i m2.\n       Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<Longrightarrow>\n       \\<exists>i. Broadcast m2 \\<in> set (history i)\n 3. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; \\<exists>i. Broadcast m2 \\<in> set (history i);\n        hb m2 m3; \\<exists>i. Broadcast m3 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i. Broadcast m3 \\<in> set (history i)", "apply(meson insert_subset node_histories.local_order_carrier_closed node_histories_axioms)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m1 i m2.\n       Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<Longrightarrow>\n       \\<exists>i. Broadcast m2 \\<in> set (history i)\n 2. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; \\<exists>i. Broadcast m2 \\<in> set (history i);\n        hb m2 m3; \\<exists>i. Broadcast m3 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i. Broadcast m3 \\<in> set (history i)", "apply(meson delivery_has_a_cause insert_subset local_order_carrier_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; \\<exists>i. Broadcast m2 \\<in> set (history i);\n        hb m2 m3; \\<exists>i. Broadcast m3 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i. Broadcast m3 \\<in> set (history i)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection\\<open>Causal networks\\<close>"], ["", "lemma (in causal_network) hb_has_a_reason:\n  assumes \"hb m1 m2\"\n    and \"Broadcast m2 \\<in> set (history i)\"\n  shows \"Deliver m1 \\<in> set (history i) \\<or> Broadcast m1 \\<in> set (history i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Deliver m1 \\<in> set (history i) \\<or>\n    Broadcast m1 \\<in> set (history i)", "using assms"], ["proof (prove)\nusing this:\n  hb m1 m2\n  Broadcast m2 \\<in> set (history i)\n\ngoal (1 subgoal):\n 1. Deliver m1 \\<in> set (history i) \\<or>\n    Broadcast m1 \\<in> set (history i)", "apply (induction rule: hb.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m1 ia m2.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>ia Broadcast m2;\n        Broadcast m2 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Deliver m1 \\<in> set (history i) \\<or>\n                         Broadcast m1 \\<in> set (history i)\n 2. \\<And>m1 ia m2.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>ia Broadcast m2;\n        Broadcast m2 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Deliver m1 \\<in> set (history i) \\<or>\n                         Broadcast m1 \\<in> set (history i)\n 3. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2;\n        Broadcast m2 \\<in> set (history i) \\<Longrightarrow>\n        Deliver m1 \\<in> set (history i) \\<or>\n        Broadcast m1 \\<in> set (history i);\n        hb m2 m3;\n        Broadcast m3 \\<in> set (history i) \\<Longrightarrow>\n        Deliver m2 \\<in> set (history i) \\<or>\n        Broadcast m2 \\<in> set (history i);\n        Broadcast m3 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Deliver m1 \\<in> set (history i) \\<or>\n                         Broadcast m1 \\<in> set (history i)", "apply(metis insert_subset local_order_carrier_closed network.broadcasts_unique network_axioms)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m1 ia m2.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>ia Broadcast m2;\n        Broadcast m2 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Deliver m1 \\<in> set (history i) \\<or>\n                         Broadcast m1 \\<in> set (history i)\n 2. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2;\n        Broadcast m2 \\<in> set (history i) \\<Longrightarrow>\n        Deliver m1 \\<in> set (history i) \\<or>\n        Broadcast m1 \\<in> set (history i);\n        hb m2 m3;\n        Broadcast m3 \\<in> set (history i) \\<Longrightarrow>\n        Deliver m2 \\<in> set (history i) \\<or>\n        Broadcast m2 \\<in> set (history i);\n        Broadcast m3 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Deliver m1 \\<in> set (history i) \\<or>\n                         Broadcast m1 \\<in> set (history i)", "apply(metis insert_subset local_order_carrier_closed network.broadcasts_unique network_axioms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2;\n        Broadcast m2 \\<in> set (history i) \\<Longrightarrow>\n        Deliver m1 \\<in> set (history i) \\<or>\n        Broadcast m1 \\<in> set (history i);\n        hb m2 m3;\n        Broadcast m3 \\<in> set (history i) \\<Longrightarrow>\n        Deliver m2 \\<in> set (history i) \\<or>\n        Broadcast m2 \\<in> set (history i);\n        Broadcast m3 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Deliver m1 \\<in> set (history i) \\<or>\n                         Broadcast m1 \\<in> set (history i)", "using hb_trans causal_delivery local_order_carrier_closed"], ["proof (prove)\nusing this:\n  \\<lbrakk>hb ?m1.0 ?m2.0; hb ?m2.0 ?m3.0\\<rbrakk>\n  \\<Longrightarrow> hb ?m1.0 ?m3.0\n  \\<lbrakk>Deliver ?m2.0 \\<in> set (history ?j); hb ?m1.0 ?m2.0\\<rbrakk>\n  \\<Longrightarrow> Deliver ?m1.0 \\<sqsubset>\\<^sup>?j Deliver ?m2.0\n  ?e1.0 \\<sqsubset>\\<^sup>?i ?e2.0 \\<Longrightarrow>\n  {?e1.0, ?e2.0} \\<subseteq> set (history ?i)\n\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2;\n        Broadcast m2 \\<in> set (history i) \\<Longrightarrow>\n        Deliver m1 \\<in> set (history i) \\<or>\n        Broadcast m1 \\<in> set (history i);\n        hb m2 m3;\n        Broadcast m3 \\<in> set (history i) \\<Longrightarrow>\n        Deliver m2 \\<in> set (history i) \\<or>\n        Broadcast m2 \\<in> set (history i);\n        Broadcast m3 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Deliver m1 \\<in> set (history i) \\<or>\n                         Broadcast m1 \\<in> set (history i)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in causal_network) hb_cross_node_delivery:\n  assumes \"hb m1 m2\"\n    and \"Broadcast m1 \\<in> set (history i)\"\n    and \"Broadcast m2 \\<in> set (history j)\"\n    and \"i \\<noteq> j\"\n  shows \"Deliver m1 \\<in> set (history j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Deliver m1 \\<in> set (history j)", "using assms"], ["proof (prove)\nusing this:\n  hb m1 m2\n  Broadcast m1 \\<in> set (history i)\n  Broadcast m2 \\<in> set (history j)\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. Deliver m1 \\<in> set (history j)", "apply(induction rule: hb.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m1 ia m2.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>ia Broadcast m2;\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m2 \\<in> set (history j); i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> Deliver m1 \\<in> set (history j)\n 2. \\<And>m1 ia m2.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>ia Broadcast m2;\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m2 \\<in> set (history j); i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> Deliver m1 \\<in> set (history j)\n 3. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2;\n        \\<lbrakk>Broadcast m1 \\<in> set (history i);\n         Broadcast m2 \\<in> set (history j); i \\<noteq> j\\<rbrakk>\n        \\<Longrightarrow> Deliver m1 \\<in> set (history j);\n        hb m2 m3;\n        \\<lbrakk>Broadcast m2 \\<in> set (history i);\n         Broadcast m3 \\<in> set (history j); i \\<noteq> j\\<rbrakk>\n        \\<Longrightarrow> Deliver m2 \\<in> set (history j);\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m3 \\<in> set (history j); i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> Deliver m1 \\<in> set (history j)", "apply(metis broadcasts_unique insert_subset local_order_carrier_closed)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m1 ia m2.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>ia Broadcast m2;\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m2 \\<in> set (history j); i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> Deliver m1 \\<in> set (history j)\n 2. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2;\n        \\<lbrakk>Broadcast m1 \\<in> set (history i);\n         Broadcast m2 \\<in> set (history j); i \\<noteq> j\\<rbrakk>\n        \\<Longrightarrow> Deliver m1 \\<in> set (history j);\n        hb m2 m3;\n        \\<lbrakk>Broadcast m2 \\<in> set (history i);\n         Broadcast m3 \\<in> set (history j); i \\<noteq> j\\<rbrakk>\n        \\<Longrightarrow> Deliver m2 \\<in> set (history j);\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m3 \\<in> set (history j); i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> Deliver m1 \\<in> set (history j)", "apply(metis insert_subset local_order_carrier_closed network.broadcasts_unique network_axioms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2;\n        \\<lbrakk>Broadcast m1 \\<in> set (history i);\n         Broadcast m2 \\<in> set (history j); i \\<noteq> j\\<rbrakk>\n        \\<Longrightarrow> Deliver m1 \\<in> set (history j);\n        hb m2 m3;\n        \\<lbrakk>Broadcast m2 \\<in> set (history i);\n         Broadcast m3 \\<in> set (history j); i \\<noteq> j\\<rbrakk>\n        \\<Longrightarrow> Deliver m2 \\<in> set (history j);\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m3 \\<in> set (history j); i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> Deliver m1 \\<in> set (history j)", "using broadcasts_unique hb.intros(3) hb_has_a_reason"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i \\<noteq> ?j; Broadcast ?m \\<in> set (history ?i)\\<rbrakk>\n  \\<Longrightarrow> Broadcast ?m \\<notin> set (history ?j)\n  \\<lbrakk>hb ?m1.0 ?m2.0; hb ?m2.0 ?m3.0\\<rbrakk>\n  \\<Longrightarrow> hb ?m1.0 ?m3.0\n  \\<lbrakk>hb ?m1.0 ?m2.0; Broadcast ?m2.0 \\<in> set (history ?i)\\<rbrakk>\n  \\<Longrightarrow> Deliver ?m1.0 \\<in> set (history ?i) \\<or>\n                    Broadcast ?m1.0 \\<in> set (history ?i)\n\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2;\n        \\<lbrakk>Broadcast m1 \\<in> set (history i);\n         Broadcast m2 \\<in> set (history j); i \\<noteq> j\\<rbrakk>\n        \\<Longrightarrow> Deliver m1 \\<in> set (history j);\n        hb m2 m3;\n        \\<lbrakk>Broadcast m2 \\<in> set (history i);\n         Broadcast m3 \\<in> set (history j); i \\<noteq> j\\<rbrakk>\n        \\<Longrightarrow> Deliver m2 \\<in> set (history j);\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m3 \\<in> set (history j); i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> Deliver m1 \\<in> set (history j)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in causal_network) hb_irrefl:\n  assumes \"hb m1 m2\"\n  shows \"m1 \\<noteq> m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m1 \\<noteq> m2", "using assms"], ["proof (prove)\nusing this:\n  hb m1 m2\n\ngoal (1 subgoal):\n 1. m1 \\<noteq> m2", "proof(induction rule: hb.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>m1 i m2.\n       Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<Longrightarrow>\n       m1 \\<noteq> m2\n 2. \\<And>m1 i m2.\n       Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<Longrightarrow>\n       m1 \\<noteq> m2\n 3. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; m1 \\<noteq> m2; hb m2 m3; m2 \\<noteq> m3\\<rbrakk>\n       \\<Longrightarrow> m1 \\<noteq> m3", "case (hb_broadcast m1 i m2)"], ["proof (state)\nthis:\n  Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n\ngoal (3 subgoals):\n 1. \\<And>m1 i m2.\n       Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<Longrightarrow>\n       m1 \\<noteq> m2\n 2. \\<And>m1 i m2.\n       Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<Longrightarrow>\n       m1 \\<noteq> m2\n 3. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; m1 \\<noteq> m2; hb m2 m3; m2 \\<noteq> m3\\<rbrakk>\n       \\<Longrightarrow> m1 \\<noteq> m3", "thus ?case"], ["proof (prove)\nusing this:\n  Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n\ngoal (1 subgoal):\n 1. m1 \\<noteq> m2", "using node_total_order_antisym"], ["proof (prove)\nusing this:\n  Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n  \\<lbrakk>?e1.0 \\<sqsubset>\\<^sup>?i ?e2.0;\n   ?e2.0 \\<sqsubset>\\<^sup>?i ?e1.0\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. m1 \\<noteq> m2", "by blast"], ["proof (state)\nthis:\n  m1 \\<noteq> m2\n\ngoal (2 subgoals):\n 1. \\<And>m1 i m2.\n       Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<Longrightarrow>\n       m1 \\<noteq> m2\n 2. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; m1 \\<noteq> m2; hb m2 m3; m2 \\<noteq> m3\\<rbrakk>\n       \\<Longrightarrow> m1 \\<noteq> m3", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m1 i m2.\n       Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<Longrightarrow>\n       m1 \\<noteq> m2\n 2. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; m1 \\<noteq> m2; hb m2 m3; m2 \\<noteq> m3\\<rbrakk>\n       \\<Longrightarrow> m1 \\<noteq> m3", "case (hb_deliver m1 i m2)"], ["proof (state)\nthis:\n  Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2\n\ngoal (2 subgoals):\n 1. \\<And>m1 i m2.\n       Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<Longrightarrow>\n       m1 \\<noteq> m2\n 2. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; m1 \\<noteq> m2; hb m2 m3; m2 \\<noteq> m3\\<rbrakk>\n       \\<Longrightarrow> m1 \\<noteq> m3", "thus ?case"], ["proof (prove)\nusing this:\n  Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2\n\ngoal (1 subgoal):\n 1. m1 \\<noteq> m2", "by(meson causal_broadcast insert_subset local_order_carrier_closed node_total_order_irrefl)"], ["proof (state)\nthis:\n  m1 \\<noteq> m2\n\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; m1 \\<noteq> m2; hb m2 m3; m2 \\<noteq> m3\\<rbrakk>\n       \\<Longrightarrow> m1 \\<noteq> m3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; m1 \\<noteq> m2; hb m2 m3; m2 \\<noteq> m3\\<rbrakk>\n       \\<Longrightarrow> m1 \\<noteq> m3", "case (hb_trans m1 m2 m3)"], ["proof (state)\nthis:\n  hb m1 m2\n  hb m2 m3\n  m1 \\<noteq> m2\n  m2 \\<noteq> m3\n\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; m1 \\<noteq> m2; hb m2 m3; m2 \\<noteq> m3\\<rbrakk>\n       \\<Longrightarrow> m1 \\<noteq> m3", "then"], ["proof (chain)\npicking this:\n  hb m1 m2\n  hb m2 m3\n  m1 \\<noteq> m2\n  m2 \\<noteq> m3", "obtain i j where \"Broadcast m3 \\<in> set (history i)\" \"Broadcast m2 \\<in> set (history j)\""], ["proof (prove)\nusing this:\n  hb m1 m2\n  hb m2 m3\n  m1 \\<noteq> m2\n  m2 \\<noteq> m3\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>Broadcast m3 \\<in> set (history i);\n         Broadcast m2 \\<in> set (history j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using hb_broadcast_exists2"], ["proof (prove)\nusing this:\n  hb m1 m2\n  hb m2 m3\n  m1 \\<noteq> m2\n  m2 \\<noteq> m3\n  hb ?m1.0 ?m2.0 \\<Longrightarrow>\n  \\<exists>i. Broadcast ?m2.0 \\<in> set (history i)\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>Broadcast m3 \\<in> set (history i);\n         Broadcast m2 \\<in> set (history j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Broadcast m3 \\<in> set (history i)\n  Broadcast m2 \\<in> set (history j)\n\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; m1 \\<noteq> m2; hb m2 m3; m2 \\<noteq> m3\\<rbrakk>\n       \\<Longrightarrow> m1 \\<noteq> m3", "then"], ["proof (chain)\npicking this:\n  Broadcast m3 \\<in> set (history i)\n  Broadcast m2 \\<in> set (history j)", "show ?case"], ["proof (prove)\nusing this:\n  Broadcast m3 \\<in> set (history i)\n  Broadcast m2 \\<in> set (history j)\n\ngoal (1 subgoal):\n 1. m1 \\<noteq> m3", "using assms hb_trans"], ["proof (prove)\nusing this:\n  Broadcast m3 \\<in> set (history i)\n  Broadcast m2 \\<in> set (history j)\n  hb m1 m2\n  hb m1 m2\n  hb m2 m3\n  m1 \\<noteq> m2\n  m2 \\<noteq> m3\n\ngoal (1 subgoal):\n 1. m1 \\<noteq> m3", "by (meson causal_network.causal_delivery causal_network_axioms\n        deliver_locally insert_subset network.hb.intros(3) network_axioms \n        node_histories.local_order_carrier_closed assms hb_trans\n        node_histories_axioms node_total_order_irrefl)"], ["proof (state)\nthis:\n  m1 \\<noteq> m3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in causal_network) hb_broadcast_broadcast_order:\n  assumes \"hb m1 m2\"\n    and \"Broadcast m1 \\<in> set (history i)\"\n    and \"Broadcast m2 \\<in> set (history i)\"\n  shows \"Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2", "using assms"], ["proof (prove)\nusing this:\n  hb m1 m2\n  Broadcast m1 \\<in> set (history i)\n  Broadcast m2 \\<in> set (history i)\n\ngoal (1 subgoal):\n 1. Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2", "proof(induction rule: hb.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>m1 ia m2.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>ia Broadcast m2;\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m2 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n 2. \\<And>m1 ia m2.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>ia Broadcast m2;\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m2 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n 3. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2;\n        \\<lbrakk>Broadcast m1 \\<in> set (history i);\n         Broadcast m2 \\<in> set (history i)\\<rbrakk>\n        \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        hb m2 m3;\n        \\<lbrakk>Broadcast m2 \\<in> set (history i);\n         Broadcast m3 \\<in> set (history i)\\<rbrakk>\n        \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3;\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m3 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3", "case (hb_broadcast m1 i m2)"], ["proof (state)\nthis:\n  Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n  Broadcast m1 \\<in> set (history i)\n  Broadcast m2 \\<in> set (history i)\n\ngoal (3 subgoals):\n 1. \\<And>m1 ia m2.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>ia Broadcast m2;\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m2 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n 2. \\<And>m1 ia m2.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>ia Broadcast m2;\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m2 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n 3. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2;\n        \\<lbrakk>Broadcast m1 \\<in> set (history i);\n         Broadcast m2 \\<in> set (history i)\\<rbrakk>\n        \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        hb m2 m3;\n        \\<lbrakk>Broadcast m2 \\<in> set (history i);\n         Broadcast m3 \\<in> set (history i)\\<rbrakk>\n        \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3;\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m3 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3", "thus ?case"], ["proof (prove)\nusing this:\n  Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n  Broadcast m1 \\<in> set (history i)\n  Broadcast m2 \\<in> set (history i)\n\ngoal (1 subgoal):\n 1. Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2", "by(metis insertI1 local_order_carrier_closed network.broadcasts_unique network_axioms subsetCE)"], ["proof (state)\nthis:\n  Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n\ngoal (2 subgoals):\n 1. \\<And>m1 ia m2.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>ia Broadcast m2;\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m2 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n 2. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2;\n        \\<lbrakk>Broadcast m1 \\<in> set (history i);\n         Broadcast m2 \\<in> set (history i)\\<rbrakk>\n        \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        hb m2 m3;\n        \\<lbrakk>Broadcast m2 \\<in> set (history i);\n         Broadcast m3 \\<in> set (history i)\\<rbrakk>\n        \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3;\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m3 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m1 ia m2.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>ia Broadcast m2;\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m2 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n 2. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2;\n        \\<lbrakk>Broadcast m1 \\<in> set (history i);\n         Broadcast m2 \\<in> set (history i)\\<rbrakk>\n        \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        hb m2 m3;\n        \\<lbrakk>Broadcast m2 \\<in> set (history i);\n         Broadcast m3 \\<in> set (history i)\\<rbrakk>\n        \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3;\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m3 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3", "case (hb_deliver m1 i m2)"], ["proof (state)\nthis:\n  Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2\n  Broadcast m1 \\<in> set (history i)\n  Broadcast m2 \\<in> set (history i)\n\ngoal (2 subgoals):\n 1. \\<And>m1 ia m2.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>ia Broadcast m2;\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m2 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n 2. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2;\n        \\<lbrakk>Broadcast m1 \\<in> set (history i);\n         Broadcast m2 \\<in> set (history i)\\<rbrakk>\n        \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        hb m2 m3;\n        \\<lbrakk>Broadcast m2 \\<in> set (history i);\n         Broadcast m3 \\<in> set (history i)\\<rbrakk>\n        \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3;\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m3 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3", "thus ?case"], ["proof (prove)\nusing this:\n  Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2\n  Broadcast m1 \\<in> set (history i)\n  Broadcast m2 \\<in> set (history i)\n\ngoal (1 subgoal):\n 1. Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2", "by(metis broadcasts_unique insert_subset local_order_carrier_closed\n          network.broadcast_before_delivery network_axioms node_total_order_trans)"], ["proof (state)\nthis:\n  Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2;\n        \\<lbrakk>Broadcast m1 \\<in> set (history i);\n         Broadcast m2 \\<in> set (history i)\\<rbrakk>\n        \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        hb m2 m3;\n        \\<lbrakk>Broadcast m2 \\<in> set (history i);\n         Broadcast m3 \\<in> set (history i)\\<rbrakk>\n        \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3;\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m3 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2;\n        \\<lbrakk>Broadcast m1 \\<in> set (history i);\n         Broadcast m2 \\<in> set (history i)\\<rbrakk>\n        \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        hb m2 m3;\n        \\<lbrakk>Broadcast m2 \\<in> set (history i);\n         Broadcast m3 \\<in> set (history i)\\<rbrakk>\n        \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3;\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m3 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3", "case (hb_trans m1 m2 m3)"], ["proof (state)\nthis:\n  hb m1 m2\n  hb m2 m3\n  \\<lbrakk>Broadcast m1 \\<in> set (history i);\n   Broadcast m2 \\<in> set (history i)\\<rbrakk>\n  \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n  \\<lbrakk>Broadcast m2 \\<in> set (history i);\n   Broadcast m3 \\<in> set (history i)\\<rbrakk>\n  \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3\n  Broadcast m1 \\<in> set (history i)\n  Broadcast m3 \\<in> set (history i)\n\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2;\n        \\<lbrakk>Broadcast m1 \\<in> set (history i);\n         Broadcast m2 \\<in> set (history i)\\<rbrakk>\n        \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        hb m2 m3;\n        \\<lbrakk>Broadcast m2 \\<in> set (history i);\n         Broadcast m3 \\<in> set (history i)\\<rbrakk>\n        \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3;\n        Broadcast m1 \\<in> set (history i);\n        Broadcast m3 \\<in> set (history i)\\<rbrakk>\n       \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3", "then"], ["proof (chain)\npicking this:\n  hb m1 m2\n  hb m2 m3\n  \\<lbrakk>Broadcast m1 \\<in> set (history i);\n   Broadcast m2 \\<in> set (history i)\\<rbrakk>\n  \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n  \\<lbrakk>Broadcast m2 \\<in> set (history i);\n   Broadcast m3 \\<in> set (history i)\\<rbrakk>\n  \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3\n  Broadcast m1 \\<in> set (history i)\n  Broadcast m3 \\<in> set (history i)", "show ?case"], ["proof (prove)\nusing this:\n  hb m1 m2\n  hb m2 m3\n  \\<lbrakk>Broadcast m1 \\<in> set (history i);\n   Broadcast m2 \\<in> set (history i)\\<rbrakk>\n  \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n  \\<lbrakk>Broadcast m2 \\<in> set (history i);\n   Broadcast m3 \\<in> set (history i)\\<rbrakk>\n  \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3\n  Broadcast m1 \\<in> set (history i)\n  Broadcast m3 \\<in> set (history i)\n\ngoal (1 subgoal):\n 1. Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3", "proof (cases \"Broadcast m2 \\<in> set (history i)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>hb m1 m2; hb m2 m3;\n     \\<lbrakk>Broadcast m1 \\<in> set (history i);\n      Broadcast m2 \\<in> set (history i)\\<rbrakk>\n     \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n     \\<lbrakk>Broadcast m2 \\<in> set (history i);\n      Broadcast m3 \\<in> set (history i)\\<rbrakk>\n     \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3;\n     Broadcast m1 \\<in> set (history i); Broadcast m3 \\<in> set (history i);\n     Broadcast m2 \\<in> set (history i)\\<rbrakk>\n    \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3\n 2. \\<lbrakk>hb m1 m2; hb m2 m3;\n     \\<lbrakk>Broadcast m1 \\<in> set (history i);\n      Broadcast m2 \\<in> set (history i)\\<rbrakk>\n     \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n     \\<lbrakk>Broadcast m2 \\<in> set (history i);\n      Broadcast m3 \\<in> set (history i)\\<rbrakk>\n     \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3;\n     Broadcast m1 \\<in> set (history i); Broadcast m3 \\<in> set (history i);\n     Broadcast m2 \\<notin> set (history i)\\<rbrakk>\n    \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3", "case True"], ["proof (state)\nthis:\n  Broadcast m2 \\<in> set (history i)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>hb m1 m2; hb m2 m3;\n     \\<lbrakk>Broadcast m1 \\<in> set (history i);\n      Broadcast m2 \\<in> set (history i)\\<rbrakk>\n     \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n     \\<lbrakk>Broadcast m2 \\<in> set (history i);\n      Broadcast m3 \\<in> set (history i)\\<rbrakk>\n     \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3;\n     Broadcast m1 \\<in> set (history i); Broadcast m3 \\<in> set (history i);\n     Broadcast m2 \\<in> set (history i)\\<rbrakk>\n    \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3\n 2. \\<lbrakk>hb m1 m2; hb m2 m3;\n     \\<lbrakk>Broadcast m1 \\<in> set (history i);\n      Broadcast m2 \\<in> set (history i)\\<rbrakk>\n     \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n     \\<lbrakk>Broadcast m2 \\<in> set (history i);\n      Broadcast m3 \\<in> set (history i)\\<rbrakk>\n     \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3;\n     Broadcast m1 \\<in> set (history i); Broadcast m3 \\<in> set (history i);\n     Broadcast m2 \\<notin> set (history i)\\<rbrakk>\n    \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3", "thus ?thesis"], ["proof (prove)\nusing this:\n  Broadcast m2 \\<in> set (history i)\n\ngoal (1 subgoal):\n 1. Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3", "using hb_trans node_total_order_trans"], ["proof (prove)\nusing this:\n  Broadcast m2 \\<in> set (history i)\n  hb m1 m2\n  hb m2 m3\n  \\<lbrakk>Broadcast m1 \\<in> set (history i);\n   Broadcast m2 \\<in> set (history i)\\<rbrakk>\n  \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n  \\<lbrakk>Broadcast m2 \\<in> set (history i);\n   Broadcast m3 \\<in> set (history i)\\<rbrakk>\n  \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3\n  Broadcast m1 \\<in> set (history i)\n  Broadcast m3 \\<in> set (history i)\n  \\<lbrakk>?e1.0 \\<sqsubset>\\<^sup>?i ?e2.0;\n   ?e2.0 \\<sqsubset>\\<^sup>?i ?e3.0\\<rbrakk>\n  \\<Longrightarrow> ?e1.0 \\<sqsubset>\\<^sup>?i ?e3.0\n\ngoal (1 subgoal):\n 1. Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3", "by blast"], ["proof (state)\nthis:\n  Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hb m1 m2; hb m2 m3;\n     \\<lbrakk>Broadcast m1 \\<in> set (history i);\n      Broadcast m2 \\<in> set (history i)\\<rbrakk>\n     \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n     \\<lbrakk>Broadcast m2 \\<in> set (history i);\n      Broadcast m3 \\<in> set (history i)\\<rbrakk>\n     \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3;\n     Broadcast m1 \\<in> set (history i); Broadcast m3 \\<in> set (history i);\n     Broadcast m2 \\<notin> set (history i)\\<rbrakk>\n    \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>hb m1 m2; hb m2 m3;\n     \\<lbrakk>Broadcast m1 \\<in> set (history i);\n      Broadcast m2 \\<in> set (history i)\\<rbrakk>\n     \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n     \\<lbrakk>Broadcast m2 \\<in> set (history i);\n      Broadcast m3 \\<in> set (history i)\\<rbrakk>\n     \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3;\n     Broadcast m1 \\<in> set (history i); Broadcast m3 \\<in> set (history i);\n     Broadcast m2 \\<notin> set (history i)\\<rbrakk>\n    \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3", "case False"], ["proof (state)\nthis:\n  Broadcast m2 \\<notin> set (history i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hb m1 m2; hb m2 m3;\n     \\<lbrakk>Broadcast m1 \\<in> set (history i);\n      Broadcast m2 \\<in> set (history i)\\<rbrakk>\n     \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n     \\<lbrakk>Broadcast m2 \\<in> set (history i);\n      Broadcast m3 \\<in> set (history i)\\<rbrakk>\n     \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3;\n     Broadcast m1 \\<in> set (history i); Broadcast m3 \\<in> set (history i);\n     Broadcast m2 \\<notin> set (history i)\\<rbrakk>\n    \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3", "hence \"Deliver m2 \\<in> set (history i)\" \"m1 \\<noteq> m2\" \"m2 \\<noteq> m3\""], ["proof (prove)\nusing this:\n  Broadcast m2 \\<notin> set (history i)\n\ngoal (1 subgoal):\n 1. Deliver m2 \\<in> set (history i) &&& m1 \\<noteq> m2 &&& m2 \\<noteq> m3", "using hb_has_a_reason hb_trans"], ["proof (prove)\nusing this:\n  Broadcast m2 \\<notin> set (history i)\n  \\<lbrakk>hb ?m1.0 ?m2.0; Broadcast ?m2.0 \\<in> set (history ?i)\\<rbrakk>\n  \\<Longrightarrow> Deliver ?m1.0 \\<in> set (history ?i) \\<or>\n                    Broadcast ?m1.0 \\<in> set (history ?i)\n  hb m1 m2\n  hb m2 m3\n  \\<lbrakk>Broadcast m1 \\<in> set (history i);\n   Broadcast m2 \\<in> set (history i)\\<rbrakk>\n  \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n  \\<lbrakk>Broadcast m2 \\<in> set (history i);\n   Broadcast m3 \\<in> set (history i)\\<rbrakk>\n  \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3\n  Broadcast m1 \\<in> set (history i)\n  Broadcast m3 \\<in> set (history i)\n\ngoal (1 subgoal):\n 1. Deliver m2 \\<in> set (history i) &&& m1 \\<noteq> m2 &&& m2 \\<noteq> m3", "by auto"], ["proof (state)\nthis:\n  Deliver m2 \\<in> set (history i)\n  m1 \\<noteq> m2\n  m2 \\<noteq> m3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hb m1 m2; hb m2 m3;\n     \\<lbrakk>Broadcast m1 \\<in> set (history i);\n      Broadcast m2 \\<in> set (history i)\\<rbrakk>\n     \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n     \\<lbrakk>Broadcast m2 \\<in> set (history i);\n      Broadcast m3 \\<in> set (history i)\\<rbrakk>\n     \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>i Broadcast m3;\n     Broadcast m1 \\<in> set (history i); Broadcast m3 \\<in> set (history i);\n     Broadcast m2 \\<notin> set (history i)\\<rbrakk>\n    \\<Longrightarrow> Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3", "thus ?thesis"], ["proof (prove)\nusing this:\n  Deliver m2 \\<in> set (history i)\n  m1 \\<noteq> m2\n  m2 \\<noteq> m3\n\ngoal (1 subgoal):\n 1. Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3", "by(metis hb_trans event.inject(1) hb.intros(1) hb_irrefl network.hb.intros(3) network_axioms node_order_is_total hb_irrefl)"], ["proof (state)\nthis:\n  Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in causal_network) hb_antisym:\n  assumes \"hb x y\"\n      and \"hb y x\"\n  shows   \"False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  hb x y\n  hb y x\n\ngoal (1 subgoal):\n 1. False", "proof(induction rule: hb.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>m1 i m2.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        hb m2 m1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>m1 i m2.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        hb m2 m1\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; hb m2 m1 \\<Longrightarrow> False; hb m2 m3;\n        hb m3 m2 \\<Longrightarrow> False; hb m3 m1\\<rbrakk>\n       \\<Longrightarrow> False", "fix m1 i m2"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>m1 i m2.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        hb m2 m1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>m1 i m2.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        hb m2 m1\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; hb m2 m1 \\<Longrightarrow> False; hb m2 m3;\n        hb m3 m2 \\<Longrightarrow> False; hb m3 m1\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"hb m2 m1\" and \"Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\""], ["proof (state)\nthis:\n  hb m2 m1\n  Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n\ngoal (3 subgoals):\n 1. \\<And>m1 i m2.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        hb m2 m1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>m1 i m2.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        hb m2 m1\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; hb m2 m1 \\<Longrightarrow> False; hb m2 m3;\n        hb m3 m2 \\<Longrightarrow> False; hb m3 m1\\<rbrakk>\n       \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  hb m2 m1\n  Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\n\ngoal (1 subgoal):\n 1. False", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hb m2 m1;\n     Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2\\<rbrakk>\n    \\<Longrightarrow> False", "proof(erule hb_elim)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ia.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        Broadcast m2 \\<sqsubset>\\<^sup>ia Broadcast m1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>ia.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        Deliver m2 \\<sqsubset>\\<^sup>ia Broadcast m1\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>m2a.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2; hb m2 m2a;\n        hb m2a m1\\<rbrakk>\n       \\<Longrightarrow> False", "show \"\\<And>ia. Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>ia Broadcast m1 \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        Broadcast m2 \\<sqsubset>\\<^sup>ia Broadcast m1\\<rbrakk>\n       \\<Longrightarrow> False", "by(metis broadcasts_unique insert_subset local_order_carrier_closed node_total_order_irrefl node_total_order_trans)"], ["proof (state)\nthis:\n  \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n   Broadcast m2 \\<sqsubset>\\<^sup>?ia Broadcast m1\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>ia.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        Deliver m2 \\<sqsubset>\\<^sup>ia Broadcast m1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>m2a.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2; hb m2 m2a;\n        hb m2a m1\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        Deliver m2 \\<sqsubset>\\<^sup>ia Broadcast m1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>m2a.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2; hb m2 m2a;\n        hb m2a m1\\<rbrakk>\n       \\<Longrightarrow> False", "show \"\\<And>ia. Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<Longrightarrow> Deliver m2 \\<sqsubset>\\<^sup>ia Broadcast m1 \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        Deliver m2 \\<sqsubset>\\<^sup>ia Broadcast m1\\<rbrakk>\n       \\<Longrightarrow> False", "by(metis broadcast_before_delivery broadcasts_unique insert_subset local_order_carrier_closed node_total_order_irrefl node_total_order_trans)"], ["proof (state)\nthis:\n  \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n   Deliver m2 \\<sqsubset>\\<^sup>?ia Broadcast m1\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>m2a.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2; hb m2 m2a;\n        hb m2a m1\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m2a.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2; hb m2 m2a;\n        hb m2a m1\\<rbrakk>\n       \\<Longrightarrow> False", "show \"\\<And>m2a. Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<Longrightarrow> hb m2 m2a \\<Longrightarrow> hb m2a m1 \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m2a.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2; hb m2 m2a;\n        hb m2a m1\\<rbrakk>\n       \\<Longrightarrow> False", "using assms(1) assms(2) hb.intros(3) hb_irrefl"], ["proof (prove)\nusing this:\n  hb x y\n  hb y x\n  \\<lbrakk>hb ?m1.0 ?m2.0; hb ?m2.0 ?m3.0\\<rbrakk>\n  \\<Longrightarrow> hb ?m1.0 ?m3.0\n  hb ?m1.0 ?m2.0 \\<Longrightarrow> ?m1.0 \\<noteq> ?m2.0\n\ngoal (1 subgoal):\n 1. \\<And>m2a.\n       \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2; hb m2 m2a;\n        hb m2a m1\\<rbrakk>\n       \\<Longrightarrow> False", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>Broadcast m1 \\<sqsubset>\\<^sup>i Broadcast m2; hb m2 ?m2a;\n   hb ?m2a m1\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>m1 i m2.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        hb m2 m1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; hb m2 m1 \\<Longrightarrow> False; hb m2 m3;\n        hb m3 m2 \\<Longrightarrow> False; hb m3 m1\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m1 i m2.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        hb m2 m1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; hb m2 m1 \\<Longrightarrow> False; hb m2 m3;\n        hb m3 m2 \\<Longrightarrow> False; hb m3 m1\\<rbrakk>\n       \\<Longrightarrow> False", "fix m1 i m2"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m1 i m2.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        hb m2 m1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; hb m2 m1 \\<Longrightarrow> False; hb m2 m3;\n        hb m3 m2 \\<Longrightarrow> False; hb m3 m1\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"hb m2 m1\"\n     and \"Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2\""], ["proof (state)\nthis:\n  hb m2 m1\n  Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2\n\ngoal (2 subgoals):\n 1. \\<And>m1 i m2.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        hb m2 m1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; hb m2 m1 \\<Longrightarrow> False; hb m2 m3;\n        hb m3 m2 \\<Longrightarrow> False; hb m3 m1\\<rbrakk>\n       \\<Longrightarrow> False", "thus \"False\""], ["proof (prove)\nusing this:\n  hb m2 m1\n  Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2\n\ngoal (1 subgoal):\n 1. False", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hb m2 m1; Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2\\<rbrakk>\n    \\<Longrightarrow> False", "proof(erule hb_elim)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>ia.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        Broadcast m2 \\<sqsubset>\\<^sup>ia Broadcast m1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>ia.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        Deliver m2 \\<sqsubset>\\<^sup>ia Broadcast m1\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>m2a.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2; hb m2 m2a;\n        hb m2a m1\\<rbrakk>\n       \\<Longrightarrow> False", "show \"\\<And>ia. Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<Longrightarrow> Broadcast m2 \\<sqsubset>\\<^sup>ia Broadcast m1 \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        Broadcast m2 \\<sqsubset>\\<^sup>ia Broadcast m1\\<rbrakk>\n       \\<Longrightarrow> False", "by (metis broadcast_before_delivery broadcasts_unique insert_subset local_order_carrier_closed node_total_order_irrefl node_total_order_trans)"], ["proof (state)\nthis:\n  \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n   Broadcast m2 \\<sqsubset>\\<^sup>?ia Broadcast m1\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (2 subgoals):\n 1. \\<And>ia.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        Deliver m2 \\<sqsubset>\\<^sup>ia Broadcast m1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>m2a.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2; hb m2 m2a;\n        hb m2a m1\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ia.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        Deliver m2 \\<sqsubset>\\<^sup>ia Broadcast m1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>m2a.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2; hb m2 m2a;\n        hb m2a m1\\<rbrakk>\n       \\<Longrightarrow> False", "show \"\\<And>ia. Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<Longrightarrow> Deliver m2 \\<sqsubset>\\<^sup>ia Broadcast m1 \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n        Deliver m2 \\<sqsubset>\\<^sup>ia Broadcast m1\\<rbrakk>\n       \\<Longrightarrow> False", "by (meson causal_network.causal_delivery causal_network_axioms hb.intros(2) hb.intros(3) insert_subset local_order_carrier_closed node_total_order_irrefl)"], ["proof (state)\nthis:\n  \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2;\n   Deliver m2 \\<sqsubset>\\<^sup>?ia Broadcast m1\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>m2a.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2; hb m2 m2a;\n        hb m2a m1\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m2a.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2; hb m2 m2a;\n        hb m2a m1\\<rbrakk>\n       \\<Longrightarrow> False", "show \"\\<And>m2a. Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2 \\<Longrightarrow> hb m2 m2a \\<Longrightarrow> hb m2a m1 \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m2a.\n       \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2; hb m2 m2a;\n        hb m2a m1\\<rbrakk>\n       \\<Longrightarrow> False", "by (meson causal_delivery hb.intros(2) insert_subset local_order_carrier_closed network.hb.intros(3) network_axioms node_total_order_irrefl)"], ["proof (state)\nthis:\n  \\<lbrakk>Deliver m1 \\<sqsubset>\\<^sup>i Broadcast m2; hb m2 ?m2a;\n   hb ?m2a m1\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; hb m2 m1 \\<Longrightarrow> False; hb m2 m3;\n        hb m3 m2 \\<Longrightarrow> False; hb m3 m1\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; hb m2 m1 \\<Longrightarrow> False; hb m2 m3;\n        hb m3 m2 \\<Longrightarrow> False; hb m3 m1\\<rbrakk>\n       \\<Longrightarrow> False", "fix m1 m2 m3"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; hb m2 m1 \\<Longrightarrow> False; hb m2 m3;\n        hb m3 m2 \\<Longrightarrow> False; hb m3 m1\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"hb m1 m2\" \"hb m2 m3\" \"hb m3 m1\"\n     and \"(hb m2 m1 \\<Longrightarrow> False)\" \"(hb m3 m2 \\<Longrightarrow> False)\""], ["proof (state)\nthis:\n  hb m1 m2\n  hb m2 m3\n  hb m3 m1\n  hb m2 m1 \\<Longrightarrow> False\n  hb m3 m2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m3.\n       \\<lbrakk>hb m1 m2; hb m2 m1 \\<Longrightarrow> False; hb m2 m3;\n        hb m3 m2 \\<Longrightarrow> False; hb m3 m1\\<rbrakk>\n       \\<Longrightarrow> False", "thus \"False\""], ["proof (prove)\nusing this:\n  hb m1 m2\n  hb m2 m3\n  hb m3 m1\n  hb m2 m1 \\<Longrightarrow> False\n  hb m3 m2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "using hb.intros(3)"], ["proof (prove)\nusing this:\n  hb m1 m2\n  hb m2 m3\n  hb m3 m1\n  hb m2 m1 \\<Longrightarrow> False\n  hb m3 m2 \\<Longrightarrow> False\n  \\<lbrakk>hb ?m1.0 ?m2.0; hb ?m2.0 ?m3.0\\<rbrakk>\n  \\<Longrightarrow> hb ?m1.0 ?m3.0\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "definition (in network) node_deliver_messages :: \"'msg event list \\<Rightarrow> 'msg list\" where\n  \"node_deliver_messages cs \\<equiv> List.map_filter (\\<lambda>e. case e of Deliver m \\<Rightarrow> Some m | _ \\<Rightarrow> None) cs\""], ["", "lemma (in network) node_deliver_messages_empty [simp]:\n  shows \"node_deliver_messages [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. node_deliver_messages [] = []", "by(auto simp add: node_deliver_messages_def List.map_filter_simps)"], ["", "lemma (in network) node_deliver_messages_Cons:\n  shows \"node_deliver_messages (x#xs) = (node_deliver_messages [x])@(node_deliver_messages xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. node_deliver_messages (x # xs) =\n    node_deliver_messages [x] @ node_deliver_messages xs", "by(auto simp add: node_deliver_messages_def map_filter_def)"], ["", "lemma (in network) node_deliver_messages_append:\n  shows \"node_deliver_messages (xs@ys) = (node_deliver_messages xs)@(node_deliver_messages ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. node_deliver_messages (xs @ ys) =\n    node_deliver_messages xs @ node_deliver_messages ys", "by(auto simp add: node_deliver_messages_def map_filter_def)"], ["", "lemma (in network) node_deliver_messages_Broadcast [simp]:\n  shows \"node_deliver_messages [Broadcast m] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. node_deliver_messages [Broadcast m] = []", "by(clarsimp simp: node_deliver_messages_def map_filter_def)"], ["", "lemma (in network) node_deliver_messages_Deliver [simp]:\n  shows \"node_deliver_messages [Deliver m] = [m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. node_deliver_messages [Deliver m] = [m]", "by(clarsimp simp: node_deliver_messages_def map_filter_def)"], ["", "lemma (in network) prefix_msg_in_history:\n  assumes \"es prefix of i\"\n      and \"m \\<in> set (node_deliver_messages es)\"\n    shows \"Deliver m \\<in> set (history i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Deliver m \\<in> set (history i)", "using assms prefix_to_carriers"], ["proof (prove)\nusing this:\n  es prefix of i\n  m \\<in> set (node_deliver_messages es)\n  ?xs prefix of ?i \\<Longrightarrow> set ?xs \\<subseteq> set (history ?i)\n\ngoal (1 subgoal):\n 1. Deliver m \\<in> set (history i)", "by(fastforce simp: node_deliver_messages_def map_filter_def split: event.split_asm)"], ["", "lemma (in network) prefix_contains_msg:\n  assumes \"es prefix of i\"\n      and \"m \\<in> set (node_deliver_messages es)\"\n    shows \"Deliver m \\<in> set es\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Deliver m \\<in> set es", "using assms"], ["proof (prove)\nusing this:\n  es prefix of i\n  m \\<in> set (node_deliver_messages es)\n\ngoal (1 subgoal):\n 1. Deliver m \\<in> set es", "by(auto simp: node_deliver_messages_def map_filter_def split: event.split_asm)"], ["", "lemma (in network) node_deliver_messages_distinct:\n  assumes \"xs prefix of i\"\n  shows \"distinct (node_deliver_messages xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (node_deliver_messages xs)", "using assms"], ["proof (prove)\nusing this:\n  xs prefix of i\n\ngoal (1 subgoal):\n 1. distinct (node_deliver_messages xs)", "proof(induction xs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. [] prefix of i \\<Longrightarrow> distinct (node_deliver_messages [])\n 2. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                distinct (node_deliver_messages xs);\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> distinct (node_deliver_messages (xs @ [x]))", "case Nil"], ["proof (state)\nthis:\n  [] prefix of i\n\ngoal (2 subgoals):\n 1. [] prefix of i \\<Longrightarrow> distinct (node_deliver_messages [])\n 2. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                distinct (node_deliver_messages xs);\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> distinct (node_deliver_messages (xs @ [x]))", "thus ?case"], ["proof (prove)\nusing this:\n  [] prefix of i\n\ngoal (1 subgoal):\n 1. distinct (node_deliver_messages [])", "by simp"], ["proof (state)\nthis:\n  distinct (node_deliver_messages [])\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                distinct (node_deliver_messages xs);\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> distinct (node_deliver_messages (xs @ [x]))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                distinct (node_deliver_messages xs);\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> distinct (node_deliver_messages (xs @ [x]))", "case (snoc x xs)"], ["proof (state)\nthis:\n  xs prefix of i \\<Longrightarrow> distinct (node_deliver_messages xs)\n  xs @ [x] prefix of i\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                distinct (node_deliver_messages xs);\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> distinct (node_deliver_messages (xs @ [x]))", "{"], ["proof (state)\nthis:\n  xs prefix of i \\<Longrightarrow> distinct (node_deliver_messages xs)\n  xs @ [x] prefix of i\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                distinct (node_deliver_messages xs);\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> distinct (node_deliver_messages (xs @ [x]))", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                distinct (node_deliver_messages xs);\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> distinct (node_deliver_messages (xs @ [x]))", "assume *: \"y \\<in> set (node_deliver_messages xs)\" \"y \\<in> set (node_deliver_messages [x])\""], ["proof (state)\nthis:\n  y \\<in> set (node_deliver_messages xs)\n  y \\<in> set (node_deliver_messages [x])\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                distinct (node_deliver_messages xs);\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> distinct (node_deliver_messages (xs @ [x]))", "moreover"], ["proof (state)\nthis:\n  y \\<in> set (node_deliver_messages xs)\n  y \\<in> set (node_deliver_messages [x])\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                distinct (node_deliver_messages xs);\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> distinct (node_deliver_messages (xs @ [x]))", "have \"distinct (xs @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (xs @ [x])", "using assms snoc prefix_distinct"], ["proof (prove)\nusing this:\n  xs prefix of i\n  xs prefix of i \\<Longrightarrow> distinct (node_deliver_messages xs)\n  xs @ [x] prefix of i\n  ?xs prefix of ?i \\<Longrightarrow> distinct ?xs\n\ngoal (1 subgoal):\n 1. distinct (xs @ [x])", "by blast"], ["proof (state)\nthis:\n  distinct (xs @ [x])\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                distinct (node_deliver_messages xs);\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> distinct (node_deliver_messages (xs @ [x]))", "ultimately"], ["proof (chain)\npicking this:\n  y \\<in> set (node_deliver_messages xs)\n  y \\<in> set (node_deliver_messages [x])\n  distinct (xs @ [x])", "have \"False\""], ["proof (prove)\nusing this:\n  y \\<in> set (node_deliver_messages xs)\n  y \\<in> set (node_deliver_messages [x])\n  distinct (xs @ [x])\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  y \\<in> set (node_deliver_messages xs)\n  y \\<in> set (node_deliver_messages [x])\n  distinct (xs @ [x])\n  xs prefix of i\n\ngoal (1 subgoal):\n 1. False", "apply(case_tac x; clarsimp simp add: map_filter_def node_deliver_messages_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = Deliver y; xs prefix of i; distinct xs;\n        Deliver y \\<notin> set xs; xa \\<in> set xs;\n        (case xa of Broadcast x \\<Rightarrow> Map.empty x\n         | Deliver x \\<Rightarrow> Some x) =\n        Some y\\<rbrakk>\n       \\<Longrightarrow> False", "using * prefix_contains_msg snoc.prems"], ["proof (prove)\nusing this:\n  y \\<in> set (node_deliver_messages xs)\n  y \\<in> set (node_deliver_messages [x])\n  \\<lbrakk>?es prefix of ?i;\n   ?m \\<in> set (node_deliver_messages ?es)\\<rbrakk>\n  \\<Longrightarrow> Deliver ?m \\<in> set ?es\n  xs @ [x] prefix of i\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = Deliver y; xs prefix of i; distinct xs;\n        Deliver y \\<notin> set xs; xa \\<in> set xs;\n        (case xa of Broadcast x \\<Rightarrow> Map.empty x\n         | Deliver x \\<Rightarrow> Some x) =\n        Some y\\<rbrakk>\n       \\<Longrightarrow> False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                distinct (node_deliver_messages xs);\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> distinct (node_deliver_messages (xs @ [x]))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?y2 \\<in> set (node_deliver_messages xs);\n   ?y2 \\<in> set (node_deliver_messages [x])\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs prefix of i \\<Longrightarrow>\n                distinct (node_deliver_messages xs);\n        xs @ [x] prefix of i\\<rbrakk>\n       \\<Longrightarrow> distinct (node_deliver_messages (xs @ [x]))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y2 \\<in> set (node_deliver_messages xs);\n   ?y2 \\<in> set (node_deliver_messages [x])\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. distinct (node_deliver_messages (xs @ [x]))", "using snoc"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y2 \\<in> set (node_deliver_messages xs);\n   ?y2 \\<in> set (node_deliver_messages [x])\\<rbrakk>\n  \\<Longrightarrow> False\n  xs prefix of i \\<Longrightarrow> distinct (node_deliver_messages xs)\n  xs @ [x] prefix of i\n\ngoal (1 subgoal):\n 1. distinct (node_deliver_messages (xs @ [x]))", "by(fastforce simp add: node_deliver_messages_append node_deliver_messages_def map_filter_def)"], ["proof (state)\nthis:\n  distinct (node_deliver_messages (xs @ [x]))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in network) drop_last_message:\n  assumes \"evts prefix of i\"\n  and \"node_deliver_messages evts = msgs @ [last_msg]\"\n  shows \"\\<exists>pre. pre prefix of i \\<and> node_deliver_messages pre = msgs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>pre. pre prefix of i \\<and> node_deliver_messages pre = msgs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>pre. pre prefix of i \\<and> node_deliver_messages pre = msgs", "have \"Deliver last_msg \\<in> set evts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Deliver last_msg \\<in> set evts", "using assms network.prefix_contains_msg network_axioms"], ["proof (prove)\nusing this:\n  evts prefix of i\n  node_deliver_messages evts = msgs @ [last_msg]\n  \\<lbrakk>network ?history ?msg_id;\n   node_histories.prefix_of_node_history ?history ?es ?i;\n   ?m \\<in> set (network.node_deliver_messages ?es)\\<rbrakk>\n  \\<Longrightarrow> Deliver ?m \\<in> set ?es\n  network history msg_id\n\ngoal (1 subgoal):\n 1. Deliver last_msg \\<in> set evts", "by force"], ["proof (state)\nthis:\n  Deliver last_msg \\<in> set evts\n\ngoal (1 subgoal):\n 1. \\<exists>pre. pre prefix of i \\<and> node_deliver_messages pre = msgs", "then"], ["proof (chain)\npicking this:\n  Deliver last_msg \\<in> set evts", "obtain idx where *: \"idx < length evts\" \"evts ! idx = Deliver last_msg\""], ["proof (prove)\nusing this:\n  Deliver last_msg \\<in> set evts\n\ngoal (1 subgoal):\n 1. (\\<And>idx.\n        \\<lbrakk>idx < length evts; evts ! idx = Deliver last_msg\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson set_elem_nth)"], ["proof (state)\nthis:\n  idx < length evts\n  evts ! idx = Deliver last_msg\n\ngoal (1 subgoal):\n 1. \\<exists>pre. pre prefix of i \\<and> node_deliver_messages pre = msgs", "then"], ["proof (chain)\npicking this:\n  idx < length evts\n  evts ! idx = Deliver last_msg", "obtain pre suf where \"evts = pre @ (evts ! idx) # suf\""], ["proof (prove)\nusing this:\n  idx < length evts\n  evts ! idx = Deliver last_msg\n\ngoal (1 subgoal):\n 1. (\\<And>pre suf.\n        evts = pre @ evts ! idx # suf \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using id_take_nth_drop"], ["proof (prove)\nusing this:\n  idx < length evts\n  evts ! idx = Deliver last_msg\n  ?i < length ?xs \\<Longrightarrow>\n  ?xs = take ?i ?xs @ ?xs ! ?i # drop (Suc ?i) ?xs\n\ngoal (1 subgoal):\n 1. (\\<And>pre suf.\n        evts = pre @ evts ! idx # suf \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  evts = pre @ evts ! idx # suf\n\ngoal (1 subgoal):\n 1. \\<exists>pre. pre prefix of i \\<and> node_deliver_messages pre = msgs", "hence **: \"evts = pre @ (Deliver last_msg) # suf\""], ["proof (prove)\nusing this:\n  evts = pre @ evts ! idx # suf\n\ngoal (1 subgoal):\n 1. evts = pre @ Deliver last_msg # suf", "using assms *"], ["proof (prove)\nusing this:\n  evts = pre @ evts ! idx # suf\n  evts prefix of i\n  node_deliver_messages evts = msgs @ [last_msg]\n  idx < length evts\n  evts ! idx = Deliver last_msg\n\ngoal (1 subgoal):\n 1. evts = pre @ Deliver last_msg # suf", "by auto"], ["proof (state)\nthis:\n  evts = pre @ Deliver last_msg # suf\n\ngoal (1 subgoal):\n 1. \\<exists>pre. pre prefix of i \\<and> node_deliver_messages pre = msgs", "moreover"], ["proof (state)\nthis:\n  evts = pre @ Deliver last_msg # suf\n\ngoal (1 subgoal):\n 1. \\<exists>pre. pre prefix of i \\<and> node_deliver_messages pre = msgs", "hence \"distinct (node_deliver_messages ([Deliver last_msg] @ suf))\""], ["proof (prove)\nusing this:\n  evts = pre @ Deliver last_msg # suf\n\ngoal (1 subgoal):\n 1. distinct (node_deliver_messages ([Deliver last_msg] @ suf))", "by (metis assms(1) assms(2) distinct_singleton node_deliver_messages_Cons node_deliver_messages_Deliver\n        node_deliver_messages_append node_deliver_messages_distinct not_Cons_self2 pre_suf_eq_distinct_list)"], ["proof (state)\nthis:\n  distinct (node_deliver_messages ([Deliver last_msg] @ suf))\n\ngoal (1 subgoal):\n 1. \\<exists>pre. pre prefix of i \\<and> node_deliver_messages pre = msgs", "ultimately"], ["proof (chain)\npicking this:\n  evts = pre @ Deliver last_msg # suf\n  distinct (node_deliver_messages ([Deliver last_msg] @ suf))", "have \"node_deliver_messages ([Deliver last_msg] @ suf) = [last_msg] @ []\""], ["proof (prove)\nusing this:\n  evts = pre @ Deliver last_msg # suf\n  distinct (node_deliver_messages ([Deliver last_msg] @ suf))\n\ngoal (1 subgoal):\n 1. node_deliver_messages ([Deliver last_msg] @ suf) = [last_msg] @ []", "by (metis append_self_conv assms(1) assms(2) node_deliver_messages_Cons node_deliver_messages_Deliver\n        node_deliver_messages_append node_deliver_messages_distinct not_Cons_self2 pre_suf_eq_distinct_list)"], ["proof (state)\nthis:\n  node_deliver_messages ([Deliver last_msg] @ suf) = [last_msg] @ []\n\ngoal (1 subgoal):\n 1. \\<exists>pre. pre prefix of i \\<and> node_deliver_messages pre = msgs", "thus ?thesis"], ["proof (prove)\nusing this:\n  node_deliver_messages ([Deliver last_msg] @ suf) = [last_msg] @ []\n\ngoal (1 subgoal):\n 1. \\<exists>pre. pre prefix of i \\<and> node_deliver_messages pre = msgs", "using assms * **"], ["proof (prove)\nusing this:\n  node_deliver_messages ([Deliver last_msg] @ suf) = [last_msg] @ []\n  evts prefix of i\n  node_deliver_messages evts = msgs @ [last_msg]\n  idx < length evts\n  evts ! idx = Deliver last_msg\n  evts = pre @ Deliver last_msg # suf\n\ngoal (1 subgoal):\n 1. \\<exists>pre. pre prefix of i \\<and> node_deliver_messages pre = msgs", "by (metis append1_eq_conv append_Cons append_Nil node_deliver_messages_append prefix_of_appendD)"], ["proof (state)\nthis:\n  \\<exists>pre. pre prefix of i \\<and> node_deliver_messages pre = msgs\n\ngoal:\nNo subgoals!", "qed"], ["", "locale network_with_ops = causal_network history fst\n  for history :: \"nat \\<Rightarrow> ('msgid \\<times> 'op) event list\" +\n  fixes interp :: \"'op \\<Rightarrow> 'state \\<rightharpoonup> 'state\"\n  and initial_state :: \"'state\""], ["", "context network_with_ops begin"], ["", "definition interp_msg :: \"'msgid \\<times> 'op \\<Rightarrow> 'state \\<rightharpoonup> 'state\" where\n  \"interp_msg msg state \\<equiv> interp (snd msg) state\""], ["", "sublocale hb: happens_before weak_hb hb interp_msg"], ["proof (prove)\ngoal (1 subgoal):\n 1. happens_before weak_hb hb", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x y. hb x y = (weak_hb x y \\<and> \\<not> weak_hb y x)\n 2. \\<And>x. weak_hb x x\n 3. \\<And>x y z.\n       \\<lbrakk>weak_hb x y; weak_hb y z\\<rbrakk>\n       \\<Longrightarrow> weak_hb x z", "fix x y :: \"'msgid \\<times> 'op\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x y. hb x y = (weak_hb x y \\<and> \\<not> weak_hb y x)\n 2. \\<And>x. weak_hb x x\n 3. \\<And>x y z.\n       \\<lbrakk>weak_hb x y; weak_hb y z\\<rbrakk>\n       \\<Longrightarrow> weak_hb x z", "show \"hb x y = (weak_hb x y \\<and> \\<not> weak_hb y x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hb x y = (weak_hb x y \\<and> \\<not> weak_hb y x)", "unfolding weak_hb_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. hb x y = ((hb x y \\<or> x = y) \\<and> \\<not> (hb y x \\<or> y = x))", "using hb_antisym"], ["proof (prove)\nusing this:\n  \\<lbrakk>hb ?x ?y; hb ?y ?x\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. hb x y = ((hb x y \\<or> x = y) \\<and> \\<not> (hb y x \\<or> y = x))", "by blast"], ["proof (state)\nthis:\n  hb x y = (weak_hb x y \\<and> \\<not> weak_hb y x)\n\ngoal (2 subgoals):\n 1. \\<And>x. weak_hb x x\n 2. \\<And>x y z.\n       \\<lbrakk>weak_hb x y; weak_hb y z\\<rbrakk>\n       \\<Longrightarrow> weak_hb x z", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. weak_hb x x\n 2. \\<And>x y z.\n       \\<lbrakk>weak_hb x y; weak_hb y z\\<rbrakk>\n       \\<Longrightarrow> weak_hb x z", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. weak_hb x x\n 2. \\<And>x y z.\n       \\<lbrakk>weak_hb x y; weak_hb y z\\<rbrakk>\n       \\<Longrightarrow> weak_hb x z", "show \"weak_hb x x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weak_hb x x", "using weak_hb_def"], ["proof (prove)\nusing this:\n  weak_hb ?m1.0 ?m2.0 \\<equiv> hb ?m1.0 ?m2.0 \\<or> ?m1.0 = ?m2.0\n\ngoal (1 subgoal):\n 1. weak_hb x x", "by blast"], ["proof (state)\nthis:\n  weak_hb x x\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>weak_hb x y; weak_hb y z\\<rbrakk>\n       \\<Longrightarrow> weak_hb x z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>weak_hb x y; weak_hb y z\\<rbrakk>\n       \\<Longrightarrow> weak_hb x z", "fix x y z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>weak_hb x y; weak_hb y z\\<rbrakk>\n       \\<Longrightarrow> weak_hb x z", "assume \"weak_hb x y\" \"weak_hb y z\""], ["proof (state)\nthis:\n  weak_hb x y\n  weak_hb y z\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>weak_hb x y; weak_hb y z\\<rbrakk>\n       \\<Longrightarrow> weak_hb x z", "thus \"weak_hb x z\""], ["proof (prove)\nusing this:\n  weak_hb x y\n  weak_hb y z\n\ngoal (1 subgoal):\n 1. weak_hb x z", "using weak_hb_def"], ["proof (prove)\nusing this:\n  weak_hb x y\n  weak_hb y z\n  weak_hb ?m1.0 ?m2.0 \\<equiv> hb ?m1.0 ?m2.0 \\<or> ?m1.0 = ?m2.0\n\ngoal (1 subgoal):\n 1. weak_hb x z", "by (metis network.hb.intros(3) network_axioms)"], ["proof (state)\nthis:\n  weak_hb x z\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "definition (in network_with_ops) apply_operations :: \"('msgid \\<times> 'op) event list \\<rightharpoonup> 'state\" where\n  \"apply_operations es \\<equiv> hb.apply_operations (node_deliver_messages es) initial_state\""], ["", "definition (in network_with_ops) node_deliver_ops :: \"('msgid \\<times> 'op) event list \\<Rightarrow> 'op list\" where\n  \"node_deliver_ops cs \\<equiv> map snd (node_deliver_messages cs)\""], ["", "lemma (in network_with_ops) apply_operations_empty [simp]:\n  shows \"apply_operations [] = Some initial_state\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apply_operations [] = Some initial_state", "by(auto simp add: apply_operations_def)"], ["", "lemma (in network_with_ops) apply_operations_Broadcast [simp]:\n  shows \"apply_operations (xs @ [Broadcast m]) = apply_operations xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apply_operations (xs @ [Broadcast m]) = apply_operations xs", "by(auto simp add: apply_operations_def node_deliver_messages_def map_filter_def)"], ["", "lemma (in network_with_ops) apply_operations_Deliver [simp]:\n  shows \"apply_operations (xs @ [Deliver m]) = (apply_operations xs \\<bind> interp_msg m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apply_operations (xs @ [Deliver m]) =\n    apply_operations xs \\<bind> interp_msg m", "by(auto simp add: apply_operations_def node_deliver_messages_def map_filter_def kleisli_def)"], ["", "lemma (in network_with_ops) hb_consistent_technical:\n  assumes \"\\<And>m n. m < length cs \\<Longrightarrow> n < m \\<Longrightarrow> cs ! n \\<sqsubset>\\<^sup>i cs ! m\"\n  shows   \"hb.hb_consistent (node_deliver_messages cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hb.hb_consistent (node_deliver_messages cs)", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?m1 < length cs; ?n1 < ?m1\\<rbrakk>\n  \\<Longrightarrow> cs ! ?n1 \\<sqsubset>\\<^sup>i cs ! ?m1\n\ngoal (1 subgoal):\n 1. hb.hb_consistent (node_deliver_messages cs)", "proof (induction cs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>m n.\n        \\<lbrakk>m < length []; n < m\\<rbrakk>\n        \\<Longrightarrow> [] ! n \\<sqsubset>\\<^sup>i\n                          [] ! m) \\<Longrightarrow>\n    hb.hb_consistent (node_deliver_messages [])\n 2. \\<And>x xs.\n       \\<lbrakk>(\\<And>m n.\n                    \\<lbrakk>m < length xs; n < m\\<rbrakk>\n                    \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i\nxs ! m) \\<Longrightarrow>\n                hb.hb_consistent (node_deliver_messages xs);\n        \\<And>m n.\n           \\<lbrakk>m < length (xs @ [x]); n < m\\<rbrakk>\n           \\<Longrightarrow> (xs @ [x]) ! n \\<sqsubset>\\<^sup>i\n                             (xs @ [x]) ! m\\<rbrakk>\n       \\<Longrightarrow> hb.hb_consistent (node_deliver_messages (xs @ [x]))", "case Nil"], ["proof (state)\nthis:\n  \\<lbrakk>?m1 < length []; ?n1 < ?m1\\<rbrakk>\n  \\<Longrightarrow> [] ! ?n1 \\<sqsubset>\\<^sup>i [] ! ?m1\n\ngoal (2 subgoals):\n 1. (\\<And>m n.\n        \\<lbrakk>m < length []; n < m\\<rbrakk>\n        \\<Longrightarrow> [] ! n \\<sqsubset>\\<^sup>i\n                          [] ! m) \\<Longrightarrow>\n    hb.hb_consistent (node_deliver_messages [])\n 2. \\<And>x xs.\n       \\<lbrakk>(\\<And>m n.\n                    \\<lbrakk>m < length xs; n < m\\<rbrakk>\n                    \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i\nxs ! m) \\<Longrightarrow>\n                hb.hb_consistent (node_deliver_messages xs);\n        \\<And>m n.\n           \\<lbrakk>m < length (xs @ [x]); n < m\\<rbrakk>\n           \\<Longrightarrow> (xs @ [x]) ! n \\<sqsubset>\\<^sup>i\n                             (xs @ [x]) ! m\\<rbrakk>\n       \\<Longrightarrow> hb.hb_consistent (node_deliver_messages (xs @ [x]))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?m1 < length []; ?n1 < ?m1\\<rbrakk>\n  \\<Longrightarrow> [] ! ?n1 \\<sqsubset>\\<^sup>i [] ! ?m1\n\ngoal (1 subgoal):\n 1. hb.hb_consistent (node_deliver_messages [])", "by(simp add: node_deliver_messages_def hb.hb_consistent.intros(1) map_filter_simps(2))"], ["proof (state)\nthis:\n  hb.hb_consistent (node_deliver_messages [])\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>(\\<And>m n.\n                    \\<lbrakk>m < length xs; n < m\\<rbrakk>\n                    \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i\nxs ! m) \\<Longrightarrow>\n                hb.hb_consistent (node_deliver_messages xs);\n        \\<And>m n.\n           \\<lbrakk>m < length (xs @ [x]); n < m\\<rbrakk>\n           \\<Longrightarrow> (xs @ [x]) ! n \\<sqsubset>\\<^sup>i\n                             (xs @ [x]) ! m\\<rbrakk>\n       \\<Longrightarrow> hb.hb_consistent (node_deliver_messages (xs @ [x]))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>(\\<And>m n.\n                    \\<lbrakk>m < length xs; n < m\\<rbrakk>\n                    \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i\nxs ! m) \\<Longrightarrow>\n                hb.hb_consistent (node_deliver_messages xs);\n        \\<And>m n.\n           \\<lbrakk>m < length (xs @ [x]); n < m\\<rbrakk>\n           \\<Longrightarrow> (xs @ [x]) ! n \\<sqsubset>\\<^sup>i\n                             (xs @ [x]) ! m\\<rbrakk>\n       \\<Longrightarrow> hb.hb_consistent (node_deliver_messages (xs @ [x]))", "case (snoc x xs)"], ["proof (state)\nthis:\n  (\\<And>m n.\n      \\<lbrakk>m < length xs; n < m\\<rbrakk>\n      \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m) \\<Longrightarrow>\n  hb.hb_consistent (node_deliver_messages xs)\n  \\<lbrakk>?m1 < length (xs @ [x]); ?n1 < ?m1\\<rbrakk>\n  \\<Longrightarrow> (xs @ [x]) ! ?n1 \\<sqsubset>\\<^sup>i (xs @ [x]) ! ?m1\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>(\\<And>m n.\n                    \\<lbrakk>m < length xs; n < m\\<rbrakk>\n                    \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i\nxs ! m) \\<Longrightarrow>\n                hb.hb_consistent (node_deliver_messages xs);\n        \\<And>m n.\n           \\<lbrakk>m < length (xs @ [x]); n < m\\<rbrakk>\n           \\<Longrightarrow> (xs @ [x]) ! n \\<sqsubset>\\<^sup>i\n                             (xs @ [x]) ! m\\<rbrakk>\n       \\<Longrightarrow> hb.hb_consistent (node_deliver_messages (xs @ [x]))", "hence *: \"(\\<And>m n. m < length xs \\<Longrightarrow> n < m \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m)\""], ["proof (prove)\nusing this:\n  (\\<And>m n.\n      \\<lbrakk>m < length xs; n < m\\<rbrakk>\n      \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m) \\<Longrightarrow>\n  hb.hb_consistent (node_deliver_messages xs)\n  \\<lbrakk>?m1 < length (xs @ [x]); ?n1 < ?m1\\<rbrakk>\n  \\<Longrightarrow> (xs @ [x]) ! ?n1 \\<sqsubset>\\<^sup>i (xs @ [x]) ! ?m1\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>m < length xs; n < m\\<rbrakk>\n       \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m", "by(-, erule_tac x=m in meta_allE, erule_tac x=n in meta_allE, clarsimp simp add: nth_append)"], ["proof (state)\nthis:\n  \\<lbrakk>?m1 < length xs; ?n1 < ?m1\\<rbrakk>\n  \\<Longrightarrow> xs ! ?n1 \\<sqsubset>\\<^sup>i xs ! ?m1\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>(\\<And>m n.\n                    \\<lbrakk>m < length xs; n < m\\<rbrakk>\n                    \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i\nxs ! m) \\<Longrightarrow>\n                hb.hb_consistent (node_deliver_messages xs);\n        \\<And>m n.\n           \\<lbrakk>m < length (xs @ [x]); n < m\\<rbrakk>\n           \\<Longrightarrow> (xs @ [x]) ! n \\<sqsubset>\\<^sup>i\n                             (xs @ [x]) ! m\\<rbrakk>\n       \\<Longrightarrow> hb.hb_consistent (node_deliver_messages (xs @ [x]))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?m1 < length xs; ?n1 < ?m1\\<rbrakk>\n  \\<Longrightarrow> xs ! ?n1 \\<sqsubset>\\<^sup>i xs ! ?m1", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?m1 < length xs; ?n1 < ?m1\\<rbrakk>\n  \\<Longrightarrow> xs ! ?n1 \\<sqsubset>\\<^sup>i xs ! ?m1\n\ngoal (1 subgoal):\n 1. hb.hb_consistent (node_deliver_messages (xs @ [x]))", "proof (cases x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>m n.\n                   \\<lbrakk>m < length xs; n < m\\<rbrakk>\n                   \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m;\n        x = Broadcast x1\\<rbrakk>\n       \\<Longrightarrow> hb.hb_consistent (node_deliver_messages (xs @ [x]))\n 2. \\<And>x2.\n       \\<lbrakk>\\<And>m n.\n                   \\<lbrakk>m < length xs; n < m\\<rbrakk>\n                   \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> hb.hb_consistent (node_deliver_messages (xs @ [x]))", "case (Broadcast x1)"], ["proof (state)\nthis:\n  x = Broadcast x1\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>\\<And>m n.\n                   \\<lbrakk>m < length xs; n < m\\<rbrakk>\n                   \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m;\n        x = Broadcast x1\\<rbrakk>\n       \\<Longrightarrow> hb.hb_consistent (node_deliver_messages (xs @ [x]))\n 2. \\<And>x2.\n       \\<lbrakk>\\<And>m n.\n                   \\<lbrakk>m < length xs; n < m\\<rbrakk>\n                   \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> hb.hb_consistent (node_deliver_messages (xs @ [x]))", "thus ?thesis"], ["proof (prove)\nusing this:\n  x = Broadcast x1\n\ngoal (1 subgoal):\n 1. hb.hb_consistent (node_deliver_messages (xs @ [x]))", "using snoc *"], ["proof (prove)\nusing this:\n  x = Broadcast x1\n  (\\<And>m n.\n      \\<lbrakk>m < length xs; n < m\\<rbrakk>\n      \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m) \\<Longrightarrow>\n  hb.hb_consistent (node_deliver_messages xs)\n  \\<lbrakk>?m1 < length (xs @ [x]); ?n1 < ?m1\\<rbrakk>\n  \\<Longrightarrow> (xs @ [x]) ! ?n1 \\<sqsubset>\\<^sup>i (xs @ [x]) ! ?m1\n  \\<lbrakk>?m1 < length xs; ?n1 < ?m1\\<rbrakk>\n  \\<Longrightarrow> xs ! ?n1 \\<sqsubset>\\<^sup>i xs ! ?m1\n\ngoal (1 subgoal):\n 1. hb.hb_consistent (node_deliver_messages (xs @ [x]))", "by (simp add: node_deliver_messages_append)"], ["proof (state)\nthis:\n  hb.hb_consistent (node_deliver_messages (xs @ [x]))\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>m n.\n                   \\<lbrakk>m < length xs; n < m\\<rbrakk>\n                   \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> hb.hb_consistent (node_deliver_messages (xs @ [x]))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>m n.\n                   \\<lbrakk>m < length xs; n < m\\<rbrakk>\n                   \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> hb.hb_consistent (node_deliver_messages (xs @ [x]))", "case (Deliver x2)"], ["proof (state)\nthis:\n  x = Deliver x2\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<And>m n.\n                   \\<lbrakk>m < length xs; n < m\\<rbrakk>\n                   \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m;\n        x = Deliver x2\\<rbrakk>\n       \\<Longrightarrow> hb.hb_consistent (node_deliver_messages (xs @ [x]))", "thus ?thesis"], ["proof (prove)\nusing this:\n  x = Deliver x2\n\ngoal (1 subgoal):\n 1. hb.hb_consistent (node_deliver_messages (xs @ [x]))", "using snoc * [[simproc del: defined_all]]"], ["proof (prove)\nusing this:\n  x = Deliver x2\n  (\\<And>m n.\n      \\<lbrakk>m < length xs; n < m\\<rbrakk>\n      \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m) \\<Longrightarrow>\n  hb.hb_consistent (node_deliver_messages xs)\n  \\<lbrakk>?m1 < length (xs @ [x]); ?n1 < ?m1\\<rbrakk>\n  \\<Longrightarrow> (xs @ [x]) ! ?n1 \\<sqsubset>\\<^sup>i (xs @ [x]) ! ?m1\n  \\<lbrakk>?m1 < length xs; ?n1 < ?m1\\<rbrakk>\n  \\<Longrightarrow> xs ! ?n1 \\<sqsubset>\\<^sup>i xs ! ?m1\n\ngoal (1 subgoal):\n 1. hb.hb_consistent (node_deliver_messages (xs @ [x]))", "apply (clarsimp simp add: node_deliver_messages_def map_filter_def map_filter_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa aa ba.\n       \\<lbrakk>x = Deliver x2;\n        hb.hb_consistent\n         (map (the \\<circ> case_event Map.empty Some)\n           (filter\n             (\\<lambda>x.\n                 \\<exists>a b.\n                    (case x of Broadcast x \\<Rightarrow> Map.empty x\n                     | Deliver x \\<Rightarrow> Some x) =\n                    Some (a, b))\n             xs));\n        \\<And>m n.\n           \\<lbrakk>m < Suc (length xs); n < m\\<rbrakk>\n           \\<Longrightarrow> (xs @ [Deliver x2]) ! n \\<sqsubset>\\<^sup>i\n                             (xs @ [Deliver x2]) ! m;\n        \\<And>m n.\n           \\<lbrakk>m < length xs; n < m\\<rbrakk>\n           \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m;\n        hb x2 (aa, ba); xa \\<in> set xs;\n        (case xa of Broadcast x \\<Rightarrow> Map.empty x\n         | Deliver x \\<Rightarrow> Some x) =\n        Some (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac m m1 m2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m m1 m2.\n       \\<lbrakk>x = Deliver x2;\n        hb.hb_consistent\n         (map (the \\<circ> case_event Map.empty Some)\n           (filter\n             (\\<lambda>x.\n                 \\<exists>a b.\n                    (case x of Broadcast x \\<Rightarrow> Map.empty x\n                     | Deliver x \\<Rightarrow> Some x) =\n                    Some (a, b))\n             xs));\n        \\<And>m n.\n           \\<lbrakk>m < Suc (length xs); n < m\\<rbrakk>\n           \\<Longrightarrow> (xs @ [Deliver x2]) ! n \\<sqsubset>\\<^sup>i\n                             (xs @ [Deliver x2]) ! m;\n        \\<And>m n.\n           \\<lbrakk>m < length xs; n < m\\<rbrakk>\n           \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m;\n        hb x2 (m1, m2); m \\<in> set xs;\n        (case m of Broadcast x \\<Rightarrow> Map.empty x\n         | Deliver x \\<Rightarrow> Some x) =\n        Some (m1, m2)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (case_tac m; clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m1 m2.\n       \\<lbrakk>x = Deliver x2;\n        hb.hb_consistent\n         (map (the \\<circ> case_event Map.empty Some)\n           (filter\n             (\\<lambda>x.\n                 \\<exists>a b.\n                    (case x of Broadcast x \\<Rightarrow> Map.empty x\n                     | Deliver x \\<Rightarrow> Some x) =\n                    Some (a, b))\n             xs));\n        \\<And>m n.\n           \\<lbrakk>m < Suc (length xs); n < m\\<rbrakk>\n           \\<Longrightarrow> (xs @ [Deliver x2]) ! n \\<sqsubset>\\<^sup>i\n                             (xs @ [Deliver x2]) ! m;\n        \\<And>m n.\n           \\<lbrakk>m < length xs; n < m\\<rbrakk>\n           \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m;\n        hb x2 (m1, m2); Deliver (m1, m2) \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule set_elem_nth, erule exE, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m.\n       \\<lbrakk>x = Deliver x2;\n        hb.hb_consistent\n         (map (the \\<circ> case_event Map.empty Some)\n           (filter\n             (\\<lambda>x.\n                 \\<exists>a b.\n                    (case x of Broadcast x \\<Rightarrow> Map.empty x\n                     | Deliver x \\<Rightarrow> Some x) =\n                    Some (a, b))\n             xs));\n        \\<And>m n.\n           \\<lbrakk>m < Suc (length xs); n < m\\<rbrakk>\n           \\<Longrightarrow> (xs @ [Deliver x2]) ! n \\<sqsubset>\\<^sup>i\n                             (xs @ [Deliver x2]) ! m;\n        \\<And>m n.\n           \\<lbrakk>m < length xs; n < m\\<rbrakk>\n           \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m;\n        hb x2 (m1, m2); m < length xs; xs ! m = Deliver (m1, m2)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (erule_tac x=\"length xs\" in meta_allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m.\n       \\<lbrakk>x = Deliver x2;\n        hb.hb_consistent\n         (map (the \\<circ> case_event Map.empty Some)\n           (filter\n             (\\<lambda>x.\n                 \\<exists>a b.\n                    (case x of Broadcast x \\<Rightarrow> Map.empty x\n                     | Deliver x \\<Rightarrow> Some x) =\n                    Some (a, b))\n             xs));\n        \\<And>m n.\n           \\<lbrakk>m < length xs; n < m\\<rbrakk>\n           \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m;\n        hb x2 (m1, m2); m < length xs; xs ! m = Deliver (m1, m2);\n        \\<And>n.\n           \\<lbrakk>length xs < Suc (length xs); n < length xs\\<rbrakk>\n           \\<Longrightarrow> (xs @ [Deliver x2]) ! n \\<sqsubset>\\<^sup>i\n                             (xs @ [Deliver x2]) ! length xs\\<rbrakk>\n       \\<Longrightarrow> False", "apply (clarsimp simp add: nth_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m1 m2 m.\n       \\<lbrakk>x = Deliver x2;\n        hb.hb_consistent\n         (map (the \\<circ> case_event Map.empty Some)\n           (filter\n             (\\<lambda>x.\n                 \\<exists>a b.\n                    (case x of Broadcast x \\<Rightarrow> Map.empty x\n                     | Deliver x \\<Rightarrow> Some x) =\n                    Some (a, b))\n             xs));\n        \\<And>m n.\n           \\<lbrakk>m < length xs; n < m\\<rbrakk>\n           \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m;\n        hb x2 (m1, m2); m < length xs; xs ! m = Deliver (m1, m2);\n        \\<And>n.\n           n < length xs \\<Longrightarrow>\n           xs ! n \\<sqsubset>\\<^sup>i Deliver x2\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis causal_delivery insert_subset local_order_carrier_closed\n        node_total_order_antisym)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  hb.hb_consistent (node_deliver_messages (xs @ [x]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hb.hb_consistent (node_deliver_messages (xs @ [x]))\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary (in network_with_ops)\n  shows \"hb.hb_consistent (node_deliver_messages (history i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hb.hb_consistent (node_deliver_messages (history i))", "by (metis hb_consistent_technical history_order_def less_one linorder_neqE_nat list_nth_split zero_order(3))"], ["", "lemma (in network_with_ops) hb_consistent_prefix:\n  assumes \"xs prefix of i\"\n  shows \"hb.hb_consistent (node_deliver_messages xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hb.hb_consistent (node_deliver_messages xs)", "using assms"], ["proof (prove)\nusing this:\n  xs prefix of i\n\ngoal (1 subgoal):\n 1. hb.hb_consistent (node_deliver_messages xs)", "proof (clarsimp simp: prefix_of_node_history_def, rule_tac i=i in hb_consistent_technical)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys m n.\n       \\<lbrakk>xs @ ys = history i; xs prefix of i; m < length xs;\n        n < m\\<rbrakk>\n       \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m", "fix m n ys"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ys m n.\n       \\<lbrakk>xs @ ys = history i; xs prefix of i; m < length xs;\n        n < m\\<rbrakk>\n       \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m", "assume *: \"xs @ ys = history i\" \"m < length xs\" \"n < m\""], ["proof (state)\nthis:\n  xs @ ys = history i\n  m < length xs\n  n < m\n\ngoal (1 subgoal):\n 1. \\<And>ys m n.\n       \\<lbrakk>xs @ ys = history i; xs prefix of i; m < length xs;\n        n < m\\<rbrakk>\n       \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m", "consider (a) \"xs = []\" | (b) \"\\<exists>c. xs = [c]\" | (c) \"Suc 0 < length (xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs = [] \\<Longrightarrow> thesis;\n     \\<exists>c. xs = [c] \\<Longrightarrow> thesis;\n     Suc 0 < length xs \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (metis Suc_pred length_Suc_conv length_greater_0_conv zero_less_diff)"], ["proof (state)\nthis:\n  \\<lbrakk>xs = [] \\<Longrightarrow> ?thesis1;\n   \\<exists>c. xs = [c] \\<Longrightarrow> ?thesis1;\n   Suc 0 < length xs \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (1 subgoal):\n 1. \\<And>ys m n.\n       \\<lbrakk>xs @ ys = history i; xs prefix of i; m < length xs;\n        n < m\\<rbrakk>\n       \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m", "thus \"xs ! n \\<sqsubset>\\<^sup>i xs ! m\""], ["proof (prove)\nusing this:\n  \\<lbrakk>xs = [] \\<Longrightarrow> ?thesis1;\n   \\<exists>c. xs = [c] \\<Longrightarrow> ?thesis1;\n   Suc 0 < length xs \\<Longrightarrow> ?thesis1\\<rbrakk>\n  \\<Longrightarrow> ?thesis1\n\ngoal (1 subgoal):\n 1. xs ! n \\<sqsubset>\\<^sup>i xs ! m", "proof (cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. xs = [] \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m\n 2. \\<exists>c. xs = [c] \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m\n 3. Suc 0 < length xs \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m", "case a"], ["proof (state)\nthis:\n  xs = []\n\ngoal (3 subgoals):\n 1. xs = [] \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m\n 2. \\<exists>c. xs = [c] \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m\n 3. Suc 0 < length xs \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs = []\n\ngoal (1 subgoal):\n 1. xs ! n \\<sqsubset>\\<^sup>i xs ! m", "using *"], ["proof (prove)\nusing this:\n  xs = []\n  xs @ ys = history i\n  m < length xs\n  n < m\n\ngoal (1 subgoal):\n 1. xs ! n \\<sqsubset>\\<^sup>i xs ! m", "by clarsimp"], ["proof (state)\nthis:\n  xs ! n \\<sqsubset>\\<^sup>i xs ! m\n\ngoal (2 subgoals):\n 1. \\<exists>c. xs = [c] \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m\n 2. Suc 0 < length xs \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>c. xs = [c] \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m\n 2. Suc 0 < length xs \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m", "case b"], ["proof (state)\nthis:\n  \\<exists>c. xs = [c]\n\ngoal (2 subgoals):\n 1. \\<exists>c. xs = [c] \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m\n 2. Suc 0 < length xs \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>c. xs = [c]\n\ngoal (1 subgoal):\n 1. xs ! n \\<sqsubset>\\<^sup>i xs ! m", "using assms *"], ["proof (prove)\nusing this:\n  \\<exists>c. xs = [c]\n  xs prefix of i\n  xs @ ys = history i\n  m < length xs\n  n < m\n\ngoal (1 subgoal):\n 1. xs ! n \\<sqsubset>\\<^sup>i xs ! m", "by clarsimp"], ["proof (state)\nthis:\n  xs ! n \\<sqsubset>\\<^sup>i xs ! m\n\ngoal (1 subgoal):\n 1. Suc 0 < length xs \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Suc 0 < length xs \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m", "case c"], ["proof (state)\nthis:\n  Suc 0 < length xs\n\ngoal (1 subgoal):\n 1. Suc 0 < length xs \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m", "thus ?thesis"], ["proof (prove)\nusing this:\n  Suc 0 < length xs\n\ngoal (1 subgoal):\n 1. xs ! n \\<sqsubset>\\<^sup>i xs ! m", "using assms *"], ["proof (prove)\nusing this:\n  Suc 0 < length xs\n  xs prefix of i\n  xs @ ys = history i\n  m < length xs\n  n < m\n\ngoal (1 subgoal):\n 1. xs ! n \\<sqsubset>\\<^sup>i xs ! m", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs prefix of i; xs @ ys = history i; m < length xs;\n     n < m\\<rbrakk>\n    \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m", "apply(drule list_nth_split, assumption, clarsimp simp: c)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs prefix of i; xs @ ys = history i; n < m;\n     \\<exists>xsa ys zs. xs = xsa @ xs ! n # ys @ xs ! m # zs\\<rbrakk>\n    \\<Longrightarrow> xs ! n \\<sqsubset>\\<^sup>i xs ! m", "apply (metis append.assoc append.simps(2) history_order_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  xs ! n \\<sqsubset>\\<^sup>i xs ! m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  xs ! n \\<sqsubset>\\<^sup>i xs ! m\n\ngoal:\nNo subgoals!", "qed"], ["", "locale network_with_constrained_ops = network_with_ops +\n  fixes valid_msg :: \"'c \\<Rightarrow> ('a \\<times> 'b) \\<Rightarrow> bool\"\n  assumes broadcast_only_valid_msgs: \"pre @ [Broadcast m] prefix of i \\<Longrightarrow>\n             \\<exists>state. apply_operations pre = Some state \\<and> valid_msg state m\""], ["", "lemma (in network_with_constrained_ops) broadcast_is_valid:\n  assumes \"Broadcast m \\<in> set (history i)\"\n  shows \"\\<exists>state. valid_msg state m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>state. valid_msg state m", "using assms broadcast_only_valid_msgs events_before_exist"], ["proof (prove)\nusing this:\n  Broadcast m \\<in> set (history i)\n  ?pre @ [Broadcast ?m] prefix of ?i \\<Longrightarrow>\n  \\<exists>state.\n     apply_operations ?pre = Some state \\<and> valid_msg state ?m\n  ?x \\<in> set (history ?i) \\<Longrightarrow>\n  \\<exists>pre. pre @ [?x] prefix of ?i\n\ngoal (1 subgoal):\n 1. \\<exists>state. valid_msg state m", "by blast"], ["", "lemma (in network_with_constrained_ops) deliver_is_valid:\n  assumes \"Deliver m \\<in> set (history i)\"\n  shows \"\\<exists>j pre state. pre @ [Broadcast m] prefix of j \\<and> apply_operations pre = Some state \\<and> valid_msg state m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>j pre state.\n       pre @ [Broadcast m] prefix of j \\<and>\n       apply_operations pre = Some state \\<and> valid_msg state m", "using assms"], ["proof (prove)\nusing this:\n  Deliver m \\<in> set (history i)\n\ngoal (1 subgoal):\n 1. \\<exists>j pre state.\n       pre @ [Broadcast m] prefix of j \\<and>\n       apply_operations pre = Some state \\<and> valid_msg state m", "apply (clarsimp dest!: delivery_has_a_cause)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       Broadcast m \\<in> set (history j) \\<Longrightarrow>\n       \\<exists>j pre.\n          pre @ [Broadcast m] prefix of j \\<and>\n          (\\<exists>state.\n              apply_operations pre = Some state \\<and> valid_msg state m)", "using broadcast_only_valid_msgs events_before_exist"], ["proof (prove)\nusing this:\n  ?pre @ [Broadcast ?m] prefix of ?i \\<Longrightarrow>\n  \\<exists>state.\n     apply_operations ?pre = Some state \\<and> valid_msg state ?m\n  ?x \\<in> set (history ?i) \\<Longrightarrow>\n  \\<exists>pre. pre @ [?x] prefix of ?i\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       Broadcast m \\<in> set (history j) \\<Longrightarrow>\n       \\<exists>j pre.\n          pre @ [Broadcast m] prefix of j \\<and>\n          (\\<exists>state.\n              apply_operations pre = Some state \\<and> valid_msg state m)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in network_with_constrained_ops) deliver_in_prefix_is_valid:\n  assumes \"xs prefix of i\"\n      and \"Deliver m \\<in> set xs\"\n    shows \"\\<exists>state. valid_msg state m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>state. valid_msg state m", "by (meson assms network_with_constrained_ops.deliver_is_valid network_with_constrained_ops_axioms prefix_elem_to_carriers)"], ["", "subsection\\<open>Dummy network models\\<close>"], ["", "interpretation trivial_node_histories: node_histories \"\\<lambda>m. []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. node_histories (\\<lambda>m. [])", "by standard auto"], ["", "interpretation trivial_network: network \"\\<lambda>m. []\" id"], ["proof (prove)\ngoal (1 subgoal):\n 1. network (\\<lambda>m. []) id", "by standard auto"], ["", "interpretation trivial_causal_network: causal_network \"\\<lambda>m. []\" id"], ["proof (prove)\ngoal (1 subgoal):\n 1. causal_network (\\<lambda>m. []) id", "by standard auto"], ["", "interpretation trivial_network_with_ops: network_with_ops \"\\<lambda>m. []\" \"(\\<lambda>x y. Some y)\" 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. network_with_ops (\\<lambda>m. [])", "by standard auto"], ["", "interpretation trivial_network_with_constrained_ops: network_with_constrained_ops \"\\<lambda>m. []\" \"(\\<lambda>x y. Some y)\" 0 \"\\<lambda>x y. True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. network_with_constrained_ops (\\<lambda>m. []) (\\<lambda>x. Some) (0::'c)\n     (\\<lambda>x y. True)", "by standard (simp add: trivial_node_histories.prefix_of_node_history_def)"], ["", "end"]]}