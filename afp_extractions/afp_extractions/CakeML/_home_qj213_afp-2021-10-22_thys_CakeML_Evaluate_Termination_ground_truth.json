{"file_name": "/home/qj213/afp-2021-10-22/thys/CakeML/Evaluate_Termination.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CakeML", "problem_names": ["lemma [simp]:\n  \"size_exp' (Mat e pes) = Suc (size_exp' e + size_list (size_prod size size_exp') pes)\"", "lemma [simp]:\n  \"size_exp' (Handle e pes) = Suc (size_exp' e + size_list (size_prod size size_exp') pes)\"", "lemma [simp]:\n  \"size_exp' (Letrec defs e) = Suc (size_exp' e + size_list (size_prod (\\<lambda>_. 0) (size_prod (\\<lambda>_. 0) size_exp')) defs)\""], "translations": [["", "lemma [simp]:\n  \"size_exp' (Mat e pes) = Suc (size_exp' e + size_list (size_prod size size_exp') pes)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size_exp' (Mat e pes) =\n    Suc (size_exp' e + size_list (size_prod size size_exp') pes)", "apply (simp add: size_exp'.simps size_list_conv_sum_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list\n     (map ((\\<lambda>(p, es). Suc (size p + es)) \\<circ>\n           map_prod id size_exp')\n       pes) =\n    sum_list (map (size_prod size size_exp') pes)", "apply (rule arg_cong[where f = sum_list])"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>(p, es). Suc (size p + es)) \\<circ>\n         map_prod id size_exp')\n     pes =\n    map (size_prod size size_exp') pes", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma [simp]:\n  \"size_exp' (Handle e pes) = Suc (size_exp' e + size_list (size_prod size size_exp') pes)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size_exp' (Handle e pes) =\n    Suc (size_exp' e + size_list (size_prod size size_exp') pes)", "apply (simp add: size_exp'.simps size_list_conv_sum_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list\n     (map ((\\<lambda>(p, es). Suc (size p + es)) \\<circ>\n           map_prod id size_exp')\n       pes) =\n    sum_list (map (size_prod size size_exp') pes)", "apply (rule arg_cong[where f = sum_list])"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>(p, es). Suc (size p + es)) \\<circ>\n         map_prod id size_exp')\n     pes =\n    map (size_prod size size_exp') pes", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma [simp]:\n  \"size_exp' (Letrec defs e) = Suc (size_exp' e + size_list (size_prod (\\<lambda>_. 0) (size_prod (\\<lambda>_. 0) size_exp')) defs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size_exp' (Letrec defs e) =\n    Suc (size_exp' e +\n         size_list\n          (size_prod (\\<lambda>_. 0) (size_prod (\\<lambda>_. 0) size_exp'))\n          defs)", "apply (simp add: size_exp'.simps size_list_conv_sum_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list\n     (map ((\\<lambda>(uu_, uu_, es). Suc (Suc es)) \\<circ>\n           map_prod id (map_prod id size_exp'))\n       defs) =\n    sum_list\n     (map (size_prod (\\<lambda>_. 0) (size_prod (\\<lambda>_. 0) size_exp'))\n       defs)", "apply (rule arg_cong[where f = sum_list])"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>(uu_, uu_, es). Suc (Suc es)) \\<circ>\n         map_prod id (map_prod id size_exp'))\n     defs =\n    map (size_prod (\\<lambda>_. 0) (size_prod (\\<lambda>_. 0) size_exp'))\n     defs", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "context begin"], ["", "private"], ["", "definition fun_evaluate_relation where\n\"fun_evaluate_relation = inv_image (less_than <*lex*> less_than) (\\<lambda>x.\n  case x of\n    Inr (s, _, es) \\<Rightarrow> (clock s, size_list size_exp' es)\n  | Inl (s,_,_,pes,_) \\<Rightarrow> (clock s, size_list (size_prod size size_exp') pes))\""], ["", "termination fun_evaluate"], ["proof (prove)\ngoal (1 subgoal):\n 1. All fun_evaluate_match_fun_evaluate_dom", "by (relation fun_evaluate_relation;\n    auto\n      simp: fun_evaluate_relation_def fix_clock_alt_def dec_clock_def do_if_def do_log_alt_def\n      simp: datatype_record_update\n      split: prod.splits state.splits lop.splits v.splits option.splits if_splits tid_or_exn.splits id0.splits list.splits)"], ["", "end"], ["", "end"]]}