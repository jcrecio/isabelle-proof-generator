{"file_name": "/home/qj213/afp-2021-10-22/thys/CakeML/Big_Step_Total.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CakeML", "problem_names": ["lemma evaluate_list_total0:\n  fixes s :: \"'a state\"\n  assumes \"\\<And>e env s'::'a state. e \\<in> set es \\<Longrightarrow> clock s' \\<le> clock s \\<Longrightarrow> \\<exists>s'' r. evaluate True env s' e (s'', r)\"\n  shows \"\\<exists>s' r. evaluate_list True env s es (s', r)\"", "lemma evaluate_match_total0:\n  fixes s :: \"'a state\"\n  assumes \"\\<And>p e env s'::'a state. (p, e) \\<in> set pes \\<Longrightarrow> clock s' \\<le> clock s \\<Longrightarrow> \\<exists>s'' r. evaluate True env s' e (s'', r)\"\n  shows \"\\<exists>s' r. evaluate_match True env s v pes v' (s', r)\"", "lemma evaluate_total: \"\\<exists>s' r. evaluate True env s e (s', r)\"", "lemma evaluate_list_total: \"\\<exists>s' r. evaluate_list True env s es (s', r)\"", "lemma evaluate_match_total: \"\\<exists>s' r. evaluate_match True env s v pes v' (s', r)\""], "translations": [["", "lemma evaluate_list_total0:\n  fixes s :: \"'a state\"\n  assumes \"\\<And>e env s'::'a state. e \\<in> set es \\<Longrightarrow> clock s' \\<le> clock s \\<Longrightarrow> \\<exists>s'' r. evaluate True env s' e (s'', r)\"\n  shows \"\\<exists>s' r. evaluate_list True env s es (s', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_list True env s es (s', r)", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?e \\<in> set es; clock ?s' \\<le> clock s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s'' r. evaluate True ?env ?s' ?e (s'', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_list True env s es (s', r)", "proof (induction es arbitrary: env s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>env s.\n       (\\<And>e s' env.\n           \\<lbrakk>e \\<in> set []; clock s' \\<le> clock s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s'' r.\n                                evaluate True env s' e\n                                 (s'', r)) \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s [] (s', r)\n 2. \\<And>a es env s.\n       \\<lbrakk>\\<And>env s.\n                   (\\<And>e s' env.\n                       \\<lbrakk>e \\<in> set es;\n                        clock s' \\<le> clock s\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>s'' r.\n      evaluate True env s' e (s'', r)) \\<Longrightarrow>\n                   \\<exists>s' r. evaluate_list True env s es (s', r);\n        \\<And>e s' env.\n           \\<lbrakk>e \\<in> set (a # es); clock s' \\<le> clock s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s'' r.\n                                evaluate True env s' e (s'', r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' r.\n                            evaluate_list True env s (a # es) (s', r)", "case Nil"], ["proof (state)\nthis:\n  \\<lbrakk>?e \\<in> set []; clock ?s' \\<le> clock s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s'' r. evaluate True ?env ?s' ?e (s'', r)\n\ngoal (2 subgoals):\n 1. \\<And>env s.\n       (\\<And>e s' env.\n           \\<lbrakk>e \\<in> set []; clock s' \\<le> clock s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s'' r.\n                                evaluate True env s' e\n                                 (s'', r)) \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s [] (s', r)\n 2. \\<And>a es env s.\n       \\<lbrakk>\\<And>env s.\n                   (\\<And>e s' env.\n                       \\<lbrakk>e \\<in> set es;\n                        clock s' \\<le> clock s\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>s'' r.\n      evaluate True env s' e (s'', r)) \\<Longrightarrow>\n                   \\<exists>s' r. evaluate_list True env s es (s', r);\n        \\<And>e s' env.\n           \\<lbrakk>e \\<in> set (a # es); clock s' \\<le> clock s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s'' r.\n                                evaluate True env s' e (s'', r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' r.\n                            evaluate_list True env s (a # es) (s', r)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_list True env s [] (s', r)", "by (metis evaluate_match_evaluate_list_evaluate.empty)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_list True env s [] (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>a es env s.\n       \\<lbrakk>\\<And>env s.\n                   (\\<And>e s' env.\n                       \\<lbrakk>e \\<in> set es;\n                        clock s' \\<le> clock s\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>s'' r.\n      evaluate True env s' e (s'', r)) \\<Longrightarrow>\n                   \\<exists>s' r. evaluate_list True env s es (s', r);\n        \\<And>e s' env.\n           \\<lbrakk>e \\<in> set (a # es); clock s' \\<le> clock s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s'' r.\n                                evaluate True env s' e (s'', r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' r.\n                            evaluate_list True env s (a # es) (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a es env s.\n       \\<lbrakk>\\<And>env s.\n                   (\\<And>e s' env.\n                       \\<lbrakk>e \\<in> set es;\n                        clock s' \\<le> clock s\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>s'' r.\n      evaluate True env s' e (s'', r)) \\<Longrightarrow>\n                   \\<exists>s' r. evaluate_list True env s es (s', r);\n        \\<And>e s' env.\n           \\<lbrakk>e \\<in> set (a # es); clock s' \\<le> clock s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s'' r.\n                                evaluate True env s' e (s'', r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' r.\n                            evaluate_list True env s (a # es) (s', r)", "case (Cons e es)"], ["proof (state)\nthis:\n  (\\<And>e s' env.\n      \\<lbrakk>e \\<in> set es; clock s' \\<le> clock ?s\\<rbrakk>\n      \\<Longrightarrow> \\<exists>s'' r.\n                           evaluate True env s' e\n                            (s'', r)) \\<Longrightarrow>\n  \\<exists>s' r. evaluate_list True ?env ?s es (s', r)\n  \\<lbrakk>?e \\<in> set (e # es); clock ?s' \\<le> clock s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s'' r. evaluate True ?env ?s' ?e (s'', r)\n\ngoal (1 subgoal):\n 1. \\<And>a es env s.\n       \\<lbrakk>\\<And>env s.\n                   (\\<And>e s' env.\n                       \\<lbrakk>e \\<in> set es;\n                        clock s' \\<le> clock s\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>s'' r.\n      evaluate True env s' e (s'', r)) \\<Longrightarrow>\n                   \\<exists>s' r. evaluate_list True env s es (s', r);\n        \\<And>e s' env.\n           \\<lbrakk>e \\<in> set (a # es); clock s' \\<le> clock s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s'' r.\n                                evaluate True env s' e (s'', r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' r.\n                            evaluate_list True env s (a # es) (s', r)", "then"], ["proof (chain)\npicking this:\n  (\\<And>e s' env.\n      \\<lbrakk>e \\<in> set es; clock s' \\<le> clock ?s\\<rbrakk>\n      \\<Longrightarrow> \\<exists>s'' r.\n                           evaluate True env s' e\n                            (s'', r)) \\<Longrightarrow>\n  \\<exists>s' r. evaluate_list True ?env ?s es (s', r)\n  \\<lbrakk>?e \\<in> set (e # es); clock ?s' \\<le> clock s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s'' r. evaluate True ?env ?s' ?e (s'', r)", "obtain s' r where e: \"evaluate True env s e (s', r)\""], ["proof (prove)\nusing this:\n  (\\<And>e s' env.\n      \\<lbrakk>e \\<in> set es; clock s' \\<le> clock ?s\\<rbrakk>\n      \\<Longrightarrow> \\<exists>s'' r.\n                           evaluate True env s' e\n                            (s'', r)) \\<Longrightarrow>\n  \\<exists>s' r. evaluate_list True ?env ?s es (s', r)\n  \\<lbrakk>?e \\<in> set (e # es); clock ?s' \\<le> clock s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s'' r. evaluate True ?env ?s' ?e (s'', r)\n\ngoal (1 subgoal):\n 1. (\\<And>s' r.\n        evaluate True env s e (s', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  evaluate True env s e (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>a es env s.\n       \\<lbrakk>\\<And>env s.\n                   (\\<And>e s' env.\n                       \\<lbrakk>e \\<in> set es;\n                        clock s' \\<le> clock s\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>s'' r.\n      evaluate True env s' e (s'', r)) \\<Longrightarrow>\n                   \\<exists>s' r. evaluate_list True env s es (s', r);\n        \\<And>e s' env.\n           \\<lbrakk>e \\<in> set (a # es); clock s' \\<le> clock s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s'' r.\n                                evaluate True env s' e (s'', r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' r.\n                            evaluate_list True env s (a # es) (s', r)", "then"], ["proof (chain)\npicking this:\n  evaluate True env s e (s', r)", "have clock: \"clock s' \\<le> clock s\""], ["proof (prove)\nusing this:\n  evaluate True env s e (s', r)\n\ngoal (1 subgoal):\n 1. clock s' \\<le> clock s", "by (metis evaluate_clock_mono)"], ["proof (state)\nthis:\n  clock s' \\<le> clock s\n\ngoal (1 subgoal):\n 1. \\<And>a es env s.\n       \\<lbrakk>\\<And>env s.\n                   (\\<And>e s' env.\n                       \\<lbrakk>e \\<in> set es;\n                        clock s' \\<le> clock s\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>s'' r.\n      evaluate True env s' e (s'', r)) \\<Longrightarrow>\n                   \\<exists>s' r. evaluate_list True env s es (s', r);\n        \\<And>e s' env.\n           \\<lbrakk>e \\<in> set (a # es); clock s' \\<le> clock s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s'' r.\n                                evaluate True env s' e (s'', r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' r.\n                            evaluate_list True env s (a # es) (s', r)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "proof (cases r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "case (Rval v)"], ["proof (state)\nthis:\n  r = Rval v\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "have \"\\<exists>s'' r. evaluate_list True env s' es (s'', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s'' r. evaluate_list True env s' es (s'', r)", "using Cons clock"], ["proof (prove)\nusing this:\n  (\\<And>e s' env.\n      \\<lbrakk>e \\<in> set es; clock s' \\<le> clock ?s\\<rbrakk>\n      \\<Longrightarrow> \\<exists>s'' r.\n                           evaluate True env s' e\n                            (s'', r)) \\<Longrightarrow>\n  \\<exists>s' r. evaluate_list True ?env ?s es (s', r)\n  \\<lbrakk>?e \\<in> set (e # es); clock ?s' \\<le> clock s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s'' r. evaluate True ?env ?s' ?e (s'', r)\n  clock s' \\<le> clock s\n\ngoal (1 subgoal):\n 1. \\<exists>s'' r. evaluate_list True env s' es (s'', r)", "by auto"], ["proof (state)\nthis:\n  \\<exists>s'' r. evaluate_list True env s' es (s'', r)\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s'' r. evaluate_list True env s' es (s'', r)", "obtain s'' r where \"evaluate_list True env s' es (s'', r)\""], ["proof (prove)\nusing this:\n  \\<exists>s'' r. evaluate_list True env s' es (s'', r)\n\ngoal (1 subgoal):\n 1. (\\<And>s'' r.\n        evaluate_list True env s' es (s'', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  evaluate_list True env s' es (s'', r)\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r__ = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)\n 2. \\<And>x2.\n       r__ = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "with e Rval"], ["proof (chain)\npicking this:\n  evaluate True env s e (s', r__)\n  r__ = Rval v\n  evaluate_list True env s' es (s'', r)", "show ?thesis"], ["proof (prove)\nusing this:\n  evaluate True env s e (s', r__)\n  r__ = Rval v\n  evaluate_list True env s' es (s'', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "by (cases r)\n           (metis evaluate_match_evaluate_list_evaluate.cons1 evaluate_match_evaluate_list_evaluate.cons3)+"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_list True env s (e # es) (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r__ = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "case Rerr"], ["proof (state)\nthis:\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "with e"], ["proof (chain)\npicking this:\n  evaluate True env s e (s', r)\n  r = Rerr x2_", "show ?thesis"], ["proof (prove)\nusing this:\n  evaluate True env s e (s', r)\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "by (metis evaluate_match_evaluate_list_evaluate.cons2)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_list True env s (e # es) (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_list True env s (e # es) (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma evaluate_match_total0:\n  fixes s :: \"'a state\"\n  assumes \"\\<And>p e env s'::'a state. (p, e) \\<in> set pes \\<Longrightarrow> clock s' \\<le> clock s \\<Longrightarrow> \\<exists>s'' r. evaluate True env s' e (s'', r)\"\n  shows \"\\<exists>s' r. evaluate_match True env s v pes v' (s', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v pes v' (s', r)", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?p, ?e) \\<in> set pes; clock ?s' \\<le> clock s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s'' r. evaluate True ?env ?s' ?e (s'', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v pes v' (s', r)", "proof (induction pes arbitrary: env s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>env s.\n       (\\<And>p e s' env.\n           \\<lbrakk>(p, e) \\<in> set []; clock s' \\<le> clock s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s'' r.\n                                evaluate True env s' e\n                                 (s'', r)) \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v [] v' (s', r)\n 2. \\<And>a pes env s.\n       \\<lbrakk>\\<And>env s.\n                   (\\<And>p e s' env.\n                       \\<lbrakk>(p, e) \\<in> set pes;\n                        clock s' \\<le> clock s\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>s'' r.\n      evaluate True env s' e (s'', r)) \\<Longrightarrow>\n                   \\<exists>s' r.\n                      evaluate_match True env s v pes v' (s', r);\n        \\<And>p e s' env.\n           \\<lbrakk>(p, e) \\<in> set (a # pes);\n            clock s' \\<le> clock s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s'' r.\n                                evaluate True env s' e (s'', r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' r.\n                            evaluate_match True env s v (a # pes) v' (s', r)", "case Nil"], ["proof (state)\nthis:\n  \\<lbrakk>(?p, ?e) \\<in> set []; clock ?s' \\<le> clock s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s'' r. evaluate True ?env ?s' ?e (s'', r)\n\ngoal (2 subgoals):\n 1. \\<And>env s.\n       (\\<And>p e s' env.\n           \\<lbrakk>(p, e) \\<in> set []; clock s' \\<le> clock s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s'' r.\n                                evaluate True env s' e\n                                 (s'', r)) \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v [] v' (s', r)\n 2. \\<And>a pes env s.\n       \\<lbrakk>\\<And>env s.\n                   (\\<And>p e s' env.\n                       \\<lbrakk>(p, e) \\<in> set pes;\n                        clock s' \\<le> clock s\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>s'' r.\n      evaluate True env s' e (s'', r)) \\<Longrightarrow>\n                   \\<exists>s' r.\n                      evaluate_match True env s v pes v' (s', r);\n        \\<And>p e s' env.\n           \\<lbrakk>(p, e) \\<in> set (a # pes);\n            clock s' \\<le> clock s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s'' r.\n                                evaluate True env s' e (s'', r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' r.\n                            evaluate_match True env s v (a # pes) v' (s', r)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v [] v' (s', r)", "by (metis mat_empty)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_match True env s v [] v' (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>a pes env s.\n       \\<lbrakk>\\<And>env s.\n                   (\\<And>p e s' env.\n                       \\<lbrakk>(p, e) \\<in> set pes;\n                        clock s' \\<le> clock s\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>s'' r.\n      evaluate True env s' e (s'', r)) \\<Longrightarrow>\n                   \\<exists>s' r.\n                      evaluate_match True env s v pes v' (s', r);\n        \\<And>p e s' env.\n           \\<lbrakk>(p, e) \\<in> set (a # pes);\n            clock s' \\<le> clock s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s'' r.\n                                evaluate True env s' e (s'', r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' r.\n                            evaluate_match True env s v (a # pes) v' (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a pes env s.\n       \\<lbrakk>\\<And>env s.\n                   (\\<And>p e s' env.\n                       \\<lbrakk>(p, e) \\<in> set pes;\n                        clock s' \\<le> clock s\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>s'' r.\n      evaluate True env s' e (s'', r)) \\<Longrightarrow>\n                   \\<exists>s' r.\n                      evaluate_match True env s v pes v' (s', r);\n        \\<And>p e s' env.\n           \\<lbrakk>(p, e) \\<in> set (a # pes);\n            clock s' \\<le> clock s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s'' r.\n                                evaluate True env s' e (s'', r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' r.\n                            evaluate_match True env s v (a # pes) v' (s', r)", "case (Cons pe pes)"], ["proof (state)\nthis:\n  (\\<And>p e s' env.\n      \\<lbrakk>(p, e) \\<in> set pes; clock s' \\<le> clock ?s\\<rbrakk>\n      \\<Longrightarrow> \\<exists>s'' r.\n                           evaluate True env s' e\n                            (s'', r)) \\<Longrightarrow>\n  \\<exists>s' r. evaluate_match True ?env ?s v pes v' (s', r)\n  \\<lbrakk>(?p, ?e) \\<in> set (pe # pes); clock ?s' \\<le> clock s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s'' r. evaluate True ?env ?s' ?e (s'', r)\n\ngoal (1 subgoal):\n 1. \\<And>a pes env s.\n       \\<lbrakk>\\<And>env s.\n                   (\\<And>p e s' env.\n                       \\<lbrakk>(p, e) \\<in> set pes;\n                        clock s' \\<le> clock s\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>s'' r.\n      evaluate True env s' e (s'', r)) \\<Longrightarrow>\n                   \\<exists>s' r.\n                      evaluate_match True env s v pes v' (s', r);\n        \\<And>p e s' env.\n           \\<lbrakk>(p, e) \\<in> set (a # pes);\n            clock s' \\<le> clock s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s'' r.\n                                evaluate True env s' e (s'', r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' r.\n                            evaluate_match True env s v (a # pes) v' (s', r)", "then"], ["proof (chain)\npicking this:\n  (\\<And>p e s' env.\n      \\<lbrakk>(p, e) \\<in> set pes; clock s' \\<le> clock ?s\\<rbrakk>\n      \\<Longrightarrow> \\<exists>s'' r.\n                           evaluate True env s' e\n                            (s'', r)) \\<Longrightarrow>\n  \\<exists>s' r. evaluate_match True ?env ?s v pes v' (s', r)\n  \\<lbrakk>(?p, ?e) \\<in> set (pe # pes); clock ?s' \\<le> clock s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s'' r. evaluate True ?env ?s' ?e (s'', r)", "obtain p e where \"pe = (p, e)\""], ["proof (prove)\nusing this:\n  (\\<And>p e s' env.\n      \\<lbrakk>(p, e) \\<in> set pes; clock s' \\<le> clock ?s\\<rbrakk>\n      \\<Longrightarrow> \\<exists>s'' r.\n                           evaluate True env s' e\n                            (s'', r)) \\<Longrightarrow>\n  \\<exists>s' r. evaluate_match True ?env ?s v pes v' (s', r)\n  \\<lbrakk>(?p, ?e) \\<in> set (pe # pes); clock ?s' \\<le> clock s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s'' r. evaluate True ?env ?s' ?e (s'', r)\n\ngoal (1 subgoal):\n 1. (\\<And>p e. pe = (p, e) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  pe = (p, e)\n\ngoal (1 subgoal):\n 1. \\<And>a pes env s.\n       \\<lbrakk>\\<And>env s.\n                   (\\<And>p e s' env.\n                       \\<lbrakk>(p, e) \\<in> set pes;\n                        clock s' \\<le> clock s\\<rbrakk>\n                       \\<Longrightarrow> \\<exists>s'' r.\n      evaluate True env s' e (s'', r)) \\<Longrightarrow>\n                   \\<exists>s' r.\n                      evaluate_match True env s v pes v' (s', r);\n        \\<And>p e s' env.\n           \\<lbrakk>(p, e) \\<in> set (a # pes);\n            clock s' \\<le> clock s\\<rbrakk>\n           \\<Longrightarrow> \\<exists>s'' r.\n                                evaluate True env s' e (s'', r)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' r.\n                            evaluate_match True env s v (a # pes) v' (s', r)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "proof (cases \"allDistinct (pat_bindings p [])\")"], ["proof (state)\ngoal (2 subgoals):\n 1. allDistinct (pat_bindings p []) \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 2. \\<not> allDistinct (pat_bindings p []) \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "case distinct: True"], ["proof (state)\nthis:\n  allDistinct (pat_bindings p [])\n\ngoal (2 subgoals):\n 1. allDistinct (pat_bindings p []) \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 2. \\<not> allDistinct (pat_bindings p []) \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "proof (cases \"pmatch (c env) (refs s) p v []\")"], ["proof (state)\ngoal (3 subgoals):\n 1. pmatch (c env) (refs s) p v [] = No_match \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 2. pmatch (c env) (refs s) p v [] = Match_type_error \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 3. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "case No_match"], ["proof (state)\nthis:\n  pmatch (c env) (refs s) p v [] = No_match\n\ngoal (3 subgoals):\n 1. pmatch (c env) (refs s) p v [] = No_match \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 2. pmatch (c env) (refs s) p v [] = Match_type_error \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 3. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "have \"\\<exists>s' r. evaluate_match True env s v pes v' (s', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v pes v' (s', r)", "apply (rule Cons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p e s' env.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s' \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s'' r. evaluate True env s' e (s'', r)", "apply (rule Cons)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p e s' env.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s' \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> (?p2 p e s' env, e) \\<in> set (pe # pes)\n 2. \\<And>p e s' env.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s' \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> clock s' \\<le> clock s", "by auto"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_match True env s v pes v' (s', r)\n\ngoal (3 subgoals):\n 1. pmatch (c env) (refs s) p v [] = No_match \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 2. pmatch (c env) (refs s) p v [] = Match_type_error \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 3. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s' r. evaluate_match True env s v pes v' (s', r)", "obtain s' r where \"evaluate_match True env s v pes v' (s', r)\""], ["proof (prove)\nusing this:\n  \\<exists>s' r. evaluate_match True env s v pes v' (s', r)\n\ngoal (1 subgoal):\n 1. (\\<And>s' r.\n        evaluate_match True env s v pes v' (s', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  evaluate_match True env s v pes v' (s', r)\n\ngoal (3 subgoals):\n 1. pmatch (c env) (refs s) p v [] = No_match \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 2. pmatch (c env) (refs s) p v [] = Match_type_error \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 3. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "unfolding \\<open>pe = _\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v ((p, e) # pes) v' (s', r)", "apply (intro exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate_match True env s v ((p, e) # pes) v' (?s', ?r1)", "apply (rule mat_cons2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. allDistinct (pat_bindings p []) \\<and>\n    pmatch (c env) (refs s) p v [] = No_match \\<and>\n    evaluate_match True env s v pes v' (?s', ?r1)", "apply safe"], ["proof (prove)\ngoal (3 subgoals):\n 1. allDistinct (pat_bindings p [])\n 2. pmatch (c env) (refs s) p v [] = No_match\n 3. evaluate_match True env s v pes v' (?s', ?r1)", "by fact+"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n\ngoal (2 subgoals):\n 1. pmatch (c env) (refs s) p v [] = Match_type_error \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 2. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. pmatch (c env) (refs s) p v [] = Match_type_error \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 2. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "case Match_type_error"], ["proof (state)\nthis:\n  pmatch (c env) (refs s) p v [] = Match_type_error\n\ngoal (2 subgoals):\n 1. pmatch (c env) (refs s) p v [] = Match_type_error \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 2. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "then"], ["proof (chain)\npicking this:\n  pmatch (c env) (refs s) p v [] = Match_type_error", "show ?thesis"], ["proof (prove)\nusing this:\n  pmatch (c env) (refs s) p v [] = Match_type_error\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "unfolding \\<open>pe = _\\<close>"], ["proof (prove)\nusing this:\n  pmatch (c env) (refs s) p v [] = Match_type_error\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v ((p, e) # pes) v' (s', r)", "by (metis mat_cons3)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "case (Match env')"], ["proof (state)\nthis:\n  pmatch (c env) (refs s) p v [] = Match env'\n\ngoal (1 subgoal):\n 1. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "have \"\\<exists>s' r. evaluate True (env \\<lparr> sem_env.v := (nsAppend (alist_to_ns env') (sem_env.v env)) \\<rparr>) s e (s', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r.\n       evaluate True\n        (update_v (\\<lambda>_. nsAppend (alist_to_ns env') (sem_env.v env))\n          env)\n        s e (s', r)", "apply (rule Cons)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (?p, e) \\<in> set (pe # pes)\n 2. clock s \\<le> clock s", "unfolding \\<open>pe = _\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. (?p, e) \\<in> set ((p, e) # pes)\n 2. clock s \\<le> clock s", "by auto"], ["proof (state)\nthis:\n  \\<exists>s' r.\n     evaluate True\n      (update_v (\\<lambda>_. nsAppend (alist_to_ns env') (sem_env.v env))\n        env)\n      s e (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s' r.\n     evaluate True\n      (update_v (\\<lambda>_. nsAppend (alist_to_ns env') (sem_env.v env))\n        env)\n      s e (s', r)", "obtain s' r where \"evaluate True (env \\<lparr> sem_env.v := (nsAppend (alist_to_ns env') (sem_env.v env)) \\<rparr>) s e (s', r)\""], ["proof (prove)\nusing this:\n  \\<exists>s' r.\n     evaluate True\n      (update_v (\\<lambda>_. nsAppend (alist_to_ns env') (sem_env.v env))\n        env)\n      s e (s', r)\n\ngoal (1 subgoal):\n 1. (\\<And>s' r.\n        evaluate True\n         (update_v (\\<lambda>_. nsAppend (alist_to_ns env') (sem_env.v env))\n           env)\n         s e (s', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  evaluate True\n   (update_v (\\<lambda>_. nsAppend (alist_to_ns env') (sem_env.v env)) env)\n   s e (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "unfolding \\<open>pe = _\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v ((p, e) # pes) v' (s', r)", "apply (intro exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate_match True env s v ((p, e) # pes) v' (?s', ?r1)", "apply (rule mat_cons1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. allDistinct (pat_bindings p []) \\<and>\n    pmatch (c env) (refs s) p v [] = Match ?env'2 \\<and>\n    evaluate True\n     (update_v (\\<lambda>_. nsAppend (alist_to_ns ?env'2) (sem_env.v env))\n       env)\n     s e (?s', ?r1)", "apply safe"], ["proof (prove)\ngoal (3 subgoals):\n 1. allDistinct (pat_bindings p [])\n 2. pmatch (c env) (refs s) p v [] = Match ?env'2\n 3. evaluate True\n     (update_v (\\<lambda>_. nsAppend (alist_to_ns ?env'2) (sem_env.v env))\n       env)\n     s e (?s', ?r1)", "apply fact+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n\ngoal (1 subgoal):\n 1. \\<not> allDistinct (pat_bindings p []) \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> allDistinct (pat_bindings p []) \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "case False"], ["proof (state)\nthis:\n  \\<not> allDistinct (pat_bindings p [])\n\ngoal (1 subgoal):\n 1. \\<not> allDistinct (pat_bindings p []) \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<not> allDistinct (pat_bindings p [])", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> allDistinct (pat_bindings p [])\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "unfolding \\<open>pe = _\\<close>"], ["proof (prove)\nusing this:\n  \\<not> allDistinct (pat_bindings p [])\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v ((p, e) # pes) v' (s', r)", "by (metis mat_cons4)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma evaluate_total: \"\\<exists>s' r. evaluate True env s e (s', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "have \"wf (less_than <*lex*> measure (size::exp \\<Rightarrow> nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (less_than <*lex*> measure size)", "by auto"], ["proof (state)\nthis:\n  wf (less_than <*lex*> measure size)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  wf (less_than <*lex*> measure size)", "show ?thesis"], ["proof (prove)\nusing this:\n  wf (less_than <*lex*> measure size)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "proof (induction \"(clock s, e)\" arbitrary: env s e)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s e env.\n       (\\<And>sa ea env.\n           ((clock sa, ea), clock s, e)\n           \\<in> less_than <*lex*> measure size \\<Longrightarrow>\n           \\<exists>s' r. evaluate True env sa ea (s', r)) \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case less"], ["proof (state)\nthis:\n  ((clock ?s, ?e), clock s, e)\n  \\<in> less_than <*lex*> measure size \\<Longrightarrow>\n  \\<exists>s' r. evaluate True ?env ?s ?e (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>s e env.\n       (\\<And>sa ea env.\n           ((clock sa, ea), clock s, e)\n           \\<in> less_than <*lex*> measure size \\<Longrightarrow>\n           \\<exists>s' r. evaluate True env sa ea (s', r)) \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "proof (cases e)"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>x1.\n       e = Raise x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x41 x42.\n       e = Con x41 x42 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x5.\n       e = Var x5 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x71 x72.\n       e = App x71 x72 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x101 x102.\n        e = Mat x101 x102 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)\nA total of 14 subgoals...", "case (Raise e')"], ["proof (state)\nthis:\n  e = Raise e'\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       e = Raise x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x41 x42.\n       e = Con x41 x42 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x5.\n       e = Var x5 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x71 x72.\n       e = App x71 x72 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x101 x102.\n        e = Mat x101 x102 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)\nA total of 14 subgoals...", "then"], ["proof (chain)\npicking this:\n  e = Raise e'", "have \"\\<exists>s' r. evaluate True env s e' (s', r)\""], ["proof (prove)\nusing this:\n  e = Raise e'\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e' (s', r)", "using less"], ["proof (prove)\nusing this:\n  e = Raise e'\n  ((clock ?s, ?e), clock s, e)\n  \\<in> less_than <*lex*> measure size \\<Longrightarrow>\n  \\<exists>s' r. evaluate True ?env ?s ?e (s', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e' (s', r)", "by auto"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e' (s', r)\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       e = Raise x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x41 x42.\n       e = Con x41 x42 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x5.\n       e = Var x5 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x71 x72.\n       e = App x71 x72 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x101 x102.\n        e = Mat x101 x102 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)\nA total of 14 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<exists>s' r. evaluate True env s e' (s', r)", "obtain s' r where \"evaluate True env s e' (s', r)\""], ["proof (prove)\nusing this:\n  \\<exists>s' r. evaluate True env s e' (s', r)\n\ngoal (1 subgoal):\n 1. (\\<And>s' r.\n        evaluate True env s e' (s', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  evaluate True env s e' (s', r)\n\ngoal (14 subgoals):\n 1. \\<And>x1.\n       e = Raise x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x41 x42.\n       e = Con x41 x42 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x5.\n       e = Var x5 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x71 x72.\n       e = App x71 x72 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x101 x102.\n        e = Mat x101 x102 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)\nA total of 14 subgoals...", "then"], ["proof (chain)\npicking this:\n  evaluate True env s e' (s', r)", "show ?thesis"], ["proof (prove)\nusing this:\n  evaluate True env s e' (s', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding Raise"], ["proof (prove)\nusing this:\n  evaluate True env s e' (s', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (Raise e') (s', r)", "by (cases r) (metis raise1 raise2)+"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (13 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x41 x42.\n       e = Con x41 x42 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x5.\n       e = Var x5 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x71 x72.\n       e = App x71 x72 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x111 x112 x113.\n        e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x41 x42.\n       e = Con x41 x42 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x5.\n       e = Var x5 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x71 x72.\n       e = App x71 x72 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x111 x112 x113.\n        e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)\nA total of 13 subgoals...", "case (Con cn es)"], ["proof (state)\nthis:\n  e = Con cn es\n\ngoal (13 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x41 x42.\n       e = Con x41 x42 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x5.\n       e = Var x5 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x71 x72.\n       e = App x71 x72 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x111 x112 x113.\n        e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)\nA total of 13 subgoals...", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "proof (cases \"do_con_check (c env) cn (length es)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. do_con_check (c env) cn (length es) \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<not> do_con_check (c env) cn (length es) \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "case True"], ["proof (state)\nthis:\n  do_con_check (c env) cn (length es)\n\ngoal (2 subgoals):\n 1. do_con_check (c env) cn (length es) \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<not> do_con_check (c env) cn (length es) \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "have \"\\<exists>s' vs. evaluate_list True env s (rev es) (s', vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' vs. evaluate_list True env s (rev es) (s', vs)", "apply (rule evaluate_list_total0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e env s'.\n       \\<lbrakk>e \\<in> set (rev es); clock s' \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s'' vs. evaluate True env s' e (s'', vs)", "apply (rule less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e env s'.\n       \\<lbrakk>e \\<in> set (rev es); clock s' \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> ((clock s', e), clock s, e)\n                         \\<in> less_than <*lex*> measure size", "unfolding Con"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e env s'.\n       \\<lbrakk>e \\<in> set (rev es); clock s' \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> ((clock s', e), clock s, Con cn es)\n                         \\<in> less_than <*lex*> measure size", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e s'.\n       \\<lbrakk>e \\<in> set es; clock s' = clock s\\<rbrakk>\n       \\<Longrightarrow> size e < Suc (size_list size es)", "using Con"], ["proof (prove)\nusing this:\n  e = Con cn es\n\ngoal (1 subgoal):\n 1. \\<And>e s'.\n       \\<lbrakk>e \\<in> set es; clock s' = clock s\\<rbrakk>\n       \\<Longrightarrow> size e < Suc (size_list size es)", "apply (auto simp: less_eq_Suc_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e s'.\n       \\<lbrakk>e \\<in> set es; clock s' = clock s; e = Con cn es\\<rbrakk>\n       \\<Longrightarrow> size e \\<le> size_list size es", "apply (rule size_list_estimation')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>e s'.\n       \\<lbrakk>e \\<in> set es; clock s' = clock s; e = Con cn es\\<rbrakk>\n       \\<Longrightarrow> ?x10 e s' \\<in> set es\n 2. \\<And>e s'.\n       \\<lbrakk>e \\<in> set es; clock s' = clock s; e = Con cn es\\<rbrakk>\n       \\<Longrightarrow> size e \\<le> size (?x10 e s')", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e s'.\n       \\<lbrakk>e \\<in> set es; clock s' = clock s; e = Con cn es\\<rbrakk>\n       \\<Longrightarrow> size e \\<le> size e", "by simp"], ["proof (state)\nthis:\n  \\<exists>s' vs. evaluate_list True env s (rev es) (s', vs)\n\ngoal (2 subgoals):\n 1. do_con_check (c env) cn (length es) \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<not> do_con_check (c env) cn (length es) \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s' vs. evaluate_list True env s (rev es) (s', vs)", "obtain r s' where es: \"evaluate_list True env s (rev es) (s', r)\""], ["proof (prove)\nusing this:\n  \\<exists>s' vs. evaluate_list True env s (rev es) (s', vs)\n\ngoal (1 subgoal):\n 1. (\\<And>s' r.\n        evaluate_list True env s (rev es) (s', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  evaluate_list True env s (rev es) (s', r)\n\ngoal (2 subgoals):\n 1. do_con_check (c env) cn (length es) \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<not> do_con_check (c env) cn (length es) \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "proof (cases r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case (Rval vs)"], ["proof (state)\nthis:\n  r = Rval vs\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "moreover"], ["proof (state)\nthis:\n  r = Rval vs\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "obtain v where \"build_conv (c env) cn (rev vs) = Some v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v.\n        build_conv (c env) cn (rev vs) = Some v \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using True"], ["proof (prove)\nusing this:\n  do_con_check (c env) cn (length es)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        build_conv (c env) cn (rev vs) = Some v \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases cn) (auto split: option.splits)"], ["proof (state)\nthis:\n  build_conv (c env) cn (rev vs) = Some v\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "ultimately"], ["proof (chain)\npicking this:\n  r = Rval vs\n  build_conv (c env) cn (rev vs) = Some v", "show ?thesis"], ["proof (prove)\nusing this:\n  r = Rval vs\n  build_conv (c env) cn (rev vs) = Some v\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "using True es"], ["proof (prove)\nusing this:\n  r = Rval vs\n  build_conv (c env) cn (rev vs) = Some v\n  do_con_check (c env) cn (length es)\n  evaluate_list True env s (rev es) (s', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding Con"], ["proof (prove)\nusing this:\n  r = Rval vs\n  build_conv (c env) cn (rev vs) = Some v\n  do_con_check (c env) cn (length es)\n  evaluate_list True env s (rev es) (s', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (Con cn es) (s', r)", "by (metis con1)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case Rerr"], ["proof (state)\nthis:\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "with True es"], ["proof (chain)\npicking this:\n  do_con_check (c env) cn (length es)\n  evaluate_list True env s (rev es) (s', r)\n  r = Rerr x2_", "show ?thesis"], ["proof (prove)\nusing this:\n  do_con_check (c env) cn (length es)\n  evaluate_list True env s (rev es) (s', r)\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding Con"], ["proof (prove)\nusing this:\n  do_con_check (c env) cn (length es)\n  evaluate_list True env s (rev es) (s', r)\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (Con cn es) (s', r)", "by (metis con3)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (1 subgoal):\n 1. \\<not> do_con_check (c env) cn (length es) \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> do_con_check (c env) cn (length es) \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "case False"], ["proof (state)\nthis:\n  \\<not> do_con_check (c env) cn (length es)\n\ngoal (1 subgoal):\n 1. \\<not> do_con_check (c env) cn (length es) \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "with Con"], ["proof (chain)\npicking this:\n  e = Con cn es\n  \\<not> do_con_check (c env) cn (length es)", "show ?thesis"], ["proof (prove)\nusing this:\n  e = Con cn es\n  \\<not> do_con_check (c env) cn (length es)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "by (metis con2)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (12 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x5.\n       e = Var x5 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x71 x72.\n       e = App x71 x72 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x121 x122.\n        e = Letrec x121 x122 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x5.\n       e = Var x5 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x71 x72.\n       e = App x71 x72 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x121 x122.\n        e = Letrec x121 x122 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)\nA total of 12 subgoals...", "case (Var n)"], ["proof (state)\nthis:\n  e = Var n\n\ngoal (12 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x5.\n       e = Var x5 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x71 x72.\n       e = App x71 x72 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x121 x122.\n        e = Letrec x121 x122 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)\nA total of 12 subgoals...", "then"], ["proof (chain)\npicking this:\n  e = Var n", "show ?thesis"], ["proof (prove)\nusing this:\n  e = Var n\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "by (cases \"nsLookup (sem_env.v env) n\") (metis var1 var2)+"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (11 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x71 x72.\n       e = App x71 x72 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x131 x132.\n        e = Tannot x131 x132 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x71 x72.\n       e = App x71 x72 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x131 x132.\n        e = Tannot x131 x132 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)\nA total of 11 subgoals...", "case (App op es)"], ["proof (state)\nthis:\n  e = App op es\n\ngoal (11 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x71 x72.\n       e = App x71 x72 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x131 x132.\n        e = Tannot x131 x132 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)\nA total of 11 subgoals...", "have \"\\<exists>s' vs. evaluate_list True env s (rev es) (s', vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' vs. evaluate_list True env s (rev es) (s', vs)", "apply (rule evaluate_list_total0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e env s'.\n       \\<lbrakk>e \\<in> set (rev es); clock s' \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s'' vs. evaluate True env s' e (s'', vs)", "apply (rule less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e env s'.\n       \\<lbrakk>e \\<in> set (rev es); clock s' \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> ((clock s', e), clock s, e)\n                         \\<in> less_than <*lex*> measure size", "unfolding App"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e env s'.\n       \\<lbrakk>e \\<in> set (rev es); clock s' \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> ((clock s', e), clock s, App op es)\n                         \\<in> less_than <*lex*> measure size", "apply (auto simp: less_eq_Suc_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e s'.\n       \\<lbrakk>e \\<in> set es; clock s' \\<le> clock s;\n        \\<not> Suc (clock s') \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> size e \\<le> size_list size es", "apply (rule size_list_estimation')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>e s'.\n       \\<lbrakk>e \\<in> set es; clock s' \\<le> clock s;\n        \\<not> Suc (clock s') \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> ?x11 e s' \\<in> set es\n 2. \\<And>e s'.\n       \\<lbrakk>e \\<in> set es; clock s' \\<le> clock s;\n        \\<not> Suc (clock s') \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> size e \\<le> size (?x11 e s')", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e s'.\n       \\<lbrakk>e \\<in> set es; clock s' \\<le> clock s;\n        \\<not> Suc (clock s') \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> size e \\<le> size e", "by simp"], ["proof (state)\nthis:\n  \\<exists>s' vs. evaluate_list True env s (rev es) (s', vs)\n\ngoal (11 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x71 x72.\n       e = App x71 x72 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x131 x132.\n        e = Tannot x131 x132 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)\nA total of 11 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<exists>s' vs. evaluate_list True env s (rev es) (s', vs)", "obtain r s2 where es: \"evaluate_list True env s (rev es) (s2, r)\""], ["proof (prove)\nusing this:\n  \\<exists>s' vs. evaluate_list True env s (rev es) (s', vs)\n\ngoal (1 subgoal):\n 1. (\\<And>s2 r.\n        evaluate_list True env s (rev es) (s2, r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  evaluate_list True env s (rev es) (s2, r)\n\ngoal (11 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x71 x72.\n       e = App x71 x72 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x131 x132.\n        e = Tannot x131 x132 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)\nA total of 11 subgoals...", "then"], ["proof (chain)\npicking this:\n  evaluate_list True env s (rev es) (s2, r)", "have clock: \"clock s2 \\<le> clock s\""], ["proof (prove)\nusing this:\n  evaluate_list True env s (rev es) (s2, r)\n\ngoal (1 subgoal):\n 1. clock s2 \\<le> clock s", "by (metis evaluate_clock_mono)"], ["proof (state)\nthis:\n  clock s2 \\<le> clock s\n\ngoal (11 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x71 x72.\n       e = App x71 x72 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x131 x132.\n        e = Tannot x131 x132 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)\nA total of 11 subgoals...", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "proof (cases r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case (Rval vs)"], ["proof (state)\nthis:\n  r = Rval vs\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "proof (cases \"op = Opapp\")"], ["proof (state)\ngoal (2 subgoals):\n 1. op = Opapp \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 2. op \\<noteq> Opapp \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "case opapp: True"], ["proof (state)\nthis:\n  op = Opapp\n\ngoal (2 subgoals):\n 1. op = Opapp \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 2. op \\<noteq> Opapp \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "proof (cases \"do_opapp (rev vs)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. do_opapp (rev vs) = None \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>a.\n       do_opapp (rev vs) = Some a \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case None"], ["proof (state)\nthis:\n  do_opapp (rev vs) = None\n\ngoal (2 subgoals):\n 1. do_opapp (rev vs) = None \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>a.\n       do_opapp (rev vs) = Some a \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "with App opapp Rval es"], ["proof (chain)\npicking this:\n  e = App op es\n  op = Opapp\n  r = Rval vs\n  evaluate_list True env s (rev es) (s2, r)\n  do_opapp (rev vs) = None", "show ?thesis"], ["proof (prove)\nusing this:\n  e = App op es\n  op = Opapp\n  r = Rval vs\n  evaluate_list True env s (rev es) (s2, r)\n  do_opapp (rev vs) = None\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "by (metis app3)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       do_opapp (rev vs) = Some a \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       do_opapp (rev vs) = Some a \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case (Some r)"], ["proof (state)\nthis:\n  do_opapp (rev vs) = Some r\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       do_opapp (rev vs) = Some a \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "obtain env' e' where \"r = (env', e')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>env' e'.\n        r = (env', e') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  r = (env', e')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       do_opapp (rev vs) = Some a \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "proof (cases \"clock s2 = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. clock s2 = 0 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 2. clock s2 \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "case True"], ["proof (state)\nthis:\n  clock s2 = 0\n\ngoal (2 subgoals):\n 1. clock s2 = 0 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 2. clock s2 \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding \\<open>op = _\\<close> App"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (App Opapp es) (s', r)", "apply (intro exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate True env s (App Opapp es) (?s', ?r1)", "apply (rule app2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate_list True env s (rev es) (?s', Rval ?vs2) \\<and>\n    do_opapp (rev ?vs2) = Some (?env'2, ?e2) \\<and>\n    clock ?s' = 0 \\<and> True", "apply (intro conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. evaluate_list True env s (rev es) (?s', Rval ?vs2)\n 2. do_opapp (rev ?vs2) = Some (?env'2, ?e2)\n 3. clock ?s' = 0\n 4. True", "using es"], ["proof (prove)\nusing this:\n  evaluate_list True env s (rev es) (s2, r__)\n\ngoal (4 subgoals):\n 1. evaluate_list True env s (rev es) (?s', Rval ?vs2)\n 2. do_opapp (rev ?vs2) = Some (?env'2, ?e2)\n 3. clock ?s' = 0\n 4. True", "unfolding Rval"], ["proof (prove)\nusing this:\n  evaluate_list True env s (rev es) (s2, Rval vs)\n\ngoal (4 subgoals):\n 1. evaluate_list True env s (rev es) (?s', Rval ?vs2)\n 2. do_opapp (rev ?vs2) = Some (?env'2, ?e2)\n 3. clock ?s' = 0\n 4. True", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. do_opapp (rev vs) = Some (?env'2, ?e2)\n 2. clock s2 = 0\n 3. True", "using Some"], ["proof (prove)\nusing this:\n  do_opapp (rev vs) = Some r\n\ngoal (3 subgoals):\n 1. do_opapp (rev vs) = Some (?env'2, ?e2)\n 2. clock s2 = 0\n 3. True", "unfolding \\<open>r = _\\<close>"], ["proof (prove)\nusing this:\n  do_opapp (rev vs) = Some (env', e')\n\ngoal (3 subgoals):\n 1. do_opapp (rev vs) = Some (?env'2, ?e2)\n 2. clock s2 = 0\n 3. True", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. clock s2 = 0\n 2. True", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. True", ".."], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (1 subgoal):\n 1. clock s2 \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. clock s2 \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "case False"], ["proof (state)\nthis:\n  clock s2 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. clock s2 \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "have \"\\<exists>s' r. evaluate True env' (s2 \\<lparr> clock := clock s2 - Suc 0 \\<rparr>) e' (s', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r.\n       evaluate True env' (update_clock (\\<lambda>_. clock s2 - Suc 0) s2)\n        e' (s', r)", "apply (rule less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((clock (update_clock (\\<lambda>_. clock s2 - Suc 0) s2), e'), clock s,\n     e)\n    \\<in> less_than <*lex*> measure size", "using False clock"], ["proof (prove)\nusing this:\n  clock s2 \\<noteq> 0\n  clock s2 \\<le> clock s\n\ngoal (1 subgoal):\n 1. ((clock (update_clock (\\<lambda>_. clock s2 - Suc 0) s2), e'), clock s,\n     e)\n    \\<in> less_than <*lex*> measure size", "by (auto simp: datatype_record_update split: state.splits)"], ["proof (state)\nthis:\n  \\<exists>s' r.\n     evaluate True env' (update_clock (\\<lambda>_. clock s2 - Suc 0) s2) e'\n      (s', r)\n\ngoal (1 subgoal):\n 1. clock s2 \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s' r.\n     evaluate True env' (update_clock (\\<lambda>_. clock s2 - Suc 0) s2) e'\n      (s', r)", "obtain s' r' where \"evaluate True env' (s2 \\<lparr> clock := clock s2 - Suc 0 \\<rparr>) e' (s', r')\""], ["proof (prove)\nusing this:\n  \\<exists>s' r.\n     evaluate True env' (update_clock (\\<lambda>_. clock s2 - Suc 0) s2) e'\n      (s', r)\n\ngoal (1 subgoal):\n 1. (\\<And>s' r'.\n        evaluate True env' (update_clock (\\<lambda>_. clock s2 - Suc 0) s2)\n         e' (s', r') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  evaluate True env' (update_clock (\\<lambda>_. clock s2 - Suc 0) s2) e'\n   (s', r')\n\ngoal (1 subgoal):\n 1. clock s2 \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding \\<open>op = _\\<close> App"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (App Opapp es) (s', r)", "apply (intro exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate True env s (App Opapp es) (?s', ?r1)", "apply (rule app1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate_list True env s (rev es) (?s2.2, Rval ?vs2) \\<and>\n    do_opapp (rev ?vs2) = Some (?env'2, ?e2) \\<and>\n    (True \\<longrightarrow> clock ?s2.2 \\<noteq> 0) \\<and>\n    evaluate True ?env'2\n     (if True then update_clock (\\<lambda>_. clock ?s2.2 - 1) ?s2.2\n      else ?s2.2)\n     ?e2 (?s', ?r1)", "apply (intro conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. evaluate_list True env s (rev es) (?s2.2, Rval ?vs2)\n 2. do_opapp (rev ?vs2) = Some (?env'2, ?e2)\n 3. True \\<longrightarrow> clock ?s2.2 \\<noteq> 0\n 4. evaluate True ?env'2\n     (if True then update_clock (\\<lambda>_. clock ?s2.2 - 1) ?s2.2\n      else ?s2.2)\n     ?e2 (?s', ?r1)", "using es"], ["proof (prove)\nusing this:\n  evaluate_list True env s (rev es) (s2, r__)\n\ngoal (4 subgoals):\n 1. evaluate_list True env s (rev es) (?s2.2, Rval ?vs2)\n 2. do_opapp (rev ?vs2) = Some (?env'2, ?e2)\n 3. True \\<longrightarrow> clock ?s2.2 \\<noteq> 0\n 4. evaluate True ?env'2\n     (if True then update_clock (\\<lambda>_. clock ?s2.2 - 1) ?s2.2\n      else ?s2.2)\n     ?e2 (?s', ?r1)", "unfolding Rval"], ["proof (prove)\nusing this:\n  evaluate_list True env s (rev es) (s2, Rval vs)\n\ngoal (4 subgoals):\n 1. evaluate_list True env s (rev es) (?s2.2, Rval ?vs2)\n 2. do_opapp (rev ?vs2) = Some (?env'2, ?e2)\n 3. True \\<longrightarrow> clock ?s2.2 \\<noteq> 0\n 4. evaluate True ?env'2\n     (if True then update_clock (\\<lambda>_. clock ?s2.2 - 1) ?s2.2\n      else ?s2.2)\n     ?e2 (?s', ?r1)", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. do_opapp (rev vs) = Some (?env'2, ?e2)\n 2. True \\<longrightarrow> clock s2 \\<noteq> 0\n 3. evaluate True ?env'2\n     (if True then update_clock (\\<lambda>_. clock s2 - 1) s2 else s2) ?e2\n     (?s', ?r1)", "using Some"], ["proof (prove)\nusing this:\n  do_opapp (rev vs) = Some r\n\ngoal (3 subgoals):\n 1. do_opapp (rev vs) = Some (?env'2, ?e2)\n 2. True \\<longrightarrow> clock s2 \\<noteq> 0\n 3. evaluate True ?env'2\n     (if True then update_clock (\\<lambda>_. clock s2 - 1) s2 else s2) ?e2\n     (?s', ?r1)", "unfolding \\<open>r = _\\<close>"], ["proof (prove)\nusing this:\n  do_opapp (rev vs) = Some (env', e')\n\ngoal (3 subgoals):\n 1. do_opapp (rev vs) = Some (?env'2, ?e2)\n 2. True \\<longrightarrow> clock s2 \\<noteq> 0\n 3. evaluate True ?env'2\n     (if True then update_clock (\\<lambda>_. clock s2 - 1) s2 else s2) ?e2\n     (?s', ?r1)", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. True \\<longrightarrow> clock s2 \\<noteq> 0\n 2. evaluate True env'\n     (if True then update_clock (\\<lambda>_. clock s2 - 1) s2 else s2) e'\n     (?s', ?r1)", "using False"], ["proof (prove)\nusing this:\n  clock s2 \\<noteq> 0\n\ngoal (2 subgoals):\n 1. True \\<longrightarrow> clock s2 \\<noteq> 0\n 2. evaluate True env'\n     (if True then update_clock (\\<lambda>_. clock s2 - 1) s2 else s2) e'\n     (?s', ?r1)", "apply metis"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate True env'\n     (if True then update_clock (\\<lambda>_. clock s2 - 1) s2 else s2) e'\n     (?s', ?r1)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate True env' (update_clock (\\<lambda>_. clock s2 - Suc 0) s2) e'\n     (?s', ?r1)", "apply fact"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (1 subgoal):\n 1. op \\<noteq> Opapp \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. op \\<noteq> Opapp \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "case False"], ["proof (state)\nthis:\n  op \\<noteq> Opapp\n\ngoal (1 subgoal):\n 1. op \\<noteq> Opapp \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "proof (cases \"do_app ((refs   s2),(ffi   s2)) op (rev vs)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. do_app (refs s2, ffi s2) op (rev vs) = None \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>a.\n       do_app (refs s2, ffi s2) op (rev vs) = Some a \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case None"], ["proof (state)\nthis:\n  do_app (refs s2, ffi s2) op (rev vs) = None\n\ngoal (2 subgoals):\n 1. do_app (refs s2, ffi s2) op (rev vs) = None \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>a.\n       do_app (refs s2, ffi s2) op (rev vs) = Some a \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding App"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (App op es) (s', r)", "apply (intro exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate True env s (App op es) (?s', ?r1)", "apply (rule app5)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate_list True env s (rev es) (?s', Rval ?vs2) \\<and>\n    do_app (refs ?s', ffi ?s') op (rev ?vs2) = None \\<and> op \\<noteq> Opapp", "apply (intro conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. evaluate_list True env s (rev es) (?s', Rval ?vs2)\n 2. do_app (refs ?s', ffi ?s') op (rev ?vs2) = None\n 3. op \\<noteq> Opapp", "using es"], ["proof (prove)\nusing this:\n  evaluate_list True env s (rev es) (s2, r)\n\ngoal (3 subgoals):\n 1. evaluate_list True env s (rev es) (?s', Rval ?vs2)\n 2. do_app (refs ?s', ffi ?s') op (rev ?vs2) = None\n 3. op \\<noteq> Opapp", "unfolding Rval"], ["proof (prove)\nusing this:\n  evaluate_list True env s (rev es) (s2, Rval vs)\n\ngoal (3 subgoals):\n 1. evaluate_list True env s (rev es) (?s', Rval ?vs2)\n 2. do_app (refs ?s', ffi ?s') op (rev ?vs2) = None\n 3. op \\<noteq> Opapp", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. do_app (refs s2, ffi s2) op (rev vs) = None\n 2. op \\<noteq> Opapp", "by fact+"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       do_app (refs s2, ffi s2) op (rev vs) = Some a \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       do_app (refs s2, ffi s2) op (rev vs) = Some a \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case (Some r)"], ["proof (state)\nthis:\n  do_app (refs s2, ffi s2) op (rev vs) = Some r\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       do_app (refs s2, ffi s2) op (rev vs) = Some a \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "obtain refs' ffi' res where \"r = ((refs', ffi'), res)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>refs' ffi' res.\n        r = ((refs', ffi'), res) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis surj_pair)"], ["proof (state)\nthis:\n  r = ((refs', ffi'), res)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       do_app (refs s2, ffi s2) op (rev vs) = Some a \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding App"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (App op es) (s', r)", "apply (intro exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate True env s (App op es) (?s', ?r1)", "apply (rule app4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate_list True env s (rev es) (?s2.2, Rval ?vs2) \\<and>\n    do_app (refs ?s2.2, ffi ?s2.2) op (rev ?vs2) =\n    Some ((?refs'2, ?ffi'2), ?r1) \\<and>\n    op \\<noteq> Opapp", "apply (intro conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. evaluate_list True env s (rev es) (?s2.2, Rval ?vs2)\n 2. do_app (refs ?s2.2, ffi ?s2.2) op (rev ?vs2) =\n    Some ((?refs'2, ?ffi'2), ?r1)\n 3. op \\<noteq> Opapp", "using es"], ["proof (prove)\nusing this:\n  evaluate_list True env s (rev es) (s2, r__)\n\ngoal (3 subgoals):\n 1. evaluate_list True env s (rev es) (?s2.2, Rval ?vs2)\n 2. do_app (refs ?s2.2, ffi ?s2.2) op (rev ?vs2) =\n    Some ((?refs'2, ?ffi'2), ?r1)\n 3. op \\<noteq> Opapp", "unfolding Rval"], ["proof (prove)\nusing this:\n  evaluate_list True env s (rev es) (s2, Rval vs)\n\ngoal (3 subgoals):\n 1. evaluate_list True env s (rev es) (?s2.2, Rval ?vs2)\n 2. do_app (refs ?s2.2, ffi ?s2.2) op (rev ?vs2) =\n    Some ((?refs'2, ?ffi'2), ?r1)\n 3. op \\<noteq> Opapp", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. do_app (refs s2, ffi s2) op (rev vs) = Some ((?refs'2, ?ffi'2), ?r1)\n 2. op \\<noteq> Opapp", "using Some"], ["proof (prove)\nusing this:\n  do_app (refs s2, ffi s2) op (rev vs) = Some r\n\ngoal (2 subgoals):\n 1. do_app (refs s2, ffi s2) op (rev vs) = Some ((?refs'2, ?ffi'2), ?r1)\n 2. op \\<noteq> Opapp", "unfolding \\<open>r = _\\<close>"], ["proof (prove)\nusing this:\n  do_app (refs s2, ffi s2) op (rev vs) = Some ((refs', ffi'), res)\n\ngoal (2 subgoals):\n 1. do_app (refs s2, ffi s2) op (rev vs) = Some ((?refs'2, ?ffi'2), ?r1)\n 2. op \\<noteq> Opapp", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. op \\<noteq> Opapp", "by fact"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case Rerr"], ["proof (state)\nthis:\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "with es App"], ["proof (chain)\npicking this:\n  evaluate_list True env s (rev es) (s2, r)\n  e = App op es\n  r = Rerr x2_", "show ?thesis"], ["proof (prove)\nusing this:\n  evaluate_list True env s (rev es) (s2, r)\n  e = App op es\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "by (metis app6)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (10 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x141 x142.\n        e = Lannot x141 x142 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x141 x142.\n        e = Lannot x141 x142 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)", "case (Log op e1 e2)"], ["proof (state)\nthis:\n  e = Log op e1 e2\n\ngoal (10 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x141 x142.\n        e = Lannot x141 x142 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)", "with less"], ["proof (chain)\npicking this:\n  ((clock ?s, ?e), clock s, e)\n  \\<in> less_than <*lex*> measure size \\<Longrightarrow>\n  \\<exists>s' r. evaluate True ?env ?s ?e (s', r)\n  e = Log op e1 e2", "have \"\\<exists>s' r. evaluate True env s e1 (s', r)\""], ["proof (prove)\nusing this:\n  ((clock ?s, ?e), clock s, e)\n  \\<in> less_than <*lex*> measure size \\<Longrightarrow>\n  \\<exists>s' r. evaluate True ?env ?s ?e (s', r)\n  e = Log op e1 e2\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e1 (s', r)", "by simp"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e1 (s', r)\n\ngoal (10 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x141 x142.\n        e = Lannot x141 x142 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s' r. evaluate True env s e1 (s', r)", "obtain s' r where e1: \"evaluate True env s e1 (s', r)\""], ["proof (prove)\nusing this:\n  \\<exists>s' r. evaluate True env s e1 (s', r)\n\ngoal (1 subgoal):\n 1. (\\<And>s' r.\n        evaluate True env s e1 (s', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  evaluate True env s e1 (s', r)\n\ngoal (10 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x141 x142.\n        e = Lannot x141 x142 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  evaluate True env s e1 (s', r)", "have clock: \"clock s' \\<le> clock s\""], ["proof (prove)\nusing this:\n  evaluate True env s e1 (s', r)\n\ngoal (1 subgoal):\n 1. clock s' \\<le> clock s", "by (metis evaluate_clock_mono)"], ["proof (state)\nthis:\n  clock s' \\<le> clock s\n\ngoal (10 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x81 x82 x83.\n       e = Log x81 x82 x83 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 10. \\<And>x141 x142.\n        e = Lannot x141 x142 \\<Longrightarrow>\n        \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "proof (cases r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case (Rval v)"], ["proof (state)\nthis:\n  r = Rval v\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "with e1 Log"], ["proof (chain)\npicking this:\n  evaluate True env s e1 (s', r)\n  e = Log op e1 e2\n  r = Rval v", "show ?thesis"], ["proof (prove)\nusing this:\n  evaluate True env s e1 (s', r)\n  e = Log op e1 e2\n  r = Rval v\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "proof (cases op v e2 rule: do_log_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>evaluate True env s e1 (s', r); e = Log op e1 e2; r = Rval v;\n     do_log op v e2 = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>v'.\n       \\<lbrakk>evaluate True env s e1 (s', r); e = Log op e1 e2;\n        r = Rval v; do_log op v e2 = Some (Val v')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<lbrakk>evaluate True env s e1 (s', r); e = Log op e1 e2; r = Rval v;\n     do_log op v e2 = Some (Exp e2)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s' r. evaluate True env s e (s', r)", "case none"], ["proof (state)\nthis:\n  do_log op v e2 = None\n\ngoal (3 subgoals):\n 1. \\<lbrakk>evaluate True env s e1 (s', r); e = Log op e1 e2; r = Rval v;\n     do_log op v e2 = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>v'.\n       \\<lbrakk>evaluate True env s e1 (s', r); e = Log op e1 e2;\n        r = Rval v; do_log op v e2 = Some (Val v')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<lbrakk>evaluate True env s e1 (s', r); e = Log op e1 e2; r = Rval v;\n     do_log op v e2 = Some (Exp e2)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  do_log op v e2 = None", "show ?thesis"], ["proof (prove)\nusing this:\n  do_log op v e2 = None\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding Log"], ["proof (prove)\nusing this:\n  do_log op v e2 = None\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (Log op e1 e2) (s', r)", "using e1 Rval"], ["proof (prove)\nusing this:\n  do_log op v e2 = None\n  evaluate True env s e1 (s', r)\n  r = Rval v\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (Log op e1 e2) (s', r)", "by (metis log3)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (2 subgoals):\n 1. \\<And>v'.\n       \\<lbrakk>evaluate True env s e1 (s', r); e = Log op e1 e2;\n        r = Rval v; do_log op v e2 = Some (Val v')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<lbrakk>evaluate True env s e1 (s', r); e = Log op e1 e2; r = Rval v;\n     do_log op v e2 = Some (Exp e2)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v'.\n       \\<lbrakk>evaluate True env s e1 (s', r); e = Log op e1 e2;\n        r = Rval v; do_log op v e2 = Some (Val v')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<lbrakk>evaluate True env s e1 (s', r); e = Log op e1 e2; r = Rval v;\n     do_log op v e2 = Some (Exp e2)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s' r. evaluate True env s e (s', r)", "case val"], ["proof (state)\nthis:\n  do_log op v e2 = Some (Val v'_)\n\ngoal (2 subgoals):\n 1. \\<And>v'.\n       \\<lbrakk>evaluate True env s e1 (s', r); e = Log op e1 e2;\n        r = Rval v; do_log op v e2 = Some (Val v')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<lbrakk>evaluate True env s e1 (s', r); e = Log op e1 e2; r = Rval v;\n     do_log op v e2 = Some (Exp e2)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  do_log op v e2 = Some (Val v'_)", "show ?thesis"], ["proof (prove)\nusing this:\n  do_log op v e2 = Some (Val v'_)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding Log"], ["proof (prove)\nusing this:\n  do_log op v e2 = Some (Val v'_)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (Log op e1 e2) (s', r)", "using e1 Rval"], ["proof (prove)\nusing this:\n  do_log op v e2 = Some (Val v'_)\n  evaluate True env s e1 (s', r)\n  r = Rval v\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (Log op e1 e2) (s', r)", "by (metis log2)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>evaluate True env s e1 (s', r); e = Log op e1 e2; r = Rval v;\n     do_log op v e2 = Some (Exp e2)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>evaluate True env s e1 (s', r); e = Log op e1 e2; r = Rval v;\n     do_log op v e2 = Some (Exp e2)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s' r. evaluate True env s e (s', r)", "case exp"], ["proof (state)\nthis:\n  do_log op v e2 = Some (Exp e2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>evaluate True env s e1 (s', r); e = Log op e1 e2; r = Rval v;\n     do_log op v e2 = Some (Exp e2)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s' r. evaluate True env s e (s', r)", "have \"\\<exists>s'' r. evaluate True env s' e2 (s'', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s'' r. evaluate True env s' e2 (s'', r)", "apply (rule less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((clock s', e2), clock s, e) \\<in> less_than <*lex*> measure size", "using clock Log"], ["proof (prove)\nusing this:\n  clock s' \\<le> clock s\n  e = Log op e1 e2\n\ngoal (1 subgoal):\n 1. ((clock s', e2), clock s, e) \\<in> less_than <*lex*> measure size", "by auto"], ["proof (state)\nthis:\n  \\<exists>s'' r. evaluate True env s' e2 (s'', r)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>evaluate True env s e1 (s', r); e = Log op e1 e2; r = Rval v;\n     do_log op v e2 = Some (Exp e2)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s'' r. evaluate True env s' e2 (s'', r)", "obtain s'' r where \"evaluate True env s' e2 (s'', r)\""], ["proof (prove)\nusing this:\n  \\<exists>s'' r. evaluate True env s' e2 (s'', r)\n\ngoal (1 subgoal):\n 1. (\\<And>s'' r.\n        evaluate True env s' e2 (s'', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  evaluate True env s' e2 (s'', r)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>evaluate True env s e1 (s', r__); e = Log op e1 e2;\n     r__ = Rval v; do_log op v e2 = Some (Exp e2)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding Log"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (Log op e1 e2) (s', r)", "apply (intro exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate True env s (Log op e1 e2) (?s', ?r1)", "apply (rule log1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate True env s e1 (?s2.2, Rval ?v1.2) \\<and>\n    do_log op ?v1.2 e2 = Some (Exp ?e'2) \\<and>\n    evaluate True env ?s2.2 ?e'2 (?s', ?r1)", "apply (intro conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. evaluate True env s e1 (?s2.2, Rval ?v1.2)\n 2. do_log op ?v1.2 e2 = Some (Exp ?e'2)\n 3. evaluate True env ?s2.2 ?e'2 (?s', ?r1)", "using Rval e1"], ["proof (prove)\nusing this:\n  r__ = Rval v\n  evaluate True env s e1 (s', r__)\n\ngoal (3 subgoals):\n 1. evaluate True env s e1 (?s2.2, Rval ?v1.2)\n 2. do_log op ?v1.2 e2 = Some (Exp ?e'2)\n 3. evaluate True env ?s2.2 ?e'2 (?s', ?r1)", "apply force"], ["proof (prove)\ngoal (2 subgoals):\n 1. do_log op v e2 = Some (Exp ?e'2)\n 2. evaluate True env s' ?e'2 (?s', ?r1)", "by fact+"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case Rerr"], ["proof (state)\nthis:\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "with e1"], ["proof (chain)\npicking this:\n  evaluate True env s e1 (s', r)\n  r = Rerr x2_", "show ?thesis"], ["proof (prove)\nusing this:\n  evaluate True env s e1 (s', r)\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding Log"], ["proof (prove)\nusing this:\n  evaluate True env s e1 (s', r)\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (Log op e1 e2) (s', r)", "by (metis log4)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (9 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case (If e1 e2 e3)"], ["proof (state)\nthis:\n  e = exp0.If e1 e2 e3\n\ngoal (9 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "with less"], ["proof (chain)\npicking this:\n  ((clock ?s, ?e), clock s, e)\n  \\<in> less_than <*lex*> measure size \\<Longrightarrow>\n  \\<exists>s' r. evaluate True ?env ?s ?e (s', r)\n  e = exp0.If e1 e2 e3", "have \"\\<exists>s' r. evaluate True env s e1 (s', r)\""], ["proof (prove)\nusing this:\n  ((clock ?s, ?e), clock s, e)\n  \\<in> less_than <*lex*> measure size \\<Longrightarrow>\n  \\<exists>s' r. evaluate True ?env ?s ?e (s', r)\n  e = exp0.If e1 e2 e3\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e1 (s', r)", "by simp"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e1 (s', r)\n\ngoal (9 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s' r. evaluate True env s e1 (s', r)", "obtain s' r where e1: \"evaluate True env s e1 (s', r)\""], ["proof (prove)\nusing this:\n  \\<exists>s' r. evaluate True env s e1 (s', r)\n\ngoal (1 subgoal):\n 1. (\\<And>s' r.\n        evaluate True env s e1 (s', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  evaluate True env s e1 (s', r)\n\ngoal (9 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  evaluate True env s e1 (s', r)", "have clock: \"clock s' \\<le> clock s\""], ["proof (prove)\nusing this:\n  evaluate True env s e1 (s', r)\n\ngoal (1 subgoal):\n 1. clock s' \\<le> clock s", "by (metis evaluate_clock_mono)"], ["proof (state)\nthis:\n  clock s' \\<le> clock s\n\ngoal (9 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x91 x92 x93.\n       e = exp0.If x91 x92 x93 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 9. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "proof (cases r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case (Rval v1)"], ["proof (state)\nthis:\n  r = Rval v1\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "proof (cases v1 e2 e3 rule: do_if_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. do_if v1 e2 e3 = None \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 2. do_if v1 e2 e3 = Some e2 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 3. do_if v1 e2 e3 = Some e3 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "case none"], ["proof (state)\nthis:\n  do_if v1 e2 e3 = None\n\ngoal (3 subgoals):\n 1. do_if v1 e2 e3 = None \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 2. do_if v1 e2 e3 = Some e2 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 3. do_if v1 e2 e3 = Some e3 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding If"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (exp0.If e1 e2 e3) (s', r)", "apply (intro exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate True env s (exp0.If e1 e2 e3) (?s', ?r1)", "apply (rule if2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate True env s e1 (?s', Rval ?v1.2) \\<and> do_if ?v1.2 e2 e3 = None", "apply (intro conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. evaluate True env s e1 (?s', Rval ?v1.2)\n 2. do_if ?v1.2 e2 e3 = None", "using Rval e1"], ["proof (prove)\nusing this:\n  r = Rval v1\n  evaluate True env s e1 (s', r)\n\ngoal (2 subgoals):\n 1. evaluate True env s e1 (?s', Rval ?v1.2)\n 2. do_if ?v1.2 e2 e3 = None", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. do_if v1 e2 e3 = None", "by fact"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (2 subgoals):\n 1. do_if v1 e2 e3 = Some e2 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 2. do_if v1 e2 e3 = Some e3 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. do_if v1 e2 e3 = Some e2 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 2. do_if v1 e2 e3 = Some e3 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "case true"], ["proof (state)\nthis:\n  do_if v1 e2 e3 = Some e2\n\ngoal (2 subgoals):\n 1. do_if v1 e2 e3 = Some e2 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 2. do_if v1 e2 e3 = Some e3 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "have \"\\<exists>s'' r. evaluate True env s' e2 (s'', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s'' r. evaluate True env s' e2 (s'', r)", "apply (rule less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((clock s', e2), clock s, e) \\<in> less_than <*lex*> measure size", "using clock If"], ["proof (prove)\nusing this:\n  clock s' \\<le> clock s\n  e = exp0.If e1 e2 e3\n\ngoal (1 subgoal):\n 1. ((clock s', e2), clock s, e) \\<in> less_than <*lex*> measure size", "by auto"], ["proof (state)\nthis:\n  \\<exists>s'' r. evaluate True env s' e2 (s'', r)\n\ngoal (2 subgoals):\n 1. do_if v1 e2 e3 = Some e2 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 2. do_if v1 e2 e3 = Some e3 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s'' r. evaluate True env s' e2 (s'', r)", "obtain s'' r where \"evaluate True env s' e2 (s'', r)\""], ["proof (prove)\nusing this:\n  \\<exists>s'' r. evaluate True env s' e2 (s'', r)\n\ngoal (1 subgoal):\n 1. (\\<And>s'' r.\n        evaluate True env s' e2 (s'', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  evaluate True env s' e2 (s'', r)\n\ngoal (2 subgoals):\n 1. do_if v1 e2 e3 = Some e2 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)\n 2. do_if v1 e2 e3 = Some e3 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding If"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (exp0.If e1 e2 e3) (s', r)", "apply (intro exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate True env s (exp0.If e1 e2 e3) (?s', ?r1)", "apply (rule if1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate True env s e1 (?s2.2, Rval ?v1.2) \\<and>\n    do_if ?v1.2 e2 e3 = Some ?e'2 \\<and>\n    evaluate True env ?s2.2 ?e'2 (?s', ?r1)", "apply (intro conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. evaluate True env s e1 (?s2.2, Rval ?v1.2)\n 2. do_if ?v1.2 e2 e3 = Some ?e'2\n 3. evaluate True env ?s2.2 ?e'2 (?s', ?r1)", "using Rval e1"], ["proof (prove)\nusing this:\n  r__ = Rval v1\n  evaluate True env s e1 (s', r__)\n\ngoal (3 subgoals):\n 1. evaluate True env s e1 (?s2.2, Rval ?v1.2)\n 2. do_if ?v1.2 e2 e3 = Some ?e'2\n 3. evaluate True env ?s2.2 ?e'2 (?s', ?r1)", "apply force"], ["proof (prove)\ngoal (2 subgoals):\n 1. do_if v1 e2 e3 = Some ?e'2\n 2. evaluate True env s' ?e'2 (?s', ?r1)", "by fact+"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (1 subgoal):\n 1. do_if v1 e2 e3 = Some e3 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. do_if v1 e2 e3 = Some e3 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "case false"], ["proof (state)\nthis:\n  do_if v1 e2 e3 = Some e3\n\ngoal (1 subgoal):\n 1. do_if v1 e2 e3 = Some e3 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "have \"\\<exists>s'' r. evaluate True env s' e3 (s'', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s'' r. evaluate True env s' e3 (s'', r)", "apply (rule less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((clock s', e3), clock s, e) \\<in> less_than <*lex*> measure size", "using clock If"], ["proof (prove)\nusing this:\n  clock s' \\<le> clock s\n  e = exp0.If e1 e2 e3\n\ngoal (1 subgoal):\n 1. ((clock s', e3), clock s, e) \\<in> less_than <*lex*> measure size", "by auto"], ["proof (state)\nthis:\n  \\<exists>s'' r. evaluate True env s' e3 (s'', r)\n\ngoal (1 subgoal):\n 1. do_if v1 e2 e3 = Some e3 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s'' r. evaluate True env s' e3 (s'', r)", "obtain s'' r where \"evaluate True env s' e3 (s'', r)\""], ["proof (prove)\nusing this:\n  \\<exists>s'' r. evaluate True env s' e3 (s'', r)\n\ngoal (1 subgoal):\n 1. (\\<And>s'' r.\n        evaluate True env s' e3 (s'', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  evaluate True env s' e3 (s'', r)\n\ngoal (1 subgoal):\n 1. do_if v1 e2 e3 = Some e3 \\<Longrightarrow>\n    \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding If"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (exp0.If e1 e2 e3) (s', r)", "apply (intro exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate True env s (exp0.If e1 e2 e3) (?s', ?r1)", "apply (rule if1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate True env s e1 (?s2.2, Rval ?v1.2) \\<and>\n    do_if ?v1.2 e2 e3 = Some ?e'2 \\<and>\n    evaluate True env ?s2.2 ?e'2 (?s', ?r1)", "apply (intro conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. evaluate True env s e1 (?s2.2, Rval ?v1.2)\n 2. do_if ?v1.2 e2 e3 = Some ?e'2\n 3. evaluate True env ?s2.2 ?e'2 (?s', ?r1)", "using Rval e1"], ["proof (prove)\nusing this:\n  r__ = Rval v1\n  evaluate True env s e1 (s', r__)\n\ngoal (3 subgoals):\n 1. evaluate True env s e1 (?s2.2, Rval ?v1.2)\n 2. do_if ?v1.2 e2 e3 = Some ?e'2\n 3. evaluate True env ?s2.2 ?e'2 (?s', ?r1)", "apply force"], ["proof (prove)\ngoal (2 subgoals):\n 1. do_if v1 e2 e3 = Some ?e'2\n 2. evaluate True env s' ?e'2 (?s', ?r1)", "by fact+"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case Rerr"], ["proof (state)\nthis:\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "with e1"], ["proof (chain)\npicking this:\n  evaluate True env s e1 (s', r)\n  r = Rerr x2_", "show ?thesis"], ["proof (prove)\nusing this:\n  evaluate True env s e1 (s', r)\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding If"], ["proof (prove)\nusing this:\n  evaluate True env s e1 (s', r)\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (exp0.If e1 e2 e3) (s', r)", "by (metis if3)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (8 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case (Handle e' pes)"], ["proof (state)\nthis:\n  e = Handle e' pes\n\ngoal (8 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "with less"], ["proof (chain)\npicking this:\n  ((clock ?s, ?e), clock s, e)\n  \\<in> less_than <*lex*> measure size \\<Longrightarrow>\n  \\<exists>s' r. evaluate True ?env ?s ?e (s', r)\n  e = Handle e' pes", "have \"\\<exists>s' r. evaluate True env s e' (s', r)\""], ["proof (prove)\nusing this:\n  ((clock ?s, ?e), clock s, e)\n  \\<in> less_than <*lex*> measure size \\<Longrightarrow>\n  \\<exists>s' r. evaluate True ?env ?s ?e (s', r)\n  e = Handle e' pes\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e' (s', r)", "by simp"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e' (s', r)\n\ngoal (8 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s' r. evaluate True env s e' (s', r)", "obtain s' r where e': \"evaluate True env s e' (s', r)\""], ["proof (prove)\nusing this:\n  \\<exists>s' r. evaluate True env s e' (s', r)\n\ngoal (1 subgoal):\n 1. (\\<And>s' r.\n        evaluate True env s e' (s', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  evaluate True env s e' (s', r)\n\ngoal (8 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  evaluate True env s e' (s', r)", "have clock: \"clock s' \\<le> clock s\""], ["proof (prove)\nusing this:\n  evaluate True env s e' (s', r)\n\ngoal (1 subgoal):\n 1. clock s' \\<le> clock s", "by (metis evaluate_clock_mono)"], ["proof (state)\nthis:\n  clock s' \\<le> clock s\n\ngoal (8 subgoals):\n 1. \\<And>x21 x22.\n       e = Handle x21 x22 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 8. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "proof (cases r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case Rval"], ["proof (state)\nthis:\n  r = Rval x1_\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "with e'"], ["proof (chain)\npicking this:\n  evaluate True env s e' (s', r)\n  r = Rval x1_", "show ?thesis"], ["proof (prove)\nusing this:\n  evaluate True env s e' (s', r)\n  r = Rval x1_\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding Handle"], ["proof (prove)\nusing this:\n  evaluate True env s e' (s', r)\n  r = Rval x1_\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (Handle e' pes) (s', r)", "by (metis handle1)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case (Rerr err)"], ["proof (state)\nthis:\n  r = Rerr err\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "proof (cases err)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       err = Rraise x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       err = Rabort x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case (Rraise exn)"], ["proof (state)\nthis:\n  err = Rraise exn\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       err = Rraise x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       err = Rabort x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "have \"\\<exists>s'' r. evaluate_match True env s' exn pes exn (s'', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s'' r. evaluate_match True env s' exn pes exn (s'', r)", "apply (rule evaluate_match_total0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p e env s''.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s'' \\<le> clock s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s''a r. evaluate True env s'' e (s''a, r)", "apply (rule less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p e env s''.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s'' \\<le> clock s'\\<rbrakk>\n       \\<Longrightarrow> ((clock s'', e), clock s, e)\n                         \\<in> less_than <*lex*> measure size", "using Handle clock"], ["proof (prove)\nusing this:\n  e = Handle e' pes\n  clock s' \\<le> clock s\n\ngoal (1 subgoal):\n 1. \\<And>p e env s''.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s'' \\<le> clock s'\\<rbrakk>\n       \\<Longrightarrow> ((clock s'', e), clock s, e)\n                         \\<in> less_than <*lex*> measure size", "apply (auto simp: less_eq_Suc_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p e s''.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s'' \\<le> clock s';\n        e = Handle e' pes; clock s' \\<le> clock s;\n        \\<not> Suc (clock s'') \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> size e\n                         \\<le> size_list (size_prod (\\<lambda>x. 0) size)\n                                pes +\n                               size e'", "apply (rule trans_le_add1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p e s''.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s'' \\<le> clock s';\n        e = Handle e' pes; clock s' \\<le> clock s;\n        \\<not> Suc (clock s'') \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> size e\n                         \\<le> size_list (size_prod (\\<lambda>x. 0) size)\n                                pes", "apply (rule size_list_estimation')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p e s''.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s'' \\<le> clock s';\n        e = Handle e' pes; clock s' \\<le> clock s;\n        \\<not> Suc (clock s'') \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> ?x13 p e s'' \\<in> set pes\n 2. \\<And>p e s''.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s'' \\<le> clock s';\n        e = Handle e' pes; clock s' \\<le> clock s;\n        \\<not> Suc (clock s'') \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> size e\n                         \\<le> size_prod (\\<lambda>x. 0) size (?x13 p e s'')", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p e s''.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s'' \\<le> clock s';\n        e = Handle e' pes; clock s' \\<le> clock s;\n        \\<not> Suc (clock s'') \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> size e \\<le> size_prod (\\<lambda>x. 0) size (p, e)", "by auto"], ["proof (state)\nthis:\n  \\<exists>s'' r. evaluate_match True env s' exn pes exn (s'', r)\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       err = Rraise x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       err = Rabort x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s'' r. evaluate_match True env s' exn pes exn (s'', r)", "obtain s'' r where \"evaluate_match True env s' exn pes exn (s'', r)\""], ["proof (prove)\nusing this:\n  \\<exists>s'' r. evaluate_match True env s' exn pes exn (s'', r)\n\ngoal (1 subgoal):\n 1. (\\<And>s'' r.\n        evaluate_match True env s' exn pes exn (s'', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  evaluate_match True env s' exn pes exn (s'', r)\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       err = Rraise x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       err = Rabort x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding Handle"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (Handle e' pes) (s', r)", "apply (intro exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate True env s (Handle e' pes) (?s', ?r1)", "apply (rule handle2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate True env s e' (?s2.2, Rerr (Rraise ?v1.2)) \\<and>\n    evaluate_match True env ?s2.2 ?v1.2 pes ?v1.2 (?s', ?r1)", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. evaluate True env s e' (?s2.2, Rerr (Rraise ?v1.2))\n 2. evaluate_match True env ?s2.2 ?v1.2 pes ?v1.2 (?s', ?r1)", "using e'"], ["proof (prove)\nusing this:\n  evaluate True env s e' (s', r__)\n\ngoal (2 subgoals):\n 1. evaluate True env s e' (?s2.2, Rerr (Rraise ?v1.2))\n 2. evaluate_match True env ?s2.2 ?v1.2 pes ?v1.2 (?s', ?r1)", "unfolding Rerr Rraise"], ["proof (prove)\nusing this:\n  evaluate True env s e' (s', Rerr (Rraise exn))\n\ngoal (2 subgoals):\n 1. evaluate True env s e' (?s2.2, Rerr (Rraise ?v1.2))\n 2. evaluate_match True env ?s2.2 ?v1.2 pes ?v1.2 (?s', ?r1)", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate_match True env s' exn pes exn (?s', ?r1)", "by fact"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       err = Rabort x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       err = Rabort x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case (Rabort x2)"], ["proof (state)\nthis:\n  err = Rabort x2\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       err = Rabort x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "with e' Rerr"], ["proof (chain)\npicking this:\n  evaluate True env s e' (s', r)\n  r = Rerr err\n  err = Rabort x2", "show ?thesis"], ["proof (prove)\nusing this:\n  evaluate True env s e' (s', r)\n  r = Rerr err\n  err = Rabort x2\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding Handle"], ["proof (prove)\nusing this:\n  evaluate True env s e' (s', r)\n  r = Rerr err\n  err = Rabort x2\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (Handle e' pes) (s', r)", "by (metis handle3)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (7 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case (Mat e' pes)"], ["proof (state)\nthis:\n  e = Mat e' pes\n\ngoal (7 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "with less"], ["proof (chain)\npicking this:\n  ((clock ?s, ?e), clock s, e)\n  \\<in> less_than <*lex*> measure size \\<Longrightarrow>\n  \\<exists>s' r. evaluate True ?env ?s ?e (s', r)\n  e = Mat e' pes", "have \"\\<exists>s' r. evaluate True env s e' (s', r)\""], ["proof (prove)\nusing this:\n  ((clock ?s, ?e), clock s, e)\n  \\<in> less_than <*lex*> measure size \\<Longrightarrow>\n  \\<exists>s' r. evaluate True ?env ?s ?e (s', r)\n  e = Mat e' pes\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e' (s', r)", "by simp"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e' (s', r)\n\ngoal (7 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s' r. evaluate True env s e' (s', r)", "obtain s' r where e': \"evaluate True env s e' (s', r)\""], ["proof (prove)\nusing this:\n  \\<exists>s' r. evaluate True env s e' (s', r)\n\ngoal (1 subgoal):\n 1. (\\<And>s' r.\n        evaluate True env s e' (s', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  evaluate True env s e' (s', r)\n\ngoal (7 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  evaluate True env s e' (s', r)", "have clock: \"clock s' \\<le> clock s\""], ["proof (prove)\nusing this:\n  evaluate True env s e' (s', r)\n\ngoal (1 subgoal):\n 1. clock s' \\<le> clock s", "by (metis evaluate_clock_mono)"], ["proof (state)\nthis:\n  clock s' \\<le> clock s\n\ngoal (7 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x101 x102.\n       e = Mat x101 x102 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 7. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "proof (cases r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case (Rval v)"], ["proof (state)\nthis:\n  r = Rval v\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "have \"\\<exists>s'' r. evaluate_match True env s' v pes (Conv (Some (''Bind'', TypeExn (Short ''Bind''))) []) (s'', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s'' r.\n       evaluate_match True env s' v pes\n        (Conv (Some (''Bind'', TypeExn (Short ''Bind''))) []) (s'', r)", "apply (rule evaluate_match_total0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p e env s''.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s'' \\<le> clock s'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s''a r. evaluate True env s'' e (s''a, r)", "apply (rule less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p e env s''.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s'' \\<le> clock s'\\<rbrakk>\n       \\<Longrightarrow> ((clock s'', e), clock s, e)\n                         \\<in> less_than <*lex*> measure size", "unfolding Mat"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p e env s''.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s'' \\<le> clock s'\\<rbrakk>\n       \\<Longrightarrow> ((clock s'', e), clock s, Mat e' pes)\n                         \\<in> less_than <*lex*> measure size", "using clock"], ["proof (prove)\nusing this:\n  clock s' \\<le> clock s\n\ngoal (1 subgoal):\n 1. \\<And>p e env s''.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s'' \\<le> clock s'\\<rbrakk>\n       \\<Longrightarrow> ((clock s'', e), clock s, Mat e' pes)\n                         \\<in> less_than <*lex*> measure size", "apply (auto simp: less_eq_Suc_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p e s''.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s'' \\<le> clock s';\n        clock s' \\<le> clock s;\n        \\<not> Suc (clock s'') \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> size e\n                         \\<le> size_list (size_prod (\\<lambda>x. 0) size)\n                                pes +\n                               size e'", "apply (rule trans_le_add1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p e s''.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s'' \\<le> clock s';\n        clock s' \\<le> clock s;\n        \\<not> Suc (clock s'') \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> size e\n                         \\<le> size_list (size_prod (\\<lambda>x. 0) size)\n                                pes", "apply (rule size_list_estimation')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p e s''.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s'' \\<le> clock s';\n        clock s' \\<le> clock s;\n        \\<not> Suc (clock s'') \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> ?x13 p e s'' \\<in> set pes\n 2. \\<And>p e s''.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s'' \\<le> clock s';\n        clock s' \\<le> clock s;\n        \\<not> Suc (clock s'') \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> size e\n                         \\<le> size_prod (\\<lambda>x. 0) size (?x13 p e s'')", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p e s''.\n       \\<lbrakk>(p, e) \\<in> set pes; clock s'' \\<le> clock s';\n        clock s' \\<le> clock s;\n        \\<not> Suc (clock s'') \\<le> clock s\\<rbrakk>\n       \\<Longrightarrow> size e \\<le> size_prod (\\<lambda>x. 0) size (p, e)", "by auto"], ["proof (state)\nthis:\n  \\<exists>s'' r.\n     evaluate_match True env s' v pes\n      (Conv (Some (''Bind'', TypeExn (Short ''Bind''))) []) (s'', r)\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s'' r.\n     evaluate_match True env s' v pes\n      (Conv (Some (''Bind'', TypeExn (Short ''Bind''))) []) (s'', r)", "obtain s'' r where \"evaluate_match True env s' v pes (Conv (Some (''Bind'', TypeExn (Short ''Bind''))) []) (s'', r)\""], ["proof (prove)\nusing this:\n  \\<exists>s'' r.\n     evaluate_match True env s' v pes\n      (Conv (Some (''Bind'', TypeExn (Short ''Bind''))) []) (s'', r)\n\ngoal (1 subgoal):\n 1. (\\<And>s'' r.\n        evaluate_match True env s' v pes\n         (Conv (Some (''Bind'', TypeExn (Short ''Bind''))) [])\n         (s'', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  evaluate_match True env s' v pes\n   (Conv (Some (''Bind'', TypeExn (Short ''Bind''))) []) (s'', r)\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r__ = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       r__ = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding Mat"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (Mat e' pes) (s', r)", "apply (intro exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate True env s (Mat e' pes) (?s', ?r1)", "apply (rule mat1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate True env s e' (?s2.2, Rval ?v1.2) \\<and>\n    evaluate_match True env ?s2.2 ?v1.2 pes\n     (Conv (Some (''Bind'', TypeExn (Short ''Bind''))) []) (?s', ?r1)", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. evaluate True env s e' (?s2.2, Rval ?v1.2)\n 2. evaluate_match True env ?s2.2 ?v1.2 pes\n     (Conv (Some (''Bind'', TypeExn (Short ''Bind''))) []) (?s', ?r1)", "using e'"], ["proof (prove)\nusing this:\n  evaluate True env s e' (s', r__)\n\ngoal (2 subgoals):\n 1. evaluate True env s e' (?s2.2, Rval ?v1.2)\n 2. evaluate_match True env ?s2.2 ?v1.2 pes\n     (Conv (Some (''Bind'', TypeExn (Short ''Bind''))) []) (?s', ?r1)", "unfolding Rval"], ["proof (prove)\nusing this:\n  evaluate True env s e' (s', Rval v)\n\ngoal (2 subgoals):\n 1. evaluate True env s e' (?s2.2, Rval ?v1.2)\n 2. evaluate_match True env ?s2.2 ?v1.2 pes\n     (Conv (Some (''Bind'', TypeExn (Short ''Bind''))) []) (?s', ?r1)", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate_match True env s' v pes\n     (Conv (Some (''Bind'', TypeExn (Short ''Bind''))) []) (?s', ?r1)", "apply fact"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r__ = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case Rerr"], ["proof (state)\nthis:\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "with e'"], ["proof (chain)\npicking this:\n  evaluate True env s e' (s', r)\n  r = Rerr x2_", "show ?thesis"], ["proof (prove)\nusing this:\n  evaluate True env s e' (s', r)\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding Mat"], ["proof (prove)\nusing this:\n  evaluate True env s e' (s', r)\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (Mat e' pes) (s', r)", "by (metis mat2)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (6 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case (Let n e1 e2)"], ["proof (state)\nthis:\n  e = exp0.Let n e1 e2\n\ngoal (6 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  e = exp0.Let n e1 e2", "have \"\\<exists>s' r. evaluate True env s e1 (s', r)\""], ["proof (prove)\nusing this:\n  e = exp0.Let n e1 e2\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e1 (s', r)", "using less"], ["proof (prove)\nusing this:\n  e = exp0.Let n e1 e2\n  ((clock ?s, ?e), clock s, e)\n  \\<in> less_than <*lex*> measure size \\<Longrightarrow>\n  \\<exists>s' r. evaluate True ?env ?s ?e (s', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e1 (s', r)", "by auto"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e1 (s', r)\n\ngoal (6 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s' r. evaluate True env s e1 (s', r)", "obtain s' r where e1: \"evaluate True env s e1 (s', r)\""], ["proof (prove)\nusing this:\n  \\<exists>s' r. evaluate True env s e1 (s', r)\n\ngoal (1 subgoal):\n 1. (\\<And>s' r.\n        evaluate True env s e1 (s', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  evaluate True env s e1 (s', r)\n\ngoal (6 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  evaluate True env s e1 (s', r)", "have clock: \"clock s' \\<le> clock s\""], ["proof (prove)\nusing this:\n  evaluate True env s e1 (s', r)\n\ngoal (1 subgoal):\n 1. clock s' \\<le> clock s", "by (metis evaluate_clock_mono)"], ["proof (state)\nthis:\n  clock s' \\<le> clock s\n\ngoal (6 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x111 x112 x113.\n       e = exp0.Let x111 x112 x113 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 6. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "proof (cases r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case (Rval v)"], ["proof (state)\nthis:\n  r = Rval v\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "have \"\\<exists>s'' r. evaluate True (env \\<lparr> sem_env.v := nsOptBind n v (sem_env.v env) \\<rparr>) s' e2 (s'', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s'' r.\n       evaluate True\n        (update_v (\\<lambda>_. nsOptBind n v (sem_env.v env)) env) s' e2\n        (s'', r)", "apply (rule less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((clock s', e2), clock s, e) \\<in> less_than <*lex*> measure size", "using Let clock"], ["proof (prove)\nusing this:\n  e = exp0.Let n e1 e2\n  clock s' \\<le> clock s\n\ngoal (1 subgoal):\n 1. ((clock s', e2), clock s, e) \\<in> less_than <*lex*> measure size", "by auto"], ["proof (state)\nthis:\n  \\<exists>s'' r.\n     evaluate True\n      (update_v (\\<lambda>_. nsOptBind n v (sem_env.v env)) env) s' e2\n      (s'', r)\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s'' r.\n     evaluate True\n      (update_v (\\<lambda>_. nsOptBind n v (sem_env.v env)) env) s' e2\n      (s'', r)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>s'' r.\n     evaluate True\n      (update_v (\\<lambda>_. nsOptBind n v (sem_env.v env)) env) s' e2\n      (s'', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding Let"], ["proof (prove)\nusing this:\n  \\<exists>s'' r.\n     evaluate True\n      (update_v (\\<lambda>_. nsOptBind n v (sem_env.v env)) env) s' e2\n      (s'', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (exp0.Let n e1 e2) (s', r)", "using e1 Rval"], ["proof (prove)\nusing this:\n  \\<exists>s'' r.\n     evaluate True\n      (update_v (\\<lambda>_. nsOptBind n v (sem_env.v env)) env) s' e2\n      (s'', r)\n  evaluate True env s e1 (s', r)\n  r = Rval v\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (exp0.Let n e1 e2) (s', r)", "by (metis let1)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case Rerr"], ["proof (state)\nthis:\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "with e1"], ["proof (chain)\npicking this:\n  evaluate True env s e1 (s', r)\n  r = Rerr x2_", "show ?thesis"], ["proof (prove)\nusing this:\n  evaluate True env s e1 (s', r)\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding Let"], ["proof (prove)\nusing this:\n  evaluate True env s e1 (s', r)\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (exp0.Let n e1 e2) (s', r)", "by (metis let2)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (5 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case (Letrec funs e')"], ["proof (state)\nthis:\n  e = Letrec funs e'\n\ngoal (5 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  e = Letrec funs e'", "have \"\\<exists>s' r. evaluate True (env \\<lparr> sem_env.v := build_rec_env funs env (sem_env.v env) \\<rparr>) s e' (s', r)\""], ["proof (prove)\nusing this:\n  e = Letrec funs e'\n\ngoal (1 subgoal):\n 1. \\<exists>s' r.\n       evaluate True\n        (update_v (\\<lambda>_. build_rec_env funs env (sem_env.v env)) env)\n        s e' (s', r)", "using less"], ["proof (prove)\nusing this:\n  e = Letrec funs e'\n  ((clock ?s, ?e), clock s, e)\n  \\<in> less_than <*lex*> measure size \\<Longrightarrow>\n  \\<exists>s' r. evaluate True ?env ?s ?e (s', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r.\n       evaluate True\n        (update_v (\\<lambda>_. build_rec_env funs env (sem_env.v env)) env)\n        s e' (s', r)", "by auto"], ["proof (state)\nthis:\n  \\<exists>s' r.\n     evaluate True\n      (update_v (\\<lambda>_. build_rec_env funs env (sem_env.v env)) env) s\n      e' (s', r)\n\ngoal (5 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x121 x122.\n       e = Letrec x121 x122 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 5. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s' r.\n     evaluate True\n      (update_v (\\<lambda>_. build_rec_env funs env (sem_env.v env)) env) s\n      e' (s', r)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>s' r.\n     evaluate True\n      (update_v (\\<lambda>_. build_rec_env funs env (sem_env.v env)) env) s\n      e' (s', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding Letrec"], ["proof (prove)\nusing this:\n  \\<exists>s' r.\n     evaluate True\n      (update_v (\\<lambda>_. build_rec_env funs env (sem_env.v env)) env) s\n      e' (s', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (Letrec funs e') (s', r)", "by (cases \"allDistinct (map (\\<lambda>x. case x of (x, y, z) \\<Rightarrow> x) funs)\")\n               (metis letrec1 letrec2)+"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (4 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case (Tannot e')"], ["proof (state)\nthis:\n  e = Tannot e' x132_\n\ngoal (4 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "with less"], ["proof (chain)\npicking this:\n  ((clock ?s, ?e), clock s, e)\n  \\<in> less_than <*lex*> measure size \\<Longrightarrow>\n  \\<exists>s' r. evaluate True ?env ?s ?e (s', r)\n  e = Tannot e' x132_", "have \"\\<exists>s' r. evaluate True env s e' (s', r)\""], ["proof (prove)\nusing this:\n  ((clock ?s, ?e), clock s, e)\n  \\<in> less_than <*lex*> measure size \\<Longrightarrow>\n  \\<exists>s' r. evaluate True ?env ?s ?e (s', r)\n  e = Tannot e' x132_\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e' (s', r)", "by simp"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e' (s', r)\n\ngoal (4 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x131 x132.\n       e = Tannot x131 x132 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 4. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s' r. evaluate True env s e' (s', r)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>s' r. evaluate True env s e' (s', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding \\<open>e = _\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>s' r. evaluate True env s e' (s', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (Tannot e' x132_) (s', r)", "by (fastforce intro: evaluate_match_evaluate_list_evaluate.intros)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "case (Lannot e')"], ["proof (state)\nthis:\n  e = Lannot e' x142_\n\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "with less"], ["proof (chain)\npicking this:\n  ((clock ?s, ?e), clock s, e)\n  \\<in> less_than <*lex*> measure size \\<Longrightarrow>\n  \\<exists>s' r. evaluate True ?env ?s ?e (s', r)\n  e = Lannot e' x142_", "have \"\\<exists>s' r. evaluate True env s e' (s', r)\""], ["proof (prove)\nusing this:\n  ((clock ?s, ?e), clock s, e)\n  \\<in> less_than <*lex*> measure size \\<Longrightarrow>\n  \\<exists>s' r. evaluate True ?env ?s ?e (s', r)\n  e = Lannot e' x142_\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e' (s', r)", "by simp"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e' (s', r)\n\ngoal (3 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 3. \\<And>x141 x142.\n       e = Lannot x141 x142 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s' r. evaluate True env s e' (s', r)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>s' r. evaluate True env s e' (s', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s e (s', r)", "unfolding \\<open>e = _\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>s' r. evaluate True env s e' (s', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate True env s (Lannot e' x142_) (s', r)", "by (fastforce intro: evaluate_match_evaluate_list_evaluate.intros)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal (2 subgoals):\n 1. \\<And>x3.\n       e = Lit x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)\n 2. \\<And>x61 x62.\n       e = Fun x61 x62 \\<Longrightarrow>\n       \\<exists>s' r. evaluate True env s e (s', r)", "qed (fastforce intro: evaluate_match_evaluate_list_evaluate.intros)+"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate True env s e (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>\n  The following are pretty much the same proofs as above, but without additional assumptions;\n  instead using @{thm [source=true] evaluate_total} directly.\n\\<close>"], ["", "lemma evaluate_list_total: \"\\<exists>s' r. evaluate_list True env s es (s', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_list True env s es (s', r)", "proof (induction es arbitrary: env s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>env s. \\<exists>s' r. evaluate_list True env s [] (s', r)\n 2. \\<And>a es env s.\n       (\\<And>env s.\n           \\<exists>s' r.\n              evaluate_list True env s es (s', r)) \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (a # es) (s', r)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>env s. \\<exists>s' r. evaluate_list True env s [] (s', r)\n 2. \\<And>a es env s.\n       (\\<And>env s.\n           \\<exists>s' r.\n              evaluate_list True env s es (s', r)) \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (a # es) (s', r)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_list True env s [] (s', r)", "by (metis evaluate_match_evaluate_list_evaluate.empty)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_list True env s [] (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>a es env s.\n       (\\<And>env s.\n           \\<exists>s' r.\n              evaluate_list True env s es (s', r)) \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (a # es) (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a es env s.\n       (\\<And>env s.\n           \\<exists>s' r.\n              evaluate_list True env s es (s', r)) \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (a # es) (s', r)", "case (Cons e es)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_list True ?env ?s es (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>a es env s.\n       (\\<And>env s.\n           \\<exists>s' r.\n              evaluate_list True env s es (s', r)) \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (a # es) (s', r)", "obtain s' r where e: \"evaluate True env s e (s', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s' r.\n        evaluate True env s e (s', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis evaluate_total)"], ["proof (state)\nthis:\n  evaluate True env s e (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>a es env s.\n       (\\<And>env s.\n           \\<exists>s' r.\n              evaluate_list True env s es (s', r)) \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (a # es) (s', r)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "proof (cases r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "case (Rval v)"], ["proof (state)\nthis:\n  r = Rval v\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "have \"\\<exists>s'' r. evaluate_list True env s' es (s'', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s'' r. evaluate_list True env s' es (s'', r)", "using Cons"], ["proof (prove)\nusing this:\n  \\<exists>s' r. evaluate_list True ?env ?s es (s', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s'' r. evaluate_list True env s' es (s'', r)", "by auto"], ["proof (state)\nthis:\n  \\<exists>s'' r. evaluate_list True env s' es (s'', r)\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)\n 2. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s'' r. evaluate_list True env s' es (s'', r)", "obtain s'' r where \"evaluate_list True env s' es (s'', r)\""], ["proof (prove)\nusing this:\n  \\<exists>s'' r. evaluate_list True env s' es (s'', r)\n\ngoal (1 subgoal):\n 1. (\\<And>s'' r.\n        evaluate_list True env s' es (s'', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  evaluate_list True env s' es (s'', r)\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       r__ = Rval x1 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)\n 2. \\<And>x2.\n       r__ = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "with e Rval"], ["proof (chain)\npicking this:\n  evaluate True env s e (s', r__)\n  r__ = Rval v\n  evaluate_list True env s' es (s'', r)", "show ?thesis"], ["proof (prove)\nusing this:\n  evaluate True env s e (s', r__)\n  r__ = Rval v\n  evaluate_list True env s' es (s'', r)\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "by (cases r)\n           (metis evaluate_match_evaluate_list_evaluate.cons1 evaluate_match_evaluate_list_evaluate.cons3)+"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_list True env s (e # es) (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r__ = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "case Rerr"], ["proof (state)\nthis:\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       r = Rerr x2 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "with e"], ["proof (chain)\npicking this:\n  evaluate True env s e (s', r)\n  r = Rerr x2_", "show ?thesis"], ["proof (prove)\nusing this:\n  evaluate True env s e (s', r)\n  r = Rerr x2_\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_list True env s (e # es) (s', r)", "by (metis evaluate_match_evaluate_list_evaluate.cons2)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_list True env s (e # es) (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_list True env s (e # es) (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma evaluate_match_total: \"\\<exists>s' r. evaluate_match True env s v pes v' (s', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v pes v' (s', r)", "proof (induction pes arbitrary: env s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>env s. \\<exists>s' r. evaluate_match True env s v [] v' (s', r)\n 2. \\<And>a pes env s.\n       (\\<And>env s.\n           \\<exists>s' r.\n              evaluate_match True env s v pes v' (s', r)) \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (a # pes) v' (s', r)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>env s. \\<exists>s' r. evaluate_match True env s v [] v' (s', r)\n 2. \\<And>a pes env s.\n       (\\<And>env s.\n           \\<exists>s' r.\n              evaluate_match True env s v pes v' (s', r)) \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (a # pes) v' (s', r)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v [] v' (s', r)", "by (metis mat_empty)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_match True env s v [] v' (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>a pes env s.\n       (\\<And>env s.\n           \\<exists>s' r.\n              evaluate_match True env s v pes v' (s', r)) \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (a # pes) v' (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a pes env s.\n       (\\<And>env s.\n           \\<exists>s' r.\n              evaluate_match True env s v pes v' (s', r)) \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (a # pes) v' (s', r)", "case (Cons pe pes)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_match True ?env ?s v pes v' (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>a pes env s.\n       (\\<And>env s.\n           \\<exists>s' r.\n              evaluate_match True env s v pes v' (s', r)) \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (a # pes) v' (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s' r. evaluate_match True ?env ?s v pes v' (s', r)", "obtain p e where \"pe = (p, e)\""], ["proof (prove)\nusing this:\n  \\<exists>s' r. evaluate_match True ?env ?s v pes v' (s', r)\n\ngoal (1 subgoal):\n 1. (\\<And>p e. pe = (p, e) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  pe = (p, e)\n\ngoal (1 subgoal):\n 1. \\<And>a pes env s.\n       (\\<And>env s.\n           \\<exists>s' r.\n              evaluate_match True env s v pes v' (s', r)) \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (a # pes) v' (s', r)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "proof (cases \"allDistinct (pat_bindings p [])\")"], ["proof (state)\ngoal (2 subgoals):\n 1. allDistinct (pat_bindings p []) \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 2. \\<not> allDistinct (pat_bindings p []) \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "case distinct: True"], ["proof (state)\nthis:\n  allDistinct (pat_bindings p [])\n\ngoal (2 subgoals):\n 1. allDistinct (pat_bindings p []) \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 2. \\<not> allDistinct (pat_bindings p []) \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "proof (cases \"pmatch (c env) (refs s) p v []\")"], ["proof (state)\ngoal (3 subgoals):\n 1. pmatch (c env) (refs s) p v [] = No_match \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 2. pmatch (c env) (refs s) p v [] = Match_type_error \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 3. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "case No_match"], ["proof (state)\nthis:\n  pmatch (c env) (refs s) p v [] = No_match\n\ngoal (3 subgoals):\n 1. pmatch (c env) (refs s) p v [] = No_match \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 2. pmatch (c env) (refs s) p v [] = Match_type_error \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 3. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "have \"\\<exists>s' r. evaluate_match True env s v pes v' (s', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v pes v' (s', r)", "by (rule Cons)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_match True env s v pes v' (s', r)\n\ngoal (3 subgoals):\n 1. pmatch (c env) (refs s) p v [] = No_match \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 2. pmatch (c env) (refs s) p v [] = Match_type_error \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 3. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s' r. evaluate_match True env s v pes v' (s', r)", "obtain s' r where \"evaluate_match True env s v pes v' (s', r)\""], ["proof (prove)\nusing this:\n  \\<exists>s' r. evaluate_match True env s v pes v' (s', r)\n\ngoal (1 subgoal):\n 1. (\\<And>s' r.\n        evaluate_match True env s v pes v' (s', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  evaluate_match True env s v pes v' (s', r)\n\ngoal (3 subgoals):\n 1. pmatch (c env) (refs s) p v [] = No_match \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 2. pmatch (c env) (refs s) p v [] = Match_type_error \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 3. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "unfolding \\<open>pe = _\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v ((p, e) # pes) v' (s', r)", "apply (intro exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate_match True env s v ((p, e) # pes) v' (?s', ?r1)", "apply (rule mat_cons2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. allDistinct (pat_bindings p []) \\<and>\n    pmatch (c env) (refs s) p v [] = No_match \\<and>\n    evaluate_match True env s v pes v' (?s', ?r1)", "apply safe"], ["proof (prove)\ngoal (3 subgoals):\n 1. allDistinct (pat_bindings p [])\n 2. pmatch (c env) (refs s) p v [] = No_match\n 3. evaluate_match True env s v pes v' (?s', ?r1)", "by fact+"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n\ngoal (2 subgoals):\n 1. pmatch (c env) (refs s) p v [] = Match_type_error \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 2. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. pmatch (c env) (refs s) p v [] = Match_type_error \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 2. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "case Match_type_error"], ["proof (state)\nthis:\n  pmatch (c env) (refs s) p v [] = Match_type_error\n\ngoal (2 subgoals):\n 1. pmatch (c env) (refs s) p v [] = Match_type_error \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n 2. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "then"], ["proof (chain)\npicking this:\n  pmatch (c env) (refs s) p v [] = Match_type_error", "show ?thesis"], ["proof (prove)\nusing this:\n  pmatch (c env) (refs s) p v [] = Match_type_error\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "unfolding \\<open>pe = _\\<close>"], ["proof (prove)\nusing this:\n  pmatch (c env) (refs s) p v [] = Match_type_error\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v ((p, e) # pes) v' (s', r)", "by (metis mat_cons3)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "case (Match env')"], ["proof (state)\nthis:\n  pmatch (c env) (refs s) p v [] = Match env'\n\ngoal (1 subgoal):\n 1. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "have \"\\<exists>s' r. evaluate True (env \\<lparr> sem_env.v := (nsAppend (alist_to_ns env') (sem_env.v env)) \\<rparr>) s e (s', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r.\n       evaluate True\n        (update_v (\\<lambda>_. nsAppend (alist_to_ns env') (sem_env.v env))\n          env)\n        s e (s', r)", "by (metis evaluate_total)"], ["proof (state)\nthis:\n  \\<exists>s' r.\n     evaluate True\n      (update_v (\\<lambda>_. nsAppend (alist_to_ns env') (sem_env.v env))\n        env)\n      s e (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<exists>s' r.\n     evaluate True\n      (update_v (\\<lambda>_. nsAppend (alist_to_ns env') (sem_env.v env))\n        env)\n      s e (s', r)", "obtain s' r where \"evaluate True (env \\<lparr> sem_env.v := (nsAppend (alist_to_ns env') (sem_env.v env)) \\<rparr>) s e (s', r)\""], ["proof (prove)\nusing this:\n  \\<exists>s' r.\n     evaluate True\n      (update_v (\\<lambda>_. nsAppend (alist_to_ns env') (sem_env.v env))\n        env)\n      s e (s', r)\n\ngoal (1 subgoal):\n 1. (\\<And>s' r.\n        evaluate True\n         (update_v (\\<lambda>_. nsAppend (alist_to_ns env') (sem_env.v env))\n           env)\n         s e (s', r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  evaluate True\n   (update_v (\\<lambda>_. nsAppend (alist_to_ns env') (sem_env.v env)) env)\n   s e (s', r)\n\ngoal (1 subgoal):\n 1. \\<And>x3.\n       pmatch (c env) (refs s) p v [] = Match x3 \\<Longrightarrow>\n       \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "unfolding \\<open>pe = _\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v ((p, e) # pes) v' (s', r)", "apply (intro exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evaluate_match True env s v ((p, e) # pes) v' (?s', ?r1)", "apply (rule mat_cons1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. allDistinct (pat_bindings p []) \\<and>\n    pmatch (c env) (refs s) p v [] = Match ?env'2 \\<and>\n    evaluate True\n     (update_v (\\<lambda>_. nsAppend (alist_to_ns ?env'2) (sem_env.v env))\n       env)\n     s e (?s', ?r1)", "apply safe"], ["proof (prove)\ngoal (3 subgoals):\n 1. allDistinct (pat_bindings p [])\n 2. pmatch (c env) (refs s) p v [] = Match ?env'2\n 3. evaluate True\n     (update_v (\\<lambda>_. nsAppend (alist_to_ns ?env'2) (sem_env.v env))\n       env)\n     s e (?s', ?r1)", "apply fact+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n\ngoal (1 subgoal):\n 1. \\<not> allDistinct (pat_bindings p []) \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> allDistinct (pat_bindings p []) \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "case False"], ["proof (state)\nthis:\n  \\<not> allDistinct (pat_bindings p [])\n\ngoal (1 subgoal):\n 1. \\<not> allDistinct (pat_bindings p []) \\<Longrightarrow>\n    \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "then"], ["proof (chain)\npicking this:\n  \\<not> allDistinct (pat_bindings p [])", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> allDistinct (pat_bindings p [])\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)", "unfolding \\<open>pe = _\\<close>"], ["proof (prove)\nusing this:\n  \\<not> allDistinct (pat_bindings p [])\n\ngoal (1 subgoal):\n 1. \\<exists>s' r. evaluate_match True env s v ((p, e) # pes) v' (s', r)", "by (metis mat_cons4)"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s' r. evaluate_match True env s v (pe # pes) v' (s', r)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}