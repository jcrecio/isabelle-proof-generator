{"file_name": "/home/qj213/afp-2021-10-22/thys/AI_Planning_Languages_Semantics/Option_Monad_Add.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AI_Planning_Languages_Semantics", "problem_names": ["lemma omap_cong[fundef_cong]:\n    assumes \"\\<And>x. x\\<in>set l' \\<Longrightarrow> f x = f' x\"\n    assumes \"l=l'\"\n    shows \"omap f l = omap f' l'\"", "lemma assert_eq_iff[simp]: \n    \"oassert \\<Phi> = None \\<longleftrightarrow> \\<not>\\<Phi>\"  \n    \"oassert \\<Phi> = Some u \\<longleftrightarrow> \\<Phi>\"", "lemma omap_length[simp]: \"omap f l = Some l' \\<Longrightarrow> length l' = length l\"", "lemma omap_append[simp]: \"omap f (xs@ys) = do {xs \\<leftarrow> omap f xs; ys \\<leftarrow> omap f ys; Some (xs@ys)}\"", "lemma omap_alt: \"omap f l = Some l' \\<longleftrightarrow> (l' = map (the o f) l \\<and> (\\<forall>x\\<in>set l. f x \\<noteq> None))\"", "lemma omap_alt_None: \"omap f l = None \\<longleftrightarrow> (\\<exists>x\\<in>set l. f x = None)\"", "lemma omap_nth: \"\\<lbrakk>omap f l = Some l'; i<length l\\<rbrakk> \\<Longrightarrow> f (l!i) = Some (l'!i)\"", "lemma omap_eq_Nil_conv[simp]: \"omap f xs = Some [] \\<longleftrightarrow> xs=[]\"", "lemma omap_eq_Cons_conv[simp]: \"omap f xs = Some (y#ys') \\<longleftrightarrow> (\\<exists>x xs'. xs=x#xs' \\<and> f x = Some y \\<and> omap f xs' = Some ys')\"", "lemma omap_eq_append_conv[simp]: \"omap f xs = Some (ys\\<^sub>1@ys\\<^sub>2) \\<longleftrightarrow> (\\<exists>xs\\<^sub>1 xs\\<^sub>2. xs=xs\\<^sub>1@xs\\<^sub>2 \\<and> omap f xs\\<^sub>1 = Some ys\\<^sub>1 \\<and> omap f xs\\<^sub>2 = Some ys\\<^sub>2)\"", "lemma omap_list_all2_conv: \"omap f xs = Some ys \\<longleftrightarrow> (list_all2 (\\<lambda>x y. f x = Some y)) xs ys\"", "lemma omap_option_conv:\n    \"omap_option f xx = None \\<longleftrightarrow> (\\<exists>x. xx=Some x \\<and> f x = None)\" \n    \"omap_option f xx = (Some (Some x')) \\<longleftrightarrow> (\\<exists>x. xx=Some x \\<and> f x = Some x')\"\n    \"omap_option f xx = (Some None) \\<longleftrightarrow> xx=None\"", "lemma omap_option_eq: \"omap_option f x = (case x of None \\<Rightarrow> Some None | Some x \\<Rightarrow> do { x \\<leftarrow> f x; Some (Some x) })\""], "translations": [["", "lemma omap_cong[fundef_cong]:\n    assumes \"\\<And>x. x\\<in>set l' \\<Longrightarrow> f x = f' x\"\n    assumes \"l=l'\"\n    shows \"omap f l = omap f' l'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. omap f l = omap f' l'", "unfolding assms(2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. omap f l' = omap f' l'", "using assms(1)"], ["proof (prove)\nusing this:\n  ?x \\<in> set l' \\<Longrightarrow> f ?x = f' ?x\n\ngoal (1 subgoal):\n 1. omap f l' = omap f' l'", "by (induction l') (auto)"], ["", "lemma assert_eq_iff[simp]: \n    \"oassert \\<Phi> = None \\<longleftrightarrow> \\<not>\\<Phi>\"  \n    \"oassert \\<Phi> = Some u \\<longleftrightarrow> \\<Phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (oassert \\<Phi> = None) = (\\<not> \\<Phi>) &&&\n    (oassert \\<Phi> = Some u) = \\<Phi>", "unfolding oassert_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((if \\<Phi> then Some () else None) = None) = (\\<not> \\<Phi>) &&&\n    ((if \\<Phi> then Some () else None) = Some u) = \\<Phi>", "by auto"], ["", "lemma omap_length[simp]: \"omap f l = Some l' \\<Longrightarrow> length l' = length l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. omap f l = Some l' \\<Longrightarrow> length l' = length l", "apply (induction l arbitrary: l')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l'. omap f [] = Some l' \\<Longrightarrow> length l' = length []\n 2. \\<And>a l l'.\n       \\<lbrakk>\\<And>l'.\n                   omap f l = Some l' \\<Longrightarrow>\n                   length l' = length l;\n        omap f (a # l) = Some l'\\<rbrakk>\n       \\<Longrightarrow> length l' = length (a # l)", "apply (auto split: Option.bind_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma omap_append[simp]: \"omap f (xs@ys) = do {xs \\<leftarrow> omap f xs; ys \\<leftarrow> omap f ys; Some (xs@ys)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. omap f (xs @ ys) =\n    omap f xs \\<bind>\n    (\\<lambda>xs. omap f ys \\<bind> (\\<lambda>ys. Some (xs @ ys)))", "by (induction xs) (auto)"], ["", "lemma omap_alt: \"omap f l = Some l' \\<longleftrightarrow> (l' = map (the o f) l \\<and> (\\<forall>x\\<in>set l. f x \\<noteq> None))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (omap f l = Some l') =\n    (l' = map (the \\<circ> f) l \\<and>\n     (\\<forall>x\\<in>set l. f x \\<noteq> None))", "apply (induction l arbitrary: l')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l'.\n       (omap f [] = Some l') =\n       (l' = map (the \\<circ> f) [] \\<and>\n        (\\<forall>x\\<in>set []. f x \\<noteq> None))\n 2. \\<And>a l l'.\n       (\\<And>l'.\n           (omap f l = Some l') =\n           (l' = map (the \\<circ> f) l \\<and>\n            (\\<forall>x\\<in>set l. f x \\<noteq> None))) \\<Longrightarrow>\n       (omap f (a # l) = Some l') =\n       (l' = map (the \\<circ> f) (a # l) \\<and>\n        (\\<forall>x\\<in>set (a # l). f x \\<noteq> None))", "apply (auto split: Option.bind_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma omap_alt_None: \"omap f l = None \\<longleftrightarrow> (\\<exists>x\\<in>set l. f x = None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (omap f l = None) = (\\<exists>x\\<in>set l. f x = None)", "apply (induction l)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (omap f [] = None) = (\\<exists>x\\<in>set []. f x = None)\n 2. \\<And>a l.\n       (omap f l = None) =\n       (\\<exists>x\\<in>set l. f x = None) \\<Longrightarrow>\n       (omap f (a # l) = None) = (\\<exists>x\\<in>set (a # l). f x = None)", "apply (auto split: Option.bind_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma omap_nth: \"\\<lbrakk>omap f l = Some l'; i<length l\\<rbrakk> \\<Longrightarrow> f (l!i) = Some (l'!i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>omap f l = Some l'; i < length l\\<rbrakk>\n    \\<Longrightarrow> f (l ! i) = Some (l' ! i)", "apply (induction l arbitrary: l' i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l' i.\n       \\<lbrakk>omap f [] = Some l'; i < length []\\<rbrakk>\n       \\<Longrightarrow> f ([] ! i) = Some (l' ! i)\n 2. \\<And>a l l' i.\n       \\<lbrakk>\\<And>l' i.\n                   \\<lbrakk>omap f l = Some l'; i < length l\\<rbrakk>\n                   \\<Longrightarrow> f (l ! i) = Some (l' ! i);\n        omap f (a # l) = Some l'; i < length (a # l)\\<rbrakk>\n       \\<Longrightarrow> f ((a # l) ! i) = Some (l' ! i)", "apply (auto split: Option.bind_splits simp: nth_Cons split: nat.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma omap_eq_Nil_conv[simp]: \"omap f xs = Some [] \\<longleftrightarrow> xs=[]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (omap f xs = Some []) = (xs = [])", "apply (cases xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow> (omap f xs = Some []) = (xs = [])\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow> (omap f xs = Some []) = (xs = [])", "apply (auto split: Option.bind_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma omap_eq_Cons_conv[simp]: \"omap f xs = Some (y#ys') \\<longleftrightarrow> (\\<exists>x xs'. xs=x#xs' \\<and> f x = Some y \\<and> omap f xs' = Some ys')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (omap f xs = Some (y # ys')) =\n    (\\<exists>x xs'.\n        xs = x # xs' \\<and> f x = Some y \\<and> omap f xs' = Some ys')", "apply (cases xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    (omap f xs = Some (y # ys')) =\n    (\\<exists>x xs'.\n        xs = x # xs' \\<and> f x = Some y \\<and> omap f xs' = Some ys')\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       (omap f xs = Some (y # ys')) =\n       (\\<exists>x xs'.\n           xs = x # xs' \\<and> f x = Some y \\<and> omap f xs' = Some ys')", "apply (auto split: Option.bind_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma omap_eq_append_conv[simp]: \"omap f xs = Some (ys\\<^sub>1@ys\\<^sub>2) \\<longleftrightarrow> (\\<exists>xs\\<^sub>1 xs\\<^sub>2. xs=xs\\<^sub>1@xs\\<^sub>2 \\<and> omap f xs\\<^sub>1 = Some ys\\<^sub>1 \\<and> omap f xs\\<^sub>2 = Some ys\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (omap f xs = Some (ys\\<^sub>1 @ ys\\<^sub>2)) =\n    (\\<exists>xs\\<^sub>1 xs\\<^sub>2.\n        xs = xs\\<^sub>1 @ xs\\<^sub>2 \\<and>\n        omap f xs\\<^sub>1 = Some ys\\<^sub>1 \\<and>\n        omap f xs\\<^sub>2 = Some ys\\<^sub>2)", "apply (induction ys\\<^sub>1 arbitrary: xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       (omap f xs = Some ([] @ ys\\<^sub>2)) =\n       (\\<exists>xs\\<^sub>1 xs\\<^sub>2.\n           xs = xs\\<^sub>1 @ xs\\<^sub>2 \\<and>\n           omap f xs\\<^sub>1 = Some [] \\<and>\n           omap f xs\\<^sub>2 = Some ys\\<^sub>2)\n 2. \\<And>a ys\\<^sub>1 xs.\n       (\\<And>xs.\n           (omap f xs = Some (ys\\<^sub>1 @ ys\\<^sub>2)) =\n           (\\<exists>xs\\<^sub>1 xs\\<^sub>2.\n               xs = xs\\<^sub>1 @ xs\\<^sub>2 \\<and>\n               omap f xs\\<^sub>1 = Some ys\\<^sub>1 \\<and>\n               omap f xs\\<^sub>2 = Some ys\\<^sub>2)) \\<Longrightarrow>\n       (omap f xs = Some ((a # ys\\<^sub>1) @ ys\\<^sub>2)) =\n       (\\<exists>xs\\<^sub>1 xs\\<^sub>2.\n           xs = xs\\<^sub>1 @ xs\\<^sub>2 \\<and>\n           omap f xs\\<^sub>1 = Some (a # ys\\<^sub>1) \\<and>\n           omap f xs\\<^sub>2 = Some ys\\<^sub>2)", "apply (auto 0 3 split: Option.bind_splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ys\\<^sub>1 x xs\\<^sub>1 xs\\<^sub>2.\n       \\<lbrakk>\\<And>xs.\n                   (omap f xs = Some (ys\\<^sub>1 @ ys\\<^sub>2)) =\n                   (\\<exists>xs\\<^sub>1 xs\\<^sub>2.\n                       xs = xs\\<^sub>1 @ xs\\<^sub>2 \\<and>\n                       omap f xs\\<^sub>1 = Some ys\\<^sub>1 \\<and>\n                       omap f xs\\<^sub>2 = Some ys\\<^sub>2);\n        f x = Some a; omap f xs\\<^sub>1 = Some ys\\<^sub>1;\n        omap f xs\\<^sub>2 = Some ys\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs\\<^sub>1' xs\\<^sub>2'.\n                            x # xs\\<^sub>1 @ xs\\<^sub>2 =\n                            xs\\<^sub>1' @ xs\\<^sub>2' \\<and>\n                            (\\<exists>x xs'.\n                                xs\\<^sub>1' = x # xs' \\<and>\n                                f x = Some a \\<and>\n                                omap f xs' = Some ys\\<^sub>1) \\<and>\n                            omap f xs\\<^sub>2' = Some ys\\<^sub>2", "apply (metis append_Cons)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma omap_list_all2_conv: \"omap f xs = Some ys \\<longleftrightarrow> (list_all2 (\\<lambda>x y. f x = Some y)) xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (omap f xs = Some ys) = list_all2 (\\<lambda>x y. f x = Some y) xs ys", "apply (induction xs arbitrary: ys)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys.\n       (omap f [] = Some ys) = list_all2 (\\<lambda>x y. f x = Some y) [] ys\n 2. \\<And>a xs ys.\n       (\\<And>ys.\n           (omap f xs = Some ys) =\n           list_all2 (\\<lambda>x y. f x = Some y) xs ys) \\<Longrightarrow>\n       (omap f (a # xs) = Some ys) =\n       list_all2 (\\<lambda>x y. f x = Some y) (a # xs) ys", "apply (auto split: Option.bind_splits simp: )"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   (omap f xs = Some ys) =\n                   list_all2 (\\<lambda>x y. f x = Some y) xs ys;\n        f a = None;\n        list_all2 (\\<lambda>x y. f x = Some y) (a # xs) ys\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a xs ys v.\n       \\<lbrakk>\\<And>ys.\n                   \\<not> list_all2 (\\<lambda>x y. f x = Some y) xs ys;\n        omap f xs = None; f a = Some v;\n        list_all2 (\\<lambda>x y. f x = Some y) (a # xs) ys\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a xs ys v va.\n       \\<lbrakk>\\<And>ys.\n                   (omap f xs = Some ys) =\n                   list_all2 (\\<lambda>x y. f x = Some y) xs ys;\n        list_all2 (\\<lambda>x y. f x = Some y) xs va; f a = Some v;\n        list_all2 (\\<lambda>x y. f x = Some y) (a # xs) ys\\<rbrakk>\n       \\<Longrightarrow> v # va = ys", "apply (simp add: list_all2_Cons1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs ys v.\n       \\<lbrakk>\\<And>ys.\n                   \\<not> list_all2 (\\<lambda>x y. f x = Some y) xs ys;\n        omap f xs = None; f a = Some v;\n        list_all2 (\\<lambda>x y. f x = Some y) (a # xs) ys\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a xs ys v va.\n       \\<lbrakk>\\<And>ys.\n                   (omap f xs = Some ys) =\n                   list_all2 (\\<lambda>x y. f x = Some y) xs ys;\n        list_all2 (\\<lambda>x y. f x = Some y) xs va; f a = Some v;\n        list_all2 (\\<lambda>x y. f x = Some y) (a # xs) ys\\<rbrakk>\n       \\<Longrightarrow> v # va = ys", "apply (simp add: list_all2_Cons1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs ys v va.\n       \\<lbrakk>\\<And>ys.\n                   (omap f xs = Some ys) =\n                   list_all2 (\\<lambda>x y. f x = Some y) xs ys;\n        list_all2 (\\<lambda>x y. f x = Some y) xs va; f a = Some v;\n        list_all2 (\\<lambda>x y. f x = Some y) (a # xs) ys\\<rbrakk>\n       \\<Longrightarrow> v # va = ys", "apply (simp add: list_all2_Cons1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs ys v va.\n       \\<lbrakk>\\<And>ys.\n                   (omap f xs = Some ys) =\n                   list_all2 (\\<lambda>x y. f x = Some y) xs ys;\n        list_all2 (\\<lambda>x y. f x = Some y) xs va; f a = Some v;\n        \\<exists>zs.\n           ys = v # zs \\<and>\n           list_all2 (\\<lambda>x y. f x = Some y) xs zs\\<rbrakk>\n       \\<Longrightarrow> v # va = ys", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs v va zs.\n       \\<lbrakk>\\<And>ys.\n                   (omap f xs = Some ys) =\n                   list_all2 (\\<lambda>x y. f x = Some y) xs ys;\n        list_all2 (\\<lambda>x y. f x = Some y) xs va; f a = Some v;\n        list_all2 (\\<lambda>x y. f x = Some y) xs zs\\<rbrakk>\n       \\<Longrightarrow> va = zs", "by (metis option.inject)"], ["", "fun omap_option where\n    \"omap_option f None = Some None\"    \n  | \"omap_option f (Some x) = do { x \\<leftarrow> f x; Some (Some x) }\""], ["", "lemma omap_option_conv:\n    \"omap_option f xx = None \\<longleftrightarrow> (\\<exists>x. xx=Some x \\<and> f x = None)\" \n    \"omap_option f xx = (Some (Some x')) \\<longleftrightarrow> (\\<exists>x. xx=Some x \\<and> f x = Some x')\"\n    \"omap_option f xx = (Some None) \\<longleftrightarrow> xx=None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (omap_option f xx = None) =\n    (\\<exists>x. xx = Some x \\<and> f x = None) &&&\n    (omap_option f xx = Some (Some x')) =\n    (\\<exists>x. xx = Some x \\<and> f x = Some x') &&&\n    (omap_option f xx = Some None) = (xx = None)", "by (cases xx;auto split: Option.bind_splits)+"], ["", "lemma omap_option_eq: \"omap_option f x = (case x of None \\<Rightarrow> Some None | Some x \\<Rightarrow> do { x \\<leftarrow> f x; Some (Some x) })\""], ["proof (prove)\ngoal (1 subgoal):\n 1. omap_option f x =\n    (case x of None \\<Rightarrow> Some None\n     | Some x \\<Rightarrow> f x \\<bind> (\\<lambda>x. Some (Some x)))", "by (auto split: option.split)"], ["", "fun omap_prod where\n    \"omap_prod f\\<^sub>1 f\\<^sub>2 (a,b) = do { a\\<leftarrow>f\\<^sub>1 a; b\\<leftarrow>f\\<^sub>2 b; Some (a,b) }\""], ["", "(* Extend map function for datatype to option monad.\n    TODO: Show reasonable lemmas, like parametricity, etc. \n    Hopefully only depending on BNF-property of datatype\n   *)"], ["", "definition \"omap_dt setf mapf f obj \\<equiv> do {\n    oassert (\\<forall>x\\<in>setf obj. f x \\<noteq> None);\n    Some (mapf (the o f) obj)\n  }\""], ["", "end"]]}