{"file_name": "/home/qj213/afp-2021-10-22/thys/LOFT/Semantics_OpenFlow.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LOFT", "problem_names": ["lemma check_no_overlap_alt: \"check_no_overlap \\<gamma> ft = check_no_overlap2 \\<gamma> ft\"", "lemma no_overlap_not_unefined: \"check_no_overlap \\<gamma> ft \\<Longrightarrow> OF_same_priority_match2 \\<gamma> ft p \\<noteq> Undefined\"", "lemma OF_match_linear_ne_Undefined: \"OF_match_linear \\<gamma> ft p \\<noteq> Undefined\"", "lemma OF_match_linear_append: \"OF_match_linear \\<gamma> (a @ b) p = (case OF_match_linear \\<gamma> a p of NoAction \\<Rightarrow> OF_match_linear \\<gamma> b p | x \\<Rightarrow> x)\"", "lemma OF_match_linear_match_allsameaction: \"\\<lbrakk>gr \\<in> set oms; \\<gamma> gr p = True\\<rbrakk>\n       \\<Longrightarrow> OF_match_linear \\<gamma> (map (\\<lambda>x. split3 OFEntry (pri, x, act)) oms) p = Action act\"", "lemma OF_lm_noa_none_iff: \"OF_match_linear \\<gamma> ft p = NoAction \\<longleftrightarrow> (\\<forall>e\\<in>set ft. \\<not> \\<gamma> (ofe_fields e) p)\"", "lemma set_eq_rule: \"(\\<And>x. x \\<in> a \\<Longrightarrow> x \\<in> b) \\<Longrightarrow> (\\<And>x. x \\<in> b \\<Longrightarrow> x \\<in> a) \\<Longrightarrow> a = b\"", "lemma unmatching_insert_agnostic: \"\\<not> \\<gamma> (ofe_fields a) p \\<Longrightarrow> OF_same_priority_match2 \\<gamma> (a # ft) p = OF_same_priority_match2 \\<gamma> ft p\"", "lemma OF_match_eq: \"sorted_descending (map ofe_prio ft) \\<Longrightarrow> check_no_overlap \\<gamma> ft \\<Longrightarrow> \n\tOF_same_priority_match2 \\<gamma> ft p = OF_match_linear \\<gamma> ft p\"", "lemma overlap_sort_invar[simp]: \"check_no_overlap \\<gamma> (sort_descending_key k ft) = check_no_overlap \\<gamma> ft\"", "lemma OF_match_eq2: \n  assumes \"check_no_overlap \\<gamma> ft\"\n  shows \"OF_same_priority_match2 \\<gamma> ft p = OF_match_linear \\<gamma> (sort_descending_key ofe_prio ft) p\"", "lemma prio_match_matcher_alt: \"{f. f \\<in> set flow_entries \\<and> \\<gamma> (ofe_fields f) packet \\<and> \n  \t  (\\<forall>fo \\<in> set flow_entries. ofe_prio fo > ofe_prio f \\<longrightarrow> \\<not>\\<gamma> (ofe_fields fo) packet)}\n  \t  = (\n  \t  let matching = {f. f \\<in> set flow_entries \\<and> \\<gamma> (ofe_fields f) packet} \n  \t  in {f. f \\<in> matching \\<and> (\\<forall>fo \\<in> matching. ofe_prio fo \\<le> ofe_prio f)}\n  \t  )\"", "lemma prio_match_matcher_alt2: \"(\n  \t  let matching = {f. f \\<in> set flow_entries \\<and> \\<gamma> (ofe_fields f) packet} \n  \t  in {f. f \\<in> matching \\<and> (\\<forall>fo \\<in> matching. ofe_prio fo \\<le> ofe_prio f)}\n  \t  ) = set (\n  \t  let matching = filter (\\<lambda>f. \\<gamma> (ofe_fields f) packet) flow_entries\n  \t  in filter (\\<lambda>f. \\<forall>fo \\<in> set matching. ofe_prio fo \\<le> ofe_prio f) matching\n  \t  )\"", "lemma filter_singleton: \"[x\\<leftarrow>s. f x] = [y] \\<Longrightarrow> f y \\<and> y \\<in> set s\"", "lemma OF_spm3_get_fe: \"OF_priority_match \\<gamma> ft p = Action a \\<Longrightarrow> \\<exists>fe. ofe_action fe = a \\<and> fe \\<in> set ft \\<and> OF_priority_match_ana \\<gamma> ft p = Action fe\"", "lemma no_overlap_ConsI: \"check_no_overlap2 \\<gamma> (x#xs) \\<Longrightarrow> check_no_overlap2 \\<gamma> xs\"", "lemma no_overlapsI: \"check_no_overlap \\<gamma> t \\<Longrightarrow> distinct t \\<Longrightarrow> no_overlaps \\<gamma> t\"", "lemma check_no_overlapI: \"no_overlaps \\<gamma> t \\<Longrightarrow> check_no_overlap \\<gamma> t\"", "lemma \"(\\<And>e p. e \\<in> set t \\<Longrightarrow> \\<not>\\<gamma> (ofe_fields e) p) \\<Longrightarrow> no_overlaps \\<gamma> t\"", "lemma no_overlaps_append: \"no_overlaps \\<gamma> (x @ y) \\<Longrightarrow> no_overlaps \\<gamma> y\"", "lemma no_overlaps_ne1: \"no_overlaps \\<gamma> (x @ a # y @ b # z) \\<Longrightarrow> ((\\<exists>p. \\<gamma> (ofe_fields a) p) \\<or> (\\<exists>p. \\<gamma> (ofe_fields b) p)) \\<Longrightarrow> a \\<noteq> b\"", "lemma no_overlaps_defeq: \"no_overlaps \\<gamma> fe \\<Longrightarrow> OF_same_priority_match2 \\<gamma> fe p = OF_priority_match \\<gamma> fe p\"", "lemma \"distinct fe \\<Longrightarrow> check_no_overlap \\<gamma> fe \\<Longrightarrow> OF_same_priority_match2 \\<gamma> fe p = OF_priority_match \\<gamma> fe p\"", "theorem OF_eq:\n\tassumes no: \"no_overlaps \\<gamma> f\"\n\t    and so: \"sorted_descending (map ofe_prio f)\"\n\tshows \"OF_match_linear \\<gamma> f p = OF_priority_match \\<gamma> f p\"", "lemma OF_lm_noa_none: \"OF_match_linear \\<gamma> ft p = NoAction \\<Longrightarrow> \\<forall>e\\<in>set ft. \\<not> \\<gamma> (ofe_fields e) p\"", "lemma OF_spm3_noa_none:\n\tassumes no: \"no_overlaps \\<gamma> ft\"\n\tshows \"OF_priority_match \\<gamma> ft p = NoAction \\<Longrightarrow> \\<forall>e \\<in> set ft. \\<not>\\<gamma> (ofe_fields e) p\"", "lemma no_overlaps_not_unefined: \"no_overlaps \\<gamma> ft \\<Longrightarrow> OF_priority_match \\<gamma> ft p \\<noteq> Undefined\""], "translations": [["", "lemma check_no_overlap_alt: \"check_no_overlap \\<gamma> ft = check_no_overlap2 \\<gamma> ft\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check_no_overlap \\<gamma> ft = check_no_overlap2 \\<gamma> ft", "unfolding check_no_overlap2_def check_no_overlap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set ft.\n        \\<forall>b\\<in>set ft.\n           \\<forall>p\\<in>UNIV.\n              ofe_prio a = ofe_prio b \\<and>\n              \\<gamma> (ofe_fields a) p \\<and>\n              a \\<noteq> b \\<longrightarrow>\n              \\<not> \\<gamma> (ofe_fields b) p) =\n    (\\<forall>a\\<in>set ft.\n        \\<forall>b\\<in>set ft.\n           a \\<noteq> b \\<and> ofe_prio a = ofe_prio b \\<longrightarrow>\n           \\<not> (\\<exists>p\\<in>UNIV.\n                      \\<gamma> (ofe_fields a) p \\<and>\n                      \\<gamma> (ofe_fields b) p))", "by blast"], ["", "(* If there are no overlapping rules, our match should check out. *)"], ["", "lemma no_overlap_not_unefined: \"check_no_overlap \\<gamma> ft \\<Longrightarrow> OF_same_priority_match2 \\<gamma> ft p \\<noteq> Undefined\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check_no_overlap \\<gamma> ft \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> ft p \\<noteq> Undefined", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>check_no_overlap \\<gamma> ft;\n     OF_same_priority_match2 \\<gamma> ft p = Undefined\\<rbrakk>\n    \\<Longrightarrow> False", "assume goal1: \"check_no_overlap \\<gamma> ft\" \"OF_same_priority_match2 \\<gamma> ft p = Undefined\""], ["proof (state)\nthis:\n  check_no_overlap \\<gamma> ft\n  OF_same_priority_match2 \\<gamma> ft p = Undefined\n\ngoal (1 subgoal):\n 1. \\<lbrakk>check_no_overlap \\<gamma> ft;\n     OF_same_priority_match2 \\<gamma> ft p = Undefined\\<rbrakk>\n    \\<Longrightarrow> False", "let ?as = \"{f. f \\<in> set ft \\<and> \\<gamma> (ofe_fields f) p \\<and> (\\<forall>fo \\<in> set ft. ofe_prio f < ofe_prio fo \\<longrightarrow> \\<not> \\<gamma> (ofe_fields fo) p)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>check_no_overlap \\<gamma> ft;\n     OF_same_priority_match2 \\<gamma> ft p = Undefined\\<rbrakk>\n    \\<Longrightarrow> False", "have fin: \"finite ?as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {f \\<in> set ft.\n      \\<gamma> (ofe_fields f) p \\<and>\n      (\\<forall>fo\\<in>set ft.\n          ofe_prio f < ofe_prio fo \\<longrightarrow>\n          \\<not> \\<gamma> (ofe_fields fo) p)}", "by simp"], ["proof (state)\nthis:\n  finite\n   {f \\<in> set ft.\n    \\<gamma> (ofe_fields f) p \\<and>\n    (\\<forall>fo\\<in>set ft.\n        ofe_prio f < ofe_prio fo \\<longrightarrow>\n        \\<not> \\<gamma> (ofe_fields fo) p)}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>check_no_overlap \\<gamma> ft;\n     OF_same_priority_match2 \\<gamma> ft p = Undefined\\<rbrakk>\n    \\<Longrightarrow> False", "note goal1(2)[unfolded OF_same_priority_match2_def]"], ["proof (state)\nthis:\n  (let s = {ofe_action f |f.\n            f \\<in> set ft \\<and>\n            \\<gamma> (ofe_fields f) p \\<and>\n            (\\<forall>fo\\<in>set ft.\n                ofe_prio f < ofe_prio fo \\<longrightarrow>\n                \\<not> \\<gamma> (ofe_fields fo) p)}\n   in case card s of 0 \\<Rightarrow> NoAction\n      | Suc 0 \\<Rightarrow> Action (the_elem s)\n      | Suc (Suc nata) \\<Rightarrow> Undefined) =\n  Undefined\n\ngoal (1 subgoal):\n 1. \\<lbrakk>check_no_overlap \\<gamma> ft;\n     OF_same_priority_match2 \\<gamma> ft p = Undefined\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  (let s = {ofe_action f |f.\n            f \\<in> set ft \\<and>\n            \\<gamma> (ofe_fields f) p \\<and>\n            (\\<forall>fo\\<in>set ft.\n                ofe_prio f < ofe_prio fo \\<longrightarrow>\n                \\<not> \\<gamma> (ofe_fields fo) p)}\n   in case card s of 0 \\<Rightarrow> NoAction\n      | Suc 0 \\<Rightarrow> Action (the_elem s)\n      | Suc (Suc nata) \\<Rightarrow> Undefined) =\n  Undefined", "have \"2 \\<le> card (ofe_action ` ?as)\""], ["proof (prove)\nusing this:\n  (let s = {ofe_action f |f.\n            f \\<in> set ft \\<and>\n            \\<gamma> (ofe_fields f) p \\<and>\n            (\\<forall>fo\\<in>set ft.\n                ofe_prio f < ofe_prio fo \\<longrightarrow>\n                \\<not> \\<gamma> (ofe_fields fo) p)}\n   in case card s of 0 \\<Rightarrow> NoAction\n      | Suc 0 \\<Rightarrow> Action (the_elem s)\n      | Suc (Suc nata) \\<Rightarrow> Undefined) =\n  Undefined\n\ngoal (1 subgoal):\n 1. 2 \\<le> card\n             (ofe_action `\n              {f \\<in> set ft.\n               \\<gamma> (ofe_fields f) p \\<and>\n               (\\<forall>fo\\<in>set ft.\n                   ofe_prio f < ofe_prio fo \\<longrightarrow>\n                   \\<not> \\<gamma> (ofe_fields fo) p)})", "unfolding f_Img_ex_set"], ["proof (prove)\nusing this:\n  (let s = ofe_action `\n           {f \\<in> set ft.\n            \\<gamma> (ofe_fields f) p \\<and>\n            (\\<forall>fo\\<in>set ft.\n                ofe_prio f < ofe_prio fo \\<longrightarrow>\n                \\<not> \\<gamma> (ofe_fields fo) p)}\n   in case card s of 0 \\<Rightarrow> NoAction\n      | Suc 0 \\<Rightarrow> Action (the_elem s)\n      | Suc (Suc nata) \\<Rightarrow> Undefined) =\n  Undefined\n\ngoal (1 subgoal):\n 1. 2 \\<le> card\n             (ofe_action `\n              {f \\<in> set ft.\n               \\<gamma> (ofe_fields f) p \\<and>\n               (\\<forall>fo\\<in>set ft.\n                   ofe_prio f < ofe_prio fo \\<longrightarrow>\n                   \\<not> \\<gamma> (ofe_fields fo) p)})", "unfolding Let_def"], ["proof (prove)\nusing this:\n  (case card\n         (ofe_action `\n          {f \\<in> set ft.\n           \\<gamma> (ofe_fields f) p \\<and>\n           (\\<forall>fo\\<in>set ft.\n               ofe_prio f < ofe_prio fo \\<longrightarrow>\n               \\<not> \\<gamma> (ofe_fields fo) p)}) of\n   0 \\<Rightarrow> NoAction\n   | Suc 0 \\<Rightarrow>\n       Action\n        (the_elem\n          (ofe_action `\n           {f \\<in> set ft.\n            \\<gamma> (ofe_fields f) p \\<and>\n            (\\<forall>fo\\<in>set ft.\n                ofe_prio f < ofe_prio fo \\<longrightarrow>\n                \\<not> \\<gamma> (ofe_fields fo) p)}))\n   | Suc (Suc nata) \\<Rightarrow> Undefined) =\n  Undefined\n\ngoal (1 subgoal):\n 1. 2 \\<le> card\n             (ofe_action `\n              {f \\<in> set ft.\n               \\<gamma> (ofe_fields f) p \\<and>\n               (\\<forall>fo\\<in>set ft.\n                   ofe_prio f < ofe_prio fo \\<longrightarrow>\n                   \\<not> \\<gamma> (ofe_fields fo) p)})", "by(cases \"card (ofe_action ` ?as)\", simp) (rename_tac nat1, case_tac nat1, simp add: image_Collect, presburger)"], ["proof (state)\nthis:\n  2 \\<le> card\n           (ofe_action `\n            {f \\<in> set ft.\n             \\<gamma> (ofe_fields f) p \\<and>\n             (\\<forall>fo\\<in>set ft.\n                 ofe_prio f < ofe_prio fo \\<longrightarrow>\n                 \\<not> \\<gamma> (ofe_fields fo) p)})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>check_no_overlap \\<gamma> ft;\n     OF_same_priority_match2 \\<gamma> ft p = Undefined\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  2 \\<le> card\n           (ofe_action `\n            {f \\<in> set ft.\n             \\<gamma> (ofe_fields f) p \\<and>\n             (\\<forall>fo\\<in>set ft.\n                 ofe_prio f < ofe_prio fo \\<longrightarrow>\n                 \\<not> \\<gamma> (ofe_fields fo) p)})", "have \"2 \\<le> card ?as\""], ["proof (prove)\nusing this:\n  2 \\<le> card\n           (ofe_action `\n            {f \\<in> set ft.\n             \\<gamma> (ofe_fields f) p \\<and>\n             (\\<forall>fo\\<in>set ft.\n                 ofe_prio f < ofe_prio fo \\<longrightarrow>\n                 \\<not> \\<gamma> (ofe_fields fo) p)})\n\ngoal (1 subgoal):\n 1. 2 \\<le> card\n             {f \\<in> set ft.\n              \\<gamma> (ofe_fields f) p \\<and>\n              (\\<forall>fo\\<in>set ft.\n                  ofe_prio f < ofe_prio fo \\<longrightarrow>\n                  \\<not> \\<gamma> (ofe_fields fo) p)}", "using card_image_le[OF fin, of ofe_action]"], ["proof (prove)\nusing this:\n  2 \\<le> card\n           (ofe_action `\n            {f \\<in> set ft.\n             \\<gamma> (ofe_fields f) p \\<and>\n             (\\<forall>fo\\<in>set ft.\n                 ofe_prio f < ofe_prio fo \\<longrightarrow>\n                 \\<not> \\<gamma> (ofe_fields fo) p)})\n  card\n   (ofe_action `\n    {f \\<in> set ft.\n     \\<gamma> (ofe_fields f) p \\<and>\n     (\\<forall>fo\\<in>set ft.\n         ofe_prio f < ofe_prio fo \\<longrightarrow>\n         \\<not> \\<gamma> (ofe_fields fo) p)})\n  \\<le> card\n         {f \\<in> set ft.\n          \\<gamma> (ofe_fields f) p \\<and>\n          (\\<forall>fo\\<in>set ft.\n              ofe_prio f < ofe_prio fo \\<longrightarrow>\n              \\<not> \\<gamma> (ofe_fields fo) p)}\n\ngoal (1 subgoal):\n 1. 2 \\<le> card\n             {f \\<in> set ft.\n              \\<gamma> (ofe_fields f) p \\<and>\n              (\\<forall>fo\\<in>set ft.\n                  ofe_prio f < ofe_prio fo \\<longrightarrow>\n                  \\<not> \\<gamma> (ofe_fields fo) p)}", "by linarith"], ["proof (state)\nthis:\n  2 \\<le> card\n           {f \\<in> set ft.\n            \\<gamma> (ofe_fields f) p \\<and>\n            (\\<forall>fo\\<in>set ft.\n                ofe_prio f < ofe_prio fo \\<longrightarrow>\n                \\<not> \\<gamma> (ofe_fields fo) p)}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>check_no_overlap \\<gamma> ft;\n     OF_same_priority_match2 \\<gamma> ft p = Undefined\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  2 \\<le> card\n           {f \\<in> set ft.\n            \\<gamma> (ofe_fields f) p \\<and>\n            (\\<forall>fo\\<in>set ft.\n                ofe_prio f < ofe_prio fo \\<longrightarrow>\n                \\<not> \\<gamma> (ofe_fields fo) p)}", "obtain a b where ab: \"a \\<noteq> b\" \"a \\<in> ?as\" \"b \\<in> ?as\""], ["proof (prove)\nusing this:\n  2 \\<le> card\n           {f \\<in> set ft.\n            \\<gamma> (ofe_fields f) p \\<and>\n            (\\<forall>fo\\<in>set ft.\n                ofe_prio f < ofe_prio fo \\<longrightarrow>\n                \\<not> \\<gamma> (ofe_fields fo) p)}\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>a \\<noteq> b;\n         a \\<in> {f \\<in> set ft.\n                  \\<gamma> (ofe_fields f) p \\<and>\n                  (\\<forall>fo\\<in>set ft.\n                      ofe_prio f < ofe_prio fo \\<longrightarrow>\n                      \\<not> \\<gamma> (ofe_fields fo) p)};\n         b \\<in> {f \\<in> set ft.\n                  \\<gamma> (ofe_fields f) p \\<and>\n                  (\\<forall>fo\\<in>set ft.\n                      ofe_prio f < ofe_prio fo \\<longrightarrow>\n                      \\<not> \\<gamma> (ofe_fields fo) p)}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using card2_eI"], ["proof (prove)\nusing this:\n  2 \\<le> card\n           {f \\<in> set ft.\n            \\<gamma> (ofe_fields f) p \\<and>\n            (\\<forall>fo\\<in>set ft.\n                ofe_prio f < ofe_prio fo \\<longrightarrow>\n                \\<not> \\<gamma> (ofe_fields fo) p)}\n  2 \\<le> card ?S \\<Longrightarrow>\n  \\<exists>x y. x \\<noteq> y \\<and> x \\<in> ?S \\<and> y \\<in> ?S\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>a \\<noteq> b;\n         a \\<in> {f \\<in> set ft.\n                  \\<gamma> (ofe_fields f) p \\<and>\n                  (\\<forall>fo\\<in>set ft.\n                      ofe_prio f < ofe_prio fo \\<longrightarrow>\n                      \\<not> \\<gamma> (ofe_fields fo) p)};\n         b \\<in> {f \\<in> set ft.\n                  \\<gamma> (ofe_fields f) p \\<and>\n                  (\\<forall>fo\\<in>set ft.\n                      ofe_prio f < ofe_prio fo \\<longrightarrow>\n                      \\<not> \\<gamma> (ofe_fields fo) p)}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a \\<noteq> b\n  a \\<in> {f \\<in> set ft.\n           \\<gamma> (ofe_fields f) p \\<and>\n           (\\<forall>fo\\<in>set ft.\n               ofe_prio f < ofe_prio fo \\<longrightarrow>\n               \\<not> \\<gamma> (ofe_fields fo) p)}\n  b \\<in> {f \\<in> set ft.\n           \\<gamma> (ofe_fields f) p \\<and>\n           (\\<forall>fo\\<in>set ft.\n               ofe_prio f < ofe_prio fo \\<longrightarrow>\n               \\<not> \\<gamma> (ofe_fields fo) p)}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>check_no_overlap \\<gamma> ft;\n     OF_same_priority_match2 \\<gamma> ft p = Undefined\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  a \\<noteq> b\n  a \\<in> {f \\<in> set ft.\n           \\<gamma> (ofe_fields f) p \\<and>\n           (\\<forall>fo\\<in>set ft.\n               ofe_prio f < ofe_prio fo \\<longrightarrow>\n               \\<not> \\<gamma> (ofe_fields fo) p)}\n  b \\<in> {f \\<in> set ft.\n           \\<gamma> (ofe_fields f) p \\<and>\n           (\\<forall>fo\\<in>set ft.\n               ofe_prio f < ofe_prio fo \\<longrightarrow>\n               \\<not> \\<gamma> (ofe_fields fo) p)}", "have ab2: \"a \\<in> set ft\" \"\\<gamma> (ofe_fields a) p\" \"(\\<forall>fo\\<in>set ft. ofe_prio a < ofe_prio fo \\<longrightarrow> \\<not> \\<gamma> (ofe_fields fo) p)\" \n\t               \"b \\<in> set ft\" \"\\<gamma> (ofe_fields b) p\" \"(\\<forall>fo\\<in>set ft. ofe_prio b < ofe_prio fo \\<longrightarrow> \\<not> \\<gamma> (ofe_fields fo) p)\""], ["proof (prove)\nusing this:\n  a \\<noteq> b\n  a \\<in> {f \\<in> set ft.\n           \\<gamma> (ofe_fields f) p \\<and>\n           (\\<forall>fo\\<in>set ft.\n               ofe_prio f < ofe_prio fo \\<longrightarrow>\n               \\<not> \\<gamma> (ofe_fields fo) p)}\n  b \\<in> {f \\<in> set ft.\n           \\<gamma> (ofe_fields f) p \\<and>\n           (\\<forall>fo\\<in>set ft.\n               ofe_prio f < ofe_prio fo \\<longrightarrow>\n               \\<not> \\<gamma> (ofe_fields fo) p)}\n\ngoal (1 subgoal):\n 1. (a \\<in> set ft &&&\n     \\<gamma> (ofe_fields a) p &&&\n     \\<forall>fo\\<in>set ft.\n        ofe_prio a < ofe_prio fo \\<longrightarrow>\n        \\<not> \\<gamma> (ofe_fields fo) p) &&&\n    b \\<in> set ft &&&\n    \\<gamma> (ofe_fields b) p &&&\n    \\<forall>fo\\<in>set ft.\n       ofe_prio b < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p", "by simp_all"], ["proof (state)\nthis:\n  a \\<in> set ft\n  \\<gamma> (ofe_fields a) p\n  \\<forall>fo\\<in>set ft.\n     ofe_prio a < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p\n  b \\<in> set ft\n  \\<gamma> (ofe_fields b) p\n  \\<forall>fo\\<in>set ft.\n     ofe_prio b < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>check_no_overlap \\<gamma> ft;\n     OF_same_priority_match2 \\<gamma> ft p = Undefined\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  a \\<in> set ft\n  \\<gamma> (ofe_fields a) p\n  \\<forall>fo\\<in>set ft.\n     ofe_prio a < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p\n  b \\<in> set ft\n  \\<gamma> (ofe_fields b) p\n  \\<forall>fo\\<in>set ft.\n     ofe_prio b < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p", "have \"ofe_prio a = ofe_prio b\""], ["proof (prove)\nusing this:\n  a \\<in> set ft\n  \\<gamma> (ofe_fields a) p\n  \\<forall>fo\\<in>set ft.\n     ofe_prio a < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p\n  b \\<in> set ft\n  \\<gamma> (ofe_fields b) p\n  \\<forall>fo\\<in>set ft.\n     ofe_prio b < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p\n\ngoal (1 subgoal):\n 1. ofe_prio a = ofe_prio b", "by fastforce"], ["proof (state)\nthis:\n  ofe_prio a = ofe_prio b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>check_no_overlap \\<gamma> ft;\n     OF_same_priority_match2 \\<gamma> ft p = Undefined\\<rbrakk>\n    \\<Longrightarrow> False", "note goal1(1)[unfolded check_no_overlap_def] ab2(1) ab2(4) this ab2(2) ab(1) ab2(5)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set ft.\n     \\<forall>b\\<in>set ft.\n        \\<forall>p\\<in>UNIV.\n           ofe_prio a = ofe_prio b \\<and>\n           \\<gamma> (ofe_fields a) p \\<and> a \\<noteq> b \\<longrightarrow>\n           \\<not> \\<gamma> (ofe_fields b) p\n  a \\<in> set ft\n  b \\<in> set ft\n  ofe_prio a = ofe_prio b\n  \\<gamma> (ofe_fields a) p\n  a \\<noteq> b\n  \\<gamma> (ofe_fields b) p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>check_no_overlap \\<gamma> ft;\n     OF_same_priority_match2 \\<gamma> ft p = Undefined\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>set ft.\n     \\<forall>b\\<in>set ft.\n        \\<forall>p\\<in>UNIV.\n           ofe_prio a = ofe_prio b \\<and>\n           \\<gamma> (ofe_fields a) p \\<and> a \\<noteq> b \\<longrightarrow>\n           \\<not> \\<gamma> (ofe_fields b) p\n  a \\<in> set ft\n  b \\<in> set ft\n  ofe_prio a = ofe_prio b\n  \\<gamma> (ofe_fields a) p\n  a \\<noteq> b\n  \\<gamma> (ofe_fields b) p", "show False"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set ft.\n     \\<forall>b\\<in>set ft.\n        \\<forall>p\\<in>UNIV.\n           ofe_prio a = ofe_prio b \\<and>\n           \\<gamma> (ofe_fields a) p \\<and> a \\<noteq> b \\<longrightarrow>\n           \\<not> \\<gamma> (ofe_fields b) p\n  a \\<in> set ft\n  b \\<in> set ft\n  ofe_prio a = ofe_prio b\n  \\<gamma> (ofe_fields a) p\n  a \\<noteq> b\n  \\<gamma> (ofe_fields b) p\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "fun OF_match_linear :: \"('m, 'p) field_matcher \\<Rightarrow> ('m, 'a) flowtable \\<Rightarrow> 'p \\<Rightarrow> 'a flowtable_behavior\" where\n\"OF_match_linear _ [] _ = NoAction\" |\n\"OF_match_linear \\<gamma> (a#as) p = (if \\<gamma> (ofe_fields a) p then Action (ofe_action a) else OF_match_linear \\<gamma> as p)\""], ["", "lemma OF_match_linear_ne_Undefined: \"OF_match_linear \\<gamma> ft p \\<noteq> Undefined\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OF_match_linear \\<gamma> ft p \\<noteq> Undefined", "by(induction ft) auto"], ["", "lemma OF_match_linear_append: \"OF_match_linear \\<gamma> (a @ b) p = (case OF_match_linear \\<gamma> a p of NoAction \\<Rightarrow> OF_match_linear \\<gamma> b p | x \\<Rightarrow> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OF_match_linear \\<gamma> (a @ b) p =\n    (case OF_match_linear \\<gamma> a p of Action a \\<Rightarrow> Action a\n     | NoAction \\<Rightarrow> OF_match_linear \\<gamma> b p\n     | Undefined \\<Rightarrow> Undefined)", "by(induction a) simp_all"], ["", "lemma OF_match_linear_match_allsameaction: \"\\<lbrakk>gr \\<in> set oms; \\<gamma> gr p = True\\<rbrakk>\n       \\<Longrightarrow> OF_match_linear \\<gamma> (map (\\<lambda>x. split3 OFEntry (pri, x, act)) oms) p = Action act\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gr \\<in> set oms; \\<gamma> gr p = True\\<rbrakk>\n    \\<Longrightarrow> OF_match_linear \\<gamma>\n                       (map (\\<lambda>x. split3 OFEntry (pri, x, act)) oms)\n                       p =\n                      Action act", "by(induction oms) (auto simp add: split3_def)"], ["", "lemma OF_lm_noa_none_iff: \"OF_match_linear \\<gamma> ft p = NoAction \\<longleftrightarrow> (\\<forall>e\\<in>set ft. \\<not> \\<gamma> (ofe_fields e) p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (OF_match_linear \\<gamma> ft p = NoAction) =\n    (\\<forall>e\\<in>set ft. \\<not> \\<gamma> (ofe_fields e) p)", "by(induction ft) (simp_all split: if_splits)"], ["", "lemma set_eq_rule: \"(\\<And>x. x \\<in> a \\<Longrightarrow> x \\<in> b) \\<Longrightarrow> (\\<And>x. x \\<in> b \\<Longrightarrow> x \\<in> a) \\<Longrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x. x \\<in> a \\<Longrightarrow> x \\<in> b;\n     \\<And>x. x \\<in> b \\<Longrightarrow> x \\<in> a\\<rbrakk>\n    \\<Longrightarrow> a = b", "by(rule antisym[OF subsetI subsetI])"], ["", "lemma unmatching_insert_agnostic: \"\\<not> \\<gamma> (ofe_fields a) p \\<Longrightarrow> OF_same_priority_match2 \\<gamma> (a # ft) p = OF_same_priority_match2 \\<gamma> ft p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_same_priority_match2 \\<gamma> ft p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_same_priority_match2 \\<gamma> ft p", "let ?as = \"{f. f \\<in> set ft \\<and> \\<gamma> (ofe_fields f) p \\<and> (\\<forall>fo \\<in> set ft. ofe_prio f < ofe_prio fo \\<longrightarrow> \\<not> \\<gamma> (ofe_fields fo) p)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_same_priority_match2 \\<gamma> ft p", "let ?aas = \"{f |f. f \\<in> set (a # ft) \\<and> \\<gamma> (ofe_fields f) p \\<and> (\\<forall>fo\\<in>set (a # ft). ofe_prio f < ofe_prio fo \\<longrightarrow> \\<not> \\<gamma> (ofe_fields fo) p)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_same_priority_match2 \\<gamma> ft p", "assume nm: \"\\<not> \\<gamma> (ofe_fields a) p\""], ["proof (state)\nthis:\n  \\<not> \\<gamma> (ofe_fields a) p\n\ngoal (1 subgoal):\n 1. \\<not> \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_same_priority_match2 \\<gamma> ft p", "have aa: \"?aas = ?as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f |f.\n     f \\<in> set (a # ft) \\<and>\n     \\<gamma> (ofe_fields f) p \\<and>\n     (\\<forall>fo\\<in>set (a # ft).\n         ofe_prio f < ofe_prio fo \\<longrightarrow>\n         \\<not> \\<gamma> (ofe_fields fo) p)} =\n    {f \\<in> set ft.\n     \\<gamma> (ofe_fields f) p \\<and>\n     (\\<forall>fo\\<in>set ft.\n         ofe_prio f < ofe_prio fo \\<longrightarrow>\n         \\<not> \\<gamma> (ofe_fields fo) p)}", "proof(rule set_eq_rule)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}\n 2. \\<And>x.\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}\n 2. \\<And>x.\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "assume \"x \\<in> {f |f. f \\<in> set (a # ft) \\<and> \\<gamma> (ofe_fields f) p \\<and> (\\<forall>fo\\<in>set (a # ft). ofe_prio f < ofe_prio fo \\<longrightarrow> \\<not> \\<gamma> (ofe_fields fo) p)}\""], ["proof (state)\nthis:\n  x \\<in> {f |f.\n           f \\<in> set (a # ft) \\<and>\n           \\<gamma> (ofe_fields f) p \\<and>\n           (\\<forall>fo\\<in>set (a # ft).\n               ofe_prio f < ofe_prio fo \\<longrightarrow>\n               \\<not> \\<gamma> (ofe_fields fo) p)}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}\n 2. \\<And>x.\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "hence as: \"x \\<in> set (a # ft) \\<and> \\<gamma> (ofe_fields x) p \\<and> (\\<forall>fo\\<in>set (a # ft). ofe_prio x < ofe_prio fo \\<longrightarrow> \\<not> \\<gamma> (ofe_fields fo) p)\""], ["proof (prove)\nusing this:\n  x \\<in> {f |f.\n           f \\<in> set (a # ft) \\<and>\n           \\<gamma> (ofe_fields f) p \\<and>\n           (\\<forall>fo\\<in>set (a # ft).\n               ofe_prio f < ofe_prio fo \\<longrightarrow>\n               \\<not> \\<gamma> (ofe_fields fo) p)}\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # ft) \\<and>\n    \\<gamma> (ofe_fields x) p \\<and>\n    (\\<forall>fo\\<in>set (a # ft).\n        ofe_prio x < ofe_prio fo \\<longrightarrow>\n        \\<not> \\<gamma> (ofe_fields fo) p)", "by simp"], ["proof (state)\nthis:\n  x \\<in> set (a # ft) \\<and>\n  \\<gamma> (ofe_fields x) p \\<and>\n  (\\<forall>fo\\<in>set (a # ft).\n      ofe_prio x < ofe_prio fo \\<longrightarrow>\n      \\<not> \\<gamma> (ofe_fields fo) p)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}\n 2. \\<And>x.\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "with nm"], ["proof (chain)\npicking this:\n  \\<not> \\<gamma> (ofe_fields a) p\n  x \\<in> set (a # ft) \\<and>\n  \\<gamma> (ofe_fields x) p \\<and>\n  (\\<forall>fo\\<in>set (a # ft).\n      ofe_prio x < ofe_prio fo \\<longrightarrow>\n      \\<not> \\<gamma> (ofe_fields fo) p)", "have \"x \\<in> set ft\""], ["proof (prove)\nusing this:\n  \\<not> \\<gamma> (ofe_fields a) p\n  x \\<in> set (a # ft) \\<and>\n  \\<gamma> (ofe_fields x) p \\<and>\n  (\\<forall>fo\\<in>set (a # ft).\n      ofe_prio x < ofe_prio fo \\<longrightarrow>\n      \\<not> \\<gamma> (ofe_fields fo) p)\n\ngoal (1 subgoal):\n 1. x \\<in> set ft", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> set ft\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}\n 2. \\<And>x.\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "moreover"], ["proof (state)\nthis:\n  x \\<in> set ft\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}\n 2. \\<And>x.\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "from as"], ["proof (chain)\npicking this:\n  x \\<in> set (a # ft) \\<and>\n  \\<gamma> (ofe_fields x) p \\<and>\n  (\\<forall>fo\\<in>set (a # ft).\n      ofe_prio x < ofe_prio fo \\<longrightarrow>\n      \\<not> \\<gamma> (ofe_fields fo) p)", "have \"(\\<forall>fo\\<in>set ft. ofe_prio x < ofe_prio fo \\<longrightarrow> \\<not> \\<gamma> (ofe_fields fo) p)\""], ["proof (prove)\nusing this:\n  x \\<in> set (a # ft) \\<and>\n  \\<gamma> (ofe_fields x) p \\<and>\n  (\\<forall>fo\\<in>set (a # ft).\n      ofe_prio x < ofe_prio fo \\<longrightarrow>\n      \\<not> \\<gamma> (ofe_fields fo) p)\n\ngoal (1 subgoal):\n 1. \\<forall>fo\\<in>set ft.\n       ofe_prio x < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p", "by simp"], ["proof (state)\nthis:\n  \\<forall>fo\\<in>set ft.\n     ofe_prio x < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}\n 2. \\<And>x.\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> set ft\n  \\<forall>fo\\<in>set ft.\n     ofe_prio x < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p", "show \"x \\<in> {f \\<in> set ft. \\<gamma> (ofe_fields f) p \\<and> (\\<forall>fo\\<in>set ft. ofe_prio f < ofe_prio fo \\<longrightarrow> \\<not> \\<gamma> (ofe_fields fo) p)}\""], ["proof (prove)\nusing this:\n  x \\<in> set ft\n  \\<forall>fo\\<in>set ft.\n     ofe_prio x < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p\n\ngoal (1 subgoal):\n 1. x \\<in> {f \\<in> set ft.\n             \\<gamma> (ofe_fields f) p \\<and>\n             (\\<forall>fo\\<in>set ft.\n                 ofe_prio f < ofe_prio fo \\<longrightarrow>\n                 \\<not> \\<gamma> (ofe_fields fo) p)}", "using as"], ["proof (prove)\nusing this:\n  x \\<in> set ft\n  \\<forall>fo\\<in>set ft.\n     ofe_prio x < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p\n  x \\<in> set (a # ft) \\<and>\n  \\<gamma> (ofe_fields x) p \\<and>\n  (\\<forall>fo\\<in>set (a # ft).\n      ofe_prio x < ofe_prio fo \\<longrightarrow>\n      \\<not> \\<gamma> (ofe_fields fo) p)\n\ngoal (1 subgoal):\n 1. x \\<in> {f \\<in> set ft.\n             \\<gamma> (ofe_fields f) p \\<and>\n             (\\<forall>fo\\<in>set ft.\n                 ofe_prio f < ofe_prio fo \\<longrightarrow>\n                 \\<not> \\<gamma> (ofe_fields fo) p)}", "by force"], ["proof (state)\nthis:\n  x \\<in> {f \\<in> set ft.\n           \\<gamma> (ofe_fields f) p \\<and>\n           (\\<forall>fo\\<in>set ft.\n               ofe_prio f < ofe_prio fo \\<longrightarrow>\n               \\<not> \\<gamma> (ofe_fields fo) p)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "assume \"x \\<in> {f \\<in> set ft. \\<gamma> (ofe_fields f) p \\<and> (\\<forall>fo\\<in>set ft. ofe_prio f < ofe_prio fo \\<longrightarrow> \\<not> \\<gamma> (ofe_fields fo) p)}\""], ["proof (state)\nthis:\n  x \\<in> {f \\<in> set ft.\n           \\<gamma> (ofe_fields f) p \\<and>\n           (\\<forall>fo\\<in>set ft.\n               ofe_prio f < ofe_prio fo \\<longrightarrow>\n               \\<not> \\<gamma> (ofe_fields fo) p)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "hence as: \"x \\<in> set ft\" \"\\<gamma> (ofe_fields x) p\" \"(\\<forall>fo\\<in>set ft. ofe_prio x < ofe_prio fo \\<longrightarrow> \\<not> \\<gamma> (ofe_fields fo) p)\""], ["proof (prove)\nusing this:\n  x \\<in> {f \\<in> set ft.\n           \\<gamma> (ofe_fields f) p \\<and>\n           (\\<forall>fo\\<in>set ft.\n               ofe_prio f < ofe_prio fo \\<longrightarrow>\n               \\<not> \\<gamma> (ofe_fields fo) p)}\n\ngoal (1 subgoal):\n 1. x \\<in> set ft &&&\n    \\<gamma> (ofe_fields x) p &&&\n    \\<forall>fo\\<in>set ft.\n       ofe_prio x < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p", "by simp_all"], ["proof (state)\nthis:\n  x \\<in> set ft\n  \\<gamma> (ofe_fields x) p\n  \\<forall>fo\\<in>set ft.\n     ofe_prio x < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "from as(1)"], ["proof (chain)\npicking this:\n  x \\<in> set ft", "have \"x \\<in> set (a # ft)\""], ["proof (prove)\nusing this:\n  x \\<in> set ft\n\ngoal (1 subgoal):\n 1. x \\<in> set (a # ft)", "by simp"], ["proof (state)\nthis:\n  x \\<in> set (a # ft)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "moreover"], ["proof (state)\nthis:\n  x \\<in> set (a # ft)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "from as(3)"], ["proof (chain)\npicking this:\n  \\<forall>fo\\<in>set ft.\n     ofe_prio x < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p", "have \"(\\<forall>fo\\<in>set (a # ft). ofe_prio x < ofe_prio fo \\<longrightarrow> \\<not> \\<gamma> (ofe_fields fo) p)\""], ["proof (prove)\nusing this:\n  \\<forall>fo\\<in>set ft.\n     ofe_prio x < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p\n\ngoal (1 subgoal):\n 1. \\<forall>fo\\<in>set (a # ft).\n       ofe_prio x < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p", "using nm"], ["proof (prove)\nusing this:\n  \\<forall>fo\\<in>set ft.\n     ofe_prio x < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p\n  \\<not> \\<gamma> (ofe_fields a) p\n\ngoal (1 subgoal):\n 1. \\<forall>fo\\<in>set (a # ft).\n       ofe_prio x < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p", "by simp"], ["proof (state)\nthis:\n  \\<forall>fo\\<in>set (a # ft).\n     ofe_prio x < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {f \\<in> set ft.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set ft.\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)} \\<Longrightarrow>\n       x \\<in> {f |f.\n                f \\<in> set (a # ft) \\<and>\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> set (a # ft)\n  \\<forall>fo\\<in>set (a # ft).\n     ofe_prio x < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p", "show \"x \\<in> {f |f. f \\<in> set (a # ft) \\<and> \\<gamma> (ofe_fields f) p \\<and> (\\<forall>fo\\<in>set (a # ft). ofe_prio f < ofe_prio fo \\<longrightarrow> \\<not> \\<gamma> (ofe_fields fo) p)}\""], ["proof (prove)\nusing this:\n  x \\<in> set (a # ft)\n  \\<forall>fo\\<in>set (a # ft).\n     ofe_prio x < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p\n\ngoal (1 subgoal):\n 1. x \\<in> {f |f.\n             f \\<in> set (a # ft) \\<and>\n             \\<gamma> (ofe_fields f) p \\<and>\n             (\\<forall>fo\\<in>set (a # ft).\n                 ofe_prio f < ofe_prio fo \\<longrightarrow>\n                 \\<not> \\<gamma> (ofe_fields fo) p)}", "using as(2)"], ["proof (prove)\nusing this:\n  x \\<in> set (a # ft)\n  \\<forall>fo\\<in>set (a # ft).\n     ofe_prio x < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p\n  \\<gamma> (ofe_fields x) p\n\ngoal (1 subgoal):\n 1. x \\<in> {f |f.\n             f \\<in> set (a # ft) \\<and>\n             \\<gamma> (ofe_fields f) p \\<and>\n             (\\<forall>fo\\<in>set (a # ft).\n                 ofe_prio f < ofe_prio fo \\<longrightarrow>\n                 \\<not> \\<gamma> (ofe_fields fo) p)}", "by blast"], ["proof (state)\nthis:\n  x \\<in> {f |f.\n           f \\<in> set (a # ft) \\<and>\n           \\<gamma> (ofe_fields f) p \\<and>\n           (\\<forall>fo\\<in>set (a # ft).\n               ofe_prio f < ofe_prio fo \\<longrightarrow>\n               \\<not> \\<gamma> (ofe_fields fo) p)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {f |f.\n   f \\<in> set (a # ft) \\<and>\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)} =\n  {f \\<in> set ft.\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set ft.\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)}\n\ngoal (1 subgoal):\n 1. \\<not> \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_same_priority_match2 \\<gamma> ft p", "note uf = arg_cong[OF aa, of \"(`) ofe_action\", unfolded image_Collect]"], ["proof (state)\nthis:\n  {ofe_action x |x.\n   \\<exists>f.\n      x = f \\<and>\n      f \\<in> set (a # ft) \\<and>\n      \\<gamma> (ofe_fields f) p \\<and>\n      (\\<forall>fo\\<in>set (a # ft).\n          ofe_prio f < ofe_prio fo \\<longrightarrow>\n          \\<not> \\<gamma> (ofe_fields fo) p)} =\n  {ofe_action x |x.\n   x \\<in> set ft \\<and>\n   \\<gamma> (ofe_fields x) p \\<and>\n   (\\<forall>fo\\<in>set ft.\n       ofe_prio x < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)}\n\ngoal (1 subgoal):\n 1. \\<not> \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_same_priority_match2 \\<gamma> ft p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_same_priority_match2 \\<gamma> ft p", "unfolding OF_same_priority_match2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let s = {ofe_action f |f.\n              f \\<in> set (a # ft) \\<and>\n              \\<gamma> (ofe_fields f) p \\<and>\n              (\\<forall>fo\\<in>set (a # ft).\n                  ofe_prio f < ofe_prio fo \\<longrightarrow>\n                  \\<not> \\<gamma> (ofe_fields fo) p)}\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    (let s = {ofe_action f |f.\n              f \\<in> set ft \\<and>\n              \\<gamma> (ofe_fields f) p \\<and>\n              (\\<forall>fo\\<in>set ft.\n                  ofe_prio f < ofe_prio fo \\<longrightarrow>\n                  \\<not> \\<gamma> (ofe_fields fo) p)}\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined)", "using uf"], ["proof (prove)\nusing this:\n  {ofe_action x |x.\n   \\<exists>f.\n      x = f \\<and>\n      f \\<in> set (a # ft) \\<and>\n      \\<gamma> (ofe_fields f) p \\<and>\n      (\\<forall>fo\\<in>set (a # ft).\n          ofe_prio f < ofe_prio fo \\<longrightarrow>\n          \\<not> \\<gamma> (ofe_fields fo) p)} =\n  {ofe_action x |x.\n   x \\<in> set ft \\<and>\n   \\<gamma> (ofe_fields x) p \\<and>\n   (\\<forall>fo\\<in>set ft.\n       ofe_prio x < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)}\n\ngoal (1 subgoal):\n 1. (let s = {ofe_action f |f.\n              f \\<in> set (a # ft) \\<and>\n              \\<gamma> (ofe_fields f) p \\<and>\n              (\\<forall>fo\\<in>set (a # ft).\n                  ofe_prio f < ofe_prio fo \\<longrightarrow>\n                  \\<not> \\<gamma> (ofe_fields fo) p)}\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    (let s = {ofe_action f |f.\n              f \\<in> set ft \\<and>\n              \\<gamma> (ofe_fields f) p \\<and>\n              (\\<forall>fo\\<in>set ft.\n                  ofe_prio f < ofe_prio fo \\<longrightarrow>\n                  \\<not> \\<gamma> (ofe_fields fo) p)}\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined)", "by presburger"], ["proof (state)\nthis:\n  OF_same_priority_match2 \\<gamma> (a # ft) p =\n  OF_same_priority_match2 \\<gamma> ft p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OF_match_eq: \"sorted_descending (map ofe_prio ft) \\<Longrightarrow> check_no_overlap \\<gamma> ft \\<Longrightarrow> \n\tOF_same_priority_match2 \\<gamma> ft p = OF_match_linear \\<gamma> ft p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sorted_descending (map ofe_prio ft);\n     check_no_overlap \\<gamma> ft\\<rbrakk>\n    \\<Longrightarrow> OF_same_priority_match2 \\<gamma> ft p =\n                      OF_match_linear \\<gamma> ft p", "proof(induction \"ft\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>sorted_descending (map ofe_prio []);\n     check_no_overlap \\<gamma> []\\<rbrakk>\n    \\<Longrightarrow> OF_same_priority_match2 \\<gamma> [] p =\n                      OF_match_linear \\<gamma> [] p\n 2. \\<And>a ft.\n       \\<lbrakk>\\<lbrakk>sorted_descending (map ofe_prio ft);\n                 check_no_overlap \\<gamma> ft\\<rbrakk>\n                \\<Longrightarrow> OF_same_priority_match2 \\<gamma> ft p =\n                                  OF_match_linear \\<gamma> ft p;\n        sorted_descending (map ofe_prio (a # ft));\n        check_no_overlap \\<gamma> (a # ft)\\<rbrakk>\n       \\<Longrightarrow> OF_same_priority_match2 \\<gamma> (a # ft) p =\n                         OF_match_linear \\<gamma> (a # ft) p", "case (Cons a ft)"], ["proof (state)\nthis:\n  \\<lbrakk>sorted_descending (map ofe_prio ft);\n   check_no_overlap \\<gamma> ft\\<rbrakk>\n  \\<Longrightarrow> OF_same_priority_match2 \\<gamma> ft p =\n                    OF_match_linear \\<gamma> ft p\n  sorted_descending (map ofe_prio (a # ft))\n  check_no_overlap \\<gamma> (a # ft)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sorted_descending (map ofe_prio []);\n     check_no_overlap \\<gamma> []\\<rbrakk>\n    \\<Longrightarrow> OF_same_priority_match2 \\<gamma> [] p =\n                      OF_match_linear \\<gamma> [] p\n 2. \\<And>a ft.\n       \\<lbrakk>\\<lbrakk>sorted_descending (map ofe_prio ft);\n                 check_no_overlap \\<gamma> ft\\<rbrakk>\n                \\<Longrightarrow> OF_same_priority_match2 \\<gamma> ft p =\n                                  OF_match_linear \\<gamma> ft p;\n        sorted_descending (map ofe_prio (a # ft));\n        check_no_overlap \\<gamma> (a # ft)\\<rbrakk>\n       \\<Longrightarrow> OF_same_priority_match2 \\<gamma> (a # ft) p =\n                         OF_match_linear \\<gamma> (a # ft) p", "have 1: \"sorted_descending (map ofe_prio ft)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_descending (map ofe_prio ft)", "using Cons(2)"], ["proof (prove)\nusing this:\n  sorted_descending (map ofe_prio (a # ft))\n\ngoal (1 subgoal):\n 1. sorted_descending (map ofe_prio ft)", "by simp"], ["proof (state)\nthis:\n  sorted_descending (map ofe_prio ft)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sorted_descending (map ofe_prio []);\n     check_no_overlap \\<gamma> []\\<rbrakk>\n    \\<Longrightarrow> OF_same_priority_match2 \\<gamma> [] p =\n                      OF_match_linear \\<gamma> [] p\n 2. \\<And>a ft.\n       \\<lbrakk>\\<lbrakk>sorted_descending (map ofe_prio ft);\n                 check_no_overlap \\<gamma> ft\\<rbrakk>\n                \\<Longrightarrow> OF_same_priority_match2 \\<gamma> ft p =\n                                  OF_match_linear \\<gamma> ft p;\n        sorted_descending (map ofe_prio (a # ft));\n        check_no_overlap \\<gamma> (a # ft)\\<rbrakk>\n       \\<Longrightarrow> OF_same_priority_match2 \\<gamma> (a # ft) p =\n                         OF_match_linear \\<gamma> (a # ft) p", "have 2: \"check_no_overlap \\<gamma> ft\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check_no_overlap \\<gamma> ft", "using Cons(3)"], ["proof (prove)\nusing this:\n  check_no_overlap \\<gamma> (a # ft)\n\ngoal (1 subgoal):\n 1. check_no_overlap \\<gamma> ft", "unfolding check_no_overlap_def"], ["proof (prove)\nusing this:\n  \\<forall>aa\\<in>set (a # ft).\n     \\<forall>b\\<in>set (a # ft).\n        \\<forall>p\\<in>UNIV.\n           ofe_prio aa = ofe_prio b \\<and>\n           \\<gamma> (ofe_fields aa) p \\<and> aa \\<noteq> b \\<longrightarrow>\n           \\<not> \\<gamma> (ofe_fields b) p\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set ft.\n       \\<forall>b\\<in>set ft.\n          \\<forall>p\\<in>UNIV.\n             ofe_prio a = ofe_prio b \\<and>\n             \\<gamma> (ofe_fields a) p \\<and> a \\<noteq> b \\<longrightarrow>\n             \\<not> \\<gamma> (ofe_fields b) p", "using set_subset_Cons"], ["proof (prove)\nusing this:\n  \\<forall>aa\\<in>set (a # ft).\n     \\<forall>b\\<in>set (a # ft).\n        \\<forall>p\\<in>UNIV.\n           ofe_prio aa = ofe_prio b \\<and>\n           \\<gamma> (ofe_fields aa) p \\<and> aa \\<noteq> b \\<longrightarrow>\n           \\<not> \\<gamma> (ofe_fields b) p\n  set ?xs \\<subseteq> set (?x # ?xs)\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set ft.\n       \\<forall>b\\<in>set ft.\n          \\<forall>p\\<in>UNIV.\n             ofe_prio a = ofe_prio b \\<and>\n             \\<gamma> (ofe_fields a) p \\<and> a \\<noteq> b \\<longrightarrow>\n             \\<not> \\<gamma> (ofe_fields b) p", "by fast"], ["proof (state)\nthis:\n  check_no_overlap \\<gamma> ft\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sorted_descending (map ofe_prio []);\n     check_no_overlap \\<gamma> []\\<rbrakk>\n    \\<Longrightarrow> OF_same_priority_match2 \\<gamma> [] p =\n                      OF_match_linear \\<gamma> [] p\n 2. \\<And>a ft.\n       \\<lbrakk>\\<lbrakk>sorted_descending (map ofe_prio ft);\n                 check_no_overlap \\<gamma> ft\\<rbrakk>\n                \\<Longrightarrow> OF_same_priority_match2 \\<gamma> ft p =\n                                  OF_match_linear \\<gamma> ft p;\n        sorted_descending (map ofe_prio (a # ft));\n        check_no_overlap \\<gamma> (a # ft)\\<rbrakk>\n       \\<Longrightarrow> OF_same_priority_match2 \\<gamma> (a # ft) p =\n                         OF_match_linear \\<gamma> (a # ft) p", "note mIH = Cons(1)[OF 1 2]"], ["proof (state)\nthis:\n  OF_same_priority_match2 \\<gamma> ft p = OF_match_linear \\<gamma> ft p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sorted_descending (map ofe_prio []);\n     check_no_overlap \\<gamma> []\\<rbrakk>\n    \\<Longrightarrow> OF_same_priority_match2 \\<gamma> [] p =\n                      OF_match_linear \\<gamma> [] p\n 2. \\<And>a ft.\n       \\<lbrakk>\\<lbrakk>sorted_descending (map ofe_prio ft);\n                 check_no_overlap \\<gamma> ft\\<rbrakk>\n                \\<Longrightarrow> OF_same_priority_match2 \\<gamma> ft p =\n                                  OF_match_linear \\<gamma> ft p;\n        sorted_descending (map ofe_prio (a # ft));\n        check_no_overlap \\<gamma> (a # ft)\\<rbrakk>\n       \\<Longrightarrow> OF_same_priority_match2 \\<gamma> (a # ft) p =\n                         OF_match_linear \\<gamma> (a # ft) p", "show ?case (is ?kees)"], ["proof (prove)\ngoal (1 subgoal):\n 1. OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p", "proof(cases \"\\<gamma> (ofe_fields a) p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p\n 2. \\<not> \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p", "case False"], ["proof (state)\nthis:\n  \\<not> \\<gamma> (ofe_fields a) p\n\ngoal (2 subgoals):\n 1. \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p\n 2. \\<not> \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p", "thus ?kees"], ["proof (prove)\nusing this:\n  \\<not> \\<gamma> (ofe_fields a) p\n\ngoal (1 subgoal):\n 1. OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p", "by(simp only: OF_match_linear.simps if_False mIH[symmetric] unmatching_insert_agnostic[of \\<gamma>, OF False])"], ["proof (state)\nthis:\n  OF_same_priority_match2 \\<gamma> (a # ft) p =\n  OF_match_linear \\<gamma> (a # ft) p\n\ngoal (1 subgoal):\n 1. \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p", "note sorted_descending_split[OF Cons(2)]"], ["proof (state)\nthis:\n  \\<exists>m n.\n     a # ft = m @ n \\<and>\n     (\\<forall>e\\<in>set m. ofe_prio (hd (a # ft)) = ofe_prio e) \\<and>\n     (\\<forall>e\\<in>set n. ofe_prio e < ofe_prio (hd (a # ft)))\n\ngoal (1 subgoal):\n 1. \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p", "then"], ["proof (chain)\npicking this:\n  \\<exists>m n.\n     a # ft = m @ n \\<and>\n     (\\<forall>e\\<in>set m. ofe_prio (hd (a # ft)) = ofe_prio e) \\<and>\n     (\\<forall>e\\<in>set n. ofe_prio e < ofe_prio (hd (a # ft)))", "obtain m n where mn: \"a # ft = m @ n\" \"\\<forall>e\\<in>set m. ofe_prio a = ofe_prio e\" \"\\<forall>e\\<in>set n. ofe_prio e < ofe_prio a\""], ["proof (prove)\nusing this:\n  \\<exists>m n.\n     a # ft = m @ n \\<and>\n     (\\<forall>e\\<in>set m. ofe_prio (hd (a # ft)) = ofe_prio e) \\<and>\n     (\\<forall>e\\<in>set n. ofe_prio e < ofe_prio (hd (a # ft)))\n\ngoal (1 subgoal):\n 1. (\\<And>m n.\n        \\<lbrakk>a # ft = m @ n;\n         \\<forall>e\\<in>set m. ofe_prio a = ofe_prio e;\n         \\<forall>e\\<in>set n. ofe_prio e < ofe_prio a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding list.sel"], ["proof (prove)\nusing this:\n  \\<exists>m n.\n     a # ft = m @ n \\<and>\n     (\\<forall>e\\<in>set m. ofe_prio a = ofe_prio e) \\<and>\n     (\\<forall>e\\<in>set n. ofe_prio e < ofe_prio a)\n\ngoal (1 subgoal):\n 1. (\\<And>m n.\n        \\<lbrakk>a # ft = m @ n;\n         \\<forall>e\\<in>set m. ofe_prio a = ofe_prio e;\n         \\<forall>e\\<in>set n. ofe_prio e < ofe_prio a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a # ft = m @ n\n  \\<forall>e\\<in>set m. ofe_prio a = ofe_prio e\n  \\<forall>e\\<in>set n. ofe_prio e < ofe_prio a\n\ngoal (1 subgoal):\n 1. \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p", "hence aem: \"a \\<in> set m\""], ["proof (prove)\nusing this:\n  a # ft = m @ n\n  \\<forall>e\\<in>set m. ofe_prio a = ofe_prio e\n  \\<forall>e\\<in>set n. ofe_prio e < ofe_prio a\n\ngoal (1 subgoal):\n 1. a \\<in> set m", "by (metis UnE less_imp_neq list.set_intros(1) set_append)"], ["proof (state)\nthis:\n  a \\<in> set m\n\ngoal (1 subgoal):\n 1. \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p", "have mover: \"check_no_overlap \\<gamma> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check_no_overlap \\<gamma> m", "using Cons(3)"], ["proof (prove)\nusing this:\n  check_no_overlap \\<gamma> (a # ft)\n\ngoal (1 subgoal):\n 1. check_no_overlap \\<gamma> m", "unfolding check_no_overlap_def"], ["proof (prove)\nusing this:\n  \\<forall>aa\\<in>set (a # ft).\n     \\<forall>b\\<in>set (a # ft).\n        \\<forall>p\\<in>UNIV.\n           ofe_prio aa = ofe_prio b \\<and>\n           \\<gamma> (ofe_fields aa) p \\<and> aa \\<noteq> b \\<longrightarrow>\n           \\<not> \\<gamma> (ofe_fields b) p\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set m.\n       \\<forall>b\\<in>set m.\n          \\<forall>p\\<in>UNIV.\n             ofe_prio a = ofe_prio b \\<and>\n             \\<gamma> (ofe_fields a) p \\<and> a \\<noteq> b \\<longrightarrow>\n             \\<not> \\<gamma> (ofe_fields b) p", "by (metis Un_iff mn(1) set_append)"], ["proof (state)\nthis:\n  check_no_overlap \\<gamma> m\n\ngoal (1 subgoal):\n 1. \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p", "let ?fc = \"(\\<lambda>s. \n\t\t\t{f. f \\<in> set s \\<and> \\<gamma> (ofe_fields f) p \\<and> \n\t\t\t(\\<forall>fo\\<in>set (a # ft). ofe_prio f < ofe_prio fo \\<longrightarrow> \\<not> \\<gamma> (ofe_fields fo) p)})\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p", "case True"], ["proof (state)\nthis:\n  \\<gamma> (ofe_fields a) p\n\ngoal (1 subgoal):\n 1. \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p", "have \"?fc (m @ n) = ?fc m \\<union> ?fc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<in> set (m @ n).\n     \\<gamma> (ofe_fields f) p \\<and>\n     (\\<forall>fo\\<in>set (a # ft).\n         ofe_prio f < ofe_prio fo \\<longrightarrow>\n         \\<not> \\<gamma> (ofe_fields fo) p)} =\n    {f \\<in> set m.\n     \\<gamma> (ofe_fields f) p \\<and>\n     (\\<forall>fo\\<in>set (a # ft).\n         ofe_prio f < ofe_prio fo \\<longrightarrow>\n         \\<not> \\<gamma> (ofe_fields fo) p)} \\<union>\n    {f \\<in> set n.\n     \\<gamma> (ofe_fields f) p \\<and>\n     (\\<forall>fo\\<in>set (a # ft).\n         ofe_prio f < ofe_prio fo \\<longrightarrow>\n         \\<not> \\<gamma> (ofe_fields fo) p)}", "by auto"], ["proof (state)\nthis:\n  {f \\<in> set (m @ n).\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)} =\n  {f \\<in> set m.\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)} \\<union>\n  {f \\<in> set n.\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)}\n\ngoal (1 subgoal):\n 1. \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p", "moreover"], ["proof (state)\nthis:\n  {f \\<in> set (m @ n).\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)} =\n  {f \\<in> set m.\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)} \\<union>\n  {f \\<in> set n.\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)}\n\ngoal (1 subgoal):\n 1. \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p", "have \"?fc n = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<in> set n.\n     \\<gamma> (ofe_fields f) p \\<and>\n     (\\<forall>fo\\<in>set (a # ft).\n         ofe_prio f < ofe_prio fo \\<longrightarrow>\n         \\<not> \\<gamma> (ofe_fields fo) p)} =\n    {}", "proof(rule set_eq_rule, rule ccontr, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> {f \\<in> set n.\n                         \\<gamma> (ofe_fields f) p \\<and>\n                         (\\<forall>fo\\<in>set (a # ft).\n                             ofe_prio f < ofe_prio fo \\<longrightarrow>\n                             \\<not> \\<gamma> (ofe_fields fo) p)};\n        x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       x \\<in> {} \\<Longrightarrow>\n       x \\<in> {f \\<in> set n.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "case (1 x)"], ["proof (state)\nthis:\n  x \\<in> {f \\<in> set n.\n           \\<gamma> (ofe_fields f) p \\<and>\n           (\\<forall>fo\\<in>set (a # ft).\n               ofe_prio f < ofe_prio fo \\<longrightarrow>\n               \\<not> \\<gamma> (ofe_fields fo) p)}\n  x \\<notin> {}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> {f \\<in> set n.\n                         \\<gamma> (ofe_fields f) p \\<and>\n                         (\\<forall>fo\\<in>set (a # ft).\n                             ofe_prio f < ofe_prio fo \\<longrightarrow>\n                             \\<not> \\<gamma> (ofe_fields fo) p)};\n        x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       x \\<in> {} \\<Longrightarrow>\n       x \\<in> {f \\<in> set n.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "hence g1: \"x \\<in> set n\" \"\\<gamma> (ofe_fields x) p\" \n\t\t\t\t\"(\\<forall>fo\\<in>set m. ofe_prio x < ofe_prio fo \\<longrightarrow> \\<not> \\<gamma> (ofe_fields fo) p)\"\n\t\t\t\t\"(\\<forall>fo\\<in>set n. ofe_prio x < ofe_prio fo \\<longrightarrow> \\<not> \\<gamma> (ofe_fields fo) p)\""], ["proof (prove)\nusing this:\n  x \\<in> {f \\<in> set n.\n           \\<gamma> (ofe_fields f) p \\<and>\n           (\\<forall>fo\\<in>set (a # ft).\n               ofe_prio f < ofe_prio fo \\<longrightarrow>\n               \\<not> \\<gamma> (ofe_fields fo) p)}\n  x \\<notin> {}\n\ngoal (1 subgoal):\n 1. (x \\<in> set n &&& \\<gamma> (ofe_fields x) p) &&&\n    \\<forall>fo\\<in>set m.\n       ofe_prio x < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p &&&\n    \\<forall>fo\\<in>set n.\n       ofe_prio x < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p", "unfolding mn(1)"], ["proof (prove)\nusing this:\n  x \\<in> {f \\<in> set n.\n           \\<gamma> (ofe_fields f) p \\<and>\n           (\\<forall>fo\\<in>set (m @ n).\n               ofe_prio f < ofe_prio fo \\<longrightarrow>\n               \\<not> \\<gamma> (ofe_fields fo) p)}\n  x \\<notin> {}\n\ngoal (1 subgoal):\n 1. (x \\<in> set n &&& \\<gamma> (ofe_fields x) p) &&&\n    \\<forall>fo\\<in>set m.\n       ofe_prio x < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p &&&\n    \\<forall>fo\\<in>set n.\n       ofe_prio x < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p", "by(simp_all)"], ["proof (state)\nthis:\n  x \\<in> set n\n  \\<gamma> (ofe_fields x) p\n  \\<forall>fo\\<in>set m.\n     ofe_prio x < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p\n  \\<forall>fo\\<in>set n.\n     ofe_prio x < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> {f \\<in> set n.\n                         \\<gamma> (ofe_fields f) p \\<and>\n                         (\\<forall>fo\\<in>set (a # ft).\n                             ofe_prio f < ofe_prio fo \\<longrightarrow>\n                             \\<not> \\<gamma> (ofe_fields fo) p)};\n        x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       x \\<in> {} \\<Longrightarrow>\n       x \\<in> {f \\<in> set n.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "from g1(1) mn(3)"], ["proof (chain)\npicking this:\n  x \\<in> set n\n  \\<forall>e\\<in>set n. ofe_prio e < ofe_prio a", "have le: \"ofe_prio x < ofe_prio a\""], ["proof (prove)\nusing this:\n  x \\<in> set n\n  \\<forall>e\\<in>set n. ofe_prio e < ofe_prio a\n\ngoal (1 subgoal):\n 1. ofe_prio x < ofe_prio a", "by simp"], ["proof (state)\nthis:\n  ofe_prio x < ofe_prio a\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> {f \\<in> set n.\n                         \\<gamma> (ofe_fields f) p \\<and>\n                         (\\<forall>fo\\<in>set (a # ft).\n                             ofe_prio f < ofe_prio fo \\<longrightarrow>\n                             \\<not> \\<gamma> (ofe_fields fo) p)};\n        x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       x \\<in> {} \\<Longrightarrow>\n       x \\<in> {f \\<in> set n.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "note le g1(3) aem True"], ["proof (state)\nthis:\n  ofe_prio x < ofe_prio a\n  \\<forall>fo\\<in>set m.\n     ofe_prio x < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p\n  a \\<in> set m\n  \\<gamma> (ofe_fields a) p\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> {f \\<in> set n.\n                         \\<gamma> (ofe_fields f) p \\<and>\n                         (\\<forall>fo\\<in>set (a # ft).\n                             ofe_prio f < ofe_prio fo \\<longrightarrow>\n                             \\<not> \\<gamma> (ofe_fields fo) p)};\n        x \\<notin> {}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x.\n       x \\<in> {} \\<Longrightarrow>\n       x \\<in> {f \\<in> set n.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "then"], ["proof (chain)\npicking this:\n  ofe_prio x < ofe_prio a\n  \\<forall>fo\\<in>set m.\n     ofe_prio x < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p\n  a \\<in> set m\n  \\<gamma> (ofe_fields a) p", "show False"], ["proof (prove)\nusing this:\n  ofe_prio x < ofe_prio a\n  \\<forall>fo\\<in>set m.\n     ofe_prio x < ofe_prio fo \\<longrightarrow>\n     \\<not> \\<gamma> (ofe_fields fo) p\n  a \\<in> set m\n  \\<gamma> (ofe_fields a) p\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {} \\<Longrightarrow>\n       x \\<in> {f \\<in> set n.\n                \\<gamma> (ofe_fields f) p \\<and>\n                (\\<forall>fo\\<in>set (a # ft).\n                    ofe_prio f < ofe_prio fo \\<longrightarrow>\n                    \\<not> \\<gamma> (ofe_fields fo) p)}", "qed simp"], ["proof (state)\nthis:\n  {f \\<in> set n.\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)} =\n  {}\n\ngoal (1 subgoal):\n 1. \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p", "ultimately"], ["proof (chain)\npicking this:\n  {f \\<in> set (m @ n).\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)} =\n  {f \\<in> set m.\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)} \\<union>\n  {f \\<in> set n.\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)}\n  {f \\<in> set n.\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)} =\n  {}", "have cc: \"?fc (m @ n) = ?fc m\""], ["proof (prove)\nusing this:\n  {f \\<in> set (m @ n).\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)} =\n  {f \\<in> set m.\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)} \\<union>\n  {f \\<in> set n.\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)}\n  {f \\<in> set n.\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)} =\n  {}\n\ngoal (1 subgoal):\n 1. {f \\<in> set (m @ n).\n     \\<gamma> (ofe_fields f) p \\<and>\n     (\\<forall>fo\\<in>set (a # ft).\n         ofe_prio f < ofe_prio fo \\<longrightarrow>\n         \\<not> \\<gamma> (ofe_fields fo) p)} =\n    {f \\<in> set m.\n     \\<gamma> (ofe_fields f) p \\<and>\n     (\\<forall>fo\\<in>set (a # ft).\n         ofe_prio f < ofe_prio fo \\<longrightarrow>\n         \\<not> \\<gamma> (ofe_fields fo) p)}", "by blast"], ["proof (state)\nthis:\n  {f \\<in> set (m @ n).\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)} =\n  {f \\<in> set m.\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)}\n\ngoal (1 subgoal):\n 1. \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p", "have cm: \"?fc m = {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<in> set m.\n     \\<gamma> (ofe_fields f) p \\<and>\n     (\\<forall>fo\\<in>set (a # ft).\n         ofe_prio f < ofe_prio fo \\<longrightarrow>\n         \\<not> \\<gamma> (ofe_fields fo) p)} =\n    {a}", "(* using Cons(3) *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<in> set m.\n     \\<gamma> (ofe_fields f) p \\<and>\n     (\\<forall>fo\\<in>set (a # ft).\n         ofe_prio f < ofe_prio fo \\<longrightarrow>\n         \\<not> \\<gamma> (ofe_fields fo) p)} =\n    {a}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {f \\<in> set m.\n     \\<gamma> (ofe_fields f) p \\<and>\n     (\\<forall>fo\\<in>set (a # ft).\n         ofe_prio f < ofe_prio fo \\<longrightarrow>\n         \\<not> \\<gamma> (ofe_fields fo) p)} =\n    {a}", "have \"\\<forall>f \\<in> set m. (\\<forall>fo\\<in>set (a # ft). ofe_prio f < ofe_prio fo \\<longrightarrow> \\<not> \\<gamma> (ofe_fields fo) p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>set m.\n       \\<forall>fo\\<in>set (a # ft).\n          ofe_prio f < ofe_prio fo \\<longrightarrow>\n          \\<not> \\<gamma> (ofe_fields fo) p", "by (metis UnE less_asym mn set_append)"], ["proof (state)\nthis:\n  \\<forall>f\\<in>set m.\n     \\<forall>fo\\<in>set (a # ft).\n        ofe_prio f < ofe_prio fo \\<longrightarrow>\n        \\<not> \\<gamma> (ofe_fields fo) p\n\ngoal (1 subgoal):\n 1. {f \\<in> set m.\n     \\<gamma> (ofe_fields f) p \\<and>\n     (\\<forall>fo\\<in>set (a # ft).\n         ofe_prio f < ofe_prio fo \\<longrightarrow>\n         \\<not> \\<gamma> (ofe_fields fo) p)} =\n    {a}", "hence 1: \"?fc m = {f \\<in> set m. \\<gamma> (ofe_fields f) p}\""], ["proof (prove)\nusing this:\n  \\<forall>f\\<in>set m.\n     \\<forall>fo\\<in>set (a # ft).\n        ofe_prio f < ofe_prio fo \\<longrightarrow>\n        \\<not> \\<gamma> (ofe_fields fo) p\n\ngoal (1 subgoal):\n 1. {f \\<in> set m.\n     \\<gamma> (ofe_fields f) p \\<and>\n     (\\<forall>fo\\<in>set (a # ft).\n         ofe_prio f < ofe_prio fo \\<longrightarrow>\n         \\<not> \\<gamma> (ofe_fields fo) p)} =\n    {f \\<in> set m. \\<gamma> (ofe_fields f) p}", "by blast"], ["proof (state)\nthis:\n  {f \\<in> set m.\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)} =\n  {f \\<in> set m. \\<gamma> (ofe_fields f) p}\n\ngoal (1 subgoal):\n 1. {f \\<in> set m.\n     \\<gamma> (ofe_fields f) p \\<and>\n     (\\<forall>fo\\<in>set (a # ft).\n         ofe_prio f < ofe_prio fo \\<longrightarrow>\n         \\<not> \\<gamma> (ofe_fields fo) p)} =\n    {a}", "show \"{f \\<in> set m. \\<gamma> (ofe_fields f) p \\<and> (\\<forall>fo\\<in>set (a # ft). ofe_prio f < ofe_prio fo \\<longrightarrow> \\<not> \\<gamma> (ofe_fields fo) p)} = {a} \""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<in> set m.\n     \\<gamma> (ofe_fields f) p \\<and>\n     (\\<forall>fo\\<in>set (a # ft).\n         ofe_prio f < ofe_prio fo \\<longrightarrow>\n         \\<not> \\<gamma> (ofe_fields fo) p)} =\n    {a}", "unfolding 1"], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<in> set m. \\<gamma> (ofe_fields f) p} = {a}", "proof(rule set_eq_rule, goal_cases fwd bwd)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p} \\<Longrightarrow>\n       x \\<in> {a}\n 2. \\<And>x.\n       x \\<in> {a} \\<Longrightarrow>\n       x \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p}", "case (bwd x)"], ["proof (state)\nthis:\n  x \\<in> {a}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p} \\<Longrightarrow>\n       x \\<in> {a}\n 2. \\<And>x.\n       x \\<in> {a} \\<Longrightarrow>\n       x \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p}", "have \"a \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p}", "using True aem"], ["proof (prove)\nusing this:\n  \\<gamma> (ofe_fields a) p\n  a \\<in> set m\n\ngoal (1 subgoal):\n 1. a \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p}", "by simp"], ["proof (state)\nthis:\n  a \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p} \\<Longrightarrow>\n       x \\<in> {a}\n 2. \\<And>x.\n       x \\<in> {a} \\<Longrightarrow>\n       x \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p}", "thus ?case"], ["proof (prove)\nusing this:\n  a \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p}\n\ngoal (1 subgoal):\n 1. x \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p}", "using bwd"], ["proof (prove)\nusing this:\n  a \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p}\n  x \\<in> {a}\n\ngoal (1 subgoal):\n 1. x \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p}", "by simp"], ["proof (state)\nthis:\n  x \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p} \\<Longrightarrow>\n       x \\<in> {a}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p} \\<Longrightarrow>\n       x \\<in> {a}", "case (fwd x)"], ["proof (state)\nthis:\n  x \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p} \\<Longrightarrow>\n       x \\<in> {a}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {a}", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> {a} \\<Longrightarrow> False", "assume \"x \\<notin> {a}\""], ["proof (state)\nthis:\n  x \\<notin> {a}\n\ngoal (1 subgoal):\n 1. x \\<notin> {a} \\<Longrightarrow> False", "hence ne: \"x \\<noteq> a\""], ["proof (prove)\nusing this:\n  x \\<notin> {a}\n\ngoal (1 subgoal):\n 1. x \\<noteq> a", "by simp"], ["proof (state)\nthis:\n  x \\<noteq> a\n\ngoal (1 subgoal):\n 1. x \\<notin> {a} \\<Longrightarrow> False", "from fwd"], ["proof (chain)\npicking this:\n  x \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p}", "have 1: \"x \\<in> set m\" \"\\<gamma> (ofe_fields x) p\""], ["proof (prove)\nusing this:\n  x \\<in> {f \\<in> set m. \\<gamma> (ofe_fields f) p}\n\ngoal (1 subgoal):\n 1. x \\<in> set m &&& \\<gamma> (ofe_fields x) p", "by simp_all"], ["proof (state)\nthis:\n  x \\<in> set m\n  \\<gamma> (ofe_fields x) p\n\ngoal (1 subgoal):\n 1. x \\<notin> {a} \\<Longrightarrow> False", "have 2: \"ofe_prio x = ofe_prio a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ofe_prio x = ofe_prio a", "using 1(1) mn(2)"], ["proof (prove)\nusing this:\n  x \\<in> set m\n  \\<forall>e\\<in>set m. ofe_prio a = ofe_prio e\n\ngoal (1 subgoal):\n 1. ofe_prio x = ofe_prio a", "by simp"], ["proof (state)\nthis:\n  ofe_prio x = ofe_prio a\n\ngoal (1 subgoal):\n 1. x \\<notin> {a} \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using 1 ne mover aem True 2"], ["proof (prove)\nusing this:\n  x \\<in> set m\n  \\<gamma> (ofe_fields x) p\n  x \\<noteq> a\n  check_no_overlap \\<gamma> m\n  a \\<in> set m\n  \\<gamma> (ofe_fields a) p\n  ofe_prio x = ofe_prio a\n\ngoal (1 subgoal):\n 1. False", "unfolding check_no_overlap_def"], ["proof (prove)\nusing this:\n  x \\<in> set m\n  \\<gamma> (ofe_fields x) p\n  x \\<noteq> a\n  \\<forall>a\\<in>set m.\n     \\<forall>b\\<in>set m.\n        \\<forall>p\\<in>UNIV.\n           ofe_prio a = ofe_prio b \\<and>\n           \\<gamma> (ofe_fields a) p \\<and> a \\<noteq> b \\<longrightarrow>\n           \\<not> \\<gamma> (ofe_fields b) p\n  a \\<in> set m\n  \\<gamma> (ofe_fields a) p\n  ofe_prio x = ofe_prio a\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> {a}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {f \\<in> set m.\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)} =\n  {a}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {f \\<in> set m.\n   \\<gamma> (ofe_fields f) p \\<and>\n   (\\<forall>fo\\<in>set (a # ft).\n       ofe_prio f < ofe_prio fo \\<longrightarrow>\n       \\<not> \\<gamma> (ofe_fields fo) p)} =\n  {a}\n\ngoal (1 subgoal):\n 1. \\<gamma> (ofe_fields a) p \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p", "show ?kees"], ["proof (prove)\ngoal (1 subgoal):\n 1. OF_same_priority_match2 \\<gamma> (a # ft) p =\n    OF_match_linear \\<gamma> (a # ft) p", "unfolding mn(1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. OF_same_priority_match2 \\<gamma> (m @ n) p =\n    OF_match_linear \\<gamma> (m @ n) p", "unfolding OF_same_priority_match2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let s = {ofe_action f |f.\n              f \\<in> set (m @ n) \\<and>\n              \\<gamma> (ofe_fields f) p \\<and>\n              (\\<forall>fo\\<in>set (m @ n).\n                  ofe_prio f < ofe_prio fo \\<longrightarrow>\n                  \\<not> \\<gamma> (ofe_fields fo) p)}\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    OF_match_linear \\<gamma> (m @ n) p", "unfolding f_Img_ex_set"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let s = ofe_action `\n             {f \\<in> set (m @ n).\n              \\<gamma> (ofe_fields f) p \\<and>\n              (\\<forall>fo\\<in>set (m @ n).\n                  ofe_prio f < ofe_prio fo \\<longrightarrow>\n                  \\<not> \\<gamma> (ofe_fields fo) p)}\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    OF_match_linear \\<gamma> (m @ n) p", "unfolding cc[unfolded mn(1)]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let s = ofe_action `\n             {f \\<in> set m.\n              \\<gamma> (ofe_fields f) p \\<and>\n              (\\<forall>fo\\<in>set (m @ n).\n                  ofe_prio f < ofe_prio fo \\<longrightarrow>\n                  \\<not> \\<gamma> (ofe_fields fo) p)}\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    OF_match_linear \\<gamma> (m @ n) p", "unfolding cm[unfolded mn(1)]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let s = ofe_action ` {a}\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    OF_match_linear \\<gamma> (m @ n) p", "unfolding Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case card (ofe_action ` {a}) of 0 \\<Rightarrow> NoAction\n     | Suc 0 \\<Rightarrow> Action (the_elem (ofe_action ` {a}))\n     | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    OF_match_linear \\<gamma> (m @ n) p", "by(simp only: mn(1)[symmetric] OF_match_linear.simps True if_True, simp)"], ["proof (state)\nthis:\n  OF_same_priority_match2 \\<gamma> (a # ft) p =\n  OF_match_linear \\<gamma> (a # ft) p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  OF_same_priority_match2 \\<gamma> (a # ft) p =\n  OF_match_linear \\<gamma> (a # ft) p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sorted_descending (map ofe_prio []);\n     check_no_overlap \\<gamma> []\\<rbrakk>\n    \\<Longrightarrow> OF_same_priority_match2 \\<gamma> [] p =\n                      OF_match_linear \\<gamma> [] p", "qed (simp add: OF_same_priority_match2_def)"], ["", "lemma overlap_sort_invar[simp]: \"check_no_overlap \\<gamma> (sort_descending_key k ft) = check_no_overlap \\<gamma> ft\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check_no_overlap \\<gamma> (sort_descending_key k ft) =\n    check_no_overlap \\<gamma> ft", "unfolding check_no_overlap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set (sort_descending_key k ft).\n        \\<forall>b\\<in>set (sort_descending_key k ft).\n           \\<forall>p\\<in>UNIV.\n              ofe_prio a = ofe_prio b \\<and>\n              \\<gamma> (ofe_fields a) p \\<and>\n              a \\<noteq> b \\<longrightarrow>\n              \\<not> \\<gamma> (ofe_fields b) p) =\n    (\\<forall>a\\<in>set ft.\n        \\<forall>b\\<in>set ft.\n           \\<forall>p\\<in>UNIV.\n              ofe_prio a = ofe_prio b \\<and>\n              \\<gamma> (ofe_fields a) p \\<and>\n              a \\<noteq> b \\<longrightarrow>\n              \\<not> \\<gamma> (ofe_fields b) p)", "unfolding sort_descending_set_inv"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a\\<in>set ft.\n        \\<forall>b\\<in>set ft.\n           \\<forall>p\\<in>UNIV.\n              ofe_prio a = ofe_prio b \\<and>\n              \\<gamma> (ofe_fields a) p \\<and>\n              a \\<noteq> b \\<longrightarrow>\n              \\<not> \\<gamma> (ofe_fields b) p) =\n    (\\<forall>a\\<in>set ft.\n        \\<forall>b\\<in>set ft.\n           \\<forall>p\\<in>UNIV.\n              ofe_prio a = ofe_prio b \\<and>\n              \\<gamma> (ofe_fields a) p \\<and>\n              a \\<noteq> b \\<longrightarrow>\n              \\<not> \\<gamma> (ofe_fields b) p)", ".."], ["", "lemma OF_match_eq2: \n  assumes \"check_no_overlap \\<gamma> ft\"\n  shows \"OF_same_priority_match2 \\<gamma> ft p = OF_match_linear \\<gamma> (sort_descending_key ofe_prio ft) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OF_same_priority_match2 \\<gamma> ft p =\n    OF_match_linear \\<gamma> (sort_descending_key ofe_prio ft) p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. OF_same_priority_match2 \\<gamma> ft p =\n    OF_match_linear \\<gamma> (sort_descending_key ofe_prio ft) p", "have \"sorted_descending (map ofe_prio (sort_descending_key ofe_prio ft))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_descending (map ofe_prio (sort_descending_key ofe_prio ft))", "by (simp add: sorted_descending_sort_descending_key)"], ["proof (state)\nthis:\n  sorted_descending (map ofe_prio (sort_descending_key ofe_prio ft))\n\ngoal (1 subgoal):\n 1. OF_same_priority_match2 \\<gamma> ft p =\n    OF_match_linear \\<gamma> (sort_descending_key ofe_prio ft) p", "note ceq = OF_match_eq[OF this, unfolded overlap_sort_invar, OF \\<open>check_no_overlap \\<gamma> ft\\<close>, symmetric]"], ["proof (state)\nthis:\n  OF_match_linear \\<gamma> (sort_descending_key ofe_prio ft) ?p =\n  OF_same_priority_match2 \\<gamma> (sort_descending_key ofe_prio ft) ?p\n\ngoal (1 subgoal):\n 1. OF_same_priority_match2 \\<gamma> ft p =\n    OF_match_linear \\<gamma> (sort_descending_key ofe_prio ft) p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. OF_same_priority_match2 \\<gamma> ft p =\n    OF_match_linear \\<gamma> (sort_descending_key ofe_prio ft) p", "unfolding ceq"], ["proof (prove)\ngoal (1 subgoal):\n 1. OF_same_priority_match2 \\<gamma> ft p =\n    OF_same_priority_match2 \\<gamma> (sort_descending_key ofe_prio ft) p", "unfolding OF_same_priority_match2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let s = {ofe_action f |f.\n              f \\<in> set ft \\<and>\n              \\<gamma> (ofe_fields f) p \\<and>\n              (\\<forall>fo\\<in>set ft.\n                  ofe_prio f < ofe_prio fo \\<longrightarrow>\n                  \\<not> \\<gamma> (ofe_fields fo) p)}\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    (let s = {ofe_action f |f.\n              f \\<in> set (sort_descending_key ofe_prio ft) \\<and>\n              \\<gamma> (ofe_fields f) p \\<and>\n              (\\<forall>fo\\<in>set (sort_descending_key ofe_prio ft).\n                  ofe_prio f < ofe_prio fo \\<longrightarrow>\n                  \\<not> \\<gamma> (ofe_fields fo) p)}\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined)", "unfolding sort_descending_set_inv"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let s = {ofe_action f |f.\n              f \\<in> set ft \\<and>\n              \\<gamma> (ofe_fields f) p \\<and>\n              (\\<forall>fo\\<in>set ft.\n                  ofe_prio f < ofe_prio fo \\<longrightarrow>\n                  \\<not> \\<gamma> (ofe_fields fo) p)}\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    (let s = {ofe_action f |f.\n              f \\<in> set ft \\<and>\n              \\<gamma> (ofe_fields f) p \\<and>\n              (\\<forall>fo\\<in>set ft.\n                  ofe_prio f < ofe_prio fo \\<longrightarrow>\n                  \\<not> \\<gamma> (ofe_fields fo) p)}\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined)", ".."], ["proof (state)\nthis:\n  OF_same_priority_match2 \\<gamma> ft p =\n  OF_match_linear \\<gamma> (sort_descending_key ofe_prio ft) p\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Just me, thinking about some alternate ways of writing this down. *)"], ["", "lemma prio_match_matcher_alt: \"{f. f \\<in> set flow_entries \\<and> \\<gamma> (ofe_fields f) packet \\<and> \n  \t  (\\<forall>fo \\<in> set flow_entries. ofe_prio fo > ofe_prio f \\<longrightarrow> \\<not>\\<gamma> (ofe_fields fo) packet)}\n  \t  = (\n  \t  let matching = {f. f \\<in> set flow_entries \\<and> \\<gamma> (ofe_fields f) packet} \n  \t  in {f. f \\<in> matching \\<and> (\\<forall>fo \\<in> matching. ofe_prio fo \\<le> ofe_prio f)}\n  \t  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f \\<in> set flow_entries.\n     \\<gamma> (ofe_fields f) packet \\<and>\n     (\\<forall>fo\\<in>set flow_entries.\n         ofe_prio f < ofe_prio fo \\<longrightarrow>\n         \\<not> \\<gamma> (ofe_fields fo) packet)} =\n    (let matching =\n           {f \\<in> set flow_entries. \\<gamma> (ofe_fields f) packet}\n     in {f \\<in> matching.\n         \\<forall>fo\\<in>matching. ofe_prio fo \\<le> ofe_prio f})", "by(auto simp add: Let_def)"], ["", "lemma prio_match_matcher_alt2: \"(\n  \t  let matching = {f. f \\<in> set flow_entries \\<and> \\<gamma> (ofe_fields f) packet} \n  \t  in {f. f \\<in> matching \\<and> (\\<forall>fo \\<in> matching. ofe_prio fo \\<le> ofe_prio f)}\n  \t  ) = set (\n  \t  let matching = filter (\\<lambda>f. \\<gamma> (ofe_fields f) packet) flow_entries\n  \t  in filter (\\<lambda>f. \\<forall>fo \\<in> set matching. ofe_prio fo \\<le> ofe_prio f) matching\n  \t  )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (let matching =\n           {f \\<in> set flow_entries. \\<gamma> (ofe_fields f) packet}\n     in {f \\<in> matching.\n         \\<forall>fo\\<in>matching. ofe_prio fo \\<le> ofe_prio f}) =\n    set (let matching =\n               filter (\\<lambda>f. \\<gamma> (ofe_fields f) packet)\n                flow_entries\n         in filter\n             (\\<lambda>f.\n                 \\<forall>fo\\<in>set matching. ofe_prio fo \\<le> ofe_prio f)\n             matching)", "by(auto simp add: Let_def)"], ["", "definition OF_priority_match where\n  \"OF_priority_match \\<gamma> flow_entries packet \\<equiv> \n  let m  = filter (\\<lambda>f. \\<gamma> (ofe_fields f) packet) flow_entries;\n  \t  m' = filter (\\<lambda>f. \\<forall>fo \\<in> set m. ofe_prio fo \\<le> ofe_prio f) m in\n  \tcase m' of []  \\<Rightarrow> NoAction\n             | [s] \\<Rightarrow> Action (ofe_action s)\n             |  _  \\<Rightarrow> Undefined\""], ["", "definition OF_priority_match_ana where\n  \"OF_priority_match_ana \\<gamma> flow_entries packet \\<equiv> \n  let m  = filter (\\<lambda>f. \\<gamma> (ofe_fields f) packet) flow_entries;\n  \t  m' = filter (\\<lambda>f. \\<forall>fo \\<in> set m. ofe_prio fo \\<le> ofe_prio f) m in\n  \tcase m' of []  \\<Rightarrow> NoAction\n             | [s] \\<Rightarrow> Action s\n             |  _  \\<Rightarrow> Undefined\""], ["", "lemma filter_singleton: \"[x\\<leftarrow>s. f x] = [y] \\<Longrightarrow> f y \\<and> y \\<in> set s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter f s = [y] \\<Longrightarrow> f y \\<and> y \\<in> set s", "by (metis filter_eq_Cons_iff in_set_conv_decomp)"], ["", "lemma OF_spm3_get_fe: \"OF_priority_match \\<gamma> ft p = Action a \\<Longrightarrow> \\<exists>fe. ofe_action fe = a \\<and> fe \\<in> set ft \\<and> OF_priority_match_ana \\<gamma> ft p = Action fe\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OF_priority_match \\<gamma> ft p = Action a \\<Longrightarrow>\n    \\<exists>fe.\n       ofe_action fe = a \\<and>\n       fe \\<in> set ft \\<and>\n       OF_priority_match_ana \\<gamma> ft p = Action fe", "unfolding OF_priority_match_def OF_priority_match_ana_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) ft;\n         m' = filter\n               (\\<lambda>f.\n                   \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n               m\n     in case m' of [] \\<Rightarrow> NoAction\n        | [s] \\<Rightarrow> Action (ofe_action s)\n        | s # aa # lista \\<Rightarrow> Undefined) =\n    Action a \\<Longrightarrow>\n    \\<exists>fe.\n       ofe_action fe = a \\<and>\n       fe \\<in> set ft \\<and>\n       (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) ft;\n            m' = filter\n                  (\\<lambda>f.\n                      \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n                  m\n        in case m' of [] \\<Rightarrow> NoAction | [s] \\<Rightarrow> Action s\n           | s # aa # lista \\<Rightarrow> Undefined) =\n       Action fe", "by(clarsimp split: flowtable_behavior.splits list.splits) (drule filter_singleton; simp)"], ["", "fun no_overlaps where\n\"no_overlaps _ [] = True\" |\n\"no_overlaps \\<gamma> (a#as) = (no_overlaps \\<gamma> as \\<and> (\n\t\\<forall>b \\<in> set as. ofe_prio a = ofe_prio b \\<longrightarrow> \\<not>(\\<exists>p \\<in> UNIV. \\<gamma> (ofe_fields a) p \\<and> \\<gamma> (ofe_fields b) p)))\""], ["", "lemma no_overlap_ConsI: \"check_no_overlap2 \\<gamma> (x#xs) \\<Longrightarrow> check_no_overlap2 \\<gamma> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. check_no_overlap2 \\<gamma> (x # xs) \\<Longrightarrow>\n    check_no_overlap2 \\<gamma> xs", "unfolding check_no_overlap2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set (x # xs).\n       \\<forall>b\\<in>set (x # xs).\n          a \\<noteq> b \\<and> ofe_prio a = ofe_prio b \\<longrightarrow>\n          \\<not> (\\<exists>p\\<in>UNIV.\n                     \\<gamma> (ofe_fields a) p \\<and>\n                     \\<gamma> (ofe_fields b) p) \\<Longrightarrow>\n    \\<forall>a\\<in>set xs.\n       \\<forall>b\\<in>set xs.\n          a \\<noteq> b \\<and> ofe_prio a = ofe_prio b \\<longrightarrow>\n          \\<not> (\\<exists>p\\<in>UNIV.\n                     \\<gamma> (ofe_fields a) p \\<and>\n                     \\<gamma> (ofe_fields b) p)", "by simp"], ["", "lemma no_overlapsI: \"check_no_overlap \\<gamma> t \\<Longrightarrow> distinct t \\<Longrightarrow> no_overlaps \\<gamma> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>check_no_overlap \\<gamma> t; distinct t\\<rbrakk>\n    \\<Longrightarrow> no_overlaps \\<gamma> t", "unfolding check_no_overlap_alt"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>check_no_overlap2 \\<gamma> t; distinct t\\<rbrakk>\n    \\<Longrightarrow> no_overlaps \\<gamma> t", "proof(induction t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>check_no_overlap2 \\<gamma> []; distinct []\\<rbrakk>\n    \\<Longrightarrow> no_overlaps \\<gamma> []\n 2. \\<And>a t.\n       \\<lbrakk>\\<lbrakk>check_no_overlap2 \\<gamma> t; distinct t\\<rbrakk>\n                \\<Longrightarrow> no_overlaps \\<gamma> t;\n        check_no_overlap2 \\<gamma> (a # t); distinct (a # t)\\<rbrakk>\n       \\<Longrightarrow> no_overlaps \\<gamma> (a # t)", "case (Cons a t)"], ["proof (state)\nthis:\n  \\<lbrakk>check_no_overlap2 \\<gamma> t; distinct t\\<rbrakk>\n  \\<Longrightarrow> no_overlaps \\<gamma> t\n  check_no_overlap2 \\<gamma> (a # t)\n  distinct (a # t)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>check_no_overlap2 \\<gamma> []; distinct []\\<rbrakk>\n    \\<Longrightarrow> no_overlaps \\<gamma> []\n 2. \\<And>a t.\n       \\<lbrakk>\\<lbrakk>check_no_overlap2 \\<gamma> t; distinct t\\<rbrakk>\n                \\<Longrightarrow> no_overlaps \\<gamma> t;\n        check_no_overlap2 \\<gamma> (a # t); distinct (a # t)\\<rbrakk>\n       \\<Longrightarrow> no_overlaps \\<gamma> (a # t)", "from no_overlap_ConsI[OF Cons(2)] Cons(3,1)"], ["proof (chain)\npicking this:\n  check_no_overlap2 \\<gamma> t\n  distinct (a # t)\n  \\<lbrakk>check_no_overlap2 \\<gamma> t; distinct t\\<rbrakk>\n  \\<Longrightarrow> no_overlaps \\<gamma> t", "have \"no_overlaps \\<gamma> t\""], ["proof (prove)\nusing this:\n  check_no_overlap2 \\<gamma> t\n  distinct (a # t)\n  \\<lbrakk>check_no_overlap2 \\<gamma> t; distinct t\\<rbrakk>\n  \\<Longrightarrow> no_overlaps \\<gamma> t\n\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> t", "by simp"], ["proof (state)\nthis:\n  no_overlaps \\<gamma> t\n\ngoal (2 subgoals):\n 1. \\<lbrakk>check_no_overlap2 \\<gamma> []; distinct []\\<rbrakk>\n    \\<Longrightarrow> no_overlaps \\<gamma> []\n 2. \\<And>a t.\n       \\<lbrakk>\\<lbrakk>check_no_overlap2 \\<gamma> t; distinct t\\<rbrakk>\n                \\<Longrightarrow> no_overlaps \\<gamma> t;\n        check_no_overlap2 \\<gamma> (a # t); distinct (a # t)\\<rbrakk>\n       \\<Longrightarrow> no_overlaps \\<gamma> (a # t)", "thus ?case"], ["proof (prove)\nusing this:\n  no_overlaps \\<gamma> t\n\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> (a # t)", "using Cons(2,3)"], ["proof (prove)\nusing this:\n  no_overlaps \\<gamma> t\n  check_no_overlap2 \\<gamma> (a # t)\n  distinct (a # t)\n\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> (a # t)", "unfolding check_no_overlap2_def"], ["proof (prove)\nusing this:\n  no_overlaps \\<gamma> t\n  \\<forall>aa\\<in>set (a # t).\n     \\<forall>b\\<in>set (a # t).\n        aa \\<noteq> b \\<and> ofe_prio aa = ofe_prio b \\<longrightarrow>\n        \\<not> (\\<exists>p\\<in>UNIV.\n                   \\<gamma> (ofe_fields aa) p \\<and>\n                   \\<gamma> (ofe_fields b) p)\n  distinct (a # t)\n\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> (a # t)", "by auto"], ["proof (state)\nthis:\n  no_overlaps \\<gamma> (a # t)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>check_no_overlap2 \\<gamma> []; distinct []\\<rbrakk>\n    \\<Longrightarrow> no_overlaps \\<gamma> []", "qed (simp add: check_no_overlap2_def)"], ["", "lemma check_no_overlapI: \"no_overlaps \\<gamma> t \\<Longrightarrow> check_no_overlap \\<gamma> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> t \\<Longrightarrow> check_no_overlap \\<gamma> t", "unfolding check_no_overlap_alt"], ["proof (prove)\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> t \\<Longrightarrow> check_no_overlap2 \\<gamma> t", "proof(induction t)"], ["proof (state)\ngoal (2 subgoals):\n 1. no_overlaps \\<gamma> [] \\<Longrightarrow> check_no_overlap2 \\<gamma> []\n 2. \\<And>a t.\n       \\<lbrakk>no_overlaps \\<gamma> t \\<Longrightarrow>\n                check_no_overlap2 \\<gamma> t;\n        no_overlaps \\<gamma> (a # t)\\<rbrakk>\n       \\<Longrightarrow> check_no_overlap2 \\<gamma> (a # t)", "case (Cons a t)"], ["proof (state)\nthis:\n  no_overlaps \\<gamma> t \\<Longrightarrow> check_no_overlap2 \\<gamma> t\n  no_overlaps \\<gamma> (a # t)\n\ngoal (2 subgoals):\n 1. no_overlaps \\<gamma> [] \\<Longrightarrow> check_no_overlap2 \\<gamma> []\n 2. \\<And>a t.\n       \\<lbrakk>no_overlaps \\<gamma> t \\<Longrightarrow>\n                check_no_overlap2 \\<gamma> t;\n        no_overlaps \\<gamma> (a # t)\\<rbrakk>\n       \\<Longrightarrow> check_no_overlap2 \\<gamma> (a # t)", "from Cons(1)[OF conjunct1[OF Cons(2)[unfolded no_overlaps.simps]]]"], ["proof (chain)\npicking this:\n  check_no_overlap2 \\<gamma> t", "show ?case"], ["proof (prove)\nusing this:\n  check_no_overlap2 \\<gamma> t\n\ngoal (1 subgoal):\n 1. check_no_overlap2 \\<gamma> (a # t)", "using conjunct2[OF Cons(2)[unfolded no_overlaps.simps]]"], ["proof (prove)\nusing this:\n  check_no_overlap2 \\<gamma> t\n  \\<forall>b\\<in>set t.\n     ofe_prio a = ofe_prio b \\<longrightarrow>\n     \\<not> (\\<exists>p\\<in>UNIV.\n                \\<gamma> (ofe_fields a) p \\<and> \\<gamma> (ofe_fields b) p)\n\ngoal (1 subgoal):\n 1. check_no_overlap2 \\<gamma> (a # t)", "unfolding check_no_overlap2_def"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set t.\n     \\<forall>b\\<in>set t.\n        a \\<noteq> b \\<and> ofe_prio a = ofe_prio b \\<longrightarrow>\n        \\<not> (\\<exists>p\\<in>UNIV.\n                   \\<gamma> (ofe_fields a) p \\<and>\n                   \\<gamma> (ofe_fields b) p)\n  \\<forall>b\\<in>set t.\n     ofe_prio a = ofe_prio b \\<longrightarrow>\n     \\<not> (\\<exists>p\\<in>UNIV.\n                \\<gamma> (ofe_fields a) p \\<and> \\<gamma> (ofe_fields b) p)\n\ngoal (1 subgoal):\n 1. \\<forall>aa\\<in>set (a # t).\n       \\<forall>b\\<in>set (a # t).\n          aa \\<noteq> b \\<and> ofe_prio aa = ofe_prio b \\<longrightarrow>\n          \\<not> (\\<exists>p\\<in>UNIV.\n                     \\<gamma> (ofe_fields aa) p \\<and>\n                     \\<gamma> (ofe_fields b) p)", "by auto"], ["proof (state)\nthis:\n  check_no_overlap2 \\<gamma> (a # t)\n\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> [] \\<Longrightarrow> check_no_overlap2 \\<gamma> []", "qed (simp add: check_no_overlap2_def)"], ["", "lemma \"(\\<And>e p. e \\<in> set t \\<Longrightarrow> \\<not>\\<gamma> (ofe_fields e) p) \\<Longrightarrow> no_overlaps \\<gamma> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>e p.\n        e \\<in> set t \\<Longrightarrow>\n        \\<not> \\<gamma> (ofe_fields e) p) \\<Longrightarrow>\n    no_overlaps \\<gamma> t", "by(induction t) simp_all"], ["", "lemma no_overlaps_append: \"no_overlaps \\<gamma> (x @ y) \\<Longrightarrow> no_overlaps \\<gamma> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> (x @ y) \\<Longrightarrow> no_overlaps \\<gamma> y", "by(induction x) simp_all"], ["", "lemma no_overlaps_ne1: \"no_overlaps \\<gamma> (x @ a # y @ b # z) \\<Longrightarrow> ((\\<exists>p. \\<gamma> (ofe_fields a) p) \\<or> (\\<exists>p. \\<gamma> (ofe_fields b) p)) \\<Longrightarrow> a \\<noteq> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>no_overlaps \\<gamma> (x @ a # y @ b # z);\n     (\\<exists>p. \\<gamma> (ofe_fields a) p) \\<or>\n     (\\<exists>p. \\<gamma> (ofe_fields b) p)\\<rbrakk>\n    \\<Longrightarrow> a \\<noteq> b", "proof (rule notI, goal_cases contr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>no_overlaps \\<gamma> (x @ a # y @ b # z);\n     (\\<exists>p. \\<gamma> (ofe_fields a) p) \\<or>\n     (\\<exists>p. \\<gamma> (ofe_fields b) p);\n     a = b\\<rbrakk>\n    \\<Longrightarrow> False", "case contr"], ["proof (state)\nthis:\n  no_overlaps \\<gamma> (x @ a # y @ b # z)\n  (\\<exists>p. \\<gamma> (ofe_fields a) p) \\<or>\n  (\\<exists>p. \\<gamma> (ofe_fields b) p)\n  a = b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>no_overlaps \\<gamma> (x @ a # y @ b # z);\n     (\\<exists>p. \\<gamma> (ofe_fields a) p) \\<or>\n     (\\<exists>p. \\<gamma> (ofe_fields b) p);\n     a = b\\<rbrakk>\n    \\<Longrightarrow> False", "from contr(1) no_overlaps_append"], ["proof (chain)\npicking this:\n  no_overlaps \\<gamma> (x @ a # y @ b # z)\n  no_overlaps ?\\<gamma> (?x @ ?y) \\<Longrightarrow> no_overlaps ?\\<gamma> ?y", "have \"no_overlaps \\<gamma> (a # y @ b # z)\""], ["proof (prove)\nusing this:\n  no_overlaps \\<gamma> (x @ a # y @ b # z)\n  no_overlaps ?\\<gamma> (?x @ ?y) \\<Longrightarrow> no_overlaps ?\\<gamma> ?y\n\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> (a # y @ b # z)", "by blast"], ["proof (state)\nthis:\n  no_overlaps \\<gamma> (a # y @ b # z)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>no_overlaps \\<gamma> (x @ a # y @ b # z);\n     (\\<exists>p. \\<gamma> (ofe_fields a) p) \\<or>\n     (\\<exists>p. \\<gamma> (ofe_fields b) p);\n     a = b\\<rbrakk>\n    \\<Longrightarrow> False", "note this[unfolded no_overlaps.simps]"], ["proof (state)\nthis:\n  no_overlaps \\<gamma> (y @ b # z) \\<and>\n  (\\<forall>b\\<in>set (y @ b # z).\n      ofe_prio a = ofe_prio b \\<longrightarrow>\n      \\<not> (\\<exists>p\\<in>UNIV.\n                 \\<gamma> (ofe_fields a) p \\<and>\n                 \\<gamma> (ofe_fields b) p))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>no_overlaps \\<gamma> (x @ a # y @ b # z);\n     (\\<exists>p. \\<gamma> (ofe_fields a) p) \\<or>\n     (\\<exists>p. \\<gamma> (ofe_fields b) p);\n     a = b\\<rbrakk>\n    \\<Longrightarrow> False", "with contr(3)"], ["proof (chain)\npicking this:\n  a = b\n  no_overlaps \\<gamma> (y @ b # z) \\<and>\n  (\\<forall>b\\<in>set (y @ b # z).\n      ofe_prio a = ofe_prio b \\<longrightarrow>\n      \\<not> (\\<exists>p\\<in>UNIV.\n                 \\<gamma> (ofe_fields a) p \\<and>\n                 \\<gamma> (ofe_fields b) p))", "have \"\\<not> (\\<exists>p\\<in>UNIV. \\<gamma> (ofe_fields a) p \\<and> \\<gamma> (ofe_fields b) p)\""], ["proof (prove)\nusing this:\n  a = b\n  no_overlaps \\<gamma> (y @ b # z) \\<and>\n  (\\<forall>b\\<in>set (y @ b # z).\n      ofe_prio a = ofe_prio b \\<longrightarrow>\n      \\<not> (\\<exists>p\\<in>UNIV.\n                 \\<gamma> (ofe_fields a) p \\<and>\n                 \\<gamma> (ofe_fields b) p))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>p\\<in>UNIV.\n               \\<gamma> (ofe_fields a) p \\<and> \\<gamma> (ofe_fields b) p)", "by simp"], ["proof (state)\nthis:\n  \\<not> (\\<exists>p\\<in>UNIV.\n             \\<gamma> (ofe_fields a) p \\<and> \\<gamma> (ofe_fields b) p)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>no_overlaps \\<gamma> (x @ a # y @ b # z);\n     (\\<exists>p. \\<gamma> (ofe_fields a) p) \\<or>\n     (\\<exists>p. \\<gamma> (ofe_fields b) p);\n     a = b\\<rbrakk>\n    \\<Longrightarrow> False", "with contr(2)"], ["proof (chain)\npicking this:\n  (\\<exists>p. \\<gamma> (ofe_fields a) p) \\<or>\n  (\\<exists>p. \\<gamma> (ofe_fields b) p)\n  \\<not> (\\<exists>p\\<in>UNIV.\n             \\<gamma> (ofe_fields a) p \\<and> \\<gamma> (ofe_fields b) p)", "show False"], ["proof (prove)\nusing this:\n  (\\<exists>p. \\<gamma> (ofe_fields a) p) \\<or>\n  (\\<exists>p. \\<gamma> (ofe_fields b) p)\n  \\<not> (\\<exists>p\\<in>UNIV.\n             \\<gamma> (ofe_fields a) p \\<and> \\<gamma> (ofe_fields b) p)\n\ngoal (1 subgoal):\n 1. False", "unfolding contr(3)"], ["proof (prove)\nusing this:\n  (\\<exists>p. \\<gamma> (ofe_fields b) p) \\<or>\n  (\\<exists>p. \\<gamma> (ofe_fields b) p)\n  \\<not> (\\<exists>p\\<in>UNIV.\n             \\<gamma> (ofe_fields b) p \\<and> \\<gamma> (ofe_fields b) p)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma no_overlaps_defeq: \"no_overlaps \\<gamma> fe \\<Longrightarrow> OF_same_priority_match2 \\<gamma> fe p = OF_priority_match \\<gamma> fe p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> fe \\<Longrightarrow>\n    OF_same_priority_match2 \\<gamma> fe p = OF_priority_match \\<gamma> fe p", "unfolding OF_same_priority_match2_def OF_priority_match_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> fe \\<Longrightarrow>\n    (let s = {ofe_action f |f.\n              f \\<in> set fe \\<and>\n              \\<gamma> (ofe_fields f) p \\<and>\n              (\\<forall>fo\\<in>set fe.\n                  ofe_prio f < ofe_prio fo \\<longrightarrow>\n                  \\<not> \\<gamma> (ofe_fields fo) p)}\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe;\n         m' = filter\n               (\\<lambda>f.\n                   \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n               m\n     in case m' of [] \\<Rightarrow> NoAction\n        | [s] \\<Rightarrow> Action (ofe_action s)\n        | s # aa # lista \\<Rightarrow> Undefined)", "unfolding f_Img_ex_set"], ["proof (prove)\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> fe \\<Longrightarrow>\n    (let s = ofe_action `\n             {f \\<in> set fe.\n              \\<gamma> (ofe_fields f) p \\<and>\n              (\\<forall>fo\\<in>set fe.\n                  ofe_prio f < ofe_prio fo \\<longrightarrow>\n                  \\<not> \\<gamma> (ofe_fields fo) p)}\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe;\n         m' = filter\n               (\\<lambda>f.\n                   \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n               m\n     in case m' of [] \\<Rightarrow> NoAction\n        | [s] \\<Rightarrow> Action (ofe_action s)\n        | s # aa # lista \\<Rightarrow> Undefined)", "unfolding prio_match_matcher_alt"], ["proof (prove)\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> fe \\<Longrightarrow>\n    (let s = ofe_action `\n             (let matching = {f \\<in> set fe. \\<gamma> (ofe_fields f) p}\n              in {f \\<in> matching.\n                  \\<forall>fo\\<in>matching. ofe_prio fo \\<le> ofe_prio f})\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe;\n         m' = filter\n               (\\<lambda>f.\n                   \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n               m\n     in case m' of [] \\<Rightarrow> NoAction\n        | [s] \\<Rightarrow> Action (ofe_action s)\n        | s # aa # lista \\<Rightarrow> Undefined)", "unfolding prio_match_matcher_alt2"], ["proof (prove)\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> fe \\<Longrightarrow>\n    (let s = ofe_action `\n             set (let matching =\n                        filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n                  in filter\n                      (\\<lambda>f.\n                          \\<forall>fo\\<in>set matching.\n                             ofe_prio fo \\<le> ofe_prio f)\n                      matching)\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe;\n         m' = filter\n               (\\<lambda>f.\n                   \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n               m\n     in case m' of [] \\<Rightarrow> NoAction\n        | [s] \\<Rightarrow> Action (ofe_action s)\n        | s # aa # lista \\<Rightarrow> Undefined)", "proof (goal_cases uf)"], ["proof (state)\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> fe \\<Longrightarrow>\n    (let s = ofe_action `\n             set (let matching =\n                        filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n                  in filter\n                      (\\<lambda>f.\n                          \\<forall>fo\\<in>set matching.\n                             ofe_prio fo \\<le> ofe_prio f)\n                      matching)\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe;\n         m' = filter\n               (\\<lambda>f.\n                   \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n               m\n     in case m' of [] \\<Rightarrow> NoAction\n        | [s] \\<Rightarrow> Action (ofe_action s)\n        | s # aa # lista \\<Rightarrow> Undefined)", "case uf"], ["proof (state)\nthis:\n  no_overlaps \\<gamma> fe\n\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> fe \\<Longrightarrow>\n    (let s = ofe_action `\n             set (let matching =\n                        filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n                  in filter\n                      (\\<lambda>f.\n                          \\<forall>fo\\<in>set matching.\n                             ofe_prio fo \\<le> ofe_prio f)\n                      matching)\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe;\n         m' = filter\n               (\\<lambda>f.\n                   \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n               m\n     in case m' of [] \\<Rightarrow> NoAction\n        | [s] \\<Rightarrow> Action (ofe_action s)\n        | s # aa # lista \\<Rightarrow> Undefined)", "let ?m' = \"let m = [f\\<leftarrow>fe . \\<gamma> (ofe_fields f) p] in [f\\<leftarrow>m . \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f]\""], ["proof (state)\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> fe \\<Longrightarrow>\n    (let s = ofe_action `\n             set (let matching =\n                        filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n                  in filter\n                      (\\<lambda>f.\n                          \\<forall>fo\\<in>set matching.\n                             ofe_prio fo \\<le> ofe_prio f)\n                      matching)\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe;\n         m' = filter\n               (\\<lambda>f.\n                   \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n               m\n     in case m' of [] \\<Rightarrow> NoAction\n        | [s] \\<Rightarrow> Action (ofe_action s)\n        | s # aa # lista \\<Rightarrow> Undefined)", "let ?s = \"ofe_action ` set ?m'\""], ["proof (state)\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> fe \\<Longrightarrow>\n    (let s = ofe_action `\n             set (let matching =\n                        filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n                  in filter\n                      (\\<lambda>f.\n                          \\<forall>fo\\<in>set matching.\n                             ofe_prio fo \\<le> ofe_prio f)\n                      matching)\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe;\n         m' = filter\n               (\\<lambda>f.\n                   \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n               m\n     in case m' of [] \\<Rightarrow> NoAction\n        | [s] \\<Rightarrow> Action (ofe_action s)\n        | s # aa # lista \\<Rightarrow> Undefined)", "from uf"], ["proof (chain)\npicking this:\n  no_overlaps \\<gamma> fe", "show ?case"], ["proof (prove)\nusing this:\n  no_overlaps \\<gamma> fe\n\ngoal (1 subgoal):\n 1. (let s = ofe_action `\n             set (let matching =\n                        filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n                  in filter\n                      (\\<lambda>f.\n                          \\<forall>fo\\<in>set matching.\n                             ofe_prio fo \\<le> ofe_prio f)\n                      matching)\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe;\n         m' = filter\n               (\\<lambda>f.\n                   \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n               m\n     in case m' of [] \\<Rightarrow> NoAction\n        | [s] \\<Rightarrow> Action (ofe_action s)\n        | s # aa # lista \\<Rightarrow> Undefined)", "proof(cases ?m')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>no_overlaps \\<gamma> fe;\n     (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n      in filter\n          (\\<lambda>f. \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n          m) =\n     []\\<rbrakk>\n    \\<Longrightarrow> (let s = ofe_action `\n                               set (let matching =\n    filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n                                    in filter\n  (\\<lambda>f. \\<forall>fo\\<in>set matching. ofe_prio fo \\<le> ofe_prio f)\n  matching)\n                       in case card s of 0 \\<Rightarrow> NoAction\n                          | Suc 0 \\<Rightarrow> Action (the_elem s)\n                          | Suc (Suc nata) \\<Rightarrow> Undefined) =\n                      (let m = filter\n                                (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe;\n                           m' = filter\n                                 (\\<lambda>f.\n                                     \\<forall>fo\\<in>set m.\n  ofe_prio fo \\<le> ofe_prio f)\n                                 m\n                       in case m' of [] \\<Rightarrow> NoAction\n                          | [s] \\<Rightarrow> Action (ofe_action s)\n                          | s # aa # lista \\<Rightarrow> Undefined)\n 2. \\<And>a list.\n       \\<lbrakk>no_overlaps \\<gamma> fe;\n        (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n         in filter\n             (\\<lambda>f.\n                 \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n             m) =\n        a # list\\<rbrakk>\n       \\<Longrightarrow> (let s = ofe_action `\n                                  set (let matching =\n       filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n in filter\n     (\\<lambda>f.\n         \\<forall>fo\\<in>set matching. ofe_prio fo \\<le> ofe_prio f)\n     matching)\n                          in case card s of 0 \\<Rightarrow> NoAction\n                             | Suc 0 \\<Rightarrow> Action (the_elem s)\n                             | Suc (Suc nata) \\<Rightarrow> Undefined) =\n                         (let m = filter\n                                   (\\<lambda>f. \\<gamma> (ofe_fields f) p)\n                                   fe;\n                              m' = filter\n                                    (\\<lambda>f.\n  \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n                                    m\n                          in case m' of [] \\<Rightarrow> NoAction\n                             | [s] \\<Rightarrow> Action (ofe_action s)\n                             | s # aa # lista \\<Rightarrow> Undefined)", "case Nil"], ["proof (state)\nthis:\n  (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n   in filter\n       (\\<lambda>f. \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n       m) =\n  []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>no_overlaps \\<gamma> fe;\n     (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n      in filter\n          (\\<lambda>f. \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n          m) =\n     []\\<rbrakk>\n    \\<Longrightarrow> (let s = ofe_action `\n                               set (let matching =\n    filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n                                    in filter\n  (\\<lambda>f. \\<forall>fo\\<in>set matching. ofe_prio fo \\<le> ofe_prio f)\n  matching)\n                       in case card s of 0 \\<Rightarrow> NoAction\n                          | Suc 0 \\<Rightarrow> Action (the_elem s)\n                          | Suc (Suc nata) \\<Rightarrow> Undefined) =\n                      (let m = filter\n                                (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe;\n                           m' = filter\n                                 (\\<lambda>f.\n                                     \\<forall>fo\\<in>set m.\n  ofe_prio fo \\<le> ofe_prio f)\n                                 m\n                       in case m' of [] \\<Rightarrow> NoAction\n                          | [s] \\<Rightarrow> Action (ofe_action s)\n                          | s # aa # lista \\<Rightarrow> Undefined)\n 2. \\<And>a list.\n       \\<lbrakk>no_overlaps \\<gamma> fe;\n        (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n         in filter\n             (\\<lambda>f.\n                 \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n             m) =\n        a # list\\<rbrakk>\n       \\<Longrightarrow> (let s = ofe_action `\n                                  set (let matching =\n       filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n in filter\n     (\\<lambda>f.\n         \\<forall>fo\\<in>set matching. ofe_prio fo \\<le> ofe_prio f)\n     matching)\n                          in case card s of 0 \\<Rightarrow> NoAction\n                             | Suc 0 \\<Rightarrow> Action (the_elem s)\n                             | Suc (Suc nata) \\<Rightarrow> Undefined) =\n                         (let m = filter\n                                   (\\<lambda>f. \\<gamma> (ofe_fields f) p)\n                                   fe;\n                              m' = filter\n                                    (\\<lambda>f.\n  \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n                                    m\n                          in case m' of [] \\<Rightarrow> NoAction\n                             | [s] \\<Rightarrow> Action (ofe_action s)\n                             | s # aa # lista \\<Rightarrow> Undefined)", "moreover"], ["proof (state)\nthis:\n  (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n   in filter\n       (\\<lambda>f. \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n       m) =\n  []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>no_overlaps \\<gamma> fe;\n     (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n      in filter\n          (\\<lambda>f. \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n          m) =\n     []\\<rbrakk>\n    \\<Longrightarrow> (let s = ofe_action `\n                               set (let matching =\n    filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n                                    in filter\n  (\\<lambda>f. \\<forall>fo\\<in>set matching. ofe_prio fo \\<le> ofe_prio f)\n  matching)\n                       in case card s of 0 \\<Rightarrow> NoAction\n                          | Suc 0 \\<Rightarrow> Action (the_elem s)\n                          | Suc (Suc nata) \\<Rightarrow> Undefined) =\n                      (let m = filter\n                                (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe;\n                           m' = filter\n                                 (\\<lambda>f.\n                                     \\<forall>fo\\<in>set m.\n  ofe_prio fo \\<le> ofe_prio f)\n                                 m\n                       in case m' of [] \\<Rightarrow> NoAction\n                          | [s] \\<Rightarrow> Action (ofe_action s)\n                          | s # aa # lista \\<Rightarrow> Undefined)\n 2. \\<And>a list.\n       \\<lbrakk>no_overlaps \\<gamma> fe;\n        (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n         in filter\n             (\\<lambda>f.\n                 \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n             m) =\n        a # list\\<rbrakk>\n       \\<Longrightarrow> (let s = ofe_action `\n                                  set (let matching =\n       filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n in filter\n     (\\<lambda>f.\n         \\<forall>fo\\<in>set matching. ofe_prio fo \\<le> ofe_prio f)\n     matching)\n                          in case card s of 0 \\<Rightarrow> NoAction\n                             | Suc 0 \\<Rightarrow> Action (the_elem s)\n                             | Suc (Suc nata) \\<Rightarrow> Undefined) =\n                         (let m = filter\n                                   (\\<lambda>f. \\<gamma> (ofe_fields f) p)\n                                   fe;\n                              m' = filter\n                                    (\\<lambda>f.\n  \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n                                    m\n                          in case m' of [] \\<Rightarrow> NoAction\n                             | [s] \\<Rightarrow> Action (ofe_action s)\n                             | s # aa # lista \\<Rightarrow> Undefined)", "then"], ["proof (chain)\npicking this:\n  (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n   in filter\n       (\\<lambda>f. \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n       m) =\n  []", "have \"card ?s = 0\""], ["proof (prove)\nusing this:\n  (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n   in filter\n       (\\<lambda>f. \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n       m) =\n  []\n\ngoal (1 subgoal):\n 1. card\n     (ofe_action `\n      set (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n           in filter\n               (\\<lambda>f.\n                   \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n               m)) =\n    0", "by force"], ["proof (state)\nthis:\n  card\n   (ofe_action `\n    set (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n         in filter\n             (\\<lambda>f.\n                 \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n             m)) =\n  0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>no_overlaps \\<gamma> fe;\n     (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n      in filter\n          (\\<lambda>f. \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n          m) =\n     []\\<rbrakk>\n    \\<Longrightarrow> (let s = ofe_action `\n                               set (let matching =\n    filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n                                    in filter\n  (\\<lambda>f. \\<forall>fo\\<in>set matching. ofe_prio fo \\<le> ofe_prio f)\n  matching)\n                       in case card s of 0 \\<Rightarrow> NoAction\n                          | Suc 0 \\<Rightarrow> Action (the_elem s)\n                          | Suc (Suc nata) \\<Rightarrow> Undefined) =\n                      (let m = filter\n                                (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe;\n                           m' = filter\n                                 (\\<lambda>f.\n                                     \\<forall>fo\\<in>set m.\n  ofe_prio fo \\<le> ofe_prio f)\n                                 m\n                       in case m' of [] \\<Rightarrow> NoAction\n                          | [s] \\<Rightarrow> Action (ofe_action s)\n                          | s # aa # lista \\<Rightarrow> Undefined)\n 2. \\<And>a list.\n       \\<lbrakk>no_overlaps \\<gamma> fe;\n        (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n         in filter\n             (\\<lambda>f.\n                 \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n             m) =\n        a # list\\<rbrakk>\n       \\<Longrightarrow> (let s = ofe_action `\n                                  set (let matching =\n       filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n in filter\n     (\\<lambda>f.\n         \\<forall>fo\\<in>set matching. ofe_prio fo \\<le> ofe_prio f)\n     matching)\n                          in case card s of 0 \\<Rightarrow> NoAction\n                             | Suc 0 \\<Rightarrow> Action (the_elem s)\n                             | Suc (Suc nata) \\<Rightarrow> Undefined) =\n                         (let m = filter\n                                   (\\<lambda>f. \\<gamma> (ofe_fields f) p)\n                                   fe;\n                              m' = filter\n                                    (\\<lambda>f.\n  \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n                                    m\n                          in case m' of [] \\<Rightarrow> NoAction\n                             | [s] \\<Rightarrow> Action (ofe_action s)\n                             | s # aa # lista \\<Rightarrow> Undefined)", "ultimately"], ["proof (chain)\npicking this:\n  (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n   in filter\n       (\\<lambda>f. \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n       m) =\n  []\n  card\n   (ofe_action `\n    set (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n         in filter\n             (\\<lambda>f.\n                 \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n             m)) =\n  0", "show ?thesis"], ["proof (prove)\nusing this:\n  (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n   in filter\n       (\\<lambda>f. \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n       m) =\n  []\n  card\n   (ofe_action `\n    set (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n         in filter\n             (\\<lambda>f.\n                 \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n             m)) =\n  0\n\ngoal (1 subgoal):\n 1. (let s = ofe_action `\n             set (let matching =\n                        filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n                  in filter\n                      (\\<lambda>f.\n                          \\<forall>fo\\<in>set matching.\n                             ofe_prio fo \\<le> ofe_prio f)\n                      matching)\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe;\n         m' = filter\n               (\\<lambda>f.\n                   \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n               m\n     in case m' of [] \\<Rightarrow> NoAction\n        | [s] \\<Rightarrow> Action (ofe_action s)\n        | s # aa # lista \\<Rightarrow> Undefined)", "by(simp add: Let_def)"], ["proof (state)\nthis:\n  (let s = ofe_action `\n           set (let matching =\n                      filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n                in filter\n                    (\\<lambda>f.\n                        \\<forall>fo\\<in>set matching.\n                           ofe_prio fo \\<le> ofe_prio f)\n                    matching)\n   in case card s of 0 \\<Rightarrow> NoAction\n      | Suc 0 \\<Rightarrow> Action (the_elem s)\n      | Suc (Suc nata) \\<Rightarrow> Undefined) =\n  (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe;\n       m' = filter\n             (\\<lambda>f.\n                 \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n             m\n   in case m' of [] \\<Rightarrow> NoAction\n      | [s] \\<Rightarrow> Action (ofe_action s)\n      | s # aa # lista \\<Rightarrow> Undefined)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>no_overlaps \\<gamma> fe;\n        (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n         in filter\n             (\\<lambda>f.\n                 \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n             m) =\n        a # list\\<rbrakk>\n       \\<Longrightarrow> (let s = ofe_action `\n                                  set (let matching =\n       filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n in filter\n     (\\<lambda>f.\n         \\<forall>fo\\<in>set matching. ofe_prio fo \\<le> ofe_prio f)\n     matching)\n                          in case card s of 0 \\<Rightarrow> NoAction\n                             | Suc 0 \\<Rightarrow> Action (the_elem s)\n                             | Suc (Suc nata) \\<Rightarrow> Undefined) =\n                         (let m = filter\n                                   (\\<lambda>f. \\<gamma> (ofe_fields f) p)\n                                   fe;\n                              m' = filter\n                                    (\\<lambda>f.\n  \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n                                    m\n                          in case m' of [] \\<Rightarrow> NoAction\n                             | [s] \\<Rightarrow> Action (ofe_action s)\n                             | s # aa # lista \\<Rightarrow> Undefined)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>no_overlaps \\<gamma> fe;\n        (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n         in filter\n             (\\<lambda>f.\n                 \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n             m) =\n        a # list\\<rbrakk>\n       \\<Longrightarrow> (let s = ofe_action `\n                                  set (let matching =\n       filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n in filter\n     (\\<lambda>f.\n         \\<forall>fo\\<in>set matching. ofe_prio fo \\<le> ofe_prio f)\n     matching)\n                          in case card s of 0 \\<Rightarrow> NoAction\n                             | Suc 0 \\<Rightarrow> Action (the_elem s)\n                             | Suc (Suc nata) \\<Rightarrow> Undefined) =\n                         (let m = filter\n                                   (\\<lambda>f. \\<gamma> (ofe_fields f) p)\n                                   fe;\n                              m' = filter\n                                    (\\<lambda>f.\n  \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n                                    m\n                          in case m' of [] \\<Rightarrow> NoAction\n                             | [s] \\<Rightarrow> Action (ofe_action s)\n                             | s # aa # lista \\<Rightarrow> Undefined)", "case (Cons a as)"], ["proof (state)\nthis:\n  (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n   in filter\n       (\\<lambda>f. \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n       m) =\n  a # as\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>no_overlaps \\<gamma> fe;\n        (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n         in filter\n             (\\<lambda>f.\n                 \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n             m) =\n        a # list\\<rbrakk>\n       \\<Longrightarrow> (let s = ofe_action `\n                                  set (let matching =\n       filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n in filter\n     (\\<lambda>f.\n         \\<forall>fo\\<in>set matching. ofe_prio fo \\<le> ofe_prio f)\n     matching)\n                          in case card s of 0 \\<Rightarrow> NoAction\n                             | Suc 0 \\<Rightarrow> Action (the_elem s)\n                             | Suc (Suc nata) \\<Rightarrow> Undefined) =\n                         (let m = filter\n                                   (\\<lambda>f. \\<gamma> (ofe_fields f) p)\n                                   fe;\n                              m' = filter\n                                    (\\<lambda>f.\n  \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n                                    m\n                          in case m' of [] \\<Rightarrow> NoAction\n                             | [s] \\<Rightarrow> Action (ofe_action s)\n                             | s # aa # lista \\<Rightarrow> Undefined)", "have \"as = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as = []", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> False", "assume \"as \\<noteq> []\""], ["proof (state)\nthis:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  as \\<noteq> []", "obtain b bs where bbs: \"as = b # bs\""], ["proof (prove)\nusing this:\n  as \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>b bs. as = b # bs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson neq_Nil_conv)"], ["proof (state)\nthis:\n  as = b # bs\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> False", "note no = Cons[unfolded Let_def filter_filter]"], ["proof (state)\nthis:\n  filter\n   (\\<lambda>x.\n       \\<gamma> (ofe_fields x) p \\<and>\n       (\\<forall>fo\\<in>set (filter (\\<lambda>f. \\<gamma> (ofe_fields f) p)\n                              fe).\n           ofe_prio fo \\<le> ofe_prio x))\n   fe =\n  a # as\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> False", "have f1: \"a \\<in> set ?m'\" \"b \\<in> set ?m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> set (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n                 in filter\n                     (\\<lambda>f.\n                         \\<forall>fo\\<in>set m.\n                            ofe_prio fo \\<le> ofe_prio f)\n                     m) &&&\n    b \\<in> set (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n                 in filter\n                     (\\<lambda>f.\n                         \\<forall>fo\\<in>set m.\n                            ofe_prio fo \\<le> ofe_prio f)\n                     m)", "unfolding bbs local.Cons"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> set (a # b # bs) &&& b \\<in> set (a # b # bs)", "by simp_all"], ["proof (state)\nthis:\n  a \\<in> set (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n               in filter\n                   (\\<lambda>f.\n                       \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n                   m)\n  b \\<in> set (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n               in filter\n                   (\\<lambda>f.\n                       \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n                   m)\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> False", "hence \"ofe_prio a = ofe_prio b\""], ["proof (prove)\nusing this:\n  a \\<in> set (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n               in filter\n                   (\\<lambda>f.\n                       \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n                   m)\n  b \\<in> set (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n               in filter\n                   (\\<lambda>f.\n                       \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n                   m)\n\ngoal (1 subgoal):\n 1. ofe_prio a = ofe_prio b", "by (simp add: antisym)"], ["proof (state)\nthis:\n  ofe_prio a = ofe_prio b\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  ofe_prio a = ofe_prio b\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> False", "have ms: \"\\<gamma> (ofe_fields a) p\" \"\\<gamma> (ofe_fields b) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> (ofe_fields a) p &&& \\<gamma> (ofe_fields b) p", "using no[symmetric]"], ["proof (prove)\nusing this:\n  a # as =\n  filter\n   (\\<lambda>x.\n       \\<gamma> (ofe_fields x) p \\<and>\n       (\\<forall>fo\\<in>set (filter (\\<lambda>f. \\<gamma> (ofe_fields f) p)\n                              fe).\n           ofe_prio fo \\<le> ofe_prio x))\n   fe\n\ngoal (1 subgoal):\n 1. \\<gamma> (ofe_fields a) p &&& \\<gamma> (ofe_fields b) p", "unfolding bbs"], ["proof (prove)\nusing this:\n  a # b # bs =\n  filter\n   (\\<lambda>x.\n       \\<gamma> (ofe_fields x) p \\<and>\n       (\\<forall>fo\\<in>set (filter (\\<lambda>f. \\<gamma> (ofe_fields f) p)\n                              fe).\n           ofe_prio fo \\<le> ofe_prio x))\n   fe\n\ngoal (1 subgoal):\n 1. \\<gamma> (ofe_fields a) p &&& \\<gamma> (ofe_fields b) p", "by(blast dest: Cons_eq_filterD)+"], ["proof (state)\nthis:\n  \\<gamma> (ofe_fields a) p\n  \\<gamma> (ofe_fields b) p\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<gamma> (ofe_fields a) p\n  \\<gamma> (ofe_fields b) p\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> False", "have abis: \"a \\<in> set fe\" \"b \\<in> set fe\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> set fe &&& b \\<in> set fe", "using f1"], ["proof (prove)\nusing this:\n  a \\<in> set (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n               in filter\n                   (\\<lambda>f.\n                       \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n                   m)\n  b \\<in> set (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n               in filter\n                   (\\<lambda>f.\n                       \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n                   m)\n\ngoal (1 subgoal):\n 1. a \\<in> set fe &&& b \\<in> set fe", "by auto"], ["proof (state)\nthis:\n  a \\<in> set fe\n  b \\<in> set fe\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  a \\<in> set fe\n  b \\<in> set fe\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> False", "have \"a \\<noteq> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> b", "proof(cases \"\\<exists>x y z. fe = x @ a # y @ b # z\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x y z. fe = x @ a # y @ b # z \\<Longrightarrow> a \\<noteq> b\n 2. \\<nexists>x y z. fe = x @ a # y @ b # z \\<Longrightarrow> a \\<noteq> b", "case True"], ["proof (state)\nthis:\n  \\<exists>x y z. fe = x @ a # y @ b # z\n\ngoal (2 subgoals):\n 1. \\<exists>x y z. fe = x @ a # y @ b # z \\<Longrightarrow> a \\<noteq> b\n 2. \\<nexists>x y z. fe = x @ a # y @ b # z \\<Longrightarrow> a \\<noteq> b", "then"], ["proof (chain)\npicking this:\n  \\<exists>x y z. fe = x @ a # y @ b # z", "obtain x y z where xyz: \"fe = x @ a # y @ b # z\""], ["proof (prove)\nusing this:\n  \\<exists>x y z. fe = x @ a # y @ b # z\n\ngoal (1 subgoal):\n 1. (\\<And>x y z.\n        fe = x @ a # y @ b # z \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  fe = x @ a # y @ b # z\n\ngoal (2 subgoals):\n 1. \\<exists>x y z. fe = x @ a # y @ b # z \\<Longrightarrow> a \\<noteq> b\n 2. \\<nexists>x y z. fe = x @ a # y @ b # z \\<Longrightarrow> a \\<noteq> b", "from no_overlaps_ne1 ms(1) uf[unfolded xyz]"], ["proof (chain)\npicking this:\n  \\<lbrakk>no_overlaps ?\\<gamma> (?x @ ?a # ?y @ ?b # ?z);\n   (\\<exists>p. ?\\<gamma> (ofe_fields ?a) p) \\<or>\n   (\\<exists>p. ?\\<gamma> (ofe_fields ?b) p)\\<rbrakk>\n  \\<Longrightarrow> ?a \\<noteq> ?b\n  \\<gamma> (ofe_fields a) p\n  no_overlaps \\<gamma> (x @ a # y @ b # z)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>no_overlaps ?\\<gamma> (?x @ ?a # ?y @ ?b # ?z);\n   (\\<exists>p. ?\\<gamma> (ofe_fields ?a) p) \\<or>\n   (\\<exists>p. ?\\<gamma> (ofe_fields ?b) p)\\<rbrakk>\n  \\<Longrightarrow> ?a \\<noteq> ?b\n  \\<gamma> (ofe_fields a) p\n  no_overlaps \\<gamma> (x @ a # y @ b # z)\n\ngoal (1 subgoal):\n 1. a \\<noteq> b", "by blast"], ["proof (state)\nthis:\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. \\<nexists>x y z. fe = x @ a # y @ b # z \\<Longrightarrow> a \\<noteq> b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>x y z. fe = x @ a # y @ b # z \\<Longrightarrow> a \\<noteq> b", "case False"], ["proof (state)\nthis:\n  \\<nexists>x y z. fe = x @ a # y @ b # z\n\ngoal (1 subgoal):\n 1. \\<nexists>x y z. fe = x @ a # y @ b # z \\<Longrightarrow> a \\<noteq> b", "then"], ["proof (chain)\npicking this:\n  \\<nexists>x y z. fe = x @ a # y @ b # z", "obtain x y z where xyz: \"fe = x @ b # y @ a # z\""], ["proof (prove)\nusing this:\n  \\<nexists>x y z. fe = x @ a # y @ b # z\n\ngoal (1 subgoal):\n 1. (\\<And>x y z.\n        fe = x @ b # y @ a # z \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using no"], ["proof (prove)\nusing this:\n  \\<nexists>x y z. fe = x @ a # y @ b # z\n  filter\n   (\\<lambda>x.\n       \\<gamma> (ofe_fields x) p \\<and>\n       (\\<forall>fo\\<in>set (filter (\\<lambda>f. \\<gamma> (ofe_fields f) p)\n                              fe).\n           ofe_prio fo \\<le> ofe_prio x))\n   fe =\n  a # as\n\ngoal (1 subgoal):\n 1. (\\<And>x y z.\n        fe = x @ b # y @ a # z \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding bbs"], ["proof (prove)\nusing this:\n  \\<nexists>x y z. fe = x @ a # y @ b # z\n  filter\n   (\\<lambda>x.\n       \\<gamma> (ofe_fields x) p \\<and>\n       (\\<forall>fo\\<in>set (filter (\\<lambda>f. \\<gamma> (ofe_fields f) p)\n                              fe).\n           ofe_prio fo \\<le> ofe_prio x))\n   fe =\n  a # b # bs\n\ngoal (1 subgoal):\n 1. (\\<And>x y z.\n        fe = x @ b # y @ a # z \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types, lifting) Cons_eq_filterD)"], ["proof (state)\nthis:\n  fe = x @ b # y @ a # z\n\ngoal (1 subgoal):\n 1. \\<nexists>x y z. fe = x @ a # y @ b # z \\<Longrightarrow> a \\<noteq> b", "from no_overlaps_ne1 ms(1) uf[unfolded xyz]"], ["proof (chain)\npicking this:\n  \\<lbrakk>no_overlaps ?\\<gamma> (?x @ ?a # ?y @ ?b # ?z);\n   (\\<exists>p. ?\\<gamma> (ofe_fields ?a) p) \\<or>\n   (\\<exists>p. ?\\<gamma> (ofe_fields ?b) p)\\<rbrakk>\n  \\<Longrightarrow> ?a \\<noteq> ?b\n  \\<gamma> (ofe_fields a) p\n  no_overlaps \\<gamma> (x @ b # y @ a # z)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>no_overlaps ?\\<gamma> (?x @ ?a # ?y @ ?b # ?z);\n   (\\<exists>p. ?\\<gamma> (ofe_fields ?a) p) \\<or>\n   (\\<exists>p. ?\\<gamma> (ofe_fields ?b) p)\\<rbrakk>\n  \\<Longrightarrow> ?a \\<noteq> ?b\n  \\<gamma> (ofe_fields a) p\n  no_overlaps \\<gamma> (x @ b # y @ a # z)\n\ngoal (1 subgoal):\n 1. a \\<noteq> b", "by blast"], ["proof (state)\nthis:\n  a \\<noteq> b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. as \\<noteq> [] \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  ofe_prio a = ofe_prio b\n  \\<gamma> (ofe_fields a) p\n  \\<gamma> (ofe_fields b) p\n  a \\<in> set fe\n  b \\<in> set fe\n  a \\<noteq> b", "show False"], ["proof (prove)\nusing this:\n  ofe_prio a = ofe_prio b\n  \\<gamma> (ofe_fields a) p\n  \\<gamma> (ofe_fields b) p\n  a \\<in> set fe\n  b \\<in> set fe\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. False", "using check_no_overlapI[OF uf, unfolded check_no_overlap_def]"], ["proof (prove)\nusing this:\n  ofe_prio a = ofe_prio b\n  \\<gamma> (ofe_fields a) p\n  \\<gamma> (ofe_fields b) p\n  a \\<in> set fe\n  b \\<in> set fe\n  a \\<noteq> b\n  \\<forall>a\\<in>set fe.\n     \\<forall>b\\<in>set fe.\n        \\<forall>p\\<in>UNIV.\n           ofe_prio a = ofe_prio b \\<and>\n           \\<gamma> (ofe_fields a) p \\<and> a \\<noteq> b \\<longrightarrow>\n           \\<not> \\<gamma> (ofe_fields b) p\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  as = []\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>no_overlaps \\<gamma> fe;\n        (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n         in filter\n             (\\<lambda>f.\n                 \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n             m) =\n        a # list\\<rbrakk>\n       \\<Longrightarrow> (let s = ofe_action `\n                                  set (let matching =\n       filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n in filter\n     (\\<lambda>f.\n         \\<forall>fo\\<in>set matching. ofe_prio fo \\<le> ofe_prio f)\n     matching)\n                          in case card s of 0 \\<Rightarrow> NoAction\n                             | Suc 0 \\<Rightarrow> Action (the_elem s)\n                             | Suc (Suc nata) \\<Rightarrow> Undefined) =\n                         (let m = filter\n                                   (\\<lambda>f. \\<gamma> (ofe_fields f) p)\n                                   fe;\n                              m' = filter\n                                    (\\<lambda>f.\n  \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n                                    m\n                          in case m' of [] \\<Rightarrow> NoAction\n                             | [s] \\<Rightarrow> Action (ofe_action s)\n                             | s # aa # lista \\<Rightarrow> Undefined)", "then"], ["proof (chain)\npicking this:\n  as = []", "have oe: \"a # as = [a]\""], ["proof (prove)\nusing this:\n  as = []\n\ngoal (1 subgoal):\n 1. a # as = [a]", "by simp"], ["proof (state)\nthis:\n  a # as = [a]\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>no_overlaps \\<gamma> fe;\n        (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n         in filter\n             (\\<lambda>f.\n                 \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n             m) =\n        a # list\\<rbrakk>\n       \\<Longrightarrow> (let s = ofe_action `\n                                  set (let matching =\n       filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n in filter\n     (\\<lambda>f.\n         \\<forall>fo\\<in>set matching. ofe_prio fo \\<le> ofe_prio f)\n     matching)\n                          in case card s of 0 \\<Rightarrow> NoAction\n                             | Suc 0 \\<Rightarrow> Action (the_elem s)\n                             | Suc (Suc nata) \\<Rightarrow> Undefined) =\n                         (let m = filter\n                                   (\\<lambda>f. \\<gamma> (ofe_fields f) p)\n                                   fe;\n                              m' = filter\n                                    (\\<lambda>f.\n  \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n                                    m\n                          in case m' of [] \\<Rightarrow> NoAction\n                             | [s] \\<Rightarrow> Action (ofe_action s)\n                             | s # aa # lista \\<Rightarrow> Undefined)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let s = ofe_action `\n             set (let matching =\n                        filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n                  in filter\n                      (\\<lambda>f.\n                          \\<forall>fo\\<in>set matching.\n                             ofe_prio fo \\<le> ofe_prio f)\n                      matching)\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe;\n         m' = filter\n               (\\<lambda>f.\n                   \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n               m\n     in case m' of [] \\<Rightarrow> NoAction\n        | [s] \\<Rightarrow> Action (ofe_action s)\n        | s # aa # lista \\<Rightarrow> Undefined)", "using Cons[unfolded oe]"], ["proof (prove)\nusing this:\n  (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n   in filter\n       (\\<lambda>f. \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n       m) =\n  [a]\n\ngoal (1 subgoal):\n 1. (let s = ofe_action `\n             set (let matching =\n                        filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n                  in filter\n                      (\\<lambda>f.\n                          \\<forall>fo\\<in>set matching.\n                             ofe_prio fo \\<le> ofe_prio f)\n                      matching)\n     in case card s of 0 \\<Rightarrow> NoAction\n        | Suc 0 \\<Rightarrow> Action (the_elem s)\n        | Suc (Suc nata) \\<Rightarrow> Undefined) =\n    (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe;\n         m' = filter\n               (\\<lambda>f.\n                   \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n               m\n     in case m' of [] \\<Rightarrow> NoAction\n        | [s] \\<Rightarrow> Action (ofe_action s)\n        | s # aa # lista \\<Rightarrow> Undefined)", "by force"], ["proof (state)\nthis:\n  (let s = ofe_action `\n           set (let matching =\n                      filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n                in filter\n                    (\\<lambda>f.\n                        \\<forall>fo\\<in>set matching.\n                           ofe_prio fo \\<le> ofe_prio f)\n                    matching)\n   in case card s of 0 \\<Rightarrow> NoAction\n      | Suc 0 \\<Rightarrow> Action (the_elem s)\n      | Suc (Suc nata) \\<Rightarrow> Undefined) =\n  (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe;\n       m' = filter\n             (\\<lambda>f.\n                 \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n             m\n   in case m' of [] \\<Rightarrow> NoAction\n      | [s] \\<Rightarrow> Action (ofe_action s)\n      | s # aa # lista \\<Rightarrow> Undefined)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (let s = ofe_action `\n           set (let matching =\n                      filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe\n                in filter\n                    (\\<lambda>f.\n                        \\<forall>fo\\<in>set matching.\n                           ofe_prio fo \\<le> ofe_prio f)\n                    matching)\n   in case card s of 0 \\<Rightarrow> NoAction\n      | Suc 0 \\<Rightarrow> Action (the_elem s)\n      | Suc (Suc nata) \\<Rightarrow> Undefined) =\n  (let m = filter (\\<lambda>f. \\<gamma> (ofe_fields f) p) fe;\n       m' = filter\n             (\\<lambda>f.\n                 \\<forall>fo\\<in>set m. ofe_prio fo \\<le> ofe_prio f)\n             m\n   in case m' of [] \\<Rightarrow> NoAction\n      | [s] \\<Rightarrow> Action (ofe_action s)\n      | s # aa # lista \\<Rightarrow> Undefined)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* the above lemma used to be this, but it's slightly weaker than I wanted. *)"], ["", "lemma \"distinct fe \\<Longrightarrow> check_no_overlap \\<gamma> fe \\<Longrightarrow> OF_same_priority_match2 \\<gamma> fe p = OF_priority_match \\<gamma> fe p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct fe; check_no_overlap \\<gamma> fe\\<rbrakk>\n    \\<Longrightarrow> OF_same_priority_match2 \\<gamma> fe p =\n                      OF_priority_match \\<gamma> fe p", "by(rule no_overlaps_defeq) (drule (2) no_overlapsI)"], ["", "theorem OF_eq:\n\tassumes no: \"no_overlaps \\<gamma> f\"\n\t    and so: \"sorted_descending (map ofe_prio f)\"\n\tshows \"OF_match_linear \\<gamma> f p = OF_priority_match \\<gamma> f p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OF_match_linear \\<gamma> f p = OF_priority_match \\<gamma> f p", "unfolding no_overlaps_defeq[symmetric,OF no] OF_match_eq[OF so check_no_overlapI[OF no]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. OF_match_linear \\<gamma> f p = OF_match_linear \\<gamma> f p", ".."], ["", "corollary OF_eq_sort:\n\tassumes no: \"no_overlaps \\<gamma> f\"\n\tshows \"OF_priority_match \\<gamma> f p = OF_match_linear \\<gamma> (sort_descending_key ofe_prio f) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OF_priority_match \\<gamma> f p =\n    OF_match_linear \\<gamma> (sort_descending_key ofe_prio f) p", "using OF_match_eq2 check_no_overlapI no no_overlaps_defeq"], ["proof (prove)\nusing this:\n  check_no_overlap ?\\<gamma> ?ft \\<Longrightarrow>\n  OF_same_priority_match2 ?\\<gamma> ?ft ?p =\n  OF_match_linear ?\\<gamma> (sort_descending_key ofe_prio ?ft) ?p\n  no_overlaps ?\\<gamma> ?t \\<Longrightarrow> check_no_overlap ?\\<gamma> ?t\n  no_overlaps \\<gamma> f\n  no_overlaps ?\\<gamma> ?fe \\<Longrightarrow>\n  OF_same_priority_match2 ?\\<gamma> ?fe ?p =\n  OF_priority_match ?\\<gamma> ?fe ?p\n\ngoal (1 subgoal):\n 1. OF_priority_match \\<gamma> f p =\n    OF_match_linear \\<gamma> (sort_descending_key ofe_prio f) p", "by fastforce"], ["", "lemma OF_lm_noa_none: \"OF_match_linear \\<gamma> ft p = NoAction \\<Longrightarrow> \\<forall>e\\<in>set ft. \\<not> \\<gamma> (ofe_fields e) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OF_match_linear \\<gamma> ft p = NoAction \\<Longrightarrow>\n    \\<forall>e\\<in>set ft. \\<not> \\<gamma> (ofe_fields e) p", "by(induction ft) (simp_all split: if_splits)"], ["", "(* this should be provable without the overlaps assumption, but that's quite a bit harder. *)"], ["", "lemma OF_spm3_noa_none:\n\tassumes no: \"no_overlaps \\<gamma> ft\"\n\tshows \"OF_priority_match \\<gamma> ft p = NoAction \\<Longrightarrow> \\<forall>e \\<in> set ft. \\<not>\\<gamma> (ofe_fields e) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OF_priority_match \\<gamma> ft p = NoAction \\<Longrightarrow>\n    \\<forall>e\\<in>set ft. \\<not> \\<gamma> (ofe_fields e) p", "unfolding OF_eq_sort[OF no]"], ["proof (prove)\ngoal (1 subgoal):\n 1. OF_match_linear \\<gamma> (sort_descending_key ofe_prio ft) p =\n    NoAction \\<Longrightarrow>\n    \\<forall>e\\<in>set ft. \\<not> \\<gamma> (ofe_fields e) p", "by(drule OF_lm_noa_none) simp"], ["", "(* repetition of the lemma for definition 2 for definition 3 *)"], ["", "lemma no_overlaps_not_unefined: \"no_overlaps \\<gamma> ft \\<Longrightarrow> OF_priority_match \\<gamma> ft p \\<noteq> Undefined\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> ft \\<Longrightarrow>\n    OF_priority_match \\<gamma> ft p \\<noteq> Undefined", "using check_no_overlapI no_overlap_not_unefined no_overlaps_defeq"], ["proof (prove)\nusing this:\n  no_overlaps ?\\<gamma> ?t \\<Longrightarrow> check_no_overlap ?\\<gamma> ?t\n  check_no_overlap ?\\<gamma> ?ft \\<Longrightarrow>\n  OF_same_priority_match2 ?\\<gamma> ?ft ?p \\<noteq> Undefined\n  no_overlaps ?\\<gamma> ?fe \\<Longrightarrow>\n  OF_same_priority_match2 ?\\<gamma> ?fe ?p =\n  OF_priority_match ?\\<gamma> ?fe ?p\n\ngoal (1 subgoal):\n 1. no_overlaps \\<gamma> ft \\<Longrightarrow>\n    OF_priority_match \\<gamma> ft p \\<noteq> Undefined", "by fastforce"], ["", "end"]]}