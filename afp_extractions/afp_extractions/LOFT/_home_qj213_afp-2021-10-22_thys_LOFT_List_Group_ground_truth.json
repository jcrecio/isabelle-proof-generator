{"file_name": "/home/qj213/afp-2021-10-22/thys/LOFT/List_Group.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LOFT", "problem_names": ["lemma \"list_group_eq_key id xs = list_group_eq xs\""], "translations": [["", "lemma \"list_group_eq_key id xs = list_group_eq xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_group_eq_key id xs = list_group_eq xs", "apply(induction xs rule: list_group_eq.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. list_group_eq_key id [] = list_group_eq []\n 2. \\<And>x xs.\n       list_group_eq_key id (dropWhile ((=) x) xs) =\n       list_group_eq (dropWhile ((=) x) xs) \\<Longrightarrow>\n       list_group_eq_key id (x # xs) = list_group_eq (x # xs)", "by(simp_all add: id_def)"], ["", "(*\nlemma \"sorted (map f (x#xs)) \\<Longrightarrow> list_group_eq_key f (x#xs) = [x # filter (\\<lambda>y. f x = f y) xs] @ list_group_eq_key f (filter (\\<lambda>y. f x \\<noteq> f y) xs)\"\n  apply(simp)\n  oops\nlemma \"sorted (x#xs) \\<Longrightarrow> distinct (list_group_eq_key f (x#xs)) \\<Longrightarrow> distinct (list_group_eq_key f xs)\"\n  apply(induction xs)\n   apply(simp)\noops\n*)"], ["", "end"]]}