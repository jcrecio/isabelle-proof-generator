{"file_name": "/home/qj213/afp-2021-10-22/thys/Dirichlet_L/Multiplicative_Characters.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dirichlet_L", "problem_names": ["lemma inv_character_principal [simp]: \"inv_character (principal_char G) = principal_char G\"", "lemma inv_character_inv_character [simp]: \"inv_character (inv_character \\<chi>) = \\<chi>\"", "lemma eval_inv_character: \"inv_character \\<chi> j = cnj (\\<chi> j)\"", "lemma char_one [simp]: \"\\<chi> \\<one> = 1\"", "lemma char_power [simp]: \"a \\<in> carrier G \\<Longrightarrow> \\<chi> (a [^] k) = \\<chi> a ^ k\"", "lemma char_root:\n  assumes \"a \\<in> carrier G\"\n  shows   \"\\<chi> a ^ ord a = 1\"", "lemma char_root':\n  assumes \"a \\<in> carrier G\"\n  shows   \"\\<chi> a ^ order G = 1\"", "lemma norm_char: \"norm (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)\"", "lemma char_eq_0_iff: \"\\<chi> a = 0 \\<longleftrightarrow> a \\<notin> carrier G\"", "lemma inv_character: \"character G (inv_character \\<chi>)\"", "lemma mult_inv_character: \"\\<chi> k * inv_character \\<chi> k = principal_char G k\"", "lemma\n  assumes \"a \\<in> carrier G\"\n  shows    char_inv: \"\\<chi> (inv a) = cnj (\\<chi> a)\" and char_inv': \"\\<chi> (inv a) = inverse (\\<chi> a)\"", "lemma (in finite_comm_group) character_principal [simp, intro]: \"character G (principal_char G)\"", "lemmas [simp,intro] = finite_comm_group.character_principal", "lemma character_ext:\n  assumes \"character G \\<chi>\" \"character G \\<chi>'\" \"\\<And>x. x \\<in> carrier G \\<Longrightarrow> \\<chi> x = \\<chi>' x\"\n  shows   \"\\<chi> = \\<chi>'\"", "lemma character_mult [intro]: \n  assumes \"character G \\<chi>\" \"character G \\<chi>'\"\n  shows   \"character G (\\<lambda>x. \\<chi> x * \\<chi>' x)\"", "lemma character_inv_character_iff [simp]: \"character G (inv_character \\<chi>) \\<longleftrightarrow> character G \\<chi>\"", "lemma carrier_Characters: \"carrier (Characters G) = characters G\"", "lemma one_Characters: \"one (Characters G) = principal_char G\"", "lemma mult_Characters: \"mult (Characters G) \\<chi>\\<^sub>1 \\<chi>\\<^sub>2 = (\\<lambda>a. \\<chi>\\<^sub>1 a * \\<chi>\\<^sub>2 a)\"", "lemma finite_characters [intro]: \"finite (characters G)\"", "lemma finite_comm_group_Characters [intro]: \"finite_comm_group (Characters G)\"", "lemma (in character) character_in_order_1:\n  assumes \"order G = 1\"\n  shows   \"\\<chi> = principal_char G\"", "lemma (in finite_comm_group) characters_in_order_1:\n  assumes \"order G = 1\"\n  shows   \"characters G = {principal_char G}\"", "lemma (in character) inv_Characters: \"inv\\<^bsub>Characters G\\<^esub> \\<chi> = inv_character \\<chi>\"", "lemma (in finite_comm_group) inv_Characters': \n  \"\\<chi> \\<in> characters G \\<Longrightarrow> inv\\<^bsub>Characters G\\<^esub> \\<chi> = inv_character \\<chi>\"", "lemmas (in finite_comm_group) Characters_simps = \n  carrier_Characters mult_Characters one_Characters inv_Characters'", "lemma inv_Characters': \"\\<chi> \\<in> characters G \\<Longrightarrow> inv\\<^bsub>Characters G\\<^esub> \\<chi> = inv_character \\<chi>\"", "lemma lower_character:\n  assumes \"character (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<chi>\" \n    (is \"character ?G'' _\")\n  shows   \"character (G\\<lparr>carrier := H\\<rparr>) (\\<lambda>x. if x \\<in> H then \\<chi> x else 0)\" (is \"character ?G' ?\\<chi>\")", "lemma lift_character:\n  defines \"h \\<equiv> subgroup_indicator G H a\"\n  assumes \"character (G\\<lparr>carrier := H\\<rparr>) \\<chi>\" (is \"character ?G' _\") and \"z ^ h = \\<chi> (a [^] h)\"\n  shows   \"character (G\\<lparr>carrier := adjoin G H a\\<rparr>) (lift_character (\\<chi>, z))\" (is \"character ?G'' _\")", "lemma lower_character_lift_character:\n  assumes \"\\<chi> \\<in> characters (G\\<lparr>carrier := H\\<rparr>)\"\n  shows   \"(\\<lambda>x. if x \\<in> H then lift_character (\\<chi>, z) x else 0) = \\<chi>\" (is ?th1)\n          \"lift_character (\\<chi>, z) a = z\" (is ?th2)", "lemma lift_character_lower_character:\n  assumes \"\\<chi> \\<in> characters (G\\<lparr>carrier := adjoin G H a\\<rparr>)\"\n  shows   \"lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a) = \\<chi>\"", "lemma lift_character_unchanged [simp]:\n  assumes \"x \\<in> H\"\n  shows   \"lift_character \\<chi>z x = fst \\<chi>z x\"", "lemma lift_character_adjoined [simp]:\n \"character (G\\<lparr>carrier := H\\<rparr>) (fst \\<chi>z) \\<Longrightarrow> lift_character \\<chi>z a = snd \\<chi>z\"", "lemma bij_betw_characters_adjoin:\n  defines \"h \\<equiv> subgroup_indicator G H a\"\n  shows \"bij_betw lift_character\n                  (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>). {z. z ^ h = \\<chi> (a [^] h)})\n                  (characters (G\\<lparr>carrier := adjoin G H a\\<rparr>))\"", "theorem card_character_extensions:\n  assumes \"subgroup H G\" \"character (G\\<lparr>carrier := H\\<rparr>) \\<chi>\"\n  shows   \"card {\\<chi>'\\<in>characters G. \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} * card H = order G\"", "lemma order_Characters [simp]: \"order (Characters G) = order G\"", "theorem (in character) sum_character:\n  \"(\\<Sum>x\\<in>carrier G. \\<chi> x) = (if \\<chi> = principal_char G then of_nat (order G) else 0)\"", "lemma double_dual_iso_apply [simp]: \"character G \\<chi> \\<Longrightarrow> double_dual_iso x \\<chi> = \\<chi> x\"", "lemma character_double_dual_iso [intro]:\n  assumes x: \"x \\<in> carrier G\"\n  shows   \"character (Characters G) (double_dual_iso x)\"", "lemma double_dual_iso_mult [simp]:\n  assumes \"x \\<in> carrier G\" \"y \\<in> carrier G\"\n  shows   \"double_dual_iso (x \\<otimes> y) =\n             double_dual_iso x \\<otimes>\\<^bsub>Characters (Characters G)\\<^esub> double_dual_iso y\"", "lemma double_dual_iso_one [simp]:\n  \"double_dual_iso \\<one> = principal_char (Characters G)\"", "lemma inj_double_dual_iso: \"inj_on double_dual_iso (carrier G)\"", "lemma double_dual_iso_eq_iff [simp]:\n  \"x \\<in> carrier G \\<Longrightarrow> y \\<in> carrier G \\<Longrightarrow> double_dual_iso x = double_dual_iso y \\<longleftrightarrow> x = y\"", "theorem double_dual_iso: \"double_dual_iso \\<in> iso G (Characters (Characters G))\"", "lemma double_dual_is_iso: \"Characters (Characters G) \\<cong> G\"", "theorem sum_characters:\n  assumes x: \"x \\<in> carrier G\"\n  shows   \"(\\<Sum>\\<chi>\\<in>characters G. \\<chi> x) = (if x = \\<one> then of_nat (order G) else 0)\""], "translations": [["", "lemma inv_character_principal [simp]: \"inv_character (principal_char G) = principal_char G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_character (principal_char G) = principal_char G", "by (simp add: inv_character_def principal_char_def fun_eq_iff)"], ["", "lemma inv_character_inv_character [simp]: \"inv_character (inv_character \\<chi>) = \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_character (inv_character \\<chi>) = \\<chi>", "by (simp add: inv_character_def)"], ["", "lemma eval_inv_character: \"inv_character \\<chi> j = cnj (\\<chi> j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_character \\<chi> j = cnj (\\<chi> j)", "by (simp add: inv_character_def)"], ["", "bundle character_syntax\nbegin"], ["", "notation principal_char (\"\\<chi>\\<^sub>0\\<index>\")"], ["", "end"], ["", "locale character = finite_comm_group +\n  fixes \\<chi> :: \"'a \\<Rightarrow> complex\"\n  assumes char_one_nz: \"\\<chi> \\<one> \\<noteq> 0\"\n  assumes char_eq_0:   \"a \\<notin> carrier G \\<Longrightarrow> \\<chi> a = 0\"\n  assumes char_mult [simp]: \"a \\<in> carrier G \\<Longrightarrow> b \\<in> carrier G \\<Longrightarrow> \\<chi> (a \\<otimes> b) = \\<chi> a * \\<chi> b\"\nbegin"], ["", "subsection \\<open>Basic properties\\<close>"], ["", "lemma char_one [simp]: \"\\<chi> \\<one> = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> \\<one> = 1", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<chi> \\<one> = 1", "from char_mult[of \\<one> \\<one>]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<one> \\<in> carrier G; \\<one> \\<in> carrier G\\<rbrakk>\n  \\<Longrightarrow> \\<chi> (\\<one> \\<otimes> \\<one>) =\n                    \\<chi> \\<one> * \\<chi> \\<one>", "have \"\\<chi> \\<one> * (\\<chi> \\<one> - 1) = 0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<one> \\<in> carrier G; \\<one> \\<in> carrier G\\<rbrakk>\n  \\<Longrightarrow> \\<chi> (\\<one> \\<otimes> \\<one>) =\n                    \\<chi> \\<one> * \\<chi> \\<one>\n\ngoal (1 subgoal):\n 1. \\<chi> \\<one> * (\\<chi> \\<one> - 1) = 0", "by (auto simp del: char_mult)"], ["proof (state)\nthis:\n  \\<chi> \\<one> * (\\<chi> \\<one> - 1) = 0\n\ngoal (1 subgoal):\n 1. \\<chi> \\<one> = 1", "with char_one_nz"], ["proof (chain)\npicking this:\n  \\<chi> \\<one> \\<noteq> 0\n  \\<chi> \\<one> * (\\<chi> \\<one> - 1) = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<chi> \\<one> \\<noteq> 0\n  \\<chi> \\<one> * (\\<chi> \\<one> - 1) = 0\n\ngoal (1 subgoal):\n 1. \\<chi> \\<one> = 1", "by simp"], ["proof (state)\nthis:\n  \\<chi> \\<one> = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma char_power [simp]: \"a \\<in> carrier G \\<Longrightarrow> \\<chi> (a [^] k) = \\<chi> a ^ k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> carrier G \\<Longrightarrow> \\<chi> (a [^] k) = \\<chi> a ^ k", "by (induction k) auto"], ["", "lemma char_root:\n  assumes \"a \\<in> carrier G\"\n  shows   \"\\<chi> a ^ ord a = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> a ^ ord a = 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<chi> a ^ ord a = 1", "from assms"], ["proof (chain)\npicking this:\n  a \\<in> carrier G", "have \"\\<chi> a ^ ord a = \\<chi> (a [^] ord a)\""], ["proof (prove)\nusing this:\n  a \\<in> carrier G\n\ngoal (1 subgoal):\n 1. \\<chi> a ^ ord a = \\<chi> (a [^] ord a)", "by (subst char_power) auto"], ["proof (state)\nthis:\n  \\<chi> a ^ ord a = \\<chi> (a [^] ord a)\n\ngoal (1 subgoal):\n 1. \\<chi> a ^ ord a = 1", "also"], ["proof (state)\nthis:\n  \\<chi> a ^ ord a = \\<chi> (a [^] ord a)\n\ngoal (1 subgoal):\n 1. \\<chi> a ^ ord a = 1", "from fin and assms"], ["proof (chain)\npicking this:\n  finite (carrier G)\n  a \\<in> carrier G", "have \"a [^] ord a = \\<one>\""], ["proof (prove)\nusing this:\n  finite (carrier G)\n  a \\<in> carrier G\n\ngoal (1 subgoal):\n 1. a [^] ord a = \\<one>", "by (intro pow_ord_eq_1) auto"], ["proof (state)\nthis:\n  a [^] ord a = \\<one>\n\ngoal (1 subgoal):\n 1. \\<chi> a ^ ord a = 1", "finally"], ["proof (chain)\npicking this:\n  \\<chi> a ^ ord a = \\<chi> \\<one>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<chi> a ^ ord a = \\<chi> \\<one>\n\ngoal (1 subgoal):\n 1. \\<chi> a ^ ord a = 1", "by simp"], ["proof (state)\nthis:\n  \\<chi> a ^ ord a = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma char_root':\n  assumes \"a \\<in> carrier G\"\n  shows   \"\\<chi> a ^ order G = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> a ^ order G = 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<chi> a ^ order G = 1", "from assms"], ["proof (chain)\npicking this:\n  a \\<in> carrier G", "have \"\\<chi> a ^ order G = \\<chi> (a [^] order G)\""], ["proof (prove)\nusing this:\n  a \\<in> carrier G\n\ngoal (1 subgoal):\n 1. \\<chi> a ^ order G = \\<chi> (a [^] order G)", "by simp"], ["proof (state)\nthis:\n  \\<chi> a ^ order G = \\<chi> (a [^] order G)\n\ngoal (1 subgoal):\n 1. \\<chi> a ^ order G = 1", "also"], ["proof (state)\nthis:\n  \\<chi> a ^ order G = \\<chi> (a [^] order G)\n\ngoal (1 subgoal):\n 1. \\<chi> a ^ order G = 1", "from fin and assms"], ["proof (chain)\npicking this:\n  finite (carrier G)\n  a \\<in> carrier G", "have \"a [^] order G = \\<one>\""], ["proof (prove)\nusing this:\n  finite (carrier G)\n  a \\<in> carrier G\n\ngoal (1 subgoal):\n 1. a [^] order G = \\<one>", "by (intro pow_order_eq_1) auto"], ["proof (state)\nthis:\n  a [^] order G = \\<one>\n\ngoal (1 subgoal):\n 1. \\<chi> a ^ order G = 1", "finally"], ["proof (chain)\npicking this:\n  \\<chi> a ^ order G = \\<chi> \\<one>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<chi> a ^ order G = \\<chi> \\<one>\n\ngoal (1 subgoal):\n 1. \\<chi> a ^ order G = 1", "by simp"], ["proof (state)\nthis:\n  \\<chi> a ^ order G = 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma norm_char: \"norm (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)", "proof (cases \"a \\<in> carrier G\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<in> carrier G \\<Longrightarrow>\n    cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)\n 2. a \\<notin> carrier G \\<Longrightarrow>\n    cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)", "case True"], ["proof (state)\nthis:\n  a \\<in> carrier G\n\ngoal (2 subgoals):\n 1. a \\<in> carrier G \\<Longrightarrow>\n    cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)\n 2. a \\<notin> carrier G \\<Longrightarrow>\n    cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)", "have \"norm (\\<chi> a) ^ order G = norm (\\<chi> a ^ order G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cmod (\\<chi> a) ^ order G = cmod (\\<chi> a ^ order G)", "by (simp add: norm_power)"], ["proof (state)\nthis:\n  cmod (\\<chi> a) ^ order G = cmod (\\<chi> a ^ order G)\n\ngoal (2 subgoals):\n 1. a \\<in> carrier G \\<Longrightarrow>\n    cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)\n 2. a \\<notin> carrier G \\<Longrightarrow>\n    cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)", "also"], ["proof (state)\nthis:\n  cmod (\\<chi> a) ^ order G = cmod (\\<chi> a ^ order G)\n\ngoal (2 subgoals):\n 1. a \\<in> carrier G \\<Longrightarrow>\n    cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)\n 2. a \\<notin> carrier G \\<Longrightarrow>\n    cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)", "from True"], ["proof (chain)\npicking this:\n  a \\<in> carrier G", "have \"\\<chi> a ^ order G = 1\""], ["proof (prove)\nusing this:\n  a \\<in> carrier G\n\ngoal (1 subgoal):\n 1. \\<chi> a ^ order G = 1", "by (rule char_root')"], ["proof (state)\nthis:\n  \\<chi> a ^ order G = 1\n\ngoal (2 subgoals):\n 1. a \\<in> carrier G \\<Longrightarrow>\n    cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)\n 2. a \\<notin> carrier G \\<Longrightarrow>\n    cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)", "finally"], ["proof (chain)\npicking this:\n  cmod (\\<chi> a) ^ order G = cmod 1", "have \"norm (\\<chi> a) ^ order G = 1 ^ order G\""], ["proof (prove)\nusing this:\n  cmod (\\<chi> a) ^ order G = cmod 1\n\ngoal (1 subgoal):\n 1. cmod (\\<chi> a) ^ order G = 1 ^ order G", "by simp"], ["proof (state)\nthis:\n  cmod (\\<chi> a) ^ order G = 1 ^ order G\n\ngoal (2 subgoals):\n 1. a \\<in> carrier G \\<Longrightarrow>\n    cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)\n 2. a \\<notin> carrier G \\<Longrightarrow>\n    cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)", "hence \"norm (\\<chi> a) = 1\""], ["proof (prove)\nusing this:\n  cmod (\\<chi> a) ^ order G = 1 ^ order G\n\ngoal (1 subgoal):\n 1. cmod (\\<chi> a) = 1", "by (subst (asm) power_eq_iff_eq_base) auto"], ["proof (state)\nthis:\n  cmod (\\<chi> a) = 1\n\ngoal (2 subgoals):\n 1. a \\<in> carrier G \\<Longrightarrow>\n    cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)\n 2. a \\<notin> carrier G \\<Longrightarrow>\n    cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)", "with True"], ["proof (chain)\npicking this:\n  a \\<in> carrier G\n  cmod (\\<chi> a) = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<in> carrier G\n  cmod (\\<chi> a) = 1\n\ngoal (1 subgoal):\n 1. cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)", "by auto"], ["proof (state)\nthis:\n  cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)\n\ngoal (1 subgoal):\n 1. a \\<notin> carrier G \\<Longrightarrow>\n    cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<notin> carrier G \\<Longrightarrow>\n    cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)", "case False"], ["proof (state)\nthis:\n  a \\<notin> carrier G\n\ngoal (1 subgoal):\n 1. a \\<notin> carrier G \\<Longrightarrow>\n    cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)", "thus ?thesis"], ["proof (prove)\nusing this:\n  a \\<notin> carrier G\n\ngoal (1 subgoal):\n 1. cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)", "by (auto simp: char_eq_0)"], ["proof (state)\nthis:\n  cmod (\\<chi> a) = (if a \\<in> carrier G then 1 else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma char_eq_0_iff: \"\\<chi> a = 0 \\<longleftrightarrow> a \\<notin> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi> a = 0) = (a \\<notin> carrier G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<chi> a = 0) = (a \\<notin> carrier G)", "have \"\\<chi> a = 0 \\<longleftrightarrow> norm (\\<chi> a) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi> a = 0) = (cmod (\\<chi> a) = 0)", "by simp"], ["proof (state)\nthis:\n  (\\<chi> a = 0) = (cmod (\\<chi> a) = 0)\n\ngoal (1 subgoal):\n 1. (\\<chi> a = 0) = (a \\<notin> carrier G)", "also"], ["proof (state)\nthis:\n  (\\<chi> a = 0) = (cmod (\\<chi> a) = 0)\n\ngoal (1 subgoal):\n 1. (\\<chi> a = 0) = (a \\<notin> carrier G)", "have \"\\<dots> \\<longleftrightarrow> a \\<notin> carrier G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cmod (\\<chi> a) = 0) = (a \\<notin> carrier G)", "by (subst norm_char) auto"], ["proof (state)\nthis:\n  (cmod (\\<chi> a) = 0) = (a \\<notin> carrier G)\n\ngoal (1 subgoal):\n 1. (\\<chi> a = 0) = (a \\<notin> carrier G)", "finally"], ["proof (chain)\npicking this:\n  (\\<chi> a = 0) = (a \\<notin> carrier G)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<chi> a = 0) = (a \\<notin> carrier G)\n\ngoal (1 subgoal):\n 1. (\\<chi> a = 0) = (a \\<notin> carrier G)", "."], ["proof (state)\nthis:\n  (\\<chi> a = 0) = (a \\<notin> carrier G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inv_character: \"character G (inv_character \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. character G (inv_character \\<chi>)", "by standard (auto simp: inv_character_def char_eq_0)"], ["", "lemma mult_inv_character: \"\\<chi> k * inv_character \\<chi> k = principal_char G k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> k * inv_character \\<chi> k = principal_char G k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<chi> k * inv_character \\<chi> k = principal_char G k", "have \"\\<chi> k * inv_character \\<chi> k = of_real (norm (\\<chi> k) ^ 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> k * inv_character \\<chi> k =\n    complex_of_real ((cmod (\\<chi> k))\\<^sup>2)", "by (subst complex_norm_square) (simp add: inv_character_def)"], ["proof (state)\nthis:\n  \\<chi> k * inv_character \\<chi> k =\n  complex_of_real ((cmod (\\<chi> k))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<chi> k * inv_character \\<chi> k = principal_char G k", "also"], ["proof (state)\nthis:\n  \\<chi> k * inv_character \\<chi> k =\n  complex_of_real ((cmod (\\<chi> k))\\<^sup>2)\n\ngoal (1 subgoal):\n 1. \\<chi> k * inv_character \\<chi> k = principal_char G k", "have \"\\<dots> = principal_char G k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. complex_of_real ((cmod (\\<chi> k))\\<^sup>2) = principal_char G k", "by (simp add: principal_char_def norm_char)"], ["proof (state)\nthis:\n  complex_of_real ((cmod (\\<chi> k))\\<^sup>2) = principal_char G k\n\ngoal (1 subgoal):\n 1. \\<chi> k * inv_character \\<chi> k = principal_char G k", "finally"], ["proof (chain)\npicking this:\n  \\<chi> k * inv_character \\<chi> k = principal_char G k", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<chi> k * inv_character \\<chi> k = principal_char G k\n\ngoal (1 subgoal):\n 1. \\<chi> k * inv_character \\<chi> k = principal_char G k", "."], ["proof (state)\nthis:\n  \\<chi> k * inv_character \\<chi> k = principal_char G k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma\n  assumes \"a \\<in> carrier G\"\n  shows    char_inv: \"\\<chi> (inv a) = cnj (\\<chi> a)\" and char_inv': \"\\<chi> (inv a) = inverse (\\<chi> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (inv a) = cnj (\\<chi> a) &&& \\<chi> (inv a) = inverse (\\<chi> a)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<chi> (inv a) = cnj (\\<chi> a)\n 2. \\<chi> (inv a) = inverse (\\<chi> a)", "from assms"], ["proof (chain)\npicking this:\n  a \\<in> carrier G", "have \"inv a \\<otimes> a = \\<one>\""], ["proof (prove)\nusing this:\n  a \\<in> carrier G\n\ngoal (1 subgoal):\n 1. inv a \\<otimes> a = \\<one>", "by simp"], ["proof (state)\nthis:\n  inv a \\<otimes> a = \\<one>\n\ngoal (2 subgoals):\n 1. \\<chi> (inv a) = cnj (\\<chi> a)\n 2. \\<chi> (inv a) = inverse (\\<chi> a)", "also"], ["proof (state)\nthis:\n  inv a \\<otimes> a = \\<one>\n\ngoal (2 subgoals):\n 1. \\<chi> (inv a) = cnj (\\<chi> a)\n 2. \\<chi> (inv a) = inverse (\\<chi> a)", "have \"\\<chi> \\<dots> = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> \\<one> = 1", "by simp"], ["proof (state)\nthis:\n  \\<chi> \\<one> = 1\n\ngoal (2 subgoals):\n 1. \\<chi> (inv a) = cnj (\\<chi> a)\n 2. \\<chi> (inv a) = inverse (\\<chi> a)", "also"], ["proof (state)\nthis:\n  \\<chi> \\<one> = 1\n\ngoal (2 subgoals):\n 1. \\<chi> (inv a) = cnj (\\<chi> a)\n 2. \\<chi> (inv a) = inverse (\\<chi> a)", "from assms"], ["proof (chain)\npicking this:\n  a \\<in> carrier G", "have \"\\<chi> (inv a \\<otimes> a) = \\<chi> (inv a) * \\<chi> a\""], ["proof (prove)\nusing this:\n  a \\<in> carrier G\n\ngoal (1 subgoal):\n 1. \\<chi> (inv a \\<otimes> a) = \\<chi> (inv a) * \\<chi> a", "by (intro char_mult) auto"], ["proof (state)\nthis:\n  \\<chi> (inv a \\<otimes> a) = \\<chi> (inv a) * \\<chi> a\n\ngoal (2 subgoals):\n 1. \\<chi> (inv a) = cnj (\\<chi> a)\n 2. \\<chi> (inv a) = inverse (\\<chi> a)", "finally"], ["proof (chain)\npicking this:\n  \\<chi> (inv a) * \\<chi> a = 1", "have *: \"\\<chi> (inv a) * \\<chi> a = 1\""], ["proof (prove)\nusing this:\n  \\<chi> (inv a) * \\<chi> a = 1\n\ngoal (1 subgoal):\n 1. \\<chi> (inv a) * \\<chi> a = 1", "."], ["proof (state)\nthis:\n  \\<chi> (inv a) * \\<chi> a = 1\n\ngoal (2 subgoals):\n 1. \\<chi> (inv a) = cnj (\\<chi> a)\n 2. \\<chi> (inv a) = inverse (\\<chi> a)", "thus \"\\<chi> (inv a) = inverse (\\<chi> a)\""], ["proof (prove)\nusing this:\n  \\<chi> (inv a) * \\<chi> a = 1\n\ngoal (1 subgoal):\n 1. \\<chi> (inv a) = inverse (\\<chi> a)", "by (auto simp: divide_simps)"], ["proof (state)\nthis:\n  \\<chi> (inv a) = inverse (\\<chi> a)\n\ngoal (1 subgoal):\n 1. \\<chi> (inv a) = cnj (\\<chi> a)", "also"], ["proof (state)\nthis:\n  \\<chi> (inv a) = inverse (\\<chi> a)\n\ngoal (1 subgoal):\n 1. \\<chi> (inv a) = cnj (\\<chi> a)", "from mult_inv_character[of a] and assms"], ["proof (chain)\npicking this:\n  \\<chi> a * inv_character \\<chi> a = principal_char G a\n  a \\<in> carrier G", "have \"inverse (\\<chi> a) = cnj (\\<chi> a)\""], ["proof (prove)\nusing this:\n  \\<chi> a * inv_character \\<chi> a = principal_char G a\n  a \\<in> carrier G\n\ngoal (1 subgoal):\n 1. inverse (\\<chi> a) = cnj (\\<chi> a)", "by (auto simp add: inv_character_def principal_char_def divide_simps mult.commute)"], ["proof (state)\nthis:\n  inverse (\\<chi> a) = cnj (\\<chi> a)\n\ngoal (1 subgoal):\n 1. \\<chi> (inv a) = cnj (\\<chi> a)", "finally"], ["proof (chain)\npicking this:\n  \\<chi> (inv a) = cnj (\\<chi> a)", "show \"\\<chi> (inv a) = cnj (\\<chi> a)\""], ["proof (prove)\nusing this:\n  \\<chi> (inv a) = cnj (\\<chi> a)\n\ngoal (1 subgoal):\n 1. \\<chi> (inv a) = cnj (\\<chi> a)", "."], ["proof (state)\nthis:\n  \\<chi> (inv a) = cnj (\\<chi> a)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma (in finite_comm_group) character_principal [simp, intro]: \"character G (principal_char G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. character G (principal_char G)", "by standard (auto simp: principal_char_def)"], ["", "lemmas [simp,intro] = finite_comm_group.character_principal"], ["", "lemma character_ext:\n  assumes \"character G \\<chi>\" \"character G \\<chi>'\" \"\\<And>x. x \\<in> carrier G \\<Longrightarrow> \\<chi> x = \\<chi>' x\"\n  shows   \"\\<chi> = \\<chi>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> = \\<chi>'", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. \\<chi> x = \\<chi>' x", "fix x :: 'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. \\<chi> x = \\<chi>' x", "show \"\\<chi> x = \\<chi>' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> x = \\<chi>' x", "using assms"], ["proof (prove)\nusing this:\n  character G \\<chi>\n  character G \\<chi>'\n  ?x \\<in> carrier G \\<Longrightarrow> \\<chi> ?x = \\<chi>' ?x\n\ngoal (1 subgoal):\n 1. \\<chi> x = \\<chi>' x", "by (cases \"x \\<in> carrier G\") (auto simp: character.char_eq_0)"], ["proof (state)\nthis:\n  \\<chi> x = \\<chi>' x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma character_mult [intro]: \n  assumes \"character G \\<chi>\" \"character G \\<chi>'\"\n  shows   \"character G (\\<lambda>x. \\<chi> x * \\<chi>' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. character G (\\<lambda>x. \\<chi> x * \\<chi>' x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. character G (\\<lambda>x. \\<chi> x * \\<chi>' x)", "interpret \\<chi>: character G \\<chi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. character G \\<chi>", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. character G (\\<lambda>x. \\<chi> x * \\<chi>' x)", "interpret \\<chi>': character G \\<chi>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. character G \\<chi>'", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. character G (\\<lambda>x. \\<chi> x * \\<chi>' x)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. character G (\\<lambda>x. \\<chi> x * \\<chi>' x)", "by standard (auto simp: \\<chi>.char_eq_0)"], ["proof (state)\nthis:\n  character G (\\<lambda>x. \\<chi> x * \\<chi>' x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma character_inv_character_iff [simp]: \"character G (inv_character \\<chi>) \\<longleftrightarrow> character G \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. character G (inv_character \\<chi>) = character G \\<chi>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. character G (inv_character \\<chi>) \\<Longrightarrow> character G \\<chi>\n 2. character G \\<chi> \\<Longrightarrow> character G (inv_character \\<chi>)", "assume \"character G (inv_character \\<chi>)\""], ["proof (state)\nthis:\n  character G (inv_character \\<chi>)\n\ngoal (2 subgoals):\n 1. character G (inv_character \\<chi>) \\<Longrightarrow> character G \\<chi>\n 2. character G \\<chi> \\<Longrightarrow> character G (inv_character \\<chi>)", "from character.inv_character [OF this]"], ["proof (chain)\npicking this:\n  character G (inv_character (inv_character \\<chi>))", "show \"character G \\<chi>\""], ["proof (prove)\nusing this:\n  character G (inv_character (inv_character \\<chi>))\n\ngoal (1 subgoal):\n 1. character G \\<chi>", "by simp"], ["proof (state)\nthis:\n  character G \\<chi>\n\ngoal (1 subgoal):\n 1. character G \\<chi> \\<Longrightarrow> character G (inv_character \\<chi>)", "qed (auto simp: character.inv_character)"], ["", "definition characters :: \"('a, 'b) monoid_scheme \\<Rightarrow> ('a \\<Rightarrow> complex) set\"  where\n  \"characters G = {\\<chi>. character G \\<chi>}\""], ["", "subsection \\<open>The Character group\\<close>"], ["", "text \\<open>\n  The characters of a finite abelian group $G$ form another group $\\widehat{G}$, which is called\n  its Pontryagin dual group. This generalises to the more general setting of locally compact\n  abelian groups, but we restrict ourselves to the finite setting because it is much easier.\n\\<close>"], ["", "definition Characters :: \"('a, 'b) monoid_scheme \\<Rightarrow> ('a \\<Rightarrow> complex) monoid\"\n  where \"Characters G = \\<lparr> carrier = characters G, mult = (\\<lambda>\\<chi>\\<^sub>1 \\<chi>\\<^sub>2 k. \\<chi>\\<^sub>1 k * \\<chi>\\<^sub>2 k),\n                          one = principal_char G \\<rparr>\""], ["", "lemma carrier_Characters: \"carrier (Characters G) = characters G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (Characters G) = characters G", "by (simp add: Characters_def)"], ["", "lemma one_Characters: \"one (Characters G) = principal_char G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<one>\\<^bsub>Characters G\\<^esub> = principal_char G", "by (simp add: Characters_def)"], ["", "lemma mult_Characters: \"mult (Characters G) \\<chi>\\<^sub>1 \\<chi>\\<^sub>2 = (\\<lambda>a. \\<chi>\\<^sub>1 a * \\<chi>\\<^sub>2 a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi>\\<^sub>1 \\<otimes>\\<^bsub>Characters G\\<^esub> \\<chi>\\<^sub>2 =\n    (\\<lambda>a. \\<chi>\\<^sub>1 a * \\<chi>\\<^sub>2 a)", "by (simp add: Characters_def)"], ["", "context finite_comm_group\nbegin"], ["", "sublocale principal: character G \"principal_char G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. character G (principal_char G)", ".."], ["", "lemma finite_characters [intro]: \"finite (characters G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (characters G)", "proof (rule finite_subset)"], ["proof (state)\ngoal (2 subgoals):\n 1. characters G \\<subseteq> ?B\n 2. finite ?B", "show \"characters G \\<subseteq> (\\<lambda>f x. if x \\<in> carrier G then f x else 0) ` \n                          Pi\\<^sub>E (carrier G) (\\<lambda>_. {z. z ^ order G = 1})\" (is \"_ \\<subseteq> ?h ` ?Chars\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. characters G\n    \\<subseteq> (\\<lambda>f x. if x \\<in> carrier G then f x else 0) `\n                (carrier G \\<rightarrow>\\<^sub>E {z. z ^ order G = 1})", "proof (intro subsetI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> characters G \\<Longrightarrow>\n       x \\<in> (\\<lambda>f x. if x \\<in> carrier G then f x else 0) `\n               (carrier G \\<rightarrow>\\<^sub>E {z. z ^ order G = 1})", "case (1 \\<chi>)"], ["proof (state)\nthis:\n  \\<chi> \\<in> characters G\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> characters G \\<Longrightarrow>\n       x \\<in> (\\<lambda>f x. if x \\<in> carrier G then f x else 0) `\n               (carrier G \\<rightarrow>\\<^sub>E {z. z ^ order G = 1})", "then"], ["proof (chain)\npicking this:\n  \\<chi> \\<in> characters G", "interpret \\<chi>: character G \\<chi>"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> characters G\n\ngoal (1 subgoal):\n 1. character G \\<chi>", "by (simp add: characters_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> characters G \\<Longrightarrow>\n       x \\<in> (\\<lambda>f x. if x \\<in> carrier G then f x else 0) `\n               (carrier G \\<rightarrow>\\<^sub>E {z. z ^ order G = 1})", "have \"?h (restrict \\<chi> (carrier G)) \\<in> ?h ` ?Chars\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        if x \\<in> carrier G then restrict \\<chi> (carrier G) x else 0)\n    \\<in> (\\<lambda>f x. if x \\<in> carrier G then f x else 0) `\n          (carrier G \\<rightarrow>\\<^sub>E {z. z ^ order G = 1})", "by (intro imageI) (auto simp: \\<chi>.char_root')"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      if x \\<in> carrier G then restrict \\<chi> (carrier G) x else 0)\n  \\<in> (\\<lambda>f x. if x \\<in> carrier G then f x else 0) `\n        (carrier G \\<rightarrow>\\<^sub>E {z. z ^ order G = 1})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> characters G \\<Longrightarrow>\n       x \\<in> (\\<lambda>f x. if x \\<in> carrier G then f x else 0) `\n               (carrier G \\<rightarrow>\\<^sub>E {z. z ^ order G = 1})", "also"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      if x \\<in> carrier G then restrict \\<chi> (carrier G) x else 0)\n  \\<in> (\\<lambda>f x. if x \\<in> carrier G then f x else 0) `\n        (carrier G \\<rightarrow>\\<^sub>E {z. z ^ order G = 1})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> characters G \\<Longrightarrow>\n       x \\<in> (\\<lambda>f x. if x \\<in> carrier G then f x else 0) `\n               (carrier G \\<rightarrow>\\<^sub>E {z. z ^ order G = 1})", "have \"?h (restrict \\<chi> (carrier G)) = \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        if x \\<in> carrier G then restrict \\<chi> (carrier G) x else 0) =\n    \\<chi>", "by (simp add: fun_eq_iff \\<chi>.char_eq_0)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      if x \\<in> carrier G then restrict \\<chi> (carrier G) x else 0) =\n  \\<chi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> characters G \\<Longrightarrow>\n       x \\<in> (\\<lambda>f x. if x \\<in> carrier G then f x else 0) `\n               (carrier G \\<rightarrow>\\<^sub>E {z. z ^ order G = 1})", "finally"], ["proof (chain)\npicking this:\n  \\<chi>\n  \\<in> (\\<lambda>f x. if x \\<in> carrier G then f x else 0) `\n        (carrier G \\<rightarrow>\\<^sub>E {z. z ^ order G = 1})", "show ?case"], ["proof (prove)\nusing this:\n  \\<chi>\n  \\<in> (\\<lambda>f x. if x \\<in> carrier G then f x else 0) `\n        (carrier G \\<rightarrow>\\<^sub>E {z. z ^ order G = 1})\n\ngoal (1 subgoal):\n 1. \\<chi>\n    \\<in> (\\<lambda>f x. if x \\<in> carrier G then f x else 0) `\n          (carrier G \\<rightarrow>\\<^sub>E {z. z ^ order G = 1})", "."], ["proof (state)\nthis:\n  \\<chi>\n  \\<in> (\\<lambda>f x. if x \\<in> carrier G then f x else 0) `\n        (carrier G \\<rightarrow>\\<^sub>E {z. z ^ order G = 1})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  characters G\n  \\<subseteq> (\\<lambda>f x. if x \\<in> carrier G then f x else 0) `\n              (carrier G \\<rightarrow>\\<^sub>E {z. z ^ order G = 1})\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>f x. if x \\<in> carrier G then f x else 0) `\n      (carrier G \\<rightarrow>\\<^sub>E {z. z ^ order G = 1}))", "show \"finite (?h ` ?Chars)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>f x. if x \\<in> carrier G then f x else 0) `\n      (carrier G \\<rightarrow>\\<^sub>E {z. z ^ order G = 1}))", "by (intro finite_imageI finite_PiE finite_roots_unity) (auto simp: Suc_le_eq)"], ["proof (state)\nthis:\n  finite\n   ((\\<lambda>f x. if x \\<in> carrier G then f x else 0) `\n    (carrier G \\<rightarrow>\\<^sub>E {z. z ^ order G = 1}))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_comm_group_Characters [intro]: \"finite_comm_group (Characters G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_comm_group (Characters G)", "proof"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y\n                         \\<in> carrier (Characters G)\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G);\n        z \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         (y \\<otimes>\\<^bsub>Characters G\\<^esub> z)\n 3. \\<one>\\<^bsub>Characters G\\<^esub> \\<in> carrier (Characters G)\n 4. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       \\<one>\\<^bsub>Characters G\\<^esub> \\<otimes>\\<^bsub>Characters G\\<^esub>\n       x =\n       x\n 5. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>Characters G\\<^esub>\n       \\<one>\\<^bsub>Characters G\\<^esub> =\n       x\n 6. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub> x\n 7. carrier (Characters G) \\<subseteq> Units (Characters G)\n 8. finite (carrier (Characters G))", "fix \\<chi> \\<chi>'"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y\n                         \\<in> carrier (Characters G)\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G);\n        z \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         (y \\<otimes>\\<^bsub>Characters G\\<^esub> z)\n 3. \\<one>\\<^bsub>Characters G\\<^esub> \\<in> carrier (Characters G)\n 4. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       \\<one>\\<^bsub>Characters G\\<^esub> \\<otimes>\\<^bsub>Characters G\\<^esub>\n       x =\n       x\n 5. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>Characters G\\<^esub>\n       \\<one>\\<^bsub>Characters G\\<^esub> =\n       x\n 6. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub> x\n 7. carrier (Characters G) \\<subseteq> Units (Characters G)\n 8. finite (carrier (Characters G))", "assume *: \"\\<chi> \\<in> carrier (Characters G)\" \"\\<chi>' \\<in> carrier (Characters G)\""], ["proof (state)\nthis:\n  \\<chi> \\<in> carrier (Characters G)\n  \\<chi>' \\<in> carrier (Characters G)\n\ngoal (8 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y\n                         \\<in> carrier (Characters G)\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G);\n        z \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         (y \\<otimes>\\<^bsub>Characters G\\<^esub> z)\n 3. \\<one>\\<^bsub>Characters G\\<^esub> \\<in> carrier (Characters G)\n 4. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       \\<one>\\<^bsub>Characters G\\<^esub> \\<otimes>\\<^bsub>Characters G\\<^esub>\n       x =\n       x\n 5. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>Characters G\\<^esub>\n       \\<one>\\<^bsub>Characters G\\<^esub> =\n       x\n 6. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub> x\n 7. carrier (Characters G) \\<subseteq> Units (Characters G)\n 8. finite (carrier (Characters G))", "from *"], ["proof (chain)\npicking this:\n  \\<chi> \\<in> carrier (Characters G)\n  \\<chi>' \\<in> carrier (Characters G)", "interpret \\<chi>: character G \\<chi>"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> carrier (Characters G)\n  \\<chi>' \\<in> carrier (Characters G)\n\ngoal (1 subgoal):\n 1. character G \\<chi>", "by (simp_all add: characters_def carrier_Characters)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y\n                         \\<in> carrier (Characters G)\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G);\n        z \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         (y \\<otimes>\\<^bsub>Characters G\\<^esub> z)\n 3. \\<one>\\<^bsub>Characters G\\<^esub> \\<in> carrier (Characters G)\n 4. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       \\<one>\\<^bsub>Characters G\\<^esub> \\<otimes>\\<^bsub>Characters G\\<^esub>\n       x =\n       x\n 5. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>Characters G\\<^esub>\n       \\<one>\\<^bsub>Characters G\\<^esub> =\n       x\n 6. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub> x\n 7. carrier (Characters G) \\<subseteq> Units (Characters G)\n 8. finite (carrier (Characters G))", "from *"], ["proof (chain)\npicking this:\n  \\<chi> \\<in> carrier (Characters G)\n  \\<chi>' \\<in> carrier (Characters G)", "interpret \\<chi>': character G \\<chi>'"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> carrier (Characters G)\n  \\<chi>' \\<in> carrier (Characters G)\n\ngoal (1 subgoal):\n 1. character G \\<chi>'", "by (simp_all add: characters_def  carrier_Characters)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y\n                         \\<in> carrier (Characters G)\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G);\n        z \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         (y \\<otimes>\\<^bsub>Characters G\\<^esub> z)\n 3. \\<one>\\<^bsub>Characters G\\<^esub> \\<in> carrier (Characters G)\n 4. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       \\<one>\\<^bsub>Characters G\\<^esub> \\<otimes>\\<^bsub>Characters G\\<^esub>\n       x =\n       x\n 5. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>Characters G\\<^esub>\n       \\<one>\\<^bsub>Characters G\\<^esub> =\n       x\n 6. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub> x\n 7. carrier (Characters G) \\<subseteq> Units (Characters G)\n 8. finite (carrier (Characters G))", "have \"character G (\\<lambda>k. \\<chi> k * \\<chi>' k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. character G (\\<lambda>k. \\<chi> k * \\<chi>' k)", "by standard (insert *, simp_all add: \\<chi>.char_eq_0 one_Characters \n                                         mult_Characters characters_def  carrier_Characters)"], ["proof (state)\nthis:\n  character G (\\<lambda>k. \\<chi> k * \\<chi>' k)\n\ngoal (8 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y\n                         \\<in> carrier (Characters G)\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G);\n        z \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         (y \\<otimes>\\<^bsub>Characters G\\<^esub> z)\n 3. \\<one>\\<^bsub>Characters G\\<^esub> \\<in> carrier (Characters G)\n 4. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       \\<one>\\<^bsub>Characters G\\<^esub> \\<otimes>\\<^bsub>Characters G\\<^esub>\n       x =\n       x\n 5. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>Characters G\\<^esub>\n       \\<one>\\<^bsub>Characters G\\<^esub> =\n       x\n 6. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub> x\n 7. carrier (Characters G) \\<subseteq> Units (Characters G)\n 8. finite (carrier (Characters G))", "thus \"\\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> \\<chi>' \\<in> carrier (Characters G)\""], ["proof (prove)\nusing this:\n  character G (\\<lambda>k. \\<chi> k * \\<chi>' k)\n\ngoal (1 subgoal):\n 1. \\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> \\<chi>'\n    \\<in> carrier (Characters G)", "by (simp add: characters_def one_Characters mult_Characters  carrier_Characters)"], ["proof (state)\nthis:\n  \\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> \\<chi>'\n  \\<in> carrier (Characters G)\n\ngoal (7 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G);\n        z \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         (y \\<otimes>\\<^bsub>Characters G\\<^esub> z)\n 2. \\<one>\\<^bsub>Characters G\\<^esub> \\<in> carrier (Characters G)\n 3. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       \\<one>\\<^bsub>Characters G\\<^esub> \\<otimes>\\<^bsub>Characters G\\<^esub>\n       x =\n       x\n 4. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>Characters G\\<^esub>\n       \\<one>\\<^bsub>Characters G\\<^esub> =\n       x\n 5. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub> x\n 6. carrier (Characters G) \\<subseteq> Units (Characters G)\n 7. finite (carrier (Characters G))", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G);\n        z \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         (y \\<otimes>\\<^bsub>Characters G\\<^esub> z)\n 2. \\<one>\\<^bsub>Characters G\\<^esub> \\<in> carrier (Characters G)\n 3. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       \\<one>\\<^bsub>Characters G\\<^esub> \\<otimes>\\<^bsub>Characters G\\<^esub>\n       x =\n       x\n 4. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>Characters G\\<^esub>\n       \\<one>\\<^bsub>Characters G\\<^esub> =\n       x\n 5. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub> x\n 6. carrier (Characters G) \\<subseteq> Units (Characters G)\n 7. finite (carrier (Characters G))", "have \"character G (principal_char G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. character G (principal_char G)", ".."], ["proof (state)\nthis:\n  character G (principal_char G)\n\ngoal (7 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G);\n        z \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         (y \\<otimes>\\<^bsub>Characters G\\<^esub> z)\n 2. \\<one>\\<^bsub>Characters G\\<^esub> \\<in> carrier (Characters G)\n 3. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       \\<one>\\<^bsub>Characters G\\<^esub> \\<otimes>\\<^bsub>Characters G\\<^esub>\n       x =\n       x\n 4. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>Characters G\\<^esub>\n       \\<one>\\<^bsub>Characters G\\<^esub> =\n       x\n 5. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub> x\n 6. carrier (Characters G) \\<subseteq> Units (Characters G)\n 7. finite (carrier (Characters G))", "thus \"\\<one>\\<^bsub>Characters G\\<^esub> \\<in> carrier (Characters G)\""], ["proof (prove)\nusing this:\n  character G (principal_char G)\n\ngoal (1 subgoal):\n 1. \\<one>\\<^bsub>Characters G\\<^esub> \\<in> carrier (Characters G)", "by (simp add: characters_def one_Characters mult_Characters  carrier_Characters)"], ["proof (state)\nthis:\n  \\<one>\\<^bsub>Characters G\\<^esub> \\<in> carrier (Characters G)\n\ngoal (6 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G);\n        z \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         (y \\<otimes>\\<^bsub>Characters G\\<^esub> z)\n 2. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       \\<one>\\<^bsub>Characters G\\<^esub> \\<otimes>\\<^bsub>Characters G\\<^esub>\n       x =\n       x\n 3. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>Characters G\\<^esub>\n       \\<one>\\<^bsub>Characters G\\<^esub> =\n       x\n 4. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub> x\n 5. carrier (Characters G) \\<subseteq> Units (Characters G)\n 6. finite (carrier (Characters G))", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G);\n        z \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         (y \\<otimes>\\<^bsub>Characters G\\<^esub> z)\n 2. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       \\<one>\\<^bsub>Characters G\\<^esub> \\<otimes>\\<^bsub>Characters G\\<^esub>\n       x =\n       x\n 3. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>Characters G\\<^esub>\n       \\<one>\\<^bsub>Characters G\\<^esub> =\n       x\n 4. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub> x\n 5. carrier (Characters G) \\<subseteq> Units (Characters G)\n 6. finite (carrier (Characters G))", "fix \\<chi>"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G);\n        z \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         (y \\<otimes>\\<^bsub>Characters G\\<^esub> z)\n 2. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       \\<one>\\<^bsub>Characters G\\<^esub> \\<otimes>\\<^bsub>Characters G\\<^esub>\n       x =\n       x\n 3. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>Characters G\\<^esub>\n       \\<one>\\<^bsub>Characters G\\<^esub> =\n       x\n 4. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub> x\n 5. carrier (Characters G) \\<subseteq> Units (Characters G)\n 6. finite (carrier (Characters G))", "assume *: \"\\<chi> \\<in> carrier (Characters G)\""], ["proof (state)\nthis:\n  \\<chi> \\<in> carrier (Characters G)\n\ngoal (6 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G);\n        z \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         (y \\<otimes>\\<^bsub>Characters G\\<^esub> z)\n 2. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       \\<one>\\<^bsub>Characters G\\<^esub> \\<otimes>\\<^bsub>Characters G\\<^esub>\n       x =\n       x\n 3. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>Characters G\\<^esub>\n       \\<one>\\<^bsub>Characters G\\<^esub> =\n       x\n 4. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub> x\n 5. carrier (Characters G) \\<subseteq> Units (Characters G)\n 6. finite (carrier (Characters G))", "from *"], ["proof (chain)\npicking this:\n  \\<chi> \\<in> carrier (Characters G)", "interpret \\<chi>: character G \\<chi>"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> carrier (Characters G)\n\ngoal (1 subgoal):\n 1. character G \\<chi>", "by (simp_all add: characters_def carrier_Characters)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G);\n        z \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         (y \\<otimes>\\<^bsub>Characters G\\<^esub> z)\n 2. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       \\<one>\\<^bsub>Characters G\\<^esub> \\<otimes>\\<^bsub>Characters G\\<^esub>\n       x =\n       x\n 3. \\<And>x.\n       x \\<in> carrier (Characters G) \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>Characters G\\<^esub>\n       \\<one>\\<^bsub>Characters G\\<^esub> =\n       x\n 4. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub> x\n 5. carrier (Characters G) \\<subseteq> Units (Characters G)\n 6. finite (carrier (Characters G))", "show \"\\<one>\\<^bsub>Characters G\\<^esub> \\<otimes>\\<^bsub>Characters G\\<^esub> \\<chi> = \\<chi>\" and \"\\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> \\<one>\\<^bsub>Characters G\\<^esub> = \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<one>\\<^bsub>Characters G\\<^esub> \\<otimes>\\<^bsub>Characters G\\<^esub>\n    \\<chi> =\n    \\<chi> &&&\n    \\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub>\n    \\<one>\\<^bsub>Characters G\\<^esub> =\n    \\<chi>", "by (simp_all add: principal_char_def fun_eq_iff \\<chi>.char_eq_0 one_Characters mult_Characters)"], ["proof (state)\nthis:\n  \\<one>\\<^bsub>Characters G\\<^esub> \\<otimes>\\<^bsub>Characters G\\<^esub>\n  \\<chi> =\n  \\<chi>\n  \\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub>\n  \\<one>\\<^bsub>Characters G\\<^esub> =\n  \\<chi>\n\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G);\n        z \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         (y \\<otimes>\\<^bsub>Characters G\\<^esub> z)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub> x\n 3. carrier (Characters G) \\<subseteq> Units (Characters G)\n 4. finite (carrier (Characters G))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G);\n        z \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         (y \\<otimes>\\<^bsub>Characters G\\<^esub> z)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub> x\n 3. carrier (Characters G) \\<subseteq> Units (Characters G)\n 4. finite (carrier (Characters G))", "have \"\\<chi> \\<in> Units (Characters G)\" if \"\\<chi> \\<in> carrier (Characters G)\" for \\<chi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> \\<in> Units (Characters G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<chi> \\<in> Units (Characters G)", "from that"], ["proof (chain)\npicking this:\n  \\<chi> \\<in> carrier (Characters G)", "interpret \\<chi>: character G \\<chi>"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> carrier (Characters G)\n\ngoal (1 subgoal):\n 1. character G \\<chi>", "by (simp add: characters_def carrier_Characters)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<chi> \\<in> Units (Characters G)", "have \"\\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> inv_character \\<chi> = \\<one>\\<^bsub>Characters G\\<^esub>\" and \n         \"inv_character \\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> \\<chi> = \\<one>\\<^bsub>Characters G\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> inv_character \\<chi> =\n    \\<one>\\<^bsub>Characters G\\<^esub> &&&\n    inv_character \\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> \\<chi> =\n    \\<one>\\<^bsub>Characters G\\<^esub>", "by (simp_all add: \\<chi>.mult_inv_character mult_ac one_Characters mult_Characters)"], ["proof (state)\nthis:\n  \\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> inv_character \\<chi> =\n  \\<one>\\<^bsub>Characters G\\<^esub>\n  inv_character \\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> \\<chi> =\n  \\<one>\\<^bsub>Characters G\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<chi> \\<in> Units (Characters G)", "moreover"], ["proof (state)\nthis:\n  \\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> inv_character \\<chi> =\n  \\<one>\\<^bsub>Characters G\\<^esub>\n  inv_character \\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> \\<chi> =\n  \\<one>\\<^bsub>Characters G\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<chi> \\<in> Units (Characters G)", "from that"], ["proof (chain)\npicking this:\n  \\<chi> \\<in> carrier (Characters G)", "have \"inv_character \\<chi> \\<in> carrier (Characters G)\""], ["proof (prove)\nusing this:\n  \\<chi> \\<in> carrier (Characters G)\n\ngoal (1 subgoal):\n 1. inv_character \\<chi> \\<in> carrier (Characters G)", "by (simp add: characters_def carrier_Characters)"], ["proof (state)\nthis:\n  inv_character \\<chi> \\<in> carrier (Characters G)\n\ngoal (1 subgoal):\n 1. \\<chi> \\<in> Units (Characters G)", "ultimately"], ["proof (chain)\npicking this:\n  \\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> inv_character \\<chi> =\n  \\<one>\\<^bsub>Characters G\\<^esub>\n  inv_character \\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> \\<chi> =\n  \\<one>\\<^bsub>Characters G\\<^esub>\n  inv_character \\<chi> \\<in> carrier (Characters G)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> inv_character \\<chi> =\n  \\<one>\\<^bsub>Characters G\\<^esub>\n  inv_character \\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> \\<chi> =\n  \\<one>\\<^bsub>Characters G\\<^esub>\n  inv_character \\<chi> \\<in> carrier (Characters G)\n\ngoal (1 subgoal):\n 1. \\<chi> \\<in> Units (Characters G)", "using that"], ["proof (prove)\nusing this:\n  \\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> inv_character \\<chi> =\n  \\<one>\\<^bsub>Characters G\\<^esub>\n  inv_character \\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> \\<chi> =\n  \\<one>\\<^bsub>Characters G\\<^esub>\n  inv_character \\<chi> \\<in> carrier (Characters G)\n  \\<chi> \\<in> carrier (Characters G)\n\ngoal (1 subgoal):\n 1. \\<chi> \\<in> Units (Characters G)", "unfolding Units_def"], ["proof (prove)\nusing this:\n  \\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> inv_character \\<chi> =\n  \\<one>\\<^bsub>Characters G\\<^esub>\n  inv_character \\<chi> \\<otimes>\\<^bsub>Characters G\\<^esub> \\<chi> =\n  \\<one>\\<^bsub>Characters G\\<^esub>\n  inv_character \\<chi> \\<in> carrier (Characters G)\n  \\<chi> \\<in> carrier (Characters G)\n\ngoal (1 subgoal):\n 1. \\<chi>\n    \\<in> {y \\<in> carrier (Characters G).\n           \\<exists>x\\<in>carrier (Characters G).\n              x \\<otimes>\\<^bsub>Characters G\\<^esub> y =\n              \\<one>\\<^bsub>Characters G\\<^esub> \\<and>\n              y \\<otimes>\\<^bsub>Characters G\\<^esub> x =\n              \\<one>\\<^bsub>Characters G\\<^esub>}", "by blast"], ["proof (state)\nthis:\n  \\<chi> \\<in> Units (Characters G)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?\\<chi> \\<in> carrier (Characters G) \\<Longrightarrow>\n  ?\\<chi> \\<in> Units (Characters G)\n\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G);\n        z \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         (y \\<otimes>\\<^bsub>Characters G\\<^esub> z)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub> x\n 3. carrier (Characters G) \\<subseteq> Units (Characters G)\n 4. finite (carrier (Characters G))", "thus \"carrier (Characters G) \\<subseteq> Units (Characters G)\""], ["proof (prove)\nusing this:\n  ?\\<chi> \\<in> carrier (Characters G) \\<Longrightarrow>\n  ?\\<chi> \\<in> Units (Characters G)\n\ngoal (1 subgoal):\n 1. carrier (Characters G) \\<subseteq> Units (Characters G)", ".."], ["proof (state)\nthis:\n  carrier (Characters G) \\<subseteq> Units (Characters G)\n\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G);\n        z \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>Characters G\\<^esub>\n                         (y \\<otimes>\\<^bsub>Characters G\\<^esub> z)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier (Characters G);\n        y \\<in> carrier (Characters G)\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>Characters G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>Characters G\\<^esub> x\n 3. finite (carrier (Characters G))", "qed (auto simp: principal_char_def one_Characters mult_Characters carrier_Characters)"], ["", "end"], ["", "lemma (in character) character_in_order_1:\n  assumes \"order G = 1\"\n  shows   \"\\<chi> = principal_char G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> = principal_char G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<chi> = principal_char G", "from assms"], ["proof (chain)\npicking this:\n  order G = 1", "have \"card (carrier G - {\\<one>}) = 0\""], ["proof (prove)\nusing this:\n  order G = 1\n\ngoal (1 subgoal):\n 1. card (carrier G - {\\<one>}) = 0", "by (subst card_Diff_subset) (auto simp: order_def)"], ["proof (state)\nthis:\n  card (carrier G - {\\<one>}) = 0\n\ngoal (1 subgoal):\n 1. \\<chi> = principal_char G", "hence \"carrier G - {\\<one>} = {}\""], ["proof (prove)\nusing this:\n  card (carrier G - {\\<one>}) = 0\n\ngoal (1 subgoal):\n 1. carrier G - {\\<one>} = {}", "by (subst (asm) card_0_eq) auto"], ["proof (state)\nthis:\n  carrier G - {\\<one>} = {}\n\ngoal (1 subgoal):\n 1. \\<chi> = principal_char G", "hence \"carrier G = {\\<one>}\""], ["proof (prove)\nusing this:\n  carrier G - {\\<one>} = {}\n\ngoal (1 subgoal):\n 1. carrier G = {\\<one>}", "by auto"], ["proof (state)\nthis:\n  carrier G = {\\<one>}\n\ngoal (1 subgoal):\n 1. \\<chi> = principal_char G", "thus ?thesis"], ["proof (prove)\nusing this:\n  carrier G = {\\<one>}\n\ngoal (1 subgoal):\n 1. \\<chi> = principal_char G", "by (intro ext) (simp_all add: principal_char_def char_eq_0)"], ["proof (state)\nthis:\n  \\<chi> = principal_char G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in finite_comm_group) characters_in_order_1:\n  assumes \"order G = 1\"\n  shows   \"characters G = {principal_char G}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. characters G = {principal_char G}", "using character.character_in_order_1 [OF _ assms]"], ["proof (prove)\nusing this:\n  character G ?\\<chi> \\<Longrightarrow> ?\\<chi> = principal_char G\n\ngoal (1 subgoal):\n 1. characters G = {principal_char G}", "by (auto simp: characters_def)"], ["", "lemma (in character) inv_Characters: \"inv\\<^bsub>Characters G\\<^esub> \\<chi> = inv_character \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv\\<^bsub>Characters G\\<^esub> \\<chi> = inv_character \\<chi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inv\\<^bsub>Characters G\\<^esub> \\<chi> = inv_character \\<chi>", "interpret Characters: finite_comm_group \"Characters G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_comm_group (Characters G)", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. inv\\<^bsub>Characters G\\<^esub> \\<chi> = inv_character \\<chi>", "have \"character G \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. character G \\<chi>", ".."], ["proof (state)\nthis:\n  character G \\<chi>\n\ngoal (1 subgoal):\n 1. inv\\<^bsub>Characters G\\<^esub> \\<chi> = inv_character \\<chi>", "thus ?thesis"], ["proof (prove)\nusing this:\n  character G \\<chi>\n\ngoal (1 subgoal):\n 1. inv\\<^bsub>Characters G\\<^esub> \\<chi> = inv_character \\<chi>", "by (intro Characters.inv_equality) \n       (auto simp: characters_def mult_inv_character mult_ac \n                   carrier_Characters one_Characters mult_Characters)"], ["proof (state)\nthis:\n  inv\\<^bsub>Characters G\\<^esub> \\<chi> = inv_character \\<chi>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in finite_comm_group) inv_Characters': \n  \"\\<chi> \\<in> characters G \\<Longrightarrow> inv\\<^bsub>Characters G\\<^esub> \\<chi> = inv_character \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> \\<in> characters G \\<Longrightarrow>\n    inv\\<^bsub>Characters G\\<^esub> \\<chi> = inv_character \\<chi>", "by (intro character.inv_Characters) (auto simp: characters_def)"], ["", "lemmas (in finite_comm_group) Characters_simps = \n  carrier_Characters mult_Characters one_Characters inv_Characters'"], ["", "lemma inv_Characters': \"\\<chi> \\<in> characters G \\<Longrightarrow> inv\\<^bsub>Characters G\\<^esub> \\<chi> = inv_character \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> \\<in> characters G \\<Longrightarrow>\n    inv\\<^bsub>Characters G\\<^esub> \\<chi> = inv_character \\<chi>", "using character.inv_Characters[of G \\<chi>]"], ["proof (prove)\nusing this:\n  character G \\<chi> \\<Longrightarrow>\n  inv\\<^bsub>Characters G\\<^esub> \\<chi> = inv_character \\<chi>\n\ngoal (1 subgoal):\n 1. \\<chi> \\<in> characters G \\<Longrightarrow>\n    inv\\<^bsub>Characters G\\<^esub> \\<chi> = inv_character \\<chi>", "by (simp add: characters_def)"], ["", "subsection \\<open>Relationship of characters and adjoining\\<close>"], ["", "text \\<open>\n  We now study the set of characters of two subgroups $H$ and $H_x$, where $x\\in G\\setminus H$\n  and $H_x$ is the smallest supergroup of $H$ that contains \\<open>x\\<close>.\n\n  Let $n$ denote the indicator of \\<open>x\\<close> in \\<open>H\\<close> (i.\\,e.\\ the smallest positive number such\n  that $x^n\\in H$) We show that any character on $H_x$ corresponds to a pair of\n  a character \\<open>\\<chi>\\<close> on \\<open>H\\<close> and an $n$-th root of $\\chi(x^n)$ (or, equivalently, an $n$-th\n  root of unity).\n\\<close>"], ["", "context finite_comm_group_adjoin\nbegin"], ["", "lemma lower_character:\n  assumes \"character (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<chi>\" \n    (is \"character ?G'' _\")\n  shows   \"character (G\\<lparr>carrier := H\\<rparr>) (\\<lambda>x. if x \\<in> H then \\<chi> x else 0)\" (is \"character ?G' ?\\<chi>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := H\\<rparr>)\n     (\\<lambda>x. if x \\<in> H then \\<chi> x else 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := H\\<rparr>)\n     (\\<lambda>x. if x \\<in> H then \\<chi> x else 0)", "have \"subgroup H G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup H G", ".."], ["proof (state)\nthis:\n  subgroup H G\n\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := H\\<rparr>)\n     (\\<lambda>x. if x \\<in> H then \\<chi> x else 0)", "then"], ["proof (chain)\npicking this:\n  subgroup H G", "interpret G'': finite_comm_group ?G''"], ["proof (prove)\nusing this:\n  subgroup H G\n\ngoal (1 subgoal):\n 1. finite_comm_group (G\\<lparr>carrier := adjoin G H a\\<rparr>)", "by (intro subgroup_imp_finite_comm_group adjoin_subgroup) auto"], ["proof (state)\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := H\\<rparr>)\n     (\\<lambda>x. if x \\<in> H then \\<chi> x else 0)", "from \\<open>subgroup H G\\<close>"], ["proof (chain)\npicking this:\n  subgroup H G", "interpret G': finite_comm_group ?G'"], ["proof (prove)\nusing this:\n  subgroup H G\n\ngoal (1 subgoal):\n 1. finite_comm_group (G\\<lparr>carrier := H\\<rparr>)", "by (intro subgroup_imp_finite_comm_group adjoin_subgroup) auto"], ["proof (state)\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := H\\<rparr>)\n     (\\<lambda>x. if x \\<in> H then \\<chi> x else 0)", "from assms"], ["proof (chain)\npicking this:\n  character (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<chi>", "interpret character ?G'' \\<chi>"], ["proof (prove)\nusing this:\n  character (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<chi>\n\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<chi>", "by (simp add: characters_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := H\\<rparr>)\n     (\\<lambda>x. if x \\<in> H then \\<chi> x else 0)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := H\\<rparr>)\n     (\\<lambda>x. if x \\<in> H then \\<chi> x else 0)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. (if \\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> \\<in> H\n     then \\<chi> \\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub>\n     else 0) \\<noteq>\n    0\n 2. \\<And>a.\n       a \\<notin> carrier (G\\<lparr>carrier := H\\<rparr>) \\<Longrightarrow>\n       (if a \\<in> H then \\<chi> a else 0) = 0\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier (G\\<lparr>carrier := H\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := H\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> (if a \\<otimes>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub>\n                             b\n                             \\<in> H\n                          then \\<chi>\n                                (a \\<otimes>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub>\n                                 b)\n                          else 0) =\n                         (if a \\<in> H then \\<chi> a else 0) *\n                         (if b \\<in> H then \\<chi> b else 0)", "fix x y"], ["proof (state)\ngoal (3 subgoals):\n 1. (if \\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> \\<in> H\n     then \\<chi> \\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub>\n     else 0) \\<noteq>\n    0\n 2. \\<And>a.\n       a \\<notin> carrier (G\\<lparr>carrier := H\\<rparr>) \\<Longrightarrow>\n       (if a \\<in> H then \\<chi> a else 0) = 0\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier (G\\<lparr>carrier := H\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := H\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> (if a \\<otimes>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub>\n                             b\n                             \\<in> H\n                          then \\<chi>\n                                (a \\<otimes>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub>\n                                 b)\n                          else 0) =\n                         (if a \\<in> H then \\<chi> a else 0) *\n                         (if b \\<in> H then \\<chi> b else 0)", "assume \"x \\<in> carrier ?G'\" \"y \\<in> carrier ?G'\""], ["proof (state)\nthis:\n  x \\<in> carrier (G\\<lparr>carrier := H\\<rparr>)\n  y \\<in> carrier (G\\<lparr>carrier := H\\<rparr>)\n\ngoal (3 subgoals):\n 1. (if \\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> \\<in> H\n     then \\<chi> \\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub>\n     else 0) \\<noteq>\n    0\n 2. \\<And>a.\n       a \\<notin> carrier (G\\<lparr>carrier := H\\<rparr>) \\<Longrightarrow>\n       (if a \\<in> H then \\<chi> a else 0) = 0\n 3. \\<And>a b.\n       \\<lbrakk>a \\<in> carrier (G\\<lparr>carrier := H\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := H\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> (if a \\<otimes>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub>\n                             b\n                             \\<in> H\n                          then \\<chi>\n                                (a \\<otimes>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub>\n                                 b)\n                          else 0) =\n                         (if a \\<in> H then \\<chi> a else 0) *\n                         (if b \\<in> H then \\<chi> b else 0)", "thus \"?\\<chi> (x \\<otimes>\\<^bsub>?G'\\<^esub> y) = ?\\<chi> x * ?\\<chi> y\""], ["proof (prove)\nusing this:\n  x \\<in> carrier (G\\<lparr>carrier := H\\<rparr>)\n  y \\<in> carrier (G\\<lparr>carrier := H\\<rparr>)\n\ngoal (1 subgoal):\n 1. (if x \\<otimes>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> y \\<in> H\n     then \\<chi>\n           (x \\<otimes>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> y)\n     else 0) =\n    (if x \\<in> H then \\<chi> x else 0) *\n    (if y \\<in> H then \\<chi> y else 0)", "using char_mult[of x y] mem_adjoin[OF \\<open>subgroup H G\\<close>]"], ["proof (prove)\nusing this:\n  x \\<in> carrier (G\\<lparr>carrier := H\\<rparr>)\n  y \\<in> carrier (G\\<lparr>carrier := H\\<rparr>)\n  \\<lbrakk>x \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n   y \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n  \\<Longrightarrow> \\<chi>\n                     (x \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                      y) =\n                    \\<chi> x * \\<chi> y\n  \\<lbrakk>?x \\<in> H; ?a \\<in> carrier G\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> adjoin G H ?a\n\ngoal (1 subgoal):\n 1. (if x \\<otimes>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> y \\<in> H\n     then \\<chi>\n           (x \\<otimes>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> y)\n     else 0) =\n    (if x \\<in> H then \\<chi> x else 0) *\n    (if y \\<in> H then \\<chi> y else 0)", "by auto"], ["proof (state)\nthis:\n  (if x \\<otimes>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> y \\<in> H\n   then \\<chi> (x \\<otimes>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> y)\n   else 0) =\n  (if x \\<in> H then \\<chi> x else 0) * (if y \\<in> H then \\<chi> y else 0)\n\ngoal (2 subgoals):\n 1. (if \\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> \\<in> H\n     then \\<chi> \\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub>\n     else 0) \\<noteq>\n    0\n 2. \\<And>a.\n       a \\<notin> carrier (G\\<lparr>carrier := H\\<rparr>) \\<Longrightarrow>\n       (if a \\<in> H then \\<chi> a else 0) = 0", "qed (insert char_one, auto simp del: char_one)"], ["proof (state)\nthis:\n  character (G\\<lparr>carrier := H\\<rparr>)\n   (\\<lambda>x. if x \\<in> H then \\<chi> x else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition lift_character :: \"('a \\<Rightarrow> complex) \\<times> complex \\<Rightarrow> ('a \\<Rightarrow> complex)\" where\n  \"lift_character = \n     (\\<lambda>(\\<chi>,z) x. if x \\<in> adjoin G H a then \\<chi> (fst (unadjoin x)) * z ^ snd (unadjoin x) else 0)\""], ["", "lemma lift_character:\n  defines \"h \\<equiv> subgroup_indicator G H a\"\n  assumes \"character (G\\<lparr>carrier := H\\<rparr>) \\<chi>\" (is \"character ?G' _\") and \"z ^ h = \\<chi> (a [^] h)\"\n  shows   \"character (G\\<lparr>carrier := adjoin G H a\\<rparr>) (lift_character (\\<chi>, z))\" (is \"character ?G'' _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n     (lift_character (\\<chi>, z))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n     (lift_character (\\<chi>, z))", "interpret H': subgroup \"adjoin G H a\" G"], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup (adjoin G H a) G", "by (intro adjoin_subgroup is_subgroup) auto"], ["proof (state)\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n     (lift_character (\\<chi>, z))", "have \"subgroup H G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup H G", ".."], ["proof (state)\nthis:\n  subgroup H G\n\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n     (lift_character (\\<chi>, z))", "then"], ["proof (chain)\npicking this:\n  subgroup H G", "interpret G'': finite_comm_group ?G''"], ["proof (prove)\nusing this:\n  subgroup H G\n\ngoal (1 subgoal):\n 1. finite_comm_group (G\\<lparr>carrier := adjoin G H a\\<rparr>)", "by (intro subgroup_imp_finite_comm_group adjoin_subgroup) auto"], ["proof (state)\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n     (lift_character (\\<chi>, z))", "from \\<open>subgroup H G\\<close>"], ["proof (chain)\npicking this:\n  subgroup H G", "interpret G': finite_comm_group ?G'"], ["proof (prove)\nusing this:\n  subgroup H G\n\ngoal (1 subgoal):\n 1. finite_comm_group (G\\<lparr>carrier := H\\<rparr>)", "by (intro subgroup_imp_finite_comm_group adjoin_subgroup) auto"], ["proof (state)\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n     (lift_character (\\<chi>, z))", "from assms"], ["proof (chain)\npicking this:\n  h \\<equiv> subgroup_indicator G H a\n  character (G\\<lparr>carrier := H\\<rparr>) \\<chi>\n  z ^ h = \\<chi> (a [^] h)", "interpret character ?G' \\<chi>"], ["proof (prove)\nusing this:\n  h \\<equiv> subgroup_indicator G H a\n  character (G\\<lparr>carrier := H\\<rparr>) \\<chi>\n  z ^ h = \\<chi> (a [^] h)\n\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := H\\<rparr>) \\<chi>", "by (simp add: characters_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n     (lift_character (\\<chi>, z))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n     (lift_character (\\<chi>, z))", "proof (standard, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. lift_character (\\<chi>, z)\n     \\<one>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub> \\<noteq>\n    0\n 2. \\<And>aa.\n       aa \\<notin> carrier\n                    (G\\<lparr>carrier :=\n                                adjoin G H a\\<rparr>) \\<Longrightarrow>\n       lift_character (\\<chi>, z) aa = 0\n 3. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. lift_character (\\<chi>, z)\n     \\<one>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub> \\<noteq>\n    0\n 2. \\<And>aa.\n       aa \\<notin> carrier\n                    (G\\<lparr>carrier :=\n                                adjoin G H a\\<rparr>) \\<Longrightarrow>\n       lift_character (\\<chi>, z) aa = 0\n 3. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "from char_one"], ["proof (chain)\npicking this:\n  \\<chi> \\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> = 1", "show ?case"], ["proof (prove)\nusing this:\n  \\<chi> \\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> = 1\n\ngoal (1 subgoal):\n 1. lift_character (\\<chi>, z)\n     \\<one>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub> \\<noteq>\n    0", "by (auto simp: lift_character_def simp del: char_one)"], ["proof (state)\nthis:\n  lift_character (\\<chi>, z)\n   \\<one>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub> \\<noteq>\n  0\n\ngoal (2 subgoals):\n 1. \\<And>aa.\n       aa \\<notin> carrier\n                    (G\\<lparr>carrier :=\n                                adjoin G H a\\<rparr>) \\<Longrightarrow>\n       lift_character (\\<chi>, z) aa = 0\n 2. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>aa.\n       aa \\<notin> carrier\n                    (G\\<lparr>carrier :=\n                                adjoin G H a\\<rparr>) \\<Longrightarrow>\n       lift_character (\\<chi>, z) aa = 0\n 2. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "case (2 x)"], ["proof (state)\nthis:\n  x \\<notin> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n\ngoal (2 subgoals):\n 1. \\<And>aa.\n       aa \\<notin> carrier\n                    (G\\<lparr>carrier :=\n                                adjoin G H a\\<rparr>) \\<Longrightarrow>\n       lift_character (\\<chi>, z) aa = 0\n 2. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<notin> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n\ngoal (1 subgoal):\n 1. lift_character (\\<chi>, z) x = 0", "by (auto simp: lift_character_def)"], ["proof (state)\nthis:\n  lift_character (\\<chi>, z) x = 0\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "case (3 x y)"], ["proof (state)\nthis:\n  x \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n  y \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "from 3(1)"], ["proof (chain)\npicking this:\n  x \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)", "obtain x' k where x: \"x' \\<in> H\" \"x = x' \\<otimes> a [^] k\" and k: \"k < h\""], ["proof (prove)\nusing this:\n  x \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n\ngoal (1 subgoal):\n 1. (\\<And>x' k.\n        \\<lbrakk>x' \\<in> H; x = x' \\<otimes> a [^] k; k < h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: adjoin_def h_def)"], ["proof (state)\nthis:\n  x' \\<in> H\n  x = x' \\<otimes> a [^] k\n  k < h\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "from 3(2)"], ["proof (chain)\npicking this:\n  y \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)", "obtain y' l where y: \"y' \\<in> H\" \"y = y' \\<otimes> a [^] l\" and l: \"l < h\""], ["proof (prove)\nusing this:\n  y \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n\ngoal (1 subgoal):\n 1. (\\<And>y' l.\n        \\<lbrakk>y' \\<in> H; y = y' \\<otimes> a [^] l; l < h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: adjoin_def h_def)"], ["proof (state)\nthis:\n  y' \\<in> H\n  y = y' \\<otimes> a [^] l\n  l < h\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "have [simp]: \"unadjoin x = (x', k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unadjoin x = (x', k)", "using x k"], ["proof (prove)\nusing this:\n  x' \\<in> H\n  x = x' \\<otimes> a [^] k\n  k < h\n\ngoal (1 subgoal):\n 1. unadjoin x = (x', k)", "by (intro unadjoin_unique') (auto simp: h_def)"], ["proof (state)\nthis:\n  unadjoin x = (x', k)\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "have [simp]: \"unadjoin y = (y', l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unadjoin y = (y', l)", "using y l"], ["proof (prove)\nusing this:\n  y' \\<in> H\n  y = y' \\<otimes> a [^] l\n  l < h\n\ngoal (1 subgoal):\n 1. unadjoin y = (y', l)", "by (intro unadjoin_unique') (auto simp: h_def)"], ["proof (state)\nthis:\n  unadjoin y = (y', l)\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "have char_mult': \"\\<chi> (x \\<otimes> y) = \\<chi> x * \\<chi> y\" if \"x \\<in> H\" \"y \\<in> H\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (x \\<otimes> y) = \\<chi> x * \\<chi> y", "using char_mult[of x y] that"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> carrier (G\\<lparr>carrier := H\\<rparr>);\n   y \\<in> carrier (G\\<lparr>carrier := H\\<rparr>)\\<rbrakk>\n  \\<Longrightarrow> \\<chi>\n                     (x \\<otimes>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub>\n                      y) =\n                    \\<chi> x * \\<chi> y\n  x \\<in> H\n  y \\<in> H\n\ngoal (1 subgoal):\n 1. \\<chi> (x \\<otimes> y) = \\<chi> x * \\<chi> y", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> H; ?y \\<in> H\\<rbrakk>\n  \\<Longrightarrow> \\<chi> (?x \\<otimes> ?y) = \\<chi> ?x * \\<chi> ?y\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "have char_power': \"\\<chi> (x [^] n) = \\<chi> x ^ n\" if \"x \\<in> H\" for x n"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (x [^] n) = \\<chi> x ^ n", "using that char_one"], ["proof (prove)\nusing this:\n  x \\<in> H\n  \\<chi> \\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> = 1\n\ngoal (1 subgoal):\n 1. \\<chi> (x [^] n) = \\<chi> x ^ n", "by (induction n) (simp_all add: char_mult' del: char_one)"], ["proof (state)\nthis:\n  ?x \\<in> H \\<Longrightarrow> \\<chi> (?x [^] ?n) = \\<chi> ?x ^ ?n\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "define r where \"r = (k + l) mod h\""], ["proof (state)\nthis:\n  r = (k + l) mod h\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "have r: \"r < subgroup_indicator G H a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r < subgroup_indicator G H a", "unfolding h_def r_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (k + l) mod subgroup_indicator G H a < subgroup_indicator G H a", "by (intro mod_less_divisor subgroup_indicator_pos is_subgroup) auto"], ["proof (state)\nthis:\n  r < subgroup_indicator G H a\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "define zz where \"zz = (a [^] h) [^] ((k + l) div h)\""], ["proof (state)\nthis:\n  zz = (a [^] h) [^] ((k + l) div h)\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "have [simp]: \"zz \\<in> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zz \\<in> H", "unfolding zz_def h_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a [^] subgroup_indicator G H a) [^]\n    ((k + l) div subgroup_indicator G H a)\n    \\<in> H", "by (rule nat_pow_closed) (auto intro: pow_subgroup_indicator is_subgroup)"], ["proof (state)\nthis:\n  zz \\<in> H\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "have \"a [^] k \\<otimes> a [^] l = zz \\<otimes> a [^] r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a [^] k \\<otimes> a [^] l = zz \\<otimes> a [^] r", "by (simp add: nat_pow_mult zz_def nat_pow_pow r_def)"], ["proof (state)\nthis:\n  a [^] k \\<otimes> a [^] l = zz \\<otimes> a [^] r\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "with x y r"], ["proof (chain)\npicking this:\n  x' \\<in> H\n  x = x' \\<otimes> a [^] k\n  y' \\<in> H\n  y = y' \\<otimes> a [^] l\n  r < subgroup_indicator G H a\n  a [^] k \\<otimes> a [^] l = zz \\<otimes> a [^] r", "have \"unadjoin (x \\<otimes> y) = (x' \\<otimes> y' \\<otimes> zz, r)\""], ["proof (prove)\nusing this:\n  x' \\<in> H\n  x = x' \\<otimes> a [^] k\n  y' \\<in> H\n  y = y' \\<otimes> a [^] l\n  r < subgroup_indicator G H a\n  a [^] k \\<otimes> a [^] l = zz \\<otimes> a [^] r\n\ngoal (1 subgoal):\n 1. unadjoin (x \\<otimes> y) = (x' \\<otimes> y' \\<otimes> zz, r)", "by (intro unadjoin_unique' m_closed) (auto simp: m_ac)"], ["proof (state)\nthis:\n  unadjoin (x \\<otimes> y) = (x' \\<otimes> y' \\<otimes> zz, r)\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "hence \"lift_character (\\<chi>, z) (x \\<otimes>\\<^bsub>?G''\\<^esub> y) = \\<chi> (x' \\<otimes> y' \\<otimes> zz) * z ^ r\""], ["proof (prove)\nusing this:\n  unadjoin (x \\<otimes> y) = (x' \\<otimes> y' \\<otimes> zz, r)\n\ngoal (1 subgoal):\n 1. lift_character (\\<chi>, z)\n     (x \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n      y) =\n    \\<chi> (x' \\<otimes> y' \\<otimes> zz) * z ^ r", "using 3"], ["proof (prove)\nusing this:\n  unadjoin (x \\<otimes> y) = (x' \\<otimes> y' \\<otimes> zz, r)\n  x \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n  y \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n\ngoal (1 subgoal):\n 1. lift_character (\\<chi>, z)\n     (x \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n      y) =\n    \\<chi> (x' \\<otimes> y' \\<otimes> zz) * z ^ r", "by (simp add: lift_character_def)"], ["proof (state)\nthis:\n  lift_character (\\<chi>, z)\n   (x \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub> y) =\n  \\<chi> (x' \\<otimes> y' \\<otimes> zz) * z ^ r\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "also"], ["proof (state)\nthis:\n  lift_character (\\<chi>, z)\n   (x \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub> y) =\n  \\<chi> (x' \\<otimes> y' \\<otimes> zz) * z ^ r\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "have \"\\<dots> = \\<chi> x' * \\<chi> y' * (\\<chi> zz * z ^ r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (x' \\<otimes> y' \\<otimes> zz) * z ^ r =\n    \\<chi> x' * \\<chi> y' * (\\<chi> zz * z ^ r)", "using x(1) y(1)"], ["proof (prove)\nusing this:\n  x' \\<in> H\n  y' \\<in> H\n\ngoal (1 subgoal):\n 1. \\<chi> (x' \\<otimes> y' \\<otimes> zz) * z ^ r =\n    \\<chi> x' * \\<chi> y' * (\\<chi> zz * z ^ r)", "by (simp add: char_mult' char_power')"], ["proof (state)\nthis:\n  \\<chi> (x' \\<otimes> y' \\<otimes> zz) * z ^ r =\n  \\<chi> x' * \\<chi> y' * (\\<chi> zz * z ^ r)\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "also"], ["proof (state)\nthis:\n  \\<chi> (x' \\<otimes> y' \\<otimes> zz) * z ^ r =\n  \\<chi> x' * \\<chi> y' * (\\<chi> zz * z ^ r)\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "have \"\\<chi> zz * z ^ r = z ^ (h * ((k + l) div h) + r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> zz * z ^ r = z ^ (h * ((k + l) div h) + r)", "unfolding h_def zz_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi>\n     ((a [^] subgroup_indicator G H a) [^]\n      ((k + l) div subgroup_indicator G H a)) *\n    z ^ r =\n    z ^\n    (subgroup_indicator G H a * ((k + l) div subgroup_indicator G H a) + r)", "using \\<open>subgroup H G\\<close> assms(3)[symmetric]"], ["proof (prove)\nusing this:\n  subgroup H G\n  \\<chi> (a [^] h) = z ^ h\n\ngoal (1 subgoal):\n 1. \\<chi>\n     ((a [^] subgroup_indicator G H a) [^]\n      ((k + l) div subgroup_indicator G H a)) *\n    z ^ r =\n    z ^\n    (subgroup_indicator G H a * ((k + l) div subgroup_indicator G H a) + r)", "by (subst char_power') (auto simp: pow_subgroup_indicator h_def power_mult power_add)"], ["proof (state)\nthis:\n  \\<chi> zz * z ^ r = z ^ (h * ((k + l) div h) + r)\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "also"], ["proof (state)\nthis:\n  \\<chi> zz * z ^ r = z ^ (h * ((k + l) div h) + r)\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "have \"h * ((k + l) div h) + r = k + l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h * ((k + l) div h) + r = k + l", "by (simp add: r_def)"], ["proof (state)\nthis:\n  h * ((k + l) div h) + r = k + l\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "also"], ["proof (state)\nthis:\n  h * ((k + l) div h) + r = k + l\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "have \"\\<chi> x' * \\<chi> y' * z ^ (k + l) = lift_character (\\<chi>,z) x * lift_character (\\<chi>,z) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> x' * \\<chi> y' * z ^ (k + l) =\n    lift_character (\\<chi>, z) x * lift_character (\\<chi>, z) y", "using 3"], ["proof (prove)\nusing this:\n  x \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n  y \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<chi> x' * \\<chi> y' * z ^ (k + l) =\n    lift_character (\\<chi>, z) x * lift_character (\\<chi>, z) y", "by (simp add: lift_character_def power_add)"], ["proof (state)\nthis:\n  \\<chi> x' * \\<chi> y' * z ^ (k + l) =\n  lift_character (\\<chi>, z) x * lift_character (\\<chi>, z) y\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>);\n        b \\<in> carrier (G\\<lparr>carrier := adjoin G H a\\<rparr>)\\<rbrakk>\n       \\<Longrightarrow> lift_character (\\<chi>, z)\n                          (aa \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n                           b) =\n                         lift_character (\\<chi>, z) aa *\n                         lift_character (\\<chi>, z) b", "finally"], ["proof (chain)\npicking this:\n  lift_character (\\<chi>, z)\n   (x \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub> y) =\n  lift_character (\\<chi>, z) x * lift_character (\\<chi>, z) y", "show ?case"], ["proof (prove)\nusing this:\n  lift_character (\\<chi>, z)\n   (x \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub> y) =\n  lift_character (\\<chi>, z) x * lift_character (\\<chi>, z) y\n\ngoal (1 subgoal):\n 1. lift_character (\\<chi>, z)\n     (x \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n      y) =\n    lift_character (\\<chi>, z) x * lift_character (\\<chi>, z) y", "."], ["proof (state)\nthis:\n  lift_character (\\<chi>, z)\n   (x \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub> y) =\n  lift_character (\\<chi>, z) x * lift_character (\\<chi>, z) y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  character (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n   (lift_character (\\<chi>, z))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lower_character_lift_character:\n  assumes \"\\<chi> \\<in> characters (G\\<lparr>carrier := H\\<rparr>)\"\n  shows   \"(\\<lambda>x. if x \\<in> H then lift_character (\\<chi>, z) x else 0) = \\<chi>\" (is ?th1)\n          \"lift_character (\\<chi>, z) a = z\" (is ?th2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> H then lift_character (\\<chi>, z) x else 0) =\n    \\<chi> &&&\n    lift_character (\\<chi>, z) a = z", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>x. if x \\<in> H then lift_character (\\<chi>, z) x else 0) =\n    \\<chi>\n 2. lift_character (\\<chi>, z) a = z", "from assms"], ["proof (chain)\npicking this:\n  \\<chi> \\<in> characters (G\\<lparr>carrier := H\\<rparr>)", "interpret \\<chi>: character \"G\\<lparr>carrier := H\\<rparr>\" \\<chi>"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> characters (G\\<lparr>carrier := H\\<rparr>)\n\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := H\\<rparr>) \\<chi>", "by (simp add: characters_def)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<lambda>x. if x \\<in> H then lift_character (\\<chi>, z) x else 0) =\n    \\<chi>\n 2. lift_character (\\<chi>, z) a = z", "have char_mult: \"\\<chi> (x \\<otimes> y) = \\<chi> x * \\<chi> y\" if \"x \\<in> H\" \"y \\<in> H\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (x \\<otimes> y) = \\<chi> x * \\<chi> y", "using \\<chi>.char_mult[of x y] that"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<in> carrier (G\\<lparr>carrier := H\\<rparr>);\n   y \\<in> carrier (G\\<lparr>carrier := H\\<rparr>)\\<rbrakk>\n  \\<Longrightarrow> \\<chi>\n                     (x \\<otimes>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub>\n                      y) =\n                    \\<chi> x * \\<chi> y\n  x \\<in> H\n  y \\<in> H\n\ngoal (1 subgoal):\n 1. \\<chi> (x \\<otimes> y) = \\<chi> x * \\<chi> y", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> H; ?y \\<in> H\\<rbrakk>\n  \\<Longrightarrow> \\<chi> (?x \\<otimes> ?y) = \\<chi> ?x * \\<chi> ?y\n\ngoal (2 subgoals):\n 1. (\\<lambda>x. if x \\<in> H then lift_character (\\<chi>, z) x else 0) =\n    \\<chi>\n 2. lift_character (\\<chi>, z) a = z", "have char_power: \"\\<chi> (x [^] n) = \\<chi> x ^ n\" if \"x \\<in> H\" for x n"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (x [^] n) = \\<chi> x ^ n", "using \\<chi>.char_one that"], ["proof (prove)\nusing this:\n  \\<chi> \\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> = 1\n  x \\<in> H\n\ngoal (1 subgoal):\n 1. \\<chi> (x [^] n) = \\<chi> x ^ n", "by (induction n) (simp_all add: char_mult)"], ["proof (state)\nthis:\n  ?x \\<in> H \\<Longrightarrow> \\<chi> (?x [^] ?n) = \\<chi> ?x ^ ?n\n\ngoal (2 subgoals):\n 1. (\\<lambda>x. if x \\<in> H then lift_character (\\<chi>, z) x else 0) =\n    \\<chi>\n 2. lift_character (\\<chi>, z) a = z", "show ?th1"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> H then lift_character (\\<chi>, z) x else 0) =\n    \\<chi>", "using \\<chi>.char_eq_0 mem_adjoin[OF is_subgroup _ a_in_carrier]"], ["proof (prove)\nusing this:\n  ?a \\<notin> carrier (G\\<lparr>carrier := H\\<rparr>) \\<Longrightarrow>\n  \\<chi> ?a = 0\n  ?x \\<in> H \\<Longrightarrow> ?x \\<in> adjoin G H a\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> H then lift_character (\\<chi>, z) x else 0) =\n    \\<chi>", "by (auto simp: lift_character_def)"], ["proof (state)\nthis:\n  (\\<lambda>x. if x \\<in> H then lift_character (\\<chi>, z) x else 0) =\n  \\<chi>\n\ngoal (1 subgoal):\n 1. lift_character (\\<chi>, z) a = z", "show ?th2"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift_character (\\<chi>, z) a = z", "using \\<chi>.char_one is_subgroup"], ["proof (prove)\nusing this:\n  \\<chi> \\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> = 1\n  subgroup H G\n\ngoal (1 subgoal):\n 1. lift_character (\\<chi>, z) a = z", "by (auto simp: lift_character_def adjoined_in_adjoin)"], ["proof (state)\nthis:\n  lift_character (\\<chi>, z) a = z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lift_character_lower_character:\n  assumes \"\\<chi> \\<in> characters (G\\<lparr>carrier := adjoin G H a\\<rparr>)\"\n  shows   \"lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a) = \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift_character\n     (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a) =\n    \\<chi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lift_character\n     (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a) =\n    \\<chi>", "let ?G' = \"G\\<lparr>carrier := adjoin G H a\\<rparr>\""], ["proof (state)\ngoal (1 subgoal):\n 1. lift_character\n     (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a) =\n    \\<chi>", "from assms"], ["proof (chain)\npicking this:\n  \\<chi> \\<in> characters (G\\<lparr>carrier := adjoin G H a\\<rparr>)", "interpret \\<chi>: character ?G' \\<chi>"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> characters (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<chi>", "by (simp add: characters_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. lift_character\n     (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a) =\n    \\<chi>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift_character\n     (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a) =\n    \\<chi>", "proof (rule ext, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       lift_character\n        (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a) x =\n       \\<chi> x", "case (1 x)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>x.\n       lift_character\n        (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a) x =\n       \\<chi> x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x", "proof (cases \"x \\<in> adjoin G H a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> adjoin G H a \\<Longrightarrow>\n    lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x\n 2. x \\<notin> adjoin G H a \\<Longrightarrow>\n    lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x", "case True"], ["proof (state)\nthis:\n  x \\<in> adjoin G H a\n\ngoal (2 subgoals):\n 1. x \\<in> adjoin G H a \\<Longrightarrow>\n    lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x\n 2. x \\<notin> adjoin G H a \\<Longrightarrow>\n    lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x", "note * = unadjoin_correct[OF this]"], ["proof (state)\nthis:\n  fst (unadjoin x) \\<in> H\n  snd (unadjoin x) < subgroup_indicator G H a\n  fst (unadjoin x) \\<otimes> a [^] snd (unadjoin x) = x\n\ngoal (2 subgoals):\n 1. x \\<in> adjoin G H a \\<Longrightarrow>\n    lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x\n 2. x \\<notin> adjoin G H a \\<Longrightarrow>\n    lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x", "interpret H': subgroup \"adjoin G H a\" G"], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup (adjoin G H a) G", "by (intro adjoin_subgroup is_subgroup a_in_carrier)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> adjoin G H a \\<Longrightarrow>\n    lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x\n 2. x \\<notin> adjoin G H a \\<Longrightarrow>\n    lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x", "have \"x = fst (unadjoin x) \\<otimes>\\<^bsub>?G'\\<^esub> a [^]\\<^bsub>?G'\\<^esub> snd (unadjoin x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x =\n    fst (unadjoin\n          x) \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n    a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n    snd (unadjoin x)", "using *(3)"], ["proof (prove)\nusing this:\n  fst (unadjoin x) \\<otimes> a [^] snd (unadjoin x) = x\n\ngoal (1 subgoal):\n 1. x =\n    fst (unadjoin\n          x) \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n    a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n    snd (unadjoin x)", "by (simp add: nat_pow_def)"], ["proof (state)\nthis:\n  x =\n  fst (unadjoin\n        x) \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n  a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n  snd (unadjoin x)\n\ngoal (2 subgoals):\n 1. x \\<in> adjoin G H a \\<Longrightarrow>\n    lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x\n 2. x \\<notin> adjoin G H a \\<Longrightarrow>\n    lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x", "also"], ["proof (state)\nthis:\n  x =\n  fst (unadjoin\n        x) \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n  a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n  snd (unadjoin x)\n\ngoal (2 subgoals):\n 1. x \\<in> adjoin G H a \\<Longrightarrow>\n    lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x\n 2. x \\<notin> adjoin G H a \\<Longrightarrow>\n    lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x", "have \"\\<chi> \\<dots> = \\<chi> (fst (unadjoin x)) * \\<chi> (a [^]\\<^bsub>?G'\\<^esub> snd (unadjoin x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi>\n     (fst (unadjoin\n            x) \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n      a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n      snd (unadjoin x)) =\n    \\<chi> (fst (unadjoin x)) *\n    \\<chi>\n     (a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n      snd (unadjoin x))", "using * is_subgroup"], ["proof (prove)\nusing this:\n  fst (unadjoin x) \\<in> H\n  snd (unadjoin x) < subgroup_indicator G H a\n  fst (unadjoin x) \\<otimes> a [^] snd (unadjoin x) = x\n  subgroup H G\n\ngoal (1 subgoal):\n 1. \\<chi>\n     (fst (unadjoin\n            x) \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n      a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n      snd (unadjoin x)) =\n    \\<chi> (fst (unadjoin x)) *\n    \\<chi>\n     (a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n      snd (unadjoin x))", "by (intro \\<chi>.char_mult) \n                               (auto simp: nat_pow_modify_carrier mem_adjoin adjoined_in_adjoin)"], ["proof (state)\nthis:\n  \\<chi>\n   (fst (unadjoin\n          x) \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n    a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n    snd (unadjoin x)) =\n  \\<chi> (fst (unadjoin x)) *\n  \\<chi>\n   (a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n    snd (unadjoin x))\n\ngoal (2 subgoals):\n 1. x \\<in> adjoin G H a \\<Longrightarrow>\n    lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x\n 2. x \\<notin> adjoin G H a \\<Longrightarrow>\n    lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x", "also"], ["proof (state)\nthis:\n  \\<chi>\n   (fst (unadjoin\n          x) \\<otimes>\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n    a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n    snd (unadjoin x)) =\n  \\<chi> (fst (unadjoin x)) *\n  \\<chi>\n   (a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n    snd (unadjoin x))\n\ngoal (2 subgoals):\n 1. x \\<in> adjoin G H a \\<Longrightarrow>\n    lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x\n 2. x \\<notin> adjoin G H a \\<Longrightarrow>\n    lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x", "have \"\\<chi> (a [^]\\<^bsub>?G'\\<^esub> snd (unadjoin x)) = \\<chi> a ^ snd (unadjoin x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi>\n     (a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n      snd (unadjoin x)) =\n    \\<chi> a ^ snd (unadjoin x)", "using is_subgroup"], ["proof (prove)\nusing this:\n  subgroup H G\n\ngoal (1 subgoal):\n 1. \\<chi>\n     (a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n      snd (unadjoin x)) =\n    \\<chi> a ^ snd (unadjoin x)", "by (intro \\<chi>.char_power) (auto simp: adjoined_in_adjoin)"], ["proof (state)\nthis:\n  \\<chi>\n   (a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub>\n    snd (unadjoin x)) =\n  \\<chi> a ^ snd (unadjoin x)\n\ngoal (2 subgoals):\n 1. x \\<in> adjoin G H a \\<Longrightarrow>\n    lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x\n 2. x \\<notin> adjoin G H a \\<Longrightarrow>\n    lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x", "finally"], ["proof (chain)\npicking this:\n  \\<chi> x = \\<chi> (fst (unadjoin x)) * \\<chi> a ^ snd (unadjoin x)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<chi> x = \\<chi> (fst (unadjoin x)) * \\<chi> a ^ snd (unadjoin x)\n\ngoal (1 subgoal):\n 1. lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x", "using True *"], ["proof (prove)\nusing this:\n  \\<chi> x = \\<chi> (fst (unadjoin x)) * \\<chi> a ^ snd (unadjoin x)\n  x \\<in> adjoin G H a\n  fst (unadjoin x) \\<in> H\n  snd (unadjoin x) < subgroup_indicator G H a\n  fst (unadjoin x) \\<otimes> a [^] snd (unadjoin x) = x\n\ngoal (1 subgoal):\n 1. lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x", "by (auto simp: lift_character_def)"], ["proof (state)\nthis:\n  lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n   x =\n  \\<chi> x\n\ngoal (1 subgoal):\n 1. x \\<notin> adjoin G H a \\<Longrightarrow>\n    lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n     x =\n    \\<chi> x", "qed (auto simp: lift_character_def \\<chi>.char_eq_0)"], ["proof (state)\nthis:\n  lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\n   x =\n  \\<chi> x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a) =\n  \\<chi>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lift_character_unchanged [simp]:\n  assumes \"x \\<in> H\"\n  shows   \"lift_character \\<chi>z x = fst \\<chi>z x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift_character \\<chi>z x = fst \\<chi>z x", "using assms mem_adjoin[of H x a] is_subgroup"], ["proof (prove)\nusing this:\n  x \\<in> H\n  \\<lbrakk>subgroup H G; x \\<in> H; a \\<in> carrier G\\<rbrakk>\n  \\<Longrightarrow> x \\<in> adjoin G H a\n  subgroup H G\n\ngoal (1 subgoal):\n 1. lift_character \\<chi>z x = fst \\<chi>z x", "by (cases \\<chi>z) (auto simp: lift_character_def)"], ["", "lemma lift_character_adjoined [simp]:\n \"character (G\\<lparr>carrier := H\\<rparr>) (fst \\<chi>z) \\<Longrightarrow> lift_character \\<chi>z a = snd \\<chi>z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := H\\<rparr>)\n     (fst \\<chi>z) \\<Longrightarrow>\n    lift_character \\<chi>z a = snd \\<chi>z", "using is_subgroup character.char_one[of \"G\\<lparr>carrier := H\\<rparr>\"]"], ["proof (prove)\nusing this:\n  subgroup H G\n  character (G\\<lparr>carrier := H\\<rparr>) ?\\<chi> \\<Longrightarrow>\n  ?\\<chi> \\<one>\\<^bsub>G\\<lparr>carrier := H\\<rparr>\\<^esub> = 1\n\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := H\\<rparr>)\n     (fst \\<chi>z) \\<Longrightarrow>\n    lift_character \\<chi>z a = snd \\<chi>z", "by (cases \\<chi>z) (auto simp: lift_character_def adjoined_in_adjoin character.char_one)"], ["", "lemma bij_betw_characters_adjoin:\n  defines \"h \\<equiv> subgroup_indicator G H a\"\n  shows \"bij_betw lift_character\n                  (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>). {z. z ^ h = \\<chi> (a [^] h)})\n                  (characters (G\\<lparr>carrier := adjoin G H a\\<rparr>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw lift_character\n     (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n         {z. z ^ h = \\<chi> (a [^] h)})\n     (characters (G\\<lparr>carrier := adjoin G H a\\<rparr>))", "proof (rule bij_betwI[where ?g = \"\\<lambda>\\<chi>. (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a)\"], goal_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. lift_character\n    \\<in> (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n              {z. z ^ h = \\<chi> (a [^] h)}) \\<rightarrow>\n          characters (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n 2. (\\<lambda>\\<chi>.\n        (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a))\n    \\<in> characters\n           (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<rightarrow>\n          (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n              {z. z ^ h = \\<chi> (a [^] h)})\n 3. \\<And>x.\n       x \\<in> (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n                   {z. z ^ h = \\<chi> (a [^] h)}) \\<Longrightarrow>\n       (\\<lambda>xa. if xa \\<in> H then lift_character x xa else 0,\n        lift_character x a) =\n       x\n 4. \\<And>y.\n       y \\<in> characters\n                (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<Longrightarrow>\n       lift_character (\\<lambda>x. if x \\<in> H then y x else 0, y a) = y", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. lift_character\n    \\<in> (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n              {z. z ^ h = \\<chi> (a [^] h)}) \\<rightarrow>\n          characters (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n 2. (\\<lambda>\\<chi>.\n        (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a))\n    \\<in> characters\n           (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<rightarrow>\n          (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n              {z. z ^ h = \\<chi> (a [^] h)})\n 3. \\<And>x.\n       x \\<in> (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n                   {z. z ^ h = \\<chi> (a [^] h)}) \\<Longrightarrow>\n       (\\<lambda>xa. if xa \\<in> H then lift_character x xa else 0,\n        lift_character x a) =\n       x\n 4. \\<And>y.\n       y \\<in> characters\n                (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<Longrightarrow>\n       lift_character (\\<lambda>x. if x \\<in> H then y x else 0, y a) = y", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift_character\n    \\<in> (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n              {z. z ^ h = \\<chi> (a [^] h)}) \\<rightarrow>\n          characters (G\\<lparr>carrier := adjoin G H a\\<rparr>)", "by (auto simp: characters_def h_def intro!: lift_character)"], ["proof (state)\nthis:\n  lift_character\n  \\<in> (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n            {z. z ^ h = \\<chi> (a [^] h)}) \\<rightarrow>\n        characters (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n\ngoal (3 subgoals):\n 1. (\\<lambda>\\<chi>.\n        (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a))\n    \\<in> characters\n           (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<rightarrow>\n          (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n              {z. z ^ h = \\<chi> (a [^] h)})\n 2. \\<And>x.\n       x \\<in> (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n                   {z. z ^ h = \\<chi> (a [^] h)}) \\<Longrightarrow>\n       (\\<lambda>xa. if xa \\<in> H then lift_character x xa else 0,\n        lift_character x a) =\n       x\n 3. \\<And>y.\n       y \\<in> characters\n                (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<Longrightarrow>\n       lift_character (\\<lambda>x. if x \\<in> H then y x else 0, y a) = y", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<lambda>\\<chi>.\n        (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a))\n    \\<in> characters\n           (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<rightarrow>\n          (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n              {z. z ^ h = \\<chi> (a [^] h)})\n 2. \\<And>x.\n       x \\<in> (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n                   {z. z ^ h = \\<chi> (a [^] h)}) \\<Longrightarrow>\n       (\\<lambda>xa. if xa \\<in> H then lift_character x xa else 0,\n        lift_character x a) =\n       x\n 3. \\<And>y.\n       y \\<in> characters\n                (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<Longrightarrow>\n       lift_character (\\<lambda>x. if x \\<in> H then y x else 0, y a) = y", "case 2"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. (\\<lambda>\\<chi>.\n        (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a))\n    \\<in> characters\n           (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<rightarrow>\n          (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n              {z. z ^ h = \\<chi> (a [^] h)})\n 2. \\<And>x.\n       x \\<in> (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n                   {z. z ^ h = \\<chi> (a [^] h)}) \\<Longrightarrow>\n       (\\<lambda>xa. if xa \\<in> H then lift_character x xa else 0,\n        lift_character x a) =\n       x\n 3. \\<And>y.\n       y \\<in> characters\n                (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<Longrightarrow>\n       lift_character (\\<lambda>x. if x \\<in> H then y x else 0, y a) = y", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<chi>.\n        (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a))\n    \\<in> characters\n           (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<rightarrow>\n          (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n              {z. z ^ h = \\<chi> (a [^] h)})", "unfolding characters_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<chi>.\n        (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a))\n    \\<in> Collect\n           (character\n             (G\\<lparr>carrier := adjoin G H a\\<rparr>)) \\<rightarrow>\n          (SIGMA \\<chi>:Collect (character (G\\<lparr>carrier := H\\<rparr>)).\n              {z. z ^ h = \\<chi> (a [^] h)})", "proof (safe, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       character (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n        x \\<Longrightarrow>\n       character (G\\<lparr>carrier := H\\<rparr>)\n        (\\<lambda>xa. if xa \\<in> H then x xa else 0)\n 2. \\<And>x.\n       character (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n        x \\<Longrightarrow>\n       x a ^ h = (if a [^] h \\<in> H then x (a [^] h) else 0)", "case (1 \\<chi>)"], ["proof (state)\nthis:\n  character (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<chi>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       character (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n        x \\<Longrightarrow>\n       character (G\\<lparr>carrier := H\\<rparr>)\n        (\\<lambda>xa. if xa \\<in> H then x xa else 0)\n 2. \\<And>x.\n       character (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n        x \\<Longrightarrow>\n       x a ^ h = (if a [^] h \\<in> H then x (a [^] h) else 0)", "thus ?case"], ["proof (prove)\nusing this:\n  character (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<chi>\n\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := H\\<rparr>)\n     (\\<lambda>x. if x \\<in> H then \\<chi> x else 0)", "unfolding h_def"], ["proof (prove)\nusing this:\n  character (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<chi>\n\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := H\\<rparr>)\n     (\\<lambda>x. if x \\<in> H then \\<chi> x else 0)", "by (rule lower_character)"], ["proof (state)\nthis:\n  character (G\\<lparr>carrier := H\\<rparr>)\n   (\\<lambda>x. if x \\<in> H then \\<chi> x else 0)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       character (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n        x \\<Longrightarrow>\n       x a ^ h = (if a [^] h \\<in> H then x (a [^] h) else 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       character (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n        x \\<Longrightarrow>\n       x a ^ h = (if a [^] h \\<in> H then x (a [^] h) else 0)", "case (2 \\<chi>)"], ["proof (state)\nthis:\n  character (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<chi>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       character (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n        x \\<Longrightarrow>\n       x a ^ h = (if a [^] h \\<in> H then x (a [^] h) else 0)", "interpret \\<chi>: character \"G\\<lparr>carrier := adjoin G H a\\<rparr>\" \\<chi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<chi>", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       character (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n        x \\<Longrightarrow>\n       x a ^ h = (if a [^] h \\<in> H then x (a [^] h) else 0)", "have [simp]: \"\\<chi> (a [^] n) = \\<chi> a ^ n\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (a [^] n) = \\<chi> a ^ n", "using \\<chi>.char_power[of a n] is_subgroup"], ["proof (prove)\nusing this:\n  a \\<in> carrier\n           (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<Longrightarrow>\n  \\<chi> (a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H a\\<rparr>\\<^esub> n) =\n  \\<chi> a ^ n\n  subgroup H G\n\ngoal (1 subgoal):\n 1. \\<chi> (a [^] n) = \\<chi> a ^ n", "by (auto simp: adjoined_in_adjoin nat_pow_def simp del: \\<chi>.char_power)"], ["proof (state)\nthis:\n  \\<chi> (a [^] ?n) = \\<chi> a ^ ?n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       character (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n        x \\<Longrightarrow>\n       x a ^ h = (if a [^] h \\<in> H then x (a [^] h) else 0)", "from is_subgroup a_in_carrier pow_subgroup_indicator"], ["proof (chain)\npicking this:\n  subgroup H G\n  a \\<in> carrier G\n  \\<lbrakk>subgroup ?H G; ?a \\<in> carrier G\\<rbrakk>\n  \\<Longrightarrow> ?a [^] subgroup_indicator G ?H ?a \\<in> ?H", "show ?case"], ["proof (prove)\nusing this:\n  subgroup H G\n  a \\<in> carrier G\n  \\<lbrakk>subgroup ?H G; ?a \\<in> carrier G\\<rbrakk>\n  \\<Longrightarrow> ?a [^] subgroup_indicator G ?H ?a \\<in> ?H\n\ngoal (1 subgoal):\n 1. \\<chi> a ^ h = (if a [^] h \\<in> H then \\<chi> (a [^] h) else 0)", "by (auto simp: h_def intro!: subgroup_indicator_pos \\<chi>.char_eq_0)"], ["proof (state)\nthis:\n  \\<chi> a ^ h = (if a [^] h \\<in> H then \\<chi> (a [^] h) else 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>\\<chi>.\n      (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a))\n  \\<in> characters (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<rightarrow>\n        (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n            {z. z ^ h = \\<chi> (a [^] h)})\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n                   {z. z ^ h = \\<chi> (a [^] h)}) \\<Longrightarrow>\n       (\\<lambda>xa. if xa \\<in> H then lift_character x xa else 0,\n        lift_character x a) =\n       x\n 2. \\<And>y.\n       y \\<in> characters\n                (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<Longrightarrow>\n       lift_character (\\<lambda>x. if x \\<in> H then y x else 0, y a) = y", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n                   {z. z ^ h = \\<chi> (a [^] h)}) \\<Longrightarrow>\n       (\\<lambda>xa. if xa \\<in> H then lift_character x xa else 0,\n        lift_character x a) =\n       x\n 2. \\<And>y.\n       y \\<in> characters\n                (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<Longrightarrow>\n       lift_character (\\<lambda>x. if x \\<in> H then y x else 0, y a) = y", "case (3 w)"], ["proof (state)\nthis:\n  w \\<in> (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n              {z. z ^ h = \\<chi> (a [^] h)})\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n                   {z. z ^ h = \\<chi> (a [^] h)}) \\<Longrightarrow>\n       (\\<lambda>xa. if xa \\<in> H then lift_character x xa else 0,\n        lift_character x a) =\n       x\n 2. \\<And>y.\n       y \\<in> characters\n                (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<Longrightarrow>\n       lift_character (\\<lambda>x. if x \\<in> H then y x else 0, y a) = y", "thus ?case"], ["proof (prove)\nusing this:\n  w \\<in> (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n              {z. z ^ h = \\<chi> (a [^] h)})\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> H then lift_character w x else 0,\n     lift_character w a) =\n    w", "using lower_character_lift_character[of \"fst w\" \"snd w\"]"], ["proof (prove)\nusing this:\n  w \\<in> (SIGMA \\<chi>:characters (G\\<lparr>carrier := H\\<rparr>).\n              {z. z ^ h = \\<chi> (a [^] h)})\n  fst w \\<in> characters (G\\<lparr>carrier := H\\<rparr>) \\<Longrightarrow>\n  (\\<lambda>x. if x \\<in> H then lift_character (fst w, snd w) x else 0) =\n  fst w\n  fst w \\<in> characters (G\\<lparr>carrier := H\\<rparr>) \\<Longrightarrow>\n  lift_character (fst w, snd w) a = snd w\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> H then lift_character w x else 0,\n     lift_character w a) =\n    w", "by (auto cong: if_cong)"], ["proof (state)\nthis:\n  (\\<lambda>x. if x \\<in> H then lift_character w x else 0,\n   lift_character w a) =\n  w\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> characters\n                (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<Longrightarrow>\n       lift_character (\\<lambda>x. if x \\<in> H then y x else 0, y a) = y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> characters\n                (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<Longrightarrow>\n       lift_character (\\<lambda>x. if x \\<in> H then y x else 0, y a) = y", "case (4 \\<chi>)"], ["proof (state)\nthis:\n  \\<chi> \\<in> characters (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> characters\n                (G\\<lparr>carrier := adjoin G H a\\<rparr>) \\<Longrightarrow>\n       lift_character (\\<lambda>x. if x \\<in> H then y x else 0, y a) = y", "thus ?case"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> characters (G\\<lparr>carrier := adjoin G H a\\<rparr>)\n\ngoal (1 subgoal):\n 1. lift_character\n     (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a) =\n    \\<chi>", "by (rule lift_character_lower_character)"], ["proof (state)\nthis:\n  lift_character (\\<lambda>x. if x \\<in> H then \\<chi> x else 0, \\<chi> a) =\n  \\<chi>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Non-trivial facts about characters\\<close>"], ["", "context finite_comm_group\nbegin"], ["", "text \\<open>\n  The following theorem is a very central one. It shows that any character on a subgroup \\<open>H\\<close> can\n  be extended to a character on the full group in exactly $[G : H]$ ways.\n\n  The proof is by induction; we start with \\<open>H\\<close> and then successively adjoin elements until we\n  have reached \\<open>G\\<close>. As we showed before, when we lift a character from \\<open>H\\<close> to $H_x$, we have\n  \\<open>n\\<close> choices to do so, where \\<open>n\\<close> is the indicator of \\<open>x\\<close> in \\<open>H\\<close>. Since $|H_x| = n |H|$, the\n  induction step is valid.\n\\<close>"], ["", "theorem card_character_extensions:\n  assumes \"subgroup H G\" \"character (G\\<lparr>carrier := H\\<rparr>) \\<chi>\"\n  shows   \"card {\\<chi>'\\<in>characters G. \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} * card H = order G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {\\<chi>' \\<in> characters G. \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n    card H =\n    order G", "using assms"], ["proof (prove)\nusing this:\n  subgroup H G\n  character (G\\<lparr>carrier := H\\<rparr>) \\<chi>\n\ngoal (1 subgoal):\n 1. card\n     {\\<chi>' \\<in> characters G. \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n    card H =\n    order G", "proof (induction rule: subgroup_adjoin_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. character (G\\<lparr>carrier := H, carrier := H\\<rparr>)\n     \\<chi> \\<Longrightarrow>\n    card\n     {\\<chi>' \\<in> characters (G\\<lparr>carrier := H\\<rparr>).\n      \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n    card H =\n    order (G\\<lparr>carrier := H\\<rparr>)\n 2. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "case (base )"], ["proof (state)\nthis:\n  character (G\\<lparr>carrier := H, carrier := H\\<rparr>) \\<chi>\n\ngoal (2 subgoals):\n 1. character (G\\<lparr>carrier := H, carrier := H\\<rparr>)\n     \\<chi> \\<Longrightarrow>\n    card\n     {\\<chi>' \\<in> characters (G\\<lparr>carrier := H\\<rparr>).\n      \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n    card H =\n    order (G\\<lparr>carrier := H\\<rparr>)\n 2. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "have \"{\\<chi>' \\<in> characters (G\\<lparr>carrier := H\\<rparr>). \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} = {\\<chi>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<chi>' \\<in> characters (G\\<lparr>carrier := H\\<rparr>).\n     \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} =\n    {\\<chi>}", "using base"], ["proof (prove)\nusing this:\n  character (G\\<lparr>carrier := H, carrier := H\\<rparr>) \\<chi>\n\ngoal (1 subgoal):\n 1. {\\<chi>' \\<in> characters (G\\<lparr>carrier := H\\<rparr>).\n     \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} =\n    {\\<chi>}", "by (auto simp: fun_eq_iff characters_def intro: character_ext)"], ["proof (state)\nthis:\n  {\\<chi>' \\<in> characters (G\\<lparr>carrier := H\\<rparr>).\n   \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} =\n  {\\<chi>}\n\ngoal (2 subgoals):\n 1. character (G\\<lparr>carrier := H, carrier := H\\<rparr>)\n     \\<chi> \\<Longrightarrow>\n    card\n     {\\<chi>' \\<in> characters (G\\<lparr>carrier := H\\<rparr>).\n      \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n    card H =\n    order (G\\<lparr>carrier := H\\<rparr>)\n 2. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "thus ?case"], ["proof (prove)\nusing this:\n  {\\<chi>' \\<in> characters (G\\<lparr>carrier := H\\<rparr>).\n   \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} =\n  {\\<chi>}\n\ngoal (1 subgoal):\n 1. card\n     {\\<chi>'.\n      \\<chi>' \\<in> characters (G\\<lparr>carrier := H\\<rparr>) \\<and>\n      (\\<forall>x\\<in>H. \\<chi>' x = \\<chi> x)} *\n    card H =\n    order (G\\<lparr>carrier := H\\<rparr>)", "using base"], ["proof (prove)\nusing this:\n  {\\<chi>' \\<in> characters (G\\<lparr>carrier := H\\<rparr>).\n   \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} =\n  {\\<chi>}\n  character (G\\<lparr>carrier := H, carrier := H\\<rparr>) \\<chi>\n\ngoal (1 subgoal):\n 1. card\n     {\\<chi>'.\n      \\<chi>' \\<in> characters (G\\<lparr>carrier := H\\<rparr>) \\<and>\n      (\\<forall>x\\<in>H. \\<chi>' x = \\<chi> x)} *\n    card H =\n    order (G\\<lparr>carrier := H\\<rparr>)", "by (simp add: order_def)"], ["proof (state)\nthis:\n  card\n   {\\<chi>'.\n    \\<chi>' \\<in> characters (G\\<lparr>carrier := H\\<rparr>) \\<and>\n    (\\<forall>x\\<in>H. \\<chi>' x = \\<chi> x)} *\n  card H =\n  order (G\\<lparr>carrier := H\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "case (adjoin H' a )"], ["proof (state)\nthis:\n  subgroup H' G\n  H \\<subseteq> H'\n  a \\<in> carrier G - H'\n  character (G\\<lparr>carrier := H', carrier := H\\<rparr>)\n   \\<chi> \\<Longrightarrow>\n  card\n   {\\<chi>'.\n    \\<chi>' \\<in> characters (G\\<lparr>carrier := H'\\<rparr>) \\<and>\n    (\\<forall>x\\<in>H. \\<chi>' x = \\<chi> x)} *\n  card H =\n  order (G\\<lparr>carrier := H'\\<rparr>)\n  character (G\\<lparr>carrier := adjoin G H' a, carrier := H\\<rparr>) \\<chi>\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "interpret H': subgroup H' G"], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup H' G", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "interpret H': finite_comm_group \"G\\<lparr>carrier := H'\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_comm_group (G\\<lparr>carrier := H'\\<rparr>)", "by (rule subgroup_imp_finite_comm_group) fact"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "interpret H': finite_comm_group_adjoin G H' a"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_comm_group_adjoin G H' a", "using adjoin.hyps"], ["proof (prove)\nusing this:\n  subgroup H' G\n  H \\<subseteq> H'\n  a \\<in> carrier G - H'\n\ngoal (1 subgoal):\n 1. finite_comm_group_adjoin G H' a", "by unfold_locales auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "define h where \"h = subgroup_indicator G H' a\""], ["proof (state)\nthis:\n  h = subgroup_indicator G H' a\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "from adjoin"], ["proof (chain)\npicking this:\n  subgroup H' G\n  H \\<subseteq> H'\n  a \\<in> carrier G - H'\n  character (G\\<lparr>carrier := H', carrier := H\\<rparr>)\n   \\<chi> \\<Longrightarrow>\n  card\n   {\\<chi>'.\n    \\<chi>' \\<in> characters (G\\<lparr>carrier := H'\\<rparr>) \\<and>\n    (\\<forall>x\\<in>H. \\<chi>' x = \\<chi> x)} *\n  card H =\n  order (G\\<lparr>carrier := H'\\<rparr>)\n  character (G\\<lparr>carrier := adjoin G H' a, carrier := H\\<rparr>) \\<chi>", "have [simp]: \"h > 0\""], ["proof (prove)\nusing this:\n  subgroup H' G\n  H \\<subseteq> H'\n  a \\<in> carrier G - H'\n  character (G\\<lparr>carrier := H', carrier := H\\<rparr>)\n   \\<chi> \\<Longrightarrow>\n  card\n   {\\<chi>'.\n    \\<chi>' \\<in> characters (G\\<lparr>carrier := H'\\<rparr>) \\<and>\n    (\\<forall>x\\<in>H. \\<chi>' x = \\<chi> x)} *\n  card H =\n  order (G\\<lparr>carrier := H'\\<rparr>)\n  character (G\\<lparr>carrier := adjoin G H' a, carrier := H\\<rparr>) \\<chi>\n\ngoal (1 subgoal):\n 1. 0 < h", "unfolding h_def"], ["proof (prove)\nusing this:\n  subgroup H' G\n  H \\<subseteq> H'\n  a \\<in> carrier G - H'\n  character (G\\<lparr>carrier := H', carrier := H\\<rparr>)\n   \\<chi> \\<Longrightarrow>\n  card\n   {\\<chi>'.\n    \\<chi>' \\<in> characters (G\\<lparr>carrier := H'\\<rparr>) \\<and>\n    (\\<forall>x\\<in>H. \\<chi>' x = \\<chi> x)} *\n  card H =\n  order (G\\<lparr>carrier := H'\\<rparr>)\n  character (G\\<lparr>carrier := adjoin G H' a, carrier := H\\<rparr>) \\<chi>\n\ngoal (1 subgoal):\n 1. 0 < subgroup_indicator G H' a", "by (intro subgroup_indicator_pos) auto"], ["proof (state)\nthis:\n  0 < h\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "define c where \"c = a [^] h\""], ["proof (state)\nthis:\n  c = a [^] h\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "from adjoin"], ["proof (chain)\npicking this:\n  subgroup H' G\n  H \\<subseteq> H'\n  a \\<in> carrier G - H'\n  character (G\\<lparr>carrier := H', carrier := H\\<rparr>)\n   \\<chi> \\<Longrightarrow>\n  card\n   {\\<chi>'.\n    \\<chi>' \\<in> characters (G\\<lparr>carrier := H'\\<rparr>) \\<and>\n    (\\<forall>x\\<in>H. \\<chi>' x = \\<chi> x)} *\n  card H =\n  order (G\\<lparr>carrier := H'\\<rparr>)\n  character (G\\<lparr>carrier := adjoin G H' a, carrier := H\\<rparr>) \\<chi>", "have [simp]: \"c \\<in> H'\""], ["proof (prove)\nusing this:\n  subgroup H' G\n  H \\<subseteq> H'\n  a \\<in> carrier G - H'\n  character (G\\<lparr>carrier := H', carrier := H\\<rparr>)\n   \\<chi> \\<Longrightarrow>\n  card\n   {\\<chi>'.\n    \\<chi>' \\<in> characters (G\\<lparr>carrier := H'\\<rparr>) \\<and>\n    (\\<forall>x\\<in>H. \\<chi>' x = \\<chi> x)} *\n  card H =\n  order (G\\<lparr>carrier := H'\\<rparr>)\n  character (G\\<lparr>carrier := adjoin G H' a, carrier := H\\<rparr>) \\<chi>\n\ngoal (1 subgoal):\n 1. c \\<in> H'", "by (auto simp: c_def h_def pow_subgroup_indicator)"], ["proof (state)\nthis:\n  c \\<in> H'\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "define C where \"C = (\\<lambda>H'. {\\<chi>'. \\<chi>' \\<in> characters (G\\<lparr>carrier := H'\\<rparr>) \\<and> (\\<forall>x\\<in>H. \\<chi>' x = \\<chi> x)})\""], ["proof (state)\nthis:\n  C =\n  (\\<lambda>H'.\n      {\\<chi>' \\<in> characters (G\\<lparr>carrier := H'\\<rparr>).\n       \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x})\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "define I where \"I = (\\<lambda>\\<chi>. {z::complex. z ^ h = \\<chi> c})\""], ["proof (state)\nthis:\n  I = (\\<lambda>\\<chi>. {z. z ^ h = \\<chi> c})\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "have [simp]: \"finite (C H')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (C H')", "by (rule finite_subset[OF _ H'.finite_characters]) (auto simp: C_def)"], ["proof (state)\nthis:\n  finite (C H')\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "(* TODO: extract lemma *)"], ["proof (state)\nthis:\n  finite (C H')\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "have \"bij_betw H'.lift_character (SIGMA \\<chi>:C H'. I \\<chi>) (C (adjoin G H' a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw H'.lift_character (Sigma (C H') I) (C (adjoin G H' a))", "proof (rule bij_betwI)"], ["proof (state)\ngoal (4 subgoals):\n 1. H'.lift_character \\<in> Sigma (C H') I \\<rightarrow> C (adjoin G H' a)\n 2. ?g \\<in> C (adjoin G H' a) \\<rightarrow> Sigma (C H') I\n 3. \\<And>x.\n       x \\<in> Sigma (C H') I \\<Longrightarrow> ?g (H'.lift_character x) = x\n 4. \\<And>y.\n       y \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       H'.lift_character (?g y) = y", "show \"H'.lift_character \\<in> Sigma (C H') I \\<rightarrow> C (adjoin G H' a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H'.lift_character \\<in> Sigma (C H') I \\<rightarrow> C (adjoin G H' a)", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> C H'; b \\<in> I aa\\<rbrakk>\n       \\<Longrightarrow> H'.lift_character (aa, b) \\<in> C (adjoin G H' a)", "fix \\<chi> z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> C H'; b \\<in> I aa\\<rbrakk>\n       \\<Longrightarrow> H'.lift_character (aa, b) \\<in> C (adjoin G H' a)", "assume *: \"\\<chi> \\<in> C H'\" \"z \\<in> I \\<chi>\""], ["proof (state)\nthis:\n  \\<chi> \\<in> C H'\n  z \\<in> I \\<chi>\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> C H'; b \\<in> I aa\\<rbrakk>\n       \\<Longrightarrow> H'.lift_character (aa, b) \\<in> C (adjoin G H' a)", "have \"\\<forall>x\\<in>H. H'.lift_character (\\<chi>, z) x = \\<chi> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>H. H'.lift_character (\\<chi>, z) x = \\<chi> x", "using * adjoin.hyps"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> C H'\n  z \\<in> I \\<chi>\n  subgroup H' G\n  H \\<subseteq> H'\n  a \\<in> carrier G - H'\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>H. H'.lift_character (\\<chi>, z) x = \\<chi> x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>H. H'.lift_character (\\<chi>, z) x = \\<chi> x\n\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>aa \\<in> C H'; b \\<in> I aa\\<rbrakk>\n       \\<Longrightarrow> H'.lift_character (aa, b) \\<in> C (adjoin G H' a)", "with *"], ["proof (chain)\npicking this:\n  \\<chi> \\<in> C H'\n  z \\<in> I \\<chi>\n  \\<forall>x\\<in>H. H'.lift_character (\\<chi>, z) x = \\<chi> x", "show \"H'.lift_character (\\<chi>, z) \\<in> C (adjoin G H' a)\""], ["proof (prove)\nusing this:\n  \\<chi> \\<in> C H'\n  z \\<in> I \\<chi>\n  \\<forall>x\\<in>H. H'.lift_character (\\<chi>, z) x = \\<chi> x\n\ngoal (1 subgoal):\n 1. H'.lift_character (\\<chi>, z) \\<in> C (adjoin G H' a)", "using H'.lift_character[of \\<chi> z]"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> C H'\n  z \\<in> I \\<chi>\n  \\<forall>x\\<in>H. H'.lift_character (\\<chi>, z) x = \\<chi> x\n  \\<lbrakk>character (G\\<lparr>carrier := H'\\<rparr>) \\<chi>;\n   z ^ subgroup_indicator G H' a =\n   \\<chi> (a [^] subgroup_indicator G H' a)\\<rbrakk>\n  \\<Longrightarrow> character (G\\<lparr>carrier := adjoin G H' a\\<rparr>)\n                     (H'.lift_character (\\<chi>, z))\n\ngoal (1 subgoal):\n 1. H'.lift_character (\\<chi>, z) \\<in> C (adjoin G H' a)", "by (auto simp: C_def I_def h_def c_def characters_def)"], ["proof (state)\nthis:\n  H'.lift_character (\\<chi>, z) \\<in> C (adjoin G H' a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  H'.lift_character \\<in> Sigma (C H') I \\<rightarrow> C (adjoin G H' a)\n\ngoal (3 subgoals):\n 1. ?g \\<in> C (adjoin G H' a) \\<rightarrow> Sigma (C H') I\n 2. \\<And>x.\n       x \\<in> Sigma (C H') I \\<Longrightarrow> ?g (H'.lift_character x) = x\n 3. \\<And>y.\n       y \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       H'.lift_character (?g y) = y", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. ?g \\<in> C (adjoin G H' a) \\<rightarrow> Sigma (C H') I\n 2. \\<And>x.\n       x \\<in> Sigma (C H') I \\<Longrightarrow> ?g (H'.lift_character x) = x\n 3. \\<And>y.\n       y \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       H'.lift_character (?g y) = y", "show \"(\\<lambda>\\<chi>. (\\<lambda>x. if x \\<in> H' then \\<chi> x else 0, \\<chi> a)) \\<in> C (adjoin G H' a) \\<rightarrow> Sigma (C H') I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<chi>.\n        (\\<lambda>x. if x \\<in> H' then \\<chi> x else 0, \\<chi> a))\n    \\<in> C (adjoin G H' a) \\<rightarrow> Sigma (C H') I", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       (\\<lambda>xa. if xa \\<in> H' then x xa else 0) \\<in> C H'\n 2. \\<And>x.\n       x \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       x a \\<in> I (\\<lambda>xa. if xa \\<in> H' then x xa else 0)", "fix \\<chi>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       (\\<lambda>xa. if xa \\<in> H' then x xa else 0) \\<in> C H'\n 2. \\<And>x.\n       x \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       x a \\<in> I (\\<lambda>xa. if xa \\<in> H' then x xa else 0)", "assume \\<chi>: \"\\<chi> \\<in> C (adjoin G H' a)\""], ["proof (state)\nthis:\n  \\<chi> \\<in> C (adjoin G H' a)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       (\\<lambda>xa. if xa \\<in> H' then x xa else 0) \\<in> C H'\n 2. \\<And>x.\n       x \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       x a \\<in> I (\\<lambda>xa. if xa \\<in> H' then x xa else 0)", "thus \"(\\<lambda>xa. if xa \\<in> H' then \\<chi> xa else 0) \\<in> C H'\""], ["proof (prove)\nusing this:\n  \\<chi> \\<in> C (adjoin G H' a)\n\ngoal (1 subgoal):\n 1. (\\<lambda>xa. if xa \\<in> H' then \\<chi> xa else 0) \\<in> C H'", "using H'.lower_character[of \\<chi>] adjoin.prems adjoin.hyps"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> C (adjoin G H' a)\n  character (G\\<lparr>carrier := adjoin G H' a\\<rparr>)\n   \\<chi> \\<Longrightarrow>\n  character (G\\<lparr>carrier := H'\\<rparr>)\n   (\\<lambda>x. if x \\<in> H' then \\<chi> x else 0)\n  character (G\\<lparr>carrier := adjoin G H' a, carrier := H\\<rparr>) \\<chi>\n  subgroup H' G\n  H \\<subseteq> H'\n  a \\<in> carrier G - H'\n\ngoal (1 subgoal):\n 1. (\\<lambda>xa. if xa \\<in> H' then \\<chi> xa else 0) \\<in> C H'", "by (auto simp: C_def characters_def character.char_eq_0)"], ["proof (state)\nthis:\n  (\\<lambda>xa. if xa \\<in> H' then \\<chi> xa else 0) \\<in> C H'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       x a \\<in> I (\\<lambda>xa. if xa \\<in> H' then x xa else 0)", "have \"\\<chi> (a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H' a\\<rparr>\\<^esub> subgroup_indicator (G\\<lparr>carrier := adjoin G H' a\\<rparr>) H' a) =\n              \\<chi> a ^ subgroup_indicator (G\\<lparr>carrier := adjoin G H' a\\<rparr>) H' a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi>\n     (a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H' a\\<rparr>\\<^esub>\n      subgroup_indicator (G\\<lparr>carrier := adjoin G H' a\\<rparr>) H' a) =\n    \\<chi> a ^\n    subgroup_indicator (G\\<lparr>carrier := adjoin G H' a\\<rparr>) H' a", "using \\<chi> adjoin.prems adjoin.hyps"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> C (adjoin G H' a)\n  character (G\\<lparr>carrier := adjoin G H' a, carrier := H\\<rparr>) \\<chi>\n  subgroup H' G\n  H \\<subseteq> H'\n  a \\<in> carrier G - H'\n\ngoal (1 subgoal):\n 1. \\<chi>\n     (a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H' a\\<rparr>\\<^esub>\n      subgroup_indicator (G\\<lparr>carrier := adjoin G H' a\\<rparr>) H' a) =\n    \\<chi> a ^\n    subgroup_indicator (G\\<lparr>carrier := adjoin G H' a\\<rparr>) H' a", "by (intro character.char_power) (auto simp: C_def characters_def adjoined_in_adjoin)"], ["proof (state)\nthis:\n  \\<chi>\n   (a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H' a\\<rparr>\\<^esub>\n    subgroup_indicator (G\\<lparr>carrier := adjoin G H' a\\<rparr>) H' a) =\n  \\<chi> a ^\n  subgroup_indicator (G\\<lparr>carrier := adjoin G H' a\\<rparr>) H' a\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       x a \\<in> I (\\<lambda>xa. if xa \\<in> H' then x xa else 0)", "hence \"\\<chi> (a [^] h) = \\<chi> a ^ subgroup_indicator G H' a\""], ["proof (prove)\nusing this:\n  \\<chi>\n   (a [^]\\<^bsub>G\\<lparr>carrier := adjoin G H' a\\<rparr>\\<^esub>\n    subgroup_indicator (G\\<lparr>carrier := adjoin G H' a\\<rparr>) H' a) =\n  \\<chi> a ^\n  subgroup_indicator (G\\<lparr>carrier := adjoin G H' a\\<rparr>) H' a\n\ngoal (1 subgoal):\n 1. \\<chi> (a [^] h) = \\<chi> a ^ subgroup_indicator G H' a", "by (simp add: nat_pow_consistent [symmetric] h_def)"], ["proof (state)\nthis:\n  \\<chi> (a [^] h) = \\<chi> a ^ subgroup_indicator G H' a\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       x a \\<in> I (\\<lambda>xa. if xa \\<in> H' then x xa else 0)", "with \\<chi>"], ["proof (chain)\npicking this:\n  \\<chi> \\<in> C (adjoin G H' a)\n  \\<chi> (a [^] h) = \\<chi> a ^ subgroup_indicator G H' a", "show \"\\<chi> a \\<in> I (\\<lambda>xa. if xa \\<in> H' then \\<chi> xa else 0)\""], ["proof (prove)\nusing this:\n  \\<chi> \\<in> C (adjoin G H' a)\n  \\<chi> (a [^] h) = \\<chi> a ^ subgroup_indicator G H' a\n\ngoal (1 subgoal):\n 1. \\<chi> a \\<in> I (\\<lambda>xa. if xa \\<in> H' then \\<chi> xa else 0)", "using adjoin.hyps adjoin.prems"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> C (adjoin G H' a)\n  \\<chi> (a [^] h) = \\<chi> a ^ subgroup_indicator G H' a\n  subgroup H' G\n  H \\<subseteq> H'\n  a \\<in> carrier G - H'\n  character (G\\<lparr>carrier := adjoin G H' a, carrier := H\\<rparr>) \\<chi>\n\ngoal (1 subgoal):\n 1. \\<chi> a \\<in> I (\\<lambda>xa. if xa \\<in> H' then \\<chi> xa else 0)", "by (auto simp: I_def C_def characters_def character.char_power character.char_eq_0\n                       pow_subgroup_indicator h_def c_def)"], ["proof (state)\nthis:\n  \\<chi> a \\<in> I (\\<lambda>xa. if xa \\<in> H' then \\<chi> xa else 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>\\<chi>.\n      (\\<lambda>x. if x \\<in> H' then \\<chi> x else 0, \\<chi> a))\n  \\<in> C (adjoin G H' a) \\<rightarrow> Sigma (C H') I\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Sigma (C H') I \\<Longrightarrow>\n       (\\<lambda>xa. if xa \\<in> H' then H'.lift_character x xa else 0,\n        H'.lift_character x a) =\n       x\n 2. \\<And>y.\n       y \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       H'.lift_character (\\<lambda>x. if x \\<in> H' then y x else 0, y a) =\n       y", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Sigma (C H') I \\<Longrightarrow>\n       (\\<lambda>xa. if xa \\<in> H' then H'.lift_character x xa else 0,\n        H'.lift_character x a) =\n       x\n 2. \\<And>y.\n       y \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       H'.lift_character (\\<lambda>x. if x \\<in> H' then y x else 0, y a) =\n       y", "fix \\<chi>z"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Sigma (C H') I \\<Longrightarrow>\n       (\\<lambda>xa. if xa \\<in> H' then H'.lift_character x xa else 0,\n        H'.lift_character x a) =\n       x\n 2. \\<And>y.\n       y \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       H'.lift_character (\\<lambda>x. if x \\<in> H' then y x else 0, y a) =\n       y", "assume *: \"\\<chi>z \\<in> (SIGMA \\<chi>:C H'. I \\<chi>)\""], ["proof (state)\nthis:\n  \\<chi>z \\<in> Sigma (C H') I\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Sigma (C H') I \\<Longrightarrow>\n       (\\<lambda>xa. if xa \\<in> H' then H'.lift_character x xa else 0,\n        H'.lift_character x a) =\n       x\n 2. \\<And>y.\n       y \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       H'.lift_character (\\<lambda>x. if x \\<in> H' then y x else 0, y a) =\n       y", "obtain \\<chi> z where [simp]: \"\\<chi>z = (\\<chi>, z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<chi> z.\n        \\<chi>z = (\\<chi>, z) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \\<chi>z)"], ["proof (state)\nthis:\n  \\<chi>z = (\\<chi>, z)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Sigma (C H') I \\<Longrightarrow>\n       (\\<lambda>xa. if xa \\<in> H' then H'.lift_character x xa else 0,\n        H'.lift_character x a) =\n       x\n 2. \\<And>y.\n       y \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       H'.lift_character (\\<lambda>x. if x \\<in> H' then y x else 0, y a) =\n       y", "from *"], ["proof (chain)\npicking this:\n  \\<chi>z \\<in> Sigma (C H') I", "show \"(\\<lambda>xa. if xa \\<in> H' then H'.lift_character \\<chi>z xa else 0, H'.lift_character \\<chi>z a) = \\<chi>z\""], ["proof (prove)\nusing this:\n  \\<chi>z \\<in> Sigma (C H') I\n\ngoal (1 subgoal):\n 1. (\\<lambda>xa. if xa \\<in> H' then H'.lift_character \\<chi>z xa else 0,\n     H'.lift_character \\<chi>z a) =\n    \\<chi>z", "using H'.lower_character_lift_character[of \\<chi> z]"], ["proof (prove)\nusing this:\n  \\<chi>z \\<in> Sigma (C H') I\n  \\<chi> \\<in> characters (G\\<lparr>carrier := H'\\<rparr>) \\<Longrightarrow>\n  (\\<lambda>x. if x \\<in> H' then H'.lift_character (\\<chi>, z) x else 0) =\n  \\<chi>\n  \\<chi> \\<in> characters (G\\<lparr>carrier := H'\\<rparr>) \\<Longrightarrow>\n  H'.lift_character (\\<chi>, z) a = z\n\ngoal (1 subgoal):\n 1. (\\<lambda>xa. if xa \\<in> H' then H'.lift_character \\<chi>z xa else 0,\n     H'.lift_character \\<chi>z a) =\n    \\<chi>z", "by (auto simp: C_def cong: if_cong)"], ["proof (state)\nthis:\n  (\\<lambda>xa. if xa \\<in> H' then H'.lift_character \\<chi>z xa else 0,\n   H'.lift_character \\<chi>z a) =\n  \\<chi>z\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       H'.lift_character (\\<lambda>x. if x \\<in> H' then y x else 0, y a) =\n       y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       H'.lift_character (\\<lambda>x. if x \\<in> H' then y x else 0, y a) =\n       y", "fix \\<chi>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       H'.lift_character (\\<lambda>x. if x \\<in> H' then y x else 0, y a) =\n       y", "assume \"\\<chi> \\<in> C (adjoin G H' a)\""], ["proof (state)\nthis:\n  \\<chi> \\<in> C (adjoin G H' a)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> C (adjoin G H' a) \\<Longrightarrow>\n       H'.lift_character (\\<lambda>x. if x \\<in> H' then y x else 0, y a) =\n       y", "thus \"H'.lift_character (\\<lambda>x. if x \\<in> H' then \\<chi> x else 0, \\<chi> a) = \\<chi>\""], ["proof (prove)\nusing this:\n  \\<chi> \\<in> C (adjoin G H' a)\n\ngoal (1 subgoal):\n 1. H'.lift_character\n     (\\<lambda>x. if x \\<in> H' then \\<chi> x else 0, \\<chi> a) =\n    \\<chi>", "using H'.lift_character_lower_character[of \\<chi>]"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> C (adjoin G H' a)\n  \\<chi>\n  \\<in> characters\n         (G\\<lparr>carrier := adjoin G H' a\\<rparr>) \\<Longrightarrow>\n  H'.lift_character\n   (\\<lambda>x. if x \\<in> H' then \\<chi> x else 0, \\<chi> a) =\n  \\<chi>\n\ngoal (1 subgoal):\n 1. H'.lift_character\n     (\\<lambda>x. if x \\<in> H' then \\<chi> x else 0, \\<chi> a) =\n    \\<chi>", "by (auto simp: C_def)"], ["proof (state)\nthis:\n  H'.lift_character\n   (\\<lambda>x. if x \\<in> H' then \\<chi> x else 0, \\<chi> a) =\n  \\<chi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bij_betw H'.lift_character (Sigma (C H') I) (C (adjoin G H' a))\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "hence \"card (SIGMA \\<chi>:C H'. I \\<chi>) = card (C (adjoin G H' a))\""], ["proof (prove)\nusing this:\n  bij_betw H'.lift_character (Sigma (C H') I) (C (adjoin G H' a))\n\ngoal (1 subgoal):\n 1. card (Sigma (C H') I) = card (C (adjoin G H' a))", "by (rule bij_betw_same_card)"], ["proof (state)\nthis:\n  card (Sigma (C H') I) = card (C (adjoin G H' a))\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "also"], ["proof (state)\nthis:\n  card (Sigma (C H') I) = card (C (adjoin G H' a))\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "have \"card (SIGMA \\<chi>:C H'. I \\<chi>) = (\\<Sum>a\\<in>C H'. card (I a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (Sigma (C H') I) = (\\<Sum>a\\<in>C H'. card (I a))", "by (intro card_SigmaI) (auto simp: I_def)"], ["proof (state)\nthis:\n  card (Sigma (C H') I) = (\\<Sum>a\\<in>C H'. card (I a))\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "also"], ["proof (state)\nthis:\n  card (Sigma (C H') I) = (\\<Sum>a\\<in>C H'. card (I a))\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "have \"\\<dots> = (\\<Sum>a\\<in>C H'. h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>a\\<in>C H'. card (I a)) = (\\<Sum>a\\<in>C H'. h)", "proof (intro sum.cong refl, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> C H' \\<Longrightarrow> card (I x) = h", "case (1 \\<chi>)"], ["proof (state)\nthis:\n  \\<chi> \\<in> C H'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> C H' \\<Longrightarrow> card (I x) = h", "then"], ["proof (chain)\npicking this:\n  \\<chi> \\<in> C H'", "interpret character \"G\\<lparr>carrier := H'\\<rparr>\" \\<chi>"], ["proof (prove)\nusing this:\n  \\<chi> \\<in> C H'\n\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := H'\\<rparr>) \\<chi>", "by (simp add: characters_def C_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> C H' \\<Longrightarrow> card (I x) = h", "have \"\\<chi> c \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> c \\<noteq> 0", "by (subst char_eq_0_iff) (auto simp: c_def h_def intro!: pow_subgroup_indicator adjoin)"], ["proof (state)\nthis:\n  \\<chi> c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> C H' \\<Longrightarrow> card (I x) = h", "thus ?case"], ["proof (prove)\nusing this:\n  \\<chi> c \\<noteq> 0\n\ngoal (1 subgoal):\n 1. card (I \\<chi>) = h", "by (simp add: I_def card_nth_roots)"], ["proof (state)\nthis:\n  card (I \\<chi>) = h\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>a\\<in>C H'. card (I a)) = (\\<Sum>a\\<in>C H'. h)\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "also"], ["proof (state)\nthis:\n  (\\<Sum>a\\<in>C H'. card (I a)) = (\\<Sum>a\\<in>C H'. h)\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "have \"\\<dots> = h * card (C H')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>a\\<in>C H'. h) = h * card (C H')", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>a\\<in>C H'. h) = h * card (C H')\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "finally"], ["proof (chain)\npicking this:\n  h * card (C H') = card (C (adjoin G H' a))", "have \"card (C (adjoin G H' a)) * card H = h * (card (C H') * card H)\""], ["proof (prove)\nusing this:\n  h * card (C H') = card (C (adjoin G H' a))\n\ngoal (1 subgoal):\n 1. card (C (adjoin G H' a)) * card H = h * (card (C H') * card H)", "by simp"], ["proof (state)\nthis:\n  card (C (adjoin G H' a)) * card H = h * (card (C H') * card H)\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "also"], ["proof (state)\nthis:\n  card (C (adjoin G H' a)) * card H = h * (card (C H') * card H)\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "have \"card (C H') * card H = card H'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (C H') * card H = card H'", "unfolding C_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {\\<chi>' \\<in> characters (G\\<lparr>carrier := H'\\<rparr>).\n      \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n    card H =\n    card H'", "using adjoin.prems"], ["proof (prove)\nusing this:\n  character (G\\<lparr>carrier := adjoin G H' a, carrier := H\\<rparr>) \\<chi>\n\ngoal (1 subgoal):\n 1. card\n     {\\<chi>' \\<in> characters (G\\<lparr>carrier := H'\\<rparr>).\n      \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n    card H =\n    card H'", "by (subst adjoin.IH) (auto simp: order_def)"], ["proof (state)\nthis:\n  card (C H') * card H = card H'\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "also"], ["proof (state)\nthis:\n  card (C H') * card H = card H'\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "have \"h * card H' = card (adjoin G H' a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h * card H' = card (adjoin G H' a)", "using adjoin.hyps"], ["proof (prove)\nusing this:\n  subgroup H' G\n  H \\<subseteq> H'\n  a \\<in> carrier G - H'\n\ngoal (1 subgoal):\n 1. h * card H' = card (adjoin G H' a)", "by (subst card_adjoin) (auto simp: h_def)"], ["proof (state)\nthis:\n  h * card H' = card (adjoin G H' a)\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "also"], ["proof (state)\nthis:\n  h * card H' = card (adjoin G H' a)\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "have \"\\<dots> = order (G\\<lparr>carrier := adjoin G H' a\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (adjoin G H' a) = order (G\\<lparr>carrier := adjoin G H' a\\<rparr>)", "by (simp add: order_def)"], ["proof (state)\nthis:\n  card (adjoin G H' a) = order (G\\<lparr>carrier := adjoin G H' a\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>Ha a.\n       \\<lbrakk>subgroup Ha G; H \\<subseteq> Ha; a \\<in> carrier G - Ha;\n        character (G\\<lparr>carrier := Ha, carrier := H\\<rparr>)\n         \\<chi> \\<Longrightarrow>\n        card\n         {\\<chi>' \\<in> characters (G\\<lparr>carrier := Ha\\<rparr>).\n          \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n        card H =\n        order (G\\<lparr>carrier := Ha\\<rparr>);\n        character (G\\<lparr>carrier := adjoin G Ha a, carrier := H\\<rparr>)\n         \\<chi>\\<rbrakk>\n       \\<Longrightarrow> card\n                          {\\<chi>'\n                           \\<in> characters\n                                  (G\\<lparr>carrier :=\n        adjoin G Ha a\\<rparr>).\n                           \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n                         card H =\n                         order (G\\<lparr>carrier := adjoin G Ha a\\<rparr>)", "finally"], ["proof (chain)\npicking this:\n  card (C (adjoin G H' a)) * card H =\n  order (G\\<lparr>carrier := adjoin G H' a\\<rparr>)", "show ?case"], ["proof (prove)\nusing this:\n  card (C (adjoin G H' a)) * card H =\n  order (G\\<lparr>carrier := adjoin G H' a\\<rparr>)\n\ngoal (1 subgoal):\n 1. card\n     {\\<chi>'.\n      \\<chi>'\n      \\<in> characters (G\\<lparr>carrier := adjoin G H' a\\<rparr>) \\<and>\n      (\\<forall>x\\<in>H. \\<chi>' x = \\<chi> x)} *\n    card H =\n    order (G\\<lparr>carrier := adjoin G H' a\\<rparr>)", "by (simp add: C_def)"], ["proof (state)\nthis:\n  card\n   {\\<chi>'.\n    \\<chi>'\n    \\<in> characters (G\\<lparr>carrier := adjoin G H' a\\<rparr>) \\<and>\n    (\\<forall>x\\<in>H. \\<chi>' x = \\<chi> x)} *\n  card H =\n  order (G\\<lparr>carrier := adjoin G H' a\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  By taking \\<open>H\\<close> to be the trivial subgroup, we obtain that the number of characters\n  on \\<open>G\\<close> is precisely the order of \\<open>G\\<close> itself, i.\\,e.\\ $|\\widehat{G}|=|G|$.\n\\<close>"], ["", "corollary card_characters: \"card (characters G) = order G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (characters G) = order G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (characters G) = order G", "define \\<chi> where \"\\<chi> = principal_char (G\\<lparr>carrier := {\\<one>}\\<rparr>)\""], ["proof (state)\nthis:\n  \\<chi> = principal_char (G\\<lparr>carrier := {\\<one>}\\<rparr>)\n\ngoal (1 subgoal):\n 1. card (characters G) = order G", "interpret triv: subgroup \"{\\<one>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup {\\<one>} G", "by standard auto"], ["proof (state)\ngoal (1 subgoal):\n 1. card (characters G) = order G", "interpret triv: finite_comm_group \"G\\<lparr>carrier := {\\<one>}\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_comm_group (G\\<lparr>carrier := {\\<one>}\\<rparr>)", "by (rule subgroup_imp_finite_comm_group) (rule triv.is_subgroup)"], ["proof (state)\ngoal (1 subgoal):\n 1. card (characters G) = order G", "have \"card {\\<chi>'\\<in>characters G. \\<forall>x\\<in>{\\<one>}. \\<chi>' x = \\<chi> x} * card {\\<one>} = order G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {\\<chi>' \\<in> characters G.\n      \\<forall>x\\<in>{\\<one>}. \\<chi>' x = \\<chi> x} *\n    card {\\<one>} =\n    order G", "unfolding \\<chi>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {\\<chi>' \\<in> characters G.\n      \\<forall>x\\<in>{\\<one>}.\n         \\<chi>' x =\n         principal_char (G\\<lparr>carrier := {\\<one>}\\<rparr>) x} *\n    card {\\<one>} =\n    order G", "by (intro card_character_extensions triv.is_subgroup triv.character_principal)"], ["proof (state)\nthis:\n  card\n   {\\<chi>' \\<in> characters G.\n    \\<forall>x\\<in>{\\<one>}. \\<chi>' x = \\<chi> x} *\n  card {\\<one>} =\n  order G\n\ngoal (1 subgoal):\n 1. card (characters G) = order G", "also"], ["proof (state)\nthis:\n  card\n   {\\<chi>' \\<in> characters G.\n    \\<forall>x\\<in>{\\<one>}. \\<chi>' x = \\<chi> x} *\n  card {\\<one>} =\n  order G\n\ngoal (1 subgoal):\n 1. card (characters G) = order G", "have \"{\\<chi>'\\<in>characters G. \\<forall>x\\<in>{\\<one>}. \\<chi>' x = \\<chi> x} = characters G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<chi>' \\<in> characters G.\n     \\<forall>x\\<in>{\\<one>}. \\<chi>' x = \\<chi> x} =\n    characters G", "by (auto simp: characters_def character.char_one principal_char_def \\<chi>_def)"], ["proof (state)\nthis:\n  {\\<chi>' \\<in> characters G.\n   \\<forall>x\\<in>{\\<one>}. \\<chi>' x = \\<chi> x} =\n  characters G\n\ngoal (1 subgoal):\n 1. card (characters G) = order G", "finally"], ["proof (chain)\npicking this:\n  card (characters G) * card {\\<one>} = order G", "show ?thesis"], ["proof (prove)\nusing this:\n  card (characters G) * card {\\<one>} = order G\n\ngoal (1 subgoal):\n 1. card (characters G) = order G", "by simp"], ["proof (state)\nthis:\n  card (characters G) = order G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma order_Characters [simp]: \"order (Characters G) = order G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order (Characters G) = order G", "by (simp add: order_def card_characters carrier_Characters)"], ["", "text \\<open>\n  It also follows as a simple corollary that any character on \\<open>H\\<close> \\<^emph>\\<open>can\\<close> be extended\n  to a character on \\<open>G\\<close>.\n\\<close>"], ["", "corollary character_extension_exists:\n  assumes \"subgroup H G\" \"character (G\\<lparr>carrier := H\\<rparr>) \\<chi>\"\n  obtains \\<chi>' where \"character G \\<chi>'\" and \"\\<And>x. x \\<in> H \\<Longrightarrow> \\<chi>' x = \\<chi> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>'.\n        \\<lbrakk>character G \\<chi>';\n         \\<And>x. x \\<in> H \\<Longrightarrow> \\<chi>' x = \\<chi> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>'.\n        \\<lbrakk>character G \\<chi>';\n         \\<And>x. x \\<in> H \\<Longrightarrow> \\<chi>' x = \\<chi> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"card {\\<chi>'\\<in>characters G. \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} * card H = order G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     {\\<chi>' \\<in> characters G. \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n    card H =\n    order G", "by (intro card_character_extensions assms)"], ["proof (state)\nthis:\n  card\n   {\\<chi>' \\<in> characters G. \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n  card H =\n  order G\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>'.\n        \\<lbrakk>character G \\<chi>';\n         \\<And>x. x \\<in> H \\<Longrightarrow> \\<chi>' x = \\<chi> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"card {\\<chi>'\\<in>characters G. \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} \\<noteq> 0\""], ["proof (prove)\nusing this:\n  card\n   {\\<chi>' \\<in> characters G. \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n  card H =\n  order G\n\ngoal (1 subgoal):\n 1. card\n     {\\<chi>' \\<in> characters G.\n      \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} \\<noteq>\n    0", "using order_gt_0"], ["proof (prove)\nusing this:\n  card\n   {\\<chi>' \\<in> characters G. \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} *\n  card H =\n  order G\n  0 < order G\n\ngoal (1 subgoal):\n 1. card\n     {\\<chi>' \\<in> characters G.\n      \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} \\<noteq>\n    0", "by (intro notI) auto"], ["proof (state)\nthis:\n  card\n   {\\<chi>' \\<in> characters G.\n    \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} \\<noteq>\n  0\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>'.\n        \\<lbrakk>character G \\<chi>';\n         \\<And>x. x \\<in> H \\<Longrightarrow> \\<chi>' x = \\<chi> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "hence \"{\\<chi>'\\<in>characters G. \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} \\<noteq> {}\""], ["proof (prove)\nusing this:\n  card\n   {\\<chi>' \\<in> characters G.\n    \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} \\<noteq>\n  0\n\ngoal (1 subgoal):\n 1. {\\<chi>' \\<in> characters G.\n     \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} \\<noteq>\n    {}", "by (intro notI) simp"], ["proof (state)\nthis:\n  {\\<chi>' \\<in> characters G.\n   \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>'.\n        \\<lbrakk>character G \\<chi>';\n         \\<And>x. x \\<in> H \\<Longrightarrow> \\<chi>' x = \\<chi> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  {\\<chi>' \\<in> characters G.\n   \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} \\<noteq>\n  {}", "obtain \\<chi>' where \"character G \\<chi>'\" and \"\\<And>x. x \\<in> H \\<Longrightarrow> \\<chi>' x = \\<chi> x\""], ["proof (prove)\nusing this:\n  {\\<chi>' \\<in> characters G.\n   \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>'.\n        \\<lbrakk>character G \\<chi>';\n         \\<And>x. x \\<in> H \\<Longrightarrow> \\<chi>' x = \\<chi> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding characters_def"], ["proof (prove)\nusing this:\n  {\\<chi>' \\<in> Collect (character G).\n   \\<forall>x\\<in>H. \\<chi>' x = \\<chi> x} \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>'.\n        \\<lbrakk>character G \\<chi>';\n         \\<And>x. x \\<in> H \\<Longrightarrow> \\<chi>' x = \\<chi> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  character G \\<chi>'\n  ?x \\<in> H \\<Longrightarrow> \\<chi>' ?x = \\<chi> ?x\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>'.\n        \\<lbrakk>character G \\<chi>';\n         \\<And>x. x \\<in> H \\<Longrightarrow> \\<chi>' x = \\<chi> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  character G \\<chi>'\n  ?x \\<in> H \\<Longrightarrow> \\<chi>' ?x = \\<chi> ?x\n\ngoal (1 subgoal):\n 1. thesis", "using that[of \\<chi>']"], ["proof (prove)\nusing this:\n  character G \\<chi>'\n  ?x \\<in> H \\<Longrightarrow> \\<chi>' ?x = \\<chi> ?x\n  \\<lbrakk>character G \\<chi>';\n   \\<And>x. x \\<in> H \\<Longrightarrow> \\<chi>' x = \\<chi> x\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  Lastly, we can also show that for each $x\\in H$ of order $n > 1$ and each \\<open>n\\<close>-th root of\n  unity \\<open>z\\<close>, there exists a character \\<open>\\<chi>\\<close> on \\<open>G\\<close> such that $\\chi(x) = z$.\n\\<close>"], ["", "corollary character_with_value_exists:\n  assumes \"x \\<in> carrier G\" and \"x \\<noteq> \\<one>\" and \"z ^ ord x = 1\"\n  obtains \\<chi> where \"character G \\<chi>\" and \"\\<chi> x = z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define triv where \"triv = G\\<lparr>carrier := {\\<one>}\\<rparr>\""], ["proof (state)\nthis:\n  triv = G\\<lparr>carrier := {\\<one>}\\<rparr>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "interpret triv: subgroup \"{\\<one>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup {\\<one>} G", "by standard auto"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "interpret triv: finite_comm_group \"G\\<lparr>carrier := {\\<one>}\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_comm_group (G\\<lparr>carrier := {\\<one>}\\<rparr>)", "by (rule subgroup_imp_finite_comm_group) (rule triv.is_subgroup)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "interpret H: finite_comm_group_adjoin G \"{\\<one>}\" x"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_comm_group_adjoin G {\\<one>} x", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n  x \\<noteq> \\<one>\n  z ^ ord x = 1\n\ngoal (1 subgoal):\n 1. finite_comm_group_adjoin G {\\<one>} x", "by unfold_locales auto"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define h where \"h = subgroup_indicator G {\\<one>} x\""], ["proof (state)\nthis:\n  h = subgroup_indicator G {\\<one>} x\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have x_pow_h: \"x [^] h = \\<one>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x [^] h = \\<one>", "using pow_subgroup_indicator[OF triv.is_subgroup assms(1)]"], ["proof (prove)\nusing this:\n  x [^] subgroup_indicator G {\\<one>} x \\<in> {\\<one>}\n\ngoal (1 subgoal):\n 1. x [^] h = \\<one>", "by (simp add: h_def)"], ["proof (state)\nthis:\n  x [^] h = \\<one>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"h > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < h", "using subgroup_indicator_pos[OF triv.is_subgroup assms(1)]"], ["proof (prove)\nusing this:\n  0 < subgroup_indicator G {\\<one>} x\n\ngoal (1 subgoal):\n 1. 0 < h", "by (simp add: h_def)"], ["proof (state)\nthis:\n  0 < h\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have [simp]: \"ord x = h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord x = h", "using x_pow_h triv.is_subgroup assms \\<open>h > 0\\<close>"], ["proof (prove)\nusing this:\n  x [^] h = \\<one>\n  subgroup {\\<one>} G\n  x \\<in> carrier G\n  x \\<noteq> \\<one>\n  z ^ ord x = 1\n  0 < h\n\ngoal (1 subgoal):\n 1. ord x = h", "unfolding h_def"], ["proof (prove)\nusing this:\n  x [^] subgroup_indicator G {\\<one>} x = \\<one>\n  subgroup {\\<one>} G\n  x \\<in> carrier G\n  x \\<noteq> \\<one>\n  z ^ ord x = 1\n  0 < subgroup_indicator G {\\<one>} x\n\ngoal (1 subgoal):\n 1. ord x = subgroup_indicator G {\\<one>} x", "by (intro antisym subgroup_indicator_le_ord ord_min) auto"], ["proof (state)\nthis:\n  ord x = h\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define \\<chi> where \"\\<chi> = principal_char triv\""], ["proof (state)\nthis:\n  \\<chi> = principal_char triv\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define \\<chi>' where \"\\<chi>' = H.lift_character (\\<chi>, z)\""], ["proof (state)\nthis:\n  \\<chi>' = H.lift_character (\\<chi>, z)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"subgroup (adjoin G {\\<one>} x) G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgroup (adjoin G {\\<one>} x) G", "by (intro adjoin_subgroup triv.is_subgroup assms)"], ["proof (state)\nthis:\n  subgroup (adjoin G {\\<one>} x) G\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  subgroup (adjoin G {\\<one>} x) G\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \\<chi>': \"character (G\\<lparr>carrier := adjoin G {\\<one>} x\\<rparr>) \\<chi>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := adjoin G {\\<one>} x\\<rparr>) \\<chi>'", "using H.lift_character[of \\<chi> z] triv.character_principal assms x_pow_h"], ["proof (prove)\nusing this:\n  \\<lbrakk>character (G\\<lparr>carrier := {\\<one>}\\<rparr>) \\<chi>;\n   z ^ subgroup_indicator G {\\<one>} x =\n   \\<chi> (x [^] subgroup_indicator G {\\<one>} x)\\<rbrakk>\n  \\<Longrightarrow> character\n                     (G\\<lparr>carrier := adjoin G {\\<one>} x\\<rparr>)\n                     (H.lift_character (\\<chi>, z))\n  character (G\\<lparr>carrier := {\\<one>}\\<rparr>)\n   (principal_char (G\\<lparr>carrier := {\\<one>}\\<rparr>))\n  x \\<in> carrier G\n  x \\<noteq> \\<one>\n  z ^ ord x = 1\n  x [^] h = \\<one>\n\ngoal (1 subgoal):\n 1. character (G\\<lparr>carrier := adjoin G {\\<one>} x\\<rparr>) \\<chi>'", "by (auto simp: \\<chi>'_def \\<chi>_def principal_char_def triv_def h_def)"], ["proof (state)\nthis:\n  character (G\\<lparr>carrier := adjoin G {\\<one>} x\\<rparr>) \\<chi>'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  subgroup (adjoin G {\\<one>} x) G\n  character (G\\<lparr>carrier := adjoin G {\\<one>} x\\<rparr>) \\<chi>'", "obtain \\<chi>'' where \\<chi>'': \"character G \\<chi>''\" \"\\<And>y. y \\<in> adjoin G {\\<one>} x \\<Longrightarrow> \\<chi>'' y = \\<chi>' y\""], ["proof (prove)\nusing this:\n  subgroup (adjoin G {\\<one>} x) G\n  character (G\\<lparr>carrier := adjoin G {\\<one>} x\\<rparr>) \\<chi>'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>''.\n        \\<lbrakk>character G \\<chi>'';\n         \\<And>y.\n            y \\<in> adjoin G {\\<one>} x \\<Longrightarrow>\n            \\<chi>'' y = \\<chi>' y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (erule character_extension_exists)"], ["proof (state)\nthis:\n  character G \\<chi>''\n  ?y \\<in> adjoin G {\\<one>} x \\<Longrightarrow> \\<chi>'' ?y = \\<chi>' ?y\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  character G \\<chi>''\n  ?y \\<in> adjoin G {\\<one>} x \\<Longrightarrow> \\<chi>'' ?y = \\<chi>' ?y\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\nthis:\n  character G \\<chi>''\n  ?y \\<in> adjoin G {\\<one>} x \\<Longrightarrow> \\<chi>'' ?y = \\<chi>' ?y\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<chi>'' x = \\<chi>' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi>'' x = \\<chi>' x", "using \\<chi>''(2)[of x] assms triv.is_subgroup"], ["proof (prove)\nusing this:\n  x \\<in> adjoin G {\\<one>} x \\<Longrightarrow> \\<chi>'' x = \\<chi>' x\n  x \\<in> carrier G\n  x \\<noteq> \\<one>\n  z ^ ord x = 1\n  subgroup {\\<one>} G\n\ngoal (1 subgoal):\n 1. \\<chi>'' x = \\<chi>' x", "by (auto simp: adjoined_in_adjoin)"], ["proof (state)\nthis:\n  \\<chi>'' x = \\<chi>' x\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  \\<chi>'' x = \\<chi>' x\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<chi>' x = z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi>' x = z", "unfolding \\<chi>'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.lift_character (\\<chi>, z) x = z", "by (subst H.lift_character_adjoined) (simp_all add: \\<chi>_def triv_def)"], ["proof (state)\nthis:\n  \\<chi>' x = z\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "finally"], ["proof (chain)\npicking this:\n  \\<chi>'' x = z", "have \"\\<chi>'' x = z\""], ["proof (prove)\nusing this:\n  \\<chi>'' x = z\n\ngoal (1 subgoal):\n 1. \\<chi>'' x = z", "."], ["proof (state)\nthis:\n  \\<chi>'' x = z\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  \\<chi>'' x = z\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  character G \\<chi>''\n  ?y \\<in> adjoin G {\\<one>} x \\<Longrightarrow> \\<chi>'' ?y = \\<chi>' ?y\n  \\<chi>'' x = z", "show ?thesis"], ["proof (prove)\nusing this:\n  character G \\<chi>''\n  ?y \\<in> adjoin G {\\<one>} x \\<Longrightarrow> \\<chi>'' ?y = \\<chi>' ?y\n  \\<chi>'' x = z\n\ngoal (1 subgoal):\n 1. thesis", "using that[of \\<chi>'']"], ["proof (prove)\nusing this:\n  character G \\<chi>''\n  ?y \\<in> adjoin G {\\<one>} x \\<Longrightarrow> \\<chi>'' ?y = \\<chi>' ?y\n  \\<chi>'' x = z\n  \\<lbrakk>character G \\<chi>''; \\<chi>'' x = z\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  In particular, for any \\<open>x\\<close> that is not the identity element, there exists a character \\<open>\\<chi>\\<close>\n  such that $\\chi(x)\\neq 1$.\n\\<close>"], ["", "corollary character_neq_1_exists:\n  assumes \"x \\<in> carrier G\" and \"x \\<noteq> \\<one>\"\n  obtains \\<chi> where \"character G \\<chi>\" and \"\\<chi> x \\<noteq> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x \\<noteq> 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x \\<noteq> 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define z where \"z = cis (2 * pi / ord x)\""], ["proof (state)\nthis:\n  z = cis (2 * pi / real (ord x))\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x \\<noteq> 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have z_pow_h: \"z ^ ord x = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z ^ ord x = 1", "by (auto simp: z_def DeMoivre)"], ["proof (state)\nthis:\n  z ^ ord x = 1\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x \\<noteq> 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> carrier G\n  x \\<noteq> \\<one>", "have \"ord x \\<ge> 1\""], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n  x \\<noteq> \\<one>\n\ngoal (1 subgoal):\n 1. 1 \\<le> ord x", "by (intro ord_ge_1) auto"], ["proof (state)\nthis:\n  1 \\<le> ord x\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x \\<noteq> 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  1 \\<le> ord x\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x \\<noteq> 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"ord x \\<noteq> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord x \\<noteq> 1", "using pow_ord_eq_1[of x] assms fin"], ["proof (prove)\nusing this:\n  x \\<in> carrier G \\<Longrightarrow> x [^] ord x = \\<one>\n  x \\<in> carrier G\n  x \\<noteq> \\<one>\n  finite (carrier G)\n\ngoal (1 subgoal):\n 1. ord x \\<noteq> 1", "by (intro notI) simp_all"], ["proof (state)\nthis:\n  ord x \\<noteq> 1\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x \\<noteq> 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  1 \\<le> ord x\n  ord x \\<noteq> 1", "have \"ord x > 1\""], ["proof (prove)\nusing this:\n  1 \\<le> ord x\n  ord x \\<noteq> 1\n\ngoal (1 subgoal):\n 1. 1 < ord x", "by linarith"], ["proof (state)\nthis:\n  1 < ord x\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x \\<noteq> 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have [simp]: \"z \\<noteq> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<noteq> 1", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. z = 1 \\<Longrightarrow> False", "assume \"z = 1\""], ["proof (state)\nthis:\n  z = 1\n\ngoal (1 subgoal):\n 1. z = 1 \\<Longrightarrow> False", "have \"bij_betw (\\<lambda>k. cis (2 * pi * real k / real (ord x))) {..<ord x} {z. z ^ ord x = 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>k. cis (2 * pi * real k / real (ord x))) {..<ord x}\n     {z. z ^ ord x = 1}", "using \\<open>ord x > 1\\<close>"], ["proof (prove)\nusing this:\n  1 < ord x\n\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>k. cis (2 * pi * real k / real (ord x))) {..<ord x}\n     {z. z ^ ord x = 1}", "by (intro bij_betw_roots_unity) auto"], ["proof (state)\nthis:\n  bij_betw (\\<lambda>k. cis (2 * pi * real k / real (ord x))) {..<ord x}\n   {z. z ^ ord x = 1}\n\ngoal (1 subgoal):\n 1. z = 1 \\<Longrightarrow> False", "hence inj: \"inj_on (\\<lambda>k. cis (2 * pi * real k / real (ord x))) {..<ord x}\""], ["proof (prove)\nusing this:\n  bij_betw (\\<lambda>k. cis (2 * pi * real k / real (ord x))) {..<ord x}\n   {z. z ^ ord x = 1}\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>k. cis (2 * pi * real k / real (ord x))) {..<ord x}", "by (auto simp: bij_betw_def)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>k. cis (2 * pi * real k / real (ord x))) {..<ord x}\n\ngoal (1 subgoal):\n 1. z = 1 \\<Longrightarrow> False", "have \"0 = (1 :: nat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = 1", "using \\<open>z = 1\\<close> and \\<open>ord x > 1\\<close>"], ["proof (prove)\nusing this:\n  z = 1\n  1 < ord x\n\ngoal (1 subgoal):\n 1. 0 = 1", "by (intro inj_onD[OF inj]) (auto simp: z_def)"], ["proof (state)\nthis:\n  0 = 1\n\ngoal (1 subgoal):\n 1. z = 1 \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  0 = 1\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  z \\<noteq> 1\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x \\<noteq> 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain \\<chi> where \"character G \\<chi>\" and \"\\<chi> x = z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using character_with_value_exists[OF assms z_pow_h]"], ["proof (prove)\nusing this:\n  (\\<And>\\<chi>.\n      \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x = z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  character G \\<chi>\n  \\<chi> x = z\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x \\<noteq> 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  character G \\<chi>\n  \\<chi> x = z\n\ngoal (1 subgoal):\n 1. thesis", "using that[of \\<chi>]"], ["proof (prove)\nusing this:\n  character G \\<chi>\n  \\<chi> x = z\n  \\<lbrakk>character G \\<chi>; \\<chi> x \\<noteq> 1\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by simp"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>The first orthogonality relation\\<close>"], ["", "text \\<open>\n  The entries of any non-principal character sum to 0.\n\\<close>"], ["", "theorem (in character) sum_character:\n  \"(\\<Sum>x\\<in>carrier G. \\<chi> x) = (if \\<chi> = principal_char G then of_nat (order G) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "proof (cases \"\\<chi> = principal_char G\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<chi> = principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)\n 2. \\<chi> \\<noteq> principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "case True"], ["proof (state)\nthis:\n  \\<chi> = principal_char G\n\ngoal (2 subgoals):\n 1. \\<chi> = principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)\n 2. \\<chi> \\<noteq> principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "hence \"(\\<Sum>x\\<in>carrier G. \\<chi> x) = (\\<Sum>x\\<in>carrier G. 1)\""], ["proof (prove)\nusing this:\n  \\<chi> = principal_char G\n\ngoal (1 subgoal):\n 1. sum \\<chi> (carrier G) = (\\<Sum>x\\<in>carrier G. 1)", "by (intro sum.cong) (auto simp: principal_char_def)"], ["proof (state)\nthis:\n  sum \\<chi> (carrier G) = (\\<Sum>x\\<in>carrier G. 1)\n\ngoal (2 subgoals):\n 1. \\<chi> = principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)\n 2. \\<chi> \\<noteq> principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "also"], ["proof (state)\nthis:\n  sum \\<chi> (carrier G) = (\\<Sum>x\\<in>carrier G. 1)\n\ngoal (2 subgoals):\n 1. \\<chi> = principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)\n 2. \\<chi> \\<noteq> principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "have \"\\<dots> = order G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>carrier G. 1) = of_nat (order G)", "by (simp add: order_def)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>carrier G. 1) = of_nat (order G)\n\ngoal (2 subgoals):\n 1. \\<chi> = principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)\n 2. \\<chi> \\<noteq> principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "finally"], ["proof (chain)\npicking this:\n  sum \\<chi> (carrier G) = of_nat (order G)", "show ?thesis"], ["proof (prove)\nusing this:\n  sum \\<chi> (carrier G) = of_nat (order G)\n\ngoal (1 subgoal):\n 1. sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "using True"], ["proof (prove)\nusing this:\n  sum \\<chi> (carrier G) = of_nat (order G)\n  \\<chi> = principal_char G\n\ngoal (1 subgoal):\n 1. sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "by simp"], ["proof (state)\nthis:\n  sum \\<chi> (carrier G) =\n  (if \\<chi> = principal_char G then of_nat (order G) else 0)\n\ngoal (1 subgoal):\n 1. \\<chi> \\<noteq> principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<chi> \\<noteq> principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "case False"], ["proof (state)\nthis:\n  \\<chi> \\<noteq> principal_char G\n\ngoal (1 subgoal):\n 1. \\<chi> \\<noteq> principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "define S where \"S = (\\<Sum>x\\<in>carrier G. \\<chi> x)\""], ["proof (state)\nthis:\n  S = sum \\<chi> (carrier G)\n\ngoal (1 subgoal):\n 1. \\<chi> \\<noteq> principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "from False"], ["proof (chain)\npicking this:\n  \\<chi> \\<noteq> principal_char G", "obtain y where y: \"y \\<in> carrier G\" \"\\<chi> y \\<noteq> 1\""], ["proof (prove)\nusing this:\n  \\<chi> \\<noteq> principal_char G\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in> carrier G; \\<chi> y \\<noteq> 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: principal_char_def fun_eq_iff char_eq_0_iff split: if_splits)"], ["proof (state)\nthis:\n  y \\<in> carrier G\n  \\<chi> y \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<chi> \\<noteq> principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "from y"], ["proof (chain)\npicking this:\n  y \\<in> carrier G\n  \\<chi> y \\<noteq> 1", "have \"S = (\\<Sum>x\\<in>carrier G. \\<chi> (y \\<otimes> x))\""], ["proof (prove)\nusing this:\n  y \\<in> carrier G\n  \\<chi> y \\<noteq> 1\n\ngoal (1 subgoal):\n 1. S = (\\<Sum>x\\<in>carrier G. \\<chi> (y \\<otimes> x))", "unfolding S_def"], ["proof (prove)\nusing this:\n  y \\<in> carrier G\n  \\<chi> y \\<noteq> 1\n\ngoal (1 subgoal):\n 1. sum \\<chi> (carrier G) = (\\<Sum>x\\<in>carrier G. \\<chi> (y \\<otimes> x))", "by (intro sum.reindex_bij_betw [symmetric] bij_betw_mult_left)"], ["proof (state)\nthis:\n  S = (\\<Sum>x\\<in>carrier G. \\<chi> (y \\<otimes> x))\n\ngoal (1 subgoal):\n 1. \\<chi> \\<noteq> principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "also"], ["proof (state)\nthis:\n  S = (\\<Sum>x\\<in>carrier G. \\<chi> (y \\<otimes> x))\n\ngoal (1 subgoal):\n 1. \\<chi> \\<noteq> principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "have \"\\<dots> = (\\<Sum>x\\<in>carrier G. \\<chi> y * \\<chi> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>carrier G. \\<chi> (y \\<otimes> x)) =\n    (\\<Sum>x\\<in>carrier G. \\<chi> y * \\<chi> x)", "by (intro sum.cong refl char_mult y)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>carrier G. \\<chi> (y \\<otimes> x)) =\n  (\\<Sum>x\\<in>carrier G. \\<chi> y * \\<chi> x)\n\ngoal (1 subgoal):\n 1. \\<chi> \\<noteq> principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>carrier G. \\<chi> (y \\<otimes> x)) =\n  (\\<Sum>x\\<in>carrier G. \\<chi> y * \\<chi> x)\n\ngoal (1 subgoal):\n 1. \\<chi> \\<noteq> principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "have \"\\<dots> = \\<chi> y * S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>carrier G. \\<chi> y * \\<chi> x) = \\<chi> y * S", "by (simp add: S_def sum_distrib_left)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>carrier G. \\<chi> y * \\<chi> x) = \\<chi> y * S\n\ngoal (1 subgoal):\n 1. \\<chi> \\<noteq> principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "finally"], ["proof (chain)\npicking this:\n  S = \\<chi> y * S", "have \"(\\<chi> y - 1) * S = 0\""], ["proof (prove)\nusing this:\n  S = \\<chi> y * S\n\ngoal (1 subgoal):\n 1. (\\<chi> y - 1) * S = 0", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  (\\<chi> y - 1) * S = 0\n\ngoal (1 subgoal):\n 1. \\<chi> \\<noteq> principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "with y"], ["proof (chain)\npicking this:\n  y \\<in> carrier G\n  \\<chi> y \\<noteq> 1\n  (\\<chi> y - 1) * S = 0", "have \"S = 0\""], ["proof (prove)\nusing this:\n  y \\<in> carrier G\n  \\<chi> y \\<noteq> 1\n  (\\<chi> y - 1) * S = 0\n\ngoal (1 subgoal):\n 1. S = 0", "by simp"], ["proof (state)\nthis:\n  S = 0\n\ngoal (1 subgoal):\n 1. \\<chi> \\<noteq> principal_char G \\<Longrightarrow>\n    sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "with False"], ["proof (chain)\npicking this:\n  \\<chi> \\<noteq> principal_char G\n  S = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<chi> \\<noteq> principal_char G\n  S = 0\n\ngoal (1 subgoal):\n 1. sum \\<chi> (carrier G) =\n    (if \\<chi> = principal_char G then of_nat (order G) else 0)", "by (simp add: S_def)"], ["proof (state)\nthis:\n  sum \\<chi> (carrier G) =\n  (if \\<chi> = principal_char G then of_nat (order G) else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary (in finite_comm_group) character_orthogonality1:\n  assumes \"character G \\<chi>\" and \"character G \\<chi>'\"\n  shows   \"(\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) = (if \\<chi> = \\<chi>' then of_nat (order G) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n    (if \\<chi> = \\<chi>' then of_nat (order G) else 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n    (if \\<chi> = \\<chi>' then of_nat (order G) else 0)", "define C where [simp]: \"C = Characters G\""], ["proof (state)\nthis:\n  C = Characters G\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n    (if \\<chi> = \\<chi>' then of_nat (order G) else 0)", "interpret C: finite_comm_group C"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_comm_group C", "unfolding C_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_comm_group (Characters G)", "by (rule finite_comm_group_Characters)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n    (if \\<chi> = \\<chi>' then of_nat (order G) else 0)", "let ?\\<chi> = \"\\<lambda>x. \\<chi> x * inv_character \\<chi>' x\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n    (if \\<chi> = \\<chi>' then of_nat (order G) else 0)", "interpret character G \"\\<lambda>x. \\<chi> x * inv_character \\<chi>' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. character G (\\<lambda>x. \\<chi> x * inv_character \\<chi>' x)", "by (intro character_mult character.inv_character assms)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n    (if \\<chi> = \\<chi>' then of_nat (order G) else 0)", "have \"(\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) = (\\<Sum>x\\<in>carrier G. ?\\<chi> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n    (\\<Sum>x\\<in>carrier G. \\<chi> x * inv_character \\<chi>' x)", "by (intro sum.cong) (auto simp: inv_character_def)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n  (\\<Sum>x\\<in>carrier G. \\<chi> x * inv_character \\<chi>' x)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n    (if \\<chi> = \\<chi>' then of_nat (order G) else 0)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n  (\\<Sum>x\\<in>carrier G. \\<chi> x * inv_character \\<chi>' x)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n    (if \\<chi> = \\<chi>' then of_nat (order G) else 0)", "have \"\\<dots> = (if ?\\<chi> = principal_char G then of_nat (order G) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>carrier G. \\<chi> x * inv_character \\<chi>' x) =\n    (if (\\<lambda>x. \\<chi> x * inv_character \\<chi>' x) = principal_char G\n     then of_nat (order G) else 0)", "by (rule sum_character)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>carrier G. \\<chi> x * inv_character \\<chi>' x) =\n  (if (\\<lambda>x. \\<chi> x * inv_character \\<chi>' x) = principal_char G\n   then of_nat (order G) else 0)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n    (if \\<chi> = \\<chi>' then of_nat (order G) else 0)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>carrier G. \\<chi> x * inv_character \\<chi>' x) =\n  (if (\\<lambda>x. \\<chi> x * inv_character \\<chi>' x) = principal_char G\n   then of_nat (order G) else 0)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n    (if \\<chi> = \\<chi>' then of_nat (order G) else 0)", "have \"?\\<chi> = principal_char G \\<longleftrightarrow> \\<chi> \\<otimes>\\<^bsub>C\\<^esub> inv\\<^bsub>C\\<^esub> \\<chi>' = \\<one>\\<^bsub>C\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. \\<chi> x * inv_character \\<chi>' x) = principal_char G) =\n    (\\<chi> \\<otimes>\\<^bsub>C\\<^esub> inv\\<^bsub>C\\<^esub> \\<chi>' =\n     \\<one>\\<^bsub>C\\<^esub>)", "using assms"], ["proof (prove)\nusing this:\n  character G \\<chi>\n  character G \\<chi>'\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. \\<chi> x * inv_character \\<chi>' x) = principal_char G) =\n    (\\<chi> \\<otimes>\\<^bsub>C\\<^esub> inv\\<^bsub>C\\<^esub> \\<chi>' =\n     \\<one>\\<^bsub>C\\<^esub>)", "by (simp add: Characters_simps characters_def)"], ["proof (state)\nthis:\n  ((\\<lambda>x. \\<chi> x * inv_character \\<chi>' x) = principal_char G) =\n  (\\<chi> \\<otimes>\\<^bsub>C\\<^esub> inv\\<^bsub>C\\<^esub> \\<chi>' =\n   \\<one>\\<^bsub>C\\<^esub>)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n    (if \\<chi> = \\<chi>' then of_nat (order G) else 0)", "also"], ["proof (state)\nthis:\n  ((\\<lambda>x. \\<chi> x * inv_character \\<chi>' x) = principal_char G) =\n  (\\<chi> \\<otimes>\\<^bsub>C\\<^esub> inv\\<^bsub>C\\<^esub> \\<chi>' =\n   \\<one>\\<^bsub>C\\<^esub>)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n    (if \\<chi> = \\<chi>' then of_nat (order G) else 0)", "have \"\\<dots> \\<longleftrightarrow> \\<chi> = \\<chi>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi> \\<otimes>\\<^bsub>C\\<^esub> inv\\<^bsub>C\\<^esub> \\<chi>' =\n     \\<one>\\<^bsub>C\\<^esub>) =\n    (\\<chi> = \\<chi>')", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<chi> \\<otimes>\\<^bsub>C\\<^esub> inv\\<^bsub>C\\<^esub> \\<chi>' =\n    \\<one>\\<^bsub>C\\<^esub> \\<Longrightarrow>\n    \\<chi> = \\<chi>'\n 2. \\<chi> = \\<chi>' \\<Longrightarrow>\n    \\<chi> \\<otimes>\\<^bsub>C\\<^esub> inv\\<^bsub>C\\<^esub> \\<chi>' =\n    \\<one>\\<^bsub>C\\<^esub>", "assume \"\\<chi> \\<otimes>\\<^bsub>C\\<^esub> inv\\<^bsub>C\\<^esub> \\<chi>' = \\<one>\\<^bsub>C\\<^esub>\""], ["proof (state)\nthis:\n  \\<chi> \\<otimes>\\<^bsub>C\\<^esub> inv\\<^bsub>C\\<^esub> \\<chi>' =\n  \\<one>\\<^bsub>C\\<^esub>\n\ngoal (2 subgoals):\n 1. \\<chi> \\<otimes>\\<^bsub>C\\<^esub> inv\\<^bsub>C\\<^esub> \\<chi>' =\n    \\<one>\\<^bsub>C\\<^esub> \\<Longrightarrow>\n    \\<chi> = \\<chi>'\n 2. \\<chi> = \\<chi>' \\<Longrightarrow>\n    \\<chi> \\<otimes>\\<^bsub>C\\<^esub> inv\\<^bsub>C\\<^esub> \\<chi>' =\n    \\<one>\\<^bsub>C\\<^esub>", "from C.inv_equality [OF this] and assms"], ["proof (chain)\npicking this:\n  \\<lbrakk>inv\\<^bsub>C\\<^esub> \\<chi>' \\<in> carrier C;\n   \\<chi> \\<in> carrier C\\<rbrakk>\n  \\<Longrightarrow> inv\\<^bsub>C\\<^esub> (inv\\<^bsub>C\\<^esub> \\<chi>') =\n                    \\<chi>\n  character G \\<chi>\n  character G \\<chi>'", "show \"\\<chi> = \\<chi>'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>inv\\<^bsub>C\\<^esub> \\<chi>' \\<in> carrier C;\n   \\<chi> \\<in> carrier C\\<rbrakk>\n  \\<Longrightarrow> inv\\<^bsub>C\\<^esub> (inv\\<^bsub>C\\<^esub> \\<chi>') =\n                    \\<chi>\n  character G \\<chi>\n  character G \\<chi>'\n\ngoal (1 subgoal):\n 1. \\<chi> = \\<chi>'", "by (auto simp: characters_def Characters_simps)"], ["proof (state)\nthis:\n  \\<chi> = \\<chi>'\n\ngoal (1 subgoal):\n 1. \\<chi> = \\<chi>' \\<Longrightarrow>\n    \\<chi> \\<otimes>\\<^bsub>C\\<^esub> inv\\<^bsub>C\\<^esub> \\<chi>' =\n    \\<one>\\<^bsub>C\\<^esub>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<chi> = \\<chi>' \\<Longrightarrow>\n    \\<chi> \\<otimes>\\<^bsub>C\\<^esub> inv\\<^bsub>C\\<^esub> \\<chi>' =\n    \\<one>\\<^bsub>C\\<^esub>", "assume *: \"\\<chi> = \\<chi>'\""], ["proof (state)\nthis:\n  \\<chi> = \\<chi>'\n\ngoal (1 subgoal):\n 1. \\<chi> = \\<chi>' \\<Longrightarrow>\n    \\<chi> \\<otimes>\\<^bsub>C\\<^esub> inv\\<^bsub>C\\<^esub> \\<chi>' =\n    \\<one>\\<^bsub>C\\<^esub>", "from assms"], ["proof (chain)\npicking this:\n  character G \\<chi>\n  character G \\<chi>'", "show \"\\<chi> \\<otimes>\\<^bsub>C\\<^esub> inv\\<^bsub>C\\<^esub> \\<chi>' = \\<one>\\<^bsub>C\\<^esub>\""], ["proof (prove)\nusing this:\n  character G \\<chi>\n  character G \\<chi>'\n\ngoal (1 subgoal):\n 1. \\<chi> \\<otimes>\\<^bsub>C\\<^esub> inv\\<^bsub>C\\<^esub> \\<chi>' =\n    \\<one>\\<^bsub>C\\<^esub>", "by (subst *, intro C.r_inv) (auto simp: carrier_Characters characters_def)"], ["proof (state)\nthis:\n  \\<chi> \\<otimes>\\<^bsub>C\\<^esub> inv\\<^bsub>C\\<^esub> \\<chi>' =\n  \\<one>\\<^bsub>C\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<chi> \\<otimes>\\<^bsub>C\\<^esub> inv\\<^bsub>C\\<^esub> \\<chi>' =\n   \\<one>\\<^bsub>C\\<^esub>) =\n  (\\<chi> = \\<chi>')\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n    (if \\<chi> = \\<chi>' then of_nat (order G) else 0)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n  (if \\<chi> = \\<chi>' then of_nat (order G) else 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n  (if \\<chi> = \\<chi>' then of_nat (order G) else 0)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n    (if \\<chi> = \\<chi>' then of_nat (order G) else 0)", "."], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>carrier G. \\<chi> x * cnj (\\<chi>' x)) =\n  (if \\<chi> = \\<chi>' then of_nat (order G) else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The isomorphism between a group and its double dual\\<close>"], ["", "text \\<open>\n  Lastly, we show that the double dual of a finite abelian group is naturally isomorphic\n  to the original group via the obvious isomorphism $x\\mapsto (\\chi\\mapsto \\chi(x))$.\n  It is easy to see that this is a homomorphism and that it is injective. The fact \n  $|\\widehat{\\widehat{G}}| = |\\widehat{G}| = |G|$ then shows that it is also surjective.\n\\<close>"], ["", "context finite_comm_group\nbegin"], ["", "definition double_dual_iso :: \"'a \\<Rightarrow> ('a \\<Rightarrow> complex) \\<Rightarrow> complex\" where\n  \"double_dual_iso x = (\\<lambda>\\<chi>. if character G \\<chi> then \\<chi> x else 0)\""], ["", "lemma double_dual_iso_apply [simp]: \"character G \\<chi> \\<Longrightarrow> double_dual_iso x \\<chi> = \\<chi> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. character G \\<chi> \\<Longrightarrow> double_dual_iso x \\<chi> = \\<chi> x", "by (simp add: double_dual_iso_def)"], ["", "lemma character_double_dual_iso [intro]:\n  assumes x: \"x \\<in> carrier G\"\n  shows   \"character (Characters G) (double_dual_iso x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. character (Characters G) (double_dual_iso x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. character (Characters G) (double_dual_iso x)", "interpret G': finite_comm_group \"Characters G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_comm_group (Characters G)", "by (rule finite_comm_group_Characters)"], ["proof (state)\ngoal (1 subgoal):\n 1. character (Characters G) (double_dual_iso x)", "show \"character (Characters G) (double_dual_iso x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. character (Characters G) (double_dual_iso x)", "using x"], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n\ngoal (1 subgoal):\n 1. character (Characters G) (double_dual_iso x)", "by unfold_locales (auto simp: double_dual_iso_def characters_def Characters_def\n                                              principal_char_def character.char_eq_0)"], ["proof (state)\nthis:\n  character (Characters G) (double_dual_iso x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma double_dual_iso_mult [simp]:\n  assumes \"x \\<in> carrier G\" \"y \\<in> carrier G\"\n  shows   \"double_dual_iso (x \\<otimes> y) =\n             double_dual_iso x \\<otimes>\\<^bsub>Characters (Characters G)\\<^esub> double_dual_iso y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. double_dual_iso (x \\<otimes> y) =\n    double_dual_iso x \\<otimes>\\<^bsub>Characters (Characters G)\\<^esub>\n    double_dual_iso y", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n  y \\<in> carrier G\n\ngoal (1 subgoal):\n 1. double_dual_iso (x \\<otimes> y) =\n    double_dual_iso x \\<otimes>\\<^bsub>Characters (Characters G)\\<^esub>\n    double_dual_iso y", "by (auto simp: double_dual_iso_def Characters_def fun_eq_iff character.char_mult)"], ["", "lemma double_dual_iso_one [simp]:\n  \"double_dual_iso \\<one> = principal_char (Characters G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. double_dual_iso \\<one> = principal_char (Characters G)", "by (auto simp: fun_eq_iff double_dual_iso_def principal_char_def\n                 carrier_Characters characters_def character.char_one)"], ["", "lemma inj_double_dual_iso: \"inj_on double_dual_iso (carrier G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on double_dual_iso (carrier G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. inj_on double_dual_iso (carrier G)", "interpret G': finite_comm_group \"Characters G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_comm_group (Characters G)", "by (rule finite_comm_group_Characters)"], ["proof (state)\ngoal (1 subgoal):\n 1. inj_on double_dual_iso (carrier G)", "interpret G'': finite_comm_group \"Characters (Characters G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_comm_group (Characters (Characters G))", "by (rule G'.finite_comm_group_Characters)"], ["proof (state)\ngoal (1 subgoal):\n 1. inj_on double_dual_iso (carrier G)", "have hom: \"double_dual_iso \\<in> hom G (Characters (Characters G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. double_dual_iso \\<in> hom G (Characters (Characters G))", "by (rule homI) (auto simp: carrier_Characters characters_def)"], ["proof (state)\nthis:\n  double_dual_iso \\<in> hom G (Characters (Characters G))\n\ngoal (1 subgoal):\n 1. inj_on double_dual_iso (carrier G)", "have inj_aux: \"x = \\<one>\"\n    if x: \"x \\<in> carrier G\" \"double_dual_iso x = \\<one>\\<^bsub>Characters (Characters G)\\<^esub>\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = \\<one>", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> \\<one> \\<Longrightarrow> False", "assume \"x \\<noteq> \\<one>\""], ["proof (state)\nthis:\n  x \\<noteq> \\<one>\n\ngoal (1 subgoal):\n 1. x \\<noteq> \\<one> \\<Longrightarrow> False", "obtain \\<chi> where \\<chi>: \"character G \\<chi>\" \"\\<chi> x \\<noteq> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x \\<noteq> 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using character_neq_1_exists[OF x(1) \\<open>x \\<noteq> \\<one>\\<close>]"], ["proof (prove)\nusing this:\n  (\\<And>\\<chi>.\n      \\<lbrakk>character G \\<chi>; \\<chi> x \\<noteq> 1\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>\\<chi>.\n        \\<lbrakk>character G \\<chi>; \\<chi> x \\<noteq> 1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  character G \\<chi>\n  \\<chi> x \\<noteq> 1\n\ngoal (1 subgoal):\n 1. x \\<noteq> \\<one> \\<Longrightarrow> False", "from x"], ["proof (chain)\npicking this:\n  x \\<in> carrier G\n  double_dual_iso x = \\<one>\\<^bsub>Characters (Characters G)\\<^esub>", "have \"\\<forall>\\<chi>. (if \\<chi> \\<in> characters G then \\<chi> x else 0) = (if \\<chi> \\<in> characters G then 1 else 0)\""], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n  double_dual_iso x = \\<one>\\<^bsub>Characters (Characters G)\\<^esub>\n\ngoal (1 subgoal):\n 1. \\<forall>\\<chi>.\n       (if \\<chi> \\<in> characters G then \\<chi> x else 0) =\n       (if \\<chi> \\<in> characters G then 1 else 0)", "by (auto simp: double_dual_iso_def Characters_def fun_eq_iff\n                     principal_char_def characters_def)"], ["proof (state)\nthis:\n  \\<forall>\\<chi>.\n     (if \\<chi> \\<in> characters G then \\<chi> x else 0) =\n     (if \\<chi> \\<in> characters G then 1 else 0)\n\ngoal (1 subgoal):\n 1. x \\<noteq> \\<one> \\<Longrightarrow> False", "hence eq1: \"\\<forall>\\<chi>\\<in>characters G. \\<chi> x = 1\""], ["proof (prove)\nusing this:\n  \\<forall>\\<chi>.\n     (if \\<chi> \\<in> characters G then \\<chi> x else 0) =\n     (if \\<chi> \\<in> characters G then 1 else 0)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<chi>\\<in>characters G. \\<chi> x = 1", "by metis"], ["proof (state)\nthis:\n  \\<forall>\\<chi>\\<in>characters G. \\<chi> x = 1\n\ngoal (1 subgoal):\n 1. x \\<noteq> \\<one> \\<Longrightarrow> False", "with \\<chi>"], ["proof (chain)\npicking this:\n  character G \\<chi>\n  \\<chi> x \\<noteq> 1\n  \\<forall>\\<chi>\\<in>characters G. \\<chi> x = 1", "show False"], ["proof (prove)\nusing this:\n  character G \\<chi>\n  \\<chi> x \\<noteq> 1\n  \\<forall>\\<chi>\\<in>characters G. \\<chi> x = 1\n\ngoal (1 subgoal):\n 1. False", "unfolding characters_def"], ["proof (prove)\nusing this:\n  character G \\<chi>\n  \\<chi> x \\<noteq> 1\n  \\<forall>\\<chi>\\<in>Collect (character G). \\<chi> x = 1\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> carrier G;\n   double_dual_iso ?x =\n   \\<one>\\<^bsub>Characters (Characters G)\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> ?x = \\<one>\n\ngoal (1 subgoal):\n 1. inj_on double_dual_iso (carrier G)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> carrier G;\n   double_dual_iso ?x =\n   \\<one>\\<^bsub>Characters (Characters G)\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> ?x = \\<one>\n\ngoal (1 subgoal):\n 1. inj_on double_dual_iso (carrier G)", "using inj_aux hom is_group G''.is_group"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> carrier G;\n   double_dual_iso ?x =\n   \\<one>\\<^bsub>Characters (Characters G)\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> ?x = \\<one>\n  \\<lbrakk>?x \\<in> carrier G;\n   double_dual_iso ?x =\n   \\<one>\\<^bsub>Characters (Characters G)\\<^esub>\\<rbrakk>\n  \\<Longrightarrow> ?x = \\<one>\n  double_dual_iso \\<in> hom G (Characters (Characters G))\n  Group.group G\n  Group.group (Characters (Characters G))\n\ngoal (1 subgoal):\n 1. inj_on double_dual_iso (carrier G)", "by (subst inj_on_one_iff') auto"], ["proof (state)\nthis:\n  inj_on double_dual_iso (carrier G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma double_dual_iso_eq_iff [simp]:\n  \"x \\<in> carrier G \\<Longrightarrow> y \\<in> carrier G \\<Longrightarrow> double_dual_iso x = double_dual_iso y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n    \\<Longrightarrow> (double_dual_iso x = double_dual_iso y) = (x = y)", "by (auto dest: inj_onD[OF inj_double_dual_iso])"], ["", "theorem double_dual_iso: \"double_dual_iso \\<in> iso G (Characters (Characters G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. double_dual_iso \\<in> Group.iso G (Characters (Characters G))", "proof (rule isoI)"], ["proof (state)\ngoal (2 subgoals):\n 1. double_dual_iso \\<in> hom G (Characters (Characters G))\n 2. bij_betw double_dual_iso (carrier G)\n     (carrier (Characters (Characters G)))", "interpret G': finite_comm_group \"Characters G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_comm_group (Characters G)", "by (rule finite_comm_group_Characters)"], ["proof (state)\ngoal (2 subgoals):\n 1. double_dual_iso \\<in> hom G (Characters (Characters G))\n 2. bij_betw double_dual_iso (carrier G)\n     (carrier (Characters (Characters G)))", "interpret G'': finite_comm_group \"Characters (Characters G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_comm_group (Characters (Characters G))", "by (rule G'.finite_comm_group_Characters)"], ["proof (state)\ngoal (2 subgoals):\n 1. double_dual_iso \\<in> hom G (Characters (Characters G))\n 2. bij_betw double_dual_iso (carrier G)\n     (carrier (Characters (Characters G)))", "show hom: \"double_dual_iso \\<in> hom G (Characters (Characters G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. double_dual_iso \\<in> hom G (Characters (Characters G))", "by (rule homI) (auto simp: carrier_Characters characters_def)"], ["proof (state)\nthis:\n  double_dual_iso \\<in> hom G (Characters (Characters G))\n\ngoal (1 subgoal):\n 1. bij_betw double_dual_iso (carrier G)\n     (carrier (Characters (Characters G)))", "show \"bij_betw double_dual_iso (carrier G) (carrier (Characters (Characters G)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw double_dual_iso (carrier G)\n     (carrier (Characters (Characters G)))", "unfolding bij_betw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on double_dual_iso (carrier G) \\<and>\n    double_dual_iso ` carrier G = carrier (Characters (Characters G))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. inj_on double_dual_iso (carrier G)\n 2. double_dual_iso ` carrier G = carrier (Characters (Characters G))", "show \"inj_on double_dual_iso (carrier G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on double_dual_iso (carrier G)", "by (fact inj_double_dual_iso)"], ["proof (state)\nthis:\n  inj_on double_dual_iso (carrier G)\n\ngoal (1 subgoal):\n 1. double_dual_iso ` carrier G = carrier (Characters (Characters G))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. double_dual_iso ` carrier G = carrier (Characters (Characters G))", "show \"double_dual_iso ` carrier G = carrier (Characters (Characters G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. double_dual_iso ` carrier G = carrier (Characters (Characters G))", "proof (rule card_subset_eq)"], ["proof (state)\ngoal (3 subgoals):\n 1. finite (carrier (Characters (Characters G)))\n 2. double_dual_iso ` carrier G\n    \\<subseteq> carrier (Characters (Characters G))\n 3. card (double_dual_iso ` carrier G) =\n    card (carrier (Characters (Characters G)))", "show \"finite (carrier (Characters (Characters G)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (carrier (Characters (Characters G)))", "by (fact G''.fin)"], ["proof (state)\nthis:\n  finite (carrier (Characters (Characters G)))\n\ngoal (2 subgoals):\n 1. double_dual_iso ` carrier G\n    \\<subseteq> carrier (Characters (Characters G))\n 2. card (double_dual_iso ` carrier G) =\n    card (carrier (Characters (Characters G)))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. double_dual_iso ` carrier G\n    \\<subseteq> carrier (Characters (Characters G))\n 2. card (double_dual_iso ` carrier G) =\n    card (carrier (Characters (Characters G)))", "have \"card (carrier (Characters (Characters G))) = card (carrier G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (carrier (Characters (Characters G))) = card (carrier G)", "by (simp add: carrier_Characters G'.card_characters card_characters order_def)"], ["proof (state)\nthis:\n  card (carrier (Characters (Characters G))) = card (carrier G)\n\ngoal (2 subgoals):\n 1. double_dual_iso ` carrier G\n    \\<subseteq> carrier (Characters (Characters G))\n 2. card (double_dual_iso ` carrier G) =\n    card (carrier (Characters (Characters G)))", "also"], ["proof (state)\nthis:\n  card (carrier (Characters (Characters G))) = card (carrier G)\n\ngoal (2 subgoals):\n 1. double_dual_iso ` carrier G\n    \\<subseteq> carrier (Characters (Characters G))\n 2. card (double_dual_iso ` carrier G) =\n    card (carrier (Characters (Characters G)))", "have \"\\<dots> = card (double_dual_iso ` carrier G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (carrier G) = card (double_dual_iso ` carrier G)", "by (intro card_image [symmetric] inj_double_dual_iso)"], ["proof (state)\nthis:\n  card (carrier G) = card (double_dual_iso ` carrier G)\n\ngoal (2 subgoals):\n 1. double_dual_iso ` carrier G\n    \\<subseteq> carrier (Characters (Characters G))\n 2. card (double_dual_iso ` carrier G) =\n    card (carrier (Characters (Characters G)))", "finally"], ["proof (chain)\npicking this:\n  card (carrier (Characters (Characters G))) =\n  card (double_dual_iso ` carrier G)", "show \"card (double_dual_iso ` carrier G) =\n                      card (carrier (Characters (Characters G)))\""], ["proof (prove)\nusing this:\n  card (carrier (Characters (Characters G))) =\n  card (double_dual_iso ` carrier G)\n\ngoal (1 subgoal):\n 1. card (double_dual_iso ` carrier G) =\n    card (carrier (Characters (Characters G)))", ".."], ["proof (state)\nthis:\n  card (double_dual_iso ` carrier G) =\n  card (carrier (Characters (Characters G)))\n\ngoal (1 subgoal):\n 1. double_dual_iso ` carrier G\n    \\<subseteq> carrier (Characters (Characters G))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. double_dual_iso ` carrier G\n    \\<subseteq> carrier (Characters (Characters G))", "show \"double_dual_iso ` carrier G \\<subseteq> carrier (Characters (Characters G))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. double_dual_iso ` carrier G\n    \\<subseteq> carrier (Characters (Characters G))", "using hom"], ["proof (prove)\nusing this:\n  double_dual_iso \\<in> hom G (Characters (Characters G))\n\ngoal (1 subgoal):\n 1. double_dual_iso ` carrier G\n    \\<subseteq> carrier (Characters (Characters G))", "by (auto simp: hom_def)"], ["proof (state)\nthis:\n  double_dual_iso ` carrier G\n  \\<subseteq> carrier (Characters (Characters G))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  double_dual_iso ` carrier G = carrier (Characters (Characters G))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bij_betw double_dual_iso (carrier G) (carrier (Characters (Characters G)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma double_dual_is_iso: \"Characters (Characters G) \\<cong> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Characters (Characters G) \\<cong> G", "by (rule iso_sym) (use double_dual_iso in \\<open>auto simp: is_iso_def\\<close>)"], ["", "text \\<open>\n  The second orthogonality relation follows from the first one via Pontryagin duality:\n\\<close>"], ["", "theorem sum_characters:\n  assumes x: \"x \\<in> carrier G\"\n  shows   \"(\\<Sum>\\<chi>\\<in>characters G. \\<chi> x) = (if x = \\<one> then of_nat (order G) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x) =\n    (if x = \\<one> then of_nat (order G) else 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x) =\n    (if x = \\<one> then of_nat (order G) else 0)", "interpret G': finite_comm_group \"Characters G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_comm_group (Characters G)", "by (rule finite_comm_group_Characters)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x) =\n    (if x = \\<one> then of_nat (order G) else 0)", "interpret x: character \"Characters G\" \"double_dual_iso x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. character (Characters G) (double_dual_iso x)", "using x"], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n\ngoal (1 subgoal):\n 1. character (Characters G) (double_dual_iso x)", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x) =\n    (if x = \\<one> then of_nat (order G) else 0)", "from x.sum_character"], ["proof (chain)\npicking this:\n  sum (double_dual_iso x) (carrier (Characters G)) =\n  (if double_dual_iso x = principal_char (Characters G)\n   then of_nat (order (Characters G)) else 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  sum (double_dual_iso x) (carrier (Characters G)) =\n  (if double_dual_iso x = principal_char (Characters G)\n   then of_nat (order (Characters G)) else 0)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x) =\n    (if x = \\<one> then of_nat (order G) else 0)", "using double_dual_iso_eq_iff[of x \\<one>] x"], ["proof (prove)\nusing this:\n  sum (double_dual_iso x) (carrier (Characters G)) =\n  (if double_dual_iso x = principal_char (Characters G)\n   then of_nat (order (Characters G)) else 0)\n  \\<lbrakk>x \\<in> carrier G; \\<one> \\<in> carrier G\\<rbrakk>\n  \\<Longrightarrow> (double_dual_iso x = double_dual_iso \\<one>) =\n                    (x = \\<one>)\n  x \\<in> carrier G\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x) =\n    (if x = \\<one> then of_nat (order G) else 0)", "by (auto simp: characters_def carrier_Characters simp del: double_dual_iso_eq_iff)"], ["proof (state)\nthis:\n  (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x) =\n  (if x = \\<one> then of_nat (order G) else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary character_orthogonality2:\n  assumes \"x \\<in> carrier G\" \"y \\<in> carrier G\"\n  shows   \"(\\<Sum>\\<chi>\\<in>characters G. \\<chi> x * cnj (\\<chi> y)) = (if x = y then of_nat (order G) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x * cnj (\\<chi> y)) =\n    (if x = y then of_nat (order G) else 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x * cnj (\\<chi> y)) =\n    (if x = y then of_nat (order G) else 0)", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> carrier G\n  y \\<in> carrier G", "have \"(\\<Sum>\\<chi>\\<in>characters G. \\<chi> x * cnj (\\<chi> y)) = (\\<Sum>\\<chi>\\<in>characters G. \\<chi> (x \\<otimes> inv y))\""], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n  y \\<in> carrier G\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x * cnj (\\<chi> y)) =\n    (\\<Sum>\\<chi>\\<in>characters G. \\<chi> (x \\<otimes> inv y))", "by (intro sum.cong) (simp_all add: character.char_inv character.char_mult characters_def)"], ["proof (state)\nthis:\n  (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x * cnj (\\<chi> y)) =\n  (\\<Sum>\\<chi>\\<in>characters G. \\<chi> (x \\<otimes> inv y))\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x * cnj (\\<chi> y)) =\n    (if x = y then of_nat (order G) else 0)", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x * cnj (\\<chi> y)) =\n  (\\<Sum>\\<chi>\\<in>characters G. \\<chi> (x \\<otimes> inv y))\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x * cnj (\\<chi> y)) =\n    (if x = y then of_nat (order G) else 0)", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> carrier G\n  y \\<in> carrier G", "have \"\\<dots> = (if x \\<otimes> inv y = \\<one> then of_nat (order G) else 0)\""], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n  y \\<in> carrier G\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>characters G. \\<chi> (x \\<otimes> inv y)) =\n    (if x \\<otimes> inv y = \\<one> then of_nat (order G) else 0)", "by (intro sum_characters) auto"], ["proof (state)\nthis:\n  (\\<Sum>\\<chi>\\<in>characters G. \\<chi> (x \\<otimes> inv y)) =\n  (if x \\<otimes> inv y = \\<one> then of_nat (order G) else 0)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x * cnj (\\<chi> y)) =\n    (if x = y then of_nat (order G) else 0)", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<chi>\\<in>characters G. \\<chi> (x \\<otimes> inv y)) =\n  (if x \\<otimes> inv y = \\<one> then of_nat (order G) else 0)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x * cnj (\\<chi> y)) =\n    (if x = y then of_nat (order G) else 0)", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> carrier G\n  y \\<in> carrier G", "have \"x \\<otimes> inv y = \\<one> \\<longleftrightarrow> x = y\""], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n  y \\<in> carrier G\n\ngoal (1 subgoal):\n 1. (x \\<otimes> inv y = \\<one>) = (x = y)", "using inv_equality[of x \"inv y\"]"], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n  y \\<in> carrier G\n  \\<lbrakk>x \\<otimes> inv y = \\<one>; inv y \\<in> carrier G;\n   x \\<in> carrier G\\<rbrakk>\n  \\<Longrightarrow> inv (inv y) = x\n\ngoal (1 subgoal):\n 1. (x \\<otimes> inv y = \\<one>) = (x = y)", "by auto"], ["proof (state)\nthis:\n  (x \\<otimes> inv y = \\<one>) = (x = y)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x * cnj (\\<chi> y)) =\n    (if x = y then of_nat (order G) else 0)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x * cnj (\\<chi> y)) =\n  (if x = y then of_nat (order G) else 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x * cnj (\\<chi> y)) =\n  (if x = y then of_nat (order G) else 0)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x * cnj (\\<chi> y)) =\n    (if x = y then of_nat (order G) else 0)", "."], ["proof (state)\nthis:\n  (\\<Sum>\\<chi>\\<in>characters G. \\<chi> x * cnj (\\<chi> y)) =\n  (if x = y then of_nat (order G) else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}