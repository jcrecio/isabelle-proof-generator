{"file_name": "/home/qj213/afp-2021-10-22/thys/Dirichlet_L/Dirichlet_Characters.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Dirichlet_L", "problem_names": ["lemma principal_dchar_coprime [simp]: \"coprime k n \\<Longrightarrow> principal_dchar n k = 1\"\n  and principal_dchar_not_coprime [simp]: \"\\<not>coprime k n \\<Longrightarrow> principal_dchar n k = 0\"", "lemma principal_dchar_1 [simp]: \"principal_dchar n 1 = 1\"", "lemma principal_dchar_minus1 [simp]:\n  assumes \"n > 0\"\n  shows   \"principal_dchar n (n - Suc 0) = 1\"", "lemma mod_in_totatives: \"n > 1 \\<Longrightarrow> a mod n \\<in> totatives n \\<longleftrightarrow> coprime a n\"", "lemma order [simp]: \"order G = totient n\"", "lemma totatives_mod [simp]: \"x \\<in> totatives n \\<Longrightarrow> x mod n = x\"", "lemma principal_dchar_minus1 [simp]: \"principal_dchar n (n - Suc 0) = 1\"", "lemma dc2c_c2dc [simp]:\n  assumes \"character G \\<chi>\"\n  shows   \"dc2c (c2dc \\<chi>) = \\<chi>\"", "lemma zero_eq_0 [simp]: \"\\<chi> 0 = 0\"", "lemma Suc_0 [simp]: \"\\<chi> (Suc 0) = 1\"", "lemma periodic_mult: \"\\<chi> (a + m * n) = \\<chi> a\"", "lemma minus_one_periodic [simp]:\n  assumes \"k > 0\"\n  shows   \"\\<chi> (k * n - 1) = \\<chi> (n - 1)\"", "lemma cong:\n  assumes \"[a = b] (mod n)\"\n  shows   \"\\<chi> a = \\<chi> b\"", "lemma mod [simp]: \"\\<chi> (a mod n) = \\<chi> a\"", "lemma mult [simp]: \"\\<chi> (a * b) = \\<chi> a * \\<chi> b\"", "lemma eq_zero_iff: \"\\<chi> x = 0 \\<longleftrightarrow> \\<not>coprime x n\"", "lemma minus_one': \"\\<chi> (n - 1) \\<in> {-1, 1}\"", "lemma c2dc_dc2c [simp]: \"c2dc (dc2c \\<chi>) = \\<chi>\"", "lemma character_dc2c: \"character G (dc2c \\<chi>)\"", "lemma dcharacter_inv_character [intro]: \"dcharacter n (inv_character \\<chi>)\"", "lemma norm: \"norm (\\<chi> k) = (if coprime k n then 1 else 0)\"", "lemma norm_le_1: \"norm (\\<chi> k) \\<le> 1\"", "lemma character_dc2c: \"dcharacter n \\<chi> \\<Longrightarrow> character G (dc2c \\<chi>)\"", "lemma dcharacter_c2dc: \n  assumes \"character G \\<chi>\"\n  shows   \"dcharacter n (c2dc \\<chi>)\"", "lemma principal_dchar_altdef: \"principal_dchar n = c2dc (principal_char G)\"", "lemma c2dc_principal [simp]: \"c2dc (principal_char G) = principal_dchar n\"", "lemma dc2c_principal [simp]: \"dc2c (principal_dchar n) = principal_char G\"", "lemma bij_betw_dcharacters_characters:\n  \"bij_betw dc2c (dcharacters n) (characters G)\"", "lemma bij_betw_characters_dcharacters:\n  \"bij_betw c2dc (characters G) (dcharacters n)\"", "lemma finite_dcharacters [intro]: \"finite (dcharacters n)\"", "lemma card_dcharacters [simp]: \"card (dcharacters n) = totient n\"", "lemma inv_character_eq_principal_dchar_iff [simp]: \n  \"inv_character \\<chi> = principal_dchar n \\<longleftrightarrow> \\<chi> = principal_dchar n\"", "lemma (in dcharacter) sum_dcharacter_totatives:\n  \"(\\<Sum>x\\<in>totatives n. \\<chi> x) = (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)\"", "lemma (in dcharacter) sum_dcharacter_block:\n  \"(\\<Sum>x<n. \\<chi> x) = (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)\"", "lemma (in dcharacter) sum_dcharacter_block':\n  \"sum \\<chi> {Suc 0..n} = (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)\"", "lemma (in dcharacter) sum_lessThan_dcharacter:\n  assumes \"\\<chi> \\<noteq> principal_dchar n\"\n  shows   \"(\\<Sum>x<m. \\<chi> x) = (\\<Sum>x<m mod n. \\<chi> x)\"", "lemma (in dcharacter) sum_dcharacter_lessThan_le:\n  assumes \"\\<chi> \\<noteq> principal_dchar n\"\n  shows   \"norm (\\<Sum>x<m. \\<chi> x) \\<le> totient n\"", "lemma (in dcharacter) sum_dcharacter_atMost_le:\n  assumes \"\\<chi> \\<noteq> principal_dchar n\"\n  shows   \"norm (\\<Sum>x\\<le>m. \\<chi> x) \\<le> totient n\"", "lemma (in residues_nat) sum_dcharacters:\n  \"(\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) = (if [x = 1] (mod n) then of_nat (totient n) else 0)\"", "lemma (in dcharacter) even_dcharacter_linear_sum_eq_0 [simp]:\n  assumes \"\\<chi> \\<noteq> principal_dchar n\" and \"\\<chi> (n - 1) = 1\"\n  shows   \"(\\<Sum>k=Suc 0..<n. of_nat k * \\<chi> k) = 0\""], "translations": [["", "lemma principal_dchar_coprime [simp]: \"coprime k n \\<Longrightarrow> principal_dchar n k = 1\"\n  and principal_dchar_not_coprime [simp]: \"\\<not>coprime k n \\<Longrightarrow> principal_dchar n k = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (coprime k n \\<Longrightarrow> principal_dchar n k = 1) &&&\n    (\\<not> coprime k n \\<Longrightarrow> principal_dchar n k = 0)", "by (simp_all add: principal_dchar_def)"], ["", "lemma principal_dchar_1 [simp]: \"principal_dchar n 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. principal_dchar n 1 = 1", "by simp"], ["", "lemma principal_dchar_minus1 [simp]:\n  assumes \"n > 0\"\n  shows   \"principal_dchar n (n - Suc 0) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. principal_dchar n (n - Suc 0) = 1", "proof (cases \"n = 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 1 \\<Longrightarrow> principal_dchar n (n - Suc 0) = 1\n 2. n \\<noteq> 1 \\<Longrightarrow> principal_dchar n (n - Suc 0) = 1", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 1\n\ngoal (2 subgoals):\n 1. n = 1 \\<Longrightarrow> principal_dchar n (n - Suc 0) = 1\n 2. n \\<noteq> 1 \\<Longrightarrow> principal_dchar n (n - Suc 0) = 1", "with assms"], ["proof (chain)\npicking this:\n  0 < n\n  n \\<noteq> 1", "have \"n > 1\""], ["proof (prove)\nusing this:\n  0 < n\n  n \\<noteq> 1\n\ngoal (1 subgoal):\n 1. 1 < n", "by linarith"], ["proof (state)\nthis:\n  1 < n\n\ngoal (2 subgoals):\n 1. n = 1 \\<Longrightarrow> principal_dchar n (n - Suc 0) = 1\n 2. n \\<noteq> 1 \\<Longrightarrow> principal_dchar n (n - Suc 0) = 1", "thus ?thesis"], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. principal_dchar n (n - Suc 0) = 1", "using coprime_diff_one_left_nat[of n]"], ["proof (prove)\nusing this:\n  1 < n\n  0 < n \\<Longrightarrow> coprime (n - 1) n\n\ngoal (1 subgoal):\n 1. principal_dchar n (n - Suc 0) = 1", "by (intro principal_dchar_coprime) auto"], ["proof (state)\nthis:\n  principal_dchar n (n - Suc 0) = 1\n\ngoal (1 subgoal):\n 1. n = 1 \\<Longrightarrow> principal_dchar n (n - Suc 0) = 1", "qed auto"], ["", "lemma mod_in_totatives: \"n > 1 \\<Longrightarrow> a mod n \\<in> totatives n \\<longleftrightarrow> coprime a n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < n \\<Longrightarrow> (a mod n \\<in> totatives n) = coprime a n", "by (auto simp: totatives_def mod_greater_zero_iff_not_dvd dest: coprime_common_divisor_nat)"], ["", "bundle dcharacter_syntax\nbegin"], ["", "notation principal_dchar (\"\\<chi>\\<^sub>0\\<index>\")"], ["", "end"], ["", "locale residues_nat =\n  fixes n :: nat (structure) and G\n  assumes n: \"n > 1\"\n  defines \"G \\<equiv> residue_mult_group n\"\nbegin"], ["", "lemma order [simp]: \"order G = totient n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order G = totient n", "by (simp add: order_def G_def totient_def residue_mult_group_def)"], ["", "lemma totatives_mod [simp]: \"x \\<in> totatives n \\<Longrightarrow> x mod n = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> totatives n \\<Longrightarrow> x mod n = x", "using n"], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. x \\<in> totatives n \\<Longrightarrow> x mod n = x", "by (intro mod_less) (auto simp: totatives_def intro!: order.not_eq_order_implies_strict)"], ["", "lemma principal_dchar_minus1 [simp]: \"principal_dchar n (n - Suc 0) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. principal_dchar n (n - Suc 0) = 1", "using principal_dchar_minus1[of n] n"], ["proof (prove)\nusing this:\n  0 < n \\<Longrightarrow> principal_dchar n (n - Suc 0) = 1\n  1 < n\n\ngoal (1 subgoal):\n 1. principal_dchar n (n - Suc 0) = 1", "by simp"], ["", "sublocale finite_comm_group G"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_comm_group G", "proof"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y \\<in> carrier G\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G;\n        z \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub>\n                         y \\<otimes>\\<^bsub>G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>G\\<^esub>\n                         (y \\<otimes>\\<^bsub>G\\<^esub> z)\n 3. \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G\n 4. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       \\<one>\\<^bsub>G\\<^esub> \\<otimes>\\<^bsub>G\\<^esub> x = x\n 5. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>G\\<^esub> \\<one>\\<^bsub>G\\<^esub> = x\n 6. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>G\\<^esub> x\n 7. carrier G \\<subseteq> Units G\n 8. finite (carrier G)", "fix x y"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y \\<in> carrier G\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G;\n        z \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub>\n                         y \\<otimes>\\<^bsub>G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>G\\<^esub>\n                         (y \\<otimes>\\<^bsub>G\\<^esub> z)\n 3. \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G\n 4. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       \\<one>\\<^bsub>G\\<^esub> \\<otimes>\\<^bsub>G\\<^esub> x = x\n 5. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>G\\<^esub> \\<one>\\<^bsub>G\\<^esub> = x\n 6. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>G\\<^esub> x\n 7. carrier G \\<subseteq> Units G\n 8. finite (carrier G)", "assume xy: \"x \\<in> carrier G\" \"y \\<in> carrier G\""], ["proof (state)\nthis:\n  x \\<in> carrier G\n  y \\<in> carrier G\n\ngoal (8 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y \\<in> carrier G\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G;\n        z \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub>\n                         y \\<otimes>\\<^bsub>G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>G\\<^esub>\n                         (y \\<otimes>\\<^bsub>G\\<^esub> z)\n 3. \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G\n 4. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       \\<one>\\<^bsub>G\\<^esub> \\<otimes>\\<^bsub>G\\<^esub> x = x\n 5. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>G\\<^esub> \\<one>\\<^bsub>G\\<^esub> = x\n 6. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>G\\<^esub> x\n 7. carrier G \\<subseteq> Units G\n 8. finite (carrier G)", "hence \"coprime (x * y) n\""], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n  y \\<in> carrier G\n\ngoal (1 subgoal):\n 1. coprime (x * y) n", "by (auto simp: G_def residue_mult_group_def totatives_def)"], ["proof (state)\nthis:\n  coprime (x * y) n\n\ngoal (8 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y \\<in> carrier G\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G;\n        z \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub>\n                         y \\<otimes>\\<^bsub>G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>G\\<^esub>\n                         (y \\<otimes>\\<^bsub>G\\<^esub> z)\n 3. \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G\n 4. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       \\<one>\\<^bsub>G\\<^esub> \\<otimes>\\<^bsub>G\\<^esub> x = x\n 5. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>G\\<^esub> \\<one>\\<^bsub>G\\<^esub> = x\n 6. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>G\\<^esub> x\n 7. carrier G \\<subseteq> Units G\n 8. finite (carrier G)", "with xy and n"], ["proof (chain)\npicking this:\n  x \\<in> carrier G\n  y \\<in> carrier G\n  1 < n\n  coprime (x * y) n", "show \"x \\<otimes>\\<^bsub>G\\<^esub> y \\<in> carrier G\""], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n  y \\<in> carrier G\n  1 < n\n  coprime (x * y) n\n\ngoal (1 subgoal):\n 1. x \\<otimes>\\<^bsub>G\\<^esub> y \\<in> carrier G", "using coprime_common_divisor_nat[of \"x * y\" n]"], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n  y \\<in> carrier G\n  1 < n\n  coprime (x * y) n\n  \\<lbrakk>coprime (x * y) n; ?x dvd x * y; ?x dvd n\\<rbrakk>\n  \\<Longrightarrow> ?x = 1\n\ngoal (1 subgoal):\n 1. x \\<otimes>\\<^bsub>G\\<^esub> y \\<in> carrier G", "by (auto simp: G_def residue_mult_group_def totatives_def\n                   mod_greater_zero_iff_not_dvd le_Suc_eq simp del: coprime_mult_left_iff)"], ["proof (state)\nthis:\n  x \\<otimes>\\<^bsub>G\\<^esub> y \\<in> carrier G\n\ngoal (7 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G;\n        z \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub>\n                         y \\<otimes>\\<^bsub>G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>G\\<^esub>\n                         (y \\<otimes>\\<^bsub>G\\<^esub> z)\n 2. \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G\n 3. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       \\<one>\\<^bsub>G\\<^esub> \\<otimes>\\<^bsub>G\\<^esub> x = x\n 4. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>G\\<^esub> \\<one>\\<^bsub>G\\<^esub> = x\n 5. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>G\\<^esub> x\n 6. carrier G \\<subseteq> Units G\n 7. finite (carrier G)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G;\n        z \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub>\n                         y \\<otimes>\\<^bsub>G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>G\\<^esub>\n                         (y \\<otimes>\\<^bsub>G\\<^esub> z)\n 2. \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G\n 3. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       \\<one>\\<^bsub>G\\<^esub> \\<otimes>\\<^bsub>G\\<^esub> x = x\n 4. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>G\\<^esub> \\<one>\\<^bsub>G\\<^esub> = x\n 5. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>G\\<^esub> x\n 6. carrier G \\<subseteq> Units G\n 7. finite (carrier G)", "fix x y z"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G;\n        z \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub>\n                         y \\<otimes>\\<^bsub>G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>G\\<^esub>\n                         (y \\<otimes>\\<^bsub>G\\<^esub> z)\n 2. \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G\n 3. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       \\<one>\\<^bsub>G\\<^esub> \\<otimes>\\<^bsub>G\\<^esub> x = x\n 4. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>G\\<^esub> \\<one>\\<^bsub>G\\<^esub> = x\n 5. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>G\\<^esub> x\n 6. carrier G \\<subseteq> Units G\n 7. finite (carrier G)", "assume xyz: \"x \\<in> carrier G\" \"y \\<in> carrier G\" \"z \\<in> carrier G\""], ["proof (state)\nthis:\n  x \\<in> carrier G\n  y \\<in> carrier G\n  z \\<in> carrier G\n\ngoal (7 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G;\n        z \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub>\n                         y \\<otimes>\\<^bsub>G\\<^esub>\n                         z =\n                         x \\<otimes>\\<^bsub>G\\<^esub>\n                         (y \\<otimes>\\<^bsub>G\\<^esub> z)\n 2. \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G\n 3. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       \\<one>\\<^bsub>G\\<^esub> \\<otimes>\\<^bsub>G\\<^esub> x = x\n 4. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>G\\<^esub> \\<one>\\<^bsub>G\\<^esub> = x\n 5. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>G\\<^esub> x\n 6. carrier G \\<subseteq> Units G\n 7. finite (carrier G)", "thus \"x \\<otimes>\\<^bsub>G\\<^esub> y \\<otimes>\\<^bsub>G\\<^esub> z = x \\<otimes>\\<^bsub>G\\<^esub> (y \\<otimes>\\<^bsub>G\\<^esub> z)\""], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n  y \\<in> carrier G\n  z \\<in> carrier G\n\ngoal (1 subgoal):\n 1. x \\<otimes>\\<^bsub>G\\<^esub> y \\<otimes>\\<^bsub>G\\<^esub> z =\n    x \\<otimes>\\<^bsub>G\\<^esub> (y \\<otimes>\\<^bsub>G\\<^esub> z)", "by (auto simp: G_def residue_mult_group_def mult_ac mod_mult_right_eq)"], ["proof (state)\nthis:\n  x \\<otimes>\\<^bsub>G\\<^esub> y \\<otimes>\\<^bsub>G\\<^esub> z =\n  x \\<otimes>\\<^bsub>G\\<^esub> (y \\<otimes>\\<^bsub>G\\<^esub> z)\n\ngoal (6 subgoals):\n 1. \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G\n 2. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       \\<one>\\<^bsub>G\\<^esub> \\<otimes>\\<^bsub>G\\<^esub> x = x\n 3. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>G\\<^esub> \\<one>\\<^bsub>G\\<^esub> = x\n 4. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>G\\<^esub> x\n 5. carrier G \\<subseteq> Units G\n 6. finite (carrier G)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G\n 2. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       \\<one>\\<^bsub>G\\<^esub> \\<otimes>\\<^bsub>G\\<^esub> x = x\n 3. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>G\\<^esub> \\<one>\\<^bsub>G\\<^esub> = x\n 4. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>G\\<^esub> x\n 5. carrier G \\<subseteq> Units G\n 6. finite (carrier G)", "fix x"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G\n 2. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       \\<one>\\<^bsub>G\\<^esub> \\<otimes>\\<^bsub>G\\<^esub> x = x\n 3. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>G\\<^esub> \\<one>\\<^bsub>G\\<^esub> = x\n 4. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>G\\<^esub> x\n 5. carrier G \\<subseteq> Units G\n 6. finite (carrier G)", "assume \"x \\<in> carrier G\""], ["proof (state)\nthis:\n  x \\<in> carrier G\n\ngoal (6 subgoals):\n 1. \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G\n 2. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       \\<one>\\<^bsub>G\\<^esub> \\<otimes>\\<^bsub>G\\<^esub> x = x\n 3. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>G\\<^esub> \\<one>\\<^bsub>G\\<^esub> = x\n 4. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>G\\<^esub> x\n 5. carrier G \\<subseteq> Units G\n 6. finite (carrier G)", "with n"], ["proof (chain)\npicking this:\n  1 < n\n  x \\<in> carrier G", "have \"x < n\""], ["proof (prove)\nusing this:\n  1 < n\n  x \\<in> carrier G\n\ngoal (1 subgoal):\n 1. x < n", "by (auto simp: G_def residue_mult_group_def totatives_def \n                               intro!: order.not_eq_order_implies_strict)"], ["proof (state)\nthis:\n  x < n\n\ngoal (6 subgoals):\n 1. \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G\n 2. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       \\<one>\\<^bsub>G\\<^esub> \\<otimes>\\<^bsub>G\\<^esub> x = x\n 3. \\<And>x.\n       x \\<in> carrier G \\<Longrightarrow>\n       x \\<otimes>\\<^bsub>G\\<^esub> \\<one>\\<^bsub>G\\<^esub> = x\n 4. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>G\\<^esub> x\n 5. carrier G \\<subseteq> Units G\n 6. finite (carrier G)", "thus \" \\<one>\\<^bsub>G\\<^esub> \\<otimes>\\<^bsub>G\\<^esub> x = x\" and \"x \\<otimes>\\<^bsub>G\\<^esub> \\<one>\\<^bsub>G\\<^esub> = x\""], ["proof (prove)\nusing this:\n  x < n\n\ngoal (1 subgoal):\n 1. \\<one>\\<^bsub>G\\<^esub> \\<otimes>\\<^bsub>G\\<^esub> x = x &&&\n    x \\<otimes>\\<^bsub>G\\<^esub> \\<one>\\<^bsub>G\\<^esub> = x", "by (simp_all add: G_def residue_mult_group_def)"], ["proof (state)\nthis:\n  \\<one>\\<^bsub>G\\<^esub> \\<otimes>\\<^bsub>G\\<^esub> x = x\n  x \\<otimes>\\<^bsub>G\\<^esub> \\<one>\\<^bsub>G\\<^esub> = x\n\ngoal (4 subgoals):\n 1. \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>G\\<^esub> x\n 3. carrier G \\<subseteq> Units G\n 4. finite (carrier G)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>G\\<^esub> x\n 3. carrier G \\<subseteq> Units G\n 4. finite (carrier G)", "have \"x \\<in> Units G\" if \"x \\<in> carrier G\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Units G", "unfolding Units_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {y \\<in> carrier G.\n             \\<exists>x\\<in>carrier G.\n                x \\<otimes>\\<^bsub>G\\<^esub> y =\n                \\<one>\\<^bsub>G\\<^esub> \\<and>\n                y \\<otimes>\\<^bsub>G\\<^esub> x = \\<one>\\<^bsub>G\\<^esub>}", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> carrier G\n 2. \\<exists>xa\\<in>carrier G.\n       xa \\<otimes>\\<^bsub>G\\<^esub> x = \\<one>\\<^bsub>G\\<^esub> \\<and>\n       x \\<otimes>\\<^bsub>G\\<^esub> xa = \\<one>\\<^bsub>G\\<^esub>", "from that"], ["proof (chain)\npicking this:\n  x \\<in> carrier G", "have \"x > 0\" \"coprime x n\""], ["proof (prove)\nusing this:\n  x \\<in> carrier G\n\ngoal (1 subgoal):\n 1. 0 < x &&& coprime x n", "by (auto simp: G_def residue_mult_group_def totatives_def)"], ["proof (state)\nthis:\n  0 < x\n  coprime x n\n\ngoal (2 subgoals):\n 1. x \\<in> carrier G\n 2. \\<exists>xa\\<in>carrier G.\n       xa \\<otimes>\\<^bsub>G\\<^esub> x = \\<one>\\<^bsub>G\\<^esub> \\<and>\n       x \\<otimes>\\<^bsub>G\\<^esub> xa = \\<one>\\<^bsub>G\\<^esub>", "from \\<open>coprime x n\\<close> and n"], ["proof (chain)\npicking this:\n  coprime x n\n  1 < n", "obtain y where y: \"y < n\" \"[x * y = 1] (mod n)\""], ["proof (prove)\nusing this:\n  coprime x n\n  1 < n\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y < n; [x * y = 1] (mod n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (subst (asm) coprime_iff_invertible'_nat) auto"], ["proof (state)\nthis:\n  y < n\n  [x * y = 1] (mod n)\n\ngoal (2 subgoals):\n 1. x \\<in> carrier G\n 2. \\<exists>xa\\<in>carrier G.\n       xa \\<otimes>\\<^bsub>G\\<^esub> x = \\<one>\\<^bsub>G\\<^esub> \\<and>\n       x \\<otimes>\\<^bsub>G\\<^esub> xa = \\<one>\\<^bsub>G\\<^esub>", "hence \"x * y mod n = 1\""], ["proof (prove)\nusing this:\n  y < n\n  [x * y = 1] (mod n)\n\ngoal (1 subgoal):\n 1. x * y mod n = 1", "using n"], ["proof (prove)\nusing this:\n  y < n\n  [x * y = 1] (mod n)\n  1 < n\n\ngoal (1 subgoal):\n 1. x * y mod n = 1", "by (simp add: cong_def mult_ac)"], ["proof (state)\nthis:\n  x * y mod n = 1\n\ngoal (2 subgoals):\n 1. x \\<in> carrier G\n 2. \\<exists>xa\\<in>carrier G.\n       xa \\<otimes>\\<^bsub>G\\<^esub> x = \\<one>\\<^bsub>G\\<^esub> \\<and>\n       x \\<otimes>\\<^bsub>G\\<^esub> xa = \\<one>\\<^bsub>G\\<^esub>", "moreover"], ["proof (state)\nthis:\n  x * y mod n = 1\n\ngoal (2 subgoals):\n 1. x \\<in> carrier G\n 2. \\<exists>xa\\<in>carrier G.\n       xa \\<otimes>\\<^bsub>G\\<^esub> x = \\<one>\\<^bsub>G\\<^esub> \\<and>\n       x \\<otimes>\\<^bsub>G\\<^esub> xa = \\<one>\\<^bsub>G\\<^esub>", "from y"], ["proof (chain)\npicking this:\n  y < n\n  [x * y = 1] (mod n)", "have \"coprime y n\""], ["proof (prove)\nusing this:\n  y < n\n  [x * y = 1] (mod n)\n\ngoal (1 subgoal):\n 1. coprime y n", "by (subst coprime_iff_invertible_nat) (auto simp: mult.commute)"], ["proof (state)\nthis:\n  coprime y n\n\ngoal (2 subgoals):\n 1. x \\<in> carrier G\n 2. \\<exists>xa\\<in>carrier G.\n       xa \\<otimes>\\<^bsub>G\\<^esub> x = \\<one>\\<^bsub>G\\<^esub> \\<and>\n       x \\<otimes>\\<^bsub>G\\<^esub> xa = \\<one>\\<^bsub>G\\<^esub>", "ultimately"], ["proof (chain)\npicking this:\n  x * y mod n = 1\n  coprime y n", "show \"\\<exists>a\\<in>carrier G. a \\<otimes>\\<^bsub>G\\<^esub> x = \\<one>\\<^bsub>G\\<^esub> \\<and> x \\<otimes>\\<^bsub>G\\<^esub> a = \\<one>\\<^bsub>G\\<^esub>\""], ["proof (prove)\nusing this:\n  x * y mod n = 1\n  coprime y n\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier G.\n       a \\<otimes>\\<^bsub>G\\<^esub> x = \\<one>\\<^bsub>G\\<^esub> \\<and>\n       x \\<otimes>\\<^bsub>G\\<^esub> a = \\<one>\\<^bsub>G\\<^esub>", "using y"], ["proof (prove)\nusing this:\n  x * y mod n = 1\n  coprime y n\n  y < n\n  [x * y = 1] (mod n)\n\ngoal (1 subgoal):\n 1. \\<exists>a\\<in>carrier G.\n       a \\<otimes>\\<^bsub>G\\<^esub> x = \\<one>\\<^bsub>G\\<^esub> \\<and>\n       x \\<otimes>\\<^bsub>G\\<^esub> a = \\<one>\\<^bsub>G\\<^esub>", "by (intro bexI[of _ y]) \n         (auto simp: G_def residue_mult_group_def totatives_def mult.commute intro!: Nat.gr0I)"], ["proof (state)\nthis:\n  \\<exists>a\\<in>carrier G.\n     a \\<otimes>\\<^bsub>G\\<^esub> x = \\<one>\\<^bsub>G\\<^esub> \\<and>\n     x \\<otimes>\\<^bsub>G\\<^esub> a = \\<one>\\<^bsub>G\\<^esub>\n\ngoal (1 subgoal):\n 1. x \\<in> carrier G", "qed fact+"], ["proof (state)\nthis:\n  ?x \\<in> carrier G \\<Longrightarrow> ?x \\<in> Units G\n\ngoal (4 subgoals):\n 1. \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>G\\<^esub> x\n 3. carrier G \\<subseteq> Units G\n 4. finite (carrier G)", "thus \"carrier G \\<subseteq> Units G\""], ["proof (prove)\nusing this:\n  ?x \\<in> carrier G \\<Longrightarrow> ?x \\<in> Units G\n\ngoal (1 subgoal):\n 1. carrier G \\<subseteq> Units G", ".."], ["proof (state)\nthis:\n  carrier G \\<subseteq> Units G\n\ngoal (3 subgoals):\n 1. \\<one>\\<^bsub>G\\<^esub> \\<in> carrier G\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in> carrier G; y \\<in> carrier G\\<rbrakk>\n       \\<Longrightarrow> x \\<otimes>\\<^bsub>G\\<^esub> y =\n                         y \\<otimes>\\<^bsub>G\\<^esub> x\n 3. finite (carrier G)", "qed (insert n, auto simp: G_def residue_mult_group_def mult_ac)"], ["", "subsection \\<open>Definition of Dirichlet characters\\<close>"], ["", "text \\<open>\n  The following two functions make the connection between Dirichlet characters and the\n  multiplicative characters of the residue group.\n\\<close>"], ["", "definition c2dc :: \"(nat \\<Rightarrow> complex) \\<Rightarrow> (nat \\<Rightarrow> complex)\" where\n  \"c2dc \\<chi> = (\\<lambda>x. \\<chi> (x mod n))\""], ["", "definition dc2c :: \"(nat \\<Rightarrow> complex) \\<Rightarrow> (nat \\<Rightarrow> complex)\" where\n  \"dc2c \\<chi> = (\\<lambda>x. if x < n then \\<chi> x else 0)\""], ["", "lemma dc2c_c2dc [simp]:\n  assumes \"character G \\<chi>\"\n  shows   \"dc2c (c2dc \\<chi>) = \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dc2c (c2dc \\<chi>) = \\<chi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dc2c (c2dc \\<chi>) = \\<chi>", "interpret character G \\<chi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. character G \\<chi>", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. dc2c (c2dc \\<chi>) = \\<chi>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. dc2c (c2dc \\<chi>) = \\<chi>", "using n"], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. dc2c (c2dc \\<chi>) = \\<chi>", "by (auto simp: fun_eq_iff dc2c_def c2dc_def char_eq_0_iff G_def\n                           residue_mult_group_def totatives_def)"], ["proof (state)\nthis:\n  dc2c (c2dc \\<chi>) = \\<chi>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale dcharacter = residues_nat +\n  fixes \\<chi> :: \"nat \\<Rightarrow> complex\"\n  assumes mult_aux: \"a \\<in> totatives n \\<Longrightarrow> b \\<in> totatives n \\<Longrightarrow> \\<chi> (a * b) = \\<chi> a * \\<chi> b\"\n  assumes eq_zero:  \"\\<not>coprime a n \\<Longrightarrow> \\<chi> a = 0\"\n  assumes periodic: \"\\<chi> (a + n) = \\<chi> a\"\n  assumes one_not_zero: \"\\<chi> 1 \\<noteq> 0\"\nbegin"], ["", "lemma zero_eq_0 [simp]: \"\\<chi> 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> 0 = 0", "using n"], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. \\<chi> 0 = 0", "by (intro eq_zero) auto"], ["", "lemma Suc_0 [simp]: \"\\<chi> (Suc 0) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (Suc 0) = 1", "using n mult_aux[of 1 1] one_not_zero"], ["proof (prove)\nusing this:\n  1 < n\n  \\<lbrakk>1 \\<in> totatives n; 1 \\<in> totatives n\\<rbrakk>\n  \\<Longrightarrow> \\<chi> (1 * 1) = \\<chi> 1 * \\<chi> 1\n  \\<chi> 1 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<chi> (Suc 0) = 1", "by (simp add: totatives_def)"], ["", "lemma periodic_mult: \"\\<chi> (a + m * n) = \\<chi> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (a + m * n) = \\<chi> a", "proof (induction m)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<chi> (a + 0 * n) = \\<chi> a\n 2. \\<And>m.\n       \\<chi> (a + m * n) = \\<chi> a \\<Longrightarrow>\n       \\<chi> (a + Suc m * n) = \\<chi> a", "case (Suc m)"], ["proof (state)\nthis:\n  \\<chi> (a + m * n) = \\<chi> a\n\ngoal (2 subgoals):\n 1. \\<chi> (a + 0 * n) = \\<chi> a\n 2. \\<And>m.\n       \\<chi> (a + m * n) = \\<chi> a \\<Longrightarrow>\n       \\<chi> (a + Suc m * n) = \\<chi> a", "have \"a + Suc m * n = a + m * n+ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a + Suc m * n = a + m * n + n", "by simp"], ["proof (state)\nthis:\n  a + Suc m * n = a + m * n + n\n\ngoal (2 subgoals):\n 1. \\<chi> (a + 0 * n) = \\<chi> a\n 2. \\<And>m.\n       \\<chi> (a + m * n) = \\<chi> a \\<Longrightarrow>\n       \\<chi> (a + Suc m * n) = \\<chi> a", "also"], ["proof (state)\nthis:\n  a + Suc m * n = a + m * n + n\n\ngoal (2 subgoals):\n 1. \\<chi> (a + 0 * n) = \\<chi> a\n 2. \\<And>m.\n       \\<chi> (a + m * n) = \\<chi> a \\<Longrightarrow>\n       \\<chi> (a + Suc m * n) = \\<chi> a", "have \"\\<chi> \\<dots> = \\<chi> (a + m * n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (a + m * n + n) = \\<chi> (a + m * n)", "by (rule periodic)"], ["proof (state)\nthis:\n  \\<chi> (a + m * n + n) = \\<chi> (a + m * n)\n\ngoal (2 subgoals):\n 1. \\<chi> (a + 0 * n) = \\<chi> a\n 2. \\<And>m.\n       \\<chi> (a + m * n) = \\<chi> a \\<Longrightarrow>\n       \\<chi> (a + Suc m * n) = \\<chi> a", "also"], ["proof (state)\nthis:\n  \\<chi> (a + m * n + n) = \\<chi> (a + m * n)\n\ngoal (2 subgoals):\n 1. \\<chi> (a + 0 * n) = \\<chi> a\n 2. \\<And>m.\n       \\<chi> (a + m * n) = \\<chi> a \\<Longrightarrow>\n       \\<chi> (a + Suc m * n) = \\<chi> a", "have \"\\<dots> = \\<chi> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (a + m * n) = \\<chi> a", "by (rule Suc.IH)"], ["proof (state)\nthis:\n  \\<chi> (a + m * n) = \\<chi> a\n\ngoal (2 subgoals):\n 1. \\<chi> (a + 0 * n) = \\<chi> a\n 2. \\<And>m.\n       \\<chi> (a + m * n) = \\<chi> a \\<Longrightarrow>\n       \\<chi> (a + Suc m * n) = \\<chi> a", "finally"], ["proof (chain)\npicking this:\n  \\<chi> (a + Suc m * n) = \\<chi> a", "show ?case"], ["proof (prove)\nusing this:\n  \\<chi> (a + Suc m * n) = \\<chi> a\n\ngoal (1 subgoal):\n 1. \\<chi> (a + Suc m * n) = \\<chi> a", "."], ["proof (state)\nthis:\n  \\<chi> (a + Suc m * n) = \\<chi> a\n\ngoal (1 subgoal):\n 1. \\<chi> (a + 0 * n) = \\<chi> a", "qed simp_all"], ["", "lemma minus_one_periodic [simp]:\n  assumes \"k > 0\"\n  shows   \"\\<chi> (k * n - 1) = \\<chi> (n - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (k * n - 1) = \\<chi> (n - 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<chi> (k * n - 1) = \\<chi> (n - 1)", "have \"k * n - 1 = n - 1 + (k - 1) * n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k * n - 1 = n - 1 + (k - 1) * n", "using assms n"], ["proof (prove)\nusing this:\n  0 < k\n  1 < n\n\ngoal (1 subgoal):\n 1. k * n - 1 = n - 1 + (k - 1) * n", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  k * n - 1 = n - 1 + (k - 1) * n\n\ngoal (1 subgoal):\n 1. \\<chi> (k * n - 1) = \\<chi> (n - 1)", "also"], ["proof (state)\nthis:\n  k * n - 1 = n - 1 + (k - 1) * n\n\ngoal (1 subgoal):\n 1. \\<chi> (k * n - 1) = \\<chi> (n - 1)", "have \"\\<chi> \\<dots> = \\<chi> (n - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (n - 1 + (k - 1) * n) = \\<chi> (n - 1)", "by (rule periodic_mult)"], ["proof (state)\nthis:\n  \\<chi> (n - 1 + (k - 1) * n) = \\<chi> (n - 1)\n\ngoal (1 subgoal):\n 1. \\<chi> (k * n - 1) = \\<chi> (n - 1)", "finally"], ["proof (chain)\npicking this:\n  \\<chi> (k * n - 1) = \\<chi> (n - 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<chi> (k * n - 1) = \\<chi> (n - 1)\n\ngoal (1 subgoal):\n 1. \\<chi> (k * n - 1) = \\<chi> (n - 1)", "."], ["proof (state)\nthis:\n  \\<chi> (k * n - 1) = \\<chi> (n - 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cong:\n  assumes \"[a = b] (mod n)\"\n  shows   \"\\<chi> a = \\<chi> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> a = \\<chi> b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<chi> a = \\<chi> b", "from assms"], ["proof (chain)\npicking this:\n  [a = b] (mod n)", "obtain k1 k2 where *: \"b + k1 * n = a + k2 * n\""], ["proof (prove)\nusing this:\n  [a = b] (mod n)\n\ngoal (1 subgoal):\n 1. (\\<And>k1 k2.\n        b + k1 * n = a + k2 * n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (subst (asm) cong_iff_lin_nat) auto"], ["proof (state)\nthis:\n  b + k1 * n = a + k2 * n\n\ngoal (1 subgoal):\n 1. \\<chi> a = \\<chi> b", "have \"\\<chi> a = \\<chi> (a + k2 * n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> a = \\<chi> (a + k2 * n)", "by (rule periodic_mult [symmetric])"], ["proof (state)\nthis:\n  \\<chi> a = \\<chi> (a + k2 * n)\n\ngoal (1 subgoal):\n 1. \\<chi> a = \\<chi> b", "also"], ["proof (state)\nthis:\n  \\<chi> a = \\<chi> (a + k2 * n)\n\ngoal (1 subgoal):\n 1. \\<chi> a = \\<chi> b", "note * [symmetric]"], ["proof (state)\nthis:\n  a + k2 * n = b + k1 * n\n\ngoal (1 subgoal):\n 1. \\<chi> a = \\<chi> b", "also"], ["proof (state)\nthis:\n  a + k2 * n = b + k1 * n\n\ngoal (1 subgoal):\n 1. \\<chi> a = \\<chi> b", "have \"\\<chi> (b + k1 * n) = \\<chi> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (b + k1 * n) = \\<chi> b", "by (rule periodic_mult)"], ["proof (state)\nthis:\n  \\<chi> (b + k1 * n) = \\<chi> b\n\ngoal (1 subgoal):\n 1. \\<chi> a = \\<chi> b", "finally"], ["proof (chain)\npicking this:\n  \\<chi> a = \\<chi> b", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<chi> a = \\<chi> b\n\ngoal (1 subgoal):\n 1. \\<chi> a = \\<chi> b", "."], ["proof (state)\nthis:\n  \\<chi> a = \\<chi> b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mod [simp]: \"\\<chi> (a mod n) = \\<chi> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (a mod n) = \\<chi> a", "by (rule cong) (simp_all add: cong_def)"], ["", "lemma mult [simp]: \"\\<chi> (a * b) = \\<chi> a * \\<chi> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (a * b) = \\<chi> a * \\<chi> b", "proof (cases \"coprime a n \\<and> coprime b n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. coprime a n \\<and> coprime b n \\<Longrightarrow>\n    \\<chi> (a * b) = \\<chi> a * \\<chi> b\n 2. \\<not> (coprime a n \\<and> coprime b n) \\<Longrightarrow>\n    \\<chi> (a * b) = \\<chi> a * \\<chi> b", "case True"], ["proof (state)\nthis:\n  coprime a n \\<and> coprime b n\n\ngoal (2 subgoals):\n 1. coprime a n \\<and> coprime b n \\<Longrightarrow>\n    \\<chi> (a * b) = \\<chi> a * \\<chi> b\n 2. \\<not> (coprime a n \\<and> coprime b n) \\<Longrightarrow>\n    \\<chi> (a * b) = \\<chi> a * \\<chi> b", "hence \"a mod n \\<in> totatives n\" \"b mod n \\<in> totatives n\""], ["proof (prove)\nusing this:\n  coprime a n \\<and> coprime b n\n\ngoal (1 subgoal):\n 1. a mod n \\<in> totatives n &&& b mod n \\<in> totatives n", "using n"], ["proof (prove)\nusing this:\n  coprime a n \\<and> coprime b n\n  1 < n\n\ngoal (1 subgoal):\n 1. a mod n \\<in> totatives n &&& b mod n \\<in> totatives n", "by (auto simp: totatives_def mod_greater_zero_iff_not_dvd coprime_absorb_right)"], ["proof (state)\nthis:\n  a mod n \\<in> totatives n\n  b mod n \\<in> totatives n\n\ngoal (2 subgoals):\n 1. coprime a n \\<and> coprime b n \\<Longrightarrow>\n    \\<chi> (a * b) = \\<chi> a * \\<chi> b\n 2. \\<not> (coprime a n \\<and> coprime b n) \\<Longrightarrow>\n    \\<chi> (a * b) = \\<chi> a * \\<chi> b", "hence \"\\<chi> ((a mod n) * (b mod n)) = \\<chi> (a mod n) * \\<chi> (b mod n)\""], ["proof (prove)\nusing this:\n  a mod n \\<in> totatives n\n  b mod n \\<in> totatives n\n\ngoal (1 subgoal):\n 1. \\<chi> (a mod n * (b mod n)) = \\<chi> (a mod n) * \\<chi> (b mod n)", "by (rule mult_aux)"], ["proof (state)\nthis:\n  \\<chi> (a mod n * (b mod n)) = \\<chi> (a mod n) * \\<chi> (b mod n)\n\ngoal (2 subgoals):\n 1. coprime a n \\<and> coprime b n \\<Longrightarrow>\n    \\<chi> (a * b) = \\<chi> a * \\<chi> b\n 2. \\<not> (coprime a n \\<and> coprime b n) \\<Longrightarrow>\n    \\<chi> (a * b) = \\<chi> a * \\<chi> b", "also"], ["proof (state)\nthis:\n  \\<chi> (a mod n * (b mod n)) = \\<chi> (a mod n) * \\<chi> (b mod n)\n\ngoal (2 subgoals):\n 1. coprime a n \\<and> coprime b n \\<Longrightarrow>\n    \\<chi> (a * b) = \\<chi> a * \\<chi> b\n 2. \\<not> (coprime a n \\<and> coprime b n) \\<Longrightarrow>\n    \\<chi> (a * b) = \\<chi> a * \\<chi> b", "have \"\\<chi> ((a mod n) * (b mod n)) = \\<chi> (a * b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (a mod n * (b mod n)) = \\<chi> (a * b)", "by (rule cong) (auto simp: cong_def mod_mult_eq)"], ["proof (state)\nthis:\n  \\<chi> (a mod n * (b mod n)) = \\<chi> (a * b)\n\ngoal (2 subgoals):\n 1. coprime a n \\<and> coprime b n \\<Longrightarrow>\n    \\<chi> (a * b) = \\<chi> a * \\<chi> b\n 2. \\<not> (coprime a n \\<and> coprime b n) \\<Longrightarrow>\n    \\<chi> (a * b) = \\<chi> a * \\<chi> b", "finally"], ["proof (chain)\npicking this:\n  \\<chi> (a * b) = \\<chi> (a mod n) * \\<chi> (b mod n)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<chi> (a * b) = \\<chi> (a mod n) * \\<chi> (b mod n)\n\ngoal (1 subgoal):\n 1. \\<chi> (a * b) = \\<chi> a * \\<chi> b", "by simp"], ["proof (state)\nthis:\n  \\<chi> (a * b) = \\<chi> a * \\<chi> b\n\ngoal (1 subgoal):\n 1. \\<not> (coprime a n \\<and> coprime b n) \\<Longrightarrow>\n    \\<chi> (a * b) = \\<chi> a * \\<chi> b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (coprime a n \\<and> coprime b n) \\<Longrightarrow>\n    \\<chi> (a * b) = \\<chi> a * \\<chi> b", "case False"], ["proof (state)\nthis:\n  \\<not> (coprime a n \\<and> coprime b n)\n\ngoal (1 subgoal):\n 1. \\<not> (coprime a n \\<and> coprime b n) \\<Longrightarrow>\n    \\<chi> (a * b) = \\<chi> a * \\<chi> b", "hence \"\\<not>coprime (a * b) n\""], ["proof (prove)\nusing this:\n  \\<not> (coprime a n \\<and> coprime b n)\n\ngoal (1 subgoal):\n 1. \\<not> coprime (a * b) n", "by simp"], ["proof (state)\nthis:\n  \\<not> coprime (a * b) n\n\ngoal (1 subgoal):\n 1. \\<not> (coprime a n \\<and> coprime b n) \\<Longrightarrow>\n    \\<chi> (a * b) = \\<chi> a * \\<chi> b", "with False"], ["proof (chain)\npicking this:\n  \\<not> (coprime a n \\<and> coprime b n)\n  \\<not> coprime (a * b) n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (coprime a n \\<and> coprime b n)\n  \\<not> coprime (a * b) n\n\ngoal (1 subgoal):\n 1. \\<chi> (a * b) = \\<chi> a * \\<chi> b", "by (auto simp: eq_zero)"], ["proof (state)\nthis:\n  \\<chi> (a * b) = \\<chi> a * \\<chi> b\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale mult: completely_multiplicative_function \\<chi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. completely_multiplicative_function \\<chi>", "by standard auto"], ["", "lemma eq_zero_iff: \"\\<chi> x = 0 \\<longleftrightarrow> \\<not>coprime x n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<chi> x = 0) = (\\<not> coprime x n)", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<chi> x = 0; coprime x n\\<rbrakk> \\<Longrightarrow> False\n 2. \\<not> coprime x n \\<Longrightarrow> \\<chi> x = 0", "assume \"\\<chi> x = 0\" and \"coprime x n\""], ["proof (state)\nthis:\n  \\<chi> x = 0\n  coprime x n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<chi> x = 0; coprime x n\\<rbrakk> \\<Longrightarrow> False\n 2. \\<not> coprime x n \\<Longrightarrow> \\<chi> x = 0", "from cong_solve_coprime_nat [OF this(2)]"], ["proof (chain)\npicking this:\n  \\<exists>xa. [x * xa = Suc 0] (mod n)", "obtain y where \"[x * y = Suc 0] (mod n)\""], ["proof (prove)\nusing this:\n  \\<exists>xa. [x * xa = Suc 0] (mod n)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        [x * y = Suc 0] (mod n) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  [x * y = Suc 0] (mod n)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<chi> x = 0; coprime x n\\<rbrakk> \\<Longrightarrow> False\n 2. \\<not> coprime x n \\<Longrightarrow> \\<chi> x = 0", "hence \"\\<chi> (x * y) = \\<chi> (Suc 0)\""], ["proof (prove)\nusing this:\n  [x * y = Suc 0] (mod n)\n\ngoal (1 subgoal):\n 1. \\<chi> (x * y) = \\<chi> (Suc 0)", "by (rule cong)"], ["proof (state)\nthis:\n  \\<chi> (x * y) = \\<chi> (Suc 0)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<chi> x = 0; coprime x n\\<rbrakk> \\<Longrightarrow> False\n 2. \\<not> coprime x n \\<Longrightarrow> \\<chi> x = 0", "with \\<open>\\<chi> x = 0\\<close>"], ["proof (chain)\npicking this:\n  \\<chi> x = 0\n  \\<chi> (x * y) = \\<chi> (Suc 0)", "show False"], ["proof (prove)\nusing this:\n  \\<chi> x = 0\n  \\<chi> (x * y) = \\<chi> (Suc 0)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> coprime x n \\<Longrightarrow> \\<chi> x = 0", "qed (auto simp: eq_zero)"], ["", "lemma minus_one': \"\\<chi> (n - 1) \\<in> {-1, 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (n - 1) \\<in> {- 1, 1}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<chi> (n - 1) \\<in> {- 1, 1}", "define n' where \"n' = n - 2\""], ["proof (state)\nthis:\n  n' = n - 2\n\ngoal (1 subgoal):\n 1. \\<chi> (n - 1) \\<in> {- 1, 1}", "have n: \"n = Suc (Suc n')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = Suc (Suc n')", "using n"], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. n = Suc (Suc n')", "by (simp add: n'_def)"], ["proof (state)\nthis:\n  n = Suc (Suc n')\n\ngoal (1 subgoal):\n 1. \\<chi> (n - 1) \\<in> {- 1, 1}", "have \"(n - 1) ^ 2 = 1 + (n - 2) * n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n - 1)\\<^sup>2 = 1 + (n - 2) * n", "by (simp add: power2_eq_square algebra_simps n)"], ["proof (state)\nthis:\n  (n - 1)\\<^sup>2 = 1 + (n - 2) * n\n\ngoal (1 subgoal):\n 1. \\<chi> (n - 1) \\<in> {- 1, 1}", "also"], ["proof (state)\nthis:\n  (n - 1)\\<^sup>2 = 1 + (n - 2) * n\n\ngoal (1 subgoal):\n 1. \\<chi> (n - 1) \\<in> {- 1, 1}", "have \"\\<chi> \\<dots> = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (1 + (n - 2) * n) = 1", "by (subst periodic_mult) auto"], ["proof (state)\nthis:\n  \\<chi> (1 + (n - 2) * n) = 1\n\ngoal (1 subgoal):\n 1. \\<chi> (n - 1) \\<in> {- 1, 1}", "also"], ["proof (state)\nthis:\n  \\<chi> (1 + (n - 2) * n) = 1\n\ngoal (1 subgoal):\n 1. \\<chi> (n - 1) \\<in> {- 1, 1}", "have \"\\<chi> ((n - 1) ^ 2) = \\<chi> (n - 1) ^ 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> ((n - 1)\\<^sup>2) = (\\<chi> (n - 1))\\<^sup>2", "by (rule mult.power)"], ["proof (state)\nthis:\n  \\<chi> ((n - 1)\\<^sup>2) = (\\<chi> (n - 1))\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<chi> (n - 1) \\<in> {- 1, 1}", "finally"], ["proof (chain)\npicking this:\n  (\\<chi> (n - 1))\\<^sup>2 = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<chi> (n - 1))\\<^sup>2 = 1\n\ngoal (1 subgoal):\n 1. \\<chi> (n - 1) \\<in> {- 1, 1}", "by (subst (asm) power2_eq_1_iff) auto"], ["proof (state)\nthis:\n  \\<chi> (n - 1) \\<in> {- 1, 1}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma c2dc_dc2c [simp]: \"c2dc (dc2c \\<chi>) = \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c2dc (dc2c \\<chi>) = \\<chi>", "using n"], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. c2dc (dc2c \\<chi>) = \\<chi>", "by (auto simp: c2dc_def dc2c_def fun_eq_iff intro!: cong simp: cong_def)"], ["", "lemma character_dc2c: \"character G (dc2c \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. character G (dc2c \\<chi>)", "by standard (insert n, auto simp: G_def residue_mult_group_def dc2c_def totatives_def\n                              intro!: eq_zero)"], ["", "sublocale dc2c: character G \"dc2c \\<chi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. character G (dc2c \\<chi>)", "by (fact character_dc2c)"], ["", "lemma dcharacter_inv_character [intro]: \"dcharacter n (inv_character \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dcharacter n (inv_character \\<chi>)", "by standard (auto simp: inv_character_def eq_zero periodic)"], ["", "lemma norm: \"norm (\\<chi> k) = (if coprime k n then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cmod (\\<chi> k) = (if coprime k n then 1 else 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cmod (\\<chi> k) = (if coprime k n then 1 else 0)", "have \"\\<chi> k = \\<chi> (k mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> k = \\<chi> (k mod n)", "by (intro cong) (auto simp: cong_def)"], ["proof (state)\nthis:\n  \\<chi> k = \\<chi> (k mod n)\n\ngoal (1 subgoal):\n 1. cmod (\\<chi> k) = (if coprime k n then 1 else 0)", "also"], ["proof (state)\nthis:\n  \\<chi> k = \\<chi> (k mod n)\n\ngoal (1 subgoal):\n 1. cmod (\\<chi> k) = (if coprime k n then 1 else 0)", "from n"], ["proof (chain)\npicking this:\n  1 < n", "have \"\\<dots> = dc2c \\<chi> (k mod n)\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. \\<chi> (k mod n) = dc2c \\<chi> (k mod n)", "by (simp add: dc2c_def)"], ["proof (state)\nthis:\n  \\<chi> (k mod n) = dc2c \\<chi> (k mod n)\n\ngoal (1 subgoal):\n 1. cmod (\\<chi> k) = (if coprime k n then 1 else 0)", "also"], ["proof (state)\nthis:\n  \\<chi> (k mod n) = dc2c \\<chi> (k mod n)\n\ngoal (1 subgoal):\n 1. cmod (\\<chi> k) = (if coprime k n then 1 else 0)", "from n"], ["proof (chain)\npicking this:\n  1 < n", "have \"norm \\<dots> = (if coprime k n then 1 else 0)\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. cmod (dc2c \\<chi> (k mod n)) = (if coprime k n then 1 else 0)", "by (subst dc2c.norm_char) (auto simp: G_def residue_mult_group_def mod_in_totatives)"], ["proof (state)\nthis:\n  cmod (dc2c \\<chi> (k mod n)) = (if coprime k n then 1 else 0)\n\ngoal (1 subgoal):\n 1. cmod (\\<chi> k) = (if coprime k n then 1 else 0)", "finally"], ["proof (chain)\npicking this:\n  cmod (\\<chi> k) = (if coprime k n then 1 else 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  cmod (\\<chi> k) = (if coprime k n then 1 else 0)\n\ngoal (1 subgoal):\n 1. cmod (\\<chi> k) = (if coprime k n then 1 else 0)", "."], ["proof (state)\nthis:\n  cmod (\\<chi> k) = (if coprime k n then 1 else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma norm_le_1: \"norm (\\<chi> k) \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cmod (\\<chi> k) \\<le> 1", "by (subst norm) auto"], ["", "end"], ["", "definition dcharacters :: \"nat \\<Rightarrow> (nat \\<Rightarrow> complex) set\" where\n  \"dcharacters n = {\\<chi>. dcharacter n \\<chi>}\""], ["", "context residues_nat\nbegin"], ["", "lemma character_dc2c: \"dcharacter n \\<chi> \\<Longrightarrow> character G (dc2c \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dcharacter n \\<chi> \\<Longrightarrow> character G (dc2c \\<chi>)", "using dcharacter.character_dc2c[of n \\<chi>]"], ["proof (prove)\nusing this:\n  dcharacter n \\<chi> \\<Longrightarrow>\n  character (residue_mult_group n) (dc2c \\<chi>)\n\ngoal (1 subgoal):\n 1. dcharacter n \\<chi> \\<Longrightarrow> character G (dc2c \\<chi>)", "by (simp add: G_def)"], ["", "lemma dcharacter_c2dc: \n  assumes \"character G \\<chi>\"\n  shows   \"dcharacter n (c2dc \\<chi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dcharacter n (c2dc \\<chi>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dcharacter n (c2dc \\<chi>)", "interpret character G \\<chi>"], ["proof (prove)\ngoal (1 subgoal):\n 1. character G \\<chi>", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. dcharacter n (c2dc \\<chi>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. dcharacter n (c2dc \\<chi>)", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> totatives n; b \\<in> totatives n\\<rbrakk>\n       \\<Longrightarrow> c2dc \\<chi> (a * b) = c2dc \\<chi> a * c2dc \\<chi> b\n 2. \\<And>a. \\<not> coprime a n \\<Longrightarrow> c2dc \\<chi> a = 0\n 3. \\<And>a. c2dc \\<chi> (a + n) = c2dc \\<chi> a\n 4. c2dc \\<chi> 1 \\<noteq> 0", "fix x"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> totatives n; b \\<in> totatives n\\<rbrakk>\n       \\<Longrightarrow> c2dc \\<chi> (a * b) = c2dc \\<chi> a * c2dc \\<chi> b\n 2. \\<And>a. \\<not> coprime a n \\<Longrightarrow> c2dc \\<chi> a = 0\n 3. \\<And>a. c2dc \\<chi> (a + n) = c2dc \\<chi> a\n 4. c2dc \\<chi> 1 \\<noteq> 0", "assume \"\\<not>coprime x n\""], ["proof (state)\nthis:\n  \\<not> coprime x n\n\ngoal (4 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> totatives n; b \\<in> totatives n\\<rbrakk>\n       \\<Longrightarrow> c2dc \\<chi> (a * b) = c2dc \\<chi> a * c2dc \\<chi> b\n 2. \\<And>a. \\<not> coprime a n \\<Longrightarrow> c2dc \\<chi> a = 0\n 3. \\<And>a. c2dc \\<chi> (a + n) = c2dc \\<chi> a\n 4. c2dc \\<chi> 1 \\<noteq> 0", "thus \"c2dc \\<chi> x = 0\""], ["proof (prove)\nusing this:\n  \\<not> coprime x n\n\ngoal (1 subgoal):\n 1. c2dc \\<chi> x = 0", "by (auto simp: c2dc_def char_eq_0_iff G_def residue_mult_group_def totatives_def)"], ["proof (state)\nthis:\n  c2dc \\<chi> x = 0\n\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<in> totatives n; b \\<in> totatives n\\<rbrakk>\n       \\<Longrightarrow> c2dc \\<chi> (a * b) = c2dc \\<chi> a * c2dc \\<chi> b\n 2. \\<And>a. c2dc \\<chi> (a + n) = c2dc \\<chi> a\n 3. c2dc \\<chi> 1 \\<noteq> 0", "qed (insert char_mult char_one n, \n       auto simp: c2dc_def G_def residue_mult_group_def simp del: char_mult char_one)"], ["proof (state)\nthis:\n  dcharacter n (c2dc \\<chi>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma principal_dchar_altdef: \"principal_dchar n = c2dc (principal_char G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. principal_dchar n = c2dc (principal_char G)", "using n"], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. principal_dchar n = c2dc (principal_char G)", "by (auto simp: c2dc_def principal_dchar_def principal_char_def G_def\n                residue_mult_group_def fun_eq_iff mod_in_totatives)"], ["", "sublocale principal: dcharacter n G \"principal_dchar n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dcharacter n (principal_dchar n) &&& G \\<equiv> residue_mult_group n", "by (simp add: principal_dchar_altdef dcharacter_c2dc | rule G_def)+"], ["", "lemma c2dc_principal [simp]: \"c2dc (principal_char G) = principal_dchar n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c2dc (principal_char G) = principal_dchar n", "by (simp add: principal_dchar_altdef)"], ["", "lemma dc2c_principal [simp]: \"dc2c (principal_dchar n) = principal_char G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dc2c (principal_dchar n) = principal_char G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dc2c (principal_dchar n) = principal_char G", "have \"dc2c (c2dc (principal_char G)) = dc2c (principal_dchar n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dc2c (c2dc (principal_char G)) = dc2c (principal_dchar n)", "by (subst c2dc_principal) (rule refl)"], ["proof (state)\nthis:\n  dc2c (c2dc (principal_char G)) = dc2c (principal_dchar n)\n\ngoal (1 subgoal):\n 1. dc2c (principal_dchar n) = principal_char G", "thus ?thesis"], ["proof (prove)\nusing this:\n  dc2c (c2dc (principal_char G)) = dc2c (principal_dchar n)\n\ngoal (1 subgoal):\n 1. dc2c (principal_dchar n) = principal_char G", "by (subst (asm) dc2c_c2dc) simp_all"], ["proof (state)\nthis:\n  dc2c (principal_dchar n) = principal_char G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bij_betw_dcharacters_characters:\n  \"bij_betw dc2c (dcharacters n) (characters G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw dc2c (dcharacters n) (characters G)", "by (intro bij_betwI[where ?g = c2dc])\n     (auto simp: characters_def dcharacters_def dcharacter_c2dc \n                 character_dc2c dcharacter.c2dc_dc2c)"], ["", "lemma bij_betw_characters_dcharacters:\n  \"bij_betw c2dc (characters G) (dcharacters n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw c2dc (characters G) (dcharacters n)", "by (intro bij_betwI[where ?g = dc2c])\n     (auto simp: characters_def dcharacters_def dcharacter_c2dc \n                 character_dc2c dcharacter.c2dc_dc2c)"], ["", "lemma finite_dcharacters [intro]: \"finite (dcharacters n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (dcharacters n)", "using bij_betw_finite [OF bij_betw_dcharacters_characters]"], ["proof (prove)\nusing this:\n  finite (dcharacters n) = finite (characters G)\n\ngoal (1 subgoal):\n 1. finite (dcharacters n)", "by auto"], ["", "lemma card_dcharacters [simp]: \"card (dcharacters n) = totient n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (dcharacters n) = totient n", "using bij_betw_same_card [OF bij_betw_dcharacters_characters] card_characters"], ["proof (prove)\nusing this:\n  card (dcharacters n) = card (characters G)\n  card (characters G) = order G\n\ngoal (1 subgoal):\n 1. card (dcharacters n) = totient n", "by simp"], ["", "end"], ["", "lemma inv_character_eq_principal_dchar_iff [simp]: \n  \"inv_character \\<chi> = principal_dchar n \\<longleftrightarrow> \\<chi> = principal_dchar n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (inv_character \\<chi> = principal_dchar n) =\n    (\\<chi> = principal_dchar n)", "by (auto simp add: fun_eq_iff inv_character_def principal_dchar_def)"], ["", "subsection \\<open>Sums of Dirichlet characters\\<close>"], ["", "lemma (in dcharacter) sum_dcharacter_totatives:\n  \"(\\<Sum>x\\<in>totatives n. \\<chi> x) = (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum \\<chi> (totatives n) =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum \\<chi> (totatives n) =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "from n"], ["proof (chain)\npicking this:\n  1 < n", "have \"(\\<Sum>x\\<in>totatives n. \\<chi> x) = (\\<Sum>x\\<in>carrier G. dc2c \\<chi> x)\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. sum \\<chi> (totatives n) = sum (dc2c \\<chi>) (carrier G)", "by (intro sum.cong) (auto simp: totatives_def dc2c_def G_def residue_mult_group_def)"], ["proof (state)\nthis:\n  sum \\<chi> (totatives n) = sum (dc2c \\<chi>) (carrier G)\n\ngoal (1 subgoal):\n 1. sum \\<chi> (totatives n) =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "also"], ["proof (state)\nthis:\n  sum \\<chi> (totatives n) = sum (dc2c \\<chi>) (carrier G)\n\ngoal (1 subgoal):\n 1. sum \\<chi> (totatives n) =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "have \"\\<dots> = (if dc2c \\<chi> = principal_char G then of_nat (order G) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (dc2c \\<chi>) (carrier G) =\n    (if dc2c \\<chi> = principal_char G then of_nat (order G) else 0)", "by (rule dc2c.sum_character)"], ["proof (state)\nthis:\n  sum (dc2c \\<chi>) (carrier G) =\n  (if dc2c \\<chi> = principal_char G then of_nat (order G) else 0)\n\ngoal (1 subgoal):\n 1. sum \\<chi> (totatives n) =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "also"], ["proof (state)\nthis:\n  sum (dc2c \\<chi>) (carrier G) =\n  (if dc2c \\<chi> = principal_char G then of_nat (order G) else 0)\n\ngoal (1 subgoal):\n 1. sum \\<chi> (totatives n) =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "have \"dc2c \\<chi> = principal_char G \\<longleftrightarrow> \\<chi> = principal_dchar n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (dc2c \\<chi> = principal_char G) = (\\<chi> = principal_dchar n)", "by (metis c2dc_dc2c dc2c_principal principal_dchar_altdef)"], ["proof (state)\nthis:\n  (dc2c \\<chi> = principal_char G) = (\\<chi> = principal_dchar n)\n\ngoal (1 subgoal):\n 1. sum \\<chi> (totatives n) =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "finally"], ["proof (chain)\npicking this:\n  sum \\<chi> (totatives n) =\n  (if \\<chi> = principal_dchar n then of_nat (order G) else 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  sum \\<chi> (totatives n) =\n  (if \\<chi> = principal_dchar n then of_nat (order G) else 0)\n\ngoal (1 subgoal):\n 1. sum \\<chi> (totatives n) =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "by simp"], ["proof (state)\nthis:\n  sum \\<chi> (totatives n) =\n  (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in dcharacter) sum_dcharacter_block:\n  \"(\\<Sum>x<n. \\<chi> x) = (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum \\<chi> {..<n} =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum \\<chi> {..<n} =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "from n"], ["proof (chain)\npicking this:\n  1 < n", "have \"(\\<Sum>x<n. \\<chi> x) = (\\<Sum>x\\<in>totatives n. \\<chi> x)\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. sum \\<chi> {..<n} = sum \\<chi> (totatives n)", "by (intro sum.mono_neutral_right) \n       (auto simp: totatives_def eq_zero_iff intro!: Nat.gr0I order.not_eq_order_implies_strict)"], ["proof (state)\nthis:\n  sum \\<chi> {..<n} = sum \\<chi> (totatives n)\n\ngoal (1 subgoal):\n 1. sum \\<chi> {..<n} =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "also"], ["proof (state)\nthis:\n  sum \\<chi> {..<n} = sum \\<chi> (totatives n)\n\ngoal (1 subgoal):\n 1. sum \\<chi> {..<n} =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "have \"\\<dots> = (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum \\<chi> (totatives n) =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "by (rule sum_dcharacter_totatives)"], ["proof (state)\nthis:\n  sum \\<chi> (totatives n) =\n  (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)\n\ngoal (1 subgoal):\n 1. sum \\<chi> {..<n} =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "finally"], ["proof (chain)\npicking this:\n  sum \\<chi> {..<n} =\n  (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  sum \\<chi> {..<n} =\n  (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)\n\ngoal (1 subgoal):\n 1. sum \\<chi> {..<n} =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "."], ["proof (state)\nthis:\n  sum \\<chi> {..<n} =\n  (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in dcharacter) sum_dcharacter_block':\n  \"sum \\<chi> {Suc 0..n} = (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum \\<chi> {Suc 0..n} =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum \\<chi> {Suc 0..n} =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "let ?f = \"\\<lambda>k. if k = n then 0 else k\" and ?g = \"\\<lambda>k. if k = 0 then n else k\""], ["proof (state)\ngoal (1 subgoal):\n 1. sum \\<chi> {Suc 0..n} =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "have \"sum \\<chi> {1..n} = sum \\<chi> {..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum \\<chi> {1..n} = sum \\<chi> {..<n}", "using n"], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. sum \\<chi> {1..n} = sum \\<chi> {..<n}", "by (intro sum.reindex_bij_witness[where j = ?f and i = ?g]) (auto simp: eq_zero_iff)"], ["proof (state)\nthis:\n  sum \\<chi> {1..n} = sum \\<chi> {..<n}\n\ngoal (1 subgoal):\n 1. sum \\<chi> {Suc 0..n} =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "thus ?thesis"], ["proof (prove)\nusing this:\n  sum \\<chi> {1..n} = sum \\<chi> {..<n}\n\ngoal (1 subgoal):\n 1. sum \\<chi> {Suc 0..n} =\n    (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)", "by (simp add: sum_dcharacter_block)"], ["proof (state)\nthis:\n  sum \\<chi> {Suc 0..n} =\n  (if \\<chi> = principal_dchar n then of_nat (totient n) else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in dcharacter) sum_lessThan_dcharacter:\n  assumes \"\\<chi> \\<noteq> principal_dchar n\"\n  shows   \"(\\<Sum>x<m. \\<chi> x) = (\\<Sum>x<m mod n. \\<chi> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "proof (induction m rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<And>y.\n           y < x \\<Longrightarrow>\n           sum \\<chi> {..<y} = sum \\<chi> {..<y mod n}) \\<Longrightarrow>\n       sum \\<chi> {..<x} = sum \\<chi> {..<x mod n}", "case (less m)"], ["proof (state)\nthis:\n  ?y < m \\<Longrightarrow> sum \\<chi> {..<?y} = sum \\<chi> {..<?y mod n}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<And>y.\n           y < x \\<Longrightarrow>\n           sum \\<chi> {..<y} = sum \\<chi> {..<y mod n}) \\<Longrightarrow>\n       sum \\<chi> {..<x} = sum \\<chi> {..<x mod n}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "proof (cases \"m < n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m < n \\<Longrightarrow> sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}\n 2. \\<not> m < n \\<Longrightarrow>\n    sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "case True"], ["proof (state)\nthis:\n  m < n\n\ngoal (2 subgoals):\n 1. m < n \\<Longrightarrow> sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}\n 2. \\<not> m < n \\<Longrightarrow>\n    sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "thus ?thesis"], ["proof (prove)\nusing this:\n  m < n\n\ngoal (1 subgoal):\n 1. sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "by simp"], ["proof (state)\nthis:\n  sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}\n\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow>\n    sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow>\n    sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "case False"], ["proof (state)\nthis:\n  \\<not> m < n\n\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow>\n    sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "hence \"{..<m} = {..<n} \\<union> {n..<m}\""], ["proof (prove)\nusing this:\n  \\<not> m < n\n\ngoal (1 subgoal):\n 1. {..<m} = {..<n} \\<union> {n..<m}", "by auto"], ["proof (state)\nthis:\n  {..<m} = {..<n} \\<union> {n..<m}\n\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow>\n    sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "also"], ["proof (state)\nthis:\n  {..<m} = {..<n} \\<union> {n..<m}\n\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow>\n    sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "have \"(\\<Sum>x\\<in>\\<dots>. \\<chi> x) = (\\<Sum>x<n. \\<chi> x) + (\\<Sum>x\\<in>{n..<m}. \\<chi> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum \\<chi> ({..<n} \\<union> {n..<m}) =\n    sum \\<chi> {..<n} + sum \\<chi> {n..<m}", "by (intro sum.union_disjoint) auto"], ["proof (state)\nthis:\n  sum \\<chi> ({..<n} \\<union> {n..<m}) =\n  sum \\<chi> {..<n} + sum \\<chi> {n..<m}\n\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow>\n    sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "also"], ["proof (state)\nthis:\n  sum \\<chi> ({..<n} \\<union> {n..<m}) =\n  sum \\<chi> {..<n} + sum \\<chi> {n..<m}\n\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow>\n    sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "from assms"], ["proof (chain)\npicking this:\n  \\<chi> \\<noteq> principal_dchar n", "have \"(\\<Sum>x<n. \\<chi> x) = 0\""], ["proof (prove)\nusing this:\n  \\<chi> \\<noteq> principal_dchar n\n\ngoal (1 subgoal):\n 1. sum \\<chi> {..<n} = 0", "by (subst sum_dcharacter_block) simp_all"], ["proof (state)\nthis:\n  sum \\<chi> {..<n} = 0\n\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow>\n    sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "also"], ["proof (state)\nthis:\n  sum \\<chi> {..<n} = 0\n\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow>\n    sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "from False"], ["proof (chain)\npicking this:\n  \\<not> m < n", "have \"(\\<Sum>x\\<in>{n..<m}. \\<chi> x) = (\\<Sum>x\\<in>{..<m - n}. \\<chi> (x + n))\""], ["proof (prove)\nusing this:\n  \\<not> m < n\n\ngoal (1 subgoal):\n 1. sum \\<chi> {n..<m} = (\\<Sum>x<m - n. \\<chi> (x + n))", "by (intro sum.reindex_bij_witness[of _ \"\\<lambda>x. x + n\" \"\\<lambda>x. x - n\"]) (auto simp: periodic)"], ["proof (state)\nthis:\n  sum \\<chi> {n..<m} = (\\<Sum>x<m - n. \\<chi> (x + n))\n\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow>\n    sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "also"], ["proof (state)\nthis:\n  sum \\<chi> {n..<m} = (\\<Sum>x<m - n. \\<chi> (x + n))\n\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow>\n    sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "have \"\\<dots> = (\\<Sum>x\\<in>{..<m - n}. \\<chi> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x<m - n. \\<chi> (x + n)) = sum \\<chi> {..<m - n}", "by (simp add: periodic)"], ["proof (state)\nthis:\n  (\\<Sum>x<m - n. \\<chi> (x + n)) = sum \\<chi> {..<m - n}\n\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow>\n    sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "also"], ["proof (state)\nthis:\n  (\\<Sum>x<m - n. \\<chi> (x + n)) = sum \\<chi> {..<m - n}\n\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow>\n    sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "have \"\\<dots> = (\\<Sum>x<(m - n) mod n. \\<chi> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum \\<chi> {..<m - n} = sum \\<chi> {..<(m - n) mod n}", "using False and n"], ["proof (prove)\nusing this:\n  \\<not> m < n\n  1 < n\n\ngoal (1 subgoal):\n 1. sum \\<chi> {..<m - n} = sum \\<chi> {..<(m - n) mod n}", "by (intro less.IH) auto"], ["proof (state)\nthis:\n  sum \\<chi> {..<m - n} = sum \\<chi> {..<(m - n) mod n}\n\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow>\n    sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "also"], ["proof (state)\nthis:\n  sum \\<chi> {..<m - n} = sum \\<chi> {..<(m - n) mod n}\n\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow>\n    sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "from False and n"], ["proof (chain)\npicking this:\n  \\<not> m < n\n  1 < n", "have \"(m - n) mod n = m mod n\""], ["proof (prove)\nusing this:\n  \\<not> m < n\n  1 < n\n\ngoal (1 subgoal):\n 1. (m - n) mod n = m mod n", "by (simp add: mod_geq [symmetric])"], ["proof (state)\nthis:\n  (m - n) mod n = m mod n\n\ngoal (1 subgoal):\n 1. \\<not> m < n \\<Longrightarrow>\n    sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "finally"], ["proof (chain)\npicking this:\n  sum \\<chi> {..<m} = 0 + sum \\<chi> {..<m mod n}", "show ?thesis"], ["proof (prove)\nusing this:\n  sum \\<chi> {..<m} = 0 + sum \\<chi> {..<m mod n}\n\ngoal (1 subgoal):\n 1. sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "by simp"], ["proof (state)\nthis:\n  sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in dcharacter) sum_dcharacter_lessThan_le:\n  assumes \"\\<chi> \\<noteq> principal_dchar n\"\n  shows   \"norm (\\<Sum>x<m. \\<chi> x) \\<le> totient n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cmod (sum \\<chi> {..<m}) \\<le> real (totient n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cmod (sum \\<chi> {..<m}) \\<le> real (totient n)", "have \"(\\<Sum>x<m. \\<chi> x) = (\\<Sum>x<m mod n. \\<chi> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}", "by (rule sum_lessThan_dcharacter) fact"], ["proof (state)\nthis:\n  sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}\n\ngoal (1 subgoal):\n 1. cmod (sum \\<chi> {..<m}) \\<le> real (totient n)", "also"], ["proof (state)\nthis:\n  sum \\<chi> {..<m} = sum \\<chi> {..<m mod n}\n\ngoal (1 subgoal):\n 1. cmod (sum \\<chi> {..<m}) \\<le> real (totient n)", "have \"\\<dots> = (\\<Sum>x | x < m mod n \\<and> coprime x n. \\<chi> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum \\<chi> {..<m mod n} =\n    (\\<Sum>x | x < m mod n \\<and> coprime x n. \\<chi> x)", "by (intro sum.mono_neutral_right) (auto simp: eq_zero_iff)"], ["proof (state)\nthis:\n  sum \\<chi> {..<m mod n} =\n  (\\<Sum>x | x < m mod n \\<and> coprime x n. \\<chi> x)\n\ngoal (1 subgoal):\n 1. cmod (sum \\<chi> {..<m}) \\<le> real (totient n)", "also"], ["proof (state)\nthis:\n  sum \\<chi> {..<m mod n} =\n  (\\<Sum>x | x < m mod n \\<and> coprime x n. \\<chi> x)\n\ngoal (1 subgoal):\n 1. cmod (sum \\<chi> {..<m}) \\<le> real (totient n)", "have \"norm \\<dots> \\<le> (\\<Sum>x | x < m mod n \\<and> coprime x n. 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cmod (\\<Sum>x | x < m mod n \\<and> coprime x n. \\<chi> x)\n    \\<le> (\\<Sum>x | x < m mod n \\<and> coprime x n. 1)", "by (rule sum_norm_le) (auto simp: norm)"], ["proof (state)\nthis:\n  cmod (\\<Sum>x | x < m mod n \\<and> coprime x n. \\<chi> x)\n  \\<le> (\\<Sum>x | x < m mod n \\<and> coprime x n. 1)\n\ngoal (1 subgoal):\n 1. cmod (sum \\<chi> {..<m}) \\<le> real (totient n)", "also"], ["proof (state)\nthis:\n  cmod (\\<Sum>x | x < m mod n \\<and> coprime x n. \\<chi> x)\n  \\<le> (\\<Sum>x | x < m mod n \\<and> coprime x n. 1)\n\ngoal (1 subgoal):\n 1. cmod (sum \\<chi> {..<m}) \\<le> real (totient n)", "have \"\\<dots> = card {x. x < m mod n \\<and> coprime x n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x | x < m mod n \\<and> coprime x n. 1) =\n    real (card {x. x < m mod n \\<and> coprime x n})", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x | x < m mod n \\<and> coprime x n. 1) =\n  real (card {x. x < m mod n \\<and> coprime x n})\n\ngoal (1 subgoal):\n 1. cmod (sum \\<chi> {..<m}) \\<le> real (totient n)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x | x < m mod n \\<and> coprime x n. 1) =\n  real (card {x. x < m mod n \\<and> coprime x n})\n\ngoal (1 subgoal):\n 1. cmod (sum \\<chi> {..<m}) \\<le> real (totient n)", "have \"\\<dots> \\<le> card (totatives n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (card {x. x < m mod n \\<and> coprime x n})\n    \\<le> real (card (totatives n))", "unfolding of_nat_le_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {x. x < m mod n \\<and> coprime x n} \\<le> card (totatives n)", "proof (intro card_mono subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (totatives n)\n 2. \\<And>x.\n       x \\<in> {x. x < m mod n \\<and> coprime x n} \\<Longrightarrow>\n       x \\<in> totatives n", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (totatives n)\n 2. \\<And>x.\n       x \\<in> {x. x < m mod n \\<and> coprime x n} \\<Longrightarrow>\n       x \\<in> totatives n", "assume x: \"x \\<in> {x. x < m mod n \\<and> coprime x n}\""], ["proof (state)\nthis:\n  x \\<in> {x. x < m mod n \\<and> coprime x n}\n\ngoal (2 subgoals):\n 1. finite (totatives n)\n 2. \\<And>x.\n       x \\<in> {x. x < m mod n \\<and> coprime x n} \\<Longrightarrow>\n       x \\<in> totatives n", "hence \"x < m mod n\""], ["proof (prove)\nusing this:\n  x \\<in> {x. x < m mod n \\<and> coprime x n}\n\ngoal (1 subgoal):\n 1. x < m mod n", "by simp"], ["proof (state)\nthis:\n  x < m mod n\n\ngoal (2 subgoals):\n 1. finite (totatives n)\n 2. \\<And>x.\n       x \\<in> {x. x < m mod n \\<and> coprime x n} \\<Longrightarrow>\n       x \\<in> totatives n", "also"], ["proof (state)\nthis:\n  x < m mod n\n\ngoal (2 subgoals):\n 1. finite (totatives n)\n 2. \\<And>x.\n       x \\<in> {x. x < m mod n \\<and> coprime x n} \\<Longrightarrow>\n       x \\<in> totatives n", "have \"\\<dots> < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m mod n < n", "using n"], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. m mod n < n", "by simp"], ["proof (state)\nthis:\n  m mod n < n\n\ngoal (2 subgoals):\n 1. finite (totatives n)\n 2. \\<And>x.\n       x \\<in> {x. x < m mod n \\<and> coprime x n} \\<Longrightarrow>\n       x \\<in> totatives n", "finally"], ["proof (chain)\npicking this:\n  x < n", "show \"x \\<in> totatives n\""], ["proof (prove)\nusing this:\n  x < n\n\ngoal (1 subgoal):\n 1. x \\<in> totatives n", "using x"], ["proof (prove)\nusing this:\n  x < n\n  x \\<in> {x. x < m mod n \\<and> coprime x n}\n\ngoal (1 subgoal):\n 1. x \\<in> totatives n", "by (auto simp: totatives_def intro!: Nat.gr0I)"], ["proof (state)\nthis:\n  x \\<in> totatives n\n\ngoal (1 subgoal):\n 1. finite (totatives n)", "qed auto"], ["proof (state)\nthis:\n  real (card {x. x < m mod n \\<and> coprime x n})\n  \\<le> real (card (totatives n))\n\ngoal (1 subgoal):\n 1. cmod (sum \\<chi> {..<m}) \\<le> real (totient n)", "also"], ["proof (state)\nthis:\n  real (card {x. x < m mod n \\<and> coprime x n})\n  \\<le> real (card (totatives n))\n\ngoal (1 subgoal):\n 1. cmod (sum \\<chi> {..<m}) \\<le> real (totient n)", "have \"\\<dots> = totient n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. real (card (totatives n)) = real (totient n)", "by (simp add: totient_def)"], ["proof (state)\nthis:\n  real (card (totatives n)) = real (totient n)\n\ngoal (1 subgoal):\n 1. cmod (sum \\<chi> {..<m}) \\<le> real (totient n)", "finally"], ["proof (chain)\npicking this:\n  cmod (sum \\<chi> {..<m}) \\<le> real (totient n)", "show ?thesis"], ["proof (prove)\nusing this:\n  cmod (sum \\<chi> {..<m}) \\<le> real (totient n)\n\ngoal (1 subgoal):\n 1. cmod (sum \\<chi> {..<m}) \\<le> real (totient n)", "."], ["proof (state)\nthis:\n  cmod (sum \\<chi> {..<m}) \\<le> real (totient n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in dcharacter) sum_dcharacter_atMost_le:\n  assumes \"\\<chi> \\<noteq> principal_dchar n\"\n  shows   \"norm (\\<Sum>x\\<le>m. \\<chi> x) \\<le> totient n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cmod (sum \\<chi> {..m}) \\<le> real (totient n)", "using sum_dcharacter_lessThan_le[OF assms, of \"Suc m\"]"], ["proof (prove)\nusing this:\n  cmod (sum \\<chi> {..<Suc m}) \\<le> real (totient n)\n\ngoal (1 subgoal):\n 1. cmod (sum \\<chi> {..m}) \\<le> real (totient n)", "by (subst (asm) lessThan_Suc_atMost)"], ["", "lemma (in residues_nat) sum_dcharacters:\n  \"(\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) = (if [x = 1] (mod n) then of_nat (totient n) else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)", "proof (cases \"coprime x n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)\n 2. \\<not> coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)", "case True"], ["proof (state)\nthis:\n  coprime x n\n\ngoal (2 subgoals):\n 1. coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)\n 2. \\<not> coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)", "with n"], ["proof (chain)\npicking this:\n  1 < n\n  coprime x n", "have x: \"x mod n \\<in> totatives n\""], ["proof (prove)\nusing this:\n  1 < n\n  coprime x n\n\ngoal (1 subgoal):\n 1. x mod n \\<in> totatives n", "by (auto simp: mod_in_totatives)"], ["proof (state)\nthis:\n  x mod n \\<in> totatives n\n\ngoal (2 subgoals):\n 1. coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)\n 2. \\<not> coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)", "have \"(\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) = (\\<Sum>\\<chi>\\<in>characters G. c2dc \\<chi> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (\\<Sum>\\<chi>\\<in>characters G. c2dc \\<chi> x)", "by (rule sum.reindex_bij_betw [OF bij_betw_characters_dcharacters, symmetric])"], ["proof (state)\nthis:\n  (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n  (\\<Sum>\\<chi>\\<in>characters G. c2dc \\<chi> x)\n\ngoal (2 subgoals):\n 1. coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)\n 2. \\<not> coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n  (\\<Sum>\\<chi>\\<in>characters G. c2dc \\<chi> x)\n\ngoal (2 subgoals):\n 1. coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)\n 2. \\<not> coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)", "from x"], ["proof (chain)\npicking this:\n  x mod n \\<in> totatives n", "have \"\\<dots> = (\\<Sum>\\<chi>\\<in>characters G. \\<chi> (x mod n))\""], ["proof (prove)\nusing this:\n  x mod n \\<in> totatives n\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>characters G. c2dc \\<chi> x) =\n    (\\<Sum>\\<chi>\\<in>characters G. \\<chi> (x mod n))", "by (simp add: c2dc_def)"], ["proof (state)\nthis:\n  (\\<Sum>\\<chi>\\<in>characters G. c2dc \\<chi> x) =\n  (\\<Sum>\\<chi>\\<in>characters G. \\<chi> (x mod n))\n\ngoal (2 subgoals):\n 1. coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)\n 2. \\<not> coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<chi>\\<in>characters G. c2dc \\<chi> x) =\n  (\\<Sum>\\<chi>\\<in>characters G. \\<chi> (x mod n))\n\ngoal (2 subgoals):\n 1. coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)\n 2. \\<not> coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)", "from x"], ["proof (chain)\npicking this:\n  x mod n \\<in> totatives n", "have \"\\<dots> = (if x mod n = 1 then order G else 0)\""], ["proof (prove)\nusing this:\n  x mod n \\<in> totatives n\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>characters G. \\<chi> (x mod n)) =\n    of_nat (if x mod n = 1 then order G else 0)", "by (subst sum_characters) (unfold G_def residue_mult_group_def, auto)"], ["proof (state)\nthis:\n  (\\<Sum>\\<chi>\\<in>characters G. \\<chi> (x mod n)) =\n  of_nat (if x mod n = 1 then order G else 0)\n\ngoal (2 subgoals):\n 1. coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)\n 2. \\<not> coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)", "also"], ["proof (state)\nthis:\n  (\\<Sum>\\<chi>\\<in>characters G. \\<chi> (x mod n)) =\n  of_nat (if x mod n = 1 then order G else 0)\n\ngoal (2 subgoals):\n 1. coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)\n 2. \\<not> coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)", "from n"], ["proof (chain)\npicking this:\n  1 < n", "have \"x mod n = 1 \\<longleftrightarrow> [x = 1] (mod n)\""], ["proof (prove)\nusing this:\n  1 < n\n\ngoal (1 subgoal):\n 1. (x mod n = 1) = [x = 1] (mod n)", "by (simp add: cong_def)"], ["proof (state)\nthis:\n  (x mod n = 1) = [x = 1] (mod n)\n\ngoal (2 subgoals):\n 1. coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)\n 2. \\<not> coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n  of_nat (if [x = 1] (mod n) then order G else 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n  of_nat (if [x = 1] (mod n) then order G else 0)\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n  (if [x = 1] (mod n) then of_nat (totient n) else 0)\n\ngoal (1 subgoal):\n 1. \\<not> coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)", "case False"], ["proof (state)\nthis:\n  \\<not> coprime x n\n\ngoal (1 subgoal):\n 1. \\<not> coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)", "have \"x mod n \\<noteq> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x mod n \\<noteq> 1", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. x mod n = 1 \\<Longrightarrow> False", "assume *: \"x mod n = 1\""], ["proof (state)\nthis:\n  x mod n = 1\n\ngoal (1 subgoal):\n 1. x mod n = 1 \\<Longrightarrow> False", "have \"gcd (x mod n) n = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (x mod n) n = 1", "by (subst *) simp"], ["proof (state)\nthis:\n  gcd (x mod n) n = 1\n\ngoal (1 subgoal):\n 1. x mod n = 1 \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  gcd (x mod n) n = 1\n\ngoal (1 subgoal):\n 1. x mod n = 1 \\<Longrightarrow> False", "have \"gcd (x mod n) n = gcd x n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gcd (x mod n) n = gcd x n", "by (subst gcd.commute) (simp only: gcd_red_nat [symmetric])"], ["proof (state)\nthis:\n  gcd (x mod n) n = gcd x n\n\ngoal (1 subgoal):\n 1. x mod n = 1 \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  gcd x n = 1", "show False"], ["proof (prove)\nusing this:\n  gcd x n = 1\n\ngoal (1 subgoal):\n 1. False", "using \\<open>\\<not>coprime x n\\<close>"], ["proof (prove)\nusing this:\n  gcd x n = 1\n  \\<not> coprime x n\n\ngoal (1 subgoal):\n 1. False", "unfolding coprime_iff_gcd_eq_1"], ["proof (prove)\nusing this:\n  gcd x n = 1\n  gcd x n \\<noteq> 1\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x mod n \\<noteq> 1\n\ngoal (1 subgoal):\n 1. \\<not> coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)", "from False"], ["proof (chain)\npicking this:\n  \\<not> coprime x n", "have \"(\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) = 0\""], ["proof (prove)\nusing this:\n  \\<not> coprime x n\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) = 0", "by (intro sum.neutral) (auto simp: dcharacters_def dcharacter.eq_zero)"], ["proof (state)\nthis:\n  (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) = 0\n\ngoal (1 subgoal):\n 1. \\<not> coprime x n \\<Longrightarrow>\n    (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)", "with \\<open>x mod n \\<noteq> 1\\<close> and n"], ["proof (chain)\npicking this:\n  x mod n \\<noteq> 1\n  1 < n\n  (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  x mod n \\<noteq> 1\n  1 < n\n  (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n    (if [x = 1] (mod n) then of_nat (totient n) else 0)", "by (simp add: cong_def)"], ["proof (state)\nthis:\n  (\\<Sum>\\<chi>\\<in>dcharacters n. \\<chi> x) =\n  (if [x = 1] (mod n) then of_nat (totient n) else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in dcharacter) even_dcharacter_linear_sum_eq_0 [simp]:\n  assumes \"\\<chi> \\<noteq> principal_dchar n\" and \"\\<chi> (n - 1) = 1\"\n  shows   \"(\\<Sum>k=Suc 0..<n. of_nat k * \\<chi> k) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = Suc 0..<n. of_nat k * \\<chi> k) = 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>k = Suc 0..<n. of_nat k * \\<chi> k) = 0", "have \"(\\<Sum>k=1..<n. of_nat k * \\<chi> k) = (\\<Sum>k=1..<n. (of_nat n - of_nat k) * \\<chi> (n - k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 1..<n. of_nat k * \\<chi> k) =\n    (\\<Sum>k = 1..<n. (of_nat n - of_nat k) * \\<chi> (n - k))", "by (intro sum.reindex_bij_witness[where i = \"\\<lambda>k. n - k\" and j = \"\\<lambda>k. n - k\"])\n       (auto simp: of_nat_diff)"], ["proof (state)\nthis:\n  (\\<Sum>k = 1..<n. of_nat k * \\<chi> k) =\n  (\\<Sum>k = 1..<n. (of_nat n - of_nat k) * \\<chi> (n - k))\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = Suc 0..<n. of_nat k * \\<chi> k) = 0", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 1..<n. of_nat k * \\<chi> k) =\n  (\\<Sum>k = 1..<n. (of_nat n - of_nat k) * \\<chi> (n - k))\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = Suc 0..<n. of_nat k * \\<chi> k) = 0", "have \"\\<dots> = n * (\\<Sum>k=1..<n. \\<chi> (n - k)) - (\\<Sum>k=1..<n. k * \\<chi> (n - k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 1..<n. (of_nat n - of_nat k) * \\<chi> (n - k)) =\n    of_nat n * (\\<Sum>k = 1..<n. \\<chi> (n - k)) -\n    (\\<Sum>k = 1..<n. of_nat k * \\<chi> (n - k))", "by (simp add: algebra_simps sum_subtractf sum_distrib_left)"], ["proof (state)\nthis:\n  (\\<Sum>k = 1..<n. (of_nat n - of_nat k) * \\<chi> (n - k)) =\n  of_nat n * (\\<Sum>k = 1..<n. \\<chi> (n - k)) -\n  (\\<Sum>k = 1..<n. of_nat k * \\<chi> (n - k))\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = Suc 0..<n. of_nat k * \\<chi> k) = 0", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 1..<n. (of_nat n - of_nat k) * \\<chi> (n - k)) =\n  of_nat n * (\\<Sum>k = 1..<n. \\<chi> (n - k)) -\n  (\\<Sum>k = 1..<n. of_nat k * \\<chi> (n - k))\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = Suc 0..<n. of_nat k * \\<chi> k) = 0", "have \"(\\<Sum>k=1..<n. \\<chi> (n - k)) = (\\<Sum>k=1..<n. \\<chi> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 1..<n. \\<chi> (n - k)) = sum \\<chi> {1..<n}", "by (intro sum.reindex_bij_witness[where i = \"\\<lambda>k. n - k\" and j = \"\\<lambda>k. n - k\"]) auto"], ["proof (state)\nthis:\n  (\\<Sum>k = 1..<n. \\<chi> (n - k)) = sum \\<chi> {1..<n}\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = Suc 0..<n. of_nat k * \\<chi> k) = 0", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 1..<n. \\<chi> (n - k)) = sum \\<chi> {1..<n}\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = Suc 0..<n. of_nat k * \\<chi> k) = 0", "have \"\\<dots> = (\\<Sum>k<n. \\<chi> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum \\<chi> {1..<n} = sum \\<chi> {..<n}", "by (intro sum.mono_neutral_left) (auto simp: Suc_le_eq)"], ["proof (state)\nthis:\n  sum \\<chi> {1..<n} = sum \\<chi> {..<n}\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = Suc 0..<n. of_nat k * \\<chi> k) = 0", "also"], ["proof (state)\nthis:\n  sum \\<chi> {1..<n} = sum \\<chi> {..<n}\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = Suc 0..<n. of_nat k * \\<chi> k) = 0", "have \"\\<dots> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum \\<chi> {..<n} = 0", "using assms"], ["proof (prove)\nusing this:\n  \\<chi> \\<noteq> principal_dchar n\n  \\<chi> (n - 1) = 1\n\ngoal (1 subgoal):\n 1. sum \\<chi> {..<n} = 0", "by (simp add: sum_dcharacter_block)"], ["proof (state)\nthis:\n  sum \\<chi> {..<n} = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = Suc 0..<n. of_nat k * \\<chi> k) = 0", "also"], ["proof (state)\nthis:\n  sum \\<chi> {..<n} = 0\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = Suc 0..<n. of_nat k * \\<chi> k) = 0", "have \"(\\<Sum>k=1..<n. of_nat k * \\<chi> (n - k)) = (\\<Sum>k=1..<n. k * \\<chi> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 1..<n. of_nat k * \\<chi> (n - k)) =\n    (\\<Sum>k = 1..<n. of_nat k * \\<chi> k)", "proof (intro sum.cong refl)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {1..<n} \\<Longrightarrow>\n       of_nat x * \\<chi> (n - x) = of_nat x * \\<chi> x", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {1..<n} \\<Longrightarrow>\n       of_nat x * \\<chi> (n - x) = of_nat x * \\<chi> x", "assume k: \"k \\<in> {1..<n}\""], ["proof (state)\nthis:\n  k \\<in> {1..<n}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {1..<n} \\<Longrightarrow>\n       of_nat x * \\<chi> (n - x) = of_nat x * \\<chi> x", "have \"of_nat k * \\<chi> k = of_nat k * \\<chi> ((n - 1) * k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_nat k * \\<chi> k = of_nat k * \\<chi> ((n - 1) * k)", "using assms"], ["proof (prove)\nusing this:\n  \\<chi> \\<noteq> principal_dchar n\n  \\<chi> (n - 1) = 1\n\ngoal (1 subgoal):\n 1. of_nat k * \\<chi> k = of_nat k * \\<chi> ((n - 1) * k)", "by (subst mult) simp_all"], ["proof (state)\nthis:\n  of_nat k * \\<chi> k = of_nat k * \\<chi> ((n - 1) * k)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {1..<n} \\<Longrightarrow>\n       of_nat x * \\<chi> (n - x) = of_nat x * \\<chi> x", "also"], ["proof (state)\nthis:\n  of_nat k * \\<chi> k = of_nat k * \\<chi> ((n - 1) * k)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {1..<n} \\<Longrightarrow>\n       of_nat x * \\<chi> (n - x) = of_nat x * \\<chi> x", "have \"(n - 1) * k = n - k + (k - 1) * n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n - 1) * k = n - k + (k - 1) * n", "using k"], ["proof (prove)\nusing this:\n  k \\<in> {1..<n}\n\ngoal (1 subgoal):\n 1. (n - 1) * k = n - k + (k - 1) * n", "by (simp add: algebra_simps)"], ["proof (state)\nthis:\n  (n - 1) * k = n - k + (k - 1) * n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {1..<n} \\<Longrightarrow>\n       of_nat x * \\<chi> (n - x) = of_nat x * \\<chi> x", "also"], ["proof (state)\nthis:\n  (n - 1) * k = n - k + (k - 1) * n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {1..<n} \\<Longrightarrow>\n       of_nat x * \\<chi> (n - x) = of_nat x * \\<chi> x", "have \"\\<chi> \\<dots> = \\<chi> (n - k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<chi> (n - k + (k - 1) * n) = \\<chi> (n - k)", "by (rule periodic_mult)"], ["proof (state)\nthis:\n  \\<chi> (n - k + (k - 1) * n) = \\<chi> (n - k)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {1..<n} \\<Longrightarrow>\n       of_nat x * \\<chi> (n - x) = of_nat x * \\<chi> x", "finally"], ["proof (chain)\npicking this:\n  of_nat k * \\<chi> k = of_nat k * \\<chi> (n - k)", "show \"of_nat k * \\<chi> (n - k) = of_nat k * \\<chi> k\""], ["proof (prove)\nusing this:\n  of_nat k * \\<chi> k = of_nat k * \\<chi> (n - k)\n\ngoal (1 subgoal):\n 1. of_nat k * \\<chi> (n - k) = of_nat k * \\<chi> k", ".."], ["proof (state)\nthis:\n  of_nat k * \\<chi> (n - k) = of_nat k * \\<chi> k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<Sum>k = 1..<n. of_nat k * \\<chi> (n - k)) =\n  (\\<Sum>k = 1..<n. of_nat k * \\<chi> k)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = Suc 0..<n. of_nat k * \\<chi> k) = 0", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>k = 1..<n. of_nat k * \\<chi> k) =\n  of_nat n * 0 - (\\<Sum>k = 1..<n. of_nat k * \\<chi> k)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>k = 1..<n. of_nat k * \\<chi> k) =\n  of_nat n * 0 - (\\<Sum>k = 1..<n. of_nat k * \\<chi> k)\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = Suc 0..<n. of_nat k * \\<chi> k) = 0", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>k = Suc 0..<n. of_nat k * \\<chi> k) = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}