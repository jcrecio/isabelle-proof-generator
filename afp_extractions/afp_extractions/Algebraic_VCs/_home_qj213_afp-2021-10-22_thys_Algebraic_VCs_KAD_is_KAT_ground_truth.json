{"file_name": "/home/qj213/afp-2021-10-22/thys/Algebraic_VCs/KAD_is_KAT.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Algebraic_VCs", "problem_names": ["lemma H_kat_to_kad: \"H p x q \\<longleftrightarrow> d p \\<le> |x] (d q)\"", "lemma H_eq: \"P \\<subseteq> Id \\<Longrightarrow> Q \\<subseteq> Id \\<Longrightarrow> rel_kat.H P X Q = rel_antidomain_kleene_algebra.H P X Q\"", "lemma H_from_kat: \"PRE p x POST q = (\\<lceil>p\\<rceil> \\<le> (rel_antidomain_kleene_algebra.fbox x) \\<lceil>q\\<rceil>)\"", "lemma cond_iff: \"rel_kat.ifthenelse \\<lceil>P\\<rceil> X Y = rel_antidomain_kleene_algebra.cond \\<lceil>P\\<rceil> X Y\"", "lemma gets_iff: \"v ::= e = VC_KAD.gets v e\"", "lemma maximum: \n  \"PRE (\\<lambda>s:: nat store. True)\n   (IF (\\<lambda>s. s ''x'' \\<ge> s ''y'') \n    THEN (''z'' ::= (\\<lambda>s. s ''x''))\n    ELSE (''z'' ::= (\\<lambda>s. s ''y''))\n    FI)\n   POST (\\<lambda>s. s ''z'' = max (s ''x'') (s ''y''))\"", "lemma maximum2: \n  \"PRE (\\<lambda>s:: nat store. True)\n   (IF (\\<lambda>s. s ''x'' \\<ge> s ''y'') \n    THEN (''z'' ::= (\\<lambda>s. s ''x''))\n    ELSE (''z'' ::= (\\<lambda>s. s ''y''))\n    FI)\n   POST (\\<lambda>s. s ''z'' = max (s ''x'') (s ''y''))\""], "translations": [["", "lemma H_kat_to_kad: \"H p x q \\<longleftrightarrow> d p \\<le> |x] (d q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kat.H (\\<cdot>) (\\<le>) ad p x q = (d p \\<le>  |x] d q)", "using H_def addual.ars_r_def fbox_demodalisation3"], ["proof (prove)\nusing this:\n  kat.H (\\<cdot>) (\\<le>) ad ?p ?x ?q =\n  \\<lparr>ad (ad ?p)\\<rparr>?x\\<lparr>?x \\<cdot> ad (ad ?q)\\<rparr>\n  d ?x = ad (ad ?x)\n  (d ?y \\<le>  |?x] d ?z) =\n  \\<lparr>d ?y\\<rparr>?x\\<lparr>?x \\<cdot> d ?z\\<rparr>\n\ngoal (1 subgoal):\n 1. kat.H (\\<cdot>) (\\<le>) ad p x q = (d p \\<le>  |x] d q)", "by auto"], ["", "end"], ["", "lemma H_eq: \"P \\<subseteq> Id \\<Longrightarrow> Q \\<subseteq> Id \\<Longrightarrow> rel_kat.H P X Q = rel_antidomain_kleene_algebra.H P X Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<subseteq> Id; Q \\<subseteq> Id\\<rbrakk>\n    \\<Longrightarrow> rel_kat.H P X Q =\n                      rel_antidomain_kleene_algebra.H P X Q", "apply (simp add: rel_kat.H_def rel_antidomain_kleene_algebra.H_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<subseteq> Id; Q \\<subseteq> Id\\<rbrakk>\n    \\<Longrightarrow> (Id \\<inter> P ; X \\<subseteq> X ; (Id \\<inter> Q)) =\n                      (rel_antidomain_kleene_algebra.t P ; X\n                       \\<subseteq> X ; rel_antidomain_kleene_algebra.t Q)", "apply (subgoal_tac \"rel_antidomain_kleene_algebra.t P = Id \\<inter> P\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>P \\<subseteq> Id; Q \\<subseteq> Id;\n     rel_antidomain_kleene_algebra.t P = Id \\<inter> P\\<rbrakk>\n    \\<Longrightarrow> (Id \\<inter> P ; X \\<subseteq> X ; (Id \\<inter> Q)) =\n                      (rel_antidomain_kleene_algebra.t P ; X\n                       \\<subseteq> X ; rel_antidomain_kleene_algebra.t Q)\n 2. \\<lbrakk>P \\<subseteq> Id; Q \\<subseteq> Id\\<rbrakk>\n    \\<Longrightarrow> rel_antidomain_kleene_algebra.t P = Id \\<inter> P", "apply (subgoal_tac \"rel_antidomain_kleene_algebra.t Q = Id \\<inter> Q\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>P \\<subseteq> Id; Q \\<subseteq> Id;\n     rel_antidomain_kleene_algebra.t P = Id \\<inter> P;\n     rel_antidomain_kleene_algebra.t Q = Id \\<inter> Q\\<rbrakk>\n    \\<Longrightarrow> (Id \\<inter> P ; X \\<subseteq> X ; (Id \\<inter> Q)) =\n                      (rel_antidomain_kleene_algebra.t P ; X\n                       \\<subseteq> X ; rel_antidomain_kleene_algebra.t Q)\n 2. \\<lbrakk>P \\<subseteq> Id; Q \\<subseteq> Id;\n     rel_antidomain_kleene_algebra.t P = Id \\<inter> P\\<rbrakk>\n    \\<Longrightarrow> rel_antidomain_kleene_algebra.t Q = Id \\<inter> Q\n 3. \\<lbrakk>P \\<subseteq> Id; Q \\<subseteq> Id\\<rbrakk>\n    \\<Longrightarrow> rel_antidomain_kleene_algebra.t P = Id \\<inter> P", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>P \\<subseteq> Id; Q \\<subseteq> Id;\n     rel_antidomain_kleene_algebra.t P = Id \\<inter> P\\<rbrakk>\n    \\<Longrightarrow> rel_antidomain_kleene_algebra.t Q = Id \\<inter> Q\n 2. \\<lbrakk>P \\<subseteq> Id; Q \\<subseteq> Id\\<rbrakk>\n    \\<Longrightarrow> rel_antidomain_kleene_algebra.t P = Id \\<inter> P", "apply (auto simp: rel_ad_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "no_notation VC_KAD.spec_sugar (\"PRE _ _ POST _\" [64,64,64] 63)\nand VC_KAD.cond_sugar (\"IF _ THEN _ ELSE _ FI\" [64,64,64] 63)\nand VC_KAD.gets (\"_ ::= _\" [70, 65] 61)"], ["", "text \\<open>Next we provide some syntactic sugar.\\<close>"], ["", "lemma H_from_kat: \"PRE p x POST q = (\\<lceil>p\\<rceil> \\<le> (rel_antidomain_kleene_algebra.fbox x) \\<lceil>q\\<rceil>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PRE p x POST q = (\\<lceil>p\\<rceil> \\<subseteq> wp x \\<lceil>q\\<rceil>)", "apply (subst H_eq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lceil>p\\<rceil> \\<subseteq> Id\n 2. \\<lceil>q\\<rceil> \\<subseteq> Id\n 3. rel_antidomain_kleene_algebra.H \\<lceil>p\\<rceil> x \\<lceil>q\\<rceil> =\n    (\\<lceil>p\\<rceil> \\<subseteq> wp x \\<lceil>q\\<rceil>)", "apply (clarsimp simp add: p2r_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lceil>q\\<rceil> \\<subseteq> Id\n 2. rel_antidomain_kleene_algebra.H \\<lceil>p\\<rceil> x \\<lceil>q\\<rceil> =\n    (\\<lceil>p\\<rceil> \\<subseteq> wp x \\<lceil>q\\<rceil>)", "apply (clarsimp simp add: p2r_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_antidomain_kleene_algebra.H \\<lceil>p\\<rceil> x \\<lceil>q\\<rceil> =\n    (\\<lceil>p\\<rceil> \\<subseteq> wp x \\<lceil>q\\<rceil>)", "apply (subst rel_antidomain_kleene_algebra.H_kat_to_kad)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rdom \\<lceil>p\\<rceil> \\<subseteq> wp x (rdom \\<lceil>q\\<rceil>)) =\n    (\\<lceil>p\\<rceil> \\<subseteq> wp x \\<lceil>q\\<rceil>)", "apply (subgoal_tac \"rel_antidomain_kleene_algebra.ads_d \\<lceil>p\\<rceil> = \\<lceil>p\\<rceil>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. rdom \\<lceil>p\\<rceil> = \\<lceil>p\\<rceil> \\<Longrightarrow>\n    (rdom \\<lceil>p\\<rceil> \\<subseteq> wp x (rdom \\<lceil>q\\<rceil>)) =\n    (\\<lceil>p\\<rceil> \\<subseteq> wp x \\<lceil>q\\<rceil>)\n 2. rdom \\<lceil>p\\<rceil> = \\<lceil>p\\<rceil>", "apply (subgoal_tac \"rel_antidomain_kleene_algebra.ads_d \\<lceil>q\\<rceil> = \\<lceil>q\\<rceil>\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>rdom \\<lceil>p\\<rceil> = \\<lceil>p\\<rceil>;\n     rdom \\<lceil>q\\<rceil> = \\<lceil>q\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> (rdom \\<lceil>p\\<rceil>\n                       \\<subseteq> wp x (rdom \\<lceil>q\\<rceil>)) =\n                      (\\<lceil>p\\<rceil> \\<subseteq> wp x \\<lceil>q\\<rceil>)\n 2. rdom \\<lceil>p\\<rceil> = \\<lceil>p\\<rceil> \\<Longrightarrow>\n    rdom \\<lceil>q\\<rceil> = \\<lceil>q\\<rceil>\n 3. rdom \\<lceil>p\\<rceil> = \\<lceil>p\\<rceil>", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. rdom \\<lceil>p\\<rceil> = \\<lceil>p\\<rceil> \\<Longrightarrow>\n    rdom \\<lceil>q\\<rceil> = \\<lceil>q\\<rceil>\n 2. rdom \\<lceil>p\\<rceil> = \\<lceil>p\\<rceil>", "apply (auto simp: rel_antidomain_kleene_algebra.ads_d_def rel_ad_def p2r_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cond_iff: \"rel_kat.ifthenelse \\<lceil>P\\<rceil> X Y = rel_antidomain_kleene_algebra.cond \\<lceil>P\\<rceil> X Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. IF P THEN X ELSE Y FI = cond_sugar P X Y", "by (auto simp: rel_kat.ifthenelse_def rel_antidomain_kleene_algebra.cond_def)"], ["", "lemma gets_iff: \"v ::= e = VC_KAD.gets v e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v ::= e = VC_KAD.gets v e", "by (auto simp: VC_KAT.gets_def VC_KAD.gets_def)"], ["", "text \\<open>Finally we present two examples to test the integration.\\<close>"], ["", "lemma maximum: \n  \"PRE (\\<lambda>s:: nat store. True)\n   (IF (\\<lambda>s. s ''x'' \\<ge> s ''y'') \n    THEN (''z'' ::= (\\<lambda>s. s ''x''))\n    ELSE (''z'' ::= (\\<lambda>s. s ''y''))\n    FI)\n   POST (\\<lambda>s. s ''z'' = max (s ''x'') (s ''y''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PRE (\\<lambda>s.\n            True) (IF (\\<lambda>s.\n                          s ''y''\n                          \\<le> s ''x'') THEN (''z'' ::= (\\<lambda>s.\n                       s ''x'')) ELSE (''z'' ::= (\\<lambda>s.\n               s ''y'')) FI) POST (\\<lambda>s.\ns ''z'' = max (s ''x'') (s ''y''))", "by (simp only: sH_cond_iff H_assign_iff, auto)"], ["", "lemma maximum2: \n  \"PRE (\\<lambda>s:: nat store. True)\n   (IF (\\<lambda>s. s ''x'' \\<ge> s ''y'') \n    THEN (''z'' ::= (\\<lambda>s. s ''x''))\n    ELSE (''z'' ::= (\\<lambda>s. s ''y''))\n    FI)\n   POST (\\<lambda>s. s ''z'' = max (s ''x'') (s ''y''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PRE (\\<lambda>s.\n            True) (IF (\\<lambda>s.\n                          s ''y''\n                          \\<le> s ''x'') THEN (''z'' ::= (\\<lambda>s.\n                       s ''x'')) ELSE (''z'' ::= (\\<lambda>s.\n               s ''y'')) FI) POST (\\<lambda>s.\ns ''z'' = max (s ''x'') (s ''y''))", "apply (subst H_from_kat)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lceil>\\<lambda>s. True\\<rceil>\n    \\<subseteq> wp (IF (\\<lambda>s.\n                           s ''y''\n                           \\<le> s ''x'') THEN (''z'' ::= (\\<lambda>s.\n                        s ''x'')) ELSE (''z'' ::= (\\<lambda>s. s ''y'')) FI)\n                 \\<lceil>\\<lambda>s.\n                            s ''z'' = max (s ''x'') (s ''y'')\\<rceil>", "apply (subst cond_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lceil>\\<lambda>s. True\\<rceil>\n    \\<subseteq> wp (cond_sugar (\\<lambda>s. s ''y'' \\<le> s ''x'')\n                     (''z'' ::= (\\<lambda>s. s ''x''))\n                     (''z'' ::= (\\<lambda>s. s ''y'')))\n                 \\<lceil>\\<lambda>s.\n                            s ''z'' = max (s ''x'') (s ''y'')\\<rceil>", "apply (subst gets_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lceil>\\<lambda>s. True\\<rceil>\n    \\<subseteq> wp (cond_sugar (\\<lambda>s. s ''y'' \\<le> s ''x'')\n                     (VC_KAD.gets ''z'' (\\<lambda>s. s ''x''))\n                     (''z'' ::= (\\<lambda>s. s ''y'')))\n                 \\<lceil>\\<lambda>s.\n                            s ''z'' = max (s ''x'') (s ''y'')\\<rceil>", "apply (subst gets_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lceil>\\<lambda>s. True\\<rceil>\n    \\<subseteq> wp (cond_sugar (\\<lambda>s. s ''y'' \\<le> s ''x'')\n                     (VC_KAD.gets ''z'' (\\<lambda>s. s ''x''))\n                     (VC_KAD.gets ''z'' (\\<lambda>s. s ''y'')))\n                 \\<lceil>\\<lambda>s.\n                            s ''z'' = max (s ''x'') (s ''y'')\\<rceil>", "by auto"], ["", "end"]]}