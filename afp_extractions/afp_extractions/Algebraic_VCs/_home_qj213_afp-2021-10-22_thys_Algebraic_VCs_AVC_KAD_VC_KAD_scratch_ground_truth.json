{"file_name": "/home/qj213/afp-2021-10-22/thys/Algebraic_VCs/AVC_KAD/VC_KAD_scratch.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Algebraic_VCs", "problem_names": ["lemma mult_isor: \"x \\<le> y \\<Longrightarrow> x \\<cdot> z \\<le> y \\<cdot> z\"", "lemma mult_isol: \"x \\<le> y \\<Longrightarrow> z \\<cdot> x \\<le> z \\<cdot> y\"", "lemma add_iso: \"x \\<le> y \\<Longrightarrow> z + x \\<le> z + y\"", "lemma add_ub: \"x \\<le> x + y\"", "lemma add_lub: \"x + y \\<le> z \\<longleftrightarrow> x \\<le> z \\<and> y \\<le> z\"", "lemma star_sim: \"x \\<cdot> y \\<le> z \\<cdot> x \\<Longrightarrow> x \\<cdot> y\\<^sup>\\<star> \\<le> z\\<^sup>\\<star> \\<cdot> x\"", "lemma a_subid_aux: \"ad x \\<cdot> y \\<le> y\"", "lemma d1_a [simp]: \"d x \\<cdot> x = x\"", "lemma a_mul_d [simp]: \"ad x \\<cdot> d x = 0\"", "lemma a_d_closed [simp]: \"d (ad x) = ad x\"", "lemma a_idem [simp]: \"ad x \\<cdot> ad x = ad x\"", "lemma meet_ord: \"ad x \\<le> ad y \\<longleftrightarrow> ad x \\<cdot> ad y = ad x\"", "lemma d_wloc: \"x \\<cdot> y = 0 \\<longleftrightarrow> x \\<cdot> d y = 0\"", "lemma gla_1: \"ad x \\<cdot> y = 0 \\<Longrightarrow> ad x \\<le> ad y\"", "lemma a2_eq [simp]: \"ad (x \\<cdot> d y) = ad (x \\<cdot> y)\"", "lemma a_supdist: \"ad (x + y) \\<le> ad x\"", "lemma a_antitone: \"x \\<le> y \\<Longrightarrow> ad y \\<le> ad x\"", "lemma a_comm: \"ad x \\<cdot> ad y = ad y \\<cdot> ad x\"", "lemma a_closed [simp]: \"d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y\"", "lemma a_exp [simp]: \"ad (ad x \\<cdot> y) = d x + ad y\"", "lemma d1_sum_var: \"x + y \\<le> (d x + d y) \\<cdot> (x + y)\"", "lemma a4: \"ad (x + y) = ad x \\<cdot> ad y\"", "lemma kat_prop: \"d x \\<cdot> y \\<le> y \\<cdot> d z \\<longleftrightarrow> d x \\<cdot> y \\<cdot> ad z = 0\"", "lemma shunt: \"ad x \\<le> ad y + ad z \\<longleftrightarrow> ad x \\<cdot> d y \\<le> ad z\"", "lemma demod: \" d p \\<le> wp x q \\<longleftrightarrow> d p \\<cdot> x \\<le> x \\<cdot> d q\"", "lemma wp_weaken: \"wp x p \\<le> wp (x \\<cdot> ad q) (d p \\<cdot> ad q)\"", "lemma wp_seq [simp]: \"wp (x \\<cdot> y) q = wp x (wp y q)\"", "lemma wp_seq_var: \"p \\<le> wp x r \\<Longrightarrow> r \\<le> wp y q \\<Longrightarrow> p \\<le> wp (x \\<cdot> y) q\"", "lemma wp_cond_var [simp]: \"wp (if p then x else y fi) q = (ad p + wp x q) \\<cdot> (d p + wp y q)\"", "lemma wp_cond_aux1 [simp]: \"d p \\<cdot> wp (if p then x else y fi) q = d p \\<cdot> wp x q\"", "lemma wp_cond_aux2 [simp]: \"ad p \\<cdot> wp (if p then x else y fi) q = ad p \\<cdot> wp y q\"", "lemma wp_cond [simp]: \"wp (if p then x else y fi) q = (d p \\<cdot> wp x q) + (ad p \\<cdot> wp y q)\"", "lemma wp_star_induct_var: \"d q \\<le> wp x q \\<Longrightarrow> d q \\<le> wp (x\\<^sup>\\<star>) q\"", "lemma wp_while: \"d p \\<cdot> d r \\<le> wp x p \\<Longrightarrow> d p \\<le> wp (while r do x od) (d p \\<cdot> ad r)\"", "lemma wp_while_inv: \"d p \\<le> d i \\<Longrightarrow> d i \\<cdot> ad r \\<le> d q \\<Longrightarrow> d i \\<cdot> d r \\<le> wp x i \\<Longrightarrow> d p \\<le> wp (while r inv i do x od) q\"", "lemma wp_while_inv_break: \"d p \\<le> wp y i \\<Longrightarrow> d i \\<cdot> ad r \\<le> d q \\<Longrightarrow> d i \\<cdot> d r \\<le> wp x i \\<Longrightarrow> d p \\<le> wp (y \\<cdot> (while r inv i do x od)) q\"", "lemma (in dioid) pow_inductl: \"z + x \\<cdot> y \\<le> y \\<Longrightarrow> x ^ i \\<cdot> z \\<le> y\"", "lemma (in dioid) pow_inductr: \"z + y \\<cdot> x \\<le> y \\<Longrightarrow> z \\<cdot> x ^ i \\<le> y\"", "lemma power_is_relpow: \"rel_d.power X i = X ^^ i\"", "lemma rel_star_def: \"X^* = (\\<Union>i. rel_d.power X i)\"", "lemma rel_star_contl: \"X ; Y^* = (\\<Union>i. X ; rel_d.power Y i)\"", "lemma rel_star_contr: \"X^* ; Y = (\\<Union>i. (rel_d.power X i) ; Y)\"", "lemma d_p2r [simp]: \"rel_aka.dom_op \\<lceil>P\\<rceil> = \\<lceil>P\\<rceil>\"", "lemma p2r_neg_hom [simp]: \"rel_ad \\<lceil>P\\<rceil> = \\<lceil>\\<lambda>s. \\<not>P s\\<rceil>\"", "lemma p2r_conj_hom [simp]: \"\\<lceil>P\\<rceil> \\<inter> \\<lceil>Q\\<rceil> = \\<lceil>\\<lambda>s. P s \\<and> Q s\\<rceil>\"", "lemma p2r_conj_hom_var [simp]: \"\\<lceil>P\\<rceil> ; \\<lceil>Q\\<rceil> = \\<lceil>\\<lambda>s. P s \\<and> Q s\\<rceil>\"", "lemma p2r_disj_hom [simp]: \"\\<lceil>P\\<rceil> \\<union> \\<lceil>Q\\<rceil> = \\<lceil>\\<lambda>s. P s \\<or> Q s\\<rceil>\"", "lemma wp_assign [simp]: \"rel_aka.wp (v ::= e) \\<lceil>Q\\<rceil> = \\<lceil>\\<lambda>s. Q (s (v := e s))\\<rceil>\"", "lemma euclid:\n  \"PRE (\\<lambda>s::nat store. s ''x'' = x \\<and> s ''y'' = y)\n   (WHILE (\\<lambda>s. s ''y'' \\<noteq> 0) INV (\\<lambda>s. gcd (s ''x'') (s ''y'') = gcd x y) \n    DO\n     (''z'' ::= (\\<lambda>s. s ''y''));\n     (''y'' ::= (\\<lambda>s. s ''x'' mod s ''y''));\n     (''x'' ::= (\\<lambda>s. s ''z''))\n    OD)\n   POST (\\<lambda>s. s ''x'' = gcd x y)\"", "lemma H_skip: \"H p 1 p\"", "lemma H_cons: \"d p \\<le> d p' \\<Longrightarrow> d q' \\<le> d q \\<Longrightarrow> H p' x q' \\<Longrightarrow> H p x q\"", "lemma H_seq: \"H p x r \\<Longrightarrow> H r y q \\<Longrightarrow> H p (x \\<cdot> y) q\"", "lemma H_cond: \"H (d p \\<cdot> d r) x q \\<Longrightarrow> H (d p \\<cdot> ad r) y q \\<Longrightarrow> H p (if r then x else y fi) q\"", "lemma H_loop: \"H (d p \\<cdot> d r) x p \\<Longrightarrow> H p (while r do x od) (d p \\<cdot> ad r)\"", "lemma H_while_inv: \"d p \\<le> d i \\<Longrightarrow> d i \\<cdot> ad r \\<le> d q \\<Longrightarrow> H (d i \\<cdot> d r) x i \\<Longrightarrow> H p (while r inv i do x od) q\"", "lemma HR: \"H p x q \\<longleftrightarrow> x \\<le> R p q\"", "lemma wp_R1: \"d p \\<le> wp (R p q) q\"", "lemma wp_R2: \"x \\<le> R (wp x q) q\"", "lemma wp_R3: \"d p \\<le> wp x q \\<Longrightarrow> x \\<le> R p q\"", "lemma H_R1: \"H p (R p q) q\"", "lemma H_R2: \"H p x q \\<Longrightarrow> x \\<le> R p q\"", "lemma R_skip: \"1 \\<le> R p p\"", "lemma R_cons: \"d p \\<le> d p' \\<Longrightarrow> d q' \\<le> d q \\<Longrightarrow> R p' q' \\<le> R p q\"", "lemma R_seq: \"(R p r) \\<cdot> (R r q) \\<le> R p q\"", "lemma R_cond: \"if v then (R (d v \\<cdot> d p) q) else (R (ad v \\<cdot> d p) q) fi \\<le> R p q\"", "lemma R_loop: \"while q do (R (d p \\<cdot> d q) p) od \\<le> R p (d p \\<cdot> ad q)\"", "lemma R_assign: \"(\\<forall>s. P s \\<longrightarrow> Q (s (v := e s))) \\<Longrightarrow> (v ::= e) \\<subseteq> rel_R \\<lceil>P\\<rceil> \\<lceil>Q\\<rceil>\"", "lemma H_assign_var: \"(\\<forall>s. P s \\<longrightarrow> Q (s (v := e s))) \\<Longrightarrow> rel_aka.H \\<lceil>P\\<rceil> (v ::= e) \\<lceil>Q\\<rceil>\"", "lemma R_assignr: \"(\\<forall>s. Q' s \\<longrightarrow> Q (s (v := e s))) \\<Longrightarrow> (rel_R \\<lceil>P\\<rceil> \\<lceil>Q'\\<rceil>) ; (v ::= e) \\<subseteq> rel_R \\<lceil>P\\<rceil> \\<lceil>Q\\<rceil>\"", "lemma R_assignl: \"(\\<forall>s. P s \\<longrightarrow> P' (s (v := e s))) \\<Longrightarrow> (v ::= e) ; (rel_R \\<lceil>P'\\<rceil> \\<lceil>Q\\<rceil>) \\<subseteq> rel_R \\<lceil>P\\<rceil> \\<lceil>Q\\<rceil>\"", "lemma var_swap_ref1: \n  \"rel_R \\<lceil>\\<lambda>s. s ''x'' = a \\<and> s ''y'' = b\\<rceil> \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil> \n   \\<supseteq> (''z'' ::= (\\<lambda>s. s ''x'')); rel_R \\<lceil>\\<lambda>s. s ''z'' = a \\<and> s ''y'' = b\\<rceil> \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil>\"", "lemma var_swap_ref2: \n  \"rel_R \\<lceil>\\<lambda>s. s ''z'' = a \\<and> s ''y'' = b\\<rceil> \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil> \n   \\<supseteq> (''x'' ::= (\\<lambda>s. s ''y'')); rel_R \\<lceil>\\<lambda>s. s ''z'' = a \\<and> s ''x'' = b\\<rceil> \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil>\"", "lemma var_swap_ref3:  \n  \"rel_R \\<lceil>\\<lambda>s. s ''z'' = a \\<and> s ''x'' = b\\<rceil> \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil> \n   \\<supseteq> (''y'' ::= (\\<lambda>s. s ''z'')); rel_R \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil> \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil>\"", "lemma var_swap_ref_var: \n  \"rel_R \\<lceil>\\<lambda>s. s ''x'' = a \\<and> s ''y'' = b\\<rceil> \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil> \n   \\<supseteq> (''z'' ::= (\\<lambda>s. s ''x'')); (''x'' ::= (\\<lambda>s. s ''y'')); (''y'' ::= (\\<lambda>s. s ''z''))\""], "translations": [["", "lemma mult_isor: \"x \\<le> y \\<Longrightarrow> x \\<cdot> z \\<le> y \\<cdot> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> x \\<cdot> z \\<le> y \\<cdot> z", "by (metis distrib_right less_eq_def)"], ["", "lemma mult_isol: \"x \\<le> y \\<Longrightarrow> z \\<cdot> x \\<le> z \\<cdot> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> z \\<cdot> x \\<le> z \\<cdot> y", "by (metis distrib_left less_eq_def)"], ["", "lemma add_iso: \"x \\<le> y \\<Longrightarrow> z + x \\<le> z + y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> z + x \\<le> z + y", "by (metis add.semigroup_axioms add_idem less_eq_def semigroup.assoc)"], ["", "lemma add_ub: \"x \\<le> x + y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> x + y", "by (metis add_assoc add_idem less_eq_def)"], ["", "lemma add_lub: \"x + y \\<le> z \\<longleftrightarrow> x \\<le> z \\<and> y \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x + y \\<le> z) = (x \\<le> z \\<and> y \\<le> z)", "by (metis add_assoc add_commute less_eq_def order.ordering_axioms ordering.refl)"], ["", "end"], ["", "class kleene_algebra  = dioid +\n  fixes star :: \"'a \\<Rightarrow> 'a\" (\"_\\<^sup>\\<star>\" [101] 100)\n  assumes star_unfoldl: \"1 + x \\<cdot> x\\<^sup>\\<star> \\<le> x\\<^sup>\\<star>\"  \n  and star_unfoldr: \"1 + x\\<^sup>\\<star> \\<cdot> x \\<le> x\\<^sup>\\<star>\"\n  and star_inductl: \"z + x \\<cdot> y \\<le> y \\<Longrightarrow> x\\<^sup>\\<star> \\<cdot> z \\<le> y\"\n  and star_inductr: \"z + y \\<cdot> x \\<le> y \\<Longrightarrow> z \\<cdot> x\\<^sup>\\<star> \\<le> y\"\n\nbegin"], ["", "lemma star_sim: \"x \\<cdot> y \\<le> z \\<cdot> x \\<Longrightarrow> x \\<cdot> y\\<^sup>\\<star> \\<le> z\\<^sup>\\<star> \\<cdot> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> y \\<le> z \\<cdot> x \\<Longrightarrow>\n    x \\<cdot> y\\<^sup>\\<star> \\<le> z\\<^sup>\\<star> \\<cdot> x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<cdot> y \\<le> z \\<cdot> x \\<Longrightarrow>\n    x \\<cdot> y\\<^sup>\\<star> \\<le> z\\<^sup>\\<star> \\<cdot> x", "assume \"x \\<cdot> y \\<le> z \\<cdot> x\""], ["proof (state)\nthis:\n  x \\<cdot> y \\<le> z \\<cdot> x\n\ngoal (1 subgoal):\n 1. x \\<cdot> y \\<le> z \\<cdot> x \\<Longrightarrow>\n    x \\<cdot> y\\<^sup>\\<star> \\<le> z\\<^sup>\\<star> \\<cdot> x", "hence \"x + z\\<^sup>\\<star> \\<cdot> x \\<cdot> y \\<le> x + z\\<^sup>\\<star> \\<cdot> z \\<cdot> x\""], ["proof (prove)\nusing this:\n  x \\<cdot> y \\<le> z \\<cdot> x\n\ngoal (1 subgoal):\n 1. x + z\\<^sup>\\<star> \\<cdot> x \\<cdot> y\n    \\<le> x + z\\<^sup>\\<star> \\<cdot> z \\<cdot> x", "by (metis add_lub distrib_left eq_refl less_eq_def mult_assoc)"], ["proof (state)\nthis:\n  x + z\\<^sup>\\<star> \\<cdot> x \\<cdot> y\n  \\<le> x + z\\<^sup>\\<star> \\<cdot> z \\<cdot> x\n\ngoal (1 subgoal):\n 1. x \\<cdot> y \\<le> z \\<cdot> x \\<Longrightarrow>\n    x \\<cdot> y\\<^sup>\\<star> \\<le> z\\<^sup>\\<star> \\<cdot> x", "also"], ["proof (state)\nthis:\n  x + z\\<^sup>\\<star> \\<cdot> x \\<cdot> y\n  \\<le> x + z\\<^sup>\\<star> \\<cdot> z \\<cdot> x\n\ngoal (1 subgoal):\n 1. x \\<cdot> y \\<le> z \\<cdot> x \\<Longrightarrow>\n    x \\<cdot> y\\<^sup>\\<star> \\<le> z\\<^sup>\\<star> \\<cdot> x", "have  \"... \\<le> z\\<^sup>\\<star> \\<cdot> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + z\\<^sup>\\<star> \\<cdot> z \\<cdot> x \\<le> z\\<^sup>\\<star> \\<cdot> x", "using add_lub mult_isor star_unfoldr"], ["proof (prove)\nusing this:\n  (?x + ?y \\<le> ?z) = (?x \\<le> ?z \\<and> ?y \\<le> ?z)\n  ?x \\<le> ?y \\<Longrightarrow> ?x \\<cdot> ?z \\<le> ?y \\<cdot> ?z\n  (1::'a) + ?x\\<^sup>\\<star> \\<cdot> ?x \\<le> ?x\\<^sup>\\<star>\n\ngoal (1 subgoal):\n 1. x + z\\<^sup>\\<star> \\<cdot> z \\<cdot> x \\<le> z\\<^sup>\\<star> \\<cdot> x", "by fastforce"], ["proof (state)\nthis:\n  x + z\\<^sup>\\<star> \\<cdot> z \\<cdot> x \\<le> z\\<^sup>\\<star> \\<cdot> x\n\ngoal (1 subgoal):\n 1. x \\<cdot> y \\<le> z \\<cdot> x \\<Longrightarrow>\n    x \\<cdot> y\\<^sup>\\<star> \\<le> z\\<^sup>\\<star> \\<cdot> x", "finally"], ["proof (chain)\npicking this:\n  x + z\\<^sup>\\<star> \\<cdot> x \\<cdot> y \\<le> z\\<^sup>\\<star> \\<cdot> x", "show ?thesis"], ["proof (prove)\nusing this:\n  x + z\\<^sup>\\<star> \\<cdot> x \\<cdot> y \\<le> z\\<^sup>\\<star> \\<cdot> x\n\ngoal (1 subgoal):\n 1. x \\<cdot> y\\<^sup>\\<star> \\<le> z\\<^sup>\\<star> \\<cdot> x", "by (simp add: star_inductr)"], ["proof (state)\nthis:\n  x \\<cdot> y\\<^sup>\\<star> \\<le> z\\<^sup>\\<star> \\<cdot> x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "class antidomain_kleene_algebra = kleene_algebra + \n  fixes ad :: \"'a \\<Rightarrow> 'a\" (\"ad\")\n  assumes as1 [simp]: \"ad x \\<cdot> x = 0\"\n  and as2 [simp]: \"ad (x \\<cdot> y) + ad (x \\<cdot> ad (ad y)) = ad (x \\<cdot> ad (ad y))\"\n  and as3 [simp]: \"ad (ad x) + ad x = 1\"\n\nbegin"], ["", "definition dom_op :: \"'a \\<Rightarrow> 'a\" (\"d\") where\n  \"d x = ad (ad x)\""], ["", "lemma a_subid_aux: \"ad x \\<cdot> y \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> y \\<le> y", "by (metis add_commute add_ub as3 mult_1_left mult_isor)"], ["", "lemma d1_a [simp]: \"d x \\<cdot> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<cdot> x = x", "by (metis add_commute dom_op_def add_zerol as1 as3 distrib_right mult_1_left)"], ["", "lemma a_mul_d [simp]: \"ad x \\<cdot> d x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> d x = (0::'a)", "by (metis add_commute dom_op_def add_zerol as1 as2 distrib_right mult_1_left)"], ["", "lemma a_d_closed [simp]: \"d (ad x) = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (ad x) = ad x", "by (metis d1_a dom_op_def add_zerol as1 as3 distrib_left mult_1_right)"], ["", "lemma a_idem [simp]: \"ad x \\<cdot> ad x = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad x = ad x", "by (metis a_d_closed d1_a)"], ["", "lemma meet_ord: \"ad x \\<le> ad y \\<longleftrightarrow> ad x \\<cdot> ad y = ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ad x \\<le> ad y) = (ad x \\<cdot> ad y = ad x)", "by (metis a_d_closed a_subid_aux d1_a antisym mult_1_right mult_isol)"], ["", "lemma d_wloc: \"x \\<cdot> y = 0 \\<longleftrightarrow> x \\<cdot> d y = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<cdot> y = (0::'a)) = (x \\<cdot> d y = (0::'a))", "by (metis a_subid_aux d1_a dom_op_def add_ub antisym as1 as2 mult_1_right mult_assoc)"], ["", "lemma gla_1: \"ad x \\<cdot> y = 0 \\<Longrightarrow> ad x \\<le> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> y = (0::'a) \\<Longrightarrow> ad x \\<le> ad y", "by (metis a_subid_aux d_wloc dom_op_def add_zerol as3 distrib_left mult_1_right)"], ["", "lemma a2_eq [simp]: \"ad (x \\<cdot> d y) = ad (x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x \\<cdot> d y) = ad (x \\<cdot> y)", "by (metis a_mul_d d1_a dom_op_def gla_1 add_ub antisym as1 as2 mult_assoc)"], ["", "lemma a_supdist: \"ad (x + y) \\<le> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x + y) \\<le> ad x", "by (metis add_commute gla_1 add_ub add_zerol as1 distrib_left less_eq_def)"], ["", "lemma a_antitone: \"x \\<le> y \\<Longrightarrow> ad y \\<le> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> ad y \\<le> ad x", "by (metis a_supdist less_eq_def)"], ["", "lemma a_comm: \"ad x \\<cdot> ad y = ad y \\<cdot> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y = ad y \\<cdot> ad x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y = ad y \\<cdot> ad x", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y = ad y \\<cdot> ad x", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y = ad y \\<cdot> ad x", "have \"ad x \\<cdot> ad y = d (ad x \\<cdot> ad y) \\<cdot> ad x \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y = d (ad x \\<cdot> ad y) \\<cdot> ad x \\<cdot> ad y", "by (simp add: mult_assoc)"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y = d (ad x \\<cdot> ad y) \\<cdot> ad x \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y = ad y \\<cdot> ad x", "also"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y = d (ad x \\<cdot> ad y) \\<cdot> ad x \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y = ad y \\<cdot> ad x", "have \"... \\<le> d (ad y) \\<cdot> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> ad y) \\<cdot> ad x \\<cdot> ad y\n    \\<le> d (ad y) \\<cdot> ad x", "by (metis a_antitone a_d_closed a_subid_aux mult_oner a_subid_aux dom_op_def mult_isol mult_isor meet_ord)"], ["proof (state)\nthis:\n  d (ad x \\<cdot> ad y) \\<cdot> ad x \\<cdot> ad y\n  \\<le> d (ad y) \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y = ad y \\<cdot> ad x", "finally"], ["proof (chain)\npicking this:\n  ad x \\<cdot> ad y \\<le> d (ad y) \\<cdot> ad x", "have \"ad x \\<cdot> ad y \\<le> ad y \\<cdot> ad x\""], ["proof (prove)\nusing this:\n  ad x \\<cdot> ad y \\<le> d (ad y) \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad y \\<cdot> ad x", "by simp"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y \\<le> ad y \\<cdot> ad x\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y = ad y \\<cdot> ad x", "}"], ["proof (state)\nthis:\n  ad ?xa2 \\<cdot> ad ?ya2 \\<le> ad ?ya2 \\<cdot> ad ?xa2\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y = ad y \\<cdot> ad x", "thus ?thesis"], ["proof (prove)\nusing this:\n  ad ?xa2 \\<cdot> ad ?ya2 \\<le> ad ?ya2 \\<cdot> ad ?xa2\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y = ad y \\<cdot> ad x", "by (simp add: antisym)"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y = ad y \\<cdot> ad x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_closed [simp]: \"d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y", "have f1: \"\\<And>x y. ad x \\<le> ad (ad y \\<cdot> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. ad x \\<le> ad (ad y \\<cdot> x)", "by (simp add: a_antitone a_subid_aux)"], ["proof (state)\nthis:\n  ad ?x \\<le> ad (ad ?y \\<cdot> ?x)\n\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y", "have \"\\<And>x y. d (ad x \\<cdot> y) \\<le> ad x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. d (ad x \\<cdot> y) \\<le> ad x", "by (metis a2_eq a_antitone a_comm a_d_closed dom_op_def f1)"], ["proof (state)\nthis:\n  d (ad ?x \\<cdot> ?y) \\<le> ad ?x\n\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y", "hence \"\\<And>x y. d (ad x \\<cdot> y) \\<cdot> y = ad x \\<cdot> y\""], ["proof (prove)\nusing this:\n  d (ad ?x \\<cdot> ?y) \\<le> ad ?x\n\ngoal (1 subgoal):\n 1. \\<And>x y. d (ad x \\<cdot> y) \\<cdot> y = ad x \\<cdot> y", "by (metis d1_a dom_op_def meet_ord mult_assoc)"], ["proof (state)\nthis:\n  d (ad ?x \\<cdot> ?y) \\<cdot> ?y = ad ?x \\<cdot> ?y\n\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y", "thus ?thesis"], ["proof (prove)\nusing this:\n  d (ad ?x \\<cdot> ?y) \\<cdot> ?y = ad ?x \\<cdot> ?y\n\ngoal (1 subgoal):\n 1. d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y", "by (metis a_comm a_idem dom_op_def)"], ["proof (state)\nthis:\n  d (ad x \\<cdot> ad y) = ad x \\<cdot> ad y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_exp [simp]: \"ad (ad x \\<cdot> y) = d x + ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> y) = d x + ad y", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. ad (ad x \\<cdot> y) \\<le> d x + ad y\n 2. d x + ad y \\<le> ad (ad x \\<cdot> y)", "have \"ad (ad x \\<cdot> y) \\<cdot> ad x \\<cdot> d y = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> y) \\<cdot> ad x \\<cdot> d y = (0::'a)", "using d_wloc mult_assoc"], ["proof (prove)\nusing this:\n  (?x \\<cdot> ?y = (0::'a)) = (?x \\<cdot> d ?y = (0::'a))\n  ?a \\<cdot> ?b \\<cdot> ?c = ?a \\<cdot> (?b \\<cdot> ?c)\n\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> y) \\<cdot> ad x \\<cdot> d y = (0::'a)", "by fastforce"], ["proof (state)\nthis:\n  ad (ad x \\<cdot> y) \\<cdot> ad x \\<cdot> d y = (0::'a)\n\ngoal (2 subgoals):\n 1. ad (ad x \\<cdot> y) \\<le> d x + ad y\n 2. d x + ad y \\<le> ad (ad x \\<cdot> y)", "hence a: \"ad (ad x \\<cdot> y) \\<cdot> d y \\<le> d x\""], ["proof (prove)\nusing this:\n  ad (ad x \\<cdot> y) \\<cdot> ad x \\<cdot> d y = (0::'a)\n\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> y) \\<cdot> d y \\<le> d x", "by (metis a_closed a_comm dom_op_def gla_1 mult_assoc)"], ["proof (state)\nthis:\n  ad (ad x \\<cdot> y) \\<cdot> d y \\<le> d x\n\ngoal (2 subgoals):\n 1. ad (ad x \\<cdot> y) \\<le> d x + ad y\n 2. d x + ad y \\<le> ad (ad x \\<cdot> y)", "have \"ad (ad x \\<cdot> y) = ad (ad x \\<cdot> y) \\<cdot> d y + ad (ad x \\<cdot> y) \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> y) =\n    ad (ad x \\<cdot> y) \\<cdot> d y + ad (ad x \\<cdot> y) \\<cdot> ad y", "by (metis dom_op_def as3 distrib_left mult_oner)"], ["proof (state)\nthis:\n  ad (ad x \\<cdot> y) =\n  ad (ad x \\<cdot> y) \\<cdot> d y + ad (ad x \\<cdot> y) \\<cdot> ad y\n\ngoal (2 subgoals):\n 1. ad (ad x \\<cdot> y) \\<le> d x + ad y\n 2. d x + ad y \\<le> ad (ad x \\<cdot> y)", "also"], ["proof (state)\nthis:\n  ad (ad x \\<cdot> y) =\n  ad (ad x \\<cdot> y) \\<cdot> d y + ad (ad x \\<cdot> y) \\<cdot> ad y\n\ngoal (2 subgoals):\n 1. ad (ad x \\<cdot> y) \\<le> d x + ad y\n 2. d x + ad y \\<le> ad (ad x \\<cdot> y)", "have \"... \\<le> d x +  ad (ad x \\<cdot> y) \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> y) \\<cdot> d y + ad (ad x \\<cdot> y) \\<cdot> ad y\n    \\<le> d x + ad (ad x \\<cdot> y) \\<cdot> ad y", "using a add_lub dual_order.trans"], ["proof (prove)\nusing this:\n  ad (ad x \\<cdot> y) \\<cdot> d y \\<le> d x\n  (?x + ?y \\<le> ?z) = (?x \\<le> ?z \\<and> ?y \\<le> ?z)\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> y) \\<cdot> d y + ad (ad x \\<cdot> y) \\<cdot> ad y\n    \\<le> d x + ad (ad x \\<cdot> y) \\<cdot> ad y", "by blast"], ["proof (state)\nthis:\n  ad (ad x \\<cdot> y) \\<cdot> d y + ad (ad x \\<cdot> y) \\<cdot> ad y\n  \\<le> d x + ad (ad x \\<cdot> y) \\<cdot> ad y\n\ngoal (2 subgoals):\n 1. ad (ad x \\<cdot> y) \\<le> d x + ad y\n 2. d x + ad y \\<le> ad (ad x \\<cdot> y)", "finally"], ["proof (chain)\npicking this:\n  ad (ad x \\<cdot> y) \\<le> d x + ad (ad x \\<cdot> y) \\<cdot> ad y", "show \"ad (ad x \\<cdot> y) \\<le> d x + ad y\""], ["proof (prove)\nusing this:\n  ad (ad x \\<cdot> y) \\<le> d x + ad (ad x \\<cdot> y) \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. ad (ad x \\<cdot> y) \\<le> d x + ad y", "by (metis a_antitone a_comm a_subid_aux meet_ord)"], ["proof (state)\nthis:\n  ad (ad x \\<cdot> y) \\<le> d x + ad y\n\ngoal (1 subgoal):\n 1. d x + ad y \\<le> ad (ad x \\<cdot> y)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. d x + ad y \\<le> ad (ad x \\<cdot> y)", "have \"ad y \\<le> ad (ad x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad y \\<le> ad (ad x \\<cdot> y)", "by (simp add: a_antitone a_subid_aux)"], ["proof (state)\nthis:\n  ad y \\<le> ad (ad x \\<cdot> y)\n\ngoal (1 subgoal):\n 1. d x + ad y \\<le> ad (ad x \\<cdot> y)", "thus \"d x + ad y \\<le> ad (ad x \\<cdot> y)\""], ["proof (prove)\nusing this:\n  ad y \\<le> ad (ad x \\<cdot> y)\n\ngoal (1 subgoal):\n 1. d x + ad y \\<le> ad (ad x \\<cdot> y)", "by (metis a2_eq a_antitone a_comm a_subid_aux dom_op_def add_lub)"], ["proof (state)\nthis:\n  d x + ad y \\<le> ad (ad x \\<cdot> y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma d1_sum_var: \"x + y \\<le> (d x + d y) \\<cdot> (x + y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y \\<le> (d x + d y) \\<cdot> (x + y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x + y \\<le> (d x + d y) \\<cdot> (x + y)", "have \"x + y = d x \\<cdot> x + d y \\<cdot> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y = d x \\<cdot> x + d y \\<cdot> y", "by simp"], ["proof (state)\nthis:\n  x + y = d x \\<cdot> x + d y \\<cdot> y\n\ngoal (1 subgoal):\n 1. x + y \\<le> (d x + d y) \\<cdot> (x + y)", "also"], ["proof (state)\nthis:\n  x + y = d x \\<cdot> x + d y \\<cdot> y\n\ngoal (1 subgoal):\n 1. x + y \\<le> (d x + d y) \\<cdot> (x + y)", "have \"... \\<le> (d x + d y) \\<cdot> x + (d x + d y) \\<cdot> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<cdot> x + d y \\<cdot> y\n    \\<le> (d x + d y) \\<cdot> x + (d x + d y) \\<cdot> y", "by (metis add_commute add_lub add_ub combine_common_factor)"], ["proof (state)\nthis:\n  d x \\<cdot> x + d y \\<cdot> y\n  \\<le> (d x + d y) \\<cdot> x + (d x + d y) \\<cdot> y\n\ngoal (1 subgoal):\n 1. x + y \\<le> (d x + d y) \\<cdot> (x + y)", "finally"], ["proof (chain)\npicking this:\n  x + y \\<le> (d x + d y) \\<cdot> x + (d x + d y) \\<cdot> y", "show ?thesis"], ["proof (prove)\nusing this:\n  x + y \\<le> (d x + d y) \\<cdot> x + (d x + d y) \\<cdot> y\n\ngoal (1 subgoal):\n 1. x + y \\<le> (d x + d y) \\<cdot> (x + y)", "by (simp add: distrib_left)"], ["proof (state)\nthis:\n  x + y \\<le> (d x + d y) \\<cdot> (x + y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a4: \"ad (x + y) = ad x \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x + y) = ad x \\<cdot> ad y", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. ad (x + y) \\<le> ad x \\<cdot> ad y\n 2. ad x \\<cdot> ad y \\<le> ad (x + y)", "show \"ad (x + y) \\<le> ad x \\<cdot> ad y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (x + y) \\<le> ad x \\<cdot> ad y", "by (metis a_supdist add_commute mult_isor meet_ord)"], ["proof (state)\nthis:\n  ad (x + y) \\<le> ad x \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad (x + y)", "hence \"ad x \\<cdot> ad y = ad x \\<cdot> ad y + ad (x + y)\""], ["proof (prove)\nusing this:\n  ad (x + y) \\<le> ad x \\<cdot> ad y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y = ad x \\<cdot> ad y + ad (x + y)", "using less_eq_def add_commute"], ["proof (prove)\nusing this:\n  ad (x + y) \\<le> ad x \\<cdot> ad y\n  (?x \\<le> ?y) = (?x + ?y = ?y)\n  ?a + ?b = ?b + ?a\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y = ad x \\<cdot> ad y + ad (x + y)", "by simp"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y = ad x \\<cdot> ad y + ad (x + y)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad (x + y)", "also"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y = ad x \\<cdot> ad y + ad (x + y)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad (x + y)", "have \"... = ad (ad (ad x \\<cdot> ad y) \\<cdot> (x + y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y + ad (x + y) =\n    ad (ad (ad x \\<cdot> ad y) \\<cdot> (x + y))", "by (metis a_closed a_exp)"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y + ad (x + y) =\n  ad (ad (ad x \\<cdot> ad y) \\<cdot> (x + y))\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad (x + y)", "finally"], ["proof (chain)\npicking this:\n  ad x \\<cdot> ad y = ad (ad (ad x \\<cdot> ad y) \\<cdot> (x + y))", "show \"ad x \\<cdot> ad y \\<le> ad (x + y)\""], ["proof (prove)\nusing this:\n  ad x \\<cdot> ad y = ad (ad (ad x \\<cdot> ad y) \\<cdot> (x + y))\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad (x + y)", "using a_antitone d1_sum_var dom_op_def"], ["proof (prove)\nusing this:\n  ad x \\<cdot> ad y = ad (ad (ad x \\<cdot> ad y) \\<cdot> (x + y))\n  ?x \\<le> ?y \\<Longrightarrow> ad ?y \\<le> ad ?x\n  ?x + ?y \\<le> (d ?x + d ?y) \\<cdot> (?x + ?y)\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y \\<le> ad (x + y)", "by auto"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y \\<le> ad (x + y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma kat_prop: \"d x \\<cdot> y \\<le> y \\<cdot> d z \\<longleftrightarrow> d x \\<cdot> y \\<cdot> ad z = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d x \\<cdot> y \\<le> y \\<cdot> d z) =\n    (d x \\<cdot> y \\<cdot> ad z = (0::'a))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. d x \\<cdot> y \\<le> y \\<cdot> d z \\<Longrightarrow>\n    d x \\<cdot> y \\<cdot> ad z = (0::'a)\n 2. d x \\<cdot> y \\<cdot> ad z = (0::'a) \\<Longrightarrow>\n    d x \\<cdot> y \\<le> y \\<cdot> d z", "show  \"d x \\<cdot> y \\<le> y \\<cdot> d z \\<Longrightarrow> d x \\<cdot> y \\<cdot> ad z = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<le> y \\<cdot> d z \\<Longrightarrow>\n    d x \\<cdot> y \\<cdot> ad z = (0::'a)", "by (metis add_commute dom_op_def add_zerol annir as1 less_eq_def mult_isor mult_assoc)"], ["proof (state)\nthis:\n  d x \\<cdot> y \\<le> y \\<cdot> d z \\<Longrightarrow>\n  d x \\<cdot> y \\<cdot> ad z = (0::'a)\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = (0::'a) \\<Longrightarrow>\n    d x \\<cdot> y \\<le> y \\<cdot> d z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = (0::'a) \\<Longrightarrow>\n    d x \\<cdot> y \\<le> y \\<cdot> d z", "assume h: \"d x \\<cdot> y \\<cdot> ad z = 0\""], ["proof (state)\nthis:\n  d x \\<cdot> y \\<cdot> ad z = (0::'a)\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = (0::'a) \\<Longrightarrow>\n    d x \\<cdot> y \\<le> y \\<cdot> d z", "hence \"d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z + d x \\<cdot> y \\<cdot> ad z\""], ["proof (prove)\nusing this:\n  d x \\<cdot> y \\<cdot> ad z = (0::'a)\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z + d x \\<cdot> y \\<cdot> ad z", "by (metis dom_op_def as3 distrib_left mult_1_right)"], ["proof (state)\nthis:\n  d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z + d x \\<cdot> y \\<cdot> ad z\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<cdot> ad z = (0::'a) \\<Longrightarrow>\n    d x \\<cdot> y \\<le> y \\<cdot> d z", "thus  \"d x \\<cdot> y \\<le> y \\<cdot> d z\""], ["proof (prove)\nusing this:\n  d x \\<cdot> y = d x \\<cdot> y \\<cdot> d z + d x \\<cdot> y \\<cdot> ad z\n\ngoal (1 subgoal):\n 1. d x \\<cdot> y \\<le> y \\<cdot> d z", "by (metis a_subid_aux add_commute dom_op_def h add_zerol mult_assoc)"], ["proof (state)\nthis:\n  d x \\<cdot> y \\<le> y \\<cdot> d z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma shunt: \"ad x \\<le> ad y + ad z \\<longleftrightarrow> ad x \\<cdot> d y \\<le> ad z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ad x \\<le> ad y + ad z) = (ad x \\<cdot> d y \\<le> ad z)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. ad x \\<le> ad y + ad z \\<Longrightarrow> ad x \\<cdot> d y \\<le> ad z\n 2. ad x \\<cdot> d y \\<le> ad z \\<Longrightarrow> ad x \\<le> ad y + ad z", "assume \"ad x \\<le> ad y + ad z\""], ["proof (state)\nthis:\n  ad x \\<le> ad y + ad z\n\ngoal (2 subgoals):\n 1. ad x \\<le> ad y + ad z \\<Longrightarrow> ad x \\<cdot> d y \\<le> ad z\n 2. ad x \\<cdot> d y \\<le> ad z \\<Longrightarrow> ad x \\<le> ad y + ad z", "hence \"ad x \\<cdot> d y \\<le> ad y \\<cdot> d y + ad z \\<cdot> d y\""], ["proof (prove)\nusing this:\n  ad x \\<le> ad y + ad z\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> d y \\<le> ad y \\<cdot> d y + ad z \\<cdot> d y", "by (metis distrib_right mult_isor)"], ["proof (state)\nthis:\n  ad x \\<cdot> d y \\<le> ad y \\<cdot> d y + ad z \\<cdot> d y\n\ngoal (2 subgoals):\n 1. ad x \\<le> ad y + ad z \\<Longrightarrow> ad x \\<cdot> d y \\<le> ad z\n 2. ad x \\<cdot> d y \\<le> ad z \\<Longrightarrow> ad x \\<le> ad y + ad z", "thus \" ad x \\<cdot> d y \\<le> ad z\""], ["proof (prove)\nusing this:\n  ad x \\<cdot> d y \\<le> ad y \\<cdot> d y + ad z \\<cdot> d y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> d y \\<le> ad z", "by (metis a_closed a_d_closed a_exp a_mul_d a_supdist dom_op_def dual_order.trans less_eq_def)"], ["proof (state)\nthis:\n  ad x \\<cdot> d y \\<le> ad z\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> d y \\<le> ad z \\<Longrightarrow> ad x \\<le> ad y + ad z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ad x \\<cdot> d y \\<le> ad z \\<Longrightarrow> ad x \\<le> ad y + ad z", "assume h: \"ad x \\<cdot> d y \\<le> ad z\""], ["proof (state)\nthis:\n  ad x \\<cdot> d y \\<le> ad z\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> d y \\<le> ad z \\<Longrightarrow> ad x \\<le> ad y + ad z", "have \"ad x = ad x \\<cdot> ad y + ad x \\<cdot> d y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x = ad x \\<cdot> ad y + ad x \\<cdot> d y", "by (metis add_commute dom_op_def as3 distrib_left mult_1_right)"], ["proof (state)\nthis:\n  ad x = ad x \\<cdot> ad y + ad x \\<cdot> d y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> d y \\<le> ad z \\<Longrightarrow> ad x \\<le> ad y + ad z", "also"], ["proof (state)\nthis:\n  ad x = ad x \\<cdot> ad y + ad x \\<cdot> d y\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> d y \\<le> ad z \\<Longrightarrow> ad x \\<le> ad y + ad z", "have \"... \\<le> ad x \\<cdot> ad y + ad z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y + ad x \\<cdot> d y \\<le> ad x \\<cdot> ad y + ad z", "using h add_lub dual_order.trans"], ["proof (prove)\nusing this:\n  ad x \\<cdot> d y \\<le> ad z\n  (?x + ?y \\<le> ?z) = (?x \\<le> ?z \\<and> ?y \\<le> ?z)\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y + ad x \\<cdot> d y \\<le> ad x \\<cdot> ad y + ad z", "by blast"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y + ad x \\<cdot> d y \\<le> ad x \\<cdot> ad y + ad z\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> d y \\<le> ad z \\<Longrightarrow> ad x \\<le> ad y + ad z", "also"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y + ad x \\<cdot> d y \\<le> ad x \\<cdot> ad y + ad z\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> d y \\<le> ad z \\<Longrightarrow> ad x \\<le> ad y + ad z", "have \"... \\<le> ad y + ad z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad x \\<cdot> ad y + ad z \\<le> ad y + ad z", "by (metis a_subid_aux add_commute add_lub add_ub dual_order.trans)"], ["proof (state)\nthis:\n  ad x \\<cdot> ad y + ad z \\<le> ad y + ad z\n\ngoal (1 subgoal):\n 1. ad x \\<cdot> d y \\<le> ad z \\<Longrightarrow> ad x \\<le> ad y + ad z", "finally"], ["proof (chain)\npicking this:\n  ad x \\<le> ad y + ad z", "show \"ad x \\<le> ad y + ad z\""], ["proof (prove)\nusing this:\n  ad x \\<le> ad y + ad z\n\ngoal (1 subgoal):\n 1. ad x \\<le> ad y + ad z", "by simp"], ["proof (state)\nthis:\n  ad x \\<le> ad y + ad z\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>wp Calculus\\<close>"], ["", "definition if_then_else :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" (\"if _ then _ else _ fi\" [64,64,64] 63) where\n  \"if p then x else y fi = d p \\<cdot> x + ad p \\<cdot> y\""], ["", "definition while :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" (\"while _ do _ od\" [64,64] 63) where\n  \"while p do x od = (d p \\<cdot> x)\\<^sup>\\<star> \\<cdot> ad p\""], ["", "definition while_inv :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" (\"while _ inv _ do _ od\" [64,64,64] 63) where\n  \"while p inv i do x od = while p do x od\""], ["", "definition wp :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" where\n  \"wp x p = ad (x \\<cdot> ad p)\""], ["", "lemma demod: \" d p \\<le> wp x q \\<longleftrightarrow> d p \\<cdot> x \\<le> x \\<cdot> d q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d p \\<le> wp x q) = (d p \\<cdot> x \\<le> x \\<cdot> d q)", "by (metis as1 dom_op_def gla_1 kat_prop meet_ord mult_assoc wp_def)"], ["", "lemma wp_weaken: \"wp x p \\<le> wp (x \\<cdot> ad q) (d p \\<cdot> ad q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp x p \\<le> wp (x \\<cdot> ad q) (d p \\<cdot> ad q)", "by (metis a4 a_antitone a_d_closed a_mul_d dom_op_def gla_1 mult_isol mult_assoc wp_def)"], ["", "lemma wp_seq [simp]: \"wp (x \\<cdot> y) q = wp x (wp y q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp (x \\<cdot> y) q = wp x (wp y q)", "using a2_eq dom_op_def mult_assoc wp_def"], ["proof (prove)\nusing this:\n  ad (?x \\<cdot> d ?y) = ad (?x \\<cdot> ?y)\n  d ?x = ad (ad ?x)\n  ?a \\<cdot> ?b \\<cdot> ?c = ?a \\<cdot> (?b \\<cdot> ?c)\n  wp ?x ?p = ad (?x \\<cdot> ad ?p)\n\ngoal (1 subgoal):\n 1. wp (x \\<cdot> y) q = wp x (wp y q)", "by auto"], ["", "lemma wp_seq_var: \"p \\<le> wp x r \\<Longrightarrow> r \\<le> wp y q \\<Longrightarrow> p \\<le> wp (x \\<cdot> y) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<le> wp x r; r \\<le> wp y q\\<rbrakk>\n    \\<Longrightarrow> p \\<le> wp (x \\<cdot> y) q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<le> wp x r; r \\<le> wp y q\\<rbrakk>\n    \\<Longrightarrow> p \\<le> wp (x \\<cdot> y) q", "assume a1: \"p \\<le> wp x r\""], ["proof (state)\nthis:\n  p \\<le> wp x r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<le> wp x r; r \\<le> wp y q\\<rbrakk>\n    \\<Longrightarrow> p \\<le> wp (x \\<cdot> y) q", "assume a2: \"r \\<le> wp y q\""], ["proof (state)\nthis:\n  r \\<le> wp y q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<le> wp x r; r \\<le> wp y q\\<rbrakk>\n    \\<Longrightarrow> p \\<le> wp (x \\<cdot> y) q", "have \"\\<forall>z. \\<not> wp x r \\<le> z \\<or> p \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>z. \\<not> wp x r \\<le> z \\<or> p \\<le> z", "using a1 dual_order.trans"], ["proof (prove)\nusing this:\n  p \\<le> wp x r\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n\ngoal (1 subgoal):\n 1. \\<forall>z. \\<not> wp x r \\<le> z \\<or> p \\<le> z", "by blast"], ["proof (state)\nthis:\n  \\<forall>z. \\<not> wp x r \\<le> z \\<or> p \\<le> z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<le> wp x r; r \\<le> wp y q\\<rbrakk>\n    \\<Longrightarrow> p \\<le> wp (x \\<cdot> y) q", "then"], ["proof (chain)\npicking this:\n  \\<forall>z. \\<not> wp x r \\<le> z \\<or> p \\<le> z", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>z. \\<not> wp x r \\<le> z \\<or> p \\<le> z\n\ngoal (1 subgoal):\n 1. p \\<le> wp (x \\<cdot> y) q", "using a2 a_antitone mult_isol wp_def wp_seq"], ["proof (prove)\nusing this:\n  \\<forall>z. \\<not> wp x r \\<le> z \\<or> p \\<le> z\n  r \\<le> wp y q\n  ?x \\<le> ?y \\<Longrightarrow> ad ?y \\<le> ad ?x\n  ?x \\<le> ?y \\<Longrightarrow> ?z \\<cdot> ?x \\<le> ?z \\<cdot> ?y\n  wp ?x ?p = ad (?x \\<cdot> ad ?p)\n  wp (?x \\<cdot> ?y) ?q = wp ?x (wp ?y ?q)\n\ngoal (1 subgoal):\n 1. p \\<le> wp (x \\<cdot> y) q", "by auto"], ["proof (state)\nthis:\n  p \\<le> wp (x \\<cdot> y) q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wp_cond_var [simp]: \"wp (if p then x else y fi) q = (ad p + wp x q) \\<cdot> (d p + wp y q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp (if p then x else y fi) q = (ad p + wp x q) \\<cdot> (d p + wp y q)", "using a4 a_d_closed dom_op_def if_then_else_def distrib_right mult_assoc wp_def"], ["proof (prove)\nusing this:\n  ad (?x + ?y) = ad ?x \\<cdot> ad ?y\n  d (ad ?x) = ad ?x\n  d ?x = ad (ad ?x)\n  if ?p then ?x else ?y fi = d ?p \\<cdot> ?x + ad ?p \\<cdot> ?y\n  (?a + ?b) \\<cdot> ?c = ?a \\<cdot> ?c + ?b \\<cdot> ?c\n  ?a \\<cdot> ?b \\<cdot> ?c = ?a \\<cdot> (?b \\<cdot> ?c)\n  wp ?x ?p = ad (?x \\<cdot> ad ?p)\n\ngoal (1 subgoal):\n 1. wp (if p then x else y fi) q = (ad p + wp x q) \\<cdot> (d p + wp y q)", "by auto"], ["", "lemma wp_cond_aux1 [simp]: \"d p \\<cdot> wp (if p then x else y fi) q = d p \\<cdot> wp x q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d p \\<cdot> wp (if p then x else y fi) q = d p \\<cdot> wp x q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d p \\<cdot> wp (if p then x else y fi) q = d p \\<cdot> wp x q", "have \"d p \\<cdot> wp (if p then x else y fi) q = ad (ad p) \\<cdot> (ad p + wp x q) \\<cdot> (d p + wp y q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d p \\<cdot> wp (if p then x else y fi) q =\n    ad (ad p) \\<cdot> (ad p + wp x q) \\<cdot> (d p + wp y q)", "using dom_op_def mult.semigroup_axioms semigroup.assoc wp_cond_var"], ["proof (prove)\nusing this:\n  d ?x = ad (ad ?x)\n  semigroup (\\<cdot>)\n  semigroup ?f \\<Longrightarrow> ?f (?f ?a ?b) ?c = ?f ?a (?f ?b ?c)\n  wp (if ?p then ?x else ?y fi) ?q =\n  (ad ?p + wp ?x ?q) \\<cdot> (d ?p + wp ?y ?q)\n\ngoal (1 subgoal):\n 1. d p \\<cdot> wp (if p then x else y fi) q =\n    ad (ad p) \\<cdot> (ad p + wp x q) \\<cdot> (d p + wp y q)", "by fastforce"], ["proof (state)\nthis:\n  d p \\<cdot> wp (if p then x else y fi) q =\n  ad (ad p) \\<cdot> (ad p + wp x q) \\<cdot> (d p + wp y q)\n\ngoal (1 subgoal):\n 1. d p \\<cdot> wp (if p then x else y fi) q = d p \\<cdot> wp x q", "also"], ["proof (state)\nthis:\n  d p \\<cdot> wp (if p then x else y fi) q =\n  ad (ad p) \\<cdot> (ad p + wp x q) \\<cdot> (d p + wp y q)\n\ngoal (1 subgoal):\n 1. d p \\<cdot> wp (if p then x else y fi) q = d p \\<cdot> wp x q", "have \"... = wp x q \\<cdot> d p \\<cdot> (d p + d (wp y q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad (ad p) \\<cdot> (ad p + wp x q) \\<cdot> (d p + wp y q) =\n    wp x q \\<cdot> d p \\<cdot> (d p + d (wp y q))", "using a_comm a_d_closed dom_op_def distrib_left wp_def"], ["proof (prove)\nusing this:\n  ad ?x \\<cdot> ad ?y = ad ?y \\<cdot> ad ?x\n  d (ad ?x) = ad ?x\n  d ?x = ad (ad ?x)\n  ?a \\<cdot> (?b + ?c) = ?a \\<cdot> ?b + ?a \\<cdot> ?c\n  wp ?x ?p = ad (?x \\<cdot> ad ?p)\n\ngoal (1 subgoal):\n 1. ad (ad p) \\<cdot> (ad p + wp x q) \\<cdot> (d p + wp y q) =\n    wp x q \\<cdot> d p \\<cdot> (d p + d (wp y q))", "by auto"], ["proof (state)\nthis:\n  ad (ad p) \\<cdot> (ad p + wp x q) \\<cdot> (d p + wp y q) =\n  wp x q \\<cdot> d p \\<cdot> (d p + d (wp y q))\n\ngoal (1 subgoal):\n 1. d p \\<cdot> wp (if p then x else y fi) q = d p \\<cdot> wp x q", "also"], ["proof (state)\nthis:\n  ad (ad p) \\<cdot> (ad p + wp x q) \\<cdot> (d p + wp y q) =\n  wp x q \\<cdot> d p \\<cdot> (d p + d (wp y q))\n\ngoal (1 subgoal):\n 1. d p \\<cdot> wp (if p then x else y fi) q = d p \\<cdot> wp x q", "have \"... = wp x q \\<cdot> d p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp x q \\<cdot> d p \\<cdot> (d p + d (wp y q)) = wp x q \\<cdot> d p", "by (metis a_exp dom_op_def add_ub meet_ord mult_assoc)"], ["proof (state)\nthis:\n  wp x q \\<cdot> d p \\<cdot> (d p + d (wp y q)) = wp x q \\<cdot> d p\n\ngoal (1 subgoal):\n 1. d p \\<cdot> wp (if p then x else y fi) q = d p \\<cdot> wp x q", "finally"], ["proof (chain)\npicking this:\n  d p \\<cdot> wp (if p then x else y fi) q = wp x q \\<cdot> d p", "show ?thesis"], ["proof (prove)\nusing this:\n  d p \\<cdot> wp (if p then x else y fi) q = wp x q \\<cdot> d p\n\ngoal (1 subgoal):\n 1. d p \\<cdot> wp (if p then x else y fi) q = d p \\<cdot> wp x q", "by (simp add: a_comm dom_op_def wp_def)"], ["proof (state)\nthis:\n  d p \\<cdot> wp (if p then x else y fi) q = d p \\<cdot> wp x q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wp_cond_aux2 [simp]: \"ad p \\<cdot> wp (if p then x else y fi) q = ad p \\<cdot> wp y q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad p \\<cdot> wp (if p then x else y fi) q = ad p \\<cdot> wp y q", "by (metis (no_types) abel_semigroup.commute if_then_else_def a_d_closed add.abel_semigroup_axioms dom_op_def wp_cond_aux1)"], ["", "lemma wp_cond [simp]: \"wp (if p then x else y fi) q = (d p \\<cdot> wp x q) + (ad p \\<cdot> wp y q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp (if p then x else y fi) q = d p \\<cdot> wp x q + ad p \\<cdot> wp y q", "by (metis as3 distrib_right dom_op_def mult_1_left wp_cond_aux2 wp_cond_aux1)"], ["", "lemma wp_star_induct_var: \"d q \\<le> wp x q \\<Longrightarrow> d q \\<le> wp (x\\<^sup>\\<star>) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d q \\<le> wp x q \\<Longrightarrow> d q \\<le> wp (x\\<^sup>\\<star>) q", "using demod star_sim"], ["proof (prove)\nusing this:\n  (d ?p \\<le> wp ?x ?q) = (d ?p \\<cdot> ?x \\<le> ?x \\<cdot> d ?q)\n  ?x \\<cdot> ?y \\<le> ?z \\<cdot> ?x \\<Longrightarrow>\n  ?x \\<cdot> ?y\\<^sup>\\<star> \\<le> ?z\\<^sup>\\<star> \\<cdot> ?x\n\ngoal (1 subgoal):\n 1. d q \\<le> wp x q \\<Longrightarrow> d q \\<le> wp (x\\<^sup>\\<star>) q", "by blast"], ["", "lemma wp_while: \"d p \\<cdot> d r \\<le> wp x p \\<Longrightarrow> d p \\<le> wp (while r do x od) (d p \\<cdot> ad r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d p \\<cdot> d r \\<le> wp x p \\<Longrightarrow>\n    d p \\<le> wp (while r do x od) (d p \\<cdot> ad r)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d p \\<cdot> d r \\<le> wp x p \\<Longrightarrow>\n    d p \\<le> wp (while r do x od) (d p \\<cdot> ad r)", "assume \"d p \\<cdot> d r \\<le> wp x p\""], ["proof (state)\nthis:\n  d p \\<cdot> d r \\<le> wp x p\n\ngoal (1 subgoal):\n 1. d p \\<cdot> d r \\<le> wp x p \\<Longrightarrow>\n    d p \\<le> wp (while r do x od) (d p \\<cdot> ad r)", "hence \"d p \\<le> wp (d r \\<cdot> x) p\""], ["proof (prove)\nusing this:\n  d p \\<cdot> d r \\<le> wp x p\n\ngoal (1 subgoal):\n 1. d p \\<le> wp (d r \\<cdot> x) p", "using dom_op_def mult.semigroup_axioms semigroup.assoc shunt wp_def"], ["proof (prove)\nusing this:\n  d p \\<cdot> d r \\<le> wp x p\n  d ?x = ad (ad ?x)\n  semigroup (\\<cdot>)\n  semigroup ?f \\<Longrightarrow> ?f (?f ?a ?b) ?c = ?f ?a (?f ?b ?c)\n  (ad ?x \\<le> ad ?y + ad ?z) = (ad ?x \\<cdot> d ?y \\<le> ad ?z)\n  wp ?x ?p = ad (?x \\<cdot> ad ?p)\n\ngoal (1 subgoal):\n 1. d p \\<le> wp (d r \\<cdot> x) p", "by fastforce"], ["proof (state)\nthis:\n  d p \\<le> wp (d r \\<cdot> x) p\n\ngoal (1 subgoal):\n 1. d p \\<cdot> d r \\<le> wp x p \\<Longrightarrow>\n    d p \\<le> wp (while r do x od) (d p \\<cdot> ad r)", "hence \"d p \\<le> wp ((d r \\<cdot> x)\\<^sup>\\<star>) p\""], ["proof (prove)\nusing this:\n  d p \\<le> wp (d r \\<cdot> x) p\n\ngoal (1 subgoal):\n 1. d p \\<le> wp ((d r \\<cdot> x)\\<^sup>\\<star>) p", "using wp_star_induct_var"], ["proof (prove)\nusing this:\n  d p \\<le> wp (d r \\<cdot> x) p\n  d ?q \\<le> wp ?x ?q \\<Longrightarrow> d ?q \\<le> wp (?x\\<^sup>\\<star>) ?q\n\ngoal (1 subgoal):\n 1. d p \\<le> wp ((d r \\<cdot> x)\\<^sup>\\<star>) p", "by blast"], ["proof (state)\nthis:\n  d p \\<le> wp ((d r \\<cdot> x)\\<^sup>\\<star>) p\n\ngoal (1 subgoal):\n 1. d p \\<cdot> d r \\<le> wp x p \\<Longrightarrow>\n    d p \\<le> wp (while r do x od) (d p \\<cdot> ad r)", "thus ?thesis"], ["proof (prove)\nusing this:\n  d p \\<le> wp ((d r \\<cdot> x)\\<^sup>\\<star>) p\n\ngoal (1 subgoal):\n 1. d p \\<le> wp (while r do x od) (d p \\<cdot> ad r)", "by (metis order.ordering_axioms ordering.trans while_def wp_weaken)"], ["proof (state)\nthis:\n  d p \\<le> wp (while r do x od) (d p \\<cdot> ad r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wp_while_inv: \"d p \\<le> d i \\<Longrightarrow> d i \\<cdot> ad r \\<le> d q \\<Longrightarrow> d i \\<cdot> d r \\<le> wp x i \\<Longrightarrow> d p \\<le> wp (while r inv i do x od) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le> d i; d i \\<cdot> ad r \\<le> d q;\n     d i \\<cdot> d r \\<le> wp x i\\<rbrakk>\n    \\<Longrightarrow> d p \\<le> wp (while r inv i do x od) q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le> d i; d i \\<cdot> ad r \\<le> d q;\n     d i \\<cdot> d r \\<le> wp x i\\<rbrakk>\n    \\<Longrightarrow> d p \\<le> wp (while r inv i do x od) q", "assume a1: \"d p \\<le> d i\" and a2: \"d i \\<cdot> ad r \\<le> d q\" and \"d i \\<cdot> d r \\<le> wp x i\""], ["proof (state)\nthis:\n  d p \\<le> d i\n  d i \\<cdot> ad r \\<le> d q\n  d i \\<cdot> d r \\<le> wp x i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le> d i; d i \\<cdot> ad r \\<le> d q;\n     d i \\<cdot> d r \\<le> wp x i\\<rbrakk>\n    \\<Longrightarrow> d p \\<le> wp (while r inv i do x od) q", "hence \"d i \\<le> wp (while r inv i do x od) (d i \\<cdot> ad r)\""], ["proof (prove)\nusing this:\n  d p \\<le> d i\n  d i \\<cdot> ad r \\<le> d q\n  d i \\<cdot> d r \\<le> wp x i\n\ngoal (1 subgoal):\n 1. d i \\<le> wp (while r inv i do x od) (d i \\<cdot> ad r)", "by (simp add: while_inv_def wp_while)"], ["proof (state)\nthis:\n  d i \\<le> wp (while r inv i do x od) (d i \\<cdot> ad r)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le> d i; d i \\<cdot> ad r \\<le> d q;\n     d i \\<cdot> d r \\<le> wp x i\\<rbrakk>\n    \\<Longrightarrow> d p \\<le> wp (while r inv i do x od) q", "also"], ["proof (state)\nthis:\n  d i \\<le> wp (while r inv i do x od) (d i \\<cdot> ad r)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le> d i; d i \\<cdot> ad r \\<le> d q;\n     d i \\<cdot> d r \\<le> wp x i\\<rbrakk>\n    \\<Longrightarrow> d p \\<le> wp (while r inv i do x od) q", "have \"... \\<le>  wp (while r inv i do x od) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp (while r inv i do x od) (d i \\<cdot> ad r)\n    \\<le> wp (while r inv i do x od) q", "by (metis a2 a_antitone a_d_closed dom_op_def mult_isol wp_def)"], ["proof (state)\nthis:\n  wp (while r inv i do x od) (d i \\<cdot> ad r)\n  \\<le> wp (while r inv i do x od) q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le> d i; d i \\<cdot> ad r \\<le> d q;\n     d i \\<cdot> d r \\<le> wp x i\\<rbrakk>\n    \\<Longrightarrow> d p \\<le> wp (while r inv i do x od) q", "finally"], ["proof (chain)\npicking this:\n  d i \\<le> wp (while r inv i do x od) q", "show ?thesis"], ["proof (prove)\nusing this:\n  d i \\<le> wp (while r inv i do x od) q\n\ngoal (1 subgoal):\n 1. d p \\<le> wp (while r inv i do x od) q", "using a1 dual_order.trans"], ["proof (prove)\nusing this:\n  d i \\<le> wp (while r inv i do x od) q\n  d p \\<le> d i\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n\ngoal (1 subgoal):\n 1. d p \\<le> wp (while r inv i do x od) q", "by blast"], ["proof (state)\nthis:\n  d p \\<le> wp (while r inv i do x od) q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wp_while_inv_break: \"d p \\<le> wp y i \\<Longrightarrow> d i \\<cdot> ad r \\<le> d q \\<Longrightarrow> d i \\<cdot> d r \\<le> wp x i \\<Longrightarrow> d p \\<le> wp (y \\<cdot> (while r inv i do x od)) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le> wp y i; d i \\<cdot> ad r \\<le> d q;\n     d i \\<cdot> d r \\<le> wp x i\\<rbrakk>\n    \\<Longrightarrow> d p \\<le> wp (y \\<cdot> (while r inv i do x od)) q", "by (metis dom_op_def eq_refl mult_1_left mult_1_right wp_def wp_seq wp_seq_var wp_while_inv)"], ["", "end"], ["", "subsubsection \\<open>Soundness and Relation KAD\\<close>"], ["", "notation relcomp (infixl \";\" 70)"], ["", "interpretation rel_d: dioid Id \"{}\" \"(\\<union>)\" \"(;)\" \"(\\<subseteq>)\" \"(\\<subset>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. VC_KAD_scratch.class.dioid Id {} (\\<union>) (;) (\\<subseteq>)\n     (\\<subset>)", "by (standard, auto)"], ["", "lemma (in dioid) pow_inductl: \"z + x \\<cdot> y \\<le> y \\<Longrightarrow> x ^ i \\<cdot> z \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z + x \\<cdot> y \\<le> y \\<Longrightarrow> x ^ i \\<cdot> z \\<le> y", "apply (induct i; clarsimp simp add: add_lub)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>x ^ i \\<cdot> z \\<le> y; z \\<le> y;\n        x \\<cdot> y \\<le> y\\<rbrakk>\n       \\<Longrightarrow> x \\<cdot> x ^ i \\<cdot> z \\<le> y", "by (metis local.dual_order.trans local.mult_isol mult_assoc)"], ["", "lemma (in dioid) pow_inductr: \"z + y \\<cdot> x \\<le> y \\<Longrightarrow> z \\<cdot> x ^ i \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z + y \\<cdot> x \\<le> y \\<Longrightarrow> z \\<cdot> x ^ i \\<le> y", "apply (induct i; clarsimp simp add: add_lub)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>z \\<cdot> x ^ i \\<le> y; z \\<le> y;\n        y \\<cdot> x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> z \\<cdot> (x \\<cdot> x ^ i) \\<le> y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>z \\<cdot> x ^ i \\<le> y; z \\<le> y;\n        y \\<cdot> x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> z \\<cdot> (x \\<cdot> x ^ i) \\<le> y", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>z \\<cdot> x ^ i \\<le> y; z \\<le> y;\n        y \\<cdot> x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> z \\<cdot> (x \\<cdot> x ^ i) \\<le> y", "assume \"z \\<cdot> x ^ i \\<le> y\" \"z \\<le> y\" \"y \\<cdot> x \\<le> y\""], ["proof (state)\nthis:\n  z \\<cdot> x ^ i \\<le> y\n  z \\<le> y\n  y \\<cdot> x \\<le> y\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>z \\<cdot> x ^ i \\<le> y; z \\<le> y;\n        y \\<cdot> x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> z \\<cdot> (x \\<cdot> x ^ i) \\<le> y", "hence \"(z \\<cdot> x ^ i) \\<cdot> x \\<le> y\""], ["proof (prove)\nusing this:\n  z \\<cdot> x ^ i \\<le> y\n  z \\<le> y\n  y \\<cdot> x \\<le> y\n\ngoal (1 subgoal):\n 1. z \\<cdot> x ^ i \\<cdot> x \\<le> y", "using local.dual_order.trans local.mult_isor"], ["proof (prove)\nusing this:\n  z \\<cdot> x ^ i \\<le> y\n  z \\<le> y\n  y \\<cdot> x \\<le> y\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n  ?x \\<le> ?y \\<Longrightarrow> ?x \\<cdot> ?z \\<le> ?y \\<cdot> ?z\n\ngoal (1 subgoal):\n 1. z \\<cdot> x ^ i \\<cdot> x \\<le> y", "by blast"], ["proof (state)\nthis:\n  z \\<cdot> x ^ i \\<cdot> x \\<le> y\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>z \\<cdot> x ^ i \\<le> y; z \\<le> y;\n        y \\<cdot> x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> z \\<cdot> (x \\<cdot> x ^ i) \\<le> y", "thus \"z \\<cdot> (x \\<cdot> x ^ i) \\<le> y\""], ["proof (prove)\nusing this:\n  z \\<cdot> x ^ i \\<cdot> x \\<le> y\n\ngoal (1 subgoal):\n 1. z \\<cdot> (x \\<cdot> x ^ i) \\<le> y", "by (simp add: mult_assoc local.power_commutes)"], ["proof (state)\nthis:\n  z \\<cdot> (x \\<cdot> x ^ i) \\<le> y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma power_is_relpow: \"rel_d.power X i = X ^^ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_d.power X i = X ^^ i", "by (induct i, simp_all add: relpow_commute)"], ["", "lemma rel_star_def: \"X^* = (\\<Union>i. rel_d.power X i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X\\<^sup>* = \\<Union> (range (rel_d.power X))", "by (simp add: power_is_relpow rtrancl_is_UN_relpow)"], ["", "lemma rel_star_contl: \"X ; Y^* = (\\<Union>i. X ; rel_d.power Y i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X ; Y\\<^sup>* = (\\<Union>i. X ; rel_d.power Y i)", "by (simp add: rel_star_def relcomp_UNION_distrib)"], ["", "lemma rel_star_contr: \"X^* ; Y = (\\<Union>i. (rel_d.power X i) ; Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X\\<^sup>* ; Y = (\\<Union>i. rel_d.power X i ; Y)", "by (simp add: rel_star_def relcomp_UNION_distrib2)"], ["", "definition rel_ad :: \"'a rel \\<Rightarrow> 'a rel\" where\n  \"rel_ad R = {(x,x) | x. \\<not> (\\<exists>y. (x,y) \\<in> R)}\""], ["", "interpretation rel_aka: antidomain_kleene_algebra Id \"{}\" \"(\\<union>)\"  \"(;)\" \"(\\<subseteq>)\" \"(\\<subset>)\" rtrancl rel_ad"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.antidomain_kleene_algebra Id {} (\\<union>) (;) (\\<subseteq>)\n     (\\<subset>) rtrancl rel_ad", "apply standard"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x. Id \\<union> x ; x\\<^sup>* \\<subseteq> x\\<^sup>*\n 2. \\<And>x. Id \\<union> x\\<^sup>* ; x \\<subseteq> x\\<^sup>*\n 3. \\<And>z x y.\n       z \\<union> x ; y \\<subseteq> y \\<Longrightarrow>\n       x\\<^sup>* ; z \\<subseteq> y\n 4. \\<And>z y x.\n       z \\<union> y ; x \\<subseteq> y \\<Longrightarrow>\n       z ; x\\<^sup>* \\<subseteq> y\n 5. \\<And>x. rel_ad x ; x = {}\n 6. \\<And>x y.\n       rel_ad (x ; y) \\<union> rel_ad (x ; rel_ad (rel_ad y)) =\n       rel_ad (x ; rel_ad (rel_ad y))\n 7. \\<And>x. rel_ad (rel_ad x) \\<union> rel_ad x = Id", "apply auto[2]"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>z x y.\n       z \\<union> x ; y \\<subseteq> y \\<Longrightarrow>\n       x\\<^sup>* ; z \\<subseteq> y\n 2. \\<And>z y x.\n       z \\<union> y ; x \\<subseteq> y \\<Longrightarrow>\n       z ; x\\<^sup>* \\<subseteq> y\n 3. \\<And>x. rel_ad x ; x = {}\n 4. \\<And>x y.\n       rel_ad (x ; y) \\<union> rel_ad (x ; rel_ad (rel_ad y)) =\n       rel_ad (x ; rel_ad (rel_ad y))\n 5. \\<And>x. rel_ad (rel_ad x) \\<union> rel_ad x = Id", "by (auto simp: rel_star_contr rel_d.pow_inductl rel_star_contl SUP_least rel_d.pow_inductr rel_ad_def)"], ["", "subsubsection \\<open>Embedding Predicates in Relations\\<close>"], ["", "type_synonym 'a pred = \"'a \\<Rightarrow> bool\""], ["", "abbreviation p2r :: \"'a pred \\<Rightarrow> 'a rel\" (\"\\<lceil>_\\<rceil>\") where\n  \"\\<lceil>P\\<rceil> \\<equiv> {(s,s) |s. P s}\""], ["", "lemma d_p2r [simp]: \"rel_aka.dom_op \\<lceil>P\\<rceil> = \\<lceil>P\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_aka.dom_op \\<lceil>P\\<rceil> = \\<lceil>P\\<rceil>", "by (auto simp: rel_aka.dom_op_def rel_ad_def)"], ["", "lemma p2r_neg_hom [simp]: \"rel_ad \\<lceil>P\\<rceil> = \\<lceil>\\<lambda>s. \\<not>P s\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_ad \\<lceil>P\\<rceil> = \\<lceil>\\<lambda>s. \\<not> P s\\<rceil>", "by (auto simp: rel_ad_def)"], ["", "lemma p2r_conj_hom [simp]: \"\\<lceil>P\\<rceil> \\<inter> \\<lceil>Q\\<rceil> = \\<lceil>\\<lambda>s. P s \\<and> Q s\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lceil>P\\<rceil> \\<inter> \\<lceil>Q\\<rceil> =\n    \\<lceil>\\<lambda>s. P s \\<and> Q s\\<rceil>", "by auto"], ["", "lemma p2r_conj_hom_var [simp]: \"\\<lceil>P\\<rceil> ; \\<lceil>Q\\<rceil> = \\<lceil>\\<lambda>s. P s \\<and> Q s\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lceil>P\\<rceil> ; \\<lceil>Q\\<rceil> =\n    \\<lceil>\\<lambda>s. P s \\<and> Q s\\<rceil>", "by auto"], ["", "lemma p2r_disj_hom [simp]: \"\\<lceil>P\\<rceil> \\<union> \\<lceil>Q\\<rceil> = \\<lceil>\\<lambda>s. P s \\<or> Q s\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lceil>P\\<rceil> \\<union> \\<lceil>Q\\<rceil> =\n    \\<lceil>\\<lambda>s. P s \\<or> Q s\\<rceil>", "by auto"], ["", "subsubsection \\<open>Store and Assignment\\<close>"], ["", "type_synonym 'a store = \"string  \\<Rightarrow> 'a\""], ["", "definition gets :: \"string \\<Rightarrow> ('a store \\<Rightarrow> 'a) \\<Rightarrow> 'a store rel\" (\"_ ::= _\" [70, 65] 61) where \n  \"v ::= e = {(s,s (v := e s)) |s. True}\""], ["", "lemma wp_assign [simp]: \"rel_aka.wp (v ::= e) \\<lceil>Q\\<rceil> = \\<lceil>\\<lambda>s. Q (s (v := e s))\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_aka.wp (v ::= e) \\<lceil>Q\\<rceil> =\n    \\<lceil>\\<lambda>s. Q (s(v := e s))\\<rceil>", "by (auto simp: rel_aka.wp_def gets_def rel_ad_def)"], ["", "abbreviation spec_sugar :: \"'a pred \\<Rightarrow> 'a rel \\<Rightarrow> 'a pred \\<Rightarrow> bool\" (\"PRE _ _ POST _\" [64,64,64] 63) where\n  \"PRE P X POST Q \\<equiv> rel_aka.dom_op \\<lceil>P\\<rceil> \\<subseteq> rel_aka.wp X \\<lceil>Q\\<rceil>\""], ["", "abbreviation if_then_else_sugar :: \"'a pred \\<Rightarrow> 'a rel \\<Rightarrow> 'a rel \\<Rightarrow> 'a rel\" (\"IF _ THEN _ ELSE _ FI\" [64,64,64] 63) where\n  \"IF P THEN X ELSE Y FI \\<equiv> rel_aka.if_then_else \\<lceil>P\\<rceil> X Y\""], ["", "abbreviation while_inv_sugar :: \"'a pred \\<Rightarrow> 'a pred \\<Rightarrow> 'a rel \\<Rightarrow> 'a rel\" (\"WHILE _ INV _ DO _ OD\" [64,64,64] 63) where\n  \"WHILE P INV I DO X OD \\<equiv> rel_aka.while_inv \\<lceil>P\\<rceil> \\<lceil>I\\<rceil> X\""], ["", "subsubsection \\<open>Verification Example\\<close>"], ["", "lemma euclid:\n  \"PRE (\\<lambda>s::nat store. s ''x'' = x \\<and> s ''y'' = y)\n   (WHILE (\\<lambda>s. s ''y'' \\<noteq> 0) INV (\\<lambda>s. gcd (s ''x'') (s ''y'') = gcd x y) \n    DO\n     (''z'' ::= (\\<lambda>s. s ''y''));\n     (''y'' ::= (\\<lambda>s. s ''x'' mod s ''y''));\n     (''x'' ::= (\\<lambda>s. s ''z''))\n    OD)\n   POST (\\<lambda>s. s ''x'' = gcd x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_aka.dom_op\n     \\<lceil>\\<lambda>s. s ''x'' = x \\<and> s ''y'' = y\\<rceil>\n    \\<subseteq> rel_aka.wp\n                 (rel_aka.while_inv\n                   \\<lceil>\\<lambda>s. s ''y'' \\<noteq> 0\\<rceil>\n                   \\<lceil>\\<lambda>s.\n                              gcd (s ''x'') (s ''y'') = gcd x y\\<rceil>\n                   ((''z'' ::= (\\<lambda>s. s ''y'')) ;\n                    (''y'' ::= (\\<lambda>s. s ''x'' mod s ''y'')) ;\n                    (''x'' ::= (\\<lambda>s. s ''z''))))\n                 \\<lceil>\\<lambda>s. s ''x'' = gcd x y\\<rceil>", "apply (rule rel_aka.wp_while_inv, simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lceil>\\<lambda>s. s ''x'' = x \\<and> s ''y'' = y\\<rceil>\n    \\<subseteq> \\<lceil>\\<lambda>s.\n                           gcd (s ''x'') (s ''y'') = gcd x y\\<rceil>\n 2. \\<lceil>\\<lambda>s.\n               gcd (s ''x'') (s ''y'') = gcd x y \\<and> s ''y'' = 0\\<rceil>\n    \\<subseteq> \\<lceil>\\<lambda>s. s ''x'' = gcd x y\\<rceil>\n 3. \\<lceil>\\<lambda>s.\n               gcd (s ''x'') (s ''y'') = gcd x y \\<and> 0 < s ''y''\\<rceil>\n    \\<subseteq> \\<lceil>\\<lambda>s.\n                           gcd (s ''y'') (s ''x'' mod s ''y'') =\n                           gcd x y\\<rceil>", "using gcd_red_nat"], ["proof (prove)\nusing this:\n  gcd ?x ?y = gcd ?y (?x mod ?y)\n\ngoal (3 subgoals):\n 1. \\<lceil>\\<lambda>s. s ''x'' = x \\<and> s ''y'' = y\\<rceil>\n    \\<subseteq> \\<lceil>\\<lambda>s.\n                           gcd (s ''x'') (s ''y'') = gcd x y\\<rceil>\n 2. \\<lceil>\\<lambda>s.\n               gcd (s ''x'') (s ''y'') = gcd x y \\<and> s ''y'' = 0\\<rceil>\n    \\<subseteq> \\<lceil>\\<lambda>s. s ''x'' = gcd x y\\<rceil>\n 3. \\<lceil>\\<lambda>s.\n               gcd (s ''x'') (s ''y'') = gcd x y \\<and> 0 < s ''y''\\<rceil>\n    \\<subseteq> \\<lceil>\\<lambda>s.\n                           gcd (s ''y'') (s ''x'' mod s ''y'') =\n                           gcd x y\\<rceil>", "by auto"], ["", "context antidomain_kleene_algebra\nbegin"], ["", "subsubsection\\<open>Propositional Hoare Logic\\<close>"], ["", "definition H :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> bool\" where\n  \"H p x q \\<longleftrightarrow> d p \\<le> wp x q\""], ["", "lemma H_skip: \"H p 1 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H p (1::'a) p", "by (simp add: H_def dom_op_def wp_def)"], ["", "lemma H_cons: \"d p \\<le> d p' \\<Longrightarrow> d q' \\<le> d q \\<Longrightarrow> H p' x q' \\<Longrightarrow> H p x q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le> d p'; d q' \\<le> d q; H p' x q'\\<rbrakk>\n    \\<Longrightarrow> H p x q", "by (meson H_def demod mult_isol order_trans)"], ["", "lemma H_seq: \"H p x r \\<Longrightarrow> H r y q \\<Longrightarrow> H p (x \\<cdot> y) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H p x r; H r y q\\<rbrakk> \\<Longrightarrow> H p (x \\<cdot> y) q", "by (metis H_def a_d_closed demod dom_op_def wp_seq_var)"], ["", "lemma H_cond: \"H (d p \\<cdot> d r) x q \\<Longrightarrow> H (d p \\<cdot> ad r) y q \\<Longrightarrow> H p (if r then x else y fi) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H (d p \\<cdot> d r) x q; H (d p \\<cdot> ad r) y q\\<rbrakk>\n    \\<Longrightarrow> H p (if r then x else y fi) q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>H (d p \\<cdot> d r) x q; H (d p \\<cdot> ad r) y q\\<rbrakk>\n    \\<Longrightarrow> H p (if r then x else y fi) q", "assume  h1: \"H (d p \\<cdot> d r) x q\" and h2: \"H (d p \\<cdot> ad r) y q\""], ["proof (state)\nthis:\n  H (d p \\<cdot> d r) x q\n  H (d p \\<cdot> ad r) y q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>H (d p \\<cdot> d r) x q; H (d p \\<cdot> ad r) y q\\<rbrakk>\n    \\<Longrightarrow> H p (if r then x else y fi) q", "hence h3: \"d p \\<cdot> d r \\<le> wp x q\" and h4: \"d p \\<cdot> ad r \\<le> wp y q\""], ["proof (prove)\nusing this:\n  H (d p \\<cdot> d r) x q\n  H (d p \\<cdot> ad r) y q\n\ngoal (1 subgoal):\n 1. d p \\<cdot> d r \\<le> wp x q &&& d p \\<cdot> ad r \\<le> wp y q", "using H_def a_closed dom_op_def"], ["proof (prove)\nusing this:\n  H (d p \\<cdot> d r) x q\n  H (d p \\<cdot> ad r) y q\n  H ?p ?x ?q = (d ?p \\<le> wp ?x ?q)\n  d (ad ?x \\<cdot> ad ?y) = ad ?x \\<cdot> ad ?y\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. d p \\<cdot> d r \\<le> wp x q &&& d p \\<cdot> ad r \\<le> wp y q", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. d p \\<cdot> ad r \\<le> wp y q", "using H_def h2 a_closed dom_op_def"], ["proof (prove)\nusing this:\n  H ?p ?x ?q = (d ?p \\<le> wp ?x ?q)\n  H (d p \\<cdot> ad r) y q\n  d (ad ?x \\<cdot> ad ?y) = ad ?x \\<cdot> ad ?y\n  d ?x = ad (ad ?x)\n\ngoal (1 subgoal):\n 1. d p \\<cdot> ad r \\<le> wp y q", "by auto"], ["proof (state)\nthis:\n  d p \\<cdot> d r \\<le> wp x q\n  d p \\<cdot> ad r \\<le> wp y q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>H (d p \\<cdot> d r) x q; H (d p \\<cdot> ad r) y q\\<rbrakk>\n    \\<Longrightarrow> H p (if r then x else y fi) q", "hence h5: \"d p  \\<le> ad r + wp x q\" and h6: \"d p  \\<le> d r + wp y q\""], ["proof (prove)\nusing this:\n  d p \\<cdot> d r \\<le> wp x q\n  d p \\<cdot> ad r \\<le> wp y q\n\ngoal (1 subgoal):\n 1. d p \\<le> ad r + wp x q &&& d p \\<le> d r + wp y q", "apply (simp add: dom_op_def shunt wp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. d p \\<le> d r + wp y q", "using h4 a_d_closed dom_op_def shunt wp_def"], ["proof (prove)\nusing this:\n  d p \\<cdot> ad r \\<le> wp y q\n  d (ad ?x) = ad ?x\n  d ?x = ad (ad ?x)\n  (ad ?x \\<le> ad ?y + ad ?z) = (ad ?x \\<cdot> d ?y \\<le> ad ?z)\n  wp ?x ?p = ad (?x \\<cdot> ad ?p)\n\ngoal (1 subgoal):\n 1. d p \\<le> d r + wp y q", "by auto"], ["proof (state)\nthis:\n  d p \\<le> ad r + wp x q\n  d p \\<le> d r + wp y q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>H (d p \\<cdot> d r) x q; H (d p \\<cdot> ad r) y q\\<rbrakk>\n    \\<Longrightarrow> H p (if r then x else y fi) q", "hence \"d p \\<le> d p  \\<cdot> (d r + wp y q)\""], ["proof (prove)\nusing this:\n  d p \\<le> ad r + wp x q\n  d p \\<le> d r + wp y q\n\ngoal (1 subgoal):\n 1. d p \\<le> d p \\<cdot> (d r + wp y q)", "by (metis a_idem distrib_left dom_op_def less_eq_def)"], ["proof (state)\nthis:\n  d p \\<le> d p \\<cdot> (d r + wp y q)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>H (d p \\<cdot> d r) x q; H (d p \\<cdot> ad r) y q\\<rbrakk>\n    \\<Longrightarrow> H p (if r then x else y fi) q", "also"], ["proof (state)\nthis:\n  d p \\<le> d p \\<cdot> (d r + wp y q)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>H (d p \\<cdot> d r) x q; H (d p \\<cdot> ad r) y q\\<rbrakk>\n    \\<Longrightarrow> H p (if r then x else y fi) q", "have  \"... \\<le> (ad r + wp x q) \\<cdot> (d r + wp y q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d p \\<cdot> (d r + wp y q) \\<le> (ad r + wp x q) \\<cdot> (d r + wp y q)", "by (simp add: h5 mult_isor)"], ["proof (state)\nthis:\n  d p \\<cdot> (d r + wp y q) \\<le> (ad r + wp x q) \\<cdot> (d r + wp y q)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>H (d p \\<cdot> d r) x q; H (d p \\<cdot> ad r) y q\\<rbrakk>\n    \\<Longrightarrow> H p (if r then x else y fi) q", "finally"], ["proof (chain)\npicking this:\n  d p \\<le> (ad r + wp x q) \\<cdot> (d r + wp y q)", "show ?thesis"], ["proof (prove)\nusing this:\n  d p \\<le> (ad r + wp x q) \\<cdot> (d r + wp y q)\n\ngoal (1 subgoal):\n 1. H p (if r then x else y fi) q", "by (simp add: H_def)"], ["proof (state)\nthis:\n  H p (if r then x else y fi) q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma H_loop: \"H (d p \\<cdot> d r) x p \\<Longrightarrow> H p (while r do x od) (d p \\<cdot> ad r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H (d p \\<cdot> d r) x p \\<Longrightarrow>\n    H p (while r do x od) (d p \\<cdot> ad r)", "by (metis (full_types) H_def a_closed dom_op_def wp_while)"], ["", "lemma H_while_inv: \"d p \\<le> d i \\<Longrightarrow> d i \\<cdot> ad r \\<le> d q \\<Longrightarrow> H (d i \\<cdot> d r) x i \\<Longrightarrow> H p (while r inv i do x od) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le> d i; d i \\<cdot> ad r \\<le> d q;\n     H (d i \\<cdot> d r) x i\\<rbrakk>\n    \\<Longrightarrow> H p (while r inv i do x od) q", "using H_def a_closed dom_op_def wp_while_inv"], ["proof (prove)\nusing this:\n  H ?p ?x ?q = (d ?p \\<le> wp ?x ?q)\n  d (ad ?x \\<cdot> ad ?y) = ad ?x \\<cdot> ad ?y\n  d ?x = ad (ad ?x)\n  \\<lbrakk>d ?p \\<le> d ?i; d ?i \\<cdot> ad ?r \\<le> d ?q;\n   d ?i \\<cdot> d ?r \\<le> wp ?x ?i\\<rbrakk>\n  \\<Longrightarrow> d ?p \\<le> wp (while ?r inv ?i do ?x od) ?q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le> d i; d i \\<cdot> ad r \\<le> d q;\n     H (d i \\<cdot> d r) x i\\<rbrakk>\n    \\<Longrightarrow> H p (while r inv i do x od) q", "by auto"], ["", "end"], ["", "subsubsection\\<open>Definition of Refinement KAD\\<close>"], ["", "class rkad = antidomain_kleene_algebra +\n  fixes R :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\"\n  assumes R_def: \"x \\<le> R p q \\<longleftrightarrow> d p \\<le> wp x q\"\n\nbegin"], ["", "subsubsection \\<open>Propositional Refinement Calculus\\<close>"], ["", "lemma HR: \"H p x q \\<longleftrightarrow> x \\<le> R p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H p x q = (x \\<le> R p q)", "by (simp add: H_def R_def)"], ["", "lemma wp_R1: \"d p \\<le> wp (R p q) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d p \\<le> wp (R p q) q", "using R_def"], ["proof (prove)\nusing this:\n  (?x \\<le> R ?p ?q) = (d ?p \\<le> wp ?x ?q)\n\ngoal (1 subgoal):\n 1. d p \\<le> wp (R p q) q", "by blast"], ["", "lemma wp_R2: \"x \\<le> R (wp x q) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> R (wp x q) q", "by (simp add: R_def wp_def)"], ["", "lemma wp_R3: \"d p \\<le> wp x q \\<Longrightarrow> x \\<le> R p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d p \\<le> wp x q \\<Longrightarrow> x \\<le> R p q", "by (simp add: R_def)"], ["", "lemma H_R1: \"H p (R p q) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H p (R p q) q", "by (simp add: HR)"], ["", "lemma H_R2: \"H p x q \\<Longrightarrow> x \\<le> R p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H p x q \\<Longrightarrow> x \\<le> R p q", "by (simp add: HR)"], ["", "lemma R_skip: \"1 \\<le> R p p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<le> R p p", "by (simp add: H_R2 H_skip)"], ["", "lemma R_cons: \"d p \\<le> d p' \\<Longrightarrow> d q' \\<le> d q \\<Longrightarrow> R p' q' \\<le> R p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le> d p'; d q' \\<le> d q\\<rbrakk>\n    \\<Longrightarrow> R p' q' \\<le> R p q", "by (simp add: H_R1 H_R2 H_cons)"], ["", "lemma R_seq: \"(R p r) \\<cdot> (R r q) \\<le> R p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R p r \\<cdot> R r q \\<le> R p q", "using H_R1 H_R2 H_seq"], ["proof (prove)\nusing this:\n  H ?p (R ?p ?q) ?q\n  H ?p ?x ?q \\<Longrightarrow> ?x \\<le> R ?p ?q\n  \\<lbrakk>H ?p ?x ?r; H ?r ?y ?q\\<rbrakk>\n  \\<Longrightarrow> H ?p (?x \\<cdot> ?y) ?q\n\ngoal (1 subgoal):\n 1. R p r \\<cdot> R r q \\<le> R p q", "by blast"], ["", "lemma R_cond: \"if v then (R (d v \\<cdot> d p) q) else (R (ad v \\<cdot> d p) q) fi \\<le> R p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. if v then R (d v \\<cdot> d p) q else R (ad v \\<cdot> d p) q fi\n    \\<le> R p q", "by (simp add: H_R1 H_R2 H_cond a_comm dom_op_def)"], ["", "lemma R_loop: \"while q do (R (d p \\<cdot> d q) p) od \\<le> R p (d p \\<cdot> ad q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. while q do R (d p \\<cdot> d q) p od \\<le> R p (d p \\<cdot> ad q)", "by (simp add: H_R1 H_R2 H_loop)"], ["", "end"], ["", "subsubsection \\<open>Soundness and Relation RKAD\\<close>"], ["", "definition rel_R :: \"'a rel \\<Rightarrow> 'a rel \\<Rightarrow> 'a rel\" where \n  \"rel_R P Q = \\<Union>{X. rel_aka.dom_op P \\<subseteq> rel_aka.wp X Q}\""], ["", "interpretation rel_rkad: rkad Id \"{}\" \"(\\<union>)\"  \"(;)\" \"(\\<subseteq>)\" \"(\\<subset>)\" rtrancl rel_ad rel_R"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.rkad Id {} (\\<union>) (;) (\\<subseteq>) (\\<subset>) rtrancl rel_ad\n     rel_R", "by (standard, auto simp: rel_R_def rel_aka.dom_op_def rel_ad_def rel_aka.wp_def, blast)"], ["", "subsubsection \\<open>Assignment Laws\\<close>"], ["", "lemma R_assign: \"(\\<forall>s. P s \\<longrightarrow> Q (s (v := e s))) \\<Longrightarrow> (v ::= e) \\<subseteq> rel_R \\<lceil>P\\<rceil> \\<lceil>Q\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s. P s \\<longrightarrow> Q (s(v := e s)) \\<Longrightarrow>\n    v ::= e \\<subseteq> rel_R \\<lceil>P\\<rceil> \\<lceil>Q\\<rceil>", "by (auto simp: rel_rkad.R_def)"], ["", "lemma H_assign_var: \"(\\<forall>s. P s \\<longrightarrow> Q (s (v := e s))) \\<Longrightarrow> rel_aka.H \\<lceil>P\\<rceil> (v ::= e) \\<lceil>Q\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s. P s \\<longrightarrow> Q (s(v := e s)) \\<Longrightarrow>\n    rel_aka.H \\<lceil>P\\<rceil> (v ::= e) \\<lceil>Q\\<rceil>", "by (auto simp: rel_aka.H_def rel_aka.dom_op_def rel_ad_def gets_def rel_aka.wp_def)"], ["", "lemma R_assignr: \"(\\<forall>s. Q' s \\<longrightarrow> Q (s (v := e s))) \\<Longrightarrow> (rel_R \\<lceil>P\\<rceil> \\<lceil>Q'\\<rceil>) ; (v ::= e) \\<subseteq> rel_R \\<lceil>P\\<rceil> \\<lceil>Q\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s. Q' s \\<longrightarrow> Q (s(v := e s)) \\<Longrightarrow>\n    rel_R \\<lceil>P\\<rceil> \\<lceil>Q'\\<rceil> ; (v ::= e)\n    \\<subseteq> rel_R \\<lceil>P\\<rceil> \\<lceil>Q\\<rceil>", "apply (subst rel_rkad.HR[symmetric], rule rel_aka.H_seq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>s. Q' s \\<longrightarrow> Q (s(v := e s)) \\<Longrightarrow>\n    rel_aka.H \\<lceil>P\\<rceil> (rel_R \\<lceil>P\\<rceil> \\<lceil>Q'\\<rceil>)\n     ?r\n 2. \\<forall>s. Q' s \\<longrightarrow> Q (s(v := e s)) \\<Longrightarrow>\n    rel_aka.H ?r (v ::= e) \\<lceil>Q\\<rceil>", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>s. Q' s \\<longrightarrow> Q (s(v := e s)) \\<Longrightarrow>\n    rel_aka.H ?r (v ::= e) \\<lceil>Q\\<rceil>\n 2. \\<forall>s. Q' s \\<longrightarrow> Q (s(v := e s)) \\<Longrightarrow>\n    rel_aka.H \\<lceil>P\\<rceil> (rel_R \\<lceil>P\\<rceil> \\<lceil>Q'\\<rceil>)\n     ?r", "by (erule H_assign_var, simp add: rel_rkad.H_R1)"], ["", "lemma R_assignl: \"(\\<forall>s. P s \\<longrightarrow> P' (s (v := e s))) \\<Longrightarrow> (v ::= e) ; (rel_R \\<lceil>P'\\<rceil> \\<lceil>Q\\<rceil>) \\<subseteq> rel_R \\<lceil>P\\<rceil> \\<lceil>Q\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s. P s \\<longrightarrow> P' (s(v := e s)) \\<Longrightarrow>\n    (v ::= e) ; rel_R \\<lceil>P'\\<rceil> \\<lceil>Q\\<rceil>\n    \\<subseteq> rel_R \\<lceil>P\\<rceil> \\<lceil>Q\\<rceil>", "by (subst rel_rkad.HR[symmetric], rule rel_aka.H_seq, erule H_assign_var, simp add: rel_rkad.H_R1)"], ["", "subsubsection \\<open>Refinement Example\\<close>"], ["", "lemma var_swap_ref1: \n  \"rel_R \\<lceil>\\<lambda>s. s ''x'' = a \\<and> s ''y'' = b\\<rceil> \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil> \n   \\<supseteq> (''z'' ::= (\\<lambda>s. s ''x'')); rel_R \\<lceil>\\<lambda>s. s ''z'' = a \\<and> s ''y'' = b\\<rceil> \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (''z'' ::= (\\<lambda>s. s ''x'')) ;\n    rel_R \\<lceil>\\<lambda>s. s ''z'' = a \\<and> s ''y'' = b\\<rceil>\n     \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil>\n    \\<subseteq> rel_R\n                 \\<lceil>\\<lambda>s. s ''x'' = a \\<and> s ''y'' = b\\<rceil>\n                 \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil>", "by (rule R_assignl, auto)"], ["", "lemma var_swap_ref2: \n  \"rel_R \\<lceil>\\<lambda>s. s ''z'' = a \\<and> s ''y'' = b\\<rceil> \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil> \n   \\<supseteq> (''x'' ::= (\\<lambda>s. s ''y'')); rel_R \\<lceil>\\<lambda>s. s ''z'' = a \\<and> s ''x'' = b\\<rceil> \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (''x'' ::= (\\<lambda>s. s ''y'')) ;\n    rel_R \\<lceil>\\<lambda>s. s ''z'' = a \\<and> s ''x'' = b\\<rceil>\n     \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil>\n    \\<subseteq> rel_R\n                 \\<lceil>\\<lambda>s. s ''z'' = a \\<and> s ''y'' = b\\<rceil>\n                 \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil>", "by (rule R_assignl, auto)"], ["", "lemma var_swap_ref3:  \n  \"rel_R \\<lceil>\\<lambda>s. s ''z'' = a \\<and> s ''x'' = b\\<rceil> \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil> \n   \\<supseteq> (''y'' ::= (\\<lambda>s. s ''z'')); rel_R \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil> \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (''y'' ::= (\\<lambda>s. s ''z'')) ;\n    rel_R \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil>\n     \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil>\n    \\<subseteq> rel_R\n                 \\<lceil>\\<lambda>s. s ''z'' = a \\<and> s ''x'' = b\\<rceil>\n                 \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil>", "by (rule R_assignl, auto)"], ["", "lemma var_swap_ref_var: \n  \"rel_R \\<lceil>\\<lambda>s. s ''x'' = a \\<and> s ''y'' = b\\<rceil> \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil> \n   \\<supseteq> (''z'' ::= (\\<lambda>s. s ''x'')); (''x'' ::= (\\<lambda>s. s ''y'')); (''y'' ::= (\\<lambda>s. s ''z''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (''z'' ::= (\\<lambda>s. s ''x'')) ; (''x'' ::= (\\<lambda>s. s ''y'')) ;\n    (''y'' ::= (\\<lambda>s. s ''z''))\n    \\<subseteq> rel_R\n                 \\<lceil>\\<lambda>s. s ''x'' = a \\<and> s ''y'' = b\\<rceil>\n                 \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil>", "using var_swap_ref1 var_swap_ref2 var_swap_ref3 rel_rkad.R_skip"], ["proof (prove)\nusing this:\n  (''z'' ::= (\\<lambda>s. s ''x'')) ;\n  rel_R \\<lceil>\\<lambda>s. s ''z'' = ?a \\<and> s ''y'' = ?b\\<rceil>\n   \\<lceil>\\<lambda>s. s ''x'' = ?b \\<and> s ''y'' = ?a\\<rceil>\n  \\<subseteq> rel_R\n               \\<lceil>\\<lambda>s. s ''x'' = ?a \\<and> s ''y'' = ?b\\<rceil>\n               \\<lceil>\\<lambda>s. s ''x'' = ?b \\<and> s ''y'' = ?a\\<rceil>\n  (''x'' ::= (\\<lambda>s. s ''y'')) ;\n  rel_R \\<lceil>\\<lambda>s. s ''z'' = ?a \\<and> s ''x'' = ?b\\<rceil>\n   \\<lceil>\\<lambda>s. s ''x'' = ?b \\<and> s ''y'' = ?a\\<rceil>\n  \\<subseteq> rel_R\n               \\<lceil>\\<lambda>s. s ''z'' = ?a \\<and> s ''y'' = ?b\\<rceil>\n               \\<lceil>\\<lambda>s. s ''x'' = ?b \\<and> s ''y'' = ?a\\<rceil>\n  (''y'' ::= (\\<lambda>s. s ''z'')) ;\n  rel_R \\<lceil>\\<lambda>s. s ''x'' = ?b \\<and> s ''y'' = ?a\\<rceil>\n   \\<lceil>\\<lambda>s. s ''x'' = ?b \\<and> s ''y'' = ?a\\<rceil>\n  \\<subseteq> rel_R\n               \\<lceil>\\<lambda>s. s ''z'' = ?a \\<and> s ''x'' = ?b\\<rceil>\n               \\<lceil>\\<lambda>s. s ''x'' = ?b \\<and> s ''y'' = ?a\\<rceil>\n  Id \\<subseteq> rel_R ?p ?p\n\ngoal (1 subgoal):\n 1. (''z'' ::= (\\<lambda>s. s ''x'')) ; (''x'' ::= (\\<lambda>s. s ''y'')) ;\n    (''y'' ::= (\\<lambda>s. s ''z''))\n    \\<subseteq> rel_R\n                 \\<lceil>\\<lambda>s. s ''x'' = a \\<and> s ''y'' = b\\<rceil>\n                 \\<lceil>\\<lambda>s. s ''x'' = b \\<and> s ''y'' = a\\<rceil>", "by fastforce"], ["", "end"]]}