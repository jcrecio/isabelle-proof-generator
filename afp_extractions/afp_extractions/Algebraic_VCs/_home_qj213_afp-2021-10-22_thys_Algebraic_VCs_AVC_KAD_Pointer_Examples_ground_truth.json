{"file_name": "/home/qj213/afp-2021-10-22/thys/Algebraic_VCs/AVC_KAD/Pointer_Examples.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Algebraic_VCs", "problem_names": ["lemma list_reversal:\n  \"PRE (\\<lambda>s :: 'a state. List (projr (s ''h'')) (projl (s ''p'')) Ps \n        \\<and> List (projr (s ''h'')) (projl (s ''q'')) Qs \n        \\<and> set Ps \\<inter> set Qs = {})\n    (WHILE (\\<lambda>s. projl (s ''p'') \\<noteq> Null) \n     INV (\\<lambda>s. \\<exists>ps qs. List (projr (s ''h'')) (projl (s ''p'')) ps \n              \\<and> List (projr (s ''h'')) (projl (s ''q'')) qs \n              \\<and> set ps \\<inter> set qs = {} \\<and> rev ps @ qs = rev Ps @ Qs)\n     DO\n      (''r'' ::= (\\<lambda>s. s ''p''));\n      (''p'' ::= (\\<lambda>s. Inl (projr (s ''h'') (addr (projl (s ''p''))))) );\n      (''h'' ::= (\\<lambda>s. Inr ((projr (s ''h''))(addr (projl (s ''r'')) := projl (s ''q''))) ));\n      (''q'' ::= (\\<lambda>s. s ''r''))\n     OD)\n  POST (\\<lambda>s. List (projr (s ''h'')) (projl (s ''q'')) (rev Ps @ Qs))\""], "translations": [["", "lemma list_reversal:\n  \"PRE (\\<lambda>s :: 'a state. List (projr (s ''h'')) (projl (s ''p'')) Ps \n        \\<and> List (projr (s ''h'')) (projl (s ''q'')) Qs \n        \\<and> set Ps \\<inter> set Qs = {})\n    (WHILE (\\<lambda>s. projl (s ''p'') \\<noteq> Null) \n     INV (\\<lambda>s. \\<exists>ps qs. List (projr (s ''h'')) (projl (s ''p'')) ps \n              \\<and> List (projr (s ''h'')) (projl (s ''q'')) qs \n              \\<and> set ps \\<inter> set qs = {} \\<and> rev ps @ qs = rev Ps @ Qs)\n     DO\n      (''r'' ::= (\\<lambda>s. s ''p''));\n      (''p'' ::= (\\<lambda>s. Inl (projr (s ''h'') (addr (projl (s ''p''))))) );\n      (''h'' ::= (\\<lambda>s. Inr ((projr (s ''h''))(addr (projl (s ''r'')) := projl (s ''q''))) ));\n      (''q'' ::= (\\<lambda>s. s ''r''))\n     OD)\n  POST (\\<lambda>s. List (projr (s ''h'')) (projl (s ''q'')) (rev Ps @ Qs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rdom\n     \\<lceil>\\<lambda>s.\n                List (projr (s ''h'')) (projl (s ''p'')) Ps \\<and>\n                List (projr (s ''h'')) (projl (s ''q'')) Qs \\<and>\n                set Ps \\<inter> set Qs = {}\\<rceil>\n    \\<subseteq> wp (WHILE (\\<lambda>s.\n                              projl (s ''p'') \\<noteq>\n                              Null) INV (\\<lambda>s.\n      \\<exists>ps qs.\n         List (projr (s ''h'')) (projl (s ''p'')) ps \\<and>\n         List (projr (s ''h'')) (projl (s ''q'')) qs \\<and>\n         set ps \\<inter> set qs = {} \\<and>\n         rev ps @ qs =\n         rev Ps @\n         Qs) DO (''r'' ::= (\\<lambda>s. s ''p'')) ;\n                (''p'' ::= (\\<lambda>s.\n                               Inl (projr (s ''h'')\n                                     (addr (projl (s ''p'')))))) ;\n                (''h'' ::= (\\<lambda>s.\n                               Inr ((projr (s ''h''))\n                                    (addr (projl (s ''r'')) :=\n projl (s ''q''))))) ;\n                (''q'' ::= (\\<lambda>s. s ''r'')) OD)\n                 \\<lceil>\\<lambda>s.\n                            List (projr (s ''h'')) (projl (s ''q''))\n                             (rev Ps @ Qs)\\<rceil>", "apply hoare"], ["proof (prove)\ngoal (3 subgoals):\n 1. rdom\n     \\<lceil>\\<lambda>s.\n                List (projr (s ''h'')) (projl (s ''p'')) Ps \\<and>\n                List (projr (s ''h'')) (projl (s ''q'')) Qs \\<and>\n                set Ps \\<inter> set Qs = {}\\<rceil>\n    \\<subseteq> rdom\n                 \\<lceil>\\<lambda>s.\n                            \\<exists>ps qs.\n                               List (projr (s ''h'')) (projl (s ''p''))\n                                ps \\<and>\n                               List (projr (s ''h'')) (projl (s ''q''))\n                                qs \\<and>\n                               set ps \\<inter> set qs = {} \\<and>\n                               rev ps @ qs = rev Ps @ Qs\\<rceil>\n 2. rdom\n     \\<lceil>\\<lambda>s.\n                \\<exists>ps qs.\n                   List (projr (s ''h'')) (projl (s ''p'')) ps \\<and>\n                   List (projr (s ''h'')) (projl (s ''q'')) qs \\<and>\n                   set ps \\<inter> set qs = {} \\<and>\n                   rev ps @ qs = rev Ps @ Qs\\<rceil> ;\n    rel_ad \\<lceil>\\<lambda>s. projl (s ''p'') \\<noteq> Null\\<rceil>\n    \\<subseteq> rdom\n                 \\<lceil>\\<lambda>s.\n                            List (projr (s ''h'')) (projl (s ''q''))\n                             (rev Ps @ Qs)\\<rceil>\n 3. rdom\n     \\<lceil>\\<lambda>s.\n                \\<exists>ps qs.\n                   List (projr (s ''h'')) (projl (s ''p'')) ps \\<and>\n                   List (projr (s ''h'')) (projl (s ''q'')) qs \\<and>\n                   set ps \\<inter> set qs = {} \\<and>\n                   rev ps @ qs = rev Ps @ Qs\\<rceil> ;\n    rdom \\<lceil>\\<lambda>s. projl (s ''p'') \\<noteq> Null\\<rceil>\n    \\<subseteq> wp (''r'' ::= (\\<lambda>s. s ''p''))\n                 (wp (''p'' ::= (\\<lambda>s.\n                                    Inl (projr (s ''h'')\n    (addr (projl (s ''p''))))))\n                   (wp (''h'' ::= (\\<lambda>s.\nInr ((projr (s ''h''))(addr (projl (s ''r'')) := projl (s ''q'')))))\n                     (wp (''q'' ::= (\\<lambda>s. s ''r''))\n                       \\<lceil>\\<lambda>s.\n                                  \\<exists>ps qs.\n                                     List (projr (s ''h''))\n(projl (s ''p'')) ps \\<and>\n                                     List (projr (s ''h''))\n(projl (s ''q'')) qs \\<and>\n                                     set ps \\<inter> set qs = {} \\<and>\n                                     rev ps @ qs = rev Ps @ Qs\\<rceil>)))", "apply auto[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. rdom\n     \\<lceil>\\<lambda>s.\n                \\<exists>ps qs.\n                   List (projr (s ''h'')) (projl (s ''p'')) ps \\<and>\n                   List (projr (s ''h'')) (projl (s ''q'')) qs \\<and>\n                   set ps \\<inter> set qs = {} \\<and>\n                   rev ps @ qs = rev Ps @ Qs\\<rceil> ;\n    rdom \\<lceil>\\<lambda>s. projl (s ''p'') \\<noteq> Null\\<rceil>\n    \\<subseteq> wp (''r'' ::= (\\<lambda>s. s ''p''))\n                 (wp (''p'' ::= (\\<lambda>s.\n                                    Inl (projr (s ''h'')\n    (addr (projl (s ''p''))))))\n                   (wp (''h'' ::= (\\<lambda>s.\nInr ((projr (s ''h''))(addr (projl (s ''r'')) := projl (s ''q'')))))\n                     (wp (''q'' ::= (\\<lambda>s. s ''r''))\n                       \\<lceil>\\<lambda>s.\n                                  \\<exists>ps qs.\n                                     List (projr (s ''h''))\n(projl (s ''p'')) ps \\<and>\n                                     List (projr (s ''h''))\n(projl (s ''q'')) qs \\<and>\n                                     set ps \\<inter> set qs = {} \\<and>\n                                     rev ps @ qs = rev Ps @ Qs\\<rceil>)))", "by (clarsimp, fastforce intro: notin_List_update[THEN iffD2])"], ["", "end"]]}