{"file_name": "/home/qj213/afp-2021-10-22/thys/Algebraic_VCs/AVC_KAT/VC_KAT.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Algebraic_VCs", "problem_names": ["lemma H_var1: \"H p x q \\<longleftrightarrow> t p \\<cdot> x \\<cdot> n q = 0\"", "lemma H_var2: \"H p x q \\<longleftrightarrow> t p \\<cdot> x = t p \\<cdot> x \\<cdot> t q\"", "lemma H_skip:  \"H p 1 p\"", "lemma H_cons_1: \"t p \\<le> t p' \\<Longrightarrow> H p' x q \\<Longrightarrow> H p x q\"", "lemma H_cons_2: \"t q' \\<le> t q \\<Longrightarrow> H p x q' \\<Longrightarrow> H p x q\"", "lemma H_cons: \"t p \\<le> t p' \\<Longrightarrow> t q' \\<le> t q \\<Longrightarrow> H p' x q' \\<Longrightarrow> H p x q\"", "lemma H_seq_swap: \"H p x r \\<Longrightarrow> H r y q \\<Longrightarrow> H p (x \\<cdot> y) q\"", "lemma H_seq: \"H r y q \\<Longrightarrow> H p x r \\<Longrightarrow> H p (x \\<cdot> y) q\"", "lemma H_exp1: \"H (t p \\<cdot> t r) x q \\<Longrightarrow> H p (t r \\<cdot> x) q\"", "lemma H_exp2: \"H p x q \\<Longrightarrow> H p (x \\<cdot> t r) (t q \\<cdot> t r)\"", "lemma H_cond_iff: \"H p (if r then x else y fi) q \\<longleftrightarrow> H (t p \\<cdot> t r) x q \\<and> H (t p \\<cdot> n r) y q\"", "lemma H_cond: \"H (t p \\<cdot> t r) x q \\<Longrightarrow> H (t p \\<cdot> n r) y q \\<Longrightarrow> H p (if r then x else y fi) q\"", "lemma H_loop: \"H (t p \\<cdot> t r) x p \\<Longrightarrow> H p (while r do x od) (t p \\<cdot> n r)\"", "lemma H_while_inv: \"t p \\<le> t i \\<Longrightarrow> t i \\<cdot> n r \\<le> t q \\<Longrightarrow> H (t i \\<cdot> t r) x i \\<Longrightarrow> H p (while r inv i do x od) q\"", "lemma H_frame: \"H p x p \\<Longrightarrow> H q x r \\<Longrightarrow> H (t p \\<cdot> t q) x (t p \\<cdot> t r)\"", "lemma t_p2r [simp]: \"rel_dioid_tests.t \\<lceil>P\\<rceil> = \\<lceil>P\\<rceil>\"", "lemma impl_prop [simp]: \"\\<lceil>P\\<rceil> \\<subseteq> \\<lceil>Q\\<rceil> \\<longleftrightarrow> (\\<forall>s. P s \\<longrightarrow>  Q s)\"", "lemma Id_simp [simp]: \"Id \\<inter> (- Id \\<union> X) = Id \\<inter> X\"", "lemma Id_p2r [simp]: \"Id \\<inter> \\<lceil>P\\<rceil> = \\<lceil>P\\<rceil>\"", "lemma Id_p2r_simp [simp]: \"Id \\<inter> (- Id \\<union> \\<lceil>P\\<rceil>) = \\<lceil>P\\<rceil>\"", "lemma H_assign_prop: \"\\<lceil>\\<lambda>s. P (s (v := e s))\\<rceil> ; (v ::= e) = (v ::= e) ; \\<lceil>P\\<rceil>\"", "lemma H_assign: \"rel_kat.H \\<lceil>\\<lambda>s. P (s (v := e s))\\<rceil> (v ::= e) \\<lceil>P\\<rceil>\"", "lemma H_assign_var: \"(\\<forall>s. P s \\<longrightarrow> Q (s (v := e s))) \\<Longrightarrow> rel_kat.H \\<lceil>P\\<rceil> (v ::= e) \\<lceil>Q\\<rceil>\"", "lemma H_assign_iff [simp]: \"rel_kat.H \\<lceil>P\\<rceil> (v ::= e) \\<lceil>Q\\<rceil> \\<longleftrightarrow> (\\<forall>s. P s \\<longrightarrow> Q (s (v := e s)))\"", "lemma H_assign_floyd: \" rel_kat.H \\<lceil>P\\<rceil> (v ::= e) \\<lceil>\\<lambda>s. \\<exists>w. s v = e (s(v := w)) \\<and> P (s(v := w))\\<rceil>\"", "lemma sH_cons_1: \"\\<forall>s. P s \\<longrightarrow> P' s \\<Longrightarrow> rel_kat.H \\<lceil>P'\\<rceil> X \\<lceil>Q\\<rceil> \\<Longrightarrow> rel_kat.H \\<lceil>P\\<rceil> X \\<lceil>Q\\<rceil>\"", "lemma sH_cons_2: \"\\<forall>s. Q' s \\<longrightarrow> Q s \\<Longrightarrow> rel_kat.H \\<lceil>P\\<rceil> X \\<lceil>Q'\\<rceil> \\<Longrightarrow> rel_kat.H \\<lceil>P\\<rceil> X \\<lceil>Q\\<rceil>\"", "lemma sH_cons: \"\\<forall>s. P s \\<longrightarrow> P' s \\<Longrightarrow> \\<forall>s. Q' s \\<longrightarrow> Q s \\<Longrightarrow> rel_kat.H \\<lceil>P'\\<rceil> X \\<lceil>Q'\\<rceil> \\<Longrightarrow> rel_kat.H \\<lceil>P\\<rceil> X \\<lceil>Q\\<rceil>\"", "lemma sH_cond: \"rel_kat.H \\<lceil>P \\<sqinter> T\\<rceil> X \\<lceil>Q\\<rceil> \\<Longrightarrow> rel_kat.H \\<lceil>P \\<sqinter> - T\\<rceil> Y \\<lceil>Q\\<rceil>  \\<Longrightarrow> rel_kat.H \\<lceil>P\\<rceil> (rel_kat.ifthenelse \\<lceil>T\\<rceil> X Y) \\<lceil>Q\\<rceil>\"", "lemma sH_cond_iff: \"rel_kat.H \\<lceil>P\\<rceil> (rel_kat.ifthenelse \\<lceil>T\\<rceil> X Y) \\<lceil>Q\\<rceil> \\<longleftrightarrow> (rel_kat.H \\<lceil>P \\<sqinter> T\\<rceil> X \\<lceil>Q\\<rceil> \\<and> rel_kat.H \\<lceil>P \\<sqinter> - T\\<rceil> Y \\<lceil>Q\\<rceil>)\"", "lemma sH_while_inv: \"\\<forall>s. P s \\<longrightarrow> I s \\<Longrightarrow> \\<forall>s. I s \\<and> \\<not> R s \\<longrightarrow> Q s \\<Longrightarrow> rel_kat.H \\<lceil>I \\<sqinter> R\\<rceil> X \\<lceil>I\\<rceil> \n                     \\<Longrightarrow> rel_kat.H \\<lceil>P\\<rceil> (rel_kat.while_inv \\<lceil>R\\<rceil> \\<lceil>I\\<rceil> X) \\<lceil>Q\\<rceil>\"", "lemma sH_H: \"rel_kat.H \\<lceil>P\\<rceil> X \\<lceil>Q\\<rceil> \\<longleftrightarrow> (\\<forall>s s'. P s \\<longrightarrow> (s,s') \\<in> X \\<longrightarrow> Q s')\"", "lemma H_cond_iff2[simp]: \"PRE p (IF r THEN x ELSE y FI) POST q \\<longleftrightarrow> (PRE (p \\<sqinter> r) x POST q) \\<and> (PRE (p \\<sqinter> - r) y POST q)\""], "translations": [["", "lemma H_var1: \"H p x q \\<longleftrightarrow> t p \\<cdot> x \\<cdot> n q = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H p x q = (t p \\<cdot> x \\<cdot> !q = (0::'a))", "by (metis H_def n_kat_3 t_n_closed)"], ["", "lemma H_var2: \"H p x q \\<longleftrightarrow> t p \\<cdot> x = t p \\<cdot> x \\<cdot> t q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H p x q = (t p \\<cdot> x = t p \\<cdot> x \\<cdot> t q)", "by (simp add: H_def n_kat_2)"], ["", "subsubsection \\<open>Syntax for Conditionals and Loops\\<close>"], ["", "definition ifthenelse :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" (\"if _ then _ else _ fi\" [64,64,64] 63) where\n  \"if p then x else y fi = (t p \\<cdot> x + n p \\<cdot> y)\""], ["", "definition while :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" (\"while _ do _ od\" [64,64] 63) where\n  \"while b do x od = (t b \\<cdot> x)\\<^sup>\\<star> \\<cdot> n b\""], ["", "definition while_inv :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" (\"while _ inv _ do _ od\" [64,64,64] 63) where\n  \"while p inv i do x od = while p do x od\""], ["", "subsubsection \\<open>Propositional Hoare Logic\\<close>"], ["", "lemma H_skip:  \"H p 1 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H p (1::'a) p", "by (simp add: H_def)"], ["", "lemma H_cons_1: \"t p \\<le> t p' \\<Longrightarrow> H p' x q \\<Longrightarrow> H p x q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t p \\<le> t p'; H p' x q\\<rbrakk> \\<Longrightarrow> H p x q", "using H_def phl_cons1"], ["proof (prove)\nusing this:\n  H ?p ?x ?q = \\<lparr>t ?p\\<rparr>?x\\<lparr>?x \\<cdot> t ?q\\<rparr>\n  \\<lbrakk>?x \\<le> ?w;\n   \\<lparr>?w\\<rparr>?y\\<lparr>?y \\<cdot> ?z\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?x\\<rparr>?y\\<lparr>?y \\<cdot> ?z\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t p \\<le> t p'; H p' x q\\<rbrakk> \\<Longrightarrow> H p x q", "by blast"], ["", "lemma H_cons_2: \"t q' \\<le> t q \\<Longrightarrow> H p x q' \\<Longrightarrow> H p x q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t q' \\<le> t q; H p x q'\\<rbrakk> \\<Longrightarrow> H p x q", "using H_def phl_cons2"], ["proof (prove)\nusing this:\n  H ?p ?x ?q = \\<lparr>t ?p\\<rparr>?x\\<lparr>?x \\<cdot> t ?q\\<rparr>\n  \\<lbrakk>?w \\<le> ?x;\n   \\<lparr>?z\\<rparr>?y\\<lparr>?y \\<cdot> ?w\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?z\\<rparr>?y\\<lparr>?y \\<cdot> ?x\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t q' \\<le> t q; H p x q'\\<rbrakk> \\<Longrightarrow> H p x q", "by blast"], ["", "lemma H_cons: \"t p \\<le> t p' \\<Longrightarrow> t q' \\<le> t q \\<Longrightarrow> H p' x q' \\<Longrightarrow> H p x q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t p \\<le> t p'; t q' \\<le> t q; H p' x q'\\<rbrakk>\n    \\<Longrightarrow> H p x q", "by (simp add: H_cons_1 H_cons_2)"], ["", "lemma H_seq_swap: \"H p x r \\<Longrightarrow> H r y q \\<Longrightarrow> H p (x \\<cdot> y) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H p x r; H r y q\\<rbrakk> \\<Longrightarrow> H p (x \\<cdot> y) q", "by (simp add: H_def phl_seq)"], ["", "lemma H_seq: \"H r y q \\<Longrightarrow> H p x r \\<Longrightarrow> H p (x \\<cdot> y) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H r y q; H p x r\\<rbrakk> \\<Longrightarrow> H p (x \\<cdot> y) q", "by (simp add: H_seq_swap)"], ["", "lemma H_exp1: \"H (t p \\<cdot> t r) x q \\<Longrightarrow> H p (t r \\<cdot> x) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H (t p \\<cdot> t r) x q \\<Longrightarrow> H p (t r \\<cdot> x) q", "using H_def n_de_morgan_var2 phl.ht_at_phl_export1"], ["proof (prove)\nusing this:\n  H ?p ?x ?q = \\<lparr>t ?p\\<rparr>?x\\<lparr>?x \\<cdot> t ?q\\<rparr>\n  !(!?x + !?y) = t ?x \\<cdot> t ?y\n  \\<lparr>t ?x \\<cdot>\n          t ?y\\<rparr>?z\\<lparr>?z \\<cdot> ?w\\<rparr> \\<Longrightarrow>\n  \\<lparr>t ?x\\<rparr>t ?y \\<cdot>\n                      ?z\\<lparr>t ?y \\<cdot> ?z \\<cdot> ?w\\<rparr>\n\ngoal (1 subgoal):\n 1. H (t p \\<cdot> t r) x q \\<Longrightarrow> H p (t r \\<cdot> x) q", "by auto"], ["", "lemma H_exp2: \"H p x q \\<Longrightarrow> H p (x \\<cdot> t r) (t q \\<cdot> t r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H p x q \\<Longrightarrow> H p (x \\<cdot> t r) (t q \\<cdot> t r)", "by (metis H_def phl.ht_at_phl_export2 test_mult)"], ["", "lemma H_cond_iff: \"H p (if r then x else y fi) q \\<longleftrightarrow> H (t p \\<cdot> t r) x q \\<and> H (t p \\<cdot> n r) y q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H p (if r then x else y fi) q =\n    (H (t p \\<cdot> t r) x q \\<and> H (t p \\<cdot> !r) y q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. H p (if r then x else y fi) q =\n    (H (t p \\<cdot> t r) x q \\<and> H (t p \\<cdot> !r) y q)", "have \"H p (if r then x else y fi) q \\<longleftrightarrow> t p \\<cdot> (t r \\<cdot> x + n r \\<cdot> y) \\<cdot> n q = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H p (if r then x else y fi) q =\n    (t p \\<cdot> (t r \\<cdot> x + !r \\<cdot> y) \\<cdot> !q = (0::'a))", "by (simp add: H_var1 ifthenelse_def)"], ["proof (state)\nthis:\n  H p (if r then x else y fi) q =\n  (t p \\<cdot> (t r \\<cdot> x + !r \\<cdot> y) \\<cdot> !q = (0::'a))\n\ngoal (1 subgoal):\n 1. H p (if r then x else y fi) q =\n    (H (t p \\<cdot> t r) x q \\<and> H (t p \\<cdot> !r) y q)", "also"], ["proof (state)\nthis:\n  H p (if r then x else y fi) q =\n  (t p \\<cdot> (t r \\<cdot> x + !r \\<cdot> y) \\<cdot> !q = (0::'a))\n\ngoal (1 subgoal):\n 1. H p (if r then x else y fi) q =\n    (H (t p \\<cdot> t r) x q \\<and> H (t p \\<cdot> !r) y q)", "have \"... \\<longleftrightarrow> t p \\<cdot> t r \\<cdot> x \\<cdot> n q + t p \\<cdot> n r \\<cdot> y \\<cdot> n q = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t p \\<cdot> (t r \\<cdot> x + !r \\<cdot> y) \\<cdot> !q = (0::'a)) =\n    (t p \\<cdot> t r \\<cdot> x \\<cdot> !q +\n     t p \\<cdot> !r \\<cdot> y \\<cdot> !q =\n     (0::'a))", "by (simp add: distrib_left mult_assoc)"], ["proof (state)\nthis:\n  (t p \\<cdot> (t r \\<cdot> x + !r \\<cdot> y) \\<cdot> !q = (0::'a)) =\n  (t p \\<cdot> t r \\<cdot> x \\<cdot> !q +\n   t p \\<cdot> !r \\<cdot> y \\<cdot> !q =\n   (0::'a))\n\ngoal (1 subgoal):\n 1. H p (if r then x else y fi) q =\n    (H (t p \\<cdot> t r) x q \\<and> H (t p \\<cdot> !r) y q)", "also"], ["proof (state)\nthis:\n  (t p \\<cdot> (t r \\<cdot> x + !r \\<cdot> y) \\<cdot> !q = (0::'a)) =\n  (t p \\<cdot> t r \\<cdot> x \\<cdot> !q +\n   t p \\<cdot> !r \\<cdot> y \\<cdot> !q =\n   (0::'a))\n\ngoal (1 subgoal):\n 1. H p (if r then x else y fi) q =\n    (H (t p \\<cdot> t r) x q \\<and> H (t p \\<cdot> !r) y q)", "have \"... \\<longleftrightarrow> t p \\<cdot> t r \\<cdot> x \\<cdot> n q = 0 \\<and> t p \\<cdot> n r \\<cdot> y \\<cdot> n q = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t p \\<cdot> t r \\<cdot> x \\<cdot> !q +\n     t p \\<cdot> !r \\<cdot> y \\<cdot> !q =\n     (0::'a)) =\n    (t p \\<cdot> t r \\<cdot> x \\<cdot> !q = (0::'a) \\<and>\n     t p \\<cdot> !r \\<cdot> y \\<cdot> !q = (0::'a))", "by (metis add_0_left no_trivial_inverse)"], ["proof (state)\nthis:\n  (t p \\<cdot> t r \\<cdot> x \\<cdot> !q +\n   t p \\<cdot> !r \\<cdot> y \\<cdot> !q =\n   (0::'a)) =\n  (t p \\<cdot> t r \\<cdot> x \\<cdot> !q = (0::'a) \\<and>\n   t p \\<cdot> !r \\<cdot> y \\<cdot> !q = (0::'a))\n\ngoal (1 subgoal):\n 1. H p (if r then x else y fi) q =\n    (H (t p \\<cdot> t r) x q \\<and> H (t p \\<cdot> !r) y q)", "finally"], ["proof (chain)\npicking this:\n  H p (if r then x else y fi) q =\n  (t p \\<cdot> t r \\<cdot> x \\<cdot> !q = (0::'a) \\<and>\n   t p \\<cdot> !r \\<cdot> y \\<cdot> !q = (0::'a))", "show ?thesis"], ["proof (prove)\nusing this:\n  H p (if r then x else y fi) q =\n  (t p \\<cdot> t r \\<cdot> x \\<cdot> !q = (0::'a) \\<and>\n   t p \\<cdot> !r \\<cdot> y \\<cdot> !q = (0::'a))\n\ngoal (1 subgoal):\n 1. H p (if r then x else y fi) q =\n    (H (t p \\<cdot> t r) x q \\<and> H (t p \\<cdot> !r) y q)", "by (metis H_var1 test_mult)"], ["proof (state)\nthis:\n  H p (if r then x else y fi) q =\n  (H (t p \\<cdot> t r) x q \\<and> H (t p \\<cdot> !r) y q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma H_cond: \"H (t p \\<cdot> t r) x q \\<Longrightarrow> H (t p \\<cdot> n r) y q \\<Longrightarrow> H p (if r then x else y fi) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H (t p \\<cdot> t r) x q; H (t p \\<cdot> !r) y q\\<rbrakk>\n    \\<Longrightarrow> H p (if r then x else y fi) q", "by (simp add: H_cond_iff)"], ["", "lemma H_loop: \"H (t p \\<cdot> t r) x p \\<Longrightarrow> H p (while r do x od) (t p \\<cdot> n r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H (t p \\<cdot> t r) x p \\<Longrightarrow>\n    H p (while r do x od) (t p \\<cdot> !r)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. H (t p \\<cdot> t r) x p \\<Longrightarrow>\n    H p (while r do x od) (t p \\<cdot> !r)", "assume a1: \"H (t p \\<cdot> t r) x p\""], ["proof (state)\nthis:\n  H (t p \\<cdot> t r) x p\n\ngoal (1 subgoal):\n 1. H (t p \\<cdot> t r) x p \\<Longrightarrow>\n    H p (while r do x od) (t p \\<cdot> !r)", "have \"t (t p \\<cdot> n r) = n r \\<cdot> t p \\<cdot> n r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t (t p \\<cdot> !r) = !r \\<cdot> t p \\<cdot> !r", "using n_preserve test_mult"], ["proof (prove)\nusing this:\n  !?x \\<cdot> !?y \\<cdot> !?x = !?y \\<cdot> !?x\n  t (!?x \\<cdot> !?y) = !?x \\<cdot> !?y\n\ngoal (1 subgoal):\n 1. t (t p \\<cdot> !r) = !r \\<cdot> t p \\<cdot> !r", "by presburger"], ["proof (state)\nthis:\n  t (t p \\<cdot> !r) = !r \\<cdot> t p \\<cdot> !r\n\ngoal (1 subgoal):\n 1. H (t p \\<cdot> t r) x p \\<Longrightarrow>\n    H p (while r do x od) (t p \\<cdot> !r)", "then"], ["proof (chain)\npicking this:\n  t (t p \\<cdot> !r) = !r \\<cdot> t p \\<cdot> !r", "show ?thesis"], ["proof (prove)\nusing this:\n  t (t p \\<cdot> !r) = !r \\<cdot> t p \\<cdot> !r\n\ngoal (1 subgoal):\n 1. H p (while r do x od) (t p \\<cdot> !r)", "using a1 H_def H_exp1 conway.phl.it_simr phl_export2 while_def"], ["proof (prove)\nusing this:\n  t (t p \\<cdot> !r) = !r \\<cdot> t p \\<cdot> !r\n  H (t p \\<cdot> t r) x p\n  H ?p ?x ?q = \\<lparr>t ?p\\<rparr>?x\\<lparr>?x \\<cdot> t ?q\\<rparr>\n  H (t ?p \\<cdot> t ?r) ?x ?q \\<Longrightarrow> H ?p (t ?r \\<cdot> ?x) ?q\n  \\<lparr>?y\\<rparr>?x\\<lparr>?x \\<cdot> ?y\\<rparr> \\<Longrightarrow>\n  \\<lparr>?y\\<rparr>?x\\<^sup>\\<star>\\<lparr>?x\\<^sup>\\<star> \\<cdot>\n      ?y\\<rparr>\n  \\<lbrakk>\\<lparr>?z\\<rparr>?w\\<lparr>?w \\<cdot> ?z \\<cdot> ?w\\<rparr>;\n   \\<lparr>?x\\<rparr>?y\\<lparr>?y \\<cdot> ?z\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> \\<lparr>?x\\<rparr>?y \\<cdot>\n?w\\<lparr>?y \\<cdot> ?w \\<cdot> (?z \\<cdot> ?w)\\<rparr>\n  while ?b do ?x od = (t ?b \\<cdot> ?x)\\<^sup>\\<star> \\<cdot> !?b\n\ngoal (1 subgoal):\n 1. H p (while r do x od) (t p \\<cdot> !r)", "by auto"], ["proof (state)\nthis:\n  H p (while r do x od) (t p \\<cdot> !r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma H_while_inv: \"t p \\<le> t i \\<Longrightarrow> t i \\<cdot> n r \\<le> t q \\<Longrightarrow> H (t i \\<cdot> t r) x i \\<Longrightarrow> H p (while r inv i do x od) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t p \\<le> t i; \\<lparr>t i\\<rparr>!r\\<lparr>t q\\<rparr>;\n     H (t i \\<cdot> t r) x i\\<rbrakk>\n    \\<Longrightarrow> H p (while r inv i do x od) q", "by (metis H_cons H_loop test_mult while_inv_def)"], ["", "text \\<open>Finally we prove a frame rule.\\<close>"], ["", "lemma H_frame: \"H p x p \\<Longrightarrow> H q x r \\<Longrightarrow> H (t p \\<cdot> t q) x (t p \\<cdot> t r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H p x p; H q x r\\<rbrakk>\n    \\<Longrightarrow> H (t p \\<cdot> t q) x (t p \\<cdot> t r)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>H p x p; H q x r\\<rbrakk>\n    \\<Longrightarrow> H (t p \\<cdot> t q) x (t p \\<cdot> t r)", "assume \"H p x p\" and a: \"H q x r\""], ["proof (state)\nthis:\n  H p x p\n  H q x r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>H p x p; H q x r\\<rbrakk>\n    \\<Longrightarrow> H (t p \\<cdot> t q) x (t p \\<cdot> t r)", "hence b: \"t p \\<cdot> x \\<le> x \\<cdot> t p\" and \"t q \\<cdot> x \\<le> x \\<cdot> t r\""], ["proof (prove)\nusing this:\n  H p x p\n  H q x r\n\ngoal (1 subgoal):\n 1. \\<lparr>t p\\<rparr>x\\<lparr>x \\<cdot> t p\\<rparr> &&&\n    \\<lparr>t q\\<rparr>x\\<lparr>x \\<cdot> t r\\<rparr>", "using H_def"], ["proof (prove)\nusing this:\n  H p x p\n  H q x r\n  H ?p ?x ?q = \\<lparr>t ?p\\<rparr>?x\\<lparr>?x \\<cdot> t ?q\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>t p\\<rparr>x\\<lparr>x \\<cdot> t p\\<rparr> &&&\n    \\<lparr>t q\\<rparr>x\\<lparr>x \\<cdot> t r\\<rparr>", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>t q\\<rparr>x\\<lparr>x \\<cdot> t r\\<rparr>", "using H_def a"], ["proof (prove)\nusing this:\n  H ?p ?x ?q = \\<lparr>t ?p\\<rparr>?x\\<lparr>?x \\<cdot> t ?q\\<rparr>\n  H q x r\n\ngoal (1 subgoal):\n 1. \\<lparr>t q\\<rparr>x\\<lparr>x \\<cdot> t r\\<rparr>", "by blast"], ["proof (state)\nthis:\n  \\<lparr>t p\\<rparr>x\\<lparr>x \\<cdot> t p\\<rparr>\n  \\<lparr>t q\\<rparr>x\\<lparr>x \\<cdot> t r\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>H p x p; H q x r\\<rbrakk>\n    \\<Longrightarrow> H (t p \\<cdot> t q) x (t p \\<cdot> t r)", "hence \"t p \\<cdot> t q \\<cdot> x \\<le> t p \\<cdot> x \\<cdot> t r\""], ["proof (prove)\nusing this:\n  \\<lparr>t p\\<rparr>x\\<lparr>x \\<cdot> t p\\<rparr>\n  \\<lparr>t q\\<rparr>x\\<lparr>x \\<cdot> t r\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lparr>t p \\<cdot>\n            t q\\<rparr>x\\<lparr>t p \\<cdot> x \\<cdot> t r\\<rparr>", "by (simp add: mult_assoc mult_isol)"], ["proof (state)\nthis:\n  \\<lparr>t p \\<cdot> t q\\<rparr>x\\<lparr>t p \\<cdot> x \\<cdot> t r\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>H p x p; H q x r\\<rbrakk>\n    \\<Longrightarrow> H (t p \\<cdot> t q) x (t p \\<cdot> t r)", "also"], ["proof (state)\nthis:\n  \\<lparr>t p \\<cdot> t q\\<rparr>x\\<lparr>t p \\<cdot> x \\<cdot> t r\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>H p x p; H q x r\\<rbrakk>\n    \\<Longrightarrow> H (t p \\<cdot> t q) x (t p \\<cdot> t r)", "have \"... \\<le> x \\<cdot> t p \\<cdot> t r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lparr>t p \\<cdot>\n            x\\<rparr>t r\\<lparr>x \\<cdot> t p \\<cdot> t r\\<rparr>", "by (simp add: b mult_isor)"], ["proof (state)\nthis:\n  \\<lparr>t p \\<cdot> x\\<rparr>t r\\<lparr>x \\<cdot> t p \\<cdot> t r\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>H p x p; H q x r\\<rbrakk>\n    \\<Longrightarrow> H (t p \\<cdot> t q) x (t p \\<cdot> t r)", "finally"], ["proof (chain)\npicking this:\n  \\<lparr>t p \\<cdot> t q\\<rparr>x\\<lparr>x \\<cdot> t p \\<cdot> t r\\<rparr>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lparr>t p \\<cdot> t q\\<rparr>x\\<lparr>x \\<cdot> t p \\<cdot> t r\\<rparr>\n\ngoal (1 subgoal):\n 1. H (t p \\<cdot> t q) x (t p \\<cdot> t r)", "by (metis H_def mult_assoc test_mult)"], ["proof (state)\nthis:\n  H (t p \\<cdot> t q) x (t p \\<cdot> t r)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsubsection \\<open>Store and Assignment\\<close>"], ["", "text \\<open>The proper verification component starts here.\\<close>"], ["", "type_synonym 'a store = \"string  \\<Rightarrow> 'a\""], ["", "lemma t_p2r [simp]: \"rel_dioid_tests.t \\<lceil>P\\<rceil> = \\<lceil>P\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_dioid_tests.t \\<lceil>P\\<rceil> = \\<lceil>P\\<rceil>", "by (auto simp: p2r_def)"], ["", "lemma impl_prop [simp]: \"\\<lceil>P\\<rceil> \\<subseteq> \\<lceil>Q\\<rceil> \\<longleftrightarrow> (\\<forall>s. P s \\<longrightarrow>  Q s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lceil>P\\<rceil> \\<subseteq> \\<lceil>Q\\<rceil>) =\n    (\\<forall>s. P s \\<longrightarrow> Q s)", "by (auto simp: p2r_def)"], ["", "lemma Id_simp [simp]: \"Id \\<inter> (- Id \\<union> X) = Id \\<inter> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Id \\<inter> (- Id \\<union> X) = Id \\<inter> X", "by auto"], ["", "lemma Id_p2r [simp]: \"Id \\<inter> \\<lceil>P\\<rceil> = \\<lceil>P\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Id \\<inter> \\<lceil>P\\<rceil> = \\<lceil>P\\<rceil>", "by (auto simp: Id_def p2r_def)"], ["", "lemma Id_p2r_simp [simp]: \"Id \\<inter> (- Id \\<union> \\<lceil>P\\<rceil>) = \\<lceil>P\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Id \\<inter> (- Id \\<union> \\<lceil>P\\<rceil>) = \\<lceil>P\\<rceil>", "by simp"], ["", "text \\<open>Next we derive the assignment command and assignment rules.\\<close>"], ["", "definition gets :: \"string \\<Rightarrow> ('a store \\<Rightarrow> 'a) \\<Rightarrow> 'a store rel\" (\"_ ::= _\" [70, 65] 61) where \n  \"v ::= e = {(s,s (v := e s)) |s. True}\""], ["", "lemma H_assign_prop: \"\\<lceil>\\<lambda>s. P (s (v := e s))\\<rceil> ; (v ::= e) = (v ::= e) ; \\<lceil>P\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lceil>\\<lambda>s. P (s(v := e s))\\<rceil> ; (v ::= e) =\n    (v ::= e) ; \\<lceil>P\\<rceil>", "by (auto simp: p2r_def gets_def)"], ["", "lemma H_assign: \"rel_kat.H \\<lceil>\\<lambda>s. P (s (v := e s))\\<rceil> (v ::= e) \\<lceil>P\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_kat.H \\<lceil>\\<lambda>s. P (s(v := e s))\\<rceil> (v ::= e)\n     \\<lceil>P\\<rceil>", "by (auto simp add: rel_kat.H_def gets_def p2r_def)"], ["", "lemma H_assign_var: \"(\\<forall>s. P s \\<longrightarrow> Q (s (v := e s))) \\<Longrightarrow> rel_kat.H \\<lceil>P\\<rceil> (v ::= e) \\<lceil>Q\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s. P s \\<longrightarrow> Q (s(v := e s)) \\<Longrightarrow>\n    rel_kat.H \\<lceil>P\\<rceil> (v ::= e) \\<lceil>Q\\<rceil>", "by (auto simp: p2r_def gets_def rel_kat.H_def)"], ["", "lemma H_assign_iff [simp]: \"rel_kat.H \\<lceil>P\\<rceil> (v ::= e) \\<lceil>Q\\<rceil> \\<longleftrightarrow> (\\<forall>s. P s \\<longrightarrow> Q (s (v := e s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_kat.H \\<lceil>P\\<rceil> (v ::= e) \\<lceil>Q\\<rceil> =\n    (\\<forall>s. P s \\<longrightarrow> Q (s(v := e s)))", "by (auto simp: p2r_def gets_def rel_kat.H_def)"], ["", "lemma H_assign_floyd: \" rel_kat.H \\<lceil>P\\<rceil> (v ::= e) \\<lceil>\\<lambda>s. \\<exists>w. s v = e (s(v := w)) \\<and> P (s(v := w))\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_kat.H \\<lceil>P\\<rceil> (v ::= e)\n     \\<lceil>\\<lambda>s.\n                \\<exists>w. s v = e (s(v := w)) \\<and> P (s(v := w))\\<rceil>", "by (rule H_assign_var, metis fun_upd_same fun_upd_triv fun_upd_upd)"], ["", "subsubsection \\<open>Simplified Hoare Rules\\<close>"], ["", "lemma sH_cons_1: \"\\<forall>s. P s \\<longrightarrow> P' s \\<Longrightarrow> rel_kat.H \\<lceil>P'\\<rceil> X \\<lceil>Q\\<rceil> \\<Longrightarrow> rel_kat.H \\<lceil>P\\<rceil> X \\<lceil>Q\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>s. P s \\<longrightarrow> P' s;\n     rel_kat.H \\<lceil>P'\\<rceil> X \\<lceil>Q\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> rel_kat.H \\<lceil>P\\<rceil> X \\<lceil>Q\\<rceil>", "by (rule rel_kat.H_cons_1, auto simp only: p2r_def)"], ["", "lemma sH_cons_2: \"\\<forall>s. Q' s \\<longrightarrow> Q s \\<Longrightarrow> rel_kat.H \\<lceil>P\\<rceil> X \\<lceil>Q'\\<rceil> \\<Longrightarrow> rel_kat.H \\<lceil>P\\<rceil> X \\<lceil>Q\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>s. Q' s \\<longrightarrow> Q s;\n     rel_kat.H \\<lceil>P\\<rceil> X \\<lceil>Q'\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> rel_kat.H \\<lceil>P\\<rceil> X \\<lceil>Q\\<rceil>", "by (rule rel_kat.H_cons_2, auto simp only: p2r_def)"], ["", "lemma sH_cons: \"\\<forall>s. P s \\<longrightarrow> P' s \\<Longrightarrow> \\<forall>s. Q' s \\<longrightarrow> Q s \\<Longrightarrow> rel_kat.H \\<lceil>P'\\<rceil> X \\<lceil>Q'\\<rceil> \\<Longrightarrow> rel_kat.H \\<lceil>P\\<rceil> X \\<lceil>Q\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>s. P s \\<longrightarrow> P' s;\n     \\<forall>s. Q' s \\<longrightarrow> Q s;\n     rel_kat.H \\<lceil>P'\\<rceil> X \\<lceil>Q'\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> rel_kat.H \\<lceil>P\\<rceil> X \\<lceil>Q\\<rceil>", "by (simp add: sH_cons_1 sH_cons_2)"], ["", "lemma sH_cond: \"rel_kat.H \\<lceil>P \\<sqinter> T\\<rceil> X \\<lceil>Q\\<rceil> \\<Longrightarrow> rel_kat.H \\<lceil>P \\<sqinter> - T\\<rceil> Y \\<lceil>Q\\<rceil>  \\<Longrightarrow> rel_kat.H \\<lceil>P\\<rceil> (rel_kat.ifthenelse \\<lceil>T\\<rceil> X Y) \\<lceil>Q\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rel_kat.H \\<lceil>P \\<sqinter> T\\<rceil> X \\<lceil>Q\\<rceil>;\n     rel_kat.H \\<lceil>P \\<sqinter> - T\\<rceil> Y \\<lceil>Q\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> rel_kat.H \\<lceil>P\\<rceil>\n                       (rel_kat.ifthenelse \\<lceil>T\\<rceil> X Y)\n                       \\<lceil>Q\\<rceil>", "by (rule rel_kat.H_cond, auto simp add: rel_kat.H_def p2r_def, blast+)"], ["", "lemma sH_cond_iff: \"rel_kat.H \\<lceil>P\\<rceil> (rel_kat.ifthenelse \\<lceil>T\\<rceil> X Y) \\<lceil>Q\\<rceil> \\<longleftrightarrow> (rel_kat.H \\<lceil>P \\<sqinter> T\\<rceil> X \\<lceil>Q\\<rceil> \\<and> rel_kat.H \\<lceil>P \\<sqinter> - T\\<rceil> Y \\<lceil>Q\\<rceil>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_kat.H \\<lceil>P\\<rceil> (rel_kat.ifthenelse \\<lceil>T\\<rceil> X Y)\n     \\<lceil>Q\\<rceil> =\n    (rel_kat.H \\<lceil>P \\<sqinter> T\\<rceil> X \\<lceil>Q\\<rceil> \\<and>\n     rel_kat.H \\<lceil>P \\<sqinter> - T\\<rceil> Y \\<lceil>Q\\<rceil>)", "by (simp add: rel_kat.H_cond_iff)"], ["", "lemma sH_while_inv: \"\\<forall>s. P s \\<longrightarrow> I s \\<Longrightarrow> \\<forall>s. I s \\<and> \\<not> R s \\<longrightarrow> Q s \\<Longrightarrow> rel_kat.H \\<lceil>I \\<sqinter> R\\<rceil> X \\<lceil>I\\<rceil> \n                     \\<Longrightarrow> rel_kat.H \\<lceil>P\\<rceil> (rel_kat.while_inv \\<lceil>R\\<rceil> \\<lceil>I\\<rceil> X) \\<lceil>Q\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>s. P s \\<longrightarrow> I s;\n     \\<forall>s. I s \\<and> \\<not> R s \\<longrightarrow> Q s;\n     rel_kat.H \\<lceil>I \\<sqinter> R\\<rceil> X \\<lceil>I\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> rel_kat.H \\<lceil>P\\<rceil>\n                       (rel_kat.while_inv \\<lceil>R\\<rceil>\n                         \\<lceil>I\\<rceil> X)\n                       \\<lceil>Q\\<rceil>", "by (rule rel_kat.H_while_inv, auto simp: p2r_def rel_kat.H_def, fastforce)"], ["", "lemma sH_H: \"rel_kat.H \\<lceil>P\\<rceil> X \\<lceil>Q\\<rceil> \\<longleftrightarrow> (\\<forall>s s'. P s \\<longrightarrow> (s,s') \\<in> X \\<longrightarrow> Q s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_kat.H \\<lceil>P\\<rceil> X \\<lceil>Q\\<rceil> =\n    (\\<forall>s s'.\n        P s \\<longrightarrow> (s, s') \\<in> X \\<longrightarrow> Q s')", "by (simp add: rel_kat.H_def, auto simp add: p2r_def)"], ["", "text \\<open>Finally we provide additional syntax for specifications and commands.\\<close>"], ["", "abbreviation H_sugar :: \"'a pred \\<Rightarrow> 'a rel \\<Rightarrow> 'a pred \\<Rightarrow> bool\" (\"PRE _ _ POST _\" [64,64,64] 63) where\n  \"PRE P X POST Q \\<equiv> rel_kat.H \\<lceil>P\\<rceil> X \\<lceil>Q\\<rceil>\""], ["", "abbreviation if_then_else_sugar :: \"'a pred \\<Rightarrow> 'a rel \\<Rightarrow> 'a rel \\<Rightarrow> 'a rel\" (\"IF _ THEN _ ELSE _ FI\" [64,64,64] 63) where\n  \"IF P THEN X ELSE Y FI \\<equiv> rel_kat.ifthenelse \\<lceil>P\\<rceil> X Y\""], ["", "abbreviation while_sugar :: \"'a pred \\<Rightarrow> 'a rel \\<Rightarrow> 'a rel\" (\"WHILE _ DO _ OD\" [64,64] 63) where\n  \"WHILE P  DO X OD \\<equiv> rel_kat.while \\<lceil>P\\<rceil> X\""], ["", "abbreviation while_inv_sugar :: \"'a pred \\<Rightarrow> 'a pred \\<Rightarrow> 'a rel \\<Rightarrow> 'a rel\" (\"WHILE _ INV _ DO _ OD\" [64,64,64] 63) where\n  \"WHILE P INV I DO X OD \\<equiv> rel_kat.while_inv \\<lceil>P\\<rceil> \\<lceil>I\\<rceil> X\""], ["", "lemma H_cond_iff2[simp]: \"PRE p (IF r THEN x ELSE y FI) POST q \\<longleftrightarrow> (PRE (p \\<sqinter> r) x POST q) \\<and> (PRE (p \\<sqinter> - r) y POST q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. PRE p (IF r THEN x ELSE y FI) POST q =\n    (PRE p \\<sqinter> r x POST q \\<and> PRE p \\<sqinter> - r y POST q)", "by (simp add: rel_kat.H_cond_iff)"], ["", "end"]]}