{"file_name": "/home/qj213/afp-2021-10-22/thys/Algebraic_VCs/AVC_KAD/VC_KAD.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Algebraic_VCs", "problem_names": ["lemma fbox_shunt: \"d p \\<cdot> d q \\<le> |x] t \\<longleftrightarrow> d p \\<le> ad q + |x] t\"", "lemma fbox_export1: \"ad p + |x] q = |d p \\<cdot> x] q\"", "lemma fbox_export2: \"|x] p \\<le> |x \\<cdot> ad q] (d p \\<cdot> ad q)\"", "lemma fbox_export3: \"|x \\<cdot> ad p] q = |x] (d p + d q)\"", "lemma fbox_seq [simp]: \"|x \\<cdot> y] q = |x] |y] q\"", "lemma fbox_seq_var: \"p' \\<le> |y] q \\<Longrightarrow> p \\<le> |x] p' \\<Longrightarrow> p \\<le> |x \\<cdot> y] q\"", "lemma fbox_cond_var [simp]: \"|if p then x else y fi] q = (ad p + |x] q) \\<cdot> (d p + |y] q)\"", "lemma fbox_cond_aux1 [simp]: \"d p \\<cdot> |if p then x else y fi] q = d p \\<cdot> |x] q\"", "lemma fbox_cond_aux2 [simp]: \"ad p \\<cdot> |if p then x else y fi] q = ad p \\<cdot> |y] q\"", "lemma fbox_cond [simp]: \"|if p then x else y fi] q = (d p \\<cdot> |x] q) + (ad p \\<cdot> |y] q)\"", "lemma fbox_cond_var2 [simp]: \"|if p then x else y fi] q = if p then |x] q else |y] q fi\"", "lemma fbox_while_unfold: \"|while t do x od] p = (d t + d p) \\<cdot> (ad t + |x] |while t do x od] p)\"", "lemma fbox_while_var1: \"d t \\<cdot> |while t do x od] p = d t \\<cdot> |x] |while t do x od] p\"", "lemma fbox_while_var2: \"ad t \\<cdot> |while t do x od] p \\<le> d p\"", "lemma fbox_while: \"d p \\<cdot> d t \\<le> |x] p \\<Longrightarrow> d p \\<le> |while t do x od] (d p \\<cdot> ad t)\"", "lemma fbox_while_var: \"d p = |d t \\<cdot> x] p \\<Longrightarrow> d p \\<le> |while t do x od] (d p \\<cdot> ad t)\"", "lemma fbox_whilei: \"d p \\<le> d i \\<Longrightarrow> d i \\<cdot> ad t \\<le> d q \\<Longrightarrow> d i \\<cdot> d t \\<le> |x] i \\<Longrightarrow> d p \\<le> |while t inv i do x od] q\"", "lemma fbox_whilei_break: \"d p \\<le> |y] i \\<Longrightarrow> d i \\<cdot> ad t \\<le> d q \\<Longrightarrow> d i \\<cdot> d t \\<le> |x] i \\<Longrightarrow> d p \\<le> |y \\<cdot> (while t inv i do x od)] q\"", "lemma fbox_frame: \"d p \\<cdot> x \\<le> x \\<cdot> d p \\<Longrightarrow> d q \\<le> |x] t \\<Longrightarrow> d p \\<cdot> d q \\<le> |x] (d p \\<cdot> d t)\"", "lemma fbox_frame_var: \"d p \\<le> |x] p \\<Longrightarrow> d q \\<le> |x] t \\<Longrightarrow> d p \\<cdot> d q \\<le> |x] (d p \\<cdot> d t)\"", "lemma assign_prop: \"\\<lceil>\\<lambda>s. P (s (v := e s))\\<rceil> ; (v ::= e) = (v ::= e) ; \\<lceil>P\\<rceil>\"", "lemma wp_assign [simp]: \"wp (v ::= e) \\<lceil>Q\\<rceil> = \\<lceil>\\<lambda>s. Q (s (v := e s))\\<rceil>\"", "lemma wp_assign_var [simp]: \"\\<lfloor>wp (v ::= e) \\<lceil>Q\\<rceil>\\<rfloor> = (\\<lambda>s. Q (s (v := e s)))\"", "lemma wp_assign_det: \"wp (v ::= e) \\<lceil>Q\\<rceil> = relfdia (v ::= e) \\<lceil>Q\\<rceil>\"", "lemma d_p2r [simp]: \"rdom \\<lceil>P\\<rceil> = \\<lceil>P\\<rceil>\"", "lemma p2r_conj_hom_var_symm [simp]: \"\\<lceil>P\\<rceil> ; \\<lceil>Q\\<rceil> = \\<lceil>P \\<sqinter> Q\\<rceil>\"", "lemma p2r_neg_hom [simp]: \"rel_ad \\<lceil>P\\<rceil> = \\<lceil>- P\\<rceil>\"", "lemma wp_trafo: \"\\<lfloor>wp X \\<lceil>Q\\<rceil>\\<rfloor> = (\\<lambda>s. \\<forall>s'. (s,s') \\<in> X \\<longrightarrow> Q s')\"", "lemma wp_trafo_var: \"\\<lfloor>wp X \\<lceil>Q\\<rceil>\\<rfloor> s = (\\<forall>s'. (s,s') \\<in> X \\<longrightarrow> Q s')\"", "lemma wp_simp: \"rdom \\<lceil>\\<lfloor>wp X Q\\<rfloor>\\<rceil> = wp X Q\"", "lemma wp_simp_var [simp]: \"wp \\<lceil>P\\<rceil> \\<lceil>Q\\<rceil> = \\<lceil>- P \\<squnion> Q\\<rceil>\"", "lemma impl_prop [simp]: \"\\<lceil>P\\<rceil> \\<subseteq> \\<lceil>Q\\<rceil> \\<longleftrightarrow> (\\<forall>s. P s \\<longrightarrow>  Q s)\"", "lemma p2r_eq_prop [simp]: \"\\<lceil>P\\<rceil> = \\<lceil>Q\\<rceil> \\<longleftrightarrow> (\\<forall>s. P s \\<longleftrightarrow>  Q s)\"", "lemma impl_prop_var [simp]: \"rdom \\<lceil>P\\<rceil> \\<subseteq> rdom \\<lceil>Q\\<rceil> \\<longleftrightarrow> (\\<forall>s. P s \\<longrightarrow>  Q s)\"", "lemma p2r_eq_prop_var [simp]: \"rdom \\<lceil>P\\<rceil> = rdom \\<lceil>Q\\<rceil> \\<longleftrightarrow> (\\<forall>s. P s \\<longleftrightarrow>  Q s)\"", "lemma wp_whilei: \"(\\<forall>s. P s \\<longrightarrow> I s) \\<Longrightarrow> (\\<forall>s. (I \\<sqinter> -T) s \\<longrightarrow> Q s) \\<Longrightarrow> (\\<forall>s. (I \\<sqinter> T) s \\<longrightarrow> \\<lfloor>wp X \\<lceil>I\\<rceil>\\<rfloor> s) \n                  \\<Longrightarrow> (\\<forall>s. P s \\<longrightarrow> \\<lfloor>wp (WHILE T INV I DO X OD) \\<lceil>Q\\<rceil>\\<rfloor> s)\""], "translations": [["", "lemma fbox_shunt: \"d p \\<cdot> d q \\<le> |x] t \\<longleftrightarrow> d p \\<le> ad q + |x] t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (d p \\<cdot> d q \\<le>  |x] t) = (d p \\<le> ad q +  |x] t)", "by (metis a_6 a_antitone' a_loc add_commute addual.ars_r_def am_d_def da_shunt2 fbox_def)"], ["", "subsubsection \\<open>Syntax for Conditionals and Loops\\<close>"], ["", "definition cond :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" (\"if _ then _ else _ fi\" [64,64,64] 63) where\n  \"if p then x else y fi = d p \\<cdot> x + ad p \\<cdot> y\""], ["", "definition while :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" (\"while _ do _ od\" [64,64] 63) where\n  \"while p do x od = (d p \\<cdot> x)\\<^sup>\\<star> \\<cdot> ad p\""], ["", "definition whilei :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" (\"while _ inv _ do _ od\" [64,64,64] 63) where\n  \"while p inv i do x od = while p do x od\""], ["", "subsubsection \\<open>Basic Weakest (Liberal) Precondition Calculus\\<close>"], ["", "text \\<open>In the setting of Kleene algebra with domain, the wlp operator is the forward modal box operator \nof antidomain Kleene algebra.\\<close>"], ["", "lemma fbox_export1: \"ad p + |x] q = |d p \\<cdot> x] q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad p +  |x] q =  |d p \\<cdot> x] q", "using a_d_add_closure addual.ars_r_def fbox_def fbox_mult"], ["proof (prove)\nusing this:\n  d (ad ?x + ad ?y) = ad ?x + ad ?y\n  d ?x = ad (ad ?x)\n   |?x] ?y = ad (?x \\<cdot> ad ?y)\n   |?x \\<cdot> ?y] ?z =  |?x]  |?y] ?z\n\ngoal (1 subgoal):\n 1. ad p +  |x] q =  |d p \\<cdot> x] q", "by auto"], ["", "lemma fbox_export2: \"|x] p \\<le> |x \\<cdot> ad q] (d p \\<cdot> ad q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x] p \\<le>  |x \\<cdot> ad q] (d p \\<cdot> ad q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1.  |x] p \\<le>  |x \\<cdot> ad q] (d p \\<cdot> ad q)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1.  |x] p \\<le>  |x \\<cdot> ad q] (d p \\<cdot> ad q)", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1.  |x] p \\<le>  |x \\<cdot> ad q] (d p \\<cdot> ad q)", "have \"d t \\<cdot> x \\<le> x \\<cdot> d p \\<Longrightarrow> d t \\<cdot> x \\<cdot> ad q \\<le> x \\<cdot> ad q \\<cdot> d p \\<cdot> ad q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d t \\<cdot> x \\<le> x \\<cdot> d p \\<Longrightarrow>\n    d t \\<cdot> x \\<cdot> ad q \\<le> x \\<cdot> ad q \\<cdot> d p \\<cdot> ad q", "by (metis (full_types) a_comm_var a_mult_idem ads_d_def am2 ds.ddual.mult_assoc phl_export2)"], ["proof (state)\nthis:\n  d t \\<cdot> x \\<le> x \\<cdot> d p \\<Longrightarrow>\n  d t \\<cdot> x \\<cdot> ad q \\<le> x \\<cdot> ad q \\<cdot> d p \\<cdot> ad q\n\ngoal (1 subgoal):\n 1.  |x] p \\<le>  |x \\<cdot> ad q] (d p \\<cdot> ad q)", "hence \"d t \\<le> |x] p \\<Longrightarrow> d t \\<le> |x \\<cdot> ad q] (d p \\<cdot> ad q)\""], ["proof (prove)\nusing this:\n  d t \\<cdot> x \\<le> x \\<cdot> d p \\<Longrightarrow>\n  d t \\<cdot> x \\<cdot> ad q \\<le> x \\<cdot> ad q \\<cdot> d p \\<cdot> ad q\n\ngoal (1 subgoal):\n 1. d t \\<le>  |x] p \\<Longrightarrow>\n    d t \\<le>  |x \\<cdot> ad q] (d p \\<cdot> ad q)", "by (metis a_closure' addual.ars_r_def ans_d_def dka.dsg3 ds.ddual.mult_assoc fbox_def fbox_demodalisation3)"], ["proof (state)\nthis:\n  d t \\<le>  |x] p \\<Longrightarrow>\n  d t \\<le>  |x \\<cdot> ad q] (d p \\<cdot> ad q)\n\ngoal (1 subgoal):\n 1.  |x] p \\<le>  |x \\<cdot> ad q] (d p \\<cdot> ad q)", "}"], ["proof (state)\nthis:\n  d ?t3 \\<le>  |x] p \\<Longrightarrow>\n  d ?t3 \\<le>  |x \\<cdot> ad q] (d p \\<cdot> ad q)\n\ngoal (1 subgoal):\n 1.  |x] p \\<le>  |x \\<cdot> ad q] (d p \\<cdot> ad q)", "thus ?thesis"], ["proof (prove)\nusing this:\n  d ?t3 \\<le>  |x] p \\<Longrightarrow>\n  d ?t3 \\<le>  |x \\<cdot> ad q] (d p \\<cdot> ad q)\n\ngoal (1 subgoal):\n 1.  |x] p \\<le>  |x \\<cdot> ad q] (d p \\<cdot> ad q)", "by (metis a_closure' addual.ars_r_def ans_d_def fbox_def order_refl)"], ["proof (state)\nthis:\n   |x] p \\<le>  |x \\<cdot> ad q] (d p \\<cdot> ad q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fbox_export3: \"|x \\<cdot> ad p] q = |x] (d p + d q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x \\<cdot> ad p] q =  |x] (d p + d q)", "using a_de_morgan_var_3 ds.ddual.mult_assoc fbox_def"], ["proof (prove)\nusing this:\n  ad (d ?x + d ?y) = ad ?x \\<cdot> ad ?y\n  ?c \\<cdot> (?b \\<cdot> ?a) = ?c \\<cdot> ?b \\<cdot> ?a\n   |?x] ?y = ad (?x \\<cdot> ad ?y)\n\ngoal (1 subgoal):\n 1.  |x \\<cdot> ad p] q =  |x] (d p + d q)", "by auto"], ["", "lemma fbox_seq [simp]: \"|x \\<cdot> y] q = |x] |y] q\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |x \\<cdot> y] q =  |x]  |y] q", "by (simp add: fbox_mult)"], ["", "lemma fbox_seq_var: \"p' \\<le> |y] q \\<Longrightarrow> p \\<le> |x] p' \\<Longrightarrow> p \\<le> |x \\<cdot> y] q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p' \\<le>  |y] q; p \\<le>  |x] p'\\<rbrakk>\n    \\<Longrightarrow> p \\<le>  |x \\<cdot> y] q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>p' \\<le>  |y] q; p \\<le>  |x] p'\\<rbrakk>\n    \\<Longrightarrow> p \\<le>  |x \\<cdot> y] q", "assume h1: \"p \\<le> |x] p'\" and h2: \"p' \\<le> |y] q\""], ["proof (state)\nthis:\n  p \\<le>  |x] p'\n  p' \\<le>  |y] q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p' \\<le>  |y] q; p \\<le>  |x] p'\\<rbrakk>\n    \\<Longrightarrow> p \\<le>  |x \\<cdot> y] q", "hence \"|x] p' \\<le> |x] |y] q\""], ["proof (prove)\nusing this:\n  p \\<le>  |x] p'\n  p' \\<le>  |y] q\n\ngoal (1 subgoal):\n 1.  |x] p' \\<le>  |x]  |y] q", "by (simp add: dka.dom_iso fbox_iso)"], ["proof (state)\nthis:\n   |x] p' \\<le>  |x]  |y] q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p' \\<le>  |y] q; p \\<le>  |x] p'\\<rbrakk>\n    \\<Longrightarrow> p \\<le>  |x \\<cdot> y] q", "thus ?thesis"], ["proof (prove)\nusing this:\n   |x] p' \\<le>  |x]  |y] q\n\ngoal (1 subgoal):\n 1. p \\<le>  |x \\<cdot> y] q", "by (metis h1 dual_order.trans fbox_seq)"], ["proof (state)\nthis:\n  p \\<le>  |x \\<cdot> y] q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fbox_cond_var [simp]: \"|if p then x else y fi] q = (ad p + |x] q) \\<cdot> (d p + |y] q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |if p then x else y fi] q = (ad p +  |x] q) \\<cdot> (d p +  |y] q)", "using cond_def a_closure' ads_d_def ans_d_def fbox_add2 fbox_export1"], ["proof (prove)\nusing this:\n  if ?p then ?x else ?y fi = d ?p \\<cdot> ?x + ad ?p \\<cdot> ?y\n  ans_d (ad ?x) = ad ?x\n  d ?x = ad (ad ?x)\n  ans_d ?x = ad (ad ?x)\n   |?x + ?y] ?z =  |?x] ?z \\<cdot>  |?y] ?z\n  ad ?p +  |?x] ?q =  |d ?p \\<cdot> ?x] ?q\n\ngoal (1 subgoal):\n 1.  |if p then x else y fi] q = (ad p +  |x] q) \\<cdot> (d p +  |y] q)", "by auto"], ["", "lemma fbox_cond_aux1 [simp]: \"d p \\<cdot> |if p then x else y fi] q = d p \\<cdot> |x] q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d p \\<cdot>  |if p then x else y fi] q = d p \\<cdot>  |x] q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d p \\<cdot>  |if p then x else y fi] q = d p \\<cdot>  |x] q", "have \"d p \\<cdot> |if p then x else y fi] q = d p \\<cdot> |x] q \\<cdot> (d p + d ( |y] q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d p \\<cdot>  |if p then x else y fi] q =\n    d p \\<cdot>  |x] q \\<cdot> (d p + d ( |y] q))", "using a_d_add_closure addual.ars_r_def ds.ddual.mult_assoc fbox_def fbox_cond_var"], ["proof (prove)\nusing this:\n  d (ad ?x + ad ?y) = ad ?x + ad ?y\n  d ?x = ad (ad ?x)\n  ?c \\<cdot> (?b \\<cdot> ?a) = ?c \\<cdot> ?b \\<cdot> ?a\n   |?x] ?y = ad (?x \\<cdot> ad ?y)\n   |if ?p then ?x else ?y fi] ?q =\n  (ad ?p +  |?x] ?q) \\<cdot> (d ?p +  |?y] ?q)\n\ngoal (1 subgoal):\n 1. d p \\<cdot>  |if p then x else y fi] q =\n    d p \\<cdot>  |x] q \\<cdot> (d p + d ( |y] q))", "by auto"], ["proof (state)\nthis:\n  d p \\<cdot>  |if p then x else y fi] q =\n  d p \\<cdot>  |x] q \\<cdot> (d p + d ( |y] q))\n\ngoal (1 subgoal):\n 1. d p \\<cdot>  |if p then x else y fi] q = d p \\<cdot>  |x] q", "thus ?thesis"], ["proof (prove)\nusing this:\n  d p \\<cdot>  |if p then x else y fi] q =\n  d p \\<cdot>  |x] q \\<cdot> (d p + d ( |y] q))\n\ngoal (1 subgoal):\n 1. d p \\<cdot>  |if p then x else y fi] q = d p \\<cdot>  |x] q", "by (metis addual.ars_r_def am2 dka.dns5 ds.ddual.mult_assoc fbox_def)"], ["proof (state)\nthis:\n  d p \\<cdot>  |if p then x else y fi] q = d p \\<cdot>  |x] q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fbox_cond_aux2 [simp]: \"ad p \\<cdot> |if p then x else y fi] q = ad p \\<cdot> |y] q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad p \\<cdot>  |if p then x else y fi] q = ad p \\<cdot>  |y] q", "by (metis cond_def a_closure' add_commute addual.ars_r_def ans_d_def fbox_cond_aux1)"], ["", "lemma fbox_cond [simp]: \"|if p then x else y fi] q = (d p \\<cdot> |x] q) + (ad p \\<cdot> |y] q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |if p then x else y fi] q = d p \\<cdot>  |x] q + ad p \\<cdot>  |y] q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1.  |if p then x else y fi] q = d p \\<cdot>  |x] q + ad p \\<cdot>  |y] q", "have \"|if p then x else y fi] q = (d p + ad p) \\<cdot> |if p then x else y fi] q\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |if p then x else y fi] q =\n    (d p + ad p) \\<cdot>  |if p then x else y fi] q", "by (simp add: addual.ars_r_def)"], ["proof (state)\nthis:\n   |if p then x else y fi] q =\n  (d p + ad p) \\<cdot>  |if p then x else y fi] q\n\ngoal (1 subgoal):\n 1.  |if p then x else y fi] q = d p \\<cdot>  |x] q + ad p \\<cdot>  |y] q", "thus ?thesis"], ["proof (prove)\nusing this:\n   |if p then x else y fi] q =\n  (d p + ad p) \\<cdot>  |if p then x else y fi] q\n\ngoal (1 subgoal):\n 1.  |if p then x else y fi] q = d p \\<cdot>  |x] q + ad p \\<cdot>  |y] q", "by (metis  distrib_right' fbox_cond_aux1 fbox_cond_aux2)"], ["proof (state)\nthis:\n   |if p then x else y fi] q = d p \\<cdot>  |x] q + ad p \\<cdot>  |y] q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fbox_cond_var2 [simp]: \"|if p then x else y fi] q = if p then |x] q else |y] q fi\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |if p then x else y fi] q = if p then  |x] q else  |y] q fi", "using cond_def fbox_cond"], ["proof (prove)\nusing this:\n  if ?p then ?x else ?y fi = d ?p \\<cdot> ?x + ad ?p \\<cdot> ?y\n   |if ?p then ?x else ?y fi] ?q =\n  d ?p \\<cdot>  |?x] ?q + ad ?p \\<cdot>  |?y] ?q\n\ngoal (1 subgoal):\n 1.  |if p then x else y fi] q = if p then  |x] q else  |y] q fi", "by auto"], ["", "lemma fbox_while_unfold: \"|while t do x od] p = (d t + d p) \\<cdot> (ad t + |x] |while t do x od] p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |while t do x od] p =\n    (d t + d p) \\<cdot> (ad t +  |x]  |while t do x od] p)", "by (metis fbox_export1 fbox_export3 dka.dom_add_closed fbox_star_unfold_var while_def)"], ["", "lemma fbox_while_var1: \"d t \\<cdot> |while t do x od] p = d t \\<cdot> |x] |while t do x od] p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d t \\<cdot>  |while t do x od] p = d t \\<cdot>  |x]  |while t do x od] p", "by (metis fbox_while_unfold a_mult_add ads_d_def dka.dns5 ds.ddual.mult_assoc join.sup_commute)"], ["", "lemma fbox_while_var2: \"ad t \\<cdot> |while t do x od] p \\<le> d p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad t \\<cdot>  |while t do x od] p \\<le> d p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ad t \\<cdot>  |while t do x od] p \\<le> d p", "have \"ad t \\<cdot> |while t do x od] p = ad t \\<cdot> (d t + d p) \\<cdot> (ad t + |x] |while t do x od] p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad t \\<cdot>  |while t do x od] p =\n    ad t \\<cdot> (d t + d p) \\<cdot> (ad t +  |x]  |while t do x od] p)", "by (metis fbox_while_unfold ds.ddual.mult_assoc)"], ["proof (state)\nthis:\n  ad t \\<cdot>  |while t do x od] p =\n  ad t \\<cdot> (d t + d p) \\<cdot> (ad t +  |x]  |while t do x od] p)\n\ngoal (1 subgoal):\n 1. ad t \\<cdot>  |while t do x od] p \\<le> d p", "also"], ["proof (state)\nthis:\n  ad t \\<cdot>  |while t do x od] p =\n  ad t \\<cdot> (d t + d p) \\<cdot> (ad t +  |x]  |while t do x od] p)\n\ngoal (1 subgoal):\n 1. ad t \\<cdot>  |while t do x od] p \\<le> d p", "have \"... =  ad t \\<cdot> d p \\<cdot> (ad t + |x] |while t do x od] p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad t \\<cdot> (d t + d p) \\<cdot> (ad t +  |x]  |while t do x od] p) =\n    ad t \\<cdot> d p \\<cdot> (ad t +  |x]  |while t do x od] p)", "by (metis a_de_morgan_var_3 addual.ars_r_def dka.dom_add_closed s4)"], ["proof (state)\nthis:\n  ad t \\<cdot> (d t + d p) \\<cdot> (ad t +  |x]  |while t do x od] p) =\n  ad t \\<cdot> d p \\<cdot> (ad t +  |x]  |while t do x od] p)\n\ngoal (1 subgoal):\n 1. ad t \\<cdot>  |while t do x od] p \\<le> d p", "also"], ["proof (state)\nthis:\n  ad t \\<cdot> (d t + d p) \\<cdot> (ad t +  |x]  |while t do x od] p) =\n  ad t \\<cdot> d p \\<cdot> (ad t +  |x]  |while t do x od] p)\n\ngoal (1 subgoal):\n 1. ad t \\<cdot>  |while t do x od] p \\<le> d p", "have \"... \\<le> d p \\<cdot> (ad t + |x] |while t do x od] p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ad t \\<cdot> d p \\<cdot> (ad t +  |x]  |while t do x od] p)\n    \\<le> d p \\<cdot> (ad t +  |x]  |while t do x od] p)", "using a_subid_aux1' mult_isor"], ["proof (prove)\nusing this:\n  ad ?x \\<cdot> ?y \\<le> ?y\n  ?x \\<le> ?y \\<Longrightarrow> ?x \\<cdot> ?z \\<le> ?y \\<cdot> ?z\n\ngoal (1 subgoal):\n 1. ad t \\<cdot> d p \\<cdot> (ad t +  |x]  |while t do x od] p)\n    \\<le> d p \\<cdot> (ad t +  |x]  |while t do x od] p)", "by blast"], ["proof (state)\nthis:\n  ad t \\<cdot> d p \\<cdot> (ad t +  |x]  |while t do x od] p)\n  \\<le> d p \\<cdot> (ad t +  |x]  |while t do x od] p)\n\ngoal (1 subgoal):\n 1. ad t \\<cdot>  |while t do x od] p \\<le> d p", "finally"], ["proof (chain)\npicking this:\n  ad t \\<cdot>  |while t do x od] p\n  \\<le> d p \\<cdot> (ad t +  |x]  |while t do x od] p)", "show ?thesis"], ["proof (prove)\nusing this:\n  ad t \\<cdot>  |while t do x od] p\n  \\<le> d p \\<cdot> (ad t +  |x]  |while t do x od] p)\n\ngoal (1 subgoal):\n 1. ad t \\<cdot>  |while t do x od] p \\<le> d p", "by (metis a_de_morgan_var_3 a_mult_idem addual.ars_r_def ans4 dka.dsr5 dpdz.domain_1'' dual_order.trans fbox_def)"], ["proof (state)\nthis:\n  ad t \\<cdot>  |while t do x od] p \\<le> d p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fbox_while: \"d p \\<cdot> d t \\<le> |x] p \\<Longrightarrow> d p \\<le> |while t do x od] (d p \\<cdot> ad t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d p \\<cdot> d t \\<le>  |x] p \\<Longrightarrow>\n    d p \\<le>  |while t do x od] (d p \\<cdot> ad t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. d p \\<cdot> d t \\<le>  |x] p \\<Longrightarrow>\n    d p \\<le>  |while t do x od] (d p \\<cdot> ad t)", "assume \"d p \\<cdot> d t \\<le> |x] p\""], ["proof (state)\nthis:\n  d p \\<cdot> d t \\<le>  |x] p\n\ngoal (1 subgoal):\n 1. d p \\<cdot> d t \\<le>  |x] p \\<Longrightarrow>\n    d p \\<le>  |while t do x od] (d p \\<cdot> ad t)", "hence \"d p \\<le> |d t \\<cdot> x] p\""], ["proof (prove)\nusing this:\n  d p \\<cdot> d t \\<le>  |x] p\n\ngoal (1 subgoal):\n 1. d p \\<le>  |d t \\<cdot> x] p", "by (simp add: fbox_export1 fbox_shunt)"], ["proof (state)\nthis:\n  d p \\<le>  |d t \\<cdot> x] p\n\ngoal (1 subgoal):\n 1. d p \\<cdot> d t \\<le>  |x] p \\<Longrightarrow>\n    d p \\<le>  |while t do x od] (d p \\<cdot> ad t)", "hence \"d p \\<le> |(d t \\<cdot> x)\\<^sup>\\<star>] p\""], ["proof (prove)\nusing this:\n  d p \\<le>  |d t \\<cdot> x] p\n\ngoal (1 subgoal):\n 1. d p \\<le>  |(d t \\<cdot> x)\\<^sup>\\<star>] p", "by (simp add: fbox_star_induct_var)"], ["proof (state)\nthis:\n  d p \\<le>  |(d t \\<cdot> x)\\<^sup>\\<star>] p\n\ngoal (1 subgoal):\n 1. d p \\<cdot> d t \\<le>  |x] p \\<Longrightarrow>\n    d p \\<le>  |while t do x od] (d p \\<cdot> ad t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  d p \\<le>  |(d t \\<cdot> x)\\<^sup>\\<star>] p\n\ngoal (1 subgoal):\n 1. d p \\<le>  |while t do x od] (d p \\<cdot> ad t)", "using order_trans while_def fbox_export2"], ["proof (prove)\nusing this:\n  d p \\<le>  |(d t \\<cdot> x)\\<^sup>\\<star>] p\n  \\<lbrakk>?x \\<le> ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x \\<le> ?z\n  while ?p do ?x od = (d ?p \\<cdot> ?x)\\<^sup>\\<star> \\<cdot> ad ?p\n   |?x] ?p \\<le>  |?x \\<cdot> ad ?q] (d ?p \\<cdot> ad ?q)\n\ngoal (1 subgoal):\n 1. d p \\<le>  |while t do x od] (d p \\<cdot> ad t)", "by presburger"], ["proof (state)\nthis:\n  d p \\<le>  |while t do x od] (d p \\<cdot> ad t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fbox_while_var: \"d p = |d t \\<cdot> x] p \\<Longrightarrow> d p \\<le> |while t do x od] (d p \\<cdot> ad t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d p =  |d t \\<cdot> x] p \\<Longrightarrow>\n    d p \\<le>  |while t do x od] (d p \\<cdot> ad t)", "by (metis eq_refl fbox_export1 fbox_shunt fbox_while)"], ["", "lemma fbox_whilei: \"d p \\<le> d i \\<Longrightarrow> d i \\<cdot> ad t \\<le> d q \\<Longrightarrow> d i \\<cdot> d t \\<le> |x] i \\<Longrightarrow> d p \\<le> |while t inv i do x od] q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le> d i; d i \\<cdot> ad t \\<le> d q;\n     d i \\<cdot> d t \\<le>  |x] i\\<rbrakk>\n    \\<Longrightarrow> d p \\<le>  |while t inv i do x od] q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le> d i; d i \\<cdot> ad t \\<le> d q;\n     d i \\<cdot> d t \\<le>  |x] i\\<rbrakk>\n    \\<Longrightarrow> d p \\<le>  |while t inv i do x od] q", "assume a1: \"d p \\<le> d i\" and a2: \"d i \\<cdot> ad t \\<le> d q\" and \"d i \\<cdot> d t \\<le> |x] i\""], ["proof (state)\nthis:\n  d p \\<le> d i\n  d i \\<cdot> ad t \\<le> d q\n  d i \\<cdot> d t \\<le>  |x] i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le> d i; d i \\<cdot> ad t \\<le> d q;\n     d i \\<cdot> d t \\<le>  |x] i\\<rbrakk>\n    \\<Longrightarrow> d p \\<le>  |while t inv i do x od] q", "hence \"d i \\<le> |while t inv i do x od] (d i \\<cdot> ad t)\""], ["proof (prove)\nusing this:\n  d p \\<le> d i\n  d i \\<cdot> ad t \\<le> d q\n  d i \\<cdot> d t \\<le>  |x] i\n\ngoal (1 subgoal):\n 1. d i \\<le>  |while t inv i do x od] (d i \\<cdot> ad t)", "by (simp add: fbox_while whilei_def)"], ["proof (state)\nthis:\n  d i \\<le>  |while t inv i do x od] (d i \\<cdot> ad t)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le> d i; d i \\<cdot> ad t \\<le> d q;\n     d i \\<cdot> d t \\<le>  |x] i\\<rbrakk>\n    \\<Longrightarrow> d p \\<le>  |while t inv i do x od] q", "also"], ["proof (state)\nthis:\n  d i \\<le>  |while t inv i do x od] (d i \\<cdot> ad t)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le> d i; d i \\<cdot> ad t \\<le> d q;\n     d i \\<cdot> d t \\<le>  |x] i\\<rbrakk>\n    \\<Longrightarrow> d p \\<le>  |while t inv i do x od] q", "have \"... \\<le> |while t inv i do x od] q\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  |while t inv i do x od] (d i \\<cdot> ad t)\n    \\<le>  |while t inv i do x od] q", "using a2 dka.dom_iso fbox_iso"], ["proof (prove)\nusing this:\n  d i \\<cdot> ad t \\<le> d q\n  ?x \\<le> ?y \\<Longrightarrow> d ?x \\<le> d ?y\n  d ?x \\<le> d ?y \\<Longrightarrow>  |?z] ?x \\<le>  |?z] ?y\n\ngoal (1 subgoal):\n 1.  |while t inv i do x od] (d i \\<cdot> ad t)\n    \\<le>  |while t inv i do x od] q", "by fastforce"], ["proof (state)\nthis:\n   |while t inv i do x od] (d i \\<cdot> ad t)\n  \\<le>  |while t inv i do x od] q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le> d i; d i \\<cdot> ad t \\<le> d q;\n     d i \\<cdot> d t \\<le>  |x] i\\<rbrakk>\n    \\<Longrightarrow> d p \\<le>  |while t inv i do x od] q", "finally"], ["proof (chain)\npicking this:\n  d i \\<le>  |while t inv i do x od] q", "show ?thesis"], ["proof (prove)\nusing this:\n  d i \\<le>  |while t inv i do x od] q\n\ngoal (1 subgoal):\n 1. d p \\<le>  |while t inv i do x od] q", "using a1 dual_order.trans"], ["proof (prove)\nusing this:\n  d i \\<le>  |while t inv i do x od] q\n  d p \\<le> d i\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n\ngoal (1 subgoal):\n 1. d p \\<le>  |while t inv i do x od] q", "by blast"], ["proof (state)\nthis:\n  d p \\<le>  |while t inv i do x od] q\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The next rule is used for dealing with while loops after a series of sequential steps.\\<close>"], ["", "lemma fbox_whilei_break: \"d p \\<le> |y] i \\<Longrightarrow> d i \\<cdot> ad t \\<le> d q \\<Longrightarrow> d i \\<cdot> d t \\<le> |x] i \\<Longrightarrow> d p \\<le> |y \\<cdot> (while t inv i do x od)] q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le>  |y] i; d i \\<cdot> ad t \\<le> d q;\n     d i \\<cdot> d t \\<le>  |x] i\\<rbrakk>\n    \\<Longrightarrow> d p \\<le>  |y \\<cdot> (while t inv i do x od)] q", "apply (rule fbox_seq_var, rule fbox_whilei, simp_all, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le>  |y] i; d i \\<cdot> ad t \\<le> d q;\n     d i \\<cdot> d t \\<le>  |x] i\\<rbrakk>\n    \\<Longrightarrow> d p \\<le>  |y] d i", "using fbox_simp"], ["proof (prove)\nusing this:\n   |?x] ?y =  |?x] d ?y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le>  |y] i; d i \\<cdot> ad t \\<le> d q;\n     d i \\<cdot> d t \\<le>  |x] i\\<rbrakk>\n    \\<Longrightarrow> d p \\<le>  |y] d i", "by auto"], ["", "text \\<open>Finally we derive a frame rule.\\<close>"], ["", "lemma fbox_frame: \"d p \\<cdot> x \\<le> x \\<cdot> d p \\<Longrightarrow> d q \\<le> |x] t \\<Longrightarrow> d p \\<cdot> d q \\<le> |x] (d p \\<cdot> d t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<cdot> x \\<le> x \\<cdot> d p; d q \\<le>  |x] t\\<rbrakk>\n    \\<Longrightarrow> d p \\<cdot> d q \\<le>  |x] (d p \\<cdot> d t)", "using dual.mult_isol_var fbox_add1 fbox_demodalisation3 fbox_simp"], ["proof (prove)\nusing this:\n  \\<lbrakk>?u \\<le> ?x; ?v \\<le> ?y\\<rbrakk>\n  \\<Longrightarrow> ?v \\<cdot> ?u \\<le> ?y \\<cdot> ?x\n   |?x] (d ?y \\<cdot> d ?z) =  |?x] ?y \\<cdot>  |?x] ?z\n  (d ?y \\<le>  |?x] d ?z) = (d ?y \\<cdot> ?x \\<le> ?x \\<cdot> d ?z)\n   |?x] ?y =  |?x] d ?y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<cdot> x \\<le> x \\<cdot> d p; d q \\<le>  |x] t\\<rbrakk>\n    \\<Longrightarrow> d p \\<cdot> d q \\<le>  |x] (d p \\<cdot> d t)", "by auto"], ["", "lemma fbox_frame_var: \"d p \\<le> |x] p \\<Longrightarrow> d q \\<le> |x] t \\<Longrightarrow> d p \\<cdot> d q \\<le> |x] (d p \\<cdot> d t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le>  |x] p; d q \\<le>  |x] t\\<rbrakk>\n    \\<Longrightarrow> d p \\<cdot> d q \\<le>  |x] (d p \\<cdot> d t)", "using fbox_frame fbox_demodalisation3 fbox_simp"], ["proof (prove)\nusing this:\n  \\<lbrakk>d ?p \\<cdot> ?x \\<le> ?x \\<cdot> d ?p;\n   d ?q \\<le>  |?x] ?t\\<rbrakk>\n  \\<Longrightarrow> d ?p \\<cdot> d ?q \\<le>  |?x] (d ?p \\<cdot> d ?t)\n  (d ?y \\<le>  |?x] d ?z) = (d ?y \\<cdot> ?x \\<le> ?x \\<cdot> d ?z)\n   |?x] ?y =  |?x] d ?y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>d p \\<le>  |x] p; d q \\<le>  |x] t\\<rbrakk>\n    \\<Longrightarrow> d p \\<cdot> d q \\<le>  |x] (d p \\<cdot> d t)", "by auto"], ["", "end"], ["", "subsubsection \\<open>Store and Assignment\\<close>"], ["", "type_synonym 'a store = \"string  \\<Rightarrow> 'a\""], ["", "notation rel_antidomain_kleene_algebra.fbox (\"wp\")\nand rel_antidomain_kleene_algebra.fdia (\"relfdia\")"], ["", "definition gets :: \"string \\<Rightarrow> ('a store \\<Rightarrow> 'a) \\<Rightarrow> 'a store rel\" (\"_ ::= _\" [70, 65] 61) where \n   \"v ::= e = {(s,s (v := e s)) |s. True}\""], ["", "lemma assign_prop: \"\\<lceil>\\<lambda>s. P (s (v := e s))\\<rceil> ; (v ::= e) = (v ::= e) ; \\<lceil>P\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lceil>\\<lambda>s. P (s(v := e s))\\<rceil> ; (v ::= e) =\n    (v ::= e) ; \\<lceil>P\\<rceil>", "by (auto simp add: p2r_def gets_def)"], ["", "lemma wp_assign [simp]: \"wp (v ::= e) \\<lceil>Q\\<rceil> = \\<lceil>\\<lambda>s. Q (s (v := e s))\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp (v ::= e) \\<lceil>Q\\<rceil> =\n    \\<lceil>\\<lambda>s. Q (s(v := e s))\\<rceil>", "by (auto simp: rel_antidomain_kleene_algebra.fbox_def gets_def rel_ad_def p2r_def)"], ["", "lemma wp_assign_var [simp]: \"\\<lfloor>wp (v ::= e) \\<lceil>Q\\<rceil>\\<rfloor> = (\\<lambda>s. Q (s (v := e s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>wp (v ::= e) \\<lceil>Q\\<rceil>\\<rfloor> =\n    (\\<lambda>s. Q (s(v := e s)))", "by (simp, auto simp: r2p_def p2r_def)"], ["", "lemma wp_assign_det: \"wp (v ::= e) \\<lceil>Q\\<rceil> = relfdia (v ::= e) \\<lceil>Q\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp (v ::= e) \\<lceil>Q\\<rceil> = relfdia (v ::= e) \\<lceil>Q\\<rceil>", "by (auto simp add: rel_antidomain_kleene_algebra.fbox_def rel_antidomain_kleene_algebra.fdia_def gets_def p2r_def rel_ad_def, fast)"], ["", "subsubsection \\<open>Simplifications\\<close>"], ["", "notation rel_antidomain_kleene_algebra.ads_d (\"rdom\")"], ["", "abbreviation spec_sugar :: \"'a pred \\<Rightarrow> 'a rel \\<Rightarrow> 'a pred \\<Rightarrow> bool\" (\"PRE _ _ POST _\" [64,64,64] 63) where\n  \"PRE P X POST Q \\<equiv> rdom \\<lceil>P\\<rceil> \\<subseteq> wp X \\<lceil>Q\\<rceil>\""], ["", "abbreviation cond_sugar :: \"'a pred \\<Rightarrow> 'a rel \\<Rightarrow> 'a rel \\<Rightarrow> 'a rel\" (\"IF _ THEN _ ELSE _ FI\" [64,64,64] 63) where\n  \"IF P THEN X ELSE Y FI \\<equiv> rel_antidomain_kleene_algebra.cond \\<lceil>P\\<rceil> X Y\""], ["", "abbreviation whilei_sugar :: \"'a pred \\<Rightarrow> 'a pred \\<Rightarrow> 'a rel \\<Rightarrow> 'a rel\" (\"WHILE _ INV _ DO _ OD\" [64,64,64] 63) where\n  \"WHILE P INV I DO X OD \\<equiv> rel_antidomain_kleene_algebra.whilei \\<lceil>P\\<rceil> \\<lceil>I\\<rceil> X\""], ["", "lemma d_p2r [simp]: \"rdom \\<lceil>P\\<rceil> = \\<lceil>P\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rdom \\<lceil>P\\<rceil> = \\<lceil>P\\<rceil>", "by (simp add: p2r_def rel_antidomain_kleene_algebra.ads_d_def rel_ad_def)"], ["", "lemma p2r_conj_hom_var_symm [simp]: \"\\<lceil>P\\<rceil> ; \\<lceil>Q\\<rceil> = \\<lceil>P \\<sqinter> Q\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lceil>P\\<rceil> ; \\<lceil>Q\\<rceil> = \\<lceil>P \\<sqinter> Q\\<rceil>", "by (simp add: p2r_conj_hom_var)"], ["", "lemma p2r_neg_hom [simp]: \"rel_ad \\<lceil>P\\<rceil> = \\<lceil>- P\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_ad \\<lceil>P\\<rceil> = \\<lceil>- P\\<rceil>", "by (simp add: rel_ad_def p2r_def)"], ["", "lemma wp_trafo: \"\\<lfloor>wp X \\<lceil>Q\\<rceil>\\<rfloor> = (\\<lambda>s. \\<forall>s'. (s,s') \\<in> X \\<longrightarrow> Q s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>wp X \\<lceil>Q\\<rceil>\\<rfloor> =\n    (\\<lambda>s. \\<forall>s'. (s, s') \\<in> X \\<longrightarrow> Q s')", "by (auto simp: rel_antidomain_kleene_algebra.fbox_def rel_ad_def p2r_def r2p_def)"], ["", "lemma wp_trafo_var: \"\\<lfloor>wp X \\<lceil>Q\\<rceil>\\<rfloor> s = (\\<forall>s'. (s,s') \\<in> X \\<longrightarrow> Q s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>wp X \\<lceil>Q\\<rceil>\\<rfloor> s =\n    (\\<forall>s'. (s, s') \\<in> X \\<longrightarrow> Q s')", "by (simp add: wp_trafo)"], ["", "lemma wp_simp: \"rdom \\<lceil>\\<lfloor>wp X Q\\<rfloor>\\<rceil> = wp X Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rdom \\<lceil>\\<lfloor>wp X Q\\<rfloor>\\<rceil> = wp X Q", "by (metis d_p2r rel_antidomain_kleene_algebra.a_subid' rel_antidomain_kleene_algebra.addual.bbox_def rpr)"], ["", "lemma wp_simp_var [simp]: \"wp \\<lceil>P\\<rceil> \\<lceil>Q\\<rceil> = \\<lceil>- P \\<squnion> Q\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wp \\<lceil>P\\<rceil> \\<lceil>Q\\<rceil> =\n    \\<lceil>- P \\<squnion> Q\\<rceil>", "by (simp add: rel_antidomain_kleene_algebra.fbox_def)"], ["", "lemma impl_prop [simp]: \"\\<lceil>P\\<rceil> \\<subseteq> \\<lceil>Q\\<rceil> \\<longleftrightarrow> (\\<forall>s. P s \\<longrightarrow>  Q s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lceil>P\\<rceil> \\<subseteq> \\<lceil>Q\\<rceil>) =\n    (\\<forall>s. P s \\<longrightarrow> Q s)", "by (auto simp: p2r_def)"], ["", "lemma p2r_eq_prop [simp]: \"\\<lceil>P\\<rceil> = \\<lceil>Q\\<rceil> \\<longleftrightarrow> (\\<forall>s. P s \\<longleftrightarrow>  Q s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lceil>P\\<rceil> = \\<lceil>Q\\<rceil>) = (\\<forall>s. P s = Q s)", "by (auto simp: p2r_def)"], ["", "lemma impl_prop_var [simp]: \"rdom \\<lceil>P\\<rceil> \\<subseteq> rdom \\<lceil>Q\\<rceil> \\<longleftrightarrow> (\\<forall>s. P s \\<longrightarrow>  Q s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rdom \\<lceil>P\\<rceil> \\<subseteq> rdom \\<lceil>Q\\<rceil>) =\n    (\\<forall>s. P s \\<longrightarrow> Q s)", "by simp"], ["", "lemma p2r_eq_prop_var [simp]: \"rdom \\<lceil>P\\<rceil> = rdom \\<lceil>Q\\<rceil> \\<longleftrightarrow> (\\<forall>s. P s \\<longleftrightarrow>  Q s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rdom \\<lceil>P\\<rceil> = rdom \\<lceil>Q\\<rceil>) =\n    (\\<forall>s. P s = Q s)", "by simp"], ["", "lemma wp_whilei: \"(\\<forall>s. P s \\<longrightarrow> I s) \\<Longrightarrow> (\\<forall>s. (I \\<sqinter> -T) s \\<longrightarrow> Q s) \\<Longrightarrow> (\\<forall>s. (I \\<sqinter> T) s \\<longrightarrow> \\<lfloor>wp X \\<lceil>I\\<rceil>\\<rfloor> s) \n                  \\<Longrightarrow> (\\<forall>s. P s \\<longrightarrow> \\<lfloor>wp (WHILE T INV I DO X OD) \\<lceil>Q\\<rceil>\\<rfloor> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>s. P s \\<longrightarrow> I s;\n     \\<forall>s. (I \\<sqinter> - T) s \\<longrightarrow> Q s;\n     \\<forall>s.\n        (I \\<sqinter> T) s \\<longrightarrow>\n        \\<lfloor>wp X \\<lceil>I\\<rceil>\\<rfloor> s\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s.\n                         P s \\<longrightarrow>\n                         \\<lfloor>wp (WHILE T INV I DO X OD)\n                                   \\<lceil>Q\\<rceil>\\<rfloor>\n                          s", "apply (simp only: impl_prop_var[symmetric] wp_simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rdom \\<lceil>P\\<rceil> \\<subseteq> rdom \\<lceil>I\\<rceil>;\n     rdom \\<lceil>I \\<sqinter> - T\\<rceil>\n     \\<subseteq> rdom \\<lceil>Q\\<rceil>;\n     rdom \\<lceil>I \\<sqinter> T\\<rceil>\n     \\<subseteq> wp X \\<lceil>I\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> rdom \\<lceil>P\\<rceil>\n                      \\<subseteq> wp (WHILE T INV I DO X OD)\n                                   \\<lceil>Q\\<rceil>", "by (rule rel_antidomain_kleene_algebra.fbox_whilei, simp_all, simp_all add: p2r_def)"], ["", "end"]]}