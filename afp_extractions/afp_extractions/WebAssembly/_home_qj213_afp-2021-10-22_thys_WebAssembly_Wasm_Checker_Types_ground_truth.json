{"file_name": "/home/qj213/afp-2021-10-22/thys/WebAssembly/Wasm_Checker_Types.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/WebAssembly", "problem_names": ["lemma ct_eq_commute:\n  assumes \"ct_eq x y\"\n  shows \"ct_eq y x\"", "lemma ct_eq_flip: \"ct_eq\\<inverse>\\<inverse> = ct_eq\"", "lemma ct_eq_common_tsome: \"ct_eq x y = (\\<exists>t. ct_eq x (TSome t) \\<and> ct_eq (TSome t) y)\"", "lemma ct_list_eq_commute:\n  assumes \"ct_list_eq xs ys\"\n  shows \"ct_list_eq ys xs\"", "lemma ct_list_eq_refl: \"ct_list_eq xs xs\"", "lemma ct_list_eq_length:\n  assumes \"ct_list_eq xs ys\"\n  shows \"length xs = length ys\"", "lemma ct_list_eq_concat:\n  assumes \"ct_list_eq xs ys\"\n          \"ct_list_eq xs' ys'\"\n  shows \"ct_list_eq (xs@xs') (ys@ys')\"", "lemma ct_list_eq_ts_conv_eq:\n  \"ct_list_eq (to_ct_list ts) (to_ct_list ts') = (ts = ts')\"", "lemma ct_list_eq_exists: \"\\<exists>ys. ct_list_eq xs (to_ct_list ys)\"", "lemma ct_list_eq_common_tsome_list:\n  \"ct_list_eq xs ys = (\\<exists>zs. ct_list_eq xs (to_ct_list zs) \\<and> ct_list_eq (to_ct_list zs) ys)\"", "lemma ct_list_eq_cons_ct_list:\n  assumes \"ct_list_eq (to_ct_list as) (xs @ ys)\"\n  shows \"\\<exists>bs bs'. as = bs @ bs' \\<and> ct_list_eq (to_ct_list bs) xs \\<and> ct_list_eq (to_ct_list bs') ys\"", "lemma ct_list_eq_cons_ct_list1:\n  assumes \"ct_list_eq (to_ct_list as) (xs @ (to_ct_list ys))\"\n  shows \"\\<exists>bs. as = bs @ ys \\<and> ct_list_eq (to_ct_list bs) xs\"", "lemma ct_list_eq_shared:\n  assumes \"ct_list_eq xs (to_ct_list as)\"\n          \"ct_list_eq ys (to_ct_list as)\"\n  shows \"ct_list_eq xs ys\"", "lemma ct_list_eq_take:\n  assumes \"ct_list_eq xs ys\"\n  shows \"ct_list_eq (take n xs) (take n ys)\"", "lemma ct_prefixI [intro?]: \n  assumes \"ys = as @ zs\"\n          \"ct_list_eq as xs\"\n  shows \"ct_prefix xs ys\"", "lemma ct_prefixE [elim?]:\n  assumes \"ct_prefix xs ys\"\n  obtains as zs where \"ys = as @ zs\" \"ct_list_eq as xs\"", "lemma ct_prefix_snoc [simp]: \"ct_prefix xs (ys @ [y]) = (ct_list_eq xs (ys@[y]) \\<or> ct_prefix xs ys)\"", "lemma ct_prefix_nil:\"ct_prefix [] xs\"\n                    \"\\<not>ct_prefix (x # xs) []\"", "lemma Cons_ct_prefix_Cons[simp]: \"ct_prefix (x # xs) (y # ys) = ((ct_eq x y) \\<and> ct_prefix xs ys)\"", "lemma ct_prefix_code [code]:\n  \"ct_prefix [] xs = True\"\n  \"ct_prefix (x # xs) [] = False\"\n  \"ct_prefix (x # xs) (y # ys) = ((ct_eq x y) \\<and> ct_prefix xs ys)\"", "lemma ct_suffix_to_ct_prefix [code]: \"ct_suffix xs ys = ct_prefix (rev xs) (rev ys)\"", "lemma inj_TSome: \"inj TSome\"", "lemma to_ct_list_append:\n  assumes \"to_ct_list ts = as@bs\"\n  shows \"\\<exists>as'. to_ct_list as' = as\"\n        \"\\<exists>bs'. to_ct_list bs' = bs\"", "lemma ct_suffixI [intro?]: \n  assumes \"ys = as @ zs\"\n          \"ct_list_eq zs xs\"\n  shows \"ct_suffix xs ys\"", "lemma ct_suffixE [elim?]:\n  assumes \"ct_suffix xs ys\"\n  obtains as zs where \"ys = as @ zs\" \"ct_list_eq zs xs\"", "lemma ct_suffix_nil: \"ct_suffix [] ts\"", "lemma ct_suffix_refl: \"ct_suffix ts ts\"", "lemma ct_suffix_length:\n  assumes \"ct_suffix ts ts'\"\n  shows \"length ts \\<le> length ts'\"", "lemma ct_suffix_take:\n  assumes \"ct_suffix ts ts'\"\n  shows \"ct_suffix ((take (length ts - n) ts)) ((take (length ts' - n) ts'))\"", "lemma ct_suffix_ts_conv_suffix:\n  \"ct_suffix (to_ct_list ts) (to_ct_list ts') = suffix ts ts'\"", "lemma ct_suffix_exists: \"\\<exists>ts_c. ct_suffix x1 (to_ct_list ts_c)\"", "lemma ct_suffix_ct_list_eq_exists:\n  assumes \"ct_suffix x1 x2\"\n  shows \"\\<exists>ts_c. ct_suffix x1 (to_ct_list ts_c) \\<and> ct_list_eq (to_ct_list ts_c) x2\"", "lemma ct_suffix_cons_ct_list:\n  assumes \"ct_suffix (xs@ys) (to_ct_list zs)\"\n  shows \"\\<exists>as bs. zs = as@bs \\<and> ct_list_eq ys (to_ct_list bs) \\<and> ct_suffix xs (to_ct_list as)\"", "lemma ct_suffix_cons_ct_list1:\n  assumes \"ct_suffix (xs@(to_ct_list ys)) (to_ct_list zs)\"\n  shows \"\\<exists>as. zs = as@ys \\<and> ct_suffix xs (to_ct_list as)\"", "lemma ct_suffix_cons2:\n  assumes \"ct_suffix (xs) (ys@zs)\"\n          \"length xs = length zs\"\n  shows \"ct_list_eq xs zs\"", "lemma ct_suffix_imp_ct_list_eq:\n  assumes \"ct_suffix xs ys\"\n  shows \"ct_list_eq (drop (length ys - length xs) ys) xs\"", "lemma ct_suffix_extend_ct_list_eq:\n  assumes \"ct_suffix xs ys\"\n          \"ct_list_eq xs' ys'\"\n  shows \"ct_suffix (xs@xs') (ys@ys')\"", "lemma ct_suffix_extend_any1:\n  assumes \"ct_suffix xs ys\"\n          \"length xs < length ys\"\n  shows \"ct_suffix (TAny#xs) ys\"", "lemma ct_suffix_singleton_any: \"ct_suffix [TAny] [t]\"", "lemma ct_suffix_cons_it: \"ct_suffix xs (xs'@xs)\"", "lemma ct_suffix_singleton:\n  assumes \"length cts > 0\"\n  shows \"ct_suffix [TAny] cts\"", "lemma ct_suffix_less:\n  assumes \"ct_suffix (xs@xs') ys\"\n  shows \"ct_suffix xs' ys\"", "lemma ct_suffix_unfold_one: \"ct_suffix (xs@[x]) (ys@[y]) = ((ct_eq x y) \\<and> ct_suffix xs ys)\"", "lemma ct_suffix_shared:\n  assumes \"ct_suffix cts (to_ct_list ts)\"\n          \"ct_suffix cts' (to_ct_list ts)\"\n  shows \"ct_suffix cts cts' \\<or> ct_suffix cts' cts\"", "lemma consume_type:\n  assumes \"consume (Type ts) ts' = c_t\"\n          \"c_t \\<noteq> Bot\"\n  shows \"\\<exists>ts''. ct_list_eq (to_ct_list ts) ((to_ct_list ts'')@ts') \\<and> c_t = Type ts''\"", "lemma consume_top_geq:\n  assumes \"consume (TopType ts) ts' = c_t\"\n          \"length ts \\<ge> length ts'\"\n          \"c_t \\<noteq> Bot\"\n  shows \"(\\<exists>as bs. ts = as@bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as)\"", "lemma consume_top_leq:\n  assumes \"consume (TopType ts) ts' = c_t\"\n          \"length ts \\<le> length ts'\"\n          \"c_t \\<noteq> Bot\"\n  shows \"c_t = TopType []\"", "lemma consume_type_type:\n  assumes \"consume xs cons = (Type t_int)\"\n  shows \"\\<exists>tn. xs = Type tn\"", "lemma produce_type_type:\n  assumes \"produce xs cons = (Type tm)\"\n  shows \"\\<exists>tn. xs = Type tn\"", "lemma consume_weaken_type:\n  assumes \"consume (Type tn) cons = (Type t_int)\"\n  shows \"consume (Type (ts@tn)) cons = (Type (ts@t_int))\"", "lemma produce_weaken_type:\n  assumes \"produce (Type tn) cons = (Type tm)\"\n  shows \"produce (Type (ts@tn)) cons = (Type (ts@tm))\"", "lemma produce_nil: \"produce ts (Type []) = ts\"", "lemma c_types_agree_id: \"c_types_agree (Type ts) ts\"", "lemma c_types_agree_top1: \"c_types_agree (TopType []) ts\"", "lemma c_types_agree_top2:\n  assumes \"ct_list_eq ts (to_ct_list ts'')\"\n  shows \"c_types_agree (TopType ts) (ts'@ts'')\"", "lemma c_types_agree_imp_ct_list_eq:\n  assumes \"c_types_agree (TopType cts) ts\"\n  shows \"\\<exists>ts' ts''. (ts = ts'@ts'') \\<and> ct_list_eq cts (to_ct_list ts'')\"", "lemma c_types_agree_not_bot_exists:\n  assumes \"ts \\<noteq> Bot\"\n  shows \"\\<exists>ts_c. c_types_agree ts ts_c\"", "lemma consume_c_types_agree:\n  assumes \"consume (Type ts) cts = (Type ts')\"\n          \"c_types_agree ctn ts\"\n  shows \"\\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'\"", "lemma type_update_type:\n  assumes \"type_update (Type ts) (to_ct_list cons) prods = ts'\"\n          \"ts' \\<noteq> Bot\"\n        shows \"(ts' = prods \\<and> (\\<exists>ts_c. prods = (TopType ts_c)))\n               \\<or> (\\<exists>ts_a ts_b. prods = Type ts_a \\<and> ts = ts_b@cons \\<and> ts' = Type (ts_b@ts_a))\"", "lemma type_update_empty: \"type_update ts cons (Type []) = consume ts cons\"", "lemma type_update_top_top:\n  assumes \"type_update (TopType ts) (to_ct_list cons) (Type prods) = (TopType ts')\"\n          \"c_types_agree (TopType ts') t_ag\"\n  shows \"ct_suffix (to_ct_list prods) ts'\"\n        \"\\<exists>t_ag'. t_ag = t_ag'@prods \\<and> c_types_agree (TopType ts) (t_ag'@cons)\"", "lemma type_update_select_length0:\n  assumes \"type_update_select (TopType cts) = tm\"\n          \"length cts = 0\"\n          \"tm \\<noteq> Bot\"\n  shows \"tm = TopType [TAny]\"", "lemma type_update_select_length1:\n  assumes \"type_update_select (TopType cts) = tm\"\n          \"length cts = 1\"\n          \"tm \\<noteq> Bot\"\n  shows \"ct_list_eq cts [TSome T_i32]\"\n        \"tm = TopType [TAny]\"", "lemma type_update_select_length2:\n  assumes \"type_update_select (TopType cts) = tm\"\n          \"length cts = 2\"\n          \"tm \\<noteq> Bot\"\n  shows \"\\<exists>t1 t2. cts = [t1, t2] \\<and> ct_eq t2 (TSome T_i32) \\<and> tm = TopType [t1]\"", "lemma type_update_select_length3:\n  assumes \"type_update_select (TopType cts) = (TopType ctm)\"\n          \"length cts \\<ge> 3\"\n  shows \"\\<exists>cts' ct1 ct2 ct3. cts = cts'@[ct1, ct2, ct3] \\<and> ct_eq ct3 (TSome T_i32)\"", "lemma type_update_select_type_length3:\n  assumes \"type_update_select (Type tn) = (Type tm)\"\n  shows \"\\<exists>t ts'. tn = ts'@[t, t, T_i32]\"", "lemma select_return_top_exists:\n  assumes \"select_return_top cts c1 c2 = ctm\"\n          \"ctm \\<noteq> Bot\"\n  shows \"\\<exists>xs. ctm = TopType xs\"", "lemma type_update_select_top_exists:\n  assumes \"type_update_select xs = (TopType tm)\"\n  shows \"\\<exists>tn. xs = TopType tn\"", "lemma type_update_select_conv_select_return_top:\n  assumes \"ct_suffix [TSome T_i32] cts\"\n          \"length cts \\<ge> 3\"\n  shows \"type_update_select (TopType cts) = (select_return_top cts (cts!(length cts-2)) (cts!(length cts-3)))\"", "lemma select_return_top_ct_eq:\n  assumes \"select_return_top cts c1 c2 = TopType ctm\"\n          \"length cts \\<ge> 3\"\n          \"c_types_agree (TopType ctm) cm\"\n  shows \"\\<exists>c' cm'. cm = cm'@[c']\n                  \\<and> ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\n                  \\<and> ct_eq c1 (TSome c')\n                  \\<and> ct_eq c2 (TSome c')\""], "translations": [["", "lemma ct_eq_commute:\n  assumes \"ct_eq x y\"\n  shows \"ct_eq y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_eq y x", "using assms"], ["proof (prove)\nusing this:\n  ct_eq x y\n\ngoal (1 subgoal):\n 1. ct_eq y x", "by (metis ct_eq.elims(3) ct_eq.simps(1))"], ["", "lemma ct_eq_flip: \"ct_eq\\<inverse>\\<inverse> = ct_eq\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_eq\\<inverse>\\<inverse> = ct_eq", "using ct_eq_commute"], ["proof (prove)\nusing this:\n  ct_eq ?x ?y \\<Longrightarrow> ct_eq ?y ?x\n\ngoal (1 subgoal):\n 1. ct_eq\\<inverse>\\<inverse> = ct_eq", "by fastforce"], ["", "lemma ct_eq_common_tsome: \"ct_eq x y = (\\<exists>t. ct_eq x (TSome t) \\<and> ct_eq (TSome t) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_eq x y = (\\<exists>t. ct_eq x (TSome t) \\<and> ct_eq (TSome t) y)", "by (metis ct_eq.elims(3) ct_eq.simps(1))"], ["", "lemma ct_list_eq_commute:\n  assumes \"ct_list_eq xs ys\"\n  shows \"ct_list_eq ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_list_eq ys xs", "using assms ct_eq_commute List.List.list.rel_flip ct_eq_flip"], ["proof (prove)\nusing this:\n  ct_list_eq xs ys\n  ct_eq ?x ?y \\<Longrightarrow> ct_eq ?y ?x\n  list_all2 ?R\\<inverse>\\<inverse> ?a ?b = list_all2 ?R ?b ?a\n  ct_eq\\<inverse>\\<inverse> = ct_eq\n\ngoal (1 subgoal):\n 1. ct_list_eq ys xs", "unfolding ct_list_eq_def"], ["proof (prove)\nusing this:\n  list_all2 ct_eq xs ys\n  ct_eq ?x ?y \\<Longrightarrow> ct_eq ?y ?x\n  list_all2 ?R\\<inverse>\\<inverse> ?a ?b = list_all2 ?R ?b ?a\n  ct_eq\\<inverse>\\<inverse> = ct_eq\n\ngoal (1 subgoal):\n 1. list_all2 ct_eq ys xs", "by fastforce"], ["", "lemma ct_list_eq_refl: \"ct_list_eq xs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_list_eq xs xs", "unfolding ct_list_eq_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 ct_eq xs xs", "by (metis ct_eq.elims(3) ct_eq.simps(1) list_all2_refl)"], ["", "lemma ct_list_eq_length:\n  assumes \"ct_list_eq xs ys\"\n  shows \"length xs = length ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length ys", "using assms list_all2_lengthD"], ["proof (prove)\nusing this:\n  ct_list_eq xs ys\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n\ngoal (1 subgoal):\n 1. length xs = length ys", "unfolding ct_list_eq_def"], ["proof (prove)\nusing this:\n  list_all2 ct_eq xs ys\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n\ngoal (1 subgoal):\n 1. length xs = length ys", "by blast"], ["", "lemma ct_list_eq_concat:\n  assumes \"ct_list_eq xs ys\"\n          \"ct_list_eq xs' ys'\"\n  shows \"ct_list_eq (xs@xs') (ys@ys')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_list_eq (xs @ xs') (ys @ ys')", "using assms"], ["proof (prove)\nusing this:\n  ct_list_eq xs ys\n  ct_list_eq xs' ys'\n\ngoal (1 subgoal):\n 1. ct_list_eq (xs @ xs') (ys @ ys')", "unfolding ct_list_eq_def"], ["proof (prove)\nusing this:\n  list_all2 ct_eq xs ys\n  list_all2 ct_eq xs' ys'\n\ngoal (1 subgoal):\n 1. list_all2 ct_eq (xs @ xs') (ys @ ys')", "by (simp add: list_all2_appendI)"], ["", "lemma ct_list_eq_ts_conv_eq:\n  \"ct_list_eq (to_ct_list ts) (to_ct_list ts') = (ts = ts')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_list_eq (to_ct_list ts) (to_ct_list ts') = (ts = ts')", "unfolding ct_list_eq_def to_ct_list_def\n            list_all2_map1 list_all2_map2\n            ct_eq.simps(1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 (=) ts ts' = (ts = ts')", "by (simp add: list_all2_eq)"], ["", "lemma ct_list_eq_exists: \"\\<exists>ys. ct_list_eq xs (to_ct_list ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ys. ct_list_eq xs (to_ct_list ys)", "proof (induction xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>ys. ct_list_eq [] (to_ct_list ys)\n 2. \\<And>a xs.\n       \\<exists>ys. ct_list_eq xs (to_ct_list ys) \\<Longrightarrow>\n       \\<exists>ys. ct_list_eq (a # xs) (to_ct_list ys)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<exists>ys. ct_list_eq [] (to_ct_list ys)\n 2. \\<And>a xs.\n       \\<exists>ys. ct_list_eq xs (to_ct_list ys) \\<Longrightarrow>\n       \\<exists>ys. ct_list_eq (a # xs) (to_ct_list ys)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ys. ct_list_eq [] (to_ct_list ys)", "unfolding ct_list_eq_def to_ct_list_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ys. list_all2 ct_eq [] (map TSome ys)", "by (simp)"], ["proof (state)\nthis:\n  \\<exists>ys. ct_list_eq [] (to_ct_list ys)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<exists>ys. ct_list_eq xs (to_ct_list ys) \\<Longrightarrow>\n       \\<exists>ys. ct_list_eq (a # xs) (to_ct_list ys)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<exists>ys. ct_list_eq xs (to_ct_list ys) \\<Longrightarrow>\n       \\<exists>ys. ct_list_eq (a # xs) (to_ct_list ys)", "case (Cons a xs)"], ["proof (state)\nthis:\n  \\<exists>ys. ct_list_eq xs (to_ct_list ys)\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<exists>ys. ct_list_eq xs (to_ct_list ys) \\<Longrightarrow>\n       \\<exists>ys. ct_list_eq (a # xs) (to_ct_list ys)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<exists>ys. ct_list_eq xs (to_ct_list ys)\n\ngoal (1 subgoal):\n 1. \\<exists>ys. ct_list_eq (a # xs) (to_ct_list ys)", "unfolding ct_list_eq_def to_ct_list_def"], ["proof (prove)\nusing this:\n  \\<exists>ys. list_all2 ct_eq xs (map TSome ys)\n\ngoal (1 subgoal):\n 1. \\<exists>ys. list_all2 ct_eq (a # xs) (map TSome ys)", "apply (cases a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<exists>ys. list_all2 ct_eq xs (map TSome ys);\n     a = TAny\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ys. list_all2 ct_eq (a # xs) (map TSome ys)\n 2. \\<And>x2.\n       \\<lbrakk>\\<exists>ys. list_all2 ct_eq xs (map TSome ys);\n        a = TSome x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            list_all2 ct_eq (a # xs) (map TSome ys)", "apply (metis ct_eq.simps(3) ct_eq_commute list.rel_intros(2) list.simps(9))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>\\<exists>ys. list_all2 ct_eq xs (map TSome ys);\n        a = TSome x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys.\n                            list_all2 ct_eq (a # xs) (map TSome ys)", "apply (metis ct_eq.simps(1) list.rel_intros(2) list.simps(9))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>ys. ct_list_eq (a # xs) (to_ct_list ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ct_list_eq_common_tsome_list:\n  \"ct_list_eq xs ys = (\\<exists>zs. ct_list_eq xs (to_ct_list zs) \\<and> ct_list_eq (to_ct_list zs) ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_list_eq xs ys =\n    (\\<exists>zs.\n        ct_list_eq xs (to_ct_list zs) \\<and> ct_list_eq (to_ct_list zs) ys)", "proof (induction ys arbitrary: xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       ct_list_eq xs [] =\n       (\\<exists>zs.\n           ct_list_eq xs (to_ct_list zs) \\<and>\n           ct_list_eq (to_ct_list zs) [])\n 2. \\<And>a ys xs.\n       (\\<And>xs.\n           ct_list_eq xs ys =\n           (\\<exists>zs.\n               ct_list_eq xs (to_ct_list zs) \\<and>\n               ct_list_eq (to_ct_list zs) ys)) \\<Longrightarrow>\n       ct_list_eq xs (a # ys) =\n       (\\<exists>zs.\n           ct_list_eq xs (to_ct_list zs) \\<and>\n           ct_list_eq (to_ct_list zs) (a # ys))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       ct_list_eq xs [] =\n       (\\<exists>zs.\n           ct_list_eq xs (to_ct_list zs) \\<and>\n           ct_list_eq (to_ct_list zs) [])\n 2. \\<And>a ys xs.\n       (\\<And>xs.\n           ct_list_eq xs ys =\n           (\\<exists>zs.\n               ct_list_eq xs (to_ct_list zs) \\<and>\n               ct_list_eq (to_ct_list zs) ys)) \\<Longrightarrow>\n       ct_list_eq xs (a # ys) =\n       (\\<exists>zs.\n           ct_list_eq xs (to_ct_list zs) \\<and>\n           ct_list_eq (to_ct_list zs) (a # ys))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_list_eq xs [] =\n    (\\<exists>zs.\n        ct_list_eq xs (to_ct_list zs) \\<and> ct_list_eq (to_ct_list zs) [])", "unfolding ct_list_eq_def to_ct_list_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 ct_eq xs [] =\n    (\\<exists>zs.\n        list_all2 ct_eq xs (map TSome zs) \\<and>\n        list_all2 ct_eq (map TSome zs) [])", "by simp"], ["proof (state)\nthis:\n  ct_list_eq xs [] =\n  (\\<exists>zs.\n      ct_list_eq xs (to_ct_list zs) \\<and> ct_list_eq (to_ct_list zs) [])\n\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       (\\<And>xs.\n           ct_list_eq xs ys =\n           (\\<exists>zs.\n               ct_list_eq xs (to_ct_list zs) \\<and>\n               ct_list_eq (to_ct_list zs) ys)) \\<Longrightarrow>\n       ct_list_eq xs (a # ys) =\n       (\\<exists>zs.\n           ct_list_eq xs (to_ct_list zs) \\<and>\n           ct_list_eq (to_ct_list zs) (a # ys))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       (\\<And>xs.\n           ct_list_eq xs ys =\n           (\\<exists>zs.\n               ct_list_eq xs (to_ct_list zs) \\<and>\n               ct_list_eq (to_ct_list zs) ys)) \\<Longrightarrow>\n       ct_list_eq xs (a # ys) =\n       (\\<exists>zs.\n           ct_list_eq xs (to_ct_list zs) \\<and>\n           ct_list_eq (to_ct_list zs) (a # ys))", "case (Cons a ys)"], ["proof (state)\nthis:\n  ct_list_eq ?xs ys =\n  (\\<exists>zs.\n      ct_list_eq ?xs (to_ct_list zs) \\<and> ct_list_eq (to_ct_list zs) ys)\n\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       (\\<And>xs.\n           ct_list_eq xs ys =\n           (\\<exists>zs.\n               ct_list_eq xs (to_ct_list zs) \\<and>\n               ct_list_eq (to_ct_list zs) ys)) \\<Longrightarrow>\n       ct_list_eq xs (a # ys) =\n       (\\<exists>zs.\n           ct_list_eq xs (to_ct_list zs) \\<and>\n           ct_list_eq (to_ct_list zs) (a # ys))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_list_eq xs (a # ys) =\n    (\\<exists>zs.\n        ct_list_eq xs (to_ct_list zs) \\<and>\n        ct_list_eq (to_ct_list zs) (a # ys))", "proof (safe)"], ["proof (state)\ngoal (2 subgoals):\n 1. ct_list_eq xs (a # ys) \\<Longrightarrow>\n    \\<exists>zs.\n       ct_list_eq xs (to_ct_list zs) \\<and>\n       ct_list_eq (to_ct_list zs) (a # ys)\n 2. \\<And>zs.\n       \\<lbrakk>ct_list_eq xs (to_ct_list zs);\n        ct_list_eq (to_ct_list zs) (a # ys)\\<rbrakk>\n       \\<Longrightarrow> ct_list_eq xs (a # ys)", "assume assms:\"ct_list_eq xs (a # ys)\""], ["proof (state)\nthis:\n  ct_list_eq xs (a # ys)\n\ngoal (2 subgoals):\n 1. ct_list_eq xs (a # ys) \\<Longrightarrow>\n    \\<exists>zs.\n       ct_list_eq xs (to_ct_list zs) \\<and>\n       ct_list_eq (to_ct_list zs) (a # ys)\n 2. \\<And>zs.\n       \\<lbrakk>ct_list_eq xs (to_ct_list zs);\n        ct_list_eq (to_ct_list zs) (a # ys)\\<rbrakk>\n       \\<Longrightarrow> ct_list_eq xs (a # ys)", "then"], ["proof (chain)\npicking this:\n  ct_list_eq xs (a # ys)", "obtain x' xs' where xs_def:\"xs = x'#xs'\""], ["proof (prove)\nusing this:\n  ct_list_eq xs (a # ys)\n\ngoal (1 subgoal):\n 1. (\\<And>x' xs'. xs = x' # xs' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson ct_list_eq_def list_all2_Cons2)"], ["proof (state)\nthis:\n  xs = x' # xs'\n\ngoal (2 subgoals):\n 1. ct_list_eq xs (a # ys) \\<Longrightarrow>\n    \\<exists>zs.\n       ct_list_eq xs (to_ct_list zs) \\<and>\n       ct_list_eq (to_ct_list zs) (a # ys)\n 2. \\<And>zs.\n       \\<lbrakk>ct_list_eq xs (to_ct_list zs);\n        ct_list_eq (to_ct_list zs) (a # ys)\\<rbrakk>\n       \\<Longrightarrow> ct_list_eq xs (a # ys)", "then"], ["proof (chain)\npicking this:\n  xs = x' # xs'", "obtain zs where zs_def:\"ct_eq x' a\"\n                                \"ct_list_eq xs' (to_ct_list zs) \\<and> ct_list_eq (to_ct_list zs) ys\""], ["proof (prove)\nusing this:\n  xs = x' # xs'\n\ngoal (1 subgoal):\n 1. (\\<And>zs.\n        \\<lbrakk>ct_eq x' a;\n         ct_list_eq xs' (to_ct_list zs) \\<and>\n         ct_list_eq (to_ct_list zs) ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Cons[of xs'] assms list_all2_Cons"], ["proof (prove)\nusing this:\n  xs = x' # xs'\n  ct_list_eq xs' ys =\n  (\\<exists>zs.\n      ct_list_eq xs' (to_ct_list zs) \\<and> ct_list_eq (to_ct_list zs) ys)\n  ct_list_eq xs (a # ys)\n  list_all2 ?P (?x # ?xs) (?y # ?ys) =\n  (?P ?x ?y \\<and> list_all2 ?P ?xs ?ys)\n\ngoal (1 subgoal):\n 1. (\\<And>zs.\n        \\<lbrakk>ct_eq x' a;\n         ct_list_eq xs' (to_ct_list zs) \\<and>\n         ct_list_eq (to_ct_list zs) ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ct_list_eq_def"], ["proof (prove)\nusing this:\n  xs = x' # xs'\n  list_all2 ct_eq xs' ys =\n  (\\<exists>zs.\n      list_all2 ct_eq xs' (to_ct_list zs) \\<and>\n      list_all2 ct_eq (to_ct_list zs) ys)\n  list_all2 ct_eq xs (a # ys)\n  list_all2 ?P (?x # ?xs) (?y # ?ys) =\n  (?P ?x ?y \\<and> list_all2 ?P ?xs ?ys)\n\ngoal (1 subgoal):\n 1. (\\<And>zs.\n        \\<lbrakk>ct_eq x' a;\n         list_all2 ct_eq xs' (to_ct_list zs) \\<and>\n         list_all2 ct_eq (to_ct_list zs) ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  ct_eq x' a\n  ct_list_eq xs' (to_ct_list zs) \\<and> ct_list_eq (to_ct_list zs) ys\n\ngoal (2 subgoals):\n 1. ct_list_eq xs (a # ys) \\<Longrightarrow>\n    \\<exists>zs.\n       ct_list_eq xs (to_ct_list zs) \\<and>\n       ct_list_eq (to_ct_list zs) (a # ys)\n 2. \\<And>zs.\n       \\<lbrakk>ct_list_eq xs (to_ct_list zs);\n        ct_list_eq (to_ct_list zs) (a # ys)\\<rbrakk>\n       \\<Longrightarrow> ct_list_eq xs (a # ys)", "obtain z where \"ct_eq x' (TSome z)\" \"ct_eq (TSome z) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>ct_eq x' (TSome z); ct_eq (TSome z) a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ct_eq_common_tsome[of x' a] zs_def(1)"], ["proof (prove)\nusing this:\n  ct_eq x' a = (\\<exists>t. ct_eq x' (TSome t) \\<and> ct_eq (TSome t) a)\n  ct_eq x' a\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>ct_eq x' (TSome z); ct_eq (TSome z) a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  ct_eq x' (TSome z)\n  ct_eq (TSome z) a\n\ngoal (2 subgoals):\n 1. ct_list_eq xs (a # ys) \\<Longrightarrow>\n    \\<exists>zs.\n       ct_list_eq xs (to_ct_list zs) \\<and>\n       ct_list_eq (to_ct_list zs) (a # ys)\n 2. \\<And>zs.\n       \\<lbrakk>ct_list_eq xs (to_ct_list zs);\n        ct_list_eq (to_ct_list zs) (a # ys)\\<rbrakk>\n       \\<Longrightarrow> ct_list_eq xs (a # ys)", "hence \"ct_list_eq (x'#xs') (to_ct_list (z#zs)) \\<and> ct_list_eq (to_ct_list (z#zs)) (a # ys)\""], ["proof (prove)\nusing this:\n  ct_eq x' (TSome z)\n  ct_eq (TSome z) a\n\ngoal (1 subgoal):\n 1. ct_list_eq (x' # xs') (to_ct_list (z # zs)) \\<and>\n    ct_list_eq (to_ct_list (z # zs)) (a # ys)", "using zs_def(2) list_all2_Cons"], ["proof (prove)\nusing this:\n  ct_eq x' (TSome z)\n  ct_eq (TSome z) a\n  ct_list_eq xs' (to_ct_list zs) \\<and> ct_list_eq (to_ct_list zs) ys\n  list_all2 ?P (?x # ?xs) (?y # ?ys) =\n  (?P ?x ?y \\<and> list_all2 ?P ?xs ?ys)\n\ngoal (1 subgoal):\n 1. ct_list_eq (x' # xs') (to_ct_list (z # zs)) \\<and>\n    ct_list_eq (to_ct_list (z # zs)) (a # ys)", "unfolding ct_list_eq_def to_ct_list_def"], ["proof (prove)\nusing this:\n  ct_eq x' (TSome z)\n  ct_eq (TSome z) a\n  list_all2 ct_eq xs' (map TSome zs) \\<and>\n  list_all2 ct_eq (map TSome zs) ys\n  list_all2 ?P (?x # ?xs) (?y # ?ys) =\n  (?P ?x ?y \\<and> list_all2 ?P ?xs ?ys)\n\ngoal (1 subgoal):\n 1. list_all2 ct_eq (x' # xs') (map TSome (z # zs)) \\<and>\n    list_all2 ct_eq (map TSome (z # zs)) (a # ys)", "by simp"], ["proof (state)\nthis:\n  ct_list_eq (x' # xs') (to_ct_list (z # zs)) \\<and>\n  ct_list_eq (to_ct_list (z # zs)) (a # ys)\n\ngoal (2 subgoals):\n 1. ct_list_eq xs (a # ys) \\<Longrightarrow>\n    \\<exists>zs.\n       ct_list_eq xs (to_ct_list zs) \\<and>\n       ct_list_eq (to_ct_list zs) (a # ys)\n 2. \\<And>zs.\n       \\<lbrakk>ct_list_eq xs (to_ct_list zs);\n        ct_list_eq (to_ct_list zs) (a # ys)\\<rbrakk>\n       \\<Longrightarrow> ct_list_eq xs (a # ys)", "thus \"\\<exists>zs. ct_list_eq xs (to_ct_list zs) \\<and> ct_list_eq (to_ct_list zs) (a # ys)\""], ["proof (prove)\nusing this:\n  ct_list_eq (x' # xs') (to_ct_list (z # zs)) \\<and>\n  ct_list_eq (to_ct_list (z # zs)) (a # ys)\n\ngoal (1 subgoal):\n 1. \\<exists>zs.\n       ct_list_eq xs (to_ct_list zs) \\<and>\n       ct_list_eq (to_ct_list zs) (a # ys)", "using xs_def"], ["proof (prove)\nusing this:\n  ct_list_eq (x' # xs') (to_ct_list (z # zs)) \\<and>\n  ct_list_eq (to_ct_list (z # zs)) (a # ys)\n  xs = x' # xs'\n\ngoal (1 subgoal):\n 1. \\<exists>zs.\n       ct_list_eq xs (to_ct_list zs) \\<and>\n       ct_list_eq (to_ct_list zs) (a # ys)", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>zs.\n     ct_list_eq xs (to_ct_list zs) \\<and>\n     ct_list_eq (to_ct_list zs) (a # ys)\n\ngoal (1 subgoal):\n 1. \\<And>zs.\n       \\<lbrakk>ct_list_eq xs (to_ct_list zs);\n        ct_list_eq (to_ct_list zs) (a # ys)\\<rbrakk>\n       \\<Longrightarrow> ct_list_eq xs (a # ys)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>zs.\n       \\<lbrakk>ct_list_eq xs (to_ct_list zs);\n        ct_list_eq (to_ct_list zs) (a # ys)\\<rbrakk>\n       \\<Longrightarrow> ct_list_eq xs (a # ys)", "fix zs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>zs.\n       \\<lbrakk>ct_list_eq xs (to_ct_list zs);\n        ct_list_eq (to_ct_list zs) (a # ys)\\<rbrakk>\n       \\<Longrightarrow> ct_list_eq xs (a # ys)", "assume assms:\"ct_list_eq xs (to_ct_list zs)\" \"ct_list_eq (to_ct_list zs) (a # ys)\""], ["proof (state)\nthis:\n  ct_list_eq xs (to_ct_list zs)\n  ct_list_eq (to_ct_list zs) (a # ys)\n\ngoal (1 subgoal):\n 1. \\<And>zs.\n       \\<lbrakk>ct_list_eq xs (to_ct_list zs);\n        ct_list_eq (to_ct_list zs) (a # ys)\\<rbrakk>\n       \\<Longrightarrow> ct_list_eq xs (a # ys)", "then"], ["proof (chain)\npicking this:\n  ct_list_eq xs (to_ct_list zs)\n  ct_list_eq (to_ct_list zs) (a # ys)", "obtain x' xs' z' zs' where \"xs = x'#xs'\"\n                                    \"zs = z'#zs'\"\n                                    \"ct_list_eq xs' (to_ct_list zs')\"\n                                    \"ct_list_eq (to_ct_list zs') (ys)\""], ["proof (prove)\nusing this:\n  ct_list_eq xs (to_ct_list zs)\n  ct_list_eq (to_ct_list zs) (a # ys)\n\ngoal (1 subgoal):\n 1. (\\<And>x' xs' z' zs'.\n        \\<lbrakk>xs = x' # xs'; zs = z' # zs';\n         ct_list_eq xs' (to_ct_list zs');\n         ct_list_eq (to_ct_list zs') ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using list_all2_Cons2"], ["proof (prove)\nusing this:\n  ct_list_eq xs (to_ct_list zs)\n  ct_list_eq (to_ct_list zs) (a # ys)\n  list_all2 ?P ?xs (?y # ?ys) =\n  (\\<exists>z zs. ?xs = z # zs \\<and> ?P z ?y \\<and> list_all2 ?P zs ?ys)\n\ngoal (1 subgoal):\n 1. (\\<And>x' xs' z' zs'.\n        \\<lbrakk>xs = x' # xs'; zs = z' # zs';\n         ct_list_eq xs' (to_ct_list zs');\n         ct_list_eq (to_ct_list zs') ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ct_list_eq_def to_ct_list_def list_all2_map1 list_all2_map2"], ["proof (prove)\nusing this:\n  list_all2 (\\<lambda>x y. ct_eq x (TSome y)) xs zs\n  list_all2 (\\<lambda>x. ct_eq (TSome x)) zs (a # ys)\n  list_all2 ?P ?xs (?y # ?ys) =\n  (\\<exists>z zs. ?xs = z # zs \\<and> ?P z ?y \\<and> list_all2 ?P zs ?ys)\n\ngoal (1 subgoal):\n 1. (\\<And>x' xs' z' zs'.\n        \\<lbrakk>xs = x' # xs'; zs = z' # zs';\n         list_all2 (\\<lambda>x y. ct_eq x (TSome y)) xs' zs';\n         list_all2 (\\<lambda>x. ct_eq (TSome x)) zs' ys\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types, lifting))"], ["proof (state)\nthis:\n  xs = x' # xs'\n  zs = z' # zs'\n  ct_list_eq xs' (to_ct_list zs')\n  ct_list_eq (to_ct_list zs') ys\n\ngoal (1 subgoal):\n 1. \\<And>zs.\n       \\<lbrakk>ct_list_eq xs (to_ct_list zs);\n        ct_list_eq (to_ct_list zs) (a # ys)\\<rbrakk>\n       \\<Longrightarrow> ct_list_eq xs (a # ys)", "thus \"ct_list_eq xs (a # ys)\""], ["proof (prove)\nusing this:\n  xs = x' # xs'\n  zs = z' # zs'\n  ct_list_eq xs' (to_ct_list zs')\n  ct_list_eq (to_ct_list zs') ys\n\ngoal (1 subgoal):\n 1. ct_list_eq xs (a # ys)", "using assms Cons ct_list_eq_def to_ct_list_def ct_eq_common_tsome"], ["proof (prove)\nusing this:\n  xs = x' # xs'\n  zs = z' # zs'\n  ct_list_eq xs' (to_ct_list zs')\n  ct_list_eq (to_ct_list zs') ys\n  ct_list_eq xs (to_ct_list zs)\n  ct_list_eq (to_ct_list zs) (a # ys)\n  ct_list_eq ?xs ys =\n  (\\<exists>zs.\n      ct_list_eq ?xs (to_ct_list zs) \\<and> ct_list_eq (to_ct_list zs) ys)\n  ct_list_eq ?ct1s ?ct2s = list_all2 ct_eq ?ct1s ?ct2s\n  to_ct_list ?ts = map TSome ?ts\n  ct_eq ?x ?y = (\\<exists>t. ct_eq ?x (TSome t) \\<and> ct_eq (TSome t) ?y)\n\ngoal (1 subgoal):\n 1. ct_list_eq xs (a # ys)", "by (metis list.simps(9) list_all2_Cons)"], ["proof (state)\nthis:\n  ct_list_eq xs (a # ys)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ct_list_eq xs (a # ys) =\n  (\\<exists>zs.\n      ct_list_eq xs (to_ct_list zs) \\<and>\n      ct_list_eq (to_ct_list zs) (a # ys))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ct_list_eq_cons_ct_list:\n  assumes \"ct_list_eq (to_ct_list as) (xs @ ys)\"\n  shows \"\\<exists>bs bs'. as = bs @ bs' \\<and> ct_list_eq (to_ct_list bs) xs \\<and> ct_list_eq (to_ct_list bs') ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>bs bs'.\n       as = bs @ bs' \\<and>\n       ct_list_eq (to_ct_list bs) xs \\<and> ct_list_eq (to_ct_list bs') ys", "using assms"], ["proof (prove)\nusing this:\n  ct_list_eq (to_ct_list as) (xs @ ys)\n\ngoal (1 subgoal):\n 1. \\<exists>bs bs'.\n       as = bs @ bs' \\<and>\n       ct_list_eq (to_ct_list bs) xs \\<and> ct_list_eq (to_ct_list bs') ys", "proof (induction xs arbitrary: as)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>as.\n       ct_list_eq (to_ct_list as) ([] @ ys) \\<Longrightarrow>\n       \\<exists>bs bs'.\n          as = bs @ bs' \\<and>\n          ct_list_eq (to_ct_list bs) [] \\<and>\n          ct_list_eq (to_ct_list bs') ys\n 2. \\<And>a xs as.\n       \\<lbrakk>\\<And>as.\n                   ct_list_eq (to_ct_list as) (xs @ ys) \\<Longrightarrow>\n                   \\<exists>bs bs'.\n                      as = bs @ bs' \\<and>\n                      ct_list_eq (to_ct_list bs) xs \\<and>\n                      ct_list_eq (to_ct_list bs') ys;\n        ct_list_eq (to_ct_list as) ((a # xs) @ ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs bs'.\n                            as = bs @ bs' \\<and>\n                            ct_list_eq (to_ct_list bs) (a # xs) \\<and>\n                            ct_list_eq (to_ct_list bs') ys", "case Nil"], ["proof (state)\nthis:\n  ct_list_eq (to_ct_list as) ([] @ ys)\n\ngoal (2 subgoals):\n 1. \\<And>as.\n       ct_list_eq (to_ct_list as) ([] @ ys) \\<Longrightarrow>\n       \\<exists>bs bs'.\n          as = bs @ bs' \\<and>\n          ct_list_eq (to_ct_list bs) [] \\<and>\n          ct_list_eq (to_ct_list bs') ys\n 2. \\<And>a xs as.\n       \\<lbrakk>\\<And>as.\n                   ct_list_eq (to_ct_list as) (xs @ ys) \\<Longrightarrow>\n                   \\<exists>bs bs'.\n                      as = bs @ bs' \\<and>\n                      ct_list_eq (to_ct_list bs) xs \\<and>\n                      ct_list_eq (to_ct_list bs') ys;\n        ct_list_eq (to_ct_list as) ((a # xs) @ ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs bs'.\n                            as = bs @ bs' \\<and>\n                            ct_list_eq (to_ct_list bs) (a # xs) \\<and>\n                            ct_list_eq (to_ct_list bs') ys", "thus ?case"], ["proof (prove)\nusing this:\n  ct_list_eq (to_ct_list as) ([] @ ys)\n\ngoal (1 subgoal):\n 1. \\<exists>bs bs'.\n       as = bs @ bs' \\<and>\n       ct_list_eq (to_ct_list bs) [] \\<and> ct_list_eq (to_ct_list bs') ys", "by (metis append_Nil ct_list_eq_ts_conv_eq list.simps(8) to_ct_list_def)"], ["proof (state)\nthis:\n  \\<exists>bs bs'.\n     as = bs @ bs' \\<and>\n     ct_list_eq (to_ct_list bs) [] \\<and> ct_list_eq (to_ct_list bs') ys\n\ngoal (1 subgoal):\n 1. \\<And>a xs as.\n       \\<lbrakk>\\<And>as.\n                   ct_list_eq (to_ct_list as) (xs @ ys) \\<Longrightarrow>\n                   \\<exists>bs bs'.\n                      as = bs @ bs' \\<and>\n                      ct_list_eq (to_ct_list bs) xs \\<and>\n                      ct_list_eq (to_ct_list bs') ys;\n        ct_list_eq (to_ct_list as) ((a # xs) @ ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs bs'.\n                            as = bs @ bs' \\<and>\n                            ct_list_eq (to_ct_list bs) (a # xs) \\<and>\n                            ct_list_eq (to_ct_list bs') ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs as.\n       \\<lbrakk>\\<And>as.\n                   ct_list_eq (to_ct_list as) (xs @ ys) \\<Longrightarrow>\n                   \\<exists>bs bs'.\n                      as = bs @ bs' \\<and>\n                      ct_list_eq (to_ct_list bs) xs \\<and>\n                      ct_list_eq (to_ct_list bs') ys;\n        ct_list_eq (to_ct_list as) ((a # xs) @ ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs bs'.\n                            as = bs @ bs' \\<and>\n                            ct_list_eq (to_ct_list bs) (a # xs) \\<and>\n                            ct_list_eq (to_ct_list bs') ys", "case (Cons a xs)"], ["proof (state)\nthis:\n  ct_list_eq (to_ct_list ?as) (xs @ ys) \\<Longrightarrow>\n  \\<exists>bs bs'.\n     ?as = bs @ bs' \\<and>\n     ct_list_eq (to_ct_list bs) xs \\<and> ct_list_eq (to_ct_list bs') ys\n  ct_list_eq (to_ct_list as) ((a # xs) @ ys)\n\ngoal (1 subgoal):\n 1. \\<And>a xs as.\n       \\<lbrakk>\\<And>as.\n                   ct_list_eq (to_ct_list as) (xs @ ys) \\<Longrightarrow>\n                   \\<exists>bs bs'.\n                      as = bs @ bs' \\<and>\n                      ct_list_eq (to_ct_list bs) xs \\<and>\n                      ct_list_eq (to_ct_list bs') ys;\n        ct_list_eq (to_ct_list as) ((a # xs) @ ys)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs bs'.\n                            as = bs @ bs' \\<and>\n                            ct_list_eq (to_ct_list bs) (a # xs) \\<and>\n                            ct_list_eq (to_ct_list bs') ys", "thus ?case"], ["proof (prove)\nusing this:\n  ct_list_eq (to_ct_list ?as) (xs @ ys) \\<Longrightarrow>\n  \\<exists>bs bs'.\n     ?as = bs @ bs' \\<and>\n     ct_list_eq (to_ct_list bs) xs \\<and> ct_list_eq (to_ct_list bs') ys\n  ct_list_eq (to_ct_list as) ((a # xs) @ ys)\n\ngoal (1 subgoal):\n 1. \\<exists>bs bs'.\n       as = bs @ bs' \\<and>\n       ct_list_eq (to_ct_list bs) (a # xs) \\<and>\n       ct_list_eq (to_ct_list bs') ys", "unfolding ct_list_eq_def to_ct_list_def list_all2_map1"], ["proof (prove)\nusing this:\n  list_all2 (\\<lambda>x. ct_eq (TSome x)) ?as (xs @ ys) \\<Longrightarrow>\n  \\<exists>bs bs'.\n     ?as = bs @ bs' \\<and>\n     list_all2 (\\<lambda>x. ct_eq (TSome x)) bs xs \\<and>\n     list_all2 (\\<lambda>x. ct_eq (TSome x)) bs' ys\n  list_all2 (\\<lambda>x. ct_eq (TSome x)) as ((a # xs) @ ys)\n\ngoal (1 subgoal):\n 1. \\<exists>bs bs'.\n       as = bs @ bs' \\<and>\n       list_all2 (\\<lambda>x. ct_eq (TSome x)) bs (a # xs) \\<and>\n       list_all2 (\\<lambda>x. ct_eq (TSome x)) bs' ys", "by (meson list_all2_append2)"], ["proof (state)\nthis:\n  \\<exists>bs bs'.\n     as = bs @ bs' \\<and>\n     ct_list_eq (to_ct_list bs) (a # xs) \\<and>\n     ct_list_eq (to_ct_list bs') ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ct_list_eq_cons_ct_list1:\n  assumes \"ct_list_eq (to_ct_list as) (xs @ (to_ct_list ys))\"\n  shows \"\\<exists>bs. as = bs @ ys \\<and> ct_list_eq (to_ct_list bs) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>bs. as = bs @ ys \\<and> ct_list_eq (to_ct_list bs) xs", "using ct_list_eq_cons_ct_list[OF assms] ct_list_eq_ts_conv_eq"], ["proof (prove)\nusing this:\n  \\<exists>bs bs'.\n     as = bs @ bs' \\<and>\n     ct_list_eq (to_ct_list bs) xs \\<and>\n     ct_list_eq (to_ct_list bs') (to_ct_list ys)\n  ct_list_eq (to_ct_list ?ts) (to_ct_list ?ts') = (?ts = ?ts')\n\ngoal (1 subgoal):\n 1. \\<exists>bs. as = bs @ ys \\<and> ct_list_eq (to_ct_list bs) xs", "by fastforce"], ["", "lemma ct_list_eq_shared:\n  assumes \"ct_list_eq xs (to_ct_list as)\"\n          \"ct_list_eq ys (to_ct_list as)\"\n  shows \"ct_list_eq xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_list_eq xs ys", "using assms ct_list_eq_def"], ["proof (prove)\nusing this:\n  ct_list_eq xs (to_ct_list as)\n  ct_list_eq ys (to_ct_list as)\n  ct_list_eq ?ct1s ?ct2s = list_all2 ct_eq ?ct1s ?ct2s\n\ngoal (1 subgoal):\n 1. ct_list_eq xs ys", "by (meson ct_list_eq_common_tsome_list ct_list_eq_commute)"], ["", "lemma ct_list_eq_take:\n  assumes \"ct_list_eq xs ys\"\n  shows \"ct_list_eq (take n xs) (take n ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_list_eq (take n xs) (take n ys)", "using assms list_all2_takeI"], ["proof (prove)\nusing this:\n  ct_list_eq xs ys\n  list_all2 ?P ?xs ?ys \\<Longrightarrow>\n  list_all2 ?P (take ?n ?xs) (take ?n ?ys)\n\ngoal (1 subgoal):\n 1. ct_list_eq (take n xs) (take n ys)", "unfolding ct_list_eq_def"], ["proof (prove)\nusing this:\n  list_all2 ct_eq xs ys\n  list_all2 ?P ?xs ?ys \\<Longrightarrow>\n  list_all2 ?P (take ?n ?xs) (take ?n ?ys)\n\ngoal (1 subgoal):\n 1. list_all2 ct_eq (take n xs) (take n ys)", "by blast"], ["", "lemma ct_prefixI [intro?]: \n  assumes \"ys = as @ zs\"\n          \"ct_list_eq as xs\"\n  shows \"ct_prefix xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_prefix xs ys", "using assms"], ["proof (prove)\nusing this:\n  ys = as @ zs\n  ct_list_eq as xs\n\ngoal (1 subgoal):\n 1. ct_prefix xs ys", "unfolding ct_prefix_def"], ["proof (prove)\nusing this:\n  ys = as @ zs\n  ct_list_eq as xs\n\ngoal (1 subgoal):\n 1. \\<exists>as bs. ys = as @ bs \\<and> ct_list_eq as xs", "by blast"], ["", "lemma ct_prefixE [elim?]:\n  assumes \"ct_prefix xs ys\"\n  obtains as zs where \"ys = as @ zs\" \"ct_list_eq as xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as zs.\n        \\<lbrakk>ys = as @ zs; ct_list_eq as xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  ct_prefix xs ys\n\ngoal (1 subgoal):\n 1. (\\<And>as zs.\n        \\<lbrakk>ys = as @ zs; ct_list_eq as xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ct_prefix_def"], ["proof (prove)\nusing this:\n  \\<exists>as bs. ys = as @ bs \\<and> ct_list_eq as xs\n\ngoal (1 subgoal):\n 1. (\\<And>as zs.\n        \\<lbrakk>ys = as @ zs; ct_list_eq as xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma ct_prefix_snoc [simp]: \"ct_prefix xs (ys @ [y]) = (ct_list_eq xs (ys@[y]) \\<or> ct_prefix xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_prefix xs (ys @ [y]) =\n    (ct_list_eq xs (ys @ [y]) \\<or> ct_prefix xs ys)", "proof (safe)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>ct_prefix xs (ys @ [y]); \\<not> ct_prefix xs ys\\<rbrakk>\n    \\<Longrightarrow> ct_list_eq xs (ys @ [y])\n 2. ct_list_eq xs (ys @ [y]) \\<Longrightarrow> ct_prefix xs (ys @ [y])\n 3. ct_prefix xs ys \\<Longrightarrow> ct_prefix xs (ys @ [y])", "assume \"ct_prefix xs (ys @ [y])\" \"\\<not> ct_prefix xs ys\""], ["proof (state)\nthis:\n  ct_prefix xs (ys @ [y])\n  \\<not> ct_prefix xs ys\n\ngoal (3 subgoals):\n 1. \\<lbrakk>ct_prefix xs (ys @ [y]); \\<not> ct_prefix xs ys\\<rbrakk>\n    \\<Longrightarrow> ct_list_eq xs (ys @ [y])\n 2. ct_list_eq xs (ys @ [y]) \\<Longrightarrow> ct_prefix xs (ys @ [y])\n 3. ct_prefix xs ys \\<Longrightarrow> ct_prefix xs (ys @ [y])", "thus \"ct_list_eq xs (ys @ [y])\""], ["proof (prove)\nusing this:\n  ct_prefix xs (ys @ [y])\n  \\<not> ct_prefix xs ys\n\ngoal (1 subgoal):\n 1. ct_list_eq xs (ys @ [y])", "unfolding ct_prefix_def ct_list_eq_def"], ["proof (prove)\nusing this:\n  \\<exists>as bs. ys @ [y] = as @ bs \\<and> list_all2 ct_eq as xs\n  \\<nexists>as bs. ys = as @ bs \\<and> list_all2 ct_eq as xs\n\ngoal (1 subgoal):\n 1. list_all2 ct_eq xs (ys @ [y])", "by (metis butlast_append butlast_snoc ct_eq_flip list.rel_flip)"], ["proof (state)\nthis:\n  ct_list_eq xs (ys @ [y])\n\ngoal (2 subgoals):\n 1. ct_list_eq xs (ys @ [y]) \\<Longrightarrow> ct_prefix xs (ys @ [y])\n 2. ct_prefix xs ys \\<Longrightarrow> ct_prefix xs (ys @ [y])", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. ct_list_eq xs (ys @ [y]) \\<Longrightarrow> ct_prefix xs (ys @ [y])\n 2. ct_prefix xs ys \\<Longrightarrow> ct_prefix xs (ys @ [y])", "assume \"ct_list_eq xs (ys @ [y])\""], ["proof (state)\nthis:\n  ct_list_eq xs (ys @ [y])\n\ngoal (2 subgoals):\n 1. ct_list_eq xs (ys @ [y]) \\<Longrightarrow> ct_prefix xs (ys @ [y])\n 2. ct_prefix xs ys \\<Longrightarrow> ct_prefix xs (ys @ [y])", "thus \"ct_prefix xs (ys @ [y])\""], ["proof (prove)\nusing this:\n  ct_list_eq xs (ys @ [y])\n\ngoal (1 subgoal):\n 1. ct_prefix xs (ys @ [y])", "using ct_list_eq_commute ct_prefixI"], ["proof (prove)\nusing this:\n  ct_list_eq xs (ys @ [y])\n  ct_list_eq ?xs ?ys \\<Longrightarrow> ct_list_eq ?ys ?xs\n  \\<lbrakk>?ys = ?as @ ?zs; ct_list_eq ?as ?xs\\<rbrakk>\n  \\<Longrightarrow> ct_prefix ?xs ?ys\n\ngoal (1 subgoal):\n 1. ct_prefix xs (ys @ [y])", "by fastforce"], ["proof (state)\nthis:\n  ct_prefix xs (ys @ [y])\n\ngoal (1 subgoal):\n 1. ct_prefix xs ys \\<Longrightarrow> ct_prefix xs (ys @ [y])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ct_prefix xs ys \\<Longrightarrow> ct_prefix xs (ys @ [y])", "assume \"ct_prefix xs ys\""], ["proof (state)\nthis:\n  ct_prefix xs ys\n\ngoal (1 subgoal):\n 1. ct_prefix xs ys \\<Longrightarrow> ct_prefix xs (ys @ [y])", "thus \"ct_prefix xs (ys @ [y])\""], ["proof (prove)\nusing this:\n  ct_prefix xs ys\n\ngoal (1 subgoal):\n 1. ct_prefix xs (ys @ [y])", "using append_assoc"], ["proof (prove)\nusing this:\n  ct_prefix xs ys\n  (?xs @ ?ys) @ ?zs = ?xs @ ?ys @ ?zs\n\ngoal (1 subgoal):\n 1. ct_prefix xs (ys @ [y])", "unfolding ct_prefix_def"], ["proof (prove)\nusing this:\n  \\<exists>as bs. ys = as @ bs \\<and> ct_list_eq as xs\n  (?xs @ ?ys) @ ?zs = ?xs @ ?ys @ ?zs\n\ngoal (1 subgoal):\n 1. \\<exists>as bs. ys @ [y] = as @ bs \\<and> ct_list_eq as xs", "by blast"], ["proof (state)\nthis:\n  ct_prefix xs (ys @ [y])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ct_prefix_nil:\"ct_prefix [] xs\"\n                    \"\\<not>ct_prefix (x # xs) []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_prefix [] xs &&& \\<not> ct_prefix (x # xs) []", "by (simp_all add: ct_prefix_def ct_list_eq_def)"], ["", "lemma Cons_ct_prefix_Cons[simp]: \"ct_prefix (x # xs) (y # ys) = ((ct_eq x y) \\<and> ct_prefix xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_prefix (x # xs) (y # ys) = (ct_eq x y \\<and> ct_prefix xs ys)", "proof (safe)"], ["proof (state)\ngoal (3 subgoals):\n 1. ct_prefix (x # xs) (y # ys) \\<Longrightarrow> ct_eq x y\n 2. ct_prefix (x # xs) (y # ys) \\<Longrightarrow> ct_prefix xs ys\n 3. \\<lbrakk>ct_eq x y; ct_prefix xs ys\\<rbrakk>\n    \\<Longrightarrow> ct_prefix (x # xs) (y # ys)", "assume \"ct_prefix (x # xs) (y # ys)\""], ["proof (state)\nthis:\n  ct_prefix (x # xs) (y # ys)\n\ngoal (3 subgoals):\n 1. ct_prefix (x # xs) (y # ys) \\<Longrightarrow> ct_eq x y\n 2. ct_prefix (x # xs) (y # ys) \\<Longrightarrow> ct_prefix xs ys\n 3. \\<lbrakk>ct_eq x y; ct_prefix xs ys\\<rbrakk>\n    \\<Longrightarrow> ct_prefix (x # xs) (y # ys)", "thus \"ct_eq x y\""], ["proof (prove)\nusing this:\n  ct_prefix (x # xs) (y # ys)\n\ngoal (1 subgoal):\n 1. ct_eq x y", "unfolding ct_prefix_def ct_list_eq_def"], ["proof (prove)\nusing this:\n  \\<exists>as bs. y # ys = as @ bs \\<and> list_all2 ct_eq as (x # xs)\n\ngoal (1 subgoal):\n 1. ct_eq x y", "by (metis ct_eq_commute hd_append2 list.sel(1) list.simps(3) list_all2_Cons2)"], ["proof (state)\nthis:\n  ct_eq x y\n\ngoal (2 subgoals):\n 1. ct_prefix (x # xs) (y # ys) \\<Longrightarrow> ct_prefix xs ys\n 2. \\<lbrakk>ct_eq x y; ct_prefix xs ys\\<rbrakk>\n    \\<Longrightarrow> ct_prefix (x # xs) (y # ys)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. ct_prefix (x # xs) (y # ys) \\<Longrightarrow> ct_prefix xs ys\n 2. \\<lbrakk>ct_eq x y; ct_prefix xs ys\\<rbrakk>\n    \\<Longrightarrow> ct_prefix (x # xs) (y # ys)", "assume \"ct_prefix (x # xs) (y # ys)\""], ["proof (state)\nthis:\n  ct_prefix (x # xs) (y # ys)\n\ngoal (2 subgoals):\n 1. ct_prefix (x # xs) (y # ys) \\<Longrightarrow> ct_prefix xs ys\n 2. \\<lbrakk>ct_eq x y; ct_prefix xs ys\\<rbrakk>\n    \\<Longrightarrow> ct_prefix (x # xs) (y # ys)", "thus \"ct_prefix xs ys\""], ["proof (prove)\nusing this:\n  ct_prefix (x # xs) (y # ys)\n\ngoal (1 subgoal):\n 1. ct_prefix xs ys", "unfolding ct_prefix_def ct_list_eq_def"], ["proof (prove)\nusing this:\n  \\<exists>as bs. y # ys = as @ bs \\<and> list_all2 ct_eq as (x # xs)\n\ngoal (1 subgoal):\n 1. \\<exists>as bs. ys = as @ bs \\<and> list_all2 ct_eq as xs", "by (metis list.rel_distinct(1) list.sel(3) list_all2_Cons2 tl_append2)"], ["proof (state)\nthis:\n  ct_prefix xs ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ct_eq x y; ct_prefix xs ys\\<rbrakk>\n    \\<Longrightarrow> ct_prefix (x # xs) (y # ys)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ct_eq x y; ct_prefix xs ys\\<rbrakk>\n    \\<Longrightarrow> ct_prefix (x # xs) (y # ys)", "assume \"ct_eq x y\" \"ct_prefix xs ys\""], ["proof (state)\nthis:\n  ct_eq x y\n  ct_prefix xs ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ct_eq x y; ct_prefix xs ys\\<rbrakk>\n    \\<Longrightarrow> ct_prefix (x # xs) (y # ys)", "thus \"ct_prefix (x # xs) (y # ys)\""], ["proof (prove)\nusing this:\n  ct_eq x y\n  ct_prefix xs ys\n\ngoal (1 subgoal):\n 1. ct_prefix (x # xs) (y # ys)", "unfolding ct_prefix_def ct_list_eq_def"], ["proof (prove)\nusing this:\n  ct_eq x y\n  \\<exists>as bs. ys = as @ bs \\<and> list_all2 ct_eq as xs\n\ngoal (1 subgoal):\n 1. \\<exists>as bs. y # ys = as @ bs \\<and> list_all2 ct_eq as (x # xs)", "by (metis (full_types) append_Cons ct_list_eq_commute ct_list_eq_def list.rel_inject(2))"], ["proof (state)\nthis:\n  ct_prefix (x # xs) (y # ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ct_prefix_code [code]:\n  \"ct_prefix [] xs = True\"\n  \"ct_prefix (x # xs) [] = False\"\n  \"ct_prefix (x # xs) (y # ys) = ((ct_eq x y) \\<and> ct_prefix xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_prefix [] xs = True &&&\n    ct_prefix (x # xs) [] = False &&&\n    ct_prefix (x # xs) (y # ys) = (ct_eq x y \\<and> ct_prefix xs ys)", "by (simp_all add: ct_prefix_nil)"], ["", "lemma ct_suffix_to_ct_prefix [code]: \"ct_suffix xs ys = ct_prefix (rev xs) (rev ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix xs ys = ct_prefix (rev xs) (rev ys)", "unfolding ct_suffix_def ct_prefix_def ct_list_eq_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>as bs. ys = as @ bs \\<and> list_all2 ct_eq bs xs) =\n    (\\<exists>as bs. rev ys = as @ bs \\<and> list_all2 ct_eq as (rev xs))", "by (metis list_all2_rev1 rev_append rev_rev_ident)"], ["", "lemma inj_TSome: \"inj TSome\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj TSome", "by (meson ct.inject injI)"], ["", "lemma to_ct_list_append:\n  assumes \"to_ct_list ts = as@bs\"\n  shows \"\\<exists>as'. to_ct_list as' = as\"\n        \"\\<exists>bs'. to_ct_list bs' = bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as'. to_ct_list as' = as &&& \\<exists>bs'. to_ct_list bs' = bs", "using assms"], ["proof (prove)\nusing this:\n  to_ct_list ts = as @ bs\n\ngoal (1 subgoal):\n 1. \\<exists>as'. to_ct_list as' = as &&& \\<exists>bs'. to_ct_list bs' = bs", "proof (induct as arbitrary: ts)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>ts.\n       to_ct_list ts = [] @ bs \\<Longrightarrow>\n       \\<exists>as'. to_ct_list as' = []\n 2. \\<And>ts.\n       to_ct_list ts = [] @ bs \\<Longrightarrow>\n       \\<exists>bs'. to_ct_list bs' = bs\n 3. \\<And>a as ts.\n       \\<lbrakk>\\<And>ts.\n                   to_ct_list ts = as @ bs \\<Longrightarrow>\n                   \\<exists>as'. to_ct_list as' = as;\n        \\<And>ts.\n           to_ct_list ts = as @ bs \\<Longrightarrow>\n           \\<exists>bs'. to_ct_list bs' = bs;\n        to_ct_list ts = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'. to_ct_list as' = a # as\n 4. \\<And>a as ts.\n       \\<lbrakk>\\<And>ts.\n                   to_ct_list ts = as @ bs \\<Longrightarrow>\n                   \\<exists>as'. to_ct_list as' = as;\n        \\<And>ts.\n           to_ct_list ts = as @ bs \\<Longrightarrow>\n           \\<exists>bs'. to_ct_list bs' = bs;\n        to_ct_list ts = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'. to_ct_list bs' = bs", "fix ts"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>ts.\n       to_ct_list ts = [] @ bs \\<Longrightarrow>\n       \\<exists>as'. to_ct_list as' = []\n 2. \\<And>ts.\n       to_ct_list ts = [] @ bs \\<Longrightarrow>\n       \\<exists>bs'. to_ct_list bs' = bs\n 3. \\<And>a as ts.\n       \\<lbrakk>\\<And>ts.\n                   to_ct_list ts = as @ bs \\<Longrightarrow>\n                   \\<exists>as'. to_ct_list as' = as;\n        \\<And>ts.\n           to_ct_list ts = as @ bs \\<Longrightarrow>\n           \\<exists>bs'. to_ct_list bs' = bs;\n        to_ct_list ts = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'. to_ct_list as' = a # as\n 4. \\<And>a as ts.\n       \\<lbrakk>\\<And>ts.\n                   to_ct_list ts = as @ bs \\<Longrightarrow>\n                   \\<exists>as'. to_ct_list as' = as;\n        \\<And>ts.\n           to_ct_list ts = as @ bs \\<Longrightarrow>\n           \\<exists>bs'. to_ct_list bs' = bs;\n        to_ct_list ts = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'. to_ct_list bs' = bs", "assume \"to_ct_list ts = [] @ bs\""], ["proof (state)\nthis:\n  to_ct_list ts = [] @ bs\n\ngoal (4 subgoals):\n 1. \\<And>ts.\n       to_ct_list ts = [] @ bs \\<Longrightarrow>\n       \\<exists>as'. to_ct_list as' = []\n 2. \\<And>ts.\n       to_ct_list ts = [] @ bs \\<Longrightarrow>\n       \\<exists>bs'. to_ct_list bs' = bs\n 3. \\<And>a as ts.\n       \\<lbrakk>\\<And>ts.\n                   to_ct_list ts = as @ bs \\<Longrightarrow>\n                   \\<exists>as'. to_ct_list as' = as;\n        \\<And>ts.\n           to_ct_list ts = as @ bs \\<Longrightarrow>\n           \\<exists>bs'. to_ct_list bs' = bs;\n        to_ct_list ts = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'. to_ct_list as' = a # as\n 4. \\<And>a as ts.\n       \\<lbrakk>\\<And>ts.\n                   to_ct_list ts = as @ bs \\<Longrightarrow>\n                   \\<exists>as'. to_ct_list as' = as;\n        \\<And>ts.\n           to_ct_list ts = as @ bs \\<Longrightarrow>\n           \\<exists>bs'. to_ct_list bs' = bs;\n        to_ct_list ts = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'. to_ct_list bs' = bs", "thus \"\\<exists>as'. to_ct_list as' = []\"\n       \"\\<exists>bs'. to_ct_list bs' = bs\""], ["proof (prove)\nusing this:\n  to_ct_list ts = [] @ bs\n\ngoal (1 subgoal):\n 1. \\<exists>as'. to_ct_list as' = [] &&& \\<exists>bs'. to_ct_list bs' = bs", "unfolding to_ct_list_def"], ["proof (prove)\nusing this:\n  map TSome ts = [] @ bs\n\ngoal (1 subgoal):\n 1. \\<exists>as'. map TSome as' = [] &&& \\<exists>bs'. map TSome bs' = bs", "by auto"], ["proof (state)\nthis:\n  \\<exists>as'. to_ct_list as' = []\n  \\<exists>bs'. to_ct_list bs' = bs\n\ngoal (2 subgoals):\n 1. \\<And>a as ts.\n       \\<lbrakk>\\<And>ts.\n                   to_ct_list ts = as @ bs \\<Longrightarrow>\n                   \\<exists>as'. to_ct_list as' = as;\n        \\<And>ts.\n           to_ct_list ts = as @ bs \\<Longrightarrow>\n           \\<exists>bs'. to_ct_list bs' = bs;\n        to_ct_list ts = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'. to_ct_list as' = a # as\n 2. \\<And>a as ts.\n       \\<lbrakk>\\<And>ts.\n                   to_ct_list ts = as @ bs \\<Longrightarrow>\n                   \\<exists>as'. to_ct_list as' = as;\n        \\<And>ts.\n           to_ct_list ts = as @ bs \\<Longrightarrow>\n           \\<exists>bs'. to_ct_list bs' = bs;\n        to_ct_list ts = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'. to_ct_list bs' = bs", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a as ts.\n       \\<lbrakk>\\<And>ts.\n                   to_ct_list ts = as @ bs \\<Longrightarrow>\n                   \\<exists>as'. to_ct_list as' = as;\n        \\<And>ts.\n           to_ct_list ts = as @ bs \\<Longrightarrow>\n           \\<exists>bs'. to_ct_list bs' = bs;\n        to_ct_list ts = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'. to_ct_list as' = a # as\n 2. \\<And>a as ts.\n       \\<lbrakk>\\<And>ts.\n                   to_ct_list ts = as @ bs \\<Longrightarrow>\n                   \\<exists>as'. to_ct_list as' = as;\n        \\<And>ts.\n           to_ct_list ts = as @ bs \\<Longrightarrow>\n           \\<exists>bs'. to_ct_list bs' = bs;\n        to_ct_list ts = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'. to_ct_list bs' = bs", "case (Cons a as)"], ["proof (state)\nthis:\n  to_ct_list ?ts = as @ bs \\<Longrightarrow>\n  \\<exists>as'. to_ct_list as' = as\n  to_ct_list ?ts = as @ bs \\<Longrightarrow>\n  \\<exists>bs'. to_ct_list bs' = bs\n\ngoal (2 subgoals):\n 1. \\<And>a as ts.\n       \\<lbrakk>\\<And>ts.\n                   to_ct_list ts = as @ bs \\<Longrightarrow>\n                   \\<exists>as'. to_ct_list as' = as;\n        \\<And>ts.\n           to_ct_list ts = as @ bs \\<Longrightarrow>\n           \\<exists>bs'. to_ct_list bs' = bs;\n        to_ct_list ts = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'. to_ct_list as' = a # as\n 2. \\<And>a as ts.\n       \\<lbrakk>\\<And>ts.\n                   to_ct_list ts = as @ bs \\<Longrightarrow>\n                   \\<exists>as'. to_ct_list as' = as;\n        \\<And>ts.\n           to_ct_list ts = as @ bs \\<Longrightarrow>\n           \\<exists>bs'. to_ct_list bs' = bs;\n        to_ct_list ts = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'. to_ct_list bs' = bs", "fix ts"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a as ts.\n       \\<lbrakk>\\<And>ts.\n                   to_ct_list ts = as @ bs \\<Longrightarrow>\n                   \\<exists>as'. to_ct_list as' = as;\n        \\<And>ts.\n           to_ct_list ts = as @ bs \\<Longrightarrow>\n           \\<exists>bs'. to_ct_list bs' = bs;\n        to_ct_list ts = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'. to_ct_list as' = a # as\n 2. \\<And>a as ts.\n       \\<lbrakk>\\<And>ts.\n                   to_ct_list ts = as @ bs \\<Longrightarrow>\n                   \\<exists>as'. to_ct_list as' = as;\n        \\<And>ts.\n           to_ct_list ts = as @ bs \\<Longrightarrow>\n           \\<exists>bs'. to_ct_list bs' = bs;\n        to_ct_list ts = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'. to_ct_list bs' = bs", "assume local_assms:\"to_ct_list ts = (a # as) @ bs\""], ["proof (state)\nthis:\n  to_ct_list ts = (a # as) @ bs\n\ngoal (2 subgoals):\n 1. \\<And>a as ts.\n       \\<lbrakk>\\<And>ts.\n                   to_ct_list ts = as @ bs \\<Longrightarrow>\n                   \\<exists>as'. to_ct_list as' = as;\n        \\<And>ts.\n           to_ct_list ts = as @ bs \\<Longrightarrow>\n           \\<exists>bs'. to_ct_list bs' = bs;\n        to_ct_list ts = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'. to_ct_list as' = a # as\n 2. \\<And>a as ts.\n       \\<lbrakk>\\<And>ts.\n                   to_ct_list ts = as @ bs \\<Longrightarrow>\n                   \\<exists>as'. to_ct_list as' = as;\n        \\<And>ts.\n           to_ct_list ts = as @ bs \\<Longrightarrow>\n           \\<exists>bs'. to_ct_list bs' = bs;\n        to_ct_list ts = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'. to_ct_list bs' = bs", "then"], ["proof (chain)\npicking this:\n  to_ct_list ts = (a # as) @ bs", "obtain t' ts' where \"ts = t'#ts'\""], ["proof (prove)\nusing this:\n  to_ct_list ts = (a # as) @ bs\n\ngoal (1 subgoal):\n 1. (\\<And>t' ts'. ts = t' # ts' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding to_ct_list_def"], ["proof (prove)\nusing this:\n  map TSome ts = (a # as) @ bs\n\ngoal (1 subgoal):\n 1. (\\<And>t' ts'. ts = t' # ts' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ts = t' # ts'\n\ngoal (2 subgoals):\n 1. \\<And>a as ts.\n       \\<lbrakk>\\<And>ts.\n                   to_ct_list ts = as @ bs \\<Longrightarrow>\n                   \\<exists>as'. to_ct_list as' = as;\n        \\<And>ts.\n           to_ct_list ts = as @ bs \\<Longrightarrow>\n           \\<exists>bs'. to_ct_list bs' = bs;\n        to_ct_list ts = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>as'. to_ct_list as' = a # as\n 2. \\<And>a as ts.\n       \\<lbrakk>\\<And>ts.\n                   to_ct_list ts = as @ bs \\<Longrightarrow>\n                   \\<exists>as'. to_ct_list as' = as;\n        \\<And>ts.\n           to_ct_list ts = as @ bs \\<Longrightarrow>\n           \\<exists>bs'. to_ct_list bs' = bs;\n        to_ct_list ts = (a # as) @ bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'. to_ct_list bs' = bs", "thus \"\\<exists>as'. to_ct_list as' = a # as\"\n       \"\\<exists>as'. to_ct_list as' = bs\""], ["proof (prove)\nusing this:\n  ts = t' # ts'\n\ngoal (1 subgoal):\n 1. \\<exists>as'. to_ct_list as' = a # as &&&\n    \\<exists>as'. to_ct_list as' = bs", "using Cons local_assms"], ["proof (prove)\nusing this:\n  ts = t' # ts'\n  to_ct_list ?ts = as @ bs \\<Longrightarrow>\n  \\<exists>as'. to_ct_list as' = as\n  to_ct_list ?ts = as @ bs \\<Longrightarrow>\n  \\<exists>bs'. to_ct_list bs' = bs\n  to_ct_list ts = (a # as) @ bs\n\ngoal (1 subgoal):\n 1. \\<exists>as'. to_ct_list as' = a # as &&&\n    \\<exists>as'. to_ct_list as' = bs", "unfolding to_ct_list_def"], ["proof (prove)\nusing this:\n  ts = t' # ts'\n  map TSome ?ts = as @ bs \\<Longrightarrow> \\<exists>as'. map TSome as' = as\n  map TSome ?ts = as @ bs \\<Longrightarrow> \\<exists>bs'. map TSome bs' = bs\n  map TSome ts = (a # as) @ bs\n\ngoal (1 subgoal):\n 1. \\<exists>as'. map TSome as' = a # as &&&\n    \\<exists>as'. map TSome as' = bs", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ts = t' # ts';\n     \\<And>ts.\n        map TSome ts = as @ bs \\<Longrightarrow>\n        \\<exists>as'. map TSome as' = as;\n     \\<And>ts.\n        map TSome ts = as @ bs \\<Longrightarrow>\n        \\<exists>bs'. map TSome bs' = bs;\n     TSome t' = a \\<and> map TSome ts' = as @ bs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as'. map TSome as' = a # as\n 2. \\<lbrakk>ts = t' # ts';\n     \\<And>ts.\n        map TSome ts = as @ bs \\<Longrightarrow>\n        \\<exists>as'. map TSome as' = as;\n     \\<And>ts.\n        map TSome ts = as @ bs \\<Longrightarrow>\n        \\<exists>bs'. map TSome bs' = bs;\n     TSome t' = a \\<and> map TSome ts' = as @ bs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as'. map TSome as' = bs", "apply (metis list.simps(9))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ts = t' # ts';\n     \\<And>ts.\n        map TSome ts = as @ bs \\<Longrightarrow>\n        \\<exists>as'. map TSome as' = as;\n     \\<And>ts.\n        map TSome ts = as @ bs \\<Longrightarrow>\n        \\<exists>bs'. map TSome bs' = bs;\n     TSome t' = a \\<and> map TSome ts' = as @ bs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as'. map TSome as' = bs", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>as'. to_ct_list as' = a # as\n  \\<exists>as'. to_ct_list as' = bs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ct_suffixI [intro?]: \n  assumes \"ys = as @ zs\"\n          \"ct_list_eq zs xs\"\n  shows \"ct_suffix xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix xs ys", "using assms"], ["proof (prove)\nusing this:\n  ys = as @ zs\n  ct_list_eq zs xs\n\ngoal (1 subgoal):\n 1. ct_suffix xs ys", "unfolding ct_suffix_def"], ["proof (prove)\nusing this:\n  ys = as @ zs\n  ct_list_eq zs xs\n\ngoal (1 subgoal):\n 1. \\<exists>as bs. ys = as @ bs \\<and> ct_list_eq bs xs", "by blast"], ["", "lemma ct_suffixE [elim?]:\n  assumes \"ct_suffix xs ys\"\n  obtains as zs where \"ys = as @ zs\" \"ct_list_eq zs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as zs.\n        \\<lbrakk>ys = as @ zs; ct_list_eq zs xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  ct_suffix xs ys\n\ngoal (1 subgoal):\n 1. (\\<And>as zs.\n        \\<lbrakk>ys = as @ zs; ct_list_eq zs xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ct_suffix_def"], ["proof (prove)\nusing this:\n  \\<exists>as bs. ys = as @ bs \\<and> ct_list_eq bs xs\n\ngoal (1 subgoal):\n 1. (\\<And>as zs.\n        \\<lbrakk>ys = as @ zs; ct_list_eq zs xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma ct_suffix_nil: \"ct_suffix [] ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix [] ts", "unfolding ct_suffix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as bs. ts = as @ bs \\<and> ct_list_eq bs []", "using ct_list_eq_refl"], ["proof (prove)\nusing this:\n  ct_list_eq ?xs ?xs\n\ngoal (1 subgoal):\n 1. \\<exists>as bs. ts = as @ bs \\<and> ct_list_eq bs []", "by auto"], ["", "lemma ct_suffix_refl: \"ct_suffix ts ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix ts ts", "unfolding ct_suffix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as bs. ts = as @ bs \\<and> ct_list_eq bs ts", "using ct_list_eq_refl"], ["proof (prove)\nusing this:\n  ct_list_eq ?xs ?xs\n\ngoal (1 subgoal):\n 1. \\<exists>as bs. ts = as @ bs \\<and> ct_list_eq bs ts", "by auto"], ["", "lemma ct_suffix_length:\n  assumes \"ct_suffix ts ts'\"\n  shows \"length ts \\<le> length ts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ts \\<le> length ts'", "using assms list_all2_lengthD"], ["proof (prove)\nusing this:\n  ct_suffix ts ts'\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n\ngoal (1 subgoal):\n 1. length ts \\<le> length ts'", "unfolding ct_suffix_def ct_list_eq_def"], ["proof (prove)\nusing this:\n  \\<exists>as bs. ts' = as @ bs \\<and> list_all2 ct_eq bs ts\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n\ngoal (1 subgoal):\n 1. length ts \\<le> length ts'", "by fastforce"], ["", "lemma ct_suffix_take:\n  assumes \"ct_suffix ts ts'\"\n  shows \"ct_suffix ((take (length ts - n) ts)) ((take (length ts' - n) ts'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix (take (length ts - n) ts) (take (length ts' - n) ts')", "using assms ct_list_eq_take append_eq_conv_conj"], ["proof (prove)\nusing this:\n  ct_suffix ts ts'\n  ct_list_eq ?xs ?ys \\<Longrightarrow>\n  ct_list_eq (take ?n ?xs) (take ?n ?ys)\n  (?xs @ ?ys = ?zs) =\n  (?xs = take (length ?xs) ?zs \\<and> ?ys = drop (length ?xs) ?zs)\n\ngoal (1 subgoal):\n 1. ct_suffix (take (length ts - n) ts) (take (length ts' - n) ts')", "unfolding ct_suffix_def"], ["proof (prove)\nusing this:\n  \\<exists>as bs. ts' = as @ bs \\<and> ct_list_eq bs ts\n  ct_list_eq ?xs ?ys \\<Longrightarrow>\n  ct_list_eq (take ?n ?xs) (take ?n ?ys)\n  (?xs @ ?ys = ?zs) =\n  (?xs = take (length ?xs) ?zs \\<and> ?ys = drop (length ?xs) ?zs)\n\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       take (length ts' - n) ts' = as @ bs \\<and>\n       ct_list_eq bs (take (length ts - n) ts)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>as bs. ts' = as @ bs \\<and> ct_list_eq bs ts;\n     \\<And>xs ys n.\n        ct_list_eq xs ys \\<Longrightarrow>\n        ct_list_eq (take n xs) (take n ys);\n     \\<And>xs ys zs.\n        (xs @ ys = zs) =\n        (xs = take (length xs) zs \\<and> ys = drop (length xs) zs)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         take (length ts' - n) ts' = as @ bs \\<and>\n                         ct_list_eq bs (take (length ts - n) ts)", "assume \"\\<exists>as bs. ts' = as @ bs \\<and> ct_list_eq bs ts\""], ["proof (state)\nthis:\n  \\<exists>as bs. ts' = as @ bs \\<and> ct_list_eq bs ts\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>as bs. ts' = as @ bs \\<and> ct_list_eq bs ts;\n     \\<And>xs ys n.\n        ct_list_eq xs ys \\<Longrightarrow>\n        ct_list_eq (take n xs) (take n ys);\n     \\<And>xs ys zs.\n        (xs @ ys = zs) =\n        (xs = take (length xs) zs \\<and> ys = drop (length xs) zs)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         take (length ts' - n) ts' = as @ bs \\<and>\n                         ct_list_eq bs (take (length ts - n) ts)", "then"], ["proof (chain)\npicking this:\n  \\<exists>as bs. ts' = as @ bs \\<and> ct_list_eq bs ts", "obtain ccs :: \"ct list\" and ccsa :: \"ct list\" where\n    f1: \"ts' = ccs @ ccsa \\<and> ct_list_eq ccsa ts\""], ["proof (prove)\nusing this:\n  \\<exists>as bs. ts' = as @ bs \\<and> ct_list_eq bs ts\n\ngoal (1 subgoal):\n 1. (\\<And>ccs ccsa.\n        ts' = ccs @ ccsa \\<and> ct_list_eq ccsa ts \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  ts' = ccs @ ccsa \\<and> ct_list_eq ccsa ts\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>as bs. ts' = as @ bs \\<and> ct_list_eq bs ts;\n     \\<And>xs ys n.\n        ct_list_eq xs ys \\<Longrightarrow>\n        ct_list_eq (take n xs) (take n ys);\n     \\<And>xs ys zs.\n        (xs @ ys = zs) =\n        (xs = take (length xs) zs \\<and> ys = drop (length xs) zs)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         take (length ts' - n) ts' = as @ bs \\<and>\n                         ct_list_eq bs (take (length ts - n) ts)", "then"], ["proof (chain)\npicking this:\n  ts' = ccs @ ccsa \\<and> ct_list_eq ccsa ts", "have f2: \"length ccsa = length ts\""], ["proof (prove)\nusing this:\n  ts' = ccs @ ccsa \\<and> ct_list_eq ccsa ts\n\ngoal (1 subgoal):\n 1. length ccsa = length ts", "by (meson ct_list_eq_length)"], ["proof (state)\nthis:\n  length ccsa = length ts\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>as bs. ts' = as @ bs \\<and> ct_list_eq bs ts;\n     \\<And>xs ys n.\n        ct_list_eq xs ys \\<Longrightarrow>\n        ct_list_eq (take n xs) (take n ys);\n     \\<And>xs ys zs.\n        (xs @ ys = zs) =\n        (xs = take (length xs) zs \\<and> ys = drop (length xs) zs)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         take (length ts' - n) ts' = as @ bs \\<and>\n                         ct_list_eq bs (take (length ts - n) ts)", "have \"\\<And>n. ct_list_eq (take n ccsa) (take n ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. ct_list_eq (take n ccsa) (take n ts)", "using f1"], ["proof (prove)\nusing this:\n  ts' = ccs @ ccsa \\<and> ct_list_eq ccsa ts\n\ngoal (1 subgoal):\n 1. \\<And>n. ct_list_eq (take n ccsa) (take n ts)", "by (meson ct_list_eq_take)"], ["proof (state)\nthis:\n  ct_list_eq (take ?n ccsa) (take ?n ts)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>as bs. ts' = as @ bs \\<and> ct_list_eq bs ts;\n     \\<And>xs ys n.\n        ct_list_eq xs ys \\<Longrightarrow>\n        ct_list_eq (take n xs) (take n ys);\n     \\<And>xs ys zs.\n        (xs @ ys = zs) =\n        (xs = take (length xs) zs \\<and> ys = drop (length xs) zs)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         take (length ts' - n) ts' = as @ bs \\<and>\n                         ct_list_eq bs (take (length ts - n) ts)", "then"], ["proof (chain)\npicking this:\n  ct_list_eq (take ?n ccsa) (take ?n ts)", "show \"\\<exists>cs csa. take (length ts' - n) ts' = cs @ csa \\<and> ct_list_eq csa (take (length ts - n) ts)\""], ["proof (prove)\nusing this:\n  ct_list_eq (take ?n ccsa) (take ?n ts)\n\ngoal (1 subgoal):\n 1. \\<exists>cs csa.\n       take (length ts' - n) ts' = cs @ csa \\<and>\n       ct_list_eq csa (take (length ts - n) ts)", "using f2 f1"], ["proof (prove)\nusing this:\n  ct_list_eq (take ?n ccsa) (take ?n ts)\n  length ccsa = length ts\n  ts' = ccs @ ccsa \\<and> ct_list_eq ccsa ts\n\ngoal (1 subgoal):\n 1. \\<exists>cs csa.\n       take (length ts' - n) ts' = cs @ csa \\<and>\n       ct_list_eq csa (take (length ts - n) ts)", "by auto"], ["proof (state)\nthis:\n  \\<exists>cs csa.\n     take (length ts' - n) ts' = cs @ csa \\<and>\n     ct_list_eq csa (take (length ts - n) ts)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ct_suffix_ts_conv_suffix:\n  \"ct_suffix (to_ct_list ts) (to_ct_list ts') = suffix ts ts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix (to_ct_list ts) (to_ct_list ts') = suffix ts ts'", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. ct_suffix (to_ct_list ts) (to_ct_list ts') \\<Longrightarrow>\n    suffix ts ts'\n 2. suffix ts ts' \\<Longrightarrow>\n    ct_suffix (to_ct_list ts) (to_ct_list ts')", "assume \"ct_suffix (to_ct_list ts) (to_ct_list ts')\""], ["proof (state)\nthis:\n  ct_suffix (to_ct_list ts) (to_ct_list ts')\n\ngoal (2 subgoals):\n 1. ct_suffix (to_ct_list ts) (to_ct_list ts') \\<Longrightarrow>\n    suffix ts ts'\n 2. suffix ts ts' \\<Longrightarrow>\n    ct_suffix (to_ct_list ts) (to_ct_list ts')", "then"], ["proof (chain)\npicking this:\n  ct_suffix (to_ct_list ts) (to_ct_list ts')", "obtain as bs where \"to_ct_list ts' = (to_ct_list as) @ (to_ct_list bs)\"\n                          \"ct_list_eq (to_ct_list bs) (to_ct_list ts)\""], ["proof (prove)\nusing this:\n  ct_suffix (to_ct_list ts) (to_ct_list ts')\n\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        \\<lbrakk>to_ct_list ts' = to_ct_list as @ to_ct_list bs;\n         ct_list_eq (to_ct_list bs) (to_ct_list ts)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using to_ct_list_append"], ["proof (prove)\nusing this:\n  ct_suffix (to_ct_list ts) (to_ct_list ts')\n  to_ct_list ?ts = ?as @ ?bs \\<Longrightarrow>\n  \\<exists>as'. to_ct_list as' = ?as\n  to_ct_list ?ts = ?as @ ?bs \\<Longrightarrow>\n  \\<exists>bs'. to_ct_list bs' = ?bs\n\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        \\<lbrakk>to_ct_list ts' = to_ct_list as @ to_ct_list bs;\n         ct_list_eq (to_ct_list bs) (to_ct_list ts)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ct_suffix_def"], ["proof (prove)\nusing this:\n  \\<exists>as bs.\n     to_ct_list ts' = as @ bs \\<and> ct_list_eq bs (to_ct_list ts)\n  to_ct_list ?ts = ?as @ ?bs \\<Longrightarrow>\n  \\<exists>as'. to_ct_list as' = ?as\n  to_ct_list ?ts = ?as @ ?bs \\<Longrightarrow>\n  \\<exists>bs'. to_ct_list bs' = ?bs\n\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        \\<lbrakk>to_ct_list ts' = to_ct_list as @ to_ct_list bs;\n         ct_list_eq (to_ct_list bs) (to_ct_list ts)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  to_ct_list ts' = to_ct_list as @ to_ct_list bs\n  ct_list_eq (to_ct_list bs) (to_ct_list ts)\n\ngoal (2 subgoals):\n 1. ct_suffix (to_ct_list ts) (to_ct_list ts') \\<Longrightarrow>\n    suffix ts ts'\n 2. suffix ts ts' \\<Longrightarrow>\n    ct_suffix (to_ct_list ts) (to_ct_list ts')", "thus \"suffix ts ts'\""], ["proof (prove)\nusing this:\n  to_ct_list ts' = to_ct_list as @ to_ct_list bs\n  ct_list_eq (to_ct_list bs) (to_ct_list ts)\n\ngoal (1 subgoal):\n 1. suffix ts ts'", "using ct_list_eq_ts_conv_eq"], ["proof (prove)\nusing this:\n  to_ct_list ts' = to_ct_list as @ to_ct_list bs\n  ct_list_eq (to_ct_list bs) (to_ct_list ts)\n  ct_list_eq (to_ct_list ?ts) (to_ct_list ?ts') = (?ts = ?ts')\n\ngoal (1 subgoal):\n 1. suffix ts ts'", "unfolding ct_suffix_def to_ct_list_def suffix_def"], ["proof (prove)\nusing this:\n  map TSome ts' = map TSome as @ map TSome bs\n  ct_list_eq (map TSome bs) (map TSome ts)\n  ct_list_eq (map TSome ?ts) (map TSome ?ts') = (?ts = ?ts')\n\ngoal (1 subgoal):\n 1. \\<exists>zs. ts' = zs @ ts", "by (metis map_append)"], ["proof (state)\nthis:\n  suffix ts ts'\n\ngoal (1 subgoal):\n 1. suffix ts ts' \\<Longrightarrow>\n    ct_suffix (to_ct_list ts) (to_ct_list ts')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. suffix ts ts' \\<Longrightarrow>\n    ct_suffix (to_ct_list ts) (to_ct_list ts')", "assume \"suffix ts ts'\""], ["proof (state)\nthis:\n  suffix ts ts'\n\ngoal (1 subgoal):\n 1. suffix ts ts' \\<Longrightarrow>\n    ct_suffix (to_ct_list ts) (to_ct_list ts')", "thus \"ct_suffix (to_ct_list ts) (to_ct_list ts')\""], ["proof (prove)\nusing this:\n  suffix ts ts'\n\ngoal (1 subgoal):\n 1. ct_suffix (to_ct_list ts) (to_ct_list ts')", "using ct_list_eq_ts_conv_eq"], ["proof (prove)\nusing this:\n  suffix ts ts'\n  ct_list_eq (to_ct_list ?ts) (to_ct_list ?ts') = (?ts = ?ts')\n\ngoal (1 subgoal):\n 1. ct_suffix (to_ct_list ts) (to_ct_list ts')", "unfolding ct_suffix_def to_ct_list_def suffix_def"], ["proof (prove)\nusing this:\n  \\<exists>zs. ts' = zs @ ts\n  ct_list_eq (map TSome ?ts) (map TSome ?ts') = (?ts = ?ts')\n\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       map TSome ts' = as @ bs \\<and> ct_list_eq bs (map TSome ts)", "by (metis map_append)"], ["proof (state)\nthis:\n  ct_suffix (to_ct_list ts) (to_ct_list ts')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ct_suffix_exists: \"\\<exists>ts_c. ct_suffix x1 (to_ct_list ts_c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts_c. ct_suffix x1 (to_ct_list ts_c)", "using ct_list_eq_commute ct_list_eq_exists ct_suffix_def"], ["proof (prove)\nusing this:\n  ct_list_eq ?xs ?ys \\<Longrightarrow> ct_list_eq ?ys ?xs\n  \\<exists>ys. ct_list_eq ?xs (to_ct_list ys)\n  ct_suffix ?xs ?ys =\n  (\\<exists>as bs. ?ys = as @ bs \\<and> ct_list_eq bs ?xs)\n\ngoal (1 subgoal):\n 1. \\<exists>ts_c. ct_suffix x1 (to_ct_list ts_c)", "by fastforce"], ["", "lemma ct_suffix_ct_list_eq_exists:\n  assumes \"ct_suffix x1 x2\"\n  shows \"\\<exists>ts_c. ct_suffix x1 (to_ct_list ts_c) \\<and> ct_list_eq (to_ct_list ts_c) x2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts_c.\n       ct_suffix x1 (to_ct_list ts_c) \\<and> ct_list_eq (to_ct_list ts_c) x2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ts_c.\n       ct_suffix x1 (to_ct_list ts_c) \\<and> ct_list_eq (to_ct_list ts_c) x2", "obtain as bs where x2_def:\"x2 = as @ bs\" \"ct_list_eq x1 bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        \\<lbrakk>x2 = as @ bs; ct_list_eq x1 bs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms ct_list_eq_commute"], ["proof (prove)\nusing this:\n  ct_suffix x1 x2\n  ct_list_eq ?xs ?ys \\<Longrightarrow> ct_list_eq ?ys ?xs\n\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        \\<lbrakk>x2 = as @ bs; ct_list_eq x1 bs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ct_suffix_def"], ["proof (prove)\nusing this:\n  \\<exists>as bs. x2 = as @ bs \\<and> ct_list_eq bs x1\n  ct_list_eq ?xs ?ys \\<Longrightarrow> ct_list_eq ?ys ?xs\n\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        \\<lbrakk>x2 = as @ bs; ct_list_eq x1 bs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x2 = as @ bs\n  ct_list_eq x1 bs\n\ngoal (1 subgoal):\n 1. \\<exists>ts_c.\n       ct_suffix x1 (to_ct_list ts_c) \\<and> ct_list_eq (to_ct_list ts_c) x2", "then"], ["proof (chain)\npicking this:\n  x2 = as @ bs\n  ct_list_eq x1 bs", "obtain ts_as ts_bs where \"ct_list_eq as (to_ct_list ts_as)\"\n                                \"ct_list_eq x1 (to_ct_list ts_bs)\"\n                                \"ct_list_eq (to_ct_list ts_bs) bs\""], ["proof (prove)\nusing this:\n  x2 = as @ bs\n  ct_list_eq x1 bs\n\ngoal (1 subgoal):\n 1. (\\<And>ts_as ts_bs.\n        \\<lbrakk>ct_list_eq as (to_ct_list ts_as);\n         ct_list_eq x1 (to_ct_list ts_bs);\n         ct_list_eq (to_ct_list ts_bs) bs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ct_list_eq_common_tsome_list[of x1 bs] ct_list_eq_exists"], ["proof (prove)\nusing this:\n  x2 = as @ bs\n  ct_list_eq x1 bs\n  ct_list_eq x1 bs =\n  (\\<exists>zs.\n      ct_list_eq x1 (to_ct_list zs) \\<and> ct_list_eq (to_ct_list zs) bs)\n  \\<exists>ys. ct_list_eq ?xs (to_ct_list ys)\n\ngoal (1 subgoal):\n 1. (\\<And>ts_as ts_bs.\n        \\<lbrakk>ct_list_eq as (to_ct_list ts_as);\n         ct_list_eq x1 (to_ct_list ts_bs);\n         ct_list_eq (to_ct_list ts_bs) bs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  ct_list_eq as (to_ct_list ts_as)\n  ct_list_eq x1 (to_ct_list ts_bs)\n  ct_list_eq (to_ct_list ts_bs) bs\n\ngoal (1 subgoal):\n 1. \\<exists>ts_c.\n       ct_suffix x1 (to_ct_list ts_c) \\<and> ct_list_eq (to_ct_list ts_c) x2", "thus ?thesis"], ["proof (prove)\nusing this:\n  ct_list_eq as (to_ct_list ts_as)\n  ct_list_eq x1 (to_ct_list ts_bs)\n  ct_list_eq (to_ct_list ts_bs) bs\n\ngoal (1 subgoal):\n 1. \\<exists>ts_c.\n       ct_suffix x1 (to_ct_list ts_c) \\<and> ct_list_eq (to_ct_list ts_c) x2", "using x2_def ct_list_eq_commute"], ["proof (prove)\nusing this:\n  ct_list_eq as (to_ct_list ts_as)\n  ct_list_eq x1 (to_ct_list ts_bs)\n  ct_list_eq (to_ct_list ts_bs) bs\n  x2 = as @ bs\n  ct_list_eq x1 bs\n  ct_list_eq ?xs ?ys \\<Longrightarrow> ct_list_eq ?ys ?xs\n\ngoal (1 subgoal):\n 1. \\<exists>ts_c.\n       ct_suffix x1 (to_ct_list ts_c) \\<and> ct_list_eq (to_ct_list ts_c) x2", "unfolding ct_suffix_def to_ct_list_def"], ["proof (prove)\nusing this:\n  ct_list_eq as (map TSome ts_as)\n  ct_list_eq x1 (map TSome ts_bs)\n  ct_list_eq (map TSome ts_bs) bs\n  x2 = as @ bs\n  ct_list_eq x1 bs\n  ct_list_eq ?xs ?ys \\<Longrightarrow> ct_list_eq ?ys ?xs\n\ngoal (1 subgoal):\n 1. \\<exists>ts_c.\n       (\\<exists>as bs.\n           map TSome ts_c = as @ bs \\<and> ct_list_eq bs x1) \\<and>\n       ct_list_eq (map TSome ts_c) x2", "by (metis ct_list_eq_def list_all2_appendI map_append)"], ["proof (state)\nthis:\n  \\<exists>ts_c.\n     ct_suffix x1 (to_ct_list ts_c) \\<and> ct_list_eq (to_ct_list ts_c) x2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ct_suffix_cons_ct_list:\n  assumes \"ct_suffix (xs@ys) (to_ct_list zs)\"\n  shows \"\\<exists>as bs. zs = as@bs \\<and> ct_list_eq ys (to_ct_list bs) \\<and> ct_suffix xs (to_ct_list as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       zs = as @ bs \\<and>\n       ct_list_eq ys (to_ct_list bs) \\<and> ct_suffix xs (to_ct_list as)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       zs = as @ bs \\<and>\n       ct_list_eq ys (to_ct_list bs) \\<and> ct_suffix xs (to_ct_list as)", "obtain as bs where \"to_ct_list zs = (to_ct_list as) @ (to_ct_list bs)\"\n                     \"ct_list_eq (to_ct_list bs) (xs @ ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        \\<lbrakk>to_ct_list zs = to_ct_list as @ to_ct_list bs;\n         ct_list_eq (to_ct_list bs) (xs @ ys)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms to_ct_list_append[of zs]"], ["proof (prove)\nusing this:\n  ct_suffix (xs @ ys) (to_ct_list zs)\n  to_ct_list zs = ?as @ ?bs \\<Longrightarrow>\n  \\<exists>as'. to_ct_list as' = ?as\n  to_ct_list zs = ?as @ ?bs \\<Longrightarrow>\n  \\<exists>bs'. to_ct_list bs' = ?bs\n\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        \\<lbrakk>to_ct_list zs = to_ct_list as @ to_ct_list bs;\n         ct_list_eq (to_ct_list bs) (xs @ ys)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ct_suffix_def"], ["proof (prove)\nusing this:\n  \\<exists>as bs. to_ct_list zs = as @ bs \\<and> ct_list_eq bs (xs @ ys)\n  to_ct_list zs = ?as @ ?bs \\<Longrightarrow>\n  \\<exists>as'. to_ct_list as' = ?as\n  to_ct_list zs = ?as @ ?bs \\<Longrightarrow>\n  \\<exists>bs'. to_ct_list bs' = ?bs\n\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        \\<lbrakk>to_ct_list zs = to_ct_list as @ to_ct_list bs;\n         ct_list_eq (to_ct_list bs) (xs @ ys)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  to_ct_list zs = to_ct_list as @ to_ct_list bs\n  ct_list_eq (to_ct_list bs) (xs @ ys)\n\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       zs = as @ bs \\<and>\n       ct_list_eq ys (to_ct_list bs) \\<and> ct_suffix xs (to_ct_list as)", "thus ?thesis"], ["proof (prove)\nusing this:\n  to_ct_list zs = to_ct_list as @ to_ct_list bs\n  ct_list_eq (to_ct_list bs) (xs @ ys)\n\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       zs = as @ bs \\<and>\n       ct_list_eq ys (to_ct_list bs) \\<and> ct_suffix xs (to_ct_list as)", "using assms ct_list_eq_cons_ct_list[of bs xs ys]"], ["proof (prove)\nusing this:\n  to_ct_list zs = to_ct_list as @ to_ct_list bs\n  ct_list_eq (to_ct_list bs) (xs @ ys)\n  ct_suffix (xs @ ys) (to_ct_list zs)\n  ct_list_eq (to_ct_list bs) (xs @ ys) \\<Longrightarrow>\n  \\<exists>bsa bs'.\n     bs = bsa @ bs' \\<and>\n     ct_list_eq (to_ct_list bsa) xs \\<and> ct_list_eq (to_ct_list bs') ys\n\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       zs = as @ bs \\<and>\n       ct_list_eq ys (to_ct_list bs) \\<and> ct_suffix xs (to_ct_list as)", "unfolding ct_suffix_def"], ["proof (prove)\nusing this:\n  to_ct_list zs = to_ct_list as @ to_ct_list bs\n  ct_list_eq (to_ct_list bs) (xs @ ys)\n  \\<exists>as bs. to_ct_list zs = as @ bs \\<and> ct_list_eq bs (xs @ ys)\n  ct_list_eq (to_ct_list bs) (xs @ ys) \\<Longrightarrow>\n  \\<exists>bsa bs'.\n     bs = bsa @ bs' \\<and>\n     ct_list_eq (to_ct_list bsa) xs \\<and> ct_list_eq (to_ct_list bs') ys\n\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       zs = as @ bs \\<and>\n       ct_list_eq ys (to_ct_list bs) \\<and>\n       (\\<exists>asa bs. to_ct_list as = asa @ bs \\<and> ct_list_eq bs xs)", "by (metis append.assoc ct_list_eq_commute ct_list_eq_ts_conv_eq map_append to_ct_list_def)"], ["proof (state)\nthis:\n  \\<exists>as bs.\n     zs = as @ bs \\<and>\n     ct_list_eq ys (to_ct_list bs) \\<and> ct_suffix xs (to_ct_list as)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ct_suffix_cons_ct_list1:\n  assumes \"ct_suffix (xs@(to_ct_list ys)) (to_ct_list zs)\"\n  shows \"\\<exists>as. zs = as@ys \\<and> ct_suffix xs (to_ct_list as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as. zs = as @ ys \\<and> ct_suffix xs (to_ct_list as)", "using ct_suffix_cons_ct_list[OF assms] ct_list_eq_ts_conv_eq"], ["proof (prove)\nusing this:\n  \\<exists>as bs.\n     zs = as @ bs \\<and>\n     ct_list_eq (to_ct_list ys) (to_ct_list bs) \\<and>\n     ct_suffix xs (to_ct_list as)\n  ct_list_eq (to_ct_list ?ts) (to_ct_list ?ts') = (?ts = ?ts')\n\ngoal (1 subgoal):\n 1. \\<exists>as. zs = as @ ys \\<and> ct_suffix xs (to_ct_list as)", "by fastforce"], ["", "lemma ct_suffix_cons2:\n  assumes \"ct_suffix (xs) (ys@zs)\"\n          \"length xs = length zs\"\n  shows \"ct_list_eq xs zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_list_eq xs zs", "using assms"], ["proof (prove)\nusing this:\n  ct_suffix xs (ys @ zs)\n  length xs = length zs\n\ngoal (1 subgoal):\n 1. ct_list_eq xs zs", "by (metis append_eq_append_conv ct_list_eq_commute ct_list_eq_def ct_suffix_def list_all2_lengthD)"], ["", "lemma ct_suffix_imp_ct_list_eq:\n  assumes \"ct_suffix xs ys\"\n  shows \"ct_list_eq (drop (length ys - length xs) ys) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_list_eq (drop (length ys - length xs) ys) xs", "using assms ct_list_eq_def list_all2_lengthD"], ["proof (prove)\nusing this:\n  ct_suffix xs ys\n  ct_list_eq ?ct1s ?ct2s = list_all2 ct_eq ?ct1s ?ct2s\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n\ngoal (1 subgoal):\n 1. ct_list_eq (drop (length ys - length xs) ys) xs", "unfolding ct_suffix_def"], ["proof (prove)\nusing this:\n  \\<exists>as bs. ys = as @ bs \\<and> ct_list_eq bs xs\n  ct_list_eq ?ct1s ?ct2s = list_all2 ct_eq ?ct1s ?ct2s\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n\ngoal (1 subgoal):\n 1. ct_list_eq (drop (length ys - length xs) ys) xs", "by fastforce"], ["", "lemma ct_suffix_extend_ct_list_eq:\n  assumes \"ct_suffix xs ys\"\n          \"ct_list_eq xs' ys'\"\n  shows \"ct_suffix (xs@xs') (ys@ys')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix (xs @ xs') (ys @ ys')", "using assms"], ["proof (prove)\nusing this:\n  ct_suffix xs ys\n  ct_list_eq xs' ys'\n\ngoal (1 subgoal):\n 1. ct_suffix (xs @ xs') (ys @ ys')", "unfolding ct_suffix_def ct_list_eq_def"], ["proof (prove)\nusing this:\n  \\<exists>as bs. ys = as @ bs \\<and> list_all2 ct_eq bs xs\n  list_all2 ct_eq xs' ys'\n\ngoal (1 subgoal):\n 1. \\<exists>as bs. ys @ ys' = as @ bs \\<and> list_all2 ct_eq bs (xs @ xs')", "by (meson append.assoc ct_list_eq_commute ct_list_eq_def list_all2_appendI)"], ["", "lemma ct_suffix_extend_any1:\n  assumes \"ct_suffix xs ys\"\n          \"length xs < length ys\"\n  shows \"ct_suffix (TAny#xs) ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix (TAny # xs) ys", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ct_suffix (TAny # xs) ys", "obtain as bs where ys_def:\"ys = as@bs\"\n                            \"ct_list_eq bs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        \\<lbrakk>ys = as @ bs; ct_list_eq bs xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1) ct_suffix_def"], ["proof (prove)\nusing this:\n  ct_suffix xs ys\n  ct_suffix ?xs ?ys =\n  (\\<exists>as bs. ?ys = as @ bs \\<and> ct_list_eq bs ?xs)\n\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        \\<lbrakk>ys = as @ bs; ct_list_eq bs xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  ys = as @ bs\n  ct_list_eq bs xs\n\ngoal (1 subgoal):\n 1. ct_suffix (TAny # xs) ys", "hence \"length as > 0\""], ["proof (prove)\nusing this:\n  ys = as @ bs\n  ct_list_eq bs xs\n\ngoal (1 subgoal):\n 1. 0 < length as", "using list_all2_lengthD assms(2)"], ["proof (prove)\nusing this:\n  ys = as @ bs\n  ct_list_eq bs xs\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n  length xs < length ys\n\ngoal (1 subgoal):\n 1. 0 < length as", "unfolding ct_list_eq_def"], ["proof (prove)\nusing this:\n  ys = as @ bs\n  list_all2 ct_eq bs xs\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n  length xs < length ys\n\ngoal (1 subgoal):\n 1. 0 < length as", "by fastforce"], ["proof (state)\nthis:\n  0 < length as\n\ngoal (1 subgoal):\n 1. ct_suffix (TAny # xs) ys", "then"], ["proof (chain)\npicking this:\n  0 < length as", "obtain as' a where as_def:\"as = as'@[a]\""], ["proof (prove)\nusing this:\n  0 < length as\n\ngoal (1 subgoal):\n 1. (\\<And>as' a. as = as' @ [a] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis append_butlast_last_id length_greater_0_conv)"], ["proof (state)\nthis:\n  as = as' @ [a]\n\ngoal (1 subgoal):\n 1. ct_suffix (TAny # xs) ys", "hence \"ct_list_eq (a#bs) (TAny#xs)\""], ["proof (prove)\nusing this:\n  as = as' @ [a]\n\ngoal (1 subgoal):\n 1. ct_list_eq (a # bs) (TAny # xs)", "using ys_def"], ["proof (prove)\nusing this:\n  as = as' @ [a]\n  ys = as @ bs\n  ct_list_eq bs xs\n\ngoal (1 subgoal):\n 1. ct_list_eq (a # bs) (TAny # xs)", "by (meson ct_eq.simps(2) ct_list_eq_commute ct_list_eq_def list.rel_intros(2))"], ["proof (state)\nthis:\n  ct_list_eq (a # bs) (TAny # xs)\n\ngoal (1 subgoal):\n 1. ct_suffix (TAny # xs) ys", "thus ?thesis"], ["proof (prove)\nusing this:\n  ct_list_eq (a # bs) (TAny # xs)\n\ngoal (1 subgoal):\n 1. ct_suffix (TAny # xs) ys", "using as_def ys_def ct_suffix_def"], ["proof (prove)\nusing this:\n  ct_list_eq (a # bs) (TAny # xs)\n  as = as' @ [a]\n  ys = as @ bs\n  ct_list_eq bs xs\n  ct_suffix ?xs ?ys =\n  (\\<exists>as bs. ?ys = as @ bs \\<and> ct_list_eq bs ?xs)\n\ngoal (1 subgoal):\n 1. ct_suffix (TAny # xs) ys", "by fastforce"], ["proof (state)\nthis:\n  ct_suffix (TAny # xs) ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ct_suffix_singleton_any: \"ct_suffix [TAny] [t]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix [TAny] [t]", "using ct_suffix_extend_ct_list_eq[of \"[]\" \"[]\" \"[TAny]\" \"[t]\"] ct_suffix_nil"], ["proof (prove)\nusing this:\n  \\<lbrakk>ct_suffix [] []; ct_list_eq [TAny] [t]\\<rbrakk>\n  \\<Longrightarrow> ct_suffix ([] @ [TAny]) ([] @ [t])\n  ct_suffix [] ?ts\n\ngoal (1 subgoal):\n 1. ct_suffix [TAny] [t]", "by (simp add: ct_list_eq_def)"], ["", "lemma ct_suffix_cons_it: \"ct_suffix xs (xs'@xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix xs (xs' @ xs)", "using ct_list_eq_refl ct_suffix_def"], ["proof (prove)\nusing this:\n  ct_list_eq ?xs ?xs\n  ct_suffix ?xs ?ys =\n  (\\<exists>as bs. ?ys = as @ bs \\<and> ct_list_eq bs ?xs)\n\ngoal (1 subgoal):\n 1. ct_suffix xs (xs' @ xs)", "by blast"], ["", "lemma ct_suffix_singleton:\n  assumes \"length cts > 0\"\n  shows \"ct_suffix [TAny] cts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix [TAny] cts", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ct_suffix [TAny] cts", "have \"\\<And>c. ct_prefix [TAny] [c]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c. ct_prefix [TAny] [c]", "using ct_suffix_singleton_any ct_suffix_to_ct_prefix"], ["proof (prove)\nusing this:\n  ct_suffix [TAny] [?t]\n  ct_suffix ?xs ?ys = ct_prefix (rev ?xs) (rev ?ys)\n\ngoal (1 subgoal):\n 1. \\<And>c. ct_prefix [TAny] [c]", "by force"], ["proof (state)\nthis:\n  ct_prefix [TAny] [?c]\n\ngoal (1 subgoal):\n 1. ct_suffix [TAny] cts", "then"], ["proof (chain)\npicking this:\n  ct_prefix [TAny] [?c]", "show ?thesis"], ["proof (prove)\nusing this:\n  ct_prefix [TAny] [?c]\n\ngoal (1 subgoal):\n 1. ct_suffix [TAny] cts", "by (metis (no_types) Suc_leI append_butlast_last_id assms butlast.simps(2) ct_list_eq_commute\n                         ct_prefix_nil(2) ct_prefix_snoc ct_suffix_def impossible_Cons length_Cons\n                         list.size(3))"], ["proof (state)\nthis:\n  ct_suffix [TAny] cts\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ct_suffix_less:\n  assumes \"ct_suffix (xs@xs') ys\"\n  shows \"ct_suffix xs' ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix xs' ys", "using assms"], ["proof (prove)\nusing this:\n  ct_suffix (xs @ xs') ys\n\ngoal (1 subgoal):\n 1. ct_suffix xs' ys", "unfolding ct_suffix_def"], ["proof (prove)\nusing this:\n  \\<exists>as bs. ys = as @ bs \\<and> ct_list_eq bs (xs @ xs')\n\ngoal (1 subgoal):\n 1. \\<exists>as bs. ys = as @ bs \\<and> ct_list_eq bs xs'", "by (metis append_eq_appendI ct_list_eq_def list_all2_append2)"], ["", "lemma ct_suffix_unfold_one: \"ct_suffix (xs@[x]) (ys@[y]) = ((ct_eq x y) \\<and> ct_suffix xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix (xs @ [x]) (ys @ [y]) = (ct_eq x y \\<and> ct_suffix xs ys)", "using ct_prefix_code(3)"], ["proof (prove)\nusing this:\n  ct_prefix (?x # ?xs) (?y # ?ys) = (ct_eq ?x ?y \\<and> ct_prefix ?xs ?ys)\n\ngoal (1 subgoal):\n 1. ct_suffix (xs @ [x]) (ys @ [y]) = (ct_eq x y \\<and> ct_suffix xs ys)", "by (simp add: ct_suffix_to_ct_prefix)"], ["", "lemma ct_suffix_shared:\n  assumes \"ct_suffix cts (to_ct_list ts)\"\n          \"ct_suffix cts' (to_ct_list ts)\"\n  shows \"ct_suffix cts cts' \\<or> ct_suffix cts' cts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix cts cts' \\<or> ct_suffix cts' cts", "proof (cases \"length cts > length cts'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length cts' < length cts \\<Longrightarrow>\n    ct_suffix cts cts' \\<or> ct_suffix cts' cts\n 2. \\<not> length cts' < length cts \\<Longrightarrow>\n    ct_suffix cts cts' \\<or> ct_suffix cts' cts", "case True"], ["proof (state)\nthis:\n  length cts' < length cts\n\ngoal (2 subgoals):\n 1. length cts' < length cts \\<Longrightarrow>\n    ct_suffix cts cts' \\<or> ct_suffix cts' cts\n 2. \\<not> length cts' < length cts \\<Longrightarrow>\n    ct_suffix cts cts' \\<or> ct_suffix cts' cts", "obtain as bs where cts_def:\"ts = as@bs\"\n                             \"ct_list_eq cts (to_ct_list bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        \\<lbrakk>ts = as @ bs; ct_list_eq cts (to_ct_list bs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1) ct_suffix_def to_ct_list_def"], ["proof (prove)\nusing this:\n  ct_suffix cts (to_ct_list ts)\n  ct_suffix ?xs ?ys =\n  (\\<exists>as bs. ?ys = as @ bs \\<and> ct_list_eq bs ?xs)\n  to_ct_list ?ts = map TSome ?ts\n\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        \\<lbrakk>ts = as @ bs; ct_list_eq cts (to_ct_list bs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis append_Nil ct_suffix_cons_ct_list)"], ["proof (state)\nthis:\n  ts = as @ bs\n  ct_list_eq cts (to_ct_list bs)\n\ngoal (2 subgoals):\n 1. length cts' < length cts \\<Longrightarrow>\n    ct_suffix cts cts' \\<or> ct_suffix cts' cts\n 2. \\<not> length cts' < length cts \\<Longrightarrow>\n    ct_suffix cts cts' \\<or> ct_suffix cts' cts", "obtain as' bs' where cts'_def:\"ts = as'@bs'\"\n                                \"ct_list_eq cts' (to_ct_list bs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as' bs'.\n        \\<lbrakk>ts = as' @ bs'; ct_list_eq cts' (to_ct_list bs')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(2) ct_suffix_def to_ct_list_def"], ["proof (prove)\nusing this:\n  ct_suffix cts' (to_ct_list ts)\n  ct_suffix ?xs ?ys =\n  (\\<exists>as bs. ?ys = as @ bs \\<and> ct_list_eq bs ?xs)\n  to_ct_list ?ts = map TSome ?ts\n\ngoal (1 subgoal):\n 1. (\\<And>as' bs'.\n        \\<lbrakk>ts = as' @ bs'; ct_list_eq cts' (to_ct_list bs')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis append_Nil ct_suffix_cons_ct_list)"], ["proof (state)\nthis:\n  ts = as' @ bs'\n  ct_list_eq cts' (to_ct_list bs')\n\ngoal (2 subgoals):\n 1. length cts' < length cts \\<Longrightarrow>\n    ct_suffix cts cts' \\<or> ct_suffix cts' cts\n 2. \\<not> length cts' < length cts \\<Longrightarrow>\n    ct_suffix cts cts' \\<or> ct_suffix cts' cts", "obtain ct1s ct2s where \"cts = ct1s@ct2s\"\n                         \"length ct2s = length cts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ct1s ct2s.\n        \\<lbrakk>cts = ct1s @ ct2s; length ct2s = length cts'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using True"], ["proof (prove)\nusing this:\n  length cts' < length cts\n\ngoal (1 subgoal):\n 1. (\\<And>ct1s ct2s.\n        \\<lbrakk>cts = ct1s @ ct2s; length ct2s = length cts'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "(* List.append_eq_conv_conj[of _ _ cts] *)"], ["proof (prove)\nusing this:\n  length cts' < length cts\n\ngoal (1 subgoal):\n 1. (\\<And>ct1s ct2s.\n        \\<lbrakk>cts = ct1s @ ct2s; length ct2s = length cts'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis add_diff_cancel_right' append_take_drop_id length_drop less_imp_le_nat nat_le_iff_add)"], ["proof (state)\nthis:\n  cts = ct1s @ ct2s\n  length ct2s = length cts'\n\ngoal (2 subgoals):\n 1. length cts' < length cts \\<Longrightarrow>\n    ct_suffix cts cts' \\<or> ct_suffix cts' cts\n 2. \\<not> length cts' < length cts \\<Longrightarrow>\n    ct_suffix cts cts' \\<or> ct_suffix cts' cts", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix cts cts' \\<or> ct_suffix cts' cts", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ct_suffix cts cts' \\<or> ct_suffix cts' cts", "obtain tts :: \"t list \\<Rightarrow> ct list \\<Rightarrow> ct list \\<Rightarrow> t list\" and ttsa :: \"t list \\<Rightarrow> ct list \\<Rightarrow> ct list \\<Rightarrow> t list\" where\n      \"\\<forall>x0 x1 x2. (\\<exists>v3 v4. x0 = v3 @ v4 \\<and> ct_list_eq x1 (to_ct_list v4) \\<and> ct_suffix x2 (to_ct_list v3)) = (x0 = tts x0 x1 x2 @ ttsa x0 x1 x2 \\<and> ct_list_eq x1 (to_ct_list (ttsa x0 x1 x2)) \\<and> ct_suffix x2 (to_ct_list (tts x0 x1 x2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>tts ttsa.\n        \\<forall>x0 x1 x2.\n           (\\<exists>v3 v4.\n               x0 = v3 @ v4 \\<and>\n               ct_list_eq x1 (to_ct_list v4) \\<and>\n               ct_suffix x2 (to_ct_list v3)) =\n           (x0 = tts x0 x1 x2 @ ttsa x0 x1 x2 \\<and>\n            ct_list_eq x1 (to_ct_list (ttsa x0 x1 x2)) \\<and>\n            ct_suffix x2 (to_ct_list (tts x0 x1 x2))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  \\<forall>x0 x1 x2.\n     (\\<exists>v3 v4.\n         x0 = v3 @ v4 \\<and>\n         ct_list_eq x1 (to_ct_list v4) \\<and>\n         ct_suffix x2 (to_ct_list v3)) =\n     (x0 = tts x0 x1 x2 @ ttsa x0 x1 x2 \\<and>\n      ct_list_eq x1 (to_ct_list (ttsa x0 x1 x2)) \\<and>\n      ct_suffix x2 (to_ct_list (tts x0 x1 x2)))\n\ngoal (1 subgoal):\n 1. ct_suffix cts cts' \\<or> ct_suffix cts' cts", "then"], ["proof (chain)\npicking this:\n  \\<forall>x0 x1 x2.\n     (\\<exists>v3 v4.\n         x0 = v3 @ v4 \\<and>\n         ct_list_eq x1 (to_ct_list v4) \\<and>\n         ct_suffix x2 (to_ct_list v3)) =\n     (x0 = tts x0 x1 x2 @ ttsa x0 x1 x2 \\<and>\n      ct_list_eq x1 (to_ct_list (ttsa x0 x1 x2)) \\<and>\n      ct_suffix x2 (to_ct_list (tts x0 x1 x2)))", "have f1: \"as' @ bs' = tts (as' @ bs') ct2s ct1s @ ttsa (as' @ bs') ct2s ct1s \\<and> ct_list_eq ct2s (to_ct_list (ttsa (as' @ bs') ct2s ct1s)) \\<and> ct_suffix ct1s (to_ct_list (tts (as' @ bs') ct2s ct1s))\""], ["proof (prove)\nusing this:\n  \\<forall>x0 x1 x2.\n     (\\<exists>v3 v4.\n         x0 = v3 @ v4 \\<and>\n         ct_list_eq x1 (to_ct_list v4) \\<and>\n         ct_suffix x2 (to_ct_list v3)) =\n     (x0 = tts x0 x1 x2 @ ttsa x0 x1 x2 \\<and>\n      ct_list_eq x1 (to_ct_list (ttsa x0 x1 x2)) \\<and>\n      ct_suffix x2 (to_ct_list (tts x0 x1 x2)))\n\ngoal (1 subgoal):\n 1. as' @ bs' =\n    tts (as' @ bs') ct2s ct1s @ ttsa (as' @ bs') ct2s ct1s \\<and>\n    ct_list_eq ct2s (to_ct_list (ttsa (as' @ bs') ct2s ct1s)) \\<and>\n    ct_suffix ct1s (to_ct_list (tts (as' @ bs') ct2s ct1s))", "using assms(1) \\<open>cts = ct1s @ ct2s\\<close> cts'_def(1) ct_suffix_cons_ct_list"], ["proof (prove)\nusing this:\n  \\<forall>x0 x1 x2.\n     (\\<exists>v3 v4.\n         x0 = v3 @ v4 \\<and>\n         ct_list_eq x1 (to_ct_list v4) \\<and>\n         ct_suffix x2 (to_ct_list v3)) =\n     (x0 = tts x0 x1 x2 @ ttsa x0 x1 x2 \\<and>\n      ct_list_eq x1 (to_ct_list (ttsa x0 x1 x2)) \\<and>\n      ct_suffix x2 (to_ct_list (tts x0 x1 x2)))\n  ct_suffix cts (to_ct_list ts)\n  cts = ct1s @ ct2s\n  ts = as' @ bs'\n  ct_suffix (?xs @ ?ys) (to_ct_list ?zs) \\<Longrightarrow>\n  \\<exists>as bs.\n     ?zs = as @ bs \\<and>\n     ct_list_eq ?ys (to_ct_list bs) \\<and> ct_suffix ?xs (to_ct_list as)\n\ngoal (1 subgoal):\n 1. as' @ bs' =\n    tts (as' @ bs') ct2s ct1s @ ttsa (as' @ bs') ct2s ct1s \\<and>\n    ct_list_eq ct2s (to_ct_list (ttsa (as' @ bs') ct2s ct1s)) \\<and>\n    ct_suffix ct1s (to_ct_list (tts (as' @ bs') ct2s ct1s))", "by force"], ["proof (state)\nthis:\n  as' @ bs' = tts (as' @ bs') ct2s ct1s @ ttsa (as' @ bs') ct2s ct1s \\<and>\n  ct_list_eq ct2s (to_ct_list (ttsa (as' @ bs') ct2s ct1s)) \\<and>\n  ct_suffix ct1s (to_ct_list (tts (as' @ bs') ct2s ct1s))\n\ngoal (1 subgoal):\n 1. ct_suffix cts cts' \\<or> ct_suffix cts' cts", "then"], ["proof (chain)\npicking this:\n  as' @ bs' = tts (as' @ bs') ct2s ct1s @ ttsa (as' @ bs') ct2s ct1s \\<and>\n  ct_list_eq ct2s (to_ct_list (ttsa (as' @ bs') ct2s ct1s)) \\<and>\n  ct_suffix ct1s (to_ct_list (tts (as' @ bs') ct2s ct1s))", "have \"ct_list_eq cts' (to_ct_list (ttsa (as' @ bs') ct2s ct1s))\""], ["proof (prove)\nusing this:\n  as' @ bs' = tts (as' @ bs') ct2s ct1s @ ttsa (as' @ bs') ct2s ct1s \\<and>\n  ct_list_eq ct2s (to_ct_list (ttsa (as' @ bs') ct2s ct1s)) \\<and>\n  ct_suffix ct1s (to_ct_list (tts (as' @ bs') ct2s ct1s))\n\ngoal (1 subgoal):\n 1. ct_list_eq cts' (to_ct_list (ttsa (as' @ bs') ct2s ct1s))", "by (metis \\<open>ct_suffix cts' (to_ct_list ts)\\<close> \\<open>length ct2s = length cts'\\<close> cts'_def(1) ct_list_eq_length ct_suffix_cons2 map_append to_ct_list_def)"], ["proof (state)\nthis:\n  ct_list_eq cts' (to_ct_list (ttsa (as' @ bs') ct2s ct1s))\n\ngoal (1 subgoal):\n 1. ct_suffix cts cts' \\<or> ct_suffix cts' cts", "then"], ["proof (chain)\npicking this:\n  ct_list_eq cts' (to_ct_list (ttsa (as' @ bs') ct2s ct1s))", "show ?thesis"], ["proof (prove)\nusing this:\n  ct_list_eq cts' (to_ct_list (ttsa (as' @ bs') ct2s ct1s))\n\ngoal (1 subgoal):\n 1. ct_suffix cts cts' \\<or> ct_suffix cts' cts", "using f1"], ["proof (prove)\nusing this:\n  ct_list_eq cts' (to_ct_list (ttsa (as' @ bs') ct2s ct1s))\n  as' @ bs' = tts (as' @ bs') ct2s ct1s @ ttsa (as' @ bs') ct2s ct1s \\<and>\n  ct_list_eq ct2s (to_ct_list (ttsa (as' @ bs') ct2s ct1s)) \\<and>\n  ct_suffix ct1s (to_ct_list (tts (as' @ bs') ct2s ct1s))\n\ngoal (1 subgoal):\n 1. ct_suffix cts cts' \\<or> ct_suffix cts' cts", "by (metis \\<open>cts = ct1s @ ct2s\\<close> ct_list_eq_shared ct_suffix_def)"], ["proof (state)\nthis:\n  ct_suffix cts cts' \\<or> ct_suffix cts' cts\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ct_suffix cts cts' \\<or> ct_suffix cts' cts\n\ngoal (1 subgoal):\n 1. \\<not> length cts' < length cts \\<Longrightarrow>\n    ct_suffix cts cts' \\<or> ct_suffix cts' cts", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length cts' < length cts \\<Longrightarrow>\n    ct_suffix cts cts' \\<or> ct_suffix cts' cts", "case False"], ["proof (state)\nthis:\n  \\<not> length cts' < length cts\n\ngoal (1 subgoal):\n 1. \\<not> length cts' < length cts \\<Longrightarrow>\n    ct_suffix cts cts' \\<or> ct_suffix cts' cts", "hence len:\"length cts' \\<ge> length cts\""], ["proof (prove)\nusing this:\n  \\<not> length cts' < length cts\n\ngoal (1 subgoal):\n 1. length cts \\<le> length cts'", "by linarith"], ["proof (state)\nthis:\n  length cts \\<le> length cts'\n\ngoal (1 subgoal):\n 1. \\<not> length cts' < length cts \\<Longrightarrow>\n    ct_suffix cts cts' \\<or> ct_suffix cts' cts", "obtain as bs where cts_def:\"ts = as@bs\"\n                             \"ct_list_eq cts (to_ct_list bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        \\<lbrakk>ts = as @ bs; ct_list_eq cts (to_ct_list bs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1) ct_suffix_def to_ct_list_def"], ["proof (prove)\nusing this:\n  ct_suffix cts (to_ct_list ts)\n  ct_suffix ?xs ?ys =\n  (\\<exists>as bs. ?ys = as @ bs \\<and> ct_list_eq bs ?xs)\n  to_ct_list ?ts = map TSome ?ts\n\ngoal (1 subgoal):\n 1. (\\<And>as bs.\n        \\<lbrakk>ts = as @ bs; ct_list_eq cts (to_ct_list bs)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis append_Nil ct_suffix_cons_ct_list)"], ["proof (state)\nthis:\n  ts = as @ bs\n  ct_list_eq cts (to_ct_list bs)\n\ngoal (1 subgoal):\n 1. \\<not> length cts' < length cts \\<Longrightarrow>\n    ct_suffix cts cts' \\<or> ct_suffix cts' cts", "obtain as' bs' where cts'_def:\"ts = as'@bs'\"\n                                \"ct_list_eq cts' (to_ct_list bs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as' bs'.\n        \\<lbrakk>ts = as' @ bs'; ct_list_eq cts' (to_ct_list bs')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(2) ct_suffix_def to_ct_list_def"], ["proof (prove)\nusing this:\n  ct_suffix cts' (to_ct_list ts)\n  ct_suffix ?xs ?ys =\n  (\\<exists>as bs. ?ys = as @ bs \\<and> ct_list_eq bs ?xs)\n  to_ct_list ?ts = map TSome ?ts\n\ngoal (1 subgoal):\n 1. (\\<And>as' bs'.\n        \\<lbrakk>ts = as' @ bs'; ct_list_eq cts' (to_ct_list bs')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis append_Nil ct_suffix_cons_ct_list)"], ["proof (state)\nthis:\n  ts = as' @ bs'\n  ct_list_eq cts' (to_ct_list bs')\n\ngoal (1 subgoal):\n 1. \\<not> length cts' < length cts \\<Longrightarrow>\n    ct_suffix cts cts' \\<or> ct_suffix cts' cts", "obtain ct1s ct2s where \"cts' = ct1s@ct2s\"\n                         \"length ct2s = length cts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ct1s ct2s.\n        \\<lbrakk>cts' = ct1s @ ct2s; length ct2s = length cts\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using len"], ["proof (prove)\nusing this:\n  length cts \\<le> length cts'\n\ngoal (1 subgoal):\n 1. (\\<And>ct1s ct2s.\n        \\<lbrakk>cts' = ct1s @ ct2s; length ct2s = length cts\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "(* List.append_eq_conv_conj[of _ _ cts] *)"], ["proof (prove)\nusing this:\n  length cts \\<le> length cts'\n\ngoal (1 subgoal):\n 1. (\\<And>ct1s ct2s.\n        \\<lbrakk>cts' = ct1s @ ct2s; length ct2s = length cts\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis add_diff_cancel_right' append_take_drop_id length_drop nat_le_iff_add)"], ["proof (state)\nthis:\n  cts' = ct1s @ ct2s\n  length ct2s = length cts\n\ngoal (1 subgoal):\n 1. \\<not> length cts' < length cts \\<Longrightarrow>\n    ct_suffix cts cts' \\<or> ct_suffix cts' cts", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix cts cts' \\<or> ct_suffix cts' cts", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ct_suffix cts cts' \\<or> ct_suffix cts' cts", "obtain tts :: \"t list \\<Rightarrow> ct list \\<Rightarrow> ct list \\<Rightarrow> t list\" and ttsa :: \"t list \\<Rightarrow> ct list \\<Rightarrow> ct list \\<Rightarrow> t list\" where\n      \"\\<forall>x0 x1 x2. (\\<exists>v3 v4. x0 = v3 @ v4 \\<and> ct_list_eq x1 (to_ct_list v4) \\<and> ct_suffix x2 (to_ct_list v3)) = (x0 = tts x0 x1 x2 @ ttsa x0 x1 x2 \\<and> ct_list_eq x1 (to_ct_list (ttsa x0 x1 x2)) \\<and> ct_suffix x2 (to_ct_list (tts x0 x1 x2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>tts ttsa.\n        \\<forall>x0 x1 x2.\n           (\\<exists>v3 v4.\n               x0 = v3 @ v4 \\<and>\n               ct_list_eq x1 (to_ct_list v4) \\<and>\n               ct_suffix x2 (to_ct_list v3)) =\n           (x0 = tts x0 x1 x2 @ ttsa x0 x1 x2 \\<and>\n            ct_list_eq x1 (to_ct_list (ttsa x0 x1 x2)) \\<and>\n            ct_suffix x2 (to_ct_list (tts x0 x1 x2))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  \\<forall>x0 x1 x2.\n     (\\<exists>v3 v4.\n         x0 = v3 @ v4 \\<and>\n         ct_list_eq x1 (to_ct_list v4) \\<and>\n         ct_suffix x2 (to_ct_list v3)) =\n     (x0 = tts x0 x1 x2 @ ttsa x0 x1 x2 \\<and>\n      ct_list_eq x1 (to_ct_list (ttsa x0 x1 x2)) \\<and>\n      ct_suffix x2 (to_ct_list (tts x0 x1 x2)))\n\ngoal (1 subgoal):\n 1. ct_suffix cts cts' \\<or> ct_suffix cts' cts", "then"], ["proof (chain)\npicking this:\n  \\<forall>x0 x1 x2.\n     (\\<exists>v3 v4.\n         x0 = v3 @ v4 \\<and>\n         ct_list_eq x1 (to_ct_list v4) \\<and>\n         ct_suffix x2 (to_ct_list v3)) =\n     (x0 = tts x0 x1 x2 @ ttsa x0 x1 x2 \\<and>\n      ct_list_eq x1 (to_ct_list (ttsa x0 x1 x2)) \\<and>\n      ct_suffix x2 (to_ct_list (tts x0 x1 x2)))", "have f1: \"as @ bs = tts (as @ bs) ct2s ct1s @ ttsa (as @ bs) ct2s ct1s \\<and> ct_list_eq ct2s (to_ct_list (ttsa (as @ bs) ct2s ct1s)) \\<and> ct_suffix ct1s (to_ct_list (tts (as @ bs) ct2s ct1s))\""], ["proof (prove)\nusing this:\n  \\<forall>x0 x1 x2.\n     (\\<exists>v3 v4.\n         x0 = v3 @ v4 \\<and>\n         ct_list_eq x1 (to_ct_list v4) \\<and>\n         ct_suffix x2 (to_ct_list v3)) =\n     (x0 = tts x0 x1 x2 @ ttsa x0 x1 x2 \\<and>\n      ct_list_eq x1 (to_ct_list (ttsa x0 x1 x2)) \\<and>\n      ct_suffix x2 (to_ct_list (tts x0 x1 x2)))\n\ngoal (1 subgoal):\n 1. as @ bs = tts (as @ bs) ct2s ct1s @ ttsa (as @ bs) ct2s ct1s \\<and>\n    ct_list_eq ct2s (to_ct_list (ttsa (as @ bs) ct2s ct1s)) \\<and>\n    ct_suffix ct1s (to_ct_list (tts (as @ bs) ct2s ct1s))", "using assms(2) \\<open>cts' = ct1s @ ct2s\\<close> cts_def(1) ct_suffix_cons_ct_list"], ["proof (prove)\nusing this:\n  \\<forall>x0 x1 x2.\n     (\\<exists>v3 v4.\n         x0 = v3 @ v4 \\<and>\n         ct_list_eq x1 (to_ct_list v4) \\<and>\n         ct_suffix x2 (to_ct_list v3)) =\n     (x0 = tts x0 x1 x2 @ ttsa x0 x1 x2 \\<and>\n      ct_list_eq x1 (to_ct_list (ttsa x0 x1 x2)) \\<and>\n      ct_suffix x2 (to_ct_list (tts x0 x1 x2)))\n  ct_suffix cts' (to_ct_list ts)\n  cts' = ct1s @ ct2s\n  ts = as @ bs\n  ct_suffix (?xs @ ?ys) (to_ct_list ?zs) \\<Longrightarrow>\n  \\<exists>as bs.\n     ?zs = as @ bs \\<and>\n     ct_list_eq ?ys (to_ct_list bs) \\<and> ct_suffix ?xs (to_ct_list as)\n\ngoal (1 subgoal):\n 1. as @ bs = tts (as @ bs) ct2s ct1s @ ttsa (as @ bs) ct2s ct1s \\<and>\n    ct_list_eq ct2s (to_ct_list (ttsa (as @ bs) ct2s ct1s)) \\<and>\n    ct_suffix ct1s (to_ct_list (tts (as @ bs) ct2s ct1s))", "by force"], ["proof (state)\nthis:\n  as @ bs = tts (as @ bs) ct2s ct1s @ ttsa (as @ bs) ct2s ct1s \\<and>\n  ct_list_eq ct2s (to_ct_list (ttsa (as @ bs) ct2s ct1s)) \\<and>\n  ct_suffix ct1s (to_ct_list (tts (as @ bs) ct2s ct1s))\n\ngoal (1 subgoal):\n 1. ct_suffix cts cts' \\<or> ct_suffix cts' cts", "then"], ["proof (chain)\npicking this:\n  as @ bs = tts (as @ bs) ct2s ct1s @ ttsa (as @ bs) ct2s ct1s \\<and>\n  ct_list_eq ct2s (to_ct_list (ttsa (as @ bs) ct2s ct1s)) \\<and>\n  ct_suffix ct1s (to_ct_list (tts (as @ bs) ct2s ct1s))", "have \"ct_list_eq cts (to_ct_list (ttsa (as @ bs) ct2s ct1s))\""], ["proof (prove)\nusing this:\n  as @ bs = tts (as @ bs) ct2s ct1s @ ttsa (as @ bs) ct2s ct1s \\<and>\n  ct_list_eq ct2s (to_ct_list (ttsa (as @ bs) ct2s ct1s)) \\<and>\n  ct_suffix ct1s (to_ct_list (tts (as @ bs) ct2s ct1s))\n\ngoal (1 subgoal):\n 1. ct_list_eq cts (to_ct_list (ttsa (as @ bs) ct2s ct1s))", "by (metis \\<open>ct_suffix cts (to_ct_list ts)\\<close> \\<open>length ct2s = length cts\\<close> cts_def(1) ct_list_eq_length ct_suffix_cons2 map_append to_ct_list_def)"], ["proof (state)\nthis:\n  ct_list_eq cts (to_ct_list (ttsa (as @ bs) ct2s ct1s))\n\ngoal (1 subgoal):\n 1. ct_suffix cts cts' \\<or> ct_suffix cts' cts", "then"], ["proof (chain)\npicking this:\n  ct_list_eq cts (to_ct_list (ttsa (as @ bs) ct2s ct1s))", "show ?thesis"], ["proof (prove)\nusing this:\n  ct_list_eq cts (to_ct_list (ttsa (as @ bs) ct2s ct1s))\n\ngoal (1 subgoal):\n 1. ct_suffix cts cts' \\<or> ct_suffix cts' cts", "using f1"], ["proof (prove)\nusing this:\n  ct_list_eq cts (to_ct_list (ttsa (as @ bs) ct2s ct1s))\n  as @ bs = tts (as @ bs) ct2s ct1s @ ttsa (as @ bs) ct2s ct1s \\<and>\n  ct_list_eq ct2s (to_ct_list (ttsa (as @ bs) ct2s ct1s)) \\<and>\n  ct_suffix ct1s (to_ct_list (tts (as @ bs) ct2s ct1s))\n\ngoal (1 subgoal):\n 1. ct_suffix cts cts' \\<or> ct_suffix cts' cts", "by (metis \\<open>cts' = ct1s @ ct2s\\<close> ct_list_eq_shared ct_suffix_def)"], ["proof (state)\nthis:\n  ct_suffix cts cts' \\<or> ct_suffix cts' cts\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ct_suffix cts cts' \\<or> ct_suffix cts' cts\n\ngoal:\nNo subgoals!", "qed"], ["", "fun checker_type_suffix::\"checker_type \\<Rightarrow> checker_type \\<Rightarrow> bool\" where\n  \"checker_type_suffix (Type ts) (Type ts') = suffix ts ts'\"\n| \"checker_type_suffix (Type ts) (TopType cts) = ct_suffix (to_ct_list ts) cts\"\n| \"checker_type_suffix (TopType cts) (Type ts) = ct_suffix cts (to_ct_list ts)\"\n| \"checker_type_suffix _ _ = False\""], ["", "fun consume :: \"checker_type \\<Rightarrow> ct list \\<Rightarrow> checker_type\" where\n  \"consume (Type ts) cons = (if ct_suffix cons (to_ct_list ts)\n                               then Type (take (length ts - length cons) ts)\n                               else Bot)\"\n| \"consume (TopType cts) cons = (if ct_suffix cons cts\n                                  then TopType (take (length cts - length cons) cts)\n                                  else (if ct_suffix cts cons\n                                          then TopType []\n                                          else Bot))\"\n| \"consume _ _ = Bot\""], ["", "fun produce :: \"checker_type \\<Rightarrow> checker_type \\<Rightarrow> checker_type\" where\n  \"produce (TopType ts) (Type ts') = TopType (ts@(to_ct_list ts'))\"\n| \"produce (Type ts) (Type ts') = Type (ts@ts')\"\n| \"produce (Type ts') (TopType ts) = TopType ts\"\n| \"produce (TopType ts') (TopType ts) = TopType ts\"\n| \"produce _ _ = Bot\""], ["", "fun type_update :: \"checker_type \\<Rightarrow> ct list \\<Rightarrow> checker_type \\<Rightarrow> checker_type\" where\n  \"type_update curr_type cons prods = produce (consume curr_type cons) prods\""], ["", "fun select_return_top :: \"[ct list] \\<Rightarrow> ct \\<Rightarrow> ct \\<Rightarrow> checker_type\" where\n  \"select_return_top ts ct1 TAny = TopType ((take (length ts - 3) ts) @ [ct1])\"\n| \"select_return_top ts TAny ct2 = TopType ((take (length ts - 3) ts) @ [ct2])\"\n| \"select_return_top ts (TSome t1) (TSome t2) = (if (t1 = t2)\n                                                   then (TopType ((take (length ts - 3) ts) @ [TSome t1]))\n                                                   else Bot)\""], ["", "fun type_update_select :: \"checker_type \\<Rightarrow> checker_type\" where\n  \"type_update_select (Type ts) = (if (length ts \\<ge> 3 \\<and> (ts!(length ts-2)) = (ts!(length ts-3)))\n                                    then consume (Type ts) [TAny, TSome T_i32]\n                                    else Bot)\"\n| \"type_update_select (TopType ts) = (case length ts of\n                                        0 \\<Rightarrow> TopType [TAny]\n                                      | Suc 0 \\<Rightarrow> type_update (TopType ts) [TSome T_i32] (TopType [TAny])\n                                      | Suc (Suc 0) \\<Rightarrow> consume (TopType ts) [TSome T_i32]\n                                      | _  \\<Rightarrow> type_update (TopType ts) [TAny, TAny, TSome T_i32]\n                                                          (select_return_top ts (ts!(length ts-2)) (ts!(length ts-3))))\"\n| \"type_update_select _ = Bot\""], ["", "fun c_types_agree :: \"checker_type \\<Rightarrow> t list \\<Rightarrow> bool\" where\n  \"c_types_agree (Type ts) ts' = (ts = ts')\"\n| \"c_types_agree (TopType ts) ts' = ct_suffix ts (to_ct_list ts')\"\n| \"c_types_agree Bot _ = False\""], ["", "lemma consume_type:\n  assumes \"consume (Type ts) ts' = c_t\"\n          \"c_t \\<noteq> Bot\"\n  shows \"\\<exists>ts''. ct_list_eq (to_ct_list ts) ((to_ct_list ts'')@ts') \\<and> c_t = Type ts''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ct_list_eq (to_ct_list ts) (to_ct_list ts'' @ ts') \\<and>\n       c_t = Type ts''", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ct_list_eq (to_ct_list ts) (to_ct_list ts'' @ ts') \\<and>\n       c_t = Type ts''", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ct_list_eq (to_ct_list ts) (to_ct_list ts'' @ ts') \\<and>\n       c_t = Type ts''", "assume a1: \"(if ct_suffix ts' (map TSome ts) then Type (take (length ts - length ts') ts) else Bot) = c_t\""], ["proof (state)\nthis:\n  (if ct_suffix ts' (map TSome ts)\n   then Type (take (length ts - length ts') ts) else Bot) =\n  c_t\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ct_list_eq (to_ct_list ts) (to_ct_list ts'' @ ts') \\<and>\n       c_t = Type ts''", "assume a2: \"c_t \\<noteq> Bot\""], ["proof (state)\nthis:\n  c_t \\<noteq> Bot\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ct_list_eq (to_ct_list ts) (to_ct_list ts'' @ ts') \\<and>\n       c_t = Type ts''", "obtain ccs :: \"ct list \\<Rightarrow> ct list \\<Rightarrow> ct list\" and ccsa :: \"ct list \\<Rightarrow> ct list \\<Rightarrow> ct list\" where\n      f3: \"\\<forall>cs csa. \\<not> ct_suffix cs csa \\<or> csa = ccs cs csa @ ccsa cs csa \\<and> ct_list_eq (ccsa cs csa) cs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ccs ccsa.\n        \\<forall>cs csa.\n           \\<not> ct_suffix cs csa \\<or>\n           csa = ccs cs csa @ ccsa cs csa \\<and>\n           ct_list_eq (ccsa cs csa) cs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ct_suffixE"], ["proof (prove)\nusing this:\n  \\<lbrakk>ct_suffix ?xs ?ys;\n   \\<And>as zs.\n      \\<lbrakk>?ys = as @ zs; ct_list_eq zs ?xs\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>ccs ccsa.\n        \\<forall>cs csa.\n           \\<not> ct_suffix cs csa \\<or>\n           csa = ccs cs csa @ ccsa cs csa \\<and>\n           ct_list_eq (ccsa cs csa) cs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  \\<forall>cs csa.\n     \\<not> ct_suffix cs csa \\<or>\n     csa = ccs cs csa @ ccsa cs csa \\<and> ct_list_eq (ccsa cs csa) cs\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ct_list_eq (to_ct_list ts) (to_ct_list ts'' @ ts') \\<and>\n       c_t = Type ts''", "have f4: \"ct_suffix ts' (map TSome ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix ts' (map TSome ts)", "using a2 a1"], ["proof (prove)\nusing this:\n  c_t \\<noteq> Bot\n  (if ct_suffix ts' (map TSome ts)\n   then Type (take (length ts - length ts') ts) else Bot) =\n  c_t\n\ngoal (1 subgoal):\n 1. ct_suffix ts' (map TSome ts)", "by metis"], ["proof (state)\nthis:\n  ct_suffix ts' (map TSome ts)\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ct_list_eq (to_ct_list ts) (to_ct_list ts'' @ ts') \\<and>\n       c_t = Type ts''", "then"], ["proof (chain)\npicking this:\n  ct_suffix ts' (map TSome ts)", "have f5: \"ct_list_eq (ccsa ts' (map TSome ts)) ts'\""], ["proof (prove)\nusing this:\n  ct_suffix ts' (map TSome ts)\n\ngoal (1 subgoal):\n 1. ct_list_eq (ccsa ts' (map TSome ts)) ts'", "using f3"], ["proof (prove)\nusing this:\n  ct_suffix ts' (map TSome ts)\n  \\<forall>cs csa.\n     \\<not> ct_suffix cs csa \\<or>\n     csa = ccs cs csa @ ccsa cs csa \\<and> ct_list_eq (ccsa cs csa) cs\n\ngoal (1 subgoal):\n 1. ct_list_eq (ccsa ts' (map TSome ts)) ts'", "by blast"], ["proof (state)\nthis:\n  ct_list_eq (ccsa ts' (map TSome ts)) ts'\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ct_list_eq (to_ct_list ts) (to_ct_list ts'' @ ts') \\<and>\n       c_t = Type ts''", "have f6: \"take (length (map TSome ts) - length (ccsa ts' (map TSome ts))) (map TSome ts) @ ccsa ts' (map TSome ts) = map TSome ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length (map TSome ts) - length (ccsa ts' (map TSome ts)))\n     (map TSome ts) @\n    ccsa ts' (map TSome ts) =\n    map TSome ts", "using f4 f3"], ["proof (prove)\nusing this:\n  ct_suffix ts' (map TSome ts)\n  \\<forall>cs csa.\n     \\<not> ct_suffix cs csa \\<or>\n     csa = ccs cs csa @ ccsa cs csa \\<and> ct_list_eq (ccsa cs csa) cs\n\ngoal (1 subgoal):\n 1. take (length (map TSome ts) - length (ccsa ts' (map TSome ts)))\n     (map TSome ts) @\n    ccsa ts' (map TSome ts) =\n    map TSome ts", "by (metis (full_types) suffixI suffix_take)"], ["proof (state)\nthis:\n  take (length (map TSome ts) - length (ccsa ts' (map TSome ts)))\n   (map TSome ts) @\n  ccsa ts' (map TSome ts) =\n  map TSome ts\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ct_list_eq (to_ct_list ts) (to_ct_list ts'' @ ts') \\<and>\n       c_t = Type ts''", "have \"\\<And>cs. ct_list_eq (cs @ ccsa ts' (map TSome ts)) (cs @ ts')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cs. ct_list_eq (cs @ ccsa ts' (map TSome ts)) (cs @ ts')", "using f5 ct_list_eq_concat ct_list_eq_refl"], ["proof (prove)\nusing this:\n  ct_list_eq (ccsa ts' (map TSome ts)) ts'\n  \\<lbrakk>ct_list_eq ?xs ?ys; ct_list_eq ?xs' ?ys'\\<rbrakk>\n  \\<Longrightarrow> ct_list_eq (?xs @ ?xs') (?ys @ ?ys')\n  ct_list_eq ?xs ?xs\n\ngoal (1 subgoal):\n 1. \\<And>cs. ct_list_eq (cs @ ccsa ts' (map TSome ts)) (cs @ ts')", "by blast"], ["proof (state)\nthis:\n  ct_list_eq (?cs @ ccsa ts' (map TSome ts)) (?cs @ ts')\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ct_list_eq (to_ct_list ts) (to_ct_list ts'' @ ts') \\<and>\n       c_t = Type ts''", "then"], ["proof (chain)\npicking this:\n  ct_list_eq (?cs @ ccsa ts' (map TSome ts)) (?cs @ ts')", "have \"\\<exists>tsa. ct_list_eq (map TSome ts) (map TSome tsa @ ts') \\<and> c_t = Type tsa\""], ["proof (prove)\nusing this:\n  ct_list_eq (?cs @ ccsa ts' (map TSome ts)) (?cs @ ts')\n\ngoal (1 subgoal):\n 1. \\<exists>tsa.\n       ct_list_eq (map TSome ts) (map TSome tsa @ ts') \\<and> c_t = Type tsa", "using f6 f5 f4 a1"], ["proof (prove)\nusing this:\n  ct_list_eq (?cs @ ccsa ts' (map TSome ts)) (?cs @ ts')\n  take (length (map TSome ts) - length (ccsa ts' (map TSome ts)))\n   (map TSome ts) @\n  ccsa ts' (map TSome ts) =\n  map TSome ts\n  ct_list_eq (ccsa ts' (map TSome ts)) ts'\n  ct_suffix ts' (map TSome ts)\n  (if ct_suffix ts' (map TSome ts)\n   then Type (take (length ts - length ts') ts) else Bot) =\n  c_t\n\ngoal (1 subgoal):\n 1. \\<exists>tsa.\n       ct_list_eq (map TSome ts) (map TSome tsa @ ts') \\<and> c_t = Type tsa", "by (metis (no_types) ct_list_eq_length length_map take_map)"], ["proof (state)\nthis:\n  \\<exists>tsa.\n     ct_list_eq (map TSome ts) (map TSome tsa @ ts') \\<and> c_t = Type tsa\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ct_list_eq (to_ct_list ts) (to_ct_list ts'' @ ts') \\<and>\n       c_t = Type ts''", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(if ct_suffix ts' (map TSome ts)\n            then Type (take (length ts - length ts') ts) else Bot) =\n           c_t;\n   c_t \\<noteq> Bot\\<rbrakk>\n  \\<Longrightarrow> \\<exists>tsa.\n                       ct_list_eq (map TSome ts)\n                        (map TSome tsa @ ts') \\<and>\n                       c_t = Type tsa\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ct_list_eq (to_ct_list ts) (to_ct_list ts'' @ ts') \\<and>\n       c_t = Type ts''", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>(if ct_suffix ts' (map TSome ts)\n            then Type (take (length ts - length ts') ts) else Bot) =\n           c_t;\n   c_t \\<noteq> Bot\\<rbrakk>\n  \\<Longrightarrow> \\<exists>tsa.\n                       ct_list_eq (map TSome ts)\n                        (map TSome tsa @ ts') \\<and>\n                       c_t = Type tsa\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ct_list_eq (to_ct_list ts) (to_ct_list ts'' @ ts') \\<and>\n       c_t = Type ts''", "using assms to_ct_list_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>(if ct_suffix ts' (map TSome ts)\n            then Type (take (length ts - length ts') ts) else Bot) =\n           c_t;\n   c_t \\<noteq> Bot\\<rbrakk>\n  \\<Longrightarrow> \\<exists>tsa.\n                       ct_list_eq (map TSome ts)\n                        (map TSome tsa @ ts') \\<and>\n                       c_t = Type tsa\n  consume (Type ts) ts' = c_t\n  c_t \\<noteq> Bot\n  to_ct_list ?ts = map TSome ?ts\n\ngoal (1 subgoal):\n 1. \\<exists>ts''.\n       ct_list_eq (to_ct_list ts) (to_ct_list ts'' @ ts') \\<and>\n       c_t = Type ts''", "by simp"], ["proof (state)\nthis:\n  \\<exists>ts''.\n     ct_list_eq (to_ct_list ts) (to_ct_list ts'' @ ts') \\<and>\n     c_t = Type ts''\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma consume_top_geq:\n  assumes \"consume (TopType ts) ts' = c_t\"\n          \"length ts \\<ge> length ts'\"\n          \"c_t \\<noteq> Bot\"\n  shows \"(\\<exists>as bs. ts = as@bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       ts = as @ bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       ts = as @ bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as", "consider (1) \"ct_suffix ts' ts\"\n         | (2) \"\\<not>ct_suffix ts' ts\" \"ct_suffix ts ts'\"\n         | (3) \"\\<not>ct_suffix ts' ts\" \"\\<not>ct_suffix ts ts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ct_suffix ts' ts \\<Longrightarrow> thesis;\n     \\<lbrakk>\\<not> ct_suffix ts' ts; ct_suffix ts ts'\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     \\<lbrakk>\\<not> ct_suffix ts' ts; \\<not> ct_suffix ts ts'\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>ct_suffix ts' ts \\<Longrightarrow> ?thesis;\n   \\<lbrakk>\\<not> ct_suffix ts' ts; ct_suffix ts ts'\\<rbrakk>\n   \\<Longrightarrow> ?thesis;\n   \\<lbrakk>\\<not> ct_suffix ts' ts; \\<not> ct_suffix ts ts'\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       ts = as @ bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>ct_suffix ts' ts \\<Longrightarrow> ?thesis;\n   \\<lbrakk>\\<not> ct_suffix ts' ts; ct_suffix ts ts'\\<rbrakk>\n   \\<Longrightarrow> ?thesis;\n   \\<lbrakk>\\<not> ct_suffix ts' ts; \\<not> ct_suffix ts ts'\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       ts = as @ bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as", "proof (cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. ct_suffix ts' ts \\<Longrightarrow>\n    \\<exists>as bs.\n       ts = as @ bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as\n 2. \\<lbrakk>\\<not> ct_suffix ts' ts; ct_suffix ts ts'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         ts = as @ bs \\<and>\n                         ct_list_eq bs ts' \\<and> c_t = TopType as\n 3. \\<lbrakk>\\<not> ct_suffix ts' ts; \\<not> ct_suffix ts ts'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         ts = as @ bs \\<and>\n                         ct_list_eq bs ts' \\<and> c_t = TopType as", "case 1"], ["proof (state)\nthis:\n  ct_suffix ts' ts\n\ngoal (3 subgoals):\n 1. ct_suffix ts' ts \\<Longrightarrow>\n    \\<exists>as bs.\n       ts = as @ bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as\n 2. \\<lbrakk>\\<not> ct_suffix ts' ts; ct_suffix ts ts'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         ts = as @ bs \\<and>\n                         ct_list_eq bs ts' \\<and> c_t = TopType as\n 3. \\<lbrakk>\\<not> ct_suffix ts' ts; \\<not> ct_suffix ts ts'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         ts = as @ bs \\<and>\n                         ct_list_eq bs ts' \\<and> c_t = TopType as", "hence \"TopType (take (length ts - length ts') ts) = c_t\""], ["proof (prove)\nusing this:\n  ct_suffix ts' ts\n\ngoal (1 subgoal):\n 1. TopType (take (length ts - length ts') ts) = c_t", "using assms"], ["proof (prove)\nusing this:\n  ct_suffix ts' ts\n  consume (TopType ts) ts' = c_t\n  length ts' \\<le> length ts\n  c_t \\<noteq> Bot\n\ngoal (1 subgoal):\n 1. TopType (take (length ts - length ts') ts) = c_t", "by simp"], ["proof (state)\nthis:\n  TopType (take (length ts - length ts') ts) = c_t\n\ngoal (3 subgoals):\n 1. ct_suffix ts' ts \\<Longrightarrow>\n    \\<exists>as bs.\n       ts = as @ bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as\n 2. \\<lbrakk>\\<not> ct_suffix ts' ts; ct_suffix ts ts'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         ts = as @ bs \\<and>\n                         ct_list_eq bs ts' \\<and> c_t = TopType as\n 3. \\<lbrakk>\\<not> ct_suffix ts' ts; \\<not> ct_suffix ts ts'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         ts = as @ bs \\<and>\n                         ct_list_eq bs ts' \\<and> c_t = TopType as", "thus ?thesis"], ["proof (prove)\nusing this:\n  TopType (take (length ts - length ts') ts) = c_t\n\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       ts = as @ bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as", "using assms(2) 1 ct_list_eq_def"], ["proof (prove)\nusing this:\n  TopType (take (length ts - length ts') ts) = c_t\n  length ts' \\<le> length ts\n  ct_suffix ts' ts\n  ct_list_eq ?ct1s ?ct2s = list_all2 ct_eq ?ct1s ?ct2s\n\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       ts = as @ bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as", "unfolding ct_suffix_def"], ["proof (prove)\nusing this:\n  TopType (take (length ts - length ts') ts) = c_t\n  length ts' \\<le> length ts\n  \\<exists>as bs. ts = as @ bs \\<and> ct_list_eq bs ts'\n  ct_list_eq ?ct1s ?ct2s = list_all2 ct_eq ?ct1s ?ct2s\n\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       ts = as @ bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as", "by (metis (no_types, lifting) append_eq_append_conv append_take_drop_id diff_diff_cancel length_drop list_all2_lengthD)"], ["proof (state)\nthis:\n  \\<exists>as bs.\n     ts = as @ bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ct_suffix ts' ts; ct_suffix ts ts'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         ts = as @ bs \\<and>\n                         ct_list_eq bs ts' \\<and> c_t = TopType as\n 2. \\<lbrakk>\\<not> ct_suffix ts' ts; \\<not> ct_suffix ts ts'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         ts = as @ bs \\<and>\n                         ct_list_eq bs ts' \\<and> c_t = TopType as", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ct_suffix ts' ts; ct_suffix ts ts'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         ts = as @ bs \\<and>\n                         ct_list_eq bs ts' \\<and> c_t = TopType as\n 2. \\<lbrakk>\\<not> ct_suffix ts' ts; \\<not> ct_suffix ts ts'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         ts = as @ bs \\<and>\n                         ct_list_eq bs ts' \\<and> c_t = TopType as", "case 2"], ["proof (state)\nthis:\n  \\<not> ct_suffix ts' ts\n  ct_suffix ts ts'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ct_suffix ts' ts; ct_suffix ts ts'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         ts = as @ bs \\<and>\n                         ct_list_eq bs ts' \\<and> c_t = TopType as\n 2. \\<lbrakk>\\<not> ct_suffix ts' ts; \\<not> ct_suffix ts ts'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         ts = as @ bs \\<and>\n                         ct_list_eq bs ts' \\<and> c_t = TopType as", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ct_suffix ts' ts\n  ct_suffix ts ts'\n\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       ts = as @ bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as", "using assms append_eq_append_conv ct_list_eq_commute"], ["proof (prove)\nusing this:\n  \\<not> ct_suffix ts' ts\n  ct_suffix ts ts'\n  consume (TopType ts) ts' = c_t\n  length ts' \\<le> length ts\n  c_t \\<noteq> Bot\n  length ?xs = length ?ys \\<or> length ?us = length ?vs \\<Longrightarrow>\n  (?xs @ ?us = ?ys @ ?vs) = (?xs = ?ys \\<and> ?us = ?vs)\n  ct_list_eq ?xs ?ys \\<Longrightarrow> ct_list_eq ?ys ?xs\n\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       ts = as @ bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as", "unfolding ct_suffix_def"], ["proof (prove)\nusing this:\n  \\<nexists>as bs. ts = as @ bs \\<and> ct_list_eq bs ts'\n  \\<exists>as bs. ts' = as @ bs \\<and> ct_list_eq bs ts\n  consume (TopType ts) ts' = c_t\n  length ts' \\<le> length ts\n  c_t \\<noteq> Bot\n  length ?xs = length ?ys \\<or> length ?us = length ?vs \\<Longrightarrow>\n  (?xs @ ?us = ?ys @ ?vs) = (?xs = ?ys \\<and> ?us = ?vs)\n  ct_list_eq ?xs ?ys \\<Longrightarrow> ct_list_eq ?ys ?xs\n\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       ts = as @ bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as", "by (metis append.left_neutral ct_suffix_def ct_suffix_length le_antisym)"], ["proof (state)\nthis:\n  \\<exists>as bs.\n     ts = as @ bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ct_suffix ts' ts; \\<not> ct_suffix ts ts'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         ts = as @ bs \\<and>\n                         ct_list_eq bs ts' \\<and> c_t = TopType as", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ct_suffix ts' ts; \\<not> ct_suffix ts ts'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         ts = as @ bs \\<and>\n                         ct_list_eq bs ts' \\<and> c_t = TopType as", "case 3"], ["proof (state)\nthis:\n  \\<not> ct_suffix ts' ts\n  \\<not> ct_suffix ts ts'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ct_suffix ts' ts; \\<not> ct_suffix ts ts'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>as bs.\n                         ts = as @ bs \\<and>\n                         ct_list_eq bs ts' \\<and> c_t = TopType as", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ct_suffix ts' ts\n  \\<not> ct_suffix ts ts'\n\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       ts = as @ bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as", "using assms"], ["proof (prove)\nusing this:\n  \\<not> ct_suffix ts' ts\n  \\<not> ct_suffix ts ts'\n  consume (TopType ts) ts' = c_t\n  length ts' \\<le> length ts\n  c_t \\<noteq> Bot\n\ngoal (1 subgoal):\n 1. \\<exists>as bs.\n       ts = as @ bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as", "by auto"], ["proof (state)\nthis:\n  \\<exists>as bs.\n     ts = as @ bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>as bs.\n     ts = as @ bs \\<and> ct_list_eq bs ts' \\<and> c_t = TopType as\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma consume_top_leq:\n  assumes \"consume (TopType ts) ts' = c_t\"\n          \"length ts \\<le> length ts'\"\n          \"c_t \\<noteq> Bot\"\n  shows \"c_t = TopType []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_t = TopType []", "using assms append_eq_conv_conj"], ["proof (prove)\nusing this:\n  consume (TopType ts) ts' = c_t\n  length ts \\<le> length ts'\n  c_t \\<noteq> Bot\n  (?xs @ ?ys = ?zs) =\n  (?xs = take (length ?xs) ?zs \\<and> ?ys = drop (length ?xs) ?zs)\n\ngoal (1 subgoal):\n 1. c_t = TopType []", "by fastforce"], ["", "lemma consume_type_type:\n  assumes \"consume xs cons = (Type t_int)\"\n  shows \"\\<exists>tn. xs = Type tn\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>tn. xs = Type tn", "using assms"], ["proof (prove)\nusing this:\n  consume xs cons = Type t_int\n\ngoal (1 subgoal):\n 1. \\<exists>tn. xs = Type tn", "apply (cases xs)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>consume xs cons = Type t_int; xs = TopType x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = Type tn\n 2. \\<And>x2.\n       \\<lbrakk>consume xs cons = Type t_int; xs = Type x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = Type tn\n 3. \\<lbrakk>consume xs cons = Type t_int; xs = Bot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>tn. xs = Type tn", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1.\n       \\<lbrakk>(if ct_suffix cons x1\n                 then TopType (take (length x1 - length cons) x1)\n                 else if ct_suffix x1 cons then TopType [] else Bot) =\n                Type t_int;\n        xs = TopType x1\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis checker_type.distinct(1) checker_type.distinct(5))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma produce_type_type:\n  assumes \"produce xs cons = (Type tm)\"\n  shows \"\\<exists>tn. xs = Type tn\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>tn. xs = Type tn", "apply (cases xs; cases cons)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>xs = TopType x1; cons = TopType x1a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = Type tn\n 2. \\<And>x1 x2.\n       \\<lbrakk>xs = TopType x1; cons = Type x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = Type tn\n 3. \\<And>x1.\n       \\<lbrakk>xs = TopType x1; cons = Bot\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = Type tn\n 4. \\<And>x2 x1.\n       \\<lbrakk>xs = Type x2; cons = TopType x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = Type tn\n 5. \\<And>x2 x2a.\n       \\<lbrakk>xs = Type x2; cons = Type x2a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = Type tn\n 6. \\<And>x2.\n       \\<lbrakk>xs = Type x2; cons = Bot\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = Type tn\n 7. \\<And>x1.\n       \\<lbrakk>xs = Bot; cons = TopType x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = Type tn\n 8. \\<And>x2.\n       \\<lbrakk>xs = Bot; cons = Type x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = Type tn\n 9. \\<lbrakk>xs = Bot; cons = Bot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>tn. xs = Type tn", "using assms"], ["proof (prove)\nusing this:\n  produce xs cons = Type tm\n\ngoal (9 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>xs = TopType x1; cons = TopType x1a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = Type tn\n 2. \\<And>x1 x2.\n       \\<lbrakk>xs = TopType x1; cons = Type x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = Type tn\n 3. \\<And>x1.\n       \\<lbrakk>xs = TopType x1; cons = Bot\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = Type tn\n 4. \\<And>x2 x1.\n       \\<lbrakk>xs = Type x2; cons = TopType x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = Type tn\n 5. \\<And>x2 x2a.\n       \\<lbrakk>xs = Type x2; cons = Type x2a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = Type tn\n 6. \\<And>x2.\n       \\<lbrakk>xs = Type x2; cons = Bot\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = Type tn\n 7. \\<And>x1.\n       \\<lbrakk>xs = Bot; cons = TopType x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = Type tn\n 8. \\<And>x2.\n       \\<lbrakk>xs = Bot; cons = Type x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = Type tn\n 9. \\<lbrakk>xs = Bot; cons = Bot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>tn. xs = Type tn", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma consume_weaken_type:\n  assumes \"consume (Type tn) cons = (Type t_int)\"\n  shows \"consume (Type (ts@tn)) cons = (Type (ts@t_int))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consume (Type (ts @ tn)) cons = Type (ts @ t_int)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. consume (Type (ts @ tn)) cons = Type (ts @ t_int)", "obtain ts' where \"ct_list_eq (to_ct_list tn) (to_ct_list ts' @ cons) \\<and> Type t_int = Type ts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ts'.\n        ct_list_eq (to_ct_list tn) (to_ct_list ts' @ cons) \\<and>\n        Type t_int = Type ts' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using consume_type[OF assms]"], ["proof (prove)\nusing this:\n  Type t_int \\<noteq> Bot \\<Longrightarrow>\n  \\<exists>ts''.\n     ct_list_eq (to_ct_list tn) (to_ct_list ts'' @ cons) \\<and>\n     Type t_int = Type ts''\n\ngoal (1 subgoal):\n 1. (\\<And>ts'.\n        ct_list_eq (to_ct_list tn) (to_ct_list ts' @ cons) \\<and>\n        Type t_int = Type ts' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ct_list_eq (to_ct_list tn) (to_ct_list ts' @ cons) \\<and>\n  Type t_int = Type ts'\n\ngoal (1 subgoal):\n 1. consume (Type (ts @ tn)) cons = Type (ts @ t_int)", "have cond:\"ct_suffix cons (to_ct_list tn)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix cons (to_ct_list tn)", "using assms"], ["proof (prove)\nusing this:\n  consume (Type tn) cons = Type t_int\n\ngoal (1 subgoal):\n 1. ct_suffix cons (to_ct_list tn)", "by (simp, metis checker_type.distinct(5))"], ["proof (state)\nthis:\n  ct_suffix cons (to_ct_list tn)\n\ngoal (1 subgoal):\n 1. consume (Type (ts @ tn)) cons = Type (ts @ t_int)", "hence res:\"t_int = take (length tn - length cons) tn\""], ["proof (prove)\nusing this:\n  ct_suffix cons (to_ct_list tn)\n\ngoal (1 subgoal):\n 1. t_int = take (length tn - length cons) tn", "using assms"], ["proof (prove)\nusing this:\n  ct_suffix cons (to_ct_list tn)\n  consume (Type tn) cons = Type t_int\n\ngoal (1 subgoal):\n 1. t_int = take (length tn - length cons) tn", "by simp"], ["proof (state)\nthis:\n  t_int = take (length tn - length cons) tn\n\ngoal (1 subgoal):\n 1. consume (Type (ts @ tn)) cons = Type (ts @ t_int)", "have \"ct_suffix cons (to_ct_list (ts@tn))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix cons (to_ct_list (ts @ tn))", "using cond"], ["proof (prove)\nusing this:\n  ct_suffix cons (to_ct_list tn)\n\ngoal (1 subgoal):\n 1. ct_suffix cons (to_ct_list (ts @ tn))", "unfolding to_ct_list_def"], ["proof (prove)\nusing this:\n  ct_suffix cons (map TSome tn)\n\ngoal (1 subgoal):\n 1. ct_suffix cons (map TSome (ts @ tn))", "by (metis append_assoc ct_suffix_def map_append)"], ["proof (state)\nthis:\n  ct_suffix cons (to_ct_list (ts @ tn))\n\ngoal (1 subgoal):\n 1. consume (Type (ts @ tn)) cons = Type (ts @ t_int)", "moreover"], ["proof (state)\nthis:\n  ct_suffix cons (to_ct_list (ts @ tn))\n\ngoal (1 subgoal):\n 1. consume (Type (ts @ tn)) cons = Type (ts @ t_int)", "have \"ts@t_int = take (length (ts@tn) - length cons) (ts@tn)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts @ t_int = take (length (ts @ tn) - length cons) (ts @ tn)", "using res take_append cond ct_suffix_length to_ct_list_def"], ["proof (prove)\nusing this:\n  t_int = take (length tn - length cons) tn\n  take ?n (?xs @ ?ys) = take ?n ?xs @ take (?n - length ?xs) ?ys\n  ct_suffix cons (to_ct_list tn)\n  ct_suffix ?ts ?ts' \\<Longrightarrow> length ?ts \\<le> length ?ts'\n  to_ct_list ?ts = map TSome ?ts\n\ngoal (1 subgoal):\n 1. ts @ t_int = take (length (ts @ tn) - length cons) (ts @ tn)", "by fastforce"], ["proof (state)\nthis:\n  ts @ t_int = take (length (ts @ tn) - length cons) (ts @ tn)\n\ngoal (1 subgoal):\n 1. consume (Type (ts @ tn)) cons = Type (ts @ t_int)", "ultimately"], ["proof (chain)\npicking this:\n  ct_suffix cons (to_ct_list (ts @ tn))\n  ts @ t_int = take (length (ts @ tn) - length cons) (ts @ tn)", "show ?thesis"], ["proof (prove)\nusing this:\n  ct_suffix cons (to_ct_list (ts @ tn))\n  ts @ t_int = take (length (ts @ tn) - length cons) (ts @ tn)\n\ngoal (1 subgoal):\n 1. consume (Type (ts @ tn)) cons = Type (ts @ t_int)", "by simp"], ["proof (state)\nthis:\n  consume (Type (ts @ tn)) cons = Type (ts @ t_int)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma produce_weaken_type:\n  assumes \"produce (Type tn) cons = (Type tm)\"\n  shows \"produce (Type (ts@tn)) cons = (Type (ts@tm))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. produce (Type (ts @ tn)) cons = Type (ts @ tm)", "using assms"], ["proof (prove)\nusing this:\n  produce (Type tn) cons = Type tm\n\ngoal (1 subgoal):\n 1. produce (Type (ts @ tn)) cons = Type (ts @ tm)", "by (cases cons, simp_all)"], ["", "lemma produce_nil: \"produce ts (Type []) = ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. produce ts (Type []) = ts", "using to_ct_list_def"], ["proof (prove)\nusing this:\n  to_ct_list ?ts = map TSome ?ts\n\ngoal (1 subgoal):\n 1. produce ts (Type []) = ts", "by (cases ts, simp_all)"], ["", "lemma c_types_agree_id: \"c_types_agree (Type ts) ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_types_agree (Type ts) ts", "by simp"], ["", "lemma c_types_agree_top1: \"c_types_agree (TopType []) ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_types_agree (TopType []) ts", "using ct_suffix_ts_conv_suffix to_ct_list_def"], ["proof (prove)\nusing this:\n  ct_suffix (to_ct_list ?ts) (to_ct_list ?ts') = suffix ?ts ?ts'\n  to_ct_list ?ts = map TSome ?ts\n\ngoal (1 subgoal):\n 1. c_types_agree (TopType []) ts", "by (simp add: ct_suffix_nil)"], ["", "lemma c_types_agree_top2:\n  assumes \"ct_list_eq ts (to_ct_list ts'')\"\n  shows \"c_types_agree (TopType ts) (ts'@ts'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c_types_agree (TopType ts) (ts' @ ts'')", "using assms ct_list_eq_commute ct_suffix_def to_ct_list_def"], ["proof (prove)\nusing this:\n  ct_list_eq ts (to_ct_list ts'')\n  ct_list_eq ?xs ?ys \\<Longrightarrow> ct_list_eq ?ys ?xs\n  ct_suffix ?xs ?ys =\n  (\\<exists>as bs. ?ys = as @ bs \\<and> ct_list_eq bs ?xs)\n  to_ct_list ?ts = map TSome ?ts\n\ngoal (1 subgoal):\n 1. c_types_agree (TopType ts) (ts' @ ts'')", "by auto"], ["", "lemma c_types_agree_imp_ct_list_eq:\n  assumes \"c_types_agree (TopType cts) ts\"\n  shows \"\\<exists>ts' ts''. (ts = ts'@ts'') \\<and> ct_list_eq cts (to_ct_list ts'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts' ts''.\n       ts = ts' @ ts'' \\<and> ct_list_eq cts (to_ct_list ts'')", "using assms ct_suffix_def to_ct_list_def"], ["proof (prove)\nusing this:\n  c_types_agree (TopType cts) ts\n  ct_suffix ?xs ?ys =\n  (\\<exists>as bs. ?ys = as @ bs \\<and> ct_list_eq bs ?xs)\n  to_ct_list ?ts = map TSome ?ts\n\ngoal (1 subgoal):\n 1. \\<exists>ts' ts''.\n       ts = ts' @ ts'' \\<and> ct_list_eq cts (to_ct_list ts'')", "by (simp, metis ct_list_eq_commute ct_list_eq_ts_conv_eq ct_suffix_ts_conv_suffix suffixE\n                  to_ct_list_append(2))"], ["", "lemma c_types_agree_not_bot_exists:\n  assumes \"ts \\<noteq> Bot\"\n  shows \"\\<exists>ts_c. c_types_agree ts ts_c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts_c. c_types_agree ts ts_c", "using assms ct_suffix_exists"], ["proof (prove)\nusing this:\n  ts \\<noteq> Bot\n  \\<exists>ts_c. ct_suffix ?x1.0 (to_ct_list ts_c)\n\ngoal (1 subgoal):\n 1. \\<exists>ts_c. c_types_agree ts ts_c", "by (cases ts, simp_all)"], ["", "lemma consume_c_types_agree:\n  assumes \"consume (Type ts) cts = (Type ts')\"\n          \"c_types_agree ctn ts\"\n  shows \"\\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'", "using assms"], ["proof (prove)\nusing this:\n  consume (Type ts) cts = Type ts'\n  c_types_agree ctn ts\n\ngoal (1 subgoal):\n 1. \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'", "proof (cases ctn)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>consume (Type ts) cts = Type ts'; c_types_agree ctn ts;\n        ctn = TopType x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c_t'.\n                            consume ctn cts = c_t' \\<and>\n                            c_types_agree c_t' ts'\n 2. \\<And>x2.\n       \\<lbrakk>consume (Type ts) cts = Type ts'; c_types_agree ctn ts;\n        ctn = Type x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c_t'.\n                            consume ctn cts = c_t' \\<and>\n                            c_types_agree c_t' ts'\n 3. \\<lbrakk>consume (Type ts) cts = Type ts'; c_types_agree ctn ts;\n     ctn = Bot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c_t'.\n                         consume ctn cts = c_t' \\<and>\n                         c_types_agree c_t' ts'", "case (TopType x1)"], ["proof (state)\nthis:\n  ctn = TopType x1\n\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>consume (Type ts) cts = Type ts'; c_types_agree ctn ts;\n        ctn = TopType x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c_t'.\n                            consume ctn cts = c_t' \\<and>\n                            c_types_agree c_t' ts'\n 2. \\<And>x2.\n       \\<lbrakk>consume (Type ts) cts = Type ts'; c_types_agree ctn ts;\n        ctn = Type x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c_t'.\n                            consume ctn cts = c_t' \\<and>\n                            c_types_agree c_t' ts'\n 3. \\<lbrakk>consume (Type ts) cts = Type ts'; c_types_agree ctn ts;\n     ctn = Bot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c_t'.\n                         consume ctn cts = c_t' \\<and>\n                         c_types_agree c_t' ts'", "have 1:\"ct_suffix cts (to_ct_list ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix cts (to_ct_list ts)", "using assms"], ["proof (prove)\nusing this:\n  consume (Type ts) cts = Type ts'\n  c_types_agree ctn ts\n\ngoal (1 subgoal):\n 1. ct_suffix cts (to_ct_list ts)", "by (simp, metis checker_type.distinct(5))"], ["proof (state)\nthis:\n  ct_suffix cts (to_ct_list ts)\n\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>consume (Type ts) cts = Type ts'; c_types_agree ctn ts;\n        ctn = TopType x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c_t'.\n                            consume ctn cts = c_t' \\<and>\n                            c_types_agree c_t' ts'\n 2. \\<And>x2.\n       \\<lbrakk>consume (Type ts) cts = Type ts'; c_types_agree ctn ts;\n        ctn = Type x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c_t'.\n                            consume ctn cts = c_t' \\<and>\n                            c_types_agree c_t' ts'\n 3. \\<lbrakk>consume (Type ts) cts = Type ts'; c_types_agree ctn ts;\n     ctn = Bot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c_t'.\n                         consume ctn cts = c_t' \\<and>\n                         c_types_agree c_t' ts'", "hence \"ct_suffix cts x1 \\<or> ct_suffix x1 cts\""], ["proof (prove)\nusing this:\n  ct_suffix cts (to_ct_list ts)\n\ngoal (1 subgoal):\n 1. ct_suffix cts x1 \\<or> ct_suffix x1 cts", "using TopType 1 assms(2) ct_suffix_shared"], ["proof (prove)\nusing this:\n  ct_suffix cts (to_ct_list ts)\n  ctn = TopType x1\n  ct_suffix cts (to_ct_list ts)\n  c_types_agree ctn ts\n  \\<lbrakk>ct_suffix ?cts (to_ct_list ?ts);\n   ct_suffix ?cts' (to_ct_list ?ts)\\<rbrakk>\n  \\<Longrightarrow> ct_suffix ?cts ?cts' \\<or> ct_suffix ?cts' ?cts\n\ngoal (1 subgoal):\n 1. ct_suffix cts x1 \\<or> ct_suffix x1 cts", "by simp"], ["proof (state)\nthis:\n  ct_suffix cts x1 \\<or> ct_suffix x1 cts\n\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>consume (Type ts) cts = Type ts'; c_types_agree ctn ts;\n        ctn = TopType x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c_t'.\n                            consume ctn cts = c_t' \\<and>\n                            c_types_agree c_t' ts'\n 2. \\<And>x2.\n       \\<lbrakk>consume (Type ts) cts = Type ts'; c_types_agree ctn ts;\n        ctn = Type x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c_t'.\n                            consume ctn cts = c_t' \\<and>\n                            c_types_agree c_t' ts'\n 3. \\<lbrakk>consume (Type ts) cts = Type ts'; c_types_agree ctn ts;\n     ctn = Bot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c_t'.\n                         consume ctn cts = c_t' \\<and>\n                         c_types_agree c_t' ts'", "thus ?thesis"], ["proof (prove)\nusing this:\n  ct_suffix cts x1 \\<or> ct_suffix x1 cts\n\ngoal (1 subgoal):\n 1. \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'", "proof (rule disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. ct_suffix cts x1 \\<Longrightarrow>\n    \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'\n 2. ct_suffix x1 cts \\<Longrightarrow>\n    \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'", "assume local_assms:\"ct_suffix cts x1\""], ["proof (state)\nthis:\n  ct_suffix cts x1\n\ngoal (2 subgoals):\n 1. ct_suffix cts x1 \\<Longrightarrow>\n    \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'\n 2. ct_suffix x1 cts \\<Longrightarrow>\n    \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'", "hence 2:\"consume (TopType x1) cts = TopType (take (length x1 - length cts) x1)\""], ["proof (prove)\nusing this:\n  ct_suffix cts x1\n\ngoal (1 subgoal):\n 1. consume (TopType x1) cts = TopType (take (length x1 - length cts) x1)", "by simp"], ["proof (state)\nthis:\n  consume (TopType x1) cts = TopType (take (length x1 - length cts) x1)\n\ngoal (2 subgoals):\n 1. ct_suffix cts x1 \\<Longrightarrow>\n    \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'\n 2. ct_suffix x1 cts \\<Longrightarrow>\n    \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'", "have \"(take (length ts - length cts) ts) = ts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length ts - length cts) ts = ts'", "using assms 1"], ["proof (prove)\nusing this:\n  consume (Type ts) cts = Type ts'\n  c_types_agree ctn ts\n  ct_suffix cts (to_ct_list ts)\n\ngoal (1 subgoal):\n 1. take (length ts - length cts) ts = ts'", "by simp"], ["proof (state)\nthis:\n  take (length ts - length cts) ts = ts'\n\ngoal (2 subgoals):\n 1. ct_suffix cts x1 \\<Longrightarrow>\n    \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'\n 2. ct_suffix x1 cts \\<Longrightarrow>\n    \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'", "hence \"c_types_agree (TopType (take (length x1 - length cts) x1)) ts'\""], ["proof (prove)\nusing this:\n  take (length ts - length cts) ts = ts'\n\ngoal (1 subgoal):\n 1. c_types_agree (TopType (take (length x1 - length cts) x1)) ts'", "using 2 assms local_assms TopType ct_suffix_take"], ["proof (prove)\nusing this:\n  take (length ts - length cts) ts = ts'\n  consume (TopType x1) cts = TopType (take (length x1 - length cts) x1)\n  consume (Type ts) cts = Type ts'\n  c_types_agree ctn ts\n  ct_suffix cts x1\n  ctn = TopType x1\n  ct_suffix ?ts ?ts' \\<Longrightarrow>\n  ct_suffix (take (length ?ts - ?n) ?ts) (take (length ?ts' - ?n) ?ts')\n\ngoal (1 subgoal):\n 1. c_types_agree (TopType (take (length x1 - length cts) x1)) ts'", "by (simp, metis length_map take_map to_ct_list_def)"], ["proof (state)\nthis:\n  c_types_agree (TopType (take (length x1 - length cts) x1)) ts'\n\ngoal (2 subgoals):\n 1. ct_suffix cts x1 \\<Longrightarrow>\n    \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'\n 2. ct_suffix x1 cts \\<Longrightarrow>\n    \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'", "thus ?thesis"], ["proof (prove)\nusing this:\n  c_types_agree (TopType (take (length x1 - length cts) x1)) ts'\n\ngoal (1 subgoal):\n 1. \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'", "using 2 TopType"], ["proof (prove)\nusing this:\n  c_types_agree (TopType (take (length x1 - length cts) x1)) ts'\n  consume (TopType x1) cts = TopType (take (length x1 - length cts) x1)\n  ctn = TopType x1\n\ngoal (1 subgoal):\n 1. \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'", "by simp"], ["proof (state)\nthis:\n  \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'\n\ngoal (1 subgoal):\n 1. ct_suffix x1 cts \\<Longrightarrow>\n    \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ct_suffix x1 cts \\<Longrightarrow>\n    \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'", "assume local_assms:\"ct_suffix x1 cts\""], ["proof (state)\nthis:\n  ct_suffix x1 cts\n\ngoal (1 subgoal):\n 1. ct_suffix x1 cts \\<Longrightarrow>\n    \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'", "hence 3:\"consume (TopType x1) cts = TopType []\""], ["proof (prove)\nusing this:\n  ct_suffix x1 cts\n\ngoal (1 subgoal):\n 1. consume (TopType x1) cts = TopType []", "by (simp add: ct_suffix_length)"], ["proof (state)\nthis:\n  consume (TopType x1) cts = TopType []\n\ngoal (1 subgoal):\n 1. ct_suffix x1 cts \\<Longrightarrow>\n    \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'", "thus ?thesis"], ["proof (prove)\nusing this:\n  consume (TopType x1) cts = TopType []\n\ngoal (1 subgoal):\n 1. \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'", "using TopType c_types_agree_top1"], ["proof (prove)\nusing this:\n  consume (TopType x1) cts = TopType []\n  ctn = TopType x1\n  c_types_agree (TopType []) ?ts\n\ngoal (1 subgoal):\n 1. \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c_t'. consume ctn cts = c_t' \\<and> c_types_agree c_t' ts'\n\ngoal (2 subgoals):\n 1. \\<And>x2.\n       \\<lbrakk>consume (Type ts) cts = Type ts'; c_types_agree ctn ts;\n        ctn = Type x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>c_t'.\n                            consume ctn cts = c_t' \\<and>\n                            c_types_agree c_t' ts'\n 2. \\<lbrakk>consume (Type ts) cts = Type ts'; c_types_agree ctn ts;\n     ctn = Bot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c_t'.\n                         consume ctn cts = c_t' \\<and>\n                         c_types_agree c_t' ts'", "qed simp_all"], ["", "lemma type_update_type:\n  assumes \"type_update (Type ts) (to_ct_list cons) prods = ts'\"\n          \"ts' \\<noteq> Bot\"\n        shows \"(ts' = prods \\<and> (\\<exists>ts_c. prods = (TopType ts_c)))\n               \\<or> (\\<exists>ts_a ts_b. prods = Type ts_a \\<and> ts = ts_b@cons \\<and> ts' = Type (ts_b@ts_a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts' = prods \\<and> (\\<exists>ts_c. prods = TopType ts_c) \\<or>\n    (\\<exists>ts_a ts_b.\n        prods = Type ts_a \\<and>\n        ts = ts_b @ cons \\<and> ts' = Type (ts_b @ ts_a))", "using assms"], ["proof (prove)\nusing this:\n  type_update (Type ts) (to_ct_list cons) prods = ts'\n  ts' \\<noteq> Bot\n\ngoal (1 subgoal):\n 1. ts' = prods \\<and> (\\<exists>ts_c. prods = TopType ts_c) \\<or>\n    (\\<exists>ts_a ts_b.\n        prods = Type ts_a \\<and>\n        ts = ts_b @ cons \\<and> ts' = Type (ts_b @ ts_a))", "apply (cases prods)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>type_update (Type ts) (to_ct_list cons) prods = ts';\n        ts' \\<noteq> Bot; prods = TopType x1\\<rbrakk>\n       \\<Longrightarrow> ts' = prods \\<and>\n                         (\\<exists>ts_c. prods = TopType ts_c) \\<or>\n                         (\\<exists>ts_a ts_b.\n                             prods = Type ts_a \\<and>\n                             ts = ts_b @ cons \\<and>\n                             ts' = Type (ts_b @ ts_a))\n 2. \\<And>x2.\n       \\<lbrakk>type_update (Type ts) (to_ct_list cons) prods = ts';\n        ts' \\<noteq> Bot; prods = Type x2\\<rbrakk>\n       \\<Longrightarrow> ts' = prods \\<and>\n                         (\\<exists>ts_c. prods = TopType ts_c) \\<or>\n                         (\\<exists>ts_a ts_b.\n                             prods = Type ts_a \\<and>\n                             ts = ts_b @ cons \\<and>\n                             ts' = Type (ts_b @ ts_a))\n 3. \\<lbrakk>type_update (Type ts) (to_ct_list cons) prods = ts';\n     ts' \\<noteq> Bot; prods = Bot\\<rbrakk>\n    \\<Longrightarrow> ts' = prods \\<and>\n                      (\\<exists>ts_c. prods = TopType ts_c) \\<or>\n                      (\\<exists>ts_a ts_b.\n                          prods = Type ts_a \\<and>\n                          ts = ts_b @ cons \\<and> ts' = Type (ts_b @ ts_a))", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>produce\n                 (if ct_suffix (to_ct_list cons) (to_ct_list ts)\n                  then Type (take (length ts - length (to_ct_list cons)) ts)\n                  else Bot)\n                 (TopType x1) =\n                ts';\n        ts' \\<noteq> Bot; prods = TopType x1\\<rbrakk>\n       \\<Longrightarrow> ts' = TopType x1\n 2. \\<And>x2.\n       \\<lbrakk>produce\n                 (if ct_suffix (to_ct_list cons) (to_ct_list ts)\n                  then Type (take (length ts - length (to_ct_list cons)) ts)\n                  else Bot)\n                 (Type x2) =\n                ts';\n        ts' \\<noteq> Bot; prods = Type x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts_b.\n                            ts = ts_b @ cons \\<and> ts' = Type (ts_b @ x2)", "apply (metis (full_types) produce.simps(3) produce.simps(7))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>produce\n                 (if ct_suffix (to_ct_list cons) (to_ct_list ts)\n                  then Type (take (length ts - length (to_ct_list cons)) ts)\n                  else Bot)\n                 (Type x2) =\n                ts';\n        ts' \\<noteq> Bot; prods = Type x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts_b.\n                            ts = ts_b @ cons \\<and> ts' = Type (ts_b @ x2)", "using ct_suffix_ts_conv_suffix suffix_take to_ct_list_def"], ["proof (prove)\nusing this:\n  ct_suffix (to_ct_list ?ts) (to_ct_list ?ts') = suffix ?ts ?ts'\n  suffix ?xs ?ys \\<Longrightarrow>\n  ?ys = take (length ?ys - length ?xs) ?ys @ ?xs\n  to_ct_list ?ts = map TSome ?ts\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>produce\n                 (if ct_suffix (to_ct_list cons) (to_ct_list ts)\n                  then Type (take (length ts - length (to_ct_list cons)) ts)\n                  else Bot)\n                 (Type x2) =\n                ts';\n        ts' \\<noteq> Bot; prods = Type x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ts_b.\n                            ts = ts_b @ cons \\<and> ts' = Type (ts_b @ x2)", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma type_update_empty: \"type_update ts cons (Type []) = consume ts cons\""], ["proof (prove)\ngoal (1 subgoal):\n 1. type_update ts cons (Type []) = consume ts cons", "using produce_nil"], ["proof (prove)\nusing this:\n  produce ?ts (Type []) = ?ts\n\ngoal (1 subgoal):\n 1. type_update ts cons (Type []) = consume ts cons", "by simp"], ["", "lemma type_update_top_top:\n  assumes \"type_update (TopType ts) (to_ct_list cons) (Type prods) = (TopType ts')\"\n          \"c_types_agree (TopType ts') t_ag\"\n  shows \"ct_suffix (to_ct_list prods) ts'\"\n        \"\\<exists>t_ag'. t_ag = t_ag'@prods \\<and> c_types_agree (TopType ts) (t_ag'@cons)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix (to_ct_list prods) ts' &&&\n    \\<exists>t_ag'.\n       t_ag = t_ag' @ prods \\<and> c_types_agree (TopType ts) (t_ag' @ cons)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. ct_suffix (to_ct_list prods) ts'\n 2. \\<exists>t_ag'.\n       t_ag = t_ag' @ prods \\<and> c_types_agree (TopType ts) (t_ag' @ cons)", "consider (1) \"ct_suffix (to_ct_list cons) ts\"\n         | (2) \"\\<not>ct_suffix (to_ct_list cons) ts\" \"ct_suffix ts (to_ct_list cons)\"\n         | (3) \"\\<not>ct_suffix (to_ct_list cons) ts\" \"\\<not>ct_suffix ts (to_ct_list cons)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ct_suffix (to_ct_list cons) ts \\<Longrightarrow> thesis;\n     \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n      ct_suffix ts (to_ct_list cons)\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n      \\<not> ct_suffix ts (to_ct_list cons)\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>ct_suffix (to_ct_list cons) ts \\<Longrightarrow> ?thesis;\n   \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n    ct_suffix ts (to_ct_list cons)\\<rbrakk>\n   \\<Longrightarrow> ?thesis;\n   \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n    \\<not> ct_suffix ts (to_ct_list cons)\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (2 subgoals):\n 1. ct_suffix (to_ct_list prods) ts'\n 2. \\<exists>t_ag'.\n       t_ag = t_ag' @ prods \\<and> c_types_agree (TopType ts) (t_ag' @ cons)", "hence \"ct_suffix (to_ct_list prods) ts' \\<and> (\\<exists>t_ag'. t_ag = t_ag'@prods \\<and> c_types_agree (TopType ts) (t_ag'@cons))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>ct_suffix (to_ct_list cons) ts \\<Longrightarrow> ?thesis;\n   \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n    ct_suffix ts (to_ct_list cons)\\<rbrakk>\n   \\<Longrightarrow> ?thesis;\n   \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n    \\<not> ct_suffix ts (to_ct_list cons)\\<rbrakk>\n   \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. ct_suffix (to_ct_list prods) ts' \\<and>\n    (\\<exists>t_ag'.\n        t_ag = t_ag' @ prods \\<and>\n        c_types_agree (TopType ts) (t_ag' @ cons))", "proof (cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. ct_suffix (to_ct_list cons) ts \\<Longrightarrow>\n    ct_suffix (to_ct_list prods) ts' \\<and>\n    (\\<exists>t_ag'.\n        t_ag = t_ag' @ prods \\<and>\n        c_types_agree (TopType ts) (t_ag' @ cons))\n 2. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))\n 3. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     \\<not> ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))", "case 1"], ["proof (state)\nthis:\n  ct_suffix (to_ct_list cons) ts\n\ngoal (3 subgoals):\n 1. ct_suffix (to_ct_list cons) ts \\<Longrightarrow>\n    ct_suffix (to_ct_list prods) ts' \\<and>\n    (\\<exists>t_ag'.\n        t_ag = t_ag' @ prods \\<and>\n        c_types_agree (TopType ts) (t_ag' @ cons))\n 2. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))\n 3. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     \\<not> ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))", "hence \"ts' = (take (length ts - length cons) ts) @ to_ct_list prods\""], ["proof (prove)\nusing this:\n  ct_suffix (to_ct_list cons) ts\n\ngoal (1 subgoal):\n 1. ts' = take (length ts - length cons) ts @ to_ct_list prods", "using assms(1) to_ct_list_def"], ["proof (prove)\nusing this:\n  ct_suffix (to_ct_list cons) ts\n  type_update (TopType ts) (to_ct_list cons) (Type prods) = TopType ts'\n  to_ct_list ?ts = map TSome ?ts\n\ngoal (1 subgoal):\n 1. ts' = take (length ts - length cons) ts @ to_ct_list prods", "by simp"], ["proof (state)\nthis:\n  ts' = take (length ts - length cons) ts @ to_ct_list prods\n\ngoal (3 subgoals):\n 1. ct_suffix (to_ct_list cons) ts \\<Longrightarrow>\n    ct_suffix (to_ct_list prods) ts' \\<and>\n    (\\<exists>t_ag'.\n        t_ag = t_ag' @ prods \\<and>\n        c_types_agree (TopType ts) (t_ag' @ cons))\n 2. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))\n 3. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     \\<not> ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))", "moreover"], ["proof (state)\nthis:\n  ts' = take (length ts - length cons) ts @ to_ct_list prods\n\ngoal (3 subgoals):\n 1. ct_suffix (to_ct_list cons) ts \\<Longrightarrow>\n    ct_suffix (to_ct_list prods) ts' \\<and>\n    (\\<exists>t_ag'.\n        t_ag = t_ag' @ prods \\<and>\n        c_types_agree (TopType ts) (t_ag' @ cons))\n 2. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))\n 3. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     \\<not> ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))", "then"], ["proof (chain)\npicking this:\n  ts' = take (length ts - length cons) ts @ to_ct_list prods", "obtain t_ag' where \"t_ag = t_ag' @ prods\"\n                            \"ct_suffix (take (length ts - length cons) ts) (to_ct_list t_ag')\""], ["proof (prove)\nusing this:\n  ts' = take (length ts - length cons) ts @ to_ct_list prods\n\ngoal (1 subgoal):\n 1. (\\<And>t_ag'.\n        \\<lbrakk>t_ag = t_ag' @ prods;\n         ct_suffix (take (length ts - length cons) ts)\n          (to_ct_list t_ag')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(2) ct_suffix_cons_ct_list1"], ["proof (prove)\nusing this:\n  ts' = take (length ts - length cons) ts @ to_ct_list prods\n  c_types_agree (TopType ts') t_ag\n  ct_suffix (?xs @ to_ct_list ?ys) (to_ct_list ?zs) \\<Longrightarrow>\n  \\<exists>as. ?zs = as @ ?ys \\<and> ct_suffix ?xs (to_ct_list as)\n\ngoal (1 subgoal):\n 1. (\\<And>t_ag'.\n        \\<lbrakk>t_ag = t_ag' @ prods;\n         ct_suffix (take (length ts - length cons) ts)\n          (to_ct_list t_ag')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding c_types_agree.simps"], ["proof (prove)\nusing this:\n  ts' = take (length ts - length cons) ts @ to_ct_list prods\n  ct_suffix ts' (to_ct_list t_ag)\n  ct_suffix (?xs @ to_ct_list ?ys) (to_ct_list ?zs) \\<Longrightarrow>\n  \\<exists>as. ?zs = as @ ?ys \\<and> ct_suffix ?xs (to_ct_list as)\n\ngoal (1 subgoal):\n 1. (\\<And>t_ag'.\n        \\<lbrakk>t_ag = t_ag' @ prods;\n         ct_suffix (take (length ts - length cons) ts)\n          (to_ct_list t_ag')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  t_ag = t_ag' @ prods\n  ct_suffix (take (length ts - length cons) ts) (to_ct_list t_ag')\n\ngoal (3 subgoals):\n 1. ct_suffix (to_ct_list cons) ts \\<Longrightarrow>\n    ct_suffix (to_ct_list prods) ts' \\<and>\n    (\\<exists>t_ag'.\n        t_ag = t_ag' @ prods \\<and>\n        c_types_agree (TopType ts) (t_ag' @ cons))\n 2. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))\n 3. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     \\<not> ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))", "moreover"], ["proof (state)\nthis:\n  t_ag = t_ag' @ prods\n  ct_suffix (take (length ts - length cons) ts) (to_ct_list t_ag')\n\ngoal (3 subgoals):\n 1. ct_suffix (to_ct_list cons) ts \\<Longrightarrow>\n    ct_suffix (to_ct_list prods) ts' \\<and>\n    (\\<exists>t_ag'.\n        t_ag = t_ag' @ prods \\<and>\n        c_types_agree (TopType ts) (t_ag' @ cons))\n 2. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))\n 3. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     \\<not> ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))", "hence \"ct_suffix ts (to_ct_list (t_ag'@cons))\""], ["proof (prove)\nusing this:\n  t_ag = t_ag' @ prods\n  ct_suffix (take (length ts - length cons) ts) (to_ct_list t_ag')\n\ngoal (1 subgoal):\n 1. ct_suffix ts (to_ct_list (t_ag' @ cons))", "using 1 ct_suffix_imp_ct_list_eq ct_suffix_extend_ct_list_eq to_ct_list_def"], ["proof (prove)\nusing this:\n  t_ag = t_ag' @ prods\n  ct_suffix (take (length ts - length cons) ts) (to_ct_list t_ag')\n  ct_suffix (to_ct_list cons) ts\n  ct_suffix ?xs ?ys \\<Longrightarrow>\n  ct_list_eq (drop (length ?ys - length ?xs) ?ys) ?xs\n  \\<lbrakk>ct_suffix ?xs ?ys; ct_list_eq ?xs' ?ys'\\<rbrakk>\n  \\<Longrightarrow> ct_suffix (?xs @ ?xs') (?ys @ ?ys')\n  to_ct_list ?ts = map TSome ?ts\n\ngoal (1 subgoal):\n 1. ct_suffix ts (to_ct_list (t_ag' @ cons))", "by fastforce"], ["proof (state)\nthis:\n  ct_suffix ts (to_ct_list (t_ag' @ cons))\n\ngoal (3 subgoals):\n 1. ct_suffix (to_ct_list cons) ts \\<Longrightarrow>\n    ct_suffix (to_ct_list prods) ts' \\<and>\n    (\\<exists>t_ag'.\n        t_ag = t_ag' @ prods \\<and>\n        c_types_agree (TopType ts) (t_ag' @ cons))\n 2. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))\n 3. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     \\<not> ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))", "ultimately"], ["proof (chain)\npicking this:\n  ts' = take (length ts - length cons) ts @ to_ct_list prods\n  t_ag = t_ag' @ prods\n  ct_suffix (take (length ts - length cons) ts) (to_ct_list t_ag')\n  ct_suffix ts (to_ct_list (t_ag' @ cons))", "show ?thesis"], ["proof (prove)\nusing this:\n  ts' = take (length ts - length cons) ts @ to_ct_list prods\n  t_ag = t_ag' @ prods\n  ct_suffix (take (length ts - length cons) ts) (to_ct_list t_ag')\n  ct_suffix ts (to_ct_list (t_ag' @ cons))\n\ngoal (1 subgoal):\n 1. ct_suffix (to_ct_list prods) ts' \\<and>\n    (\\<exists>t_ag'.\n        t_ag = t_ag' @ prods \\<and>\n        c_types_agree (TopType ts) (t_ag' @ cons))", "using c_types_agree.simps(2) ct_list_eq_ts_conv_eq ct_suffix_def"], ["proof (prove)\nusing this:\n  ts' = take (length ts - length cons) ts @ to_ct_list prods\n  t_ag = t_ag' @ prods\n  ct_suffix (take (length ts - length cons) ts) (to_ct_list t_ag')\n  ct_suffix ts (to_ct_list (t_ag' @ cons))\n  c_types_agree (TopType ?ts) ?ts' = ct_suffix ?ts (to_ct_list ?ts')\n  ct_list_eq (to_ct_list ?ts) (to_ct_list ?ts') = (?ts = ?ts')\n  ct_suffix ?xs ?ys =\n  (\\<exists>as bs. ?ys = as @ bs \\<and> ct_list_eq bs ?xs)\n\ngoal (1 subgoal):\n 1. ct_suffix (to_ct_list prods) ts' \\<and>\n    (\\<exists>t_ag'.\n        t_ag = t_ag' @ prods \\<and>\n        c_types_agree (TopType ts) (t_ag' @ cons))", "by auto"], ["proof (state)\nthis:\n  ct_suffix (to_ct_list prods) ts' \\<and>\n  (\\<exists>t_ag'.\n      t_ag = t_ag' @ prods \\<and> c_types_agree (TopType ts) (t_ag' @ cons))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))\n 2. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     \\<not> ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))\n 2. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     \\<not> ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))", "case 2"], ["proof (state)\nthis:\n  \\<not> ct_suffix (to_ct_list cons) ts\n  ct_suffix ts (to_ct_list cons)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))\n 2. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     \\<not> ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ct_suffix (to_ct_list cons) ts\n  ct_suffix ts (to_ct_list cons)\n\ngoal (1 subgoal):\n 1. ct_suffix (to_ct_list prods) ts' \\<and>\n    (\\<exists>t_ag'.\n        t_ag = t_ag' @ prods \\<and>\n        c_types_agree (TopType ts) (t_ag' @ cons))", "using assms"], ["proof (prove)\nusing this:\n  \\<not> ct_suffix (to_ct_list cons) ts\n  ct_suffix ts (to_ct_list cons)\n  type_update (TopType ts) (to_ct_list cons) (Type prods) = TopType ts'\n  c_types_agree (TopType ts') t_ag\n\ngoal (1 subgoal):\n 1. ct_suffix (to_ct_list prods) ts' \\<and>\n    (\\<exists>t_ag'.\n        t_ag = t_ag' @ prods \\<and>\n        c_types_agree (TopType ts) (t_ag' @ cons))", "by (metis append.assoc c_types_agree.simps(2) checker_type.inject(1) consume.simps(2)\n                ct_list_eq_ts_conv_eq ct_suffix_cons_ct_list ct_suffix_def map_append\n                produce.simps(1) to_ct_list_def type_update.simps)"], ["proof (state)\nthis:\n  ct_suffix (to_ct_list prods) ts' \\<and>\n  (\\<exists>t_ag'.\n      t_ag = t_ag' @ prods \\<and> c_types_agree (TopType ts) (t_ag' @ cons))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     \\<not> ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     \\<not> ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))", "case 3"], ["proof (state)\nthis:\n  \\<not> ct_suffix (to_ct_list cons) ts\n  \\<not> ct_suffix ts (to_ct_list cons)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ct_suffix (to_ct_list cons) ts;\n     \\<not> ct_suffix ts (to_ct_list cons)\\<rbrakk>\n    \\<Longrightarrow> ct_suffix (to_ct_list prods) ts' \\<and>\n                      (\\<exists>t_ag'.\n                          t_ag = t_ag' @ prods \\<and>\n                          c_types_agree (TopType ts) (t_ag' @ cons))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ct_suffix (to_ct_list cons) ts\n  \\<not> ct_suffix ts (to_ct_list cons)\n\ngoal (1 subgoal):\n 1. ct_suffix (to_ct_list prods) ts' \\<and>\n    (\\<exists>t_ag'.\n        t_ag = t_ag' @ prods \\<and>\n        c_types_agree (TopType ts) (t_ag' @ cons))", "using assms"], ["proof (prove)\nusing this:\n  \\<not> ct_suffix (to_ct_list cons) ts\n  \\<not> ct_suffix ts (to_ct_list cons)\n  type_update (TopType ts) (to_ct_list cons) (Type prods) = TopType ts'\n  c_types_agree (TopType ts') t_ag\n\ngoal (1 subgoal):\n 1. ct_suffix (to_ct_list prods) ts' \\<and>\n    (\\<exists>t_ag'.\n        t_ag = t_ag' @ prods \\<and>\n        c_types_agree (TopType ts) (t_ag' @ cons))", "by simp"], ["proof (state)\nthis:\n  ct_suffix (to_ct_list prods) ts' \\<and>\n  (\\<exists>t_ag'.\n      t_ag = t_ag' @ prods \\<and> c_types_agree (TopType ts) (t_ag' @ cons))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ct_suffix (to_ct_list prods) ts' \\<and>\n  (\\<exists>t_ag'.\n      t_ag = t_ag' @ prods \\<and> c_types_agree (TopType ts) (t_ag' @ cons))\n\ngoal (2 subgoals):\n 1. ct_suffix (to_ct_list prods) ts'\n 2. \\<exists>t_ag'.\n       t_ag = t_ag' @ prods \\<and> c_types_agree (TopType ts) (t_ag' @ cons)", "thus \"ct_suffix (to_ct_list prods) ts'\"\n        \"\\<exists>t_ag'. t_ag = t_ag'@prods \\<and> c_types_agree (TopType ts) (t_ag'@cons)\""], ["proof (prove)\nusing this:\n  ct_suffix (to_ct_list prods) ts' \\<and>\n  (\\<exists>t_ag'.\n      t_ag = t_ag' @ prods \\<and> c_types_agree (TopType ts) (t_ag' @ cons))\n\ngoal (1 subgoal):\n 1. ct_suffix (to_ct_list prods) ts' &&&\n    \\<exists>t_ag'.\n       t_ag = t_ag' @ prods \\<and> c_types_agree (TopType ts) (t_ag' @ cons)", "by simp_all"], ["proof (state)\nthis:\n  ct_suffix (to_ct_list prods) ts'\n  \\<exists>t_ag'.\n     t_ag = t_ag' @ prods \\<and> c_types_agree (TopType ts) (t_ag' @ cons)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma type_update_select_length0:\n  assumes \"type_update_select (TopType cts) = tm\"\n          \"length cts = 0\"\n          \"tm \\<noteq> Bot\"\n  shows \"tm = TopType [TAny]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tm = TopType [TAny]", "using assms"], ["proof (prove)\nusing this:\n  type_update_select (TopType cts) = tm\n  length cts = 0\n  tm \\<noteq> Bot\n\ngoal (1 subgoal):\n 1. tm = TopType [TAny]", "by simp"], ["", "lemma type_update_select_length1:\n  assumes \"type_update_select (TopType cts) = tm\"\n          \"length cts = 1\"\n          \"tm \\<noteq> Bot\"\n  shows \"ct_list_eq cts [TSome T_i32]\"\n        \"tm = TopType [TAny]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_list_eq cts [TSome T_i32] &&& tm = TopType [TAny]", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. ct_list_eq cts [TSome T_i32]\n 2. tm = TopType [TAny]", "have 1:\"type_update (TopType cts) [TSome T_i32] (TopType [TAny]) = tm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. type_update (TopType cts) [TSome T_i32] (TopType [TAny]) = tm", "using assms(1,2)"], ["proof (prove)\nusing this:\n  type_update_select (TopType cts) = tm\n  length cts = 1\n\ngoal (1 subgoal):\n 1. type_update (TopType cts) [TSome T_i32] (TopType [TAny]) = tm", "by simp"], ["proof (state)\nthis:\n  type_update (TopType cts) [TSome T_i32] (TopType [TAny]) = tm\n\ngoal (2 subgoals):\n 1. ct_list_eq cts [TSome T_i32]\n 2. tm = TopType [TAny]", "hence \"ct_suffix cts [TSome T_i32] \\<or> ct_suffix [TSome T_i32] cts\""], ["proof (prove)\nusing this:\n  type_update (TopType cts) [TSome T_i32] (TopType [TAny]) = tm\n\ngoal (1 subgoal):\n 1. ct_suffix cts [TSome T_i32] \\<or> ct_suffix [TSome T_i32] cts", "using assms(3)"], ["proof (prove)\nusing this:\n  type_update (TopType cts) [TSome T_i32] (TopType [TAny]) = tm\n  tm \\<noteq> Bot\n\ngoal (1 subgoal):\n 1. ct_suffix cts [TSome T_i32] \\<or> ct_suffix [TSome T_i32] cts", "by (metis consume.simps(2) produce.simps(7) type_update.simps)"], ["proof (state)\nthis:\n  ct_suffix cts [TSome T_i32] \\<or> ct_suffix [TSome T_i32] cts\n\ngoal (2 subgoals):\n 1. ct_list_eq cts [TSome T_i32]\n 2. tm = TopType [TAny]", "thus \"ct_list_eq cts [TSome T_i32]\""], ["proof (prove)\nusing this:\n  ct_suffix cts [TSome T_i32] \\<or> ct_suffix [TSome T_i32] cts\n\ngoal (1 subgoal):\n 1. ct_list_eq cts [TSome T_i32]", "using assms(2,3) ct_suffix_imp_ct_list_eq"], ["proof (prove)\nusing this:\n  ct_suffix cts [TSome T_i32] \\<or> ct_suffix [TSome T_i32] cts\n  length cts = 1\n  tm \\<noteq> Bot\n  ct_suffix ?xs ?ys \\<Longrightarrow>\n  ct_list_eq (drop (length ?ys - length ?xs) ?ys) ?xs\n\ngoal (1 subgoal):\n 1. ct_list_eq cts [TSome T_i32]", "by (metis One_nat_def Suc_length_conv ct_list_eq_commute diff_Suc_1 drop_0 list.size(3))"], ["proof (state)\nthis:\n  ct_list_eq cts [TSome T_i32]\n\ngoal (1 subgoal):\n 1. tm = TopType [TAny]", "show \"tm = TopType [TAny]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tm = TopType [TAny]", "using 1 assms(3) consume_top_leq"], ["proof (prove)\nusing this:\n  type_update (TopType cts) [TSome T_i32] (TopType [TAny]) = tm\n  tm \\<noteq> Bot\n  \\<lbrakk>consume (TopType ?ts) ?ts' = ?c_t; length ?ts \\<le> length ?ts';\n   ?c_t \\<noteq> Bot\\<rbrakk>\n  \\<Longrightarrow> ?c_t = TopType []\n\ngoal (1 subgoal):\n 1. tm = TopType [TAny]", "by (metis One_nat_def assms(2) diff_Suc_1 diff_is_0_eq length_Cons list.size(3)\n              produce.simps(4,7) type_update.simps)"], ["proof (state)\nthis:\n  tm = TopType [TAny]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma type_update_select_length2:\n  assumes \"type_update_select (TopType cts) = tm\"\n          \"length cts = 2\"\n          \"tm \\<noteq> Bot\"\n  shows \"\\<exists>t1 t2. cts = [t1, t2] \\<and> ct_eq t2 (TSome T_i32) \\<and> tm = TopType [t1]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t1 t2.\n       cts = [t1, t2] \\<and> ct_eq t2 (TSome T_i32) \\<and> tm = TopType [t1]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>t1 t2.\n       cts = [t1, t2] \\<and> ct_eq t2 (TSome T_i32) \\<and> tm = TopType [t1]", "obtain x y where cts_def:\"cts = [x,y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y. cts = [x, y] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(2) List.length_Suc_conv[of cts \"Suc 0\"]"], ["proof (prove)\nusing this:\n  length cts = 2\n  (length cts = Suc (Suc 0)) =\n  (\\<exists>y ys. cts = y # ys \\<and> length ys = Suc 0)\n\ngoal (1 subgoal):\n 1. (\\<And>x y. cts = [x, y] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis length_0_conv length_Suc_conv numeral_2_eq_2)"], ["proof (state)\nthis:\n  cts = [x, y]\n\ngoal (1 subgoal):\n 1. \\<exists>t1 t2.\n       cts = [t1, t2] \\<and> ct_eq t2 (TSome T_i32) \\<and> tm = TopType [t1]", "moreover"], ["proof (state)\nthis:\n  cts = [x, y]\n\ngoal (1 subgoal):\n 1. \\<exists>t1 t2.\n       cts = [t1, t2] \\<and> ct_eq t2 (TSome T_i32) \\<and> tm = TopType [t1]", "hence \"consume (TopType [x,y]) [TSome T_i32] = tm\""], ["proof (prove)\nusing this:\n  cts = [x, y]\n\ngoal (1 subgoal):\n 1. consume (TopType [x, y]) [TSome T_i32] = tm", "using assms(1,2)"], ["proof (prove)\nusing this:\n  cts = [x, y]\n  type_update_select (TopType cts) = tm\n  length cts = 2\n\ngoal (1 subgoal):\n 1. consume (TopType [x, y]) [TSome T_i32] = tm", "by simp"], ["proof (state)\nthis:\n  consume (TopType [x, y]) [TSome T_i32] = tm\n\ngoal (1 subgoal):\n 1. \\<exists>t1 t2.\n       cts = [t1, t2] \\<and> ct_eq t2 (TSome T_i32) \\<and> tm = TopType [t1]", "moreover"], ["proof (state)\nthis:\n  consume (TopType [x, y]) [TSome T_i32] = tm\n\ngoal (1 subgoal):\n 1. \\<exists>t1 t2.\n       cts = [t1, t2] \\<and> ct_eq t2 (TSome T_i32) \\<and> tm = TopType [t1]", "hence \"ct_suffix [x,y] [TSome T_i32] \\<or> ct_suffix [TSome T_i32] [x,y]\""], ["proof (prove)\nusing this:\n  consume (TopType [x, y]) [TSome T_i32] = tm\n\ngoal (1 subgoal):\n 1. ct_suffix [x, y] [TSome T_i32] \\<or> ct_suffix [TSome T_i32] [x, y]", "using assms(3)"], ["proof (prove)\nusing this:\n  consume (TopType [x, y]) [TSome T_i32] = tm\n  tm \\<noteq> Bot\n\ngoal (1 subgoal):\n 1. ct_suffix [x, y] [TSome T_i32] \\<or> ct_suffix [TSome T_i32] [x, y]", "by (metis consume.simps(2))"], ["proof (state)\nthis:\n  ct_suffix [x, y] [TSome T_i32] \\<or> ct_suffix [TSome T_i32] [x, y]\n\ngoal (1 subgoal):\n 1. \\<exists>t1 t2.\n       cts = [t1, t2] \\<and> ct_eq t2 (TSome T_i32) \\<and> tm = TopType [t1]", "hence \"ct_suffix [TSome T_i32] ([x]@[y])\""], ["proof (prove)\nusing this:\n  ct_suffix [x, y] [TSome T_i32] \\<or> ct_suffix [TSome T_i32] [x, y]\n\ngoal (1 subgoal):\n 1. ct_suffix [TSome T_i32] ([x] @ [y])", "using assms(2) ct_suffix_length"], ["proof (prove)\nusing this:\n  ct_suffix [x, y] [TSome T_i32] \\<or> ct_suffix [TSome T_i32] [x, y]\n  length cts = 2\n  ct_suffix ?ts ?ts' \\<Longrightarrow> length ?ts \\<le> length ?ts'\n\ngoal (1 subgoal):\n 1. ct_suffix [TSome T_i32] ([x] @ [y])", "by fastforce"], ["proof (state)\nthis:\n  ct_suffix [TSome T_i32] ([x] @ [y])\n\ngoal (1 subgoal):\n 1. \\<exists>t1 t2.\n       cts = [t1, t2] \\<and> ct_eq t2 (TSome T_i32) \\<and> tm = TopType [t1]", "moreover"], ["proof (state)\nthis:\n  ct_suffix [TSome T_i32] ([x] @ [y])\n\ngoal (1 subgoal):\n 1. \\<exists>t1 t2.\n       cts = [t1, t2] \\<and> ct_eq t2 (TSome T_i32) \\<and> tm = TopType [t1]", "hence \"ct_eq y (TSome T_i32)\""], ["proof (prove)\nusing this:\n  ct_suffix [TSome T_i32] ([x] @ [y])\n\ngoal (1 subgoal):\n 1. ct_eq y (TSome T_i32)", "by (metis ct_eq_commute ct_list_eq_def ct_suffix_cons2 list.rel_sel list.sel(1) list.simps(3)\n              list.size(4))"], ["proof (state)\nthis:\n  ct_eq y (TSome T_i32)\n\ngoal (1 subgoal):\n 1. \\<exists>t1 t2.\n       cts = [t1, t2] \\<and> ct_eq t2 (TSome T_i32) \\<and> tm = TopType [t1]", "ultimately"], ["proof (chain)\npicking this:\n  cts = [x, y]\n  consume (TopType [x, y]) [TSome T_i32] = tm\n  ct_suffix [TSome T_i32] ([x] @ [y])\n  ct_eq y (TSome T_i32)", "show ?thesis"], ["proof (prove)\nusing this:\n  cts = [x, y]\n  consume (TopType [x, y]) [TSome T_i32] = tm\n  ct_suffix [TSome T_i32] ([x] @ [y])\n  ct_eq y (TSome T_i32)\n\ngoal (1 subgoal):\n 1. \\<exists>t1 t2.\n       cts = [t1, t2] \\<and> ct_eq t2 (TSome T_i32) \\<and> tm = TopType [t1]", "by auto"], ["proof (state)\nthis:\n  \\<exists>t1 t2.\n     cts = [t1, t2] \\<and> ct_eq t2 (TSome T_i32) \\<and> tm = TopType [t1]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma type_update_select_length3:\n  assumes \"type_update_select (TopType cts) = (TopType ctm)\"\n          \"length cts \\<ge> 3\"\n  shows \"\\<exists>cts' ct1 ct2 ct3. cts = cts'@[ct1, ct2, ct3] \\<and> ct_eq ct3 (TSome T_i32)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>cts' ct1 ct2 ct3.\n       cts = cts' @ [ct1, ct2, ct3] \\<and> ct_eq ct3 (TSome T_i32)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>cts' ct1 ct2 ct3.\n       cts = cts' @ [ct1, ct2, ct3] \\<and> ct_eq ct3 (TSome T_i32)", "obtain cts' cts'' where cts_def:\"cts = cts'@ cts''\" \"length cts'' = 3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>cts' cts''.\n        \\<lbrakk>cts = cts' @ cts''; length cts'' = 3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(2)"], ["proof (prove)\nusing this:\n  3 \\<le> length cts\n\ngoal (1 subgoal):\n 1. (\\<And>cts' cts''.\n        \\<lbrakk>cts = cts' @ cts''; length cts'' = 3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis append_take_drop_id diff_diff_cancel length_drop)"], ["proof (state)\nthis:\n  cts = cts' @ cts''\n  length cts'' = 3\n\ngoal (1 subgoal):\n 1. \\<exists>cts' ct1 ct2 ct3.\n       cts = cts' @ [ct1, ct2, ct3] \\<and> ct_eq ct3 (TSome T_i32)", "then"], ["proof (chain)\npicking this:\n  cts = cts' @ cts''\n  length cts'' = 3", "obtain ct1 cts''2 where \"cts'' = ct1#cts''2\" \"length cts''2 = Suc (Suc 0)\""], ["proof (prove)\nusing this:\n  cts = cts' @ cts''\n  length cts'' = 3\n\ngoal (1 subgoal):\n 1. (\\<And>ct1 cts''2.\n        \\<lbrakk>cts'' = ct1 # cts''2; length cts''2 = Suc (Suc 0)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using List.length_Suc_conv[of cts' \"Suc (Suc 0)\"]"], ["proof (prove)\nusing this:\n  cts = cts' @ cts''\n  length cts'' = 3\n  (length cts' = Suc (Suc (Suc 0))) =\n  (\\<exists>y ys. cts' = y # ys \\<and> length ys = Suc (Suc 0))\n\ngoal (1 subgoal):\n 1. (\\<And>ct1 cts''2.\n        \\<lbrakk>cts'' = ct1 # cts''2; length cts''2 = Suc (Suc 0)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis length_Suc_conv numeral_3_eq_3)"], ["proof (state)\nthis:\n  cts'' = ct1 # cts''2\n  length cts''2 = Suc (Suc 0)\n\ngoal (1 subgoal):\n 1. \\<exists>cts' ct1 ct2 ct3.\n       cts = cts' @ [ct1, ct2, ct3] \\<and> ct_eq ct3 (TSome T_i32)", "then"], ["proof (chain)\npicking this:\n  cts'' = ct1 # cts''2\n  length cts''2 = Suc (Suc 0)", "obtain ct2 ct3 where \"cts'' = [ct1,ct2,ct3]\""], ["proof (prove)\nusing this:\n  cts'' = ct1 # cts''2\n  length cts''2 = Suc (Suc 0)\n\ngoal (1 subgoal):\n 1. (\\<And>ct2 ct3.\n        cts'' = [ct1, ct2, ct3] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using List.length_Suc_conv[of cts''2 \"Suc 0\"]"], ["proof (prove)\nusing this:\n  cts'' = ct1 # cts''2\n  length cts''2 = Suc (Suc 0)\n  (length cts''2 = Suc (Suc 0)) =\n  (\\<exists>y ys. cts''2 = y # ys \\<and> length ys = Suc 0)\n\ngoal (1 subgoal):\n 1. (\\<And>ct2 ct3.\n        cts'' = [ct1, ct2, ct3] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis length_0_conv length_Suc_conv)"], ["proof (state)\nthis:\n  cts'' = [ct1, ct2, ct3]\n\ngoal (1 subgoal):\n 1. \\<exists>cts' ct1 ct2 ct3.\n       cts = cts' @ [ct1, ct2, ct3] \\<and> ct_eq ct3 (TSome T_i32)", "hence cts_def2:\"cts = cts'@ [ct1,ct2,ct3]\""], ["proof (prove)\nusing this:\n  cts'' = [ct1, ct2, ct3]\n\ngoal (1 subgoal):\n 1. cts = cts' @ [ct1, ct2, ct3]", "using cts_def"], ["proof (prove)\nusing this:\n  cts'' = [ct1, ct2, ct3]\n  cts = cts' @ cts''\n  length cts'' = 3\n\ngoal (1 subgoal):\n 1. cts = cts' @ [ct1, ct2, ct3]", "by simp"], ["proof (state)\nthis:\n  cts = cts' @ [ct1, ct2, ct3]\n\ngoal (1 subgoal):\n 1. \\<exists>cts' ct1 ct2 ct3.\n       cts = cts' @ [ct1, ct2, ct3] \\<and> ct_eq ct3 (TSome T_i32)", "obtain nat where \"length cts = Suc (Suc (Suc nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>nat.\n        length cts = Suc (Suc (Suc nat)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(2)"], ["proof (prove)\nusing this:\n  3 \\<le> length cts\n\ngoal (1 subgoal):\n 1. (\\<And>nat.\n        length cts = Suc (Suc (Suc nat)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (simp add: cts_def)"], ["proof (state)\nthis:\n  length cts = Suc (Suc (Suc nat))\n\ngoal (1 subgoal):\n 1. \\<exists>cts' ct1 ct2 ct3.\n       cts = cts' @ [ct1, ct2, ct3] \\<and> ct_eq ct3 (TSome T_i32)", "hence \"(type_update (TopType cts) [TAny, TAny, TSome T_i32] (select_return_top cts (cts ! (length cts - 2)) (cts ! (length cts - 3)))) = TopType ctm\""], ["proof (prove)\nusing this:\n  length cts = Suc (Suc (Suc nat))\n\ngoal (1 subgoal):\n 1. type_update (TopType cts) [TAny, TAny, TSome T_i32]\n     (select_return_top cts (cts ! (length cts - 2))\n       (cts ! (length cts - 3))) =\n    TopType ctm", "using assms"], ["proof (prove)\nusing this:\n  length cts = Suc (Suc (Suc nat))\n  type_update_select (TopType cts) = TopType ctm\n  3 \\<le> length cts\n\ngoal (1 subgoal):\n 1. type_update (TopType cts) [TAny, TAny, TSome T_i32]\n     (select_return_top cts (cts ! (length cts - 2))\n       (cts ! (length cts - 3))) =\n    TopType ctm", "by simp"], ["proof (state)\nthis:\n  type_update (TopType cts) [TAny, TAny, TSome T_i32]\n   (select_return_top cts (cts ! (length cts - 2))\n     (cts ! (length cts - 3))) =\n  TopType ctm\n\ngoal (1 subgoal):\n 1. \\<exists>cts' ct1 ct2 ct3.\n       cts = cts' @ [ct1, ct2, ct3] \\<and> ct_eq ct3 (TSome T_i32)", "then"], ["proof (chain)\npicking this:\n  type_update (TopType cts) [TAny, TAny, TSome T_i32]\n   (select_return_top cts (cts ! (length cts - 2))\n     (cts ! (length cts - 3))) =\n  TopType ctm", "obtain c_mid where \"consume (TopType cts) [TAny, TAny, TSome T_i32] = TopType c_mid\""], ["proof (prove)\nusing this:\n  type_update (TopType cts) [TAny, TAny, TSome T_i32]\n   (select_return_top cts (cts ! (length cts - 2))\n     (cts ! (length cts - 3))) =\n  TopType ctm\n\ngoal (1 subgoal):\n 1. (\\<And>c_mid.\n        consume (TopType cts) [TAny, TAny, TSome T_i32] =\n        TopType c_mid \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis consume.simps(2) produce.simps(6) type_update.simps)"], ["proof (state)\nthis:\n  consume (TopType cts) [TAny, TAny, TSome T_i32] = TopType c_mid\n\ngoal (1 subgoal):\n 1. \\<exists>cts' ct1 ct2 ct3.\n       cts = cts' @ [ct1, ct2, ct3] \\<and> ct_eq ct3 (TSome T_i32)", "hence \"ct_suffix [TAny, TAny, TSome T_i32] (cts'@ [ct1,ct2,ct3])\""], ["proof (prove)\nusing this:\n  consume (TopType cts) [TAny, TAny, TSome T_i32] = TopType c_mid\n\ngoal (1 subgoal):\n 1. ct_suffix [TAny, TAny, TSome T_i32] (cts' @ [ct1, ct2, ct3])", "using assms(2) consume_top_geq cts_def2"], ["proof (prove)\nusing this:\n  consume (TopType cts) [TAny, TAny, TSome T_i32] = TopType c_mid\n  3 \\<le> length cts\n  \\<lbrakk>consume (TopType ?ts) ?ts' = ?c_t; length ?ts' \\<le> length ?ts;\n   ?c_t \\<noteq> Bot\\<rbrakk>\n  \\<Longrightarrow> \\<exists>as bs.\n                       ?ts = as @ bs \\<and>\n                       ct_list_eq bs ?ts' \\<and> ?c_t = TopType as\n  cts = cts' @ [ct1, ct2, ct3]\n\ngoal (1 subgoal):\n 1. ct_suffix [TAny, TAny, TSome T_i32] (cts' @ [ct1, ct2, ct3])", "by (metis checker_type.distinct(3) ct_suffix_def length_Cons list.size(3) numeral_3_eq_3)"], ["proof (state)\nthis:\n  ct_suffix [TAny, TAny, TSome T_i32] (cts' @ [ct1, ct2, ct3])\n\ngoal (1 subgoal):\n 1. \\<exists>cts' ct1 ct2 ct3.\n       cts = cts' @ [ct1, ct2, ct3] \\<and> ct_eq ct3 (TSome T_i32)", "hence \"ct_eq ct3 (TSome T_i32)\""], ["proof (prove)\nusing this:\n  ct_suffix [TAny, TAny, TSome T_i32] (cts' @ [ct1, ct2, ct3])\n\ngoal (1 subgoal):\n 1. ct_eq ct3 (TSome T_i32)", "using ct_suffix_def ct_list_eq_def"], ["proof (prove)\nusing this:\n  ct_suffix [TAny, TAny, TSome T_i32] (cts' @ [ct1, ct2, ct3])\n  ct_suffix ?xs ?ys =\n  (\\<exists>as bs. ?ys = as @ bs \\<and> ct_list_eq bs ?xs)\n  ct_list_eq ?ct1s ?ct2s = list_all2 ct_eq ?ct1s ?ct2s\n\ngoal (1 subgoal):\n 1. ct_eq ct3 (TSome T_i32)", "by (simp, metis append_eq_append_conv length_Cons list_all2_Cons list_all2_lengthD)"], ["proof (state)\nthis:\n  ct_eq ct3 (TSome T_i32)\n\ngoal (1 subgoal):\n 1. \\<exists>cts' ct1 ct2 ct3.\n       cts = cts' @ [ct1, ct2, ct3] \\<and> ct_eq ct3 (TSome T_i32)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ct_eq ct3 (TSome T_i32)\n\ngoal (1 subgoal):\n 1. \\<exists>cts' ct1 ct2 ct3.\n       cts = cts' @ [ct1, ct2, ct3] \\<and> ct_eq ct3 (TSome T_i32)", "using cts_def2"], ["proof (prove)\nusing this:\n  ct_eq ct3 (TSome T_i32)\n  cts = cts' @ [ct1, ct2, ct3]\n\ngoal (1 subgoal):\n 1. \\<exists>cts' ct1 ct2 ct3.\n       cts = cts' @ [ct1, ct2, ct3] \\<and> ct_eq ct3 (TSome T_i32)", "by simp"], ["proof (state)\nthis:\n  \\<exists>cts' ct1 ct2 ct3.\n     cts = cts' @ [ct1, ct2, ct3] \\<and> ct_eq ct3 (TSome T_i32)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma type_update_select_type_length3:\n  assumes \"type_update_select (Type tn) = (Type tm)\"\n  shows \"\\<exists>t ts'. tn = ts'@[t, t, T_i32]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t ts'. tn = ts' @ [t, t, T_i32]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>t ts'. tn = ts' @ [t, t, T_i32]", "have tn_cond:\"(length tn \\<ge> 3 \\<and> (tn!(length tn-2)) = (tn!(length tn-3)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 3 \\<le> length tn \\<and> tn ! (length tn - 2) = tn ! (length tn - 3)", "using assms"], ["proof (prove)\nusing this:\n  type_update_select (Type tn) = Type tm\n\ngoal (1 subgoal):\n 1. 3 \\<le> length tn \\<and> tn ! (length tn - 2) = tn ! (length tn - 3)", "by (simp, metis checker_type.distinct(5))"], ["proof (state)\nthis:\n  3 \\<le> length tn \\<and> tn ! (length tn - 2) = tn ! (length tn - 3)\n\ngoal (1 subgoal):\n 1. \\<exists>t ts'. tn = ts' @ [t, t, T_i32]", "hence tm_def:\"consume (Type tn) [TAny, TSome T_i32] = Type tm\""], ["proof (prove)\nusing this:\n  3 \\<le> length tn \\<and> tn ! (length tn - 2) = tn ! (length tn - 3)\n\ngoal (1 subgoal):\n 1. consume (Type tn) [TAny, TSome T_i32] = Type tm", "using assms"], ["proof (prove)\nusing this:\n  3 \\<le> length tn \\<and> tn ! (length tn - 2) = tn ! (length tn - 3)\n  type_update_select (Type tn) = Type tm\n\ngoal (1 subgoal):\n 1. consume (Type tn) [TAny, TSome T_i32] = Type tm", "by simp"], ["proof (state)\nthis:\n  consume (Type tn) [TAny, TSome T_i32] = Type tm\n\ngoal (1 subgoal):\n 1. \\<exists>t ts'. tn = ts' @ [t, t, T_i32]", "obtain tn' tn'' where tn_split:\"tn = tn'@tn''\"\n                                 \"length tn'' = 3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>tn' tn''.\n        \\<lbrakk>tn = tn' @ tn''; length tn'' = 3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms tn_cond"], ["proof (prove)\nusing this:\n  type_update_select (Type tn) = Type tm\n  3 \\<le> length tn \\<and> tn ! (length tn - 2) = tn ! (length tn - 3)\n\ngoal (1 subgoal):\n 1. (\\<And>tn' tn''.\n        \\<lbrakk>tn = tn' @ tn''; length tn'' = 3\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis append_take_drop_id diff_diff_cancel length_drop)"], ["proof (state)\nthis:\n  tn = tn' @ tn''\n  length tn'' = 3\n\ngoal (1 subgoal):\n 1. \\<exists>t ts'. tn = ts' @ [t, t, T_i32]", "then"], ["proof (chain)\npicking this:\n  tn = tn' @ tn''\n  length tn'' = 3", "obtain t1 tn''2 where \"tn'' = t1#tn''2\" \"length tn''2 = Suc (Suc 0)\""], ["proof (prove)\nusing this:\n  tn = tn' @ tn''\n  length tn'' = 3\n\ngoal (1 subgoal):\n 1. (\\<And>t1 tn''2.\n        \\<lbrakk>tn'' = t1 # tn''2; length tn''2 = Suc (Suc 0)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis length_Suc_conv numeral_3_eq_3)"], ["proof (state)\nthis:\n  tn'' = t1 # tn''2\n  length tn''2 = Suc (Suc 0)\n\ngoal (1 subgoal):\n 1. \\<exists>t ts'. tn = ts' @ [t, t, T_i32]", "then"], ["proof (chain)\npicking this:\n  tn'' = t1 # tn''2\n  length tn''2 = Suc (Suc 0)", "obtain t2 t3 where tn''_def:\"tn'' = [t1,t2,t3]\""], ["proof (prove)\nusing this:\n  tn'' = t1 # tn''2\n  length tn''2 = Suc (Suc 0)\n\ngoal (1 subgoal):\n 1. (\\<And>t2 t3.\n        tn'' = [t1, t2, t3] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using List.length_Suc_conv[of tn''2 \"Suc 0\"]"], ["proof (prove)\nusing this:\n  tn'' = t1 # tn''2\n  length tn''2 = Suc (Suc 0)\n  (length tn''2 = Suc (Suc 0)) =\n  (\\<exists>y ys. tn''2 = y # ys \\<and> length ys = Suc 0)\n\ngoal (1 subgoal):\n 1. (\\<And>t2 t3.\n        tn'' = [t1, t2, t3] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis length_0_conv length_Suc_conv)"], ["proof (state)\nthis:\n  tn'' = [t1, t2, t3]\n\ngoal (1 subgoal):\n 1. \\<exists>t ts'. tn = ts' @ [t, t, T_i32]", "hence tn_def:\"tn = tn'@ [t1,t2,t3]\""], ["proof (prove)\nusing this:\n  tn'' = [t1, t2, t3]\n\ngoal (1 subgoal):\n 1. tn = tn' @ [t1, t2, t3]", "using tn_split"], ["proof (prove)\nusing this:\n  tn'' = [t1, t2, t3]\n  tn = tn' @ tn''\n  length tn'' = 3\n\ngoal (1 subgoal):\n 1. tn = tn' @ [t1, t2, t3]", "by simp"], ["proof (state)\nthis:\n  tn = tn' @ [t1, t2, t3]\n\ngoal (1 subgoal):\n 1. \\<exists>t ts'. tn = ts' @ [t, t, T_i32]", "hence t1_t2_eq:\"t1 = t2\""], ["proof (prove)\nusing this:\n  tn = tn' @ [t1, t2, t3]\n\ngoal (1 subgoal):\n 1. t1 = t2", "using tn_cond"], ["proof (prove)\nusing this:\n  tn = tn' @ [t1, t2, t3]\n  3 \\<le> length tn \\<and> tn ! (length tn - 2) = tn ! (length tn - 3)\n\ngoal (1 subgoal):\n 1. t1 = t2", "by (metis (no_types, lifting) Suc_diff_Suc Suc_eq_plus1_left Suc_lessD tn''_def\n                                  add_diff_cancel_right' diff_is_0_eq length_append neq0_conv\n                                  not_less_eq_eq nth_Cons_0 nth_Cons_numeral\n                                  nth_append numeral_2_eq_2 numeral_3_eq_3 numeral_One tn_split(2)\n                                  zero_less_diff)"], ["proof (state)\nthis:\n  t1 = t2\n\ngoal (1 subgoal):\n 1. \\<exists>t ts'. tn = ts' @ [t, t, T_i32]", "have \"ct_suffix [TAny, TSome T_i32] (to_ct_list (tn' @ [t1, t2, t3]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix [TAny, TSome T_i32] (to_ct_list (tn' @ [t1, t2, t3]))", "using tn_def tm_def"], ["proof (prove)\nusing this:\n  tn = tn' @ [t1, t2, t3]\n  consume (Type tn) [TAny, TSome T_i32] = Type tm\n\ngoal (1 subgoal):\n 1. ct_suffix [TAny, TSome T_i32] (to_ct_list (tn' @ [t1, t2, t3]))", "by (simp, metis checker_type.distinct(5))"], ["proof (state)\nthis:\n  ct_suffix [TAny, TSome T_i32] (to_ct_list (tn' @ [t1, t2, t3]))\n\ngoal (1 subgoal):\n 1. \\<exists>t ts'. tn = ts' @ [t, t, T_i32]", "hence \"t3 = T_i32\""], ["proof (prove)\nusing this:\n  ct_suffix [TAny, TSome T_i32] (to_ct_list (tn' @ [t1, t2, t3]))\n\ngoal (1 subgoal):\n 1. t3 = T_i32", "using ct_suffix_unfold_one[of \"[TAny]\" \"TSome T_i32\" \"to_ct_list (tn' @ [t1, t2])\" \"TSome t3\"]\n          ct_eq.simps(1)"], ["proof (prove)\nusing this:\n  ct_suffix [TAny, TSome T_i32] (to_ct_list (tn' @ [t1, t2, t3]))\n  ct_suffix ([TAny] @ [TSome T_i32])\n   (to_ct_list (tn' @ [t1, t2]) @ [TSome t3]) =\n  (ct_eq (TSome T_i32) (TSome t3) \\<and>\n   ct_suffix [TAny] (to_ct_list (tn' @ [t1, t2])))\n  ct_eq (TSome ?t) (TSome ?t') = (?t = ?t')\n\ngoal (1 subgoal):\n 1. t3 = T_i32", "unfolding to_ct_list_def"], ["proof (prove)\nusing this:\n  ct_suffix [TAny, TSome T_i32] (map TSome (tn' @ [t1, t2, t3]))\n  ct_suffix ([TAny] @ [TSome T_i32])\n   (map TSome (tn' @ [t1, t2]) @ [TSome t3]) =\n  (ct_eq (TSome T_i32) (TSome t3) \\<and>\n   ct_suffix [TAny] (map TSome (tn' @ [t1, t2])))\n  ct_eq (TSome ?t) (TSome ?t') = (?t = ?t')\n\ngoal (1 subgoal):\n 1. t3 = T_i32", "by simp"], ["proof (state)\nthis:\n  t3 = T_i32\n\ngoal (1 subgoal):\n 1. \\<exists>t ts'. tn = ts' @ [t, t, T_i32]", "thus ?thesis"], ["proof (prove)\nusing this:\n  t3 = T_i32\n\ngoal (1 subgoal):\n 1. \\<exists>t ts'. tn = ts' @ [t, t, T_i32]", "using t1_t2_eq tn_def"], ["proof (prove)\nusing this:\n  t3 = T_i32\n  t1 = t2\n  tn = tn' @ [t1, t2, t3]\n\ngoal (1 subgoal):\n 1. \\<exists>t ts'. tn = ts' @ [t, t, T_i32]", "by simp"], ["proof (state)\nthis:\n  \\<exists>t ts'. tn = ts' @ [t, t, T_i32]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma select_return_top_exists:\n  assumes \"select_return_top cts c1 c2 = ctm\"\n          \"ctm \\<noteq> Bot\"\n  shows \"\\<exists>xs. ctm = TopType xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs. ctm = TopType xs", "using assms"], ["proof (prove)\nusing this:\n  select_return_top cts c1 c2 = ctm\n  ctm \\<noteq> Bot\n\ngoal (1 subgoal):\n 1. \\<exists>xs. ctm = TopType xs", "by (meson select_return_top.elims)"], ["", "lemma type_update_select_top_exists:\n  assumes \"type_update_select xs = (TopType tm)\"\n  shows \"\\<exists>tn. xs = TopType tn\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>tn. xs = TopType tn", "using assms"], ["proof (prove)\nusing this:\n  type_update_select xs = TopType tm\n\ngoal (1 subgoal):\n 1. \\<exists>tn. xs = TopType tn", "proof (cases xs)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>type_update_select xs = TopType tm; xs = TopType x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = TopType tn\n 2. \\<And>x2.\n       \\<lbrakk>type_update_select xs = TopType tm; xs = Type x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = TopType tn\n 3. \\<lbrakk>type_update_select xs = TopType tm; xs = Bot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>tn. xs = TopType tn", "case (Type x2)"], ["proof (state)\nthis:\n  xs = Type x2\n\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>type_update_select xs = TopType tm; xs = TopType x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = TopType tn\n 2. \\<And>x2.\n       \\<lbrakk>type_update_select xs = TopType tm; xs = Type x2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = TopType tn\n 3. \\<lbrakk>type_update_select xs = TopType tm; xs = Bot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>tn. xs = TopType tn", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs = Type x2\n\ngoal (1 subgoal):\n 1. \\<exists>tn. xs = TopType tn", "using assms"], ["proof (prove)\nusing this:\n  xs = Type x2\n  type_update_select xs = TopType tm\n\ngoal (1 subgoal):\n 1. \\<exists>tn. xs = TopType tn", "by (simp, metis checker_type.distinct(1) checker_type.distinct(3) consume.simps(1))"], ["proof (state)\nthis:\n  \\<exists>tn. xs = TopType tn\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>type_update_select xs = TopType tm; xs = TopType x1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>tn. xs = TopType tn\n 2. \\<lbrakk>type_update_select xs = TopType tm; xs = Bot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>tn. xs = TopType tn", "qed simp_all"], ["", "lemma type_update_select_conv_select_return_top:\n  assumes \"ct_suffix [TSome T_i32] cts\"\n          \"length cts \\<ge> 3\"\n  shows \"type_update_select (TopType cts) = (select_return_top cts (cts!(length cts-2)) (cts!(length cts-3)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. type_update_select (TopType cts) =\n    select_return_top cts (cts ! (length cts - 2)) (cts ! (length cts - 3))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. type_update_select (TopType cts) =\n    select_return_top cts (cts ! (length cts - 2)) (cts ! (length cts - 3))", "obtain nat where nat_def:\"length cts = Suc (Suc (Suc nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>nat.\n        length cts = Suc (Suc (Suc nat)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(2)"], ["proof (prove)\nusing this:\n  3 \\<le> length cts\n\ngoal (1 subgoal):\n 1. (\\<And>nat.\n        length cts = Suc (Suc (Suc nat)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis add_eq_if diff_Suc_1 le_Suc_ex numeral_3_eq_3 nat.distinct(2))"], ["proof (state)\nthis:\n  length cts = Suc (Suc (Suc nat))\n\ngoal (1 subgoal):\n 1. type_update_select (TopType cts) =\n    select_return_top cts (cts ! (length cts - 2)) (cts ! (length cts - 3))", "have \"ct_suffix [TAny, TAny, TSome T_i32] cts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ct_suffix [TAny, TAny, TSome T_i32] cts", "using assms ct_suffix_extend_any1"], ["proof (prove)\nusing this:\n  ct_suffix [TSome T_i32] cts\n  3 \\<le> length cts\n  \\<lbrakk>ct_suffix ?xs ?ys; length ?xs < length ?ys\\<rbrakk>\n  \\<Longrightarrow> ct_suffix (TAny # ?xs) ?ys\n\ngoal (1 subgoal):\n 1. ct_suffix [TAny, TAny, TSome T_i32] cts", "by simp"], ["proof (state)\nthis:\n  ct_suffix [TAny, TAny, TSome T_i32] cts\n\ngoal (1 subgoal):\n 1. type_update_select (TopType cts) =\n    select_return_top cts (cts ! (length cts - 2)) (cts ! (length cts - 3))", "then"], ["proof (chain)\npicking this:\n  ct_suffix [TAny, TAny, TSome T_i32] cts", "obtain cts' where \"consume (TopType cts) [TAny, TAny, TSome T_i32] = TopType cts'\""], ["proof (prove)\nusing this:\n  ct_suffix [TAny, TAny, TSome T_i32] cts\n\ngoal (1 subgoal):\n 1. (\\<And>cts'.\n        consume (TopType cts) [TAny, TAny, TSome T_i32] =\n        TopType cts' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  consume (TopType cts) [TAny, TAny, TSome T_i32] = TopType cts'\n\ngoal (1 subgoal):\n 1. type_update_select (TopType cts) =\n    select_return_top cts (cts ! (length cts - 2)) (cts ! (length cts - 3))", "thus ?thesis"], ["proof (prove)\nusing this:\n  consume (TopType cts) [TAny, TAny, TSome T_i32] = TopType cts'\n\ngoal (1 subgoal):\n 1. type_update_select (TopType cts) =\n    select_return_top cts (cts ! (length cts - 2)) (cts ! (length cts - 3))", "using nat_def select_return_top_exists"], ["proof (prove)\nusing this:\n  consume (TopType cts) [TAny, TAny, TSome T_i32] = TopType cts'\n  length cts = Suc (Suc (Suc nat))\n  \\<lbrakk>select_return_top ?cts ?c1.0 ?c2.0 = ?ctm;\n   ?ctm \\<noteq> Bot\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xs. ?ctm = TopType xs\n\ngoal (1 subgoal):\n 1. type_update_select (TopType cts) =\n    select_return_top cts (cts ! (length cts - 2)) (cts ! (length cts - 3))", "apply (cases \"select_return_top cts (cts ! Suc nat) (cts ! nat)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>consume (TopType cts) [TAny, TAny, TSome T_i32] =\n                TopType cts';\n        length cts = Suc (Suc (Suc nat));\n        \\<And>cts c1 c2 ctm.\n           \\<lbrakk>select_return_top cts c1 c2 = ctm;\n            ctm \\<noteq> Bot\\<rbrakk>\n           \\<Longrightarrow> \\<exists>xs. ctm = TopType xs;\n        select_return_top cts (cts ! Suc nat) (cts ! nat) =\n        TopType x1\\<rbrakk>\n       \\<Longrightarrow> type_update_select (TopType cts) =\n                         select_return_top cts (cts ! (length cts - 2))\n                          (cts ! (length cts - 3))\n 2. \\<And>x2.\n       \\<lbrakk>consume (TopType cts) [TAny, TAny, TSome T_i32] =\n                TopType cts';\n        length cts = Suc (Suc (Suc nat));\n        \\<And>cts c1 c2 ctm.\n           \\<lbrakk>select_return_top cts c1 c2 = ctm;\n            ctm \\<noteq> Bot\\<rbrakk>\n           \\<Longrightarrow> \\<exists>xs. ctm = TopType xs;\n        select_return_top cts (cts ! Suc nat) (cts ! nat) = Type x2\\<rbrakk>\n       \\<Longrightarrow> type_update_select (TopType cts) =\n                         select_return_top cts (cts ! (length cts - 2))\n                          (cts ! (length cts - 3))\n 3. \\<lbrakk>consume (TopType cts) [TAny, TAny, TSome T_i32] = TopType cts';\n     length cts = Suc (Suc (Suc nat));\n     \\<And>cts c1 c2 ctm.\n        \\<lbrakk>select_return_top cts c1 c2 = ctm;\n         ctm \\<noteq> Bot\\<rbrakk>\n        \\<Longrightarrow> \\<exists>xs. ctm = TopType xs;\n     select_return_top cts (cts ! Suc nat) (cts ! nat) = Bot\\<rbrakk>\n    \\<Longrightarrow> type_update_select (TopType cts) =\n                      select_return_top cts (cts ! (length cts - 2))\n                       (cts ! (length cts - 3))", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>(if ct_suffix [TAny, TAny, TSome T_i32] cts\n                 then TopType\n                       (take (length cts - length [TAny, TAny, TSome T_i32])\n                         cts)\n                 else if ct_suffix cts [TAny, TAny, TSome T_i32]\n                      then TopType [] else Bot) =\n                TopType cts';\n        length cts = Suc (Suc (Suc nat));\n        \\<And>cts c1 c2.\n           select_return_top cts c1 c2 \\<noteq> Bot \\<Longrightarrow>\n           \\<exists>xs. select_return_top cts c1 c2 = TopType xs;\n        select_return_top cts (cts ! Suc nat) (cts ! nat) = Type x2\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis checker_type.distinct(1) checker_type.distinct(5))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  type_update_select (TopType cts) =\n  select_return_top cts (cts ! (length cts - 2)) (cts ! (length cts - 3))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma select_return_top_ct_eq:\n  assumes \"select_return_top cts c1 c2 = TopType ctm\"\n          \"length cts \\<ge> 3\"\n          \"c_types_agree (TopType ctm) cm\"\n  shows \"\\<exists>c' cm'. cm = cm'@[c']\n                  \\<and> ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\n                  \\<and> ct_eq c1 (TSome c')\n                  \\<and> ct_eq c2 (TSome c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "proof (cases c1)"], ["proof (state)\ngoal (2 subgoals):\n 1. c1 = TAny \\<Longrightarrow>\n    \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')\n 2. \\<And>x2.\n       c1 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "case TAny"], ["proof (state)\nthis:\n  c1 = TAny\n\ngoal (2 subgoals):\n 1. c1 = TAny \\<Longrightarrow>\n    \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')\n 2. \\<And>x2.\n       c1 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "note outer_TAny = TAny"], ["proof (state)\nthis:\n  c1 = TAny\n\ngoal (2 subgoals):\n 1. c1 = TAny \\<Longrightarrow>\n    \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')\n 2. \\<And>x2.\n       c1 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "proof (cases c2)"], ["proof (state)\ngoal (2 subgoals):\n 1. c2 = TAny \\<Longrightarrow>\n    \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')\n 2. \\<And>x2.\n       c2 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "case TAny"], ["proof (state)\nthis:\n  c2 = TAny\n\ngoal (2 subgoals):\n 1. c2 = TAny \\<Longrightarrow>\n    \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')\n 2. \\<And>x2.\n       c2 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "hence \"take (length cts - 3) cts @ [TAny] = ctm\""], ["proof (prove)\nusing this:\n  c2 = TAny\n\ngoal (1 subgoal):\n 1. take (length cts - 3) cts @ [TAny] = ctm", "using outer_TAny  assms ct_suffix_cons_ct_list"], ["proof (prove)\nusing this:\n  c2 = TAny\n  c1 = TAny\n  select_return_top cts c1 c2 = TopType ctm\n  3 \\<le> length cts\n  c_types_agree (TopType ctm) cm\n  ct_suffix (?xs @ ?ys) (to_ct_list ?zs) \\<Longrightarrow>\n  \\<exists>as bs.\n     ?zs = as @ bs \\<and>\n     ct_list_eq ?ys (to_ct_list bs) \\<and> ct_suffix ?xs (to_ct_list as)\n\ngoal (1 subgoal):\n 1. take (length cts - 3) cts @ [TAny] = ctm", "by simp"], ["proof (state)\nthis:\n  take (length cts - 3) cts @ [TAny] = ctm\n\ngoal (2 subgoals):\n 1. c2 = TAny \\<Longrightarrow>\n    \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')\n 2. \\<And>x2.\n       c2 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "then"], ["proof (chain)\npicking this:\n  take (length cts - 3) cts @ [TAny] = ctm", "obtain cm' c where \"cm = cm' @ [c]\"\n                            \"ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\""], ["proof (prove)\nusing this:\n  take (length cts - 3) cts @ [TAny] = ctm\n\ngoal (1 subgoal):\n 1. (\\<And>cm' c.\n        \\<lbrakk>cm = cm' @ [c];\n         ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ct_suffix_cons_ct_list[of \"take (length cts - 3) cts\" \"[TAny]\"]\n            assms(3) c_types_agree.simps(2)[of ctm cm]"], ["proof (prove)\nusing this:\n  take (length cts - 3) cts @ [TAny] = ctm\n  ct_suffix (take (length cts - 3) cts @ [TAny])\n   (to_ct_list ?zs) \\<Longrightarrow>\n  \\<exists>as bs.\n     ?zs = as @ bs \\<and>\n     ct_list_eq [TAny] (to_ct_list bs) \\<and>\n     ct_suffix (take (length cts - 3) cts) (to_ct_list as)\n  c_types_agree (TopType ctm) cm\n  c_types_agree (TopType ctm) cm = ct_suffix ctm (to_ct_list cm)\n\ngoal (1 subgoal):\n 1. (\\<And>cm' c.\n        \\<lbrakk>cm = cm' @ [c];\n         ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ct_list_eq_def to_ct_list_def"], ["proof (prove)\nusing this:\n  take (length cts - 3) cts @ [TAny] = ctm\n  ct_suffix (take (length cts - 3) cts @ [TAny])\n   (map TSome ?zs) \\<Longrightarrow>\n  \\<exists>as bs.\n     ?zs = as @ bs \\<and>\n     list_all2 ct_eq [TAny] (map TSome bs) \\<and>\n     ct_suffix (take (length cts - 3) cts) (map TSome as)\n  c_types_agree (TopType ctm) cm\n  c_types_agree (TopType ctm) cm = ct_suffix ctm (map TSome cm)\n\ngoal (1 subgoal):\n 1. (\\<And>cm' c.\n        \\<lbrakk>cm = cm' @ [c];\n         ct_suffix (take (length cts - 3) cts) (map TSome cm')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis Suc_leI impossible_Cons length_Cons length_map list.exhaust list.size(3)\n                list_all2_conv_all_nth zero_less_Suc)"], ["proof (state)\nthis:\n  cm = cm' @ [c]\n  ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\n\ngoal (2 subgoals):\n 1. c2 = TAny \\<Longrightarrow>\n    \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')\n 2. \\<And>x2.\n       c2 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "thus ?thesis"], ["proof (prove)\nusing this:\n  cm = cm' @ [c]\n  ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\n\ngoal (1 subgoal):\n 1. \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "using TAny outer_TAny ct_eq.simps(2)"], ["proof (prove)\nusing this:\n  cm = cm' @ [c]\n  ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\n  c2 = TAny\n  c1 = TAny\n  ct_eq TAny ?uu = True\n\ngoal (1 subgoal):\n 1. \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "by blast"], ["proof (state)\nthis:\n  \\<exists>c' cm'.\n     cm = cm' @ [c'] \\<and>\n     ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n     ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       c2 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       c2 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "case (TSome x2)"], ["proof (state)\nthis:\n  c2 = TSome x2\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       c2 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "hence \"take (length cts - 3) cts @ [TSome x2] = ctm\""], ["proof (prove)\nusing this:\n  c2 = TSome x2\n\ngoal (1 subgoal):\n 1. take (length cts - 3) cts @ [TSome x2] = ctm", "using outer_TAny assms ct_suffix_cons_ct_list"], ["proof (prove)\nusing this:\n  c2 = TSome x2\n  c1 = TAny\n  select_return_top cts c1 c2 = TopType ctm\n  3 \\<le> length cts\n  c_types_agree (TopType ctm) cm\n  ct_suffix (?xs @ ?ys) (to_ct_list ?zs) \\<Longrightarrow>\n  \\<exists>as bs.\n     ?zs = as @ bs \\<and>\n     ct_list_eq ?ys (to_ct_list bs) \\<and> ct_suffix ?xs (to_ct_list as)\n\ngoal (1 subgoal):\n 1. take (length cts - 3) cts @ [TSome x2] = ctm", "by simp"], ["proof (state)\nthis:\n  take (length cts - 3) cts @ [TSome x2] = ctm\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       c2 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "then"], ["proof (chain)\npicking this:\n  take (length cts - 3) cts @ [TSome x2] = ctm", "obtain cm' where \"cm = cm' @ [x2]\"\n                          \"ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\""], ["proof (prove)\nusing this:\n  take (length cts - 3) cts @ [TSome x2] = ctm\n\ngoal (1 subgoal):\n 1. (\\<And>cm'.\n        \\<lbrakk>cm = cm' @ [x2];\n         ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ct_suffix_cons_ct_list[of \"take (length cts - 3) cts\" \"[TSome x2]\"]\n            assms(3) c_types_agree.simps(2)[of ctm cm] ct_list_eq_ts_conv_eq"], ["proof (prove)\nusing this:\n  take (length cts - 3) cts @ [TSome x2] = ctm\n  ct_suffix (take (length cts - 3) cts @ [TSome x2])\n   (to_ct_list ?zs) \\<Longrightarrow>\n  \\<exists>as bs.\n     ?zs = as @ bs \\<and>\n     ct_list_eq [TSome x2] (to_ct_list bs) \\<and>\n     ct_suffix (take (length cts - 3) cts) (to_ct_list as)\n  c_types_agree (TopType ctm) cm\n  c_types_agree (TopType ctm) cm = ct_suffix ctm (to_ct_list cm)\n  ct_list_eq (to_ct_list ?ts) (to_ct_list ?ts') = (?ts = ?ts')\n\ngoal (1 subgoal):\n 1. (\\<And>cm'.\n        \\<lbrakk>cm = cm' @ [x2];\n         ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ct_list_eq_def to_ct_list_def"], ["proof (prove)\nusing this:\n  take (length cts - 3) cts @ [TSome x2] = ctm\n  ct_suffix (take (length cts - 3) cts @ [TSome x2])\n   (map TSome ?zs) \\<Longrightarrow>\n  \\<exists>as bs.\n     ?zs = as @ bs \\<and>\n     list_all2 ct_eq [TSome x2] (map TSome bs) \\<and>\n     ct_suffix (take (length cts - 3) cts) (map TSome as)\n  c_types_agree (TopType ctm) cm\n  c_types_agree (TopType ctm) cm = ct_suffix ctm (map TSome cm)\n  list_all2 ct_eq (map TSome ?ts) (map TSome ?ts') = (?ts = ?ts')\n\ngoal (1 subgoal):\n 1. (\\<And>cm'.\n        \\<lbrakk>cm = cm' @ [x2];\n         ct_suffix (take (length cts - 3) cts) (map TSome cm')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types, hide_lams) list.simps(8,9))"], ["proof (state)\nthis:\n  cm = cm' @ [x2]\n  ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       c2 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "thus ?thesis"], ["proof (prove)\nusing this:\n  cm = cm' @ [x2]\n  ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\n\ngoal (1 subgoal):\n 1. \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "using TSome outer_TAny"], ["proof (prove)\nusing this:\n  cm = cm' @ [x2]\n  ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\n  c2 = TSome x2\n  c1 = TAny\n\ngoal (1 subgoal):\n 1. \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "by simp"], ["proof (state)\nthis:\n  \\<exists>c' cm'.\n     cm = cm' @ [c'] \\<and>\n     ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n     ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c' cm'.\n     cm = cm' @ [c'] \\<and>\n     ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n     ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       c1 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       c1 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "case (TSome x2)"], ["proof (state)\nthis:\n  c1 = TSome x2\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       c1 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "note outer_TSome = TSome"], ["proof (state)\nthis:\n  c1 = TSome x2\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       c1 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "proof (cases c2)"], ["proof (state)\ngoal (2 subgoals):\n 1. c2 = TAny \\<Longrightarrow>\n    \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')\n 2. \\<And>x2.\n       c2 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "case TAny"], ["proof (state)\nthis:\n  c2 = TAny\n\ngoal (2 subgoals):\n 1. c2 = TAny \\<Longrightarrow>\n    \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')\n 2. \\<And>x2.\n       c2 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "hence \"take (length cts - 3) cts @ [TSome x2] = ctm\""], ["proof (prove)\nusing this:\n  c2 = TAny\n\ngoal (1 subgoal):\n 1. take (length cts - 3) cts @ [TSome x2] = ctm", "using TSome assms ct_suffix_cons_ct_list"], ["proof (prove)\nusing this:\n  c2 = TAny\n  c1 = TSome x2\n  select_return_top cts c1 c2 = TopType ctm\n  3 \\<le> length cts\n  c_types_agree (TopType ctm) cm\n  ct_suffix (?xs @ ?ys) (to_ct_list ?zs) \\<Longrightarrow>\n  \\<exists>as bs.\n     ?zs = as @ bs \\<and>\n     ct_list_eq ?ys (to_ct_list bs) \\<and> ct_suffix ?xs (to_ct_list as)\n\ngoal (1 subgoal):\n 1. take (length cts - 3) cts @ [TSome x2] = ctm", "by simp"], ["proof (state)\nthis:\n  take (length cts - 3) cts @ [TSome x2] = ctm\n\ngoal (2 subgoals):\n 1. c2 = TAny \\<Longrightarrow>\n    \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')\n 2. \\<And>x2.\n       c2 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "then"], ["proof (chain)\npicking this:\n  take (length cts - 3) cts @ [TSome x2] = ctm", "obtain cm' where \"cm = cm' @ [x2]\"\n                          \"ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\""], ["proof (prove)\nusing this:\n  take (length cts - 3) cts @ [TSome x2] = ctm\n\ngoal (1 subgoal):\n 1. (\\<And>cm'.\n        \\<lbrakk>cm = cm' @ [x2];\n         ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ct_suffix_cons_ct_list[of \"take (length cts - 3) cts\" \"[TSome x2]\"]\n            assms(3) c_types_agree.simps(2)[of ctm cm] ct_list_eq_ts_conv_eq"], ["proof (prove)\nusing this:\n  take (length cts - 3) cts @ [TSome x2] = ctm\n  ct_suffix (take (length cts - 3) cts @ [TSome x2])\n   (to_ct_list ?zs) \\<Longrightarrow>\n  \\<exists>as bs.\n     ?zs = as @ bs \\<and>\n     ct_list_eq [TSome x2] (to_ct_list bs) \\<and>\n     ct_suffix (take (length cts - 3) cts) (to_ct_list as)\n  c_types_agree (TopType ctm) cm\n  c_types_agree (TopType ctm) cm = ct_suffix ctm (to_ct_list cm)\n  ct_list_eq (to_ct_list ?ts) (to_ct_list ?ts') = (?ts = ?ts')\n\ngoal (1 subgoal):\n 1. (\\<And>cm'.\n        \\<lbrakk>cm = cm' @ [x2];\n         ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ct_list_eq_def to_ct_list_def"], ["proof (prove)\nusing this:\n  take (length cts - 3) cts @ [TSome x2] = ctm\n  ct_suffix (take (length cts - 3) cts @ [TSome x2])\n   (map TSome ?zs) \\<Longrightarrow>\n  \\<exists>as bs.\n     ?zs = as @ bs \\<and>\n     list_all2 ct_eq [TSome x2] (map TSome bs) \\<and>\n     ct_suffix (take (length cts - 3) cts) (map TSome as)\n  c_types_agree (TopType ctm) cm\n  c_types_agree (TopType ctm) cm = ct_suffix ctm (map TSome cm)\n  list_all2 ct_eq (map TSome ?ts) (map TSome ?ts') = (?ts = ?ts')\n\ngoal (1 subgoal):\n 1. (\\<And>cm'.\n        \\<lbrakk>cm = cm' @ [x2];\n         ct_suffix (take (length cts - 3) cts) (map TSome cm')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types, hide_lams) list.simps(8,9))"], ["proof (state)\nthis:\n  cm = cm' @ [x2]\n  ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\n\ngoal (2 subgoals):\n 1. c2 = TAny \\<Longrightarrow>\n    \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')\n 2. \\<And>x2.\n       c2 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "thus ?thesis"], ["proof (prove)\nusing this:\n  cm = cm' @ [x2]\n  ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\n\ngoal (1 subgoal):\n 1. \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "using TSome TAny"], ["proof (prove)\nusing this:\n  cm = cm' @ [x2]\n  ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\n  c1 = TSome x2\n  c2 = TAny\n\ngoal (1 subgoal):\n 1. \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "by simp"], ["proof (state)\nthis:\n  \\<exists>c' cm'.\n     cm = cm' @ [c'] \\<and>\n     ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n     ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       c2 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       c2 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "case (TSome x3)"], ["proof (state)\nthis:\n  c2 = TSome x3\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       c2 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "hence x_eq:\"x2 = x3\""], ["proof (prove)\nusing this:\n  c2 = TSome x3\n\ngoal (1 subgoal):\n 1. x2 = x3", "using outer_TSome assms ct_suffix_cons_ct_list"], ["proof (prove)\nusing this:\n  c2 = TSome x3\n  c1 = TSome x2\n  select_return_top cts c1 c2 = TopType ctm\n  3 \\<le> length cts\n  c_types_agree (TopType ctm) cm\n  ct_suffix (?xs @ ?ys) (to_ct_list ?zs) \\<Longrightarrow>\n  \\<exists>as bs.\n     ?zs = as @ bs \\<and>\n     ct_list_eq ?ys (to_ct_list bs) \\<and> ct_suffix ?xs (to_ct_list as)\n\ngoal (1 subgoal):\n 1. x2 = x3", "by (metis checker_type.distinct(3) select_return_top.simps(3))"], ["proof (state)\nthis:\n  x2 = x3\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       c2 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "hence \"take (length cts - 3) cts @ [TSome x2] = ctm\""], ["proof (prove)\nusing this:\n  x2 = x3\n\ngoal (1 subgoal):\n 1. take (length cts - 3) cts @ [TSome x2] = ctm", "using TSome outer_TSome assms ct_suffix_cons_ct_list"], ["proof (prove)\nusing this:\n  x2 = x3\n  c2 = TSome x3\n  c1 = TSome x2\n  select_return_top cts c1 c2 = TopType ctm\n  3 \\<le> length cts\n  c_types_agree (TopType ctm) cm\n  ct_suffix (?xs @ ?ys) (to_ct_list ?zs) \\<Longrightarrow>\n  \\<exists>as bs.\n     ?zs = as @ bs \\<and>\n     ct_list_eq ?ys (to_ct_list bs) \\<and> ct_suffix ?xs (to_ct_list as)\n\ngoal (1 subgoal):\n 1. take (length cts - 3) cts @ [TSome x2] = ctm", "by (metis checker_type.inject(1) select_return_top.simps(3))"], ["proof (state)\nthis:\n  take (length cts - 3) cts @ [TSome x2] = ctm\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       c2 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "then"], ["proof (chain)\npicking this:\n  take (length cts - 3) cts @ [TSome x2] = ctm", "obtain cm' where \"cm = cm' @ [x2]\"\n                          \"ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\""], ["proof (prove)\nusing this:\n  take (length cts - 3) cts @ [TSome x2] = ctm\n\ngoal (1 subgoal):\n 1. (\\<And>cm'.\n        \\<lbrakk>cm = cm' @ [x2];\n         ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ct_suffix_cons_ct_list[of \"take (length cts - 3) cts\" \"[TSome x2]\"]\n            assms(3) c_types_agree.simps(2)[of ctm cm] ct_list_eq_ts_conv_eq"], ["proof (prove)\nusing this:\n  take (length cts - 3) cts @ [TSome x2] = ctm\n  ct_suffix (take (length cts - 3) cts @ [TSome x2])\n   (to_ct_list ?zs) \\<Longrightarrow>\n  \\<exists>as bs.\n     ?zs = as @ bs \\<and>\n     ct_list_eq [TSome x2] (to_ct_list bs) \\<and>\n     ct_suffix (take (length cts - 3) cts) (to_ct_list as)\n  c_types_agree (TopType ctm) cm\n  c_types_agree (TopType ctm) cm = ct_suffix ctm (to_ct_list cm)\n  ct_list_eq (to_ct_list ?ts) (to_ct_list ?ts') = (?ts = ?ts')\n\ngoal (1 subgoal):\n 1. (\\<And>cm'.\n        \\<lbrakk>cm = cm' @ [x2];\n         ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding ct_list_eq_def to_ct_list_def"], ["proof (prove)\nusing this:\n  take (length cts - 3) cts @ [TSome x2] = ctm\n  ct_suffix (take (length cts - 3) cts @ [TSome x2])\n   (map TSome ?zs) \\<Longrightarrow>\n  \\<exists>as bs.\n     ?zs = as @ bs \\<and>\n     list_all2 ct_eq [TSome x2] (map TSome bs) \\<and>\n     ct_suffix (take (length cts - 3) cts) (map TSome as)\n  c_types_agree (TopType ctm) cm\n  c_types_agree (TopType ctm) cm = ct_suffix ctm (map TSome cm)\n  list_all2 ct_eq (map TSome ?ts) (map TSome ?ts') = (?ts = ?ts')\n\ngoal (1 subgoal):\n 1. (\\<And>cm'.\n        \\<lbrakk>cm = cm' @ [x2];\n         ct_suffix (take (length cts - 3) cts) (map TSome cm')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types, hide_lams) list.simps(8,9))"], ["proof (state)\nthis:\n  cm = cm' @ [x2]\n  ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       c2 = TSome x2 \\<Longrightarrow>\n       \\<exists>c' cm'.\n          cm = cm' @ [c'] \\<and>\n          ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n          ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "thus ?thesis"], ["proof (prove)\nusing this:\n  cm = cm' @ [x2]\n  ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\n\ngoal (1 subgoal):\n 1. \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "using TSome outer_TSome x_eq"], ["proof (prove)\nusing this:\n  cm = cm' @ [x2]\n  ct_suffix (take (length cts - 3) cts) (to_ct_list cm')\n  c2 = TSome x3\n  c1 = TSome x2\n  x2 = x3\n\ngoal (1 subgoal):\n 1. \\<exists>c' cm'.\n       cm = cm' @ [c'] \\<and>\n       ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n       ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')", "by simp"], ["proof (state)\nthis:\n  \\<exists>c' cm'.\n     cm = cm' @ [c'] \\<and>\n     ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n     ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c' cm'.\n     cm = cm' @ [c'] \\<and>\n     ct_suffix (take (length cts - 3) cts) (to_ct_list cm') \\<and>\n     ct_eq c1 (TSome c') \\<and> ct_eq c2 (TSome c')\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}